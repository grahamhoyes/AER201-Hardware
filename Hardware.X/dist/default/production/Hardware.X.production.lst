

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Feb 22 18:48:39 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    42  0000                     
    43                           ; Version 1.45
    44                           ; Generated 16/11/2017 GMT
    45                           ; 
    46                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC18F4620 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     
    78                           	psect	idataCOMRAM
    79  00EC88                     __pidataCOMRAM:
    80                           	opt stack 0
    81                           
    82                           ;initializer for inputEntry@F3142
    83  00EC88  43                 	db	67
    84  00EC89  30                 	db	48
    85                           
    86                           	psect	idataBANK1
    87  00F033                     __pidataBANK1:
    88                           	opt stack 0
    89                           
    90                           ;initializer for _fSLookup
    91  00F033  4E                 	db	78
    92  00F034  4F                 	db	79
    93  00F035  4E                 	db	78
    94  00F036  45                 	db	69
    95  00F037  00                 	db	0
    96  00F038  42                 	db	66
    97  00F039  00                 	db	0
    98  00F03A  00                 	db	0
    99  00F03B  00                 	db	0
   100  00F03C  00                 	db	0
   101  00F03D  4E                 	db	78
   102  00F03E  00                 	db	0
   103  00F03F  00                 	db	0
   104  00F040  00                 	db	0
   105  00F041  00                 	db	0
   106  00F042  53                 	db	83
   107  00F043  00                 	db	0
   108  00F044  00                 	db	0
   109  00F045  00                 	db	0
   110  00F046  00                 	db	0
   111  00F047  57                 	db	87
   112  00F048  00                 	db	0
   113  00F049  00                 	db	0
   114  00F04A  00                 	db	0
   115  00F04B  00                 	db	0
   116  00F04C  42                 	db	66
   117  00F04D  4E                 	db	78
   118  00F04E  00                 	db	0
   119  00F04F  00                 	db	0
   120  00F050  00                 	db	0
   121  00F051  42                 	db	66
   122  00F052  53                 	db	83
   123  00F053  00                 	db	0
   124  00F054  00                 	db	0
   125  00F055  00                 	db	0
   126  00F056  42                 	db	66
   127  00F057  57                 	db	87
   128  00F058  00                 	db	0
   129  00F059  00                 	db	0
   130  00F05A  00                 	db	0
   131  00F05B  42                 	db	66
   132  00F05C  42                 	db	66
   133  00F05D  4E                 	db	78
   134  00F05E  00                 	db	0
   135  00F05F  00                 	db	0
   136  00F060  42                 	db	66
   137  00F061  42                 	db	66
   138  00F062  53                 	db	83
   139  00F063  00                 	db	0
   140  00F064  00                 	db	0
   141  00F065  42                 	db	66
   142  00F066  42                 	db	66
   143  00F067  57                 	db	87
   144  00F068  00                 	db	0
   145  00F069  00                 	db	0
   146  00F06A  42                 	db	66
   147  00F06B  4E                 	db	78
   148  00F06C  57                 	db	87
   149  00F06D  00                 	db	0
   150  00F06E  00                 	db	0
   151  00F06F  42                 	db	66
   152  00F070  53                 	db	83
   153  00F071  57                 	db	87
   154  00F072  00                 	db	0
   155  00F073  00                 	db	0
   156  00F074  42                 	db	66
   157  00F075  57                 	db	87
   158  00F076  57                 	db	87
   159  00F077  00                 	db	0
   160  00F078  00                 	db	0
   161  00F079  42                 	db	66
   162  00F07A  4E                 	db	78
   163  00F07B  4E                 	db	78
   164  00F07C  57                 	db	87
   165  00F07D  00                 	db	0
   166  00F07E  42                 	db	66
   167  00F07F  53                 	db	83
   168  00F080  57                 	db	87
   169  00F081  57                 	db	87
   170  00F082  00                 	db	0
   171  00F083  42                 	db	66
   172  00F084  42                 	db	66
   173  00F085  53                 	db	83
   174  00F086  57                 	db	87
   175  00F087  00                 	db	0
   176  00F088  42                 	db	66
   177  00F089  42                 	db	66
   178  00F08A  4E                 	db	78
   179  00F08B  57                 	db	87
   180  00F08C  00                 	db	0
   181  00F08D  42                 	db	66
   182  00F08E  4E                 	db	78
   183  00F08F  4E                 	db	78
   184  00F090  57                 	db	87
   185  00F091  00                 	db	0
   186  00F092  42                 	db	66
   187  00F093  4E                 	db	78
   188  00F094  4E                 	db	78
   189  00F095  4E                 	db	78
   190  00F096  00                 	db	0
   191  00F097  42                 	db	66
   192  00F098  57                 	db	87
   193  00F099  57                 	db	87
   194  00F09A  57                 	db	87
   195  00F09B  00                 	db	0
   196                           
   197                           	psect	mediumconst
   198  00FD90                     __pmediumconst:
   199                           	opt stack 0
   200  00FD90  00                 	db	0
   201  00FD91                     _fastenerMatrix:
   202                           	opt stack 0
   203  00FD91  00                 	db	0
   204  00FD92  00                 	db	0
   205  00FD93  00                 	db	0
   206  00FD94  00                 	db	0
   207  00FD95  01                 	db	1
   208  00FD96  00                 	db	0
   209  00FD97  00                 	db	0
   210  00FD98  00                 	db	0
   211  00FD99  00                 	db	0
   212  00FD9A  01                 	db	1
   213  00FD9B  00                 	db	0
   214  00FD9C  00                 	db	0
   215  00FD9D  00                 	db	0
   216  00FD9E  00                 	db	0
   217  00FD9F  01                 	db	1
   218  00FDA0  00                 	db	0
   219  00FDA1  00                 	db	0
   220  00FDA2  00                 	db	0
   221  00FDA3  00                 	db	0
   222  00FDA4  01                 	db	1
   223  00FDA5  01                 	db	1
   224  00FDA6  01                 	db	1
   225  00FDA7  00                 	db	0
   226  00FDA8  00                 	db	0
   227  00FDA9  01                 	db	1
   228  00FDAA  00                 	db	0
   229  00FDAB  01                 	db	1
   230  00FDAC  00                 	db	0
   231  00FDAD  01                 	db	1
   232  00FDAE  00                 	db	0
   233  00FDAF  00                 	db	0
   234  00FDB0  01                 	db	1
   235  00FDB1  02                 	db	2
   236  00FDB2  01                 	db	1
   237  00FDB3  00                 	db	0
   238  00FDB4  00                 	db	0
   239  00FDB5  02                 	db	2
   240  00FDB6  00                 	db	0
   241  00FDB7  01                 	db	1
   242  00FDB8  00                 	db	0
   243  00FDB9  02                 	db	2
   244  00FDBA  00                 	db	0
   245  00FDBB  00                 	db	0
   246  00FDBC  01                 	db	1
   247  00FDBD  01                 	db	1
   248  00FDBE  01                 	db	1
   249  00FDBF  00                 	db	0
   250  00FDC0  01                 	db	1
   251  00FDC1  01                 	db	1
   252  00FDC2  00                 	db	0
   253  00FDC3  01                 	db	1
   254  00FDC4  01                 	db	1
   255  00FDC5  01                 	db	1
   256  00FDC6  00                 	db	0
   257  00FDC7  00                 	db	0
   258  00FDC8  02                 	db	2
   259  00FDC9  01                 	db	1
   260  00FDCA  01                 	db	1
   261  00FDCB  00                 	db	0
   262  00FDCC  02                 	db	2
   263  00FDCD  01                 	db	1
   264  00FDCE  00                 	db	0
   265  00FDCF  01                 	db	1
   266  00FDD0  02                 	db	2
   267  00FDD1  02                 	db	2
   268  00FDD2  00                 	db	0
   269  00FDD3  01                 	db	1
   270  00FDD4  01                 	db	1
   271  00FDD5  02                 	db	2
   272  00FDD6  01                 	db	1
   273  00FDD7  00                 	db	0
   274  00FDD8  01                 	db	1
   275  00FDD9  01                 	db	1
   276  00FDDA  02                 	db	2
   277  00FDDB  00                 	db	0
   278  00FDDC  01                 	db	1
   279  00FDDD  01                 	db	1
   280  00FDDE  03                 	db	3
   281  00FDDF  00                 	db	0
   282  00FDE0  00                 	db	0
   283  00FDE1  01                 	db	1
   284  00FDE2  00                 	db	0
   285  00FDE3  00                 	db	0
   286  00FDE4  03                 	db	3
   287  00FDE5                     __end_of_fastenerMatrix:
   288                           	opt stack 0
   289  00FDE5                     _keypadChars:
   290                           	opt stack 0
   291  00FDE5  31                 	db	49
   292  00FDE6  32                 	db	50
   293  00FDE7  33                 	db	51
   294  00FDE8  42                 	db	66
   295  00FDE9  34                 	db	52
   296  00FDEA  35                 	db	53
   297  00FDEB  36                 	db	54
   298  00FDEC  4E                 	db	78
   299  00FDED  37                 	db	55
   300  00FDEE  38                 	db	56
   301  00FDEF  39                 	db	57
   302  00FDF0  53                 	db	83
   303  00FDF1  2A                 	db	42
   304  00FDF2  30                 	db	48
   305  00FDF3  23                 	db	35
   306  00FDF4  57                 	db	87
   307  00FDF5  00                 	db	0
   308  00FDF6                     __end_of_keypadChars:
   309                           	opt stack 0
   310  00FDF6                     _LCDMenuIcons:
   311                           	opt stack 0
   312  00FDF6  2A                 	db	42
   313  00FDF7  3C                 	db	60
   314  00FDF8  2D                 	db	45
   315  00FDF9  20                 	db	32
   316  00FDFA  20                 	db	32
   317  00FDFB  20                 	db	32
   318  00FDFC  28                 	db	40
   319  00FDFD  20                 	db	32
   320  00FDFE  2D                 	db	45
   321  00FDFF  20                 	db	32
   322  00FE00  29                 	db	41
   323  00FE01  20                 	db	32
   324  00FE02  20                 	db	32
   325  00FE03  20                 	db	32
   326  00FE04  20                 	db	32
   327  00FE05  00                 	db	0
   328  00FE06                     __end_of_LCDMenuIcons:
   329                           	opt stack 0
   330  00FE06                     _dpowers:
   331                           	opt stack 0
   332  00FE06  0001               	dw	1
   333  00FE08  000A               	dw	10
   334  00FE0A  0064               	dw	100
   335  00FE0C  03E8               	dw	1000
   336  00FE0E  2710               	dw	10000
   337  00FE10                     __end_of_dpowers:
   338                           	opt stack 0
   339  00FE10                     _assemblyStepEncoding:
   340                           	opt stack 0
   341  00FE10  55                 	db	85
   342  00FE11  5B                 	db	91
   343  00FE12  77                 	db	119
   344  00FE13  7F                 	db	127
   345  00FE14  FF                 	db	255
   346  00FE15                     __end_of_assemblyStepEncoding:
   347                           	opt stack 0
   348  00FE15                     _nanoAddr:
   349                           	opt stack 0
   350  00FE15  10                 	db	16
   351  00FE16                     __end_of_nanoAddr:
   352                           	opt stack 0
   353  00FE16                     _LCD_LEFT:
   354                           	opt stack 0
   355  00FE16  00                 	db	0
   356  00FE17                     __end_of_LCD_LEFT:
   357                           	opt stack 0
   358  00FE17                     _LCD_RIGHT:
   359                           	opt stack 0
   360  00FE17  01                 	db	1
   361  00FE18                     __end_of_LCD_RIGHT:
   362                           	opt stack 0
   363  00FE18                     _LCD_SIZE_VERT:
   364                           	opt stack 0
   365  00FE18  02                 	db	2
   366  00FE19                     __end_of_LCD_SIZE_VERT:
   367                           	opt stack 0
   368  00FE19                     _LCD_SIZE_HORZ:
   369                           	opt stack 0
   370  00FE19  10                 	db	16
   371  00FE1A                     __end_of_LCD_SIZE_HORZ:
   372                           	opt stack 0
   373  00FE1A                     _LCD_VERT_LIMIT:
   374                           	opt stack 0
   375  00FE1A  02                 	db	2
   376  00FE1B                     __end_of_LCD_VERT_LIMIT:
   377                           	opt stack 0
   378  00FE1B                     _LCD_HORZ_LIMIT:
   379                           	opt stack 0
   380  00FE1B  28                 	db	40
   381  00FE1C                     __end_of_LCD_HORZ_LIMIT:
   382                           	opt stack 0
   383  00FE1C                     _errMsgs:
   384                           	opt stack 0
   385  00FE1C  49                 	db	73
   386  00FE1D  6E                 	db	110
   387  00FE1E  76                 	db	118
   388  00FE1F  61                 	db	97
   389  00FE20  6C                 	db	108
   390  00FE21  69                 	db	105
   391  00FE22  64                 	db	100
   392  00FE23  20                 	db	32
   393  00FE24  65                 	db	101
   394  00FE25  6E                 	db	110
   395  00FE26  74                 	db	116
   396  00FE27  72                 	db	114
   397  00FE28  79                 	db	121
   398  00FE29  0A                 	db	10
   399  00FE2A  50                 	db	80
   400  00FE2B  6C                 	db	108
   401  00FE2C  65                 	db	101
   402  00FE2D  61                 	db	97
   403  00FE2E  73                 	db	115
   404  00FE2F  65                 	db	101
   405  00FE30  20                 	db	32
   406  00FE31  74                 	db	116
   407  00FE32  72                 	db	114
   408  00FE33  79                 	db	121
   409  00FE34  20                 	db	32
   410  00FE35  61                 	db	97
   411  00FE36  67                 	db	103
   412  00FE37  61                 	db	97
   413  00FE38  69                 	db	105
   414  00FE39  6E                 	db	110
   415  00FE3A  00                 	db	0
   416  00FE3B  00                 	db	0
   417  00FE3C  54                 	db	84
   418  00FE3D  6F                 	db	111
   419  00FE3E  6F                 	db	111
   420  00FE3F  20                 	db	32
   421  00FE40  6D                 	db	109
   422  00FE41  61                 	db	97
   423  00FE42  6E                 	db	110
   424  00FE43  79                 	db	121
   425  00FE44  20                 	db	32
   426  00FE45  66                 	db	102
   427  00FE46  61                 	db	97
   428  00FE47  73                 	db	115
   429  00FE48  74                 	db	116
   430  00FE49  65                 	db	101
   431  00FE4A  6E                 	db	110
   432  00FE4B  65                 	db	101
   433  00FE4C  72                 	db	114
   434  00FE4D  73                 	db	115
   435  00FE4E  00                 	db	0
   436  00FE4F  00                 	db	0
   437  00FE50  00                 	db	0
   438  00FE51  00                 	db	0
   439  00FE52  00                 	db	0
   440  00FE53  00                 	db	0
   441  00FE54  00                 	db	0
   442  00FE55  00                 	db	0
   443  00FE56  00                 	db	0
   444  00FE57  00                 	db	0
   445  00FE58  00                 	db	0
   446  00FE59  00                 	db	0
   447  00FE5A  00                 	db	0
   448  00FE5B  00                 	db	0
   449  00FE5C  54                 	db	84
   450  00FE5D  6F                 	db	111
   451  00FE5E  6F                 	db	111
   452  00FE5F  20                 	db	32
   453  00FE60  6D                 	db	109
   454  00FE61  61                 	db	97
   455  00FE62  6E                 	db	110
   456  00FE63  79                 	db	121
   457  00FE64  20                 	db	32
   458  00FE65  62                 	db	98
   459  00FE66  6F                 	db	111
   460  00FE67  6C                 	db	108
   461  00FE68  74                 	db	116
   462  00FE69  73                 	db	115
   463  00FE6A  00                 	db	0
   464  00FE6B  00                 	db	0
   465  00FE6C  00                 	db	0
   466  00FE6D  00                 	db	0
   467  00FE6E  00                 	db	0
   468  00FE6F  00                 	db	0
   469  00FE70  00                 	db	0
   470  00FE71  00                 	db	0
   471  00FE72  00                 	db	0
   472  00FE73  00                 	db	0
   473  00FE74  00                 	db	0
   474  00FE75  00                 	db	0
   475  00FE76  00                 	db	0
   476  00FE77  00                 	db	0
   477  00FE78  00                 	db	0
   478  00FE79  00                 	db	0
   479  00FE7A  00                 	db	0
   480  00FE7B  00                 	db	0
   481  00FE7C  54                 	db	84
   482  00FE7D  6F                 	db	111
   483  00FE7E  6F                 	db	111
   484  00FE7F  20                 	db	32
   485  00FE80  6D                 	db	109
   486  00FE81  61                 	db	97
   487  00FE82  6E                 	db	110
   488  00FE83  79                 	db	121
   489  00FE84  20                 	db	32
   490  00FE85  6E                 	db	110
   491  00FE86  75                 	db	117
   492  00FE87  74                 	db	116
   493  00FE88  73                 	db	115
   494  00FE89  00                 	db	0
   495  00FE8A  00                 	db	0
   496  00FE8B  00                 	db	0
   497  00FE8C  00                 	db	0
   498  00FE8D  00                 	db	0
   499  00FE8E  00                 	db	0
   500  00FE8F  00                 	db	0
   501  00FE90  00                 	db	0
   502  00FE91  00                 	db	0
   503  00FE92  00                 	db	0
   504  00FE93  00                 	db	0
   505  00FE94  00                 	db	0
   506  00FE95  00                 	db	0
   507  00FE96  00                 	db	0
   508  00FE97  00                 	db	0
   509  00FE98  00                 	db	0
   510  00FE99  00                 	db	0
   511  00FE9A  00                 	db	0
   512  00FE9B  00                 	db	0
   513  00FE9C  54                 	db	84
   514  00FE9D  6F                 	db	111
   515  00FE9E  6F                 	db	111
   516  00FE9F  20                 	db	32
   517  00FEA0  6D                 	db	109
   518  00FEA1  61                 	db	97
   519  00FEA2  6E                 	db	110
   520  00FEA3  79                 	db	121
   521  00FEA4  20                 	db	32
   522  00FEA5  77                 	db	119
   523  00FEA6  61                 	db	97
   524  00FEA7  73                 	db	115
   525  00FEA8  68                 	db	104
   526  00FEA9  65                 	db	101
   527  00FEAA  72                 	db	114
   528  00FEAB  73                 	db	115
   529  00FEAC  00                 	db	0
   530  00FEAD  00                 	db	0
   531  00FEAE  00                 	db	0
   532  00FEAF  00                 	db	0
   533  00FEB0  00                 	db	0
   534  00FEB1  00                 	db	0
   535  00FEB2  00                 	db	0
   536  00FEB3  00                 	db	0
   537  00FEB4  00                 	db	0
   538  00FEB5  00                 	db	0
   539  00FEB6  00                 	db	0
   540  00FEB7  00                 	db	0
   541  00FEB8  00                 	db	0
   542  00FEB9  00                 	db	0
   543  00FEBA  00                 	db	0
   544  00FEBB  00                 	db	0
   545  00FEBC  54                 	db	84
   546  00FEBD  6F                 	db	111
   547  00FEBE  6F                 	db	111
   548  00FEBF  20                 	db	32
   549  00FEC0  6D                 	db	109
   550  00FEC1  61                 	db	97
   551  00FEC2  6E                 	db	110
   552  00FEC3  79                 	db	121
   553  00FEC4  20                 	db	32
   554  00FEC5  73                 	db	115
   555  00FEC6  70                 	db	112
   556  00FEC7  61                 	db	97
   557  00FEC8  63                 	db	99
   558  00FEC9  65                 	db	101
   559  00FECA  72                 	db	114
   560  00FECB  73                 	db	115
   561  00FECC  00                 	db	0
   562  00FECD  00                 	db	0
   563  00FECE  00                 	db	0
   564  00FECF  00                 	db	0
   565  00FED0  00                 	db	0
   566  00FED1  00                 	db	0
   567  00FED2  00                 	db	0
   568  00FED3  00                 	db	0
   569  00FED4  00                 	db	0
   570  00FED5  00                 	db	0
   571  00FED6  00                 	db	0
   572  00FED7  00                 	db	0
   573  00FED8  00                 	db	0
   574  00FED9  00                 	db	0
   575  00FEDA  00                 	db	0
   576  00FEDB  00                 	db	0
   577  00FEDC  4E                 	db	78
   578  00FEDD  6F                 	db	111
   579  00FEDE  20                 	db	32
   580  00FEDF  66                 	db	102
   581  00FEE0  61                 	db	97
   582  00FEE1  73                 	db	115
   583  00FEE2  74                 	db	116
   584  00FEE3  65                 	db	101
   585  00FEE4  6E                 	db	110
   586  00FEE5  65                 	db	101
   587  00FEE6  72                 	db	114
   588  00FEE7  73                 	db	115
   589  00FEE8  20                 	db	32
   590  00FEE9  73                 	db	115
   591  00FEEA  65                 	db	101
   592  00FEEB  6C                 	db	108
   593  00FEEC  65                 	db	101
   594  00FEED  63                 	db	99
   595  00FEEE  74                 	db	116
   596  00FEEF  65                 	db	101
   597  00FEF0  64                 	db	100
   598  00FEF1  00                 	db	0
   599  00FEF2  00                 	db	0
   600  00FEF3  00                 	db	0
   601  00FEF4  00                 	db	0
   602  00FEF5  00                 	db	0
   603  00FEF6  00                 	db	0
   604  00FEF7  00                 	db	0
   605  00FEF8  00                 	db	0
   606  00FEF9  00                 	db	0
   607  00FEFA  00                 	db	0
   608  00FEFB  00                 	db	0
   609  00FEFC                     __end_of_errMsgs:
   610                           	opt stack 0
   611  00FEFC                     _inputEntryQuestions:
   612                           	opt stack 0
   613  00FEFC  41                 	db	65
   614  00FEFD  73                 	db	115
   615  00FEFE  73                 	db	115
   616  00FEFF  65                 	db	101
   617  00FF00  6D                 	db	109
   618  00FF01  62                 	db	98
   619  00FF02  6C                 	db	108
   620  00FF03  79                 	db	121
   621  00FF04  20                 	db	32
   622  00FF05  73                 	db	115
   623  00FF06  74                 	db	116
   624  00FF07  65                 	db	101
   625  00FF08  70                 	db	112
   626  00FF09  73                 	db	115
   627  00FF0A  0A                 	db	10
   628  00FF0B  2A                 	db	42
   629  00FF0C  3C                 	db	60
   630  00FF0D  2D                 	db	45
   631  00FF0E  20                 	db	32
   632  00FF0F  20                 	db	32
   633  00FF10  28                 	db	40
   634  00FF11  34                 	db	52
   635  00FF12  2D                 	db	45
   636  00FF13  38                 	db	56
   637  00FF14  29                 	db	41
   638  00FF15  20                 	db	32
   639  00FF16  20                 	db	32
   640  00FF17  20                 	db	32
   641  00FF18  20                 	db	32
   642  00FF19  20                 	db	32
   643  00FF1A  00                 	db	0
   644  00FF1B  00                 	db	0
   645  00FF1C  00                 	db	0
   646  00FF1D  46                 	db	70
   647  00FF1E  61                 	db	97
   648  00FF1F  73                 	db	115
   649  00FF20  74                 	db	116
   650  00FF21  65                 	db	101
   651  00FF22  6E                 	db	110
   652  00FF23  65                 	db	101
   653  00FF24  72                 	db	114
   654  00FF25  73                 	db	115
   655  00FF26  20                 	db	32
   656  00FF27  69                 	db	105
   657  00FF28  6E                 	db	110
   658  00FF29  20                 	db	32
   659  00FF2A  43                 	db	67
   660  00FF2B  78                 	db	120
   661  00FF2C  0A                 	db	10
   662  00FF2D  2A                 	db	42
   663  00FF2E  3C                 	db	60
   664  00FF2F  2D                 	db	45
   665  00FF30  28                 	db	40
   666  00FF31  42                 	db	66
   667  00FF32  4E                 	db	78
   668  00FF33  53                 	db	83
   669  00FF34  57                 	db	87
   670  00FF35  29                 	db	41
   671  00FF36  20                 	db	32
   672  00FF37  20                 	db	32
   673  00FF38  20                 	db	32
   674  00FF39  20                 	db	32
   675  00FF3A  2D                 	db	45
   676  00FF3B  3E                 	db	62
   677  00FF3C  23                 	db	35
   678  00FF3D  00                 	db	0
   679  00FF3E  48                 	db	72
   680  00FF3F  6F                 	db	111
   681  00FF40  77                 	db	119
   682  00FF41  20                 	db	32
   683  00FF42  6D                 	db	109
   684  00FF43  61                 	db	97
   685  00FF44  6E                 	db	110
   686  00FF45  79                 	db	121
   687  00FF46  20                 	db	32
   688  00FF47  73                 	db	115
   689  00FF48  65                 	db	101
   690  00FF49  74                 	db	116
   691  00FF4A  73                 	db	115
   692  00FF4B  3F                 	db	63
   693  00FF4C  0A                 	db	10
   694  00FF4D  2A                 	db	42
   695  00FF4E  3C                 	db	60
   696  00FF4F  2D                 	db	45
   697  00FF50  20                 	db	32
   698  00FF51  20                 	db	32
   699  00FF52  28                 	db	40
   700  00FF53  31                 	db	49
   701  00FF54  2D                 	db	45
   702  00FF55  34                 	db	52
   703  00FF56  29                 	db	41
   704  00FF57  20                 	db	32
   705  00FF58  20                 	db	32
   706  00FF59  20                 	db	32
   707  00FF5A  20                 	db	32
   708  00FF5B  20                 	db	32
   709  00FF5C  00                 	db	0
   710  00FF5D  00                 	db	0
   711  00FF5E  00                 	db	0
   712  00FF5F  43                 	db	67
   713  00FF60  6F                 	db	111
   714  00FF61  6E                 	db	110
   715  00FF62  66                 	db	102
   716  00FF63  69                 	db	105
   717  00FF64  72                 	db	114
   718  00FF65  6D                 	db	109
   719  00FF66  3F                 	db	63
   720  00FF67  0A                 	db	10
   721  00FF68  2A                 	db	42
   722  00FF69  3C                 	db	60
   723  00FF6A  2D                 	db	45
   724  00FF6B  20                 	db	32
   725  00FF6C  20                 	db	32
   726  00FF6D  28                 	db	40
   727  00FF6E  41                 	db	65
   728  00FF6F  3A                 	db	58
   729  00FF70  59                 	db	89
   730  00FF71  2F                 	db	47
   731  00FF72  42                 	db	66
   732  00FF73  3A                 	db	58
   733  00FF74  4E                 	db	78
   734  00FF75  29                 	db	41
   735  00FF76  20                 	db	32
   736  00FF77  00                 	db	0
   737  00FF78  00                 	db	0
   738  00FF79  00                 	db	0
   739  00FF7A  00                 	db	0
   740  00FF7B  00                 	db	0
   741  00FF7C  00                 	db	0
   742  00FF7D  00                 	db	0
   743  00FF7E  00                 	db	0
   744  00FF7F  00                 	db	0
   745  00FF80                     __end_of_inputEntryQuestions:
   746                           	opt stack 0
   747  0000                     _PORTB	set	3969
   748  0000                     _PORTBbits	set	3969
   749  0000                     _INTCONbits	set	4082
   750  0000                     _LATDbits	set	3980
   751  0000                     _SSPBUF	set	4041
   752  0000                     _SSPCON2bits	set	4037
   753  0000                     _SSPADD	set	4040
   754  0000                     _SSPCON2	set	4037
   755  0000                     _SSPCON1	set	4038
   756  0000                     _SSPSTAT	set	4039
   757  0000                     _TRISCbits	set	3988
   758  0000                     _SSPCON1bits	set	4038
   759  0000                     _TRISE	set	3990
   760  0000                     _TRISD	set	3989
   761  0000                     _TRISC	set	3988
   762  0000                     _TRISB	set	3987
   763  0000                     _TRISA	set	3986
   764  0000                     _LATE	set	3981
   765  0000                     _LATD	set	3980
   766  0000                     _LATC	set	3979
   767  0000                     _LATB	set	3978
   768  0000                     _LATA	set	3977
   769  0000                     _PORTAbits	set	3968
   770  0000                     _LATCbits	set	3979
   771  0000                     _LATBbits	set	3978
   772  00FF80                     STR_4:
   773  00FF80  30                 	db	48	;'0'
   774  00FF81  3A                 	db	58	;':'
   775  00FF82  53                 	db	83	;'S'
   776  00FF83  6C                 	db	108	;'l'
   777  00FF84  65                 	db	101	;'e'
   778  00FF85  65                 	db	101	;'e'
   779  00FF86  70                 	db	112	;'p'
   780  00FF87  20                 	db	32
   781  00FF88  31                 	db	49	;'1'
   782  00FF89  3A                 	db	58	;':'
   783  00FF8A  42                 	db	66	;'B'
   784  00FF8B  65                 	db	101	;'e'
   785  00FF8C  67                 	db	103	;'g'
   786  00FF8D  69                 	db	105	;'i'
   787  00FF8E  6E                 	db	110	;'n'
   788  00FF8F  20                 	db	32
   789  00FF90  0A                 	db	10
   790  00FF91  32                 	db	50	;'2'
   791  00FF92  3A                 	db	58	;':'
   792  00FF93  20                 	db	32
   793  00FF94  56                 	db	86	;'V'
   794  00FF95  69                 	db	105	;'i'
   795  00FF96  65                 	db	101	;'e'
   796  00FF97  77                 	db	119	;'w'
   797  00FF98  20                 	db	32
   798  00FF99  4C                 	db	76	;'L'
   799  00FF9A  6F                 	db	111	;'o'
   800  00FF9B  67                 	db	103	;'g'
   801  00FF9C  73                 	db	115	;'s'
   802  00FF9D  00                 	db	0
   803  00FF9E                     STR_3:
   804  00FF9E  4E                 	db	78	;'N'
   805  00FF9F  6F                 	db	111	;'o'
   806  00FFA0  74                 	db	116	;'t'
   807  00FFA1  20                 	db	32
   808  00FFA2  74                 	db	116	;'t'
   809  00FFA3  68                 	db	104	;'h'
   810  00FFA4  65                 	db	101	;'e'
   811  00FFA5  72                 	db	114	;'r'
   812  00FFA6  65                 	db	101	;'e'
   813  00FFA7  20                 	db	32
   814  00FFA8  79                 	db	121	;'y'
   815  00FFA9  65                 	db	101	;'e'
   816  00FFAA  74                 	db	116	;'t'
   817  00FFAB  0A                 	db	10
   818  00FFAC  2A                 	db	42
   819  00FFAD  20                 	db	32
   820  00FFAE  74                 	db	116	;'t'
   821  00FFAF  6F                 	db	111	;'o'
   822  00FFB0  20                 	db	32
   823  00FFB1  72                 	db	114	;'r'
   824  00FFB2  65                 	db	101	;'e'
   825  00FFB3  74                 	db	116	;'t'
   826  00FFB4  75                 	db	117	;'u'
   827  00FFB5  72                 	db	114	;'r'
   828  00FFB6  6E                 	db	110	;'n'
   829  00FFB7  00                 	db	0
   830  00FFB8                     STR_1:
   831  00FFB8  53                 	db	83	;'S'
   832  00FFB9  74                 	db	116	;'t'
   833  00FFBA  61                 	db	97	;'a'
   834  00FFBB  72                 	db	114	;'r'
   835  00FFBC  74                 	db	116	;'t'
   836  00FFBD  65                 	db	101	;'e'
   837  00FFBE  64                 	db	100	;'d'
   838  00FFBF  20                 	db	32
   839  00FFC0  69                 	db	105	;'i'
   840  00FFC1  6E                 	db	110	;'n'
   841  00FFC2  70                 	db	112	;'p'
   842  00FFC3  75                 	db	117	;'u'
   843  00FFC4  74                 	db	116	;'t'
   844  00FFC5  20                 	db	32
   845  00FFC6  65                 	db	101	;'e'
   846  00FFC7  6E                 	db	110	;'n'
   847  00FFC8  74                 	db	116	;'t'
   848  00FFC9  72                 	db	114	;'r'
   849  00FFCA  79                 	db	121	;'y'
   850  00FFCB  2C                 	db	44
   851  00FFCC  20                 	db	32
   852  00FFCD  68                 	db	104	;'h'
   853  00FFCE  69                 	db	105	;'i'
   854  00FFCF  00                 	db	0
   855  00FFD0  00                 	db	0
   856  00FFD1                     STR_2:
   857  00FFD1  50                 	db	80	;'P'
   858  00FFD2  72                 	db	114	;'r'
   859  00FFD3  65                 	db	101	;'e'
   860  00FFD4  73                 	db	115	;'s'
   861  00FFD5  73                 	db	115	;'s'
   862  00FFD6  20                 	db	32
   863  00FFD7  31                 	db	49	;'1'
   864  00FFD8  20                 	db	32
   865  00FFD9  74                 	db	116	;'t'
   866  00FFDA  6F                 	db	111	;'o'
   867  00FFDB  20                 	db	32
   868  00FFDC  62                 	db	98	;'b'
   869  00FFDD  65                 	db	101	;'e'
   870  00FFDE  67                 	db	103	;'g'
   871  00FFDF  69                 	db	105	;'i'
   872  00FFE0  6E                 	db	110	;'n'
   873  00FFE1  00                 	db	0
   874  00FFE2                     STR_6:
   875  00FFE2  43                 	db	67	;'C'
   876  00FFE3  25                 	db	37
   877  00FFE4  64                 	db	100	;'d'
   878  00FFE5  3A                 	db	58	;':'
   879  00FFE6  20                 	db	32
   880  00FFE7  25                 	db	37
   881  00FFE8  73                 	db	115	;'s'
   882  00FFE9  20                 	db	32
   883  00FFEA  78                 	db	120	;'x'
   884  00FFEB  25                 	db	37
   885  00FFEC  64                 	db	100	;'d'
   886  00FFED  00                 	db	0
   887  00FFEE                     STR_5:
   888  00FFEE  53                 	db	83	;'S'
   889  00FFEF  75                 	db	117	;'u'
   890  00FFF0  6D                 	db	109	;'m'
   891  00FFF1  6D                 	db	109	;'m'
   892  00FFF2  61                 	db	97	;'a'
   893  00FFF3  72                 	db	114	;'r'
   894  00FFF4  79                 	db	121	;'y'
   895  00FFF5  3A                 	db	58	;':'
   896  00FFF6  00                 	db	0
   897  00FFF7                     STR_7:
   898  00FFF7  28                 	db	40
   899  00FFF8  6E                 	db	110	;'n'
   900  00FFF9  75                 	db	117	;'u'
   901  00FFFA  6C                 	db	108	;'l'
   902  00FFFB  6C                 	db	108	;'l'
   903  00FFFC  29                 	db	41
   904  00FFFD  00                 	db	0
   905                           
   906                           ; #config settings
   907  00FFFE  00                 	db	0	; dummy byte at the end
   908  0000                     
   909                           	psect	cinit
   910  00EED2                     __pcinit:
   911                           	opt stack 0
   912  00EED2                     start_initialization:
   913                           	opt stack 0
   914  00EED2                     __initialization:
   915                           	opt stack 0
   916                           
   917                           ; Initialize objects allocated to BANK1 (105 bytes)
   918                           ; load TBLPTR registers with __pidataBANK1
   919  00EED2  0E33               	movlw	low __pidataBANK1
   920  00EED4  6EF6               	movwf	tblptrl,c
   921  00EED6  0EF0               	movlw	high __pidataBANK1
   922  00EED8  6EF7               	movwf	tblptrh,c
   923  00EEDA  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   924  00EEDC  6EF8               	movwf	tblptru,c
   925  00EEDE  EE01  F000         	lfsr	0,__pdataBANK1
   926  00EEE2  EE10 F069          	lfsr	1,105
   927  00EEE6                     copy_data0:
   928  00EEE6  0009               	tblrd		*+
   929  00EEE8  CFF5 FFEE          	movff	tablat,postinc0
   930  00EEEC  50E5               	movf	postdec1,w,c
   931  00EEEE  50E1               	movf	fsr1l,w,c
   932  00EEF0  E1FA               	bnz	copy_data0
   933                           
   934                           ; Initialize objects allocated to COMRAM (2 bytes)
   935                           ; load TBLPTR registers with __pidataCOMRAM
   936  00EEF2  0E88               	movlw	low __pidataCOMRAM
   937  00EEF4  6EF6               	movwf	tblptrl,c
   938  00EEF6  0EEC               	movlw	high __pidataCOMRAM
   939  00EEF8  6EF7               	movwf	tblptrh,c
   940  00EEFA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   941  00EEFC  6EF8               	movwf	tblptru,c
   942  00EEFE  0009               	tblrd		*+	;fetch initializer
   943  00EF00  CFF5 F069          	movff	tablat,__pdataCOMRAM
   944  00EF04  0009               	tblrd		*+	;fetch initializer
   945  00EF06  CFF5 F06A          	movff	tablat,__pdataCOMRAM+1
   946                           
   947                           ; Clear objects allocated to BANK0 (26 bytes)
   948  00EF0A  EE00  F080         	lfsr	0,__pbssBANK0
   949  00EF0E  0E1A               	movlw	26
   950  00EF10                     clear_0:
   951  00EF10  6AEE               	clrf	postinc0,c
   952  00EF12  06E8               	decf	wreg,f,c
   953  00EF14  E1FD               	bnz	clear_0
   954                           
   955                           ; Clear objects allocated to COMRAM (1 bytes)
   956  00EF16  6A6B               	clrf	__pbssCOMRAM& (0+255),c
   957  00EF18                     end_of_initialization:
   958                           	opt stack 0
   959  00EF18                     __end_of__initialization:
   960                           	opt stack 0
   961  00EF18  0100               	movlb	0
   962  00EF1A  EF4E  F078         	goto	_main	;jump to C main() function
   963                           tblptru	equ	0xFF8
   964                           tblptrh	equ	0xFF7
   965                           tblptrl	equ	0xFF6
   966                           tablat	equ	0xFF5
   967                           postinc0	equ	0xFEE
   968                           wreg	equ	0xFE8
   969                           postdec1	equ	0xFE5
   970                           fsr1l	equ	0xFE1
   971                           
   972                           	psect	bssCOMRAM
   973  00006B                     __pbssCOMRAM:
   974                           	opt stack 0
   975  00006B                     _LCDinterruptState:
   976                           	opt stack 0
   977  00006B                     	ds	1
   978                           tblptru	equ	0xFF8
   979                           tblptrh	equ	0xFF7
   980                           tblptrl	equ	0xFF6
   981                           tablat	equ	0xFF5
   982                           postinc0	equ	0xFEE
   983                           wreg	equ	0xFE8
   984                           postdec1	equ	0xFE5
   985                           fsr1l	equ	0xFE1
   986                           
   987                           	psect	dataCOMRAM
   988  000069                     __pdataCOMRAM:
   989                           	opt stack 0
   990  000069                     inputEntry@F3142:
   991                           	opt stack 0
   992  000069                     	ds	2
   993                           tblptru	equ	0xFF8
   994                           tblptrh	equ	0xFF7
   995                           tblptrl	equ	0xFF6
   996                           tablat	equ	0xFF5
   997                           postinc0	equ	0xFEE
   998                           wreg	equ	0xFE8
   999                           postdec1	equ	0xFE5
  1000                           fsr1l	equ	0xFE1
  1001                           
  1002                           	psect	bssBANK0
  1003  000080                     __pbssBANK0:
  1004                           	opt stack 0
  1005  000080                     _params:
  1006                           	opt stack 0
  1007  000080                     	ds	26
  1008                           tblptru	equ	0xFF8
  1009                           tblptrh	equ	0xFF7
  1010                           tblptrl	equ	0xFF6
  1011                           tablat	equ	0xFF5
  1012                           postinc0	equ	0xFEE
  1013                           wreg	equ	0xFE8
  1014                           postdec1	equ	0xFE5
  1015                           fsr1l	equ	0xFE1
  1016                           
  1017                           	psect	dataBANK1
  1018  000100                     __pdataBANK1:
  1019                           	opt stack 0
  1020  000100                     _fSLookup:
  1021                           	opt stack 0
  1022  000100                     	ds	105
  1023                           tblptru	equ	0xFF8
  1024                           tblptrh	equ	0xFF7
  1025                           tblptrl	equ	0xFF6
  1026                           tablat	equ	0xFF5
  1027                           postinc0	equ	0xFEE
  1028                           wreg	equ	0xFE8
  1029                           postdec1	equ	0xFE5
  1030                           fsr1l	equ	0xFE1
  1031                           
  1032                           	psect	cstackCOMRAM
  1033  000001                     __pcstackCOMRAM:
  1034                           	opt stack 0
  1035  000001                     ??_I2C_Master_Wait:
  1036  000001                     ?___wmul:
  1037                           	opt stack 0
  1038  000001                     ?___lwdiv:
  1039                           	opt stack 0
  1040  000001                     ?___lldiv:
  1041                           	opt stack 0
  1042  000001                     lcdNibble@temp:
  1043                           	opt stack 0
  1044  000001                     pollKeypad@keypress:
  1045                           	opt stack 0
  1046  000001                     ___wmul@multiplier:
  1047                           	opt stack 0
  1048  000001                     ___lwdiv@dividend:
  1049                           	opt stack 0
  1050  000001                     ___lldiv@dividend:
  1051                           	opt stack 0
  1052                           
  1053                           ; 4 bytes @ 0x0
  1054  000001                     	ds	1
  1055  000002                     lcdNibble@data:
  1056                           	opt stack 0
  1057  000002                     I2C_Master_Write@byteToWrite:
  1058                           	opt stack 0
  1059                           
  1060                           ; 2 bytes @ 0x1
  1061  000002                     	ds	1
  1062  000003                     lcdInst@data:
  1063                           	opt stack 0
  1064  000003                     putch@data:
  1065                           	opt stack 0
  1066  000003                     ___wmul@multiplicand:
  1067                           	opt stack 0
  1068  000003                     ___lwdiv@divisor:
  1069                           	opt stack 0
  1070                           
  1071                           ; 2 bytes @ 0x2
  1072  000003                     	ds	1
  1073  000004                     ??_initLCD:
  1074  000004                     lcd_shift_cursor@direction:
  1075                           	opt stack 0
  1076  000004                     I2C_Send@data:
  1077                           	opt stack 0
  1078                           
  1079                           ; 2 bytes @ 0x3
  1080  000004                     	ds	1
  1081  000005                     lcd_shift_cursor@numChars:
  1082                           	opt stack 0
  1083  000005                     ___wmul@product:
  1084                           	opt stack 0
  1085  000005                     ___lwdiv@quotient:
  1086                           	opt stack 0
  1087  000005                     ___lldiv@divisor:
  1088                           	opt stack 0
  1089                           
  1090                           ; 4 bytes @ 0x4
  1091  000005                     	ds	1
  1092  000006                     ??_I2C_Send:
  1093  000006                     lcd_shift_cursor@n:
  1094                           	opt stack 0
  1095                           
  1096                           ; 1 bytes @ 0x5
  1097  000006                     	ds	1
  1098  000007                     lcd_set_cursor@y:
  1099                           	opt stack 0
  1100  000007                     ___lwdiv@counter:
  1101                           	opt stack 0
  1102  000007                     printStringLCD@string:
  1103                           	opt stack 0
  1104  000007                     strcpy@to:
  1105                           	opt stack 0
  1106                           
  1107                           ; 2 bytes @ 0x6
  1108  000007                     	ds	1
  1109  000008                     ??_lcd_set_cursor:
  1110  000008                     ?___lwmod:
  1111                           	opt stack 0
  1112  000008                     I2C_Send@address:
  1113                           	opt stack 0
  1114  000008                     ___lwmod@dividend:
  1115                           	opt stack 0
  1116                           
  1117                           ; 2 bytes @ 0x7
  1118  000008                     	ds	1
  1119  000009                     ??_printStringLCD:
  1120  000009                     lcd_set_cursor@i:
  1121                           	opt stack 0
  1122  000009                     I2C_Send@i:
  1123                           	opt stack 0
  1124  000009                     strcpy@from:
  1125                           	opt stack 0
  1126  000009                     ___lldiv@quotient:
  1127                           	opt stack 0
  1128                           
  1129                           ; 4 bytes @ 0x8
  1130  000009                     	ds	1
  1131  00000A                     lcd_set_cursor@x:
  1132                           	opt stack 0
  1133  00000A                     ___lwmod@divisor:
  1134                           	opt stack 0
  1135                           
  1136                           ; 2 bytes @ 0x9
  1137  00000A                     	ds	1
  1138  00000B                     strcpy@cp:
  1139                           	opt stack 0
  1140                           
  1141                           ; 2 bytes @ 0xA
  1142  00000B                     	ds	1
  1143  00000C                     ___lwmod@counter:
  1144                           	opt stack 0
  1145  00000C                     printStringLCD@j:
  1146                           	opt stack 0
  1147                           
  1148                           ; 2 bytes @ 0xB
  1149  00000C                     	ds	1
  1150  00000D                     ?_printf:
  1151                           	opt stack 0
  1152  00000D                     ___lldiv@counter:
  1153                           	opt stack 0
  1154  00000D                     printf@f:
  1155                           	opt stack 0
  1156                           
  1157                           ; 2 bytes @ 0xC
  1158  00000D                     	ds	1
  1159  00000E                     printStringLCD@spaceIndex:
  1160                           	opt stack 0
  1161  00000E                     I2C_Master_Init@clockFreq:
  1162                           	opt stack 0
  1163                           
  1164                           ; 4 bytes @ 0xD
  1165  00000E                     	ds	2
  1166  000010                     printStringLCD@newlineIndex:
  1167                           	opt stack 0
  1168                           
  1169                           ; 2 bytes @ 0xF
  1170  000010                     	ds	2
  1171  000012                     ??_I2C_Master_Init:
  1172  000012                     printStringLCD@newlineCharIndex:
  1173                           	opt stack 0
  1174                           
  1175                           ; 2 bytes @ 0x11
  1176  000012                     	ds	2
  1177  000014                     printStringLCD@i:
  1178                           	opt stack 0
  1179                           
  1180                           ; 2 bytes @ 0x13
  1181  000014                     	ds	1
  1182  000015                     ??_printf:
  1183                           
  1184                           ; 1 bytes @ 0x14
  1185  000015                     	ds	1
  1186  000016                     ??_hibernate:
  1187  000016                     ??_viewLogs:
  1188  000016                     printf@flag:
  1189                           	opt stack 0
  1190  000016                     printErrorLCD@string:
  1191                           	opt stack 0
  1192                           
  1193                           ; 2 bytes @ 0x15
  1194  000016                     	ds	1
  1195  000017                     printf@prec:
  1196                           	opt stack 0
  1197  000017                     viewLogs@pressed:
  1198                           	opt stack 0
  1199                           
  1200                           ; 2 bytes @ 0x16
  1201  000017                     	ds	1
  1202  000018                     ??_printErrorLCD:
  1203  000018                     printf@ap:
  1204                           	opt stack 0
  1205                           
  1206                           ; 2 bytes @ 0x17
  1207  000018                     	ds	2
  1208  00001A                     ??_inputEntry:
  1209  00001A                     hibernate@pressed:
  1210                           	opt stack 0
  1211  00001A                     printf@cp:
  1212                           	opt stack 0
  1213                           
  1214                           ; 2 bytes @ 0x19
  1215  00001A                     	ds	2
  1216  00001C                     printf@val:
  1217                           	opt stack 0
  1218                           
  1219                           ; 2 bytes @ 0x1B
  1220  00001C                     	ds	2
  1221  00001E                     printf@c:
  1222                           	opt stack 0
  1223  00001E                     inputEntry@fastenerString:
  1224                           	opt stack 0
  1225                           
  1226                           ; 32 bytes @ 0x1D
  1227  00001E                     	ds	32
  1228  00003E                     inputEntry@compartmentLabel:
  1229                           	opt stack 0
  1230                           
  1231                           ; 2 bytes @ 0x3D
  1232  00003E                     	ds	2
  1233  000040                     inputEntry@done:
  1234                           	opt stack 0
  1235                           
  1236                           ; 2 bytes @ 0x3F
  1237  000040                     	ds	2
  1238  000042                     inputEntry@found:
  1239                           	opt stack 0
  1240                           
  1241                           ; 2 bytes @ 0x41
  1242  000042                     	ds	2
  1243  000044                     inputEntry@setIsGood:
  1244                           	opt stack 0
  1245                           
  1246                           ; 2 bytes @ 0x43
  1247  000044                     	ds	2
  1248  000046                     inputEntry@doneMultiples:
  1249                           	opt stack 0
  1250                           
  1251                           ; 2 bytes @ 0x45
  1252  000046                     	ds	2
  1253  000048                     inputEntry@compartmentsToFill:
  1254                           	opt stack 0
  1255                           
  1256                           ; 1 bytes @ 0x47
  1257  000048                     	ds	1
  1258  000049                     inputEntry@doneCompartment:
  1259                           	opt stack 0
  1260                           
  1261                           ; 2 bytes @ 0x48
  1262  000049                     	ds	2
  1263  00004B                     inputEntry@numB:
  1264                           	opt stack 0
  1265                           
  1266                           ; 2 bytes @ 0x4A
  1267  00004B                     	ds	2
  1268  00004D                     inputEntry@numN:
  1269                           	opt stack 0
  1270                           
  1271                           ; 2 bytes @ 0x4C
  1272  00004D                     	ds	2
  1273  00004F                     inputEntry@numS:
  1274                           	opt stack 0
  1275                           
  1276                           ; 2 bytes @ 0x4E
  1277  00004F                     	ds	2
  1278  000051                     inputEntry@numW:
  1279                           	opt stack 0
  1280                           
  1281                           ; 2 bytes @ 0x50
  1282  000051                     	ds	2
  1283  000053                     inputEntry@sum:
  1284                           	opt stack 0
  1285                           
  1286                           ; 2 bytes @ 0x52
  1287  000053                     	ds	2
  1288  000055                     inputEntry@inputEntryStep:
  1289                           	opt stack 0
  1290                           
  1291                           ; 2 bytes @ 0x54
  1292  000055                     	ds	2
  1293  000057                     inputEntry@numPressed:
  1294                           	opt stack 0
  1295                           
  1296                           ; 2 bytes @ 0x56
  1297  000057                     	ds	2
  1298  000059                     inputEntry@compartmentNum:
  1299                           	opt stack 0
  1300                           
  1301                           ; 2 bytes @ 0x58
  1302  000059                     	ds	2
  1303  00005B                     inputEntry@i:
  1304                           	opt stack 0
  1305                           
  1306                           ; 2 bytes @ 0x5A
  1307  00005B                     	ds	2
  1308  00005D                     inputEntry@pressed:
  1309                           	opt stack 0
  1310                           
  1311                           ; 1 bytes @ 0x5C
  1312  00005D                     	ds	1
  1313  00005E                     ??_mainMenu:
  1314                           
  1315                           ; 1 bytes @ 0x5D
  1316  00005E                     	ds	4
  1317  000062                     mainMenu@needToPrint:
  1318                           	opt stack 0
  1319                           
  1320                           ; 2 bytes @ 0x61
  1321  000062                     	ds	2
  1322  000064                     mainMenu@pressed:
  1323                           	opt stack 0
  1324                           
  1325                           ; 2 bytes @ 0x63
  1326  000064                     	ds	2
  1327  000066                     mainMenu@i:
  1328                           	opt stack 0
  1329                           
  1330                           ; 2 bytes @ 0x65
  1331  000066                     	ds	2
  1332  000068                     ??_main:
  1333                           
  1334                           ; 1 bytes @ 0x67
  1335  000068                     	ds	1
  1336                           tblptru	equ	0xFF8
  1337                           tblptrh	equ	0xFF7
  1338                           tblptrl	equ	0xFF6
  1339                           tablat	equ	0xFF5
  1340                           postinc0	equ	0xFEE
  1341                           wreg	equ	0xFE8
  1342                           postdec1	equ	0xFE5
  1343                           fsr1l	equ	0xFE1
  1344                           
  1345 ;;
  1346 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1347 ;;
  1348 ;; *************** function _main *****************
  1349 ;; Defined at:
  1350 ;;		line 265 in file "main.c"
  1351 ;; Parameters:    Size  Location     Type
  1352 ;;		None
  1353 ;; Auto vars:     Size  Location     Type
  1354 ;;		None
  1355 ;; Return value:  Size  Location     Type
  1356 ;;                  1    wreg      void 
  1357 ;; Registers used:
  1358 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1359 ;; Tracked objects:
  1360 ;;		On entry : 0/0
  1361 ;;		On exit  : 0/0
  1362 ;;		Unchanged: 0/0
  1363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1366 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1367 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1368 ;;Total ram usage:        1 bytes
  1369 ;; Hardware stack levels required when called:    6
  1370 ;; This function calls:
  1371 ;;		_I2C_Master_Init
  1372 ;;		_hibernate
  1373 ;;		_initLCD
  1374 ;;		_lcdInst
  1375 ;;		_mainMenu
  1376 ;; This function is called by:
  1377 ;;		Startup code after reset
  1378 ;; This function uses a non-reentrant model
  1379 ;;
  1380                           
  1381                           	psect	text0
  1382  00F09C                     __ptext0:
  1383                           	opt stack 0
  1384  00F09C                     _main:
  1385                           	opt stack 25
  1386                           
  1387                           ;main.c: 270: LATA = 0x00;
  1388                           
  1389                           ;incstack = 0
  1390  00F09C  0E00               	movlw	0
  1391  00F09E  6E89               	movwf	3977,c	;volatile
  1392                           
  1393                           ;main.c: 271: LATB = 0x00;
  1394  00F0A0  0E00               	movlw	0
  1395  00F0A2  6E8A               	movwf	3978,c	;volatile
  1396                           
  1397                           ;main.c: 272: LATC = 0x00;
  1398  00F0A4  0E00               	movlw	0
  1399  00F0A6  6E8B               	movwf	3979,c	;volatile
  1400                           
  1401                           ;main.c: 273: LATD = 0x00;
  1402  00F0A8  0E00               	movlw	0
  1403  00F0AA  6E8C               	movwf	3980,c	;volatile
  1404                           
  1405                           ;main.c: 274: LATE = 0x00;
  1406  00F0AC  0E00               	movlw	0
  1407  00F0AE  6E8D               	movwf	3981,c	;volatile
  1408                           
  1409                           ;main.c: 277: TRISA = 0xFF;
  1410  00F0B0  6892               	setf	3986,c	;volatile
  1411                           
  1412                           ;main.c: 278: TRISB = 0b11110111;
  1413  00F0B2  0EF7               	movlw	247
  1414  00F0B4  6E93               	movwf	3987,c	;volatile
  1415                           
  1416                           ;main.c: 279: TRISC = 0x00;
  1417  00F0B6  0E00               	movlw	0
  1418  00F0B8  6E94               	movwf	3988,c	;volatile
  1419                           
  1420                           ;main.c: 280: TRISD = 0x00;
  1421  00F0BA  0E00               	movlw	0
  1422  00F0BC  6E95               	movwf	3989,c	;volatile
  1423                           
  1424                           ;main.c: 281: TRISE = 0x00;
  1425  00F0BE  0E00               	movlw	0
  1426  00F0C0  6E96               	movwf	3990,c	;volatile
  1427                           
  1428                           ;main.c: 284: I2C_Master_Init(100000);
  1429  00F0C2  0EA0               	movlw	160
  1430  00F0C4  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  1431  00F0C6  0E86               	movlw	134
  1432  00F0C8  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  1433  00F0CA  0E01               	movlw	1
  1434  00F0CC  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  1435  00F0CE  0E00               	movlw	0
  1436  00F0D0  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  1437  00F0D2  ECB8  F077         	call	_I2C_Master_Init	;wreg free
  1438                           
  1439                           ;main.c: 286: initLCD();
  1440  00F0D6  EC43  F077         	call	_initLCD	;wreg free
  1441                           
  1442                           ;main.c: 288: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1443  00F0DA  0E01               	movlw	1
  1444  00F0DC  EC5B  F076         	call	_lcdInst
  1445  00F0E0  0EC3               	movlw	195
  1446  00F0E2  6E68               	movwf	??_main& (0+255),c
  1447  00F0E4  0ECD               	movlw	205
  1448  00F0E6                     u2267:
  1449  00F0E6  2EE8               	decfsz	wreg,f,c
  1450  00F0E8  D7FE               	bra	u2267
  1451  00F0EA  2E68               	decfsz	??_main& (0+255),f,c
  1452  00F0EC  D7FC               	bra	u2267
  1453  00F0EE  F000               	nop	
  1454                           
  1455                           ;main.c: 289: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1456  00F0F0  0E80               	movlw	128
  1457  00F0F2  EC5B  F076         	call	_lcdInst
  1458  00F0F6  0E41               	movlw	65
  1459  00F0F8  6E68               	movwf	??_main& (0+255),c
  1460  00F0FA  0EEE               	movlw	238
  1461  00F0FC                     u2277:
  1462  00F0FC  2EE8               	decfsz	wreg,f,c
  1463  00F0FE  D7FE               	bra	u2277
  1464  00F100  2E68               	decfsz	??_main& (0+255),f,c
  1465  00F102  D7FC               	bra	u2277
  1466  00F104  D000               	nop2	
  1467                           
  1468                           ;main.c: 291: hibernate();
  1469  00F106  ECE5  F076         	call	_hibernate	;wreg free
  1470                           
  1471                           ;main.c: 292: mainMenu();
  1472  00F10A  EC09  F079         	call	_mainMenu	;wreg free
  1473  00F10E  EF00  F000         	goto	start
  1474  00F112                     __end_of_main:
  1475                           	opt stack 0
  1476                           tblptru	equ	0xFF8
  1477                           tblptrh	equ	0xFF7
  1478                           tblptrl	equ	0xFF6
  1479                           tablat	equ	0xFF5
  1480                           postinc0	equ	0xFEE
  1481                           wreg	equ	0xFE8
  1482                           postdec1	equ	0xFE5
  1483                           fsr1l	equ	0xFE1
  1484                           
  1485 ;; *************** function _mainMenu *****************
  1486 ;; Defined at:
  1487 ;;		line 25 in file "menu.c"
  1488 ;; Parameters:    Size  Location     Type
  1489 ;;		None
  1490 ;; Auto vars:     Size  Location     Type
  1491 ;;  i               2  101[COMRAM] int 
  1492 ;;  pressed         2   99[COMRAM] int 
  1493 ;;  needToPrint     2   97[COMRAM] int 
  1494 ;; Return value:  Size  Location     Type
  1495 ;;                  1    wreg      void 
  1496 ;; Registers used:
  1497 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1498 ;; Tracked objects:
  1499 ;;		On entry : 0/0
  1500 ;;		On exit  : 0/0
  1501 ;;		Unchanged: 0/0
  1502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1504 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1505 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1506 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1507 ;;Total ram usage:       10 bytes
  1508 ;; Hardware stack levels used:    1
  1509 ;; Hardware stack levels required when called:    5
  1510 ;; This function calls:
  1511 ;;		_hibernate
  1512 ;;		_inputEntry
  1513 ;;		_lcdInst
  1514 ;;		_pollKeypad
  1515 ;;		_printStringLCD
  1516 ;;		_printf
  1517 ;;		_putch
  1518 ;;		_viewLogs
  1519 ;; This function is called by:
  1520 ;;		_main
  1521 ;; This function uses a non-reentrant model
  1522 ;;
  1523                           
  1524                           	psect	text1
  1525  00F212                     __ptext1:
  1526                           	opt stack 0
  1527  00F212                     _mainMenu:
  1528                           	opt stack 25
  1529                           
  1530                           ;menu.c: 26: int pressed;
  1531                           ;menu.c: 27: int needToPrint = 1;
  1532                           
  1533                           ;incstack = 0
  1534  00F212  0E00               	movlw	0
  1535  00F214  6E63               	movwf	mainMenu@needToPrint+1,c
  1536  00F216  0E01               	movlw	1
  1537  00F218  6E62               	movwf	mainMenu@needToPrint,c
  1538  00F21A                     
  1539                           ;menu.c: 30: if (needToPrint) {
  1540  00F21A  5062               	movf	mainMenu@needToPrint,w,c
  1541  00F21C  1063               	iorwf	mainMenu@needToPrint+1,w,c
  1542  00F21E  B4D8               	btfsc	status,2,c
  1543  00F220  D00A               	goto	l306
  1544                           
  1545                           ;menu.c: 31: printStringLCD("0:Sleep 1:Begin \n2: View Logs");
  1546  00F222  0E80               	movlw	low STR_4
  1547  00F224  6E07               	movwf	printStringLCD@string,c
  1548  00F226  0EFF               	movlw	high STR_4
  1549  00F228  6E08               	movwf	printStringLCD@string+1,c
  1550  00F22A  ECA3  F07A         	call	_printStringLCD	;wreg free
  1551                           
  1552                           ;menu.c: 32: needToPrint = 0;
  1553  00F22E  0E00               	movlw	0
  1554  00F230  6E63               	movwf	mainMenu@needToPrint+1,c
  1555  00F232  0E00               	movlw	0
  1556  00F234  6E62               	movwf	mainMenu@needToPrint,c
  1557  00F236                     l306:
  1558                           
  1559                           ;menu.c: 33: }
  1560                           ;menu.c: 34: pressed = pollKeypad();
  1561  00F236  ECB5  F076         	call	_pollKeypad	;wreg free
  1562  00F23A  6E5E               	movwf	??_mainMenu& (0+255),c
  1563  00F23C  505E               	movf	??_mainMenu,w,c
  1564  00F23E  6E64               	movwf	mainMenu@pressed,c
  1565  00F240  6A65               	clrf	mainMenu@pressed+1,c
  1566                           
  1567                           ;menu.c: 35: putch(pressed);
  1568  00F242  5064               	movf	mainMenu@pressed,w,c
  1569  00F244  EC65  F076         	call	_putch
  1570                           
  1571                           ;menu.c: 36: if (pressed - 48 == 0) {
  1572  00F248  0ED0               	movlw	208
  1573  00F24A  6E5E               	movwf	??_mainMenu& (0+255),c
  1574  00F24C  0EFF               	movlw	255
  1575  00F24E  6E5F               	movwf	(??_mainMenu+1)& (0+255),c
  1576  00F250  C064  F060         	movff	mainMenu@pressed,??_mainMenu+2
  1577  00F254  C065  F061         	movff	mainMenu@pressed+1,??_mainMenu+3
  1578  00F258  505E               	movf	??_mainMenu,w,c
  1579  00F25A  2660               	addwf	??_mainMenu+2,f,c
  1580  00F25C  505F               	movf	??_mainMenu+1,w,c
  1581  00F25E  2261               	addwfc	??_mainMenu+3,f,c
  1582  00F260  5060               	movf	??_mainMenu+2,w,c
  1583  00F262  1061               	iorwf	??_mainMenu+3,w,c
  1584  00F264  A4D8               	btfss	status,2,c
  1585  00F266  D003               	goto	l307
  1586                           
  1587                           ;menu.c: 37: hibernate();
  1588  00F268  ECE5  F076         	call	_hibernate	;wreg free
  1589  00F26C  D7D2               	goto	_mainMenu
  1590  00F26E                     l307:
  1591  00F26E  0ED0               	movlw	208
  1592  00F270  6E5E               	movwf	??_mainMenu& (0+255),c
  1593  00F272  0EFF               	movlw	255
  1594  00F274  6E5F               	movwf	(??_mainMenu+1)& (0+255),c
  1595  00F276  C064  F060         	movff	mainMenu@pressed,??_mainMenu+2
  1596  00F27A  C065  F061         	movff	mainMenu@pressed+1,??_mainMenu+3
  1597  00F27E  505E               	movf	??_mainMenu,w,c
  1598  00F280  2660               	addwf	??_mainMenu+2,f,c
  1599  00F282  505F               	movf	??_mainMenu+1,w,c
  1600  00F284  2261               	addwfc	??_mainMenu+3,f,c
  1601  00F286  0460               	decf	??_mainMenu+2,w,c
  1602  00F288  1061               	iorwf	??_mainMenu+3,w,c
  1603  00F28A  A4D8               	btfss	status,2,c
  1604  00F28C  D06D               	goto	l309
  1605                           
  1606                           ;menu.c: 40: inputEntry();
  1607  00F28E  ECF7  F07B         	call	_inputEntry	;wreg free
  1608                           
  1609                           ;menu.c: 41: printf("Summary:");
  1610  00F292  0EEE               	movlw	low STR_5
  1611  00F294  6E0D               	movwf	printf@f,c
  1612  00F296  0EFF               	movlw	high STR_5
  1613  00F298  6E0E               	movwf	printf@f+1,c
  1614  00F29A  ECC8  F079         	call	_printf	;wreg free
  1615                           
  1616                           ;menu.c: 42: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1617  00F29E  0E33               	movlw	51
  1618  00F2A0  6E5F               	movwf	(??_mainMenu+1)& (0+255),c
  1619  00F2A2  0EBB               	movlw	187
  1620  00F2A4  6E5E               	movwf	??_mainMenu& (0+255),c
  1621  00F2A6  0EE0               	movlw	224
  1622  00F2A8                     u2287:
  1623  00F2A8  2EE8               	decfsz	wreg,f,c
  1624  00F2AA  D7FE               	bra	u2287
  1625  00F2AC  2E5E               	decfsz	??_mainMenu& (0+255),f,c
  1626  00F2AE  D7FC               	bra	u2287
  1627  00F2B0  2E5F               	decfsz	(??_mainMenu+1)& (0+255),f,c
  1628  00F2B2  D7FA               	bra	u2287
  1629  00F2B4                     l2357:
  1630                           
  1631                           ;menu.c: 45: for (i = 0; i < 8; i++) {
  1632  00F2B4  0E00               	movlw	0
  1633  00F2B6  6E67               	movwf	mainMenu@i+1,c
  1634  00F2B8  0E00               	movlw	0
  1635  00F2BA  6E66               	movwf	mainMenu@i,c
  1636  00F2BC                     l2359:
  1637  00F2BC  BE67               	btfsc	mainMenu@i+1,7,c
  1638  00F2BE  D006               	goto	l311
  1639  00F2C0  5067               	movf	mainMenu@i+1,w,c
  1640  00F2C2  E1F8               	bnz	l2357
  1641  00F2C4  0E08               	movlw	8
  1642  00F2C6  5C66               	subwf	mainMenu@i,w,c
  1643  00F2C8  B0D8               	btfsc	status,0,c
  1644  00F2CA  D7F4               	goto	l310
  1645  00F2CC                     l311:
  1646                           
  1647                           ;menu.c: 46: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1648  00F2CC  0E01               	movlw	1
  1649  00F2CE  EC5B  F076         	call	_lcdInst
  1650  00F2D2  0EC3               	movlw	195
  1651  00F2D4  6E5E               	movwf	??_mainMenu& (0+255),c
  1652  00F2D6  0ECD               	movlw	205
  1653  00F2D8                     u2297:
  1654  00F2D8  2EE8               	decfsz	wreg,f,c
  1655  00F2DA  D7FE               	bra	u2297
  1656  00F2DC  2E5E               	decfsz	??_mainMenu& (0+255),f,c
  1657  00F2DE  D7FC               	bra	u2297
  1658  00F2E0  F000               	nop	
  1659                           
  1660                           ;menu.c: 47: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1661  00F2E2  0E80               	movlw	128
  1662  00F2E4  EC5B  F076         	call	_lcdInst
  1663  00F2E8  0E41               	movlw	65
  1664  00F2EA  6E5E               	movwf	??_mainMenu& (0+255),c
  1665  00F2EC  0EEE               	movlw	238
  1666  00F2EE                     u2307:
  1667  00F2EE  2EE8               	decfsz	wreg,f,c
  1668  00F2F0  D7FE               	bra	u2307
  1669  00F2F2  2E5E               	decfsz	??_mainMenu& (0+255),f,c
  1670  00F2F4  D7FC               	bra	u2307
  1671  00F2F6  D000               	nop2	
  1672                           
  1673                           ;menu.c: 48: printf("C%d: %s x%d", i+1, fSLookup[params.toFill[i]], params.setMultiple[i
      +                          ]);
  1674  00F2F8  0EE2               	movlw	low STR_6
  1675  00F2FA  6E0D               	movwf	printf@f,c
  1676  00F2FC  0EFF               	movlw	high STR_6
  1677  00F2FE  6E0E               	movwf	printf@f+1,c
  1678  00F300  0E01               	movlw	1
  1679  00F302  2466               	addwf	mainMenu@i,w,c
  1680  00F304  6E0F               	movwf	?_printf+2,c
  1681  00F306  0E00               	movlw	0
  1682  00F308  2067               	addwfc	mainMenu@i+1,w,c
  1683  00F30A  6E10               	movwf	?_printf+3,c
  1684  00F30C  0E82               	movlw	low (_params+2)
  1685  00F30E  2466               	addwf	mainMenu@i,w,c
  1686  00F310  6ED9               	movwf	fsr2l,c
  1687  00F312  0E00               	movlw	high (_params+2)
  1688  00F314  2067               	addwfc	mainMenu@i+1,w,c
  1689  00F316  6EDA               	movwf	fsr2h,c
  1690  00F318  50DF               	movf	indf2,w,c
  1691  00F31A  6E5E               	movwf	??_mainMenu& (0+255),c
  1692  00F31C  505E               	movf	??_mainMenu,w,c
  1693  00F31E  0D05               	mullw	5
  1694  00F320  0E00               	movlw	low _fSLookup
  1695  00F322  24F3               	addwf	prodl,w,c
  1696  00F324  6E11               	movwf	?_printf+4,c
  1697  00F326  0E01               	movlw	high _fSLookup
  1698  00F328  20F4               	addwfc	prodh,w,c
  1699  00F32A  6E12               	movwf	?_printf+5,c
  1700  00F32C  90D8               	bcf	status,0,c
  1701  00F32E  3466               	rlcf	mainMenu@i,w,c
  1702  00F330  6ED9               	movwf	fsr2l,c
  1703  00F332  3467               	rlcf	mainMenu@i+1,w,c
  1704  00F334  6EDA               	movwf	fsr2h,c
  1705  00F336  0E8A               	movlw	low (_params+10)
  1706  00F338  26D9               	addwf	fsr2l,f,c
  1707  00F33A  0E00               	movlw	high (_params+10)
  1708  00F33C  22DA               	addwfc	fsr2h,f,c
  1709  00F33E  CFDE F013          	movff	postinc2,?_printf+6
  1710  00F342  CFDD F014          	movff	postdec2,?_printf+7
  1711  00F346  ECC8  F079         	call	_printf	;wreg free
  1712                           
  1713                           ;menu.c: 49: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1714  00F34A  0E66               	movlw	102
  1715  00F34C  6E5F               	movwf	(??_mainMenu+1)& (0+255),c
  1716  00F34E  0E76               	movlw	118
  1717  00F350  6E5E               	movwf	??_mainMenu& (0+255),c
  1718  00F352  0EC1               	movlw	193
  1719  00F354                     u2317:
  1720  00F354  2EE8               	decfsz	wreg,f,c
  1721  00F356  D7FE               	bra	u2317
  1722  00F358  2E5E               	decfsz	??_mainMenu& (0+255),f,c
  1723  00F35A  D7FC               	bra	u2317
  1724  00F35C  2E5F               	decfsz	(??_mainMenu+1)& (0+255),f,c
  1725  00F35E  D7FA               	bra	u2317
  1726  00F360  F000               	nop	
  1727  00F362  4A66               	infsnz	mainMenu@i,f,c
  1728  00F364  2A67               	incf	mainMenu@i+1,f,c
  1729  00F366  D7AA               	goto	l2359
  1730  00F368                     l309:
  1731  00F368  0ED0               	movlw	208
  1732  00F36A  6E5E               	movwf	??_mainMenu& (0+255),c
  1733  00F36C  0EFF               	movlw	255
  1734  00F36E  6E5F               	movwf	(??_mainMenu+1)& (0+255),c
  1735  00F370  C064  F060         	movff	mainMenu@pressed,??_mainMenu+2
  1736  00F374  C065  F061         	movff	mainMenu@pressed+1,??_mainMenu+3
  1737  00F378  505E               	movf	??_mainMenu,w,c
  1738  00F37A  2660               	addwf	??_mainMenu+2,f,c
  1739  00F37C  505F               	movf	??_mainMenu+1,w,c
  1740  00F37E  2261               	addwfc	??_mainMenu+3,f,c
  1741  00F380  0E02               	movlw	2
  1742  00F382  1860               	xorwf	??_mainMenu+2,w,c
  1743  00F384  1061               	iorwf	??_mainMenu+3,w,c
  1744  00F386  A4D8               	btfss	status,2,c
  1745  00F388  D748               	goto	l305
  1746                           
  1747                           ;menu.c: 53: viewLogs();
  1748  00F38A  EC7D  F076         	call	_viewLogs	;wreg free
  1749  00F38E  D741               	goto	_mainMenu
  1750  00F390                     __end_of_mainMenu:
  1751                           	opt stack 0
  1752                           tblptru	equ	0xFF8
  1753                           tblptrh	equ	0xFF7
  1754                           tblptrl	equ	0xFF6
  1755                           tablat	equ	0xFF5
  1756                           prodh	equ	0xFF4
  1757                           prodl	equ	0xFF3
  1758                           postinc0	equ	0xFEE
  1759                           wreg	equ	0xFE8
  1760                           postdec1	equ	0xFE5
  1761                           fsr1l	equ	0xFE1
  1762                           indf2	equ	0xFDF
  1763                           postinc2	equ	0xFDE
  1764                           postdec2	equ	0xFDD
  1765                           fsr2h	equ	0xFDA
  1766                           fsr2l	equ	0xFD9
  1767                           status	equ	0xFD8
  1768                           
  1769 ;; *************** function _viewLogs *****************
  1770 ;; Defined at:
  1771 ;;		line 17 in file "menu.c"
  1772 ;; Parameters:    Size  Location     Type
  1773 ;;		None
  1774 ;; Auto vars:     Size  Location     Type
  1775 ;;  pressed         2   22[COMRAM] int 
  1776 ;; Return value:  Size  Location     Type
  1777 ;;                  1    wreg      void 
  1778 ;; Registers used:
  1779 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1780 ;; Tracked objects:
  1781 ;;		On entry : 0/0
  1782 ;;		On exit  : 0/0
  1783 ;;		Unchanged: 0/0
  1784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1786 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1787 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1788 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1789 ;;Total ram usage:        3 bytes
  1790 ;; Hardware stack levels used:    1
  1791 ;; Hardware stack levels required when called:    3
  1792 ;; This function calls:
  1793 ;;		_pollKeypad
  1794 ;;		_printStringLCD
  1795 ;; This function is called by:
  1796 ;;		_mainMenu
  1797 ;; This function uses a non-reentrant model
  1798 ;;
  1799                           
  1800                           	psect	text2
  1801  00ECFA                     __ptext2:
  1802                           	opt stack 0
  1803  00ECFA                     _viewLogs:
  1804                           	opt stack 26
  1805                           
  1806                           ;menu.c: 18: printStringLCD("Not there yet\n* to return");
  1807                           
  1808                           ;incstack = 0
  1809  00ECFA  0E9E               	movlw	low STR_3
  1810  00ECFC  6E07               	movwf	printStringLCD@string,c
  1811  00ECFE  0EFF               	movlw	high STR_3
  1812  00ED00  6E08               	movwf	printStringLCD@string+1,c
  1813  00ED02  ECA3  F07A         	call	_printStringLCD	;wreg free
  1814  00ED06                     
  1815                           ;menu.c: 20: int pressed = pollKeypad();
  1816  00ED06  ECB5  F076         	call	_pollKeypad	;wreg free
  1817  00ED0A  6E16               	movwf	??_viewLogs& (0+255),c
  1818  00ED0C  5016               	movf	??_viewLogs,w,c
  1819  00ED0E  6E17               	movwf	viewLogs@pressed,c
  1820  00ED10  6A18               	clrf	viewLogs@pressed+1,c
  1821                           
  1822                           ;menu.c: 21: if (pressed == 42) return;
  1823  00ED12  0E2A               	movlw	42
  1824  00ED14  1817               	xorwf	viewLogs@pressed,w,c
  1825  00ED16  1018               	iorwf	viewLogs@pressed+1,w,c
  1826  00ED18  B4D8               	btfsc	status,2,c
  1827  00ED1A  0012               	return	
  1828  00ED1C  D7F4               	goto	l298
  1829  00ED1E                     __end_of_viewLogs:
  1830                           	opt stack 0
  1831                           tblptru	equ	0xFF8
  1832                           tblptrh	equ	0xFF7
  1833                           tblptrl	equ	0xFF6
  1834                           tablat	equ	0xFF5
  1835                           prodh	equ	0xFF4
  1836                           prodl	equ	0xFF3
  1837                           postinc0	equ	0xFEE
  1838                           wreg	equ	0xFE8
  1839                           postdec1	equ	0xFE5
  1840                           fsr1l	equ	0xFE1
  1841                           indf2	equ	0xFDF
  1842                           postinc2	equ	0xFDE
  1843                           postdec2	equ	0xFDD
  1844                           fsr2h	equ	0xFDA
  1845                           fsr2l	equ	0xFD9
  1846                           status	equ	0xFD8
  1847                           
  1848 ;; *************** function _printf *****************
  1849 ;; Defined at:
  1850 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1851 ;; Parameters:    Size  Location     Type
  1852 ;;  f               2   12[COMRAM] PTR const unsigned char 
  1853 ;;		 -> STR_6(12), STR_5(9), 
  1854 ;; Auto vars:     Size  Location     Type
  1855 ;;  tmpval          4    0        struct .
  1856 ;;  val             2   27[COMRAM] unsigned int 
  1857 ;;  cp              2   25[COMRAM] PTR const unsigned char 
  1858 ;;		 -> STR_7(7), fSLookup(105), 
  1859 ;;  ap              2   23[COMRAM] PTR void [1]
  1860 ;;		 -> ?_printf(2), 
  1861 ;;  len             2    0        unsigned int 
  1862 ;;  c               1   29[COMRAM] char 
  1863 ;;  prec            1   22[COMRAM] char 
  1864 ;;  flag            1   21[COMRAM] unsigned char 
  1865 ;; Return value:  Size  Location     Type
  1866 ;;                  2   12[COMRAM] int 
  1867 ;; Registers used:
  1868 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1869 ;; Tracked objects:
  1870 ;;		On entry : 0/0
  1871 ;;		On exit  : 0/0
  1872 ;;		Unchanged: 0/0
  1873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1874 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1875 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1876 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1877 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1878 ;;Total ram usage:       18 bytes
  1879 ;; Hardware stack levels used:    1
  1880 ;; Hardware stack levels required when called:    2
  1881 ;; This function calls:
  1882 ;;		___lwdiv
  1883 ;;		___lwmod
  1884 ;;		_putch
  1885 ;; This function is called by:
  1886 ;;		_mainMenu
  1887 ;; This function uses a non-reentrant model
  1888 ;;
  1889                           
  1890                           	psect	text3
  1891  00F390                     __ptext3:
  1892                           	opt stack 0
  1893  00F390                     _printf:
  1894                           	opt stack 27
  1895                           
  1896                           ;doprnt.c: 466: va_list ap;
  1897                           ;doprnt.c: 499: signed char c;
  1898                           ;doprnt.c: 506: signed char prec;
  1899                           ;doprnt.c: 508: unsigned char flag;
  1900                           ;doprnt.c: 523: union {
  1901                           ;doprnt.c: 524: unsigned long vd;
  1902                           ;doprnt.c: 525: double integ;
  1903                           ;doprnt.c: 526: } tmpval;
  1904                           ;doprnt.c: 528: unsigned int val;
  1905                           ;doprnt.c: 529: unsigned len;
  1906                           ;doprnt.c: 530: const char * cp;
  1907                           ;doprnt.c: 533: *ap = __va_start();
  1908                           
  1909                           ;incstack = 0
  1910  00F390  0E0F               	movlw	low (?_printf+2)
  1911  00F392  6E18               	movwf	printf@ap,c
  1912  00F394  0E00               	movlw	high (?_printf+2)
  1913  00F396  6E19               	movwf	printf@ap+1,c
  1914                           
  1915                           ;doprnt.c: 536: while(c = *f++) {
  1916  00F398  D0C8               	goto	u2110
  1917  00F39A                     
  1918                           ;doprnt.c: 538: if(c != '%')
  1919  00F39A  0E25               	movlw	37
  1920  00F39C  181E               	xorwf	printf@c,w,c
  1921  00F39E  B4D8               	btfsc	status,2,c
  1922  00F3A0  D004               	goto	l399
  1923                           
  1924                           ;doprnt.c: 540: {
  1925                           ;doprnt.c: 541: (putch(c) );
  1926  00F3A2  501E               	movf	printf@c,w,c
  1927  00F3A4  EC65  F076         	call	_putch
  1928                           
  1929                           ;doprnt.c: 542: continue;
  1930  00F3A8  D0C0               	goto	u2110
  1931  00F3AA                     l399:
  1932                           
  1933                           ;doprnt.c: 543: }
  1934                           ;doprnt.c: 548: flag = 0;
  1935  00F3AA  0E00               	movlw	0
  1936  00F3AC  6E16               	movwf	printf@flag,c
  1937                           
  1938                           ;doprnt.c: 635: switch(c = *f++) {
  1939  00F3AE  D03F               	goto	l400
  1940  00F3B0                     
  1941                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  1942  00F3B0  C018  FFD9         	movff	printf@ap,fsr2l
  1943  00F3B4  C019  FFDA         	movff	printf@ap+1,fsr2h
  1944  00F3B8  CFDE F01A          	movff	postinc2,printf@cp
  1945  00F3BC  CFDD F01B          	movff	postdec2,printf@cp+1
  1946  00F3C0  0E02               	movlw	2
  1947  00F3C2  2618               	addwf	printf@ap,f,c
  1948  00F3C4  0E00               	movlw	0
  1949  00F3C6  2219               	addwfc	printf@ap+1,f,c
  1950                           
  1951                           ;doprnt.c: 740: if(!cp)
  1952  00F3C8  501A               	movf	printf@cp,w,c
  1953  00F3CA  101B               	iorwf	printf@cp+1,w,c
  1954  00F3CC  A4D8               	btfss	status,2,c
  1955  00F3CE  D01A               	goto	l408
  1956                           
  1957                           ;doprnt.c: 741: cp = "(null)";
  1958  00F3D0  0EF7               	movlw	low STR_7
  1959  00F3D2  6E1A               	movwf	printf@cp,c
  1960  00F3D4  0EFF               	movlw	high STR_7
  1961  00F3D6  6E1B               	movwf	printf@cp+1,c
  1962                           
  1963                           ;doprnt.c: 777: while(*cp)
  1964  00F3D8  D015               	goto	l408
  1965  00F3DA                     
  1966                           ;doprnt.c: 778: (putch(*cp++) );
  1967  00F3DA  C01A  FFF6         	movff	printf@cp,tblptrl
  1968  00F3DE  C01B  FFF7         	movff	printf@cp+1,tblptrh
  1969  00F3E2  0E00               	movlw	low (__mediumconst shr (0+16))
  1970  00F3E4  6EF8               	movwf	tblptru,c
  1971  00F3E6  0E0F               	movlw	(high __ramtop+-1)
  1972  00F3E8  64F7               	cpfsgt	tblptrh,c
  1973  00F3EA  D003               	bra	u2037
  1974  00F3EC  0008               	tblrd		*
  1975  00F3EE  50F5               	movf	tablat,w,c
  1976  00F3F0  D005               	bra	u2030
  1977  00F3F2                     u2037:
  1978  00F3F2  CFF6 FFE9          	movff	tblptrl,fsr0l
  1979  00F3F6  CFF7 FFEA          	movff	tblptrh,fsr0h
  1980  00F3FA  50EF               	movf	indf0,w,c
  1981  00F3FC                     u2030:
  1982  00F3FC  EC65  F076         	call	_putch
  1983  00F400  4A1A               	infsnz	printf@cp,f,c
  1984  00F402  2A1B               	incf	printf@cp+1,f,c
  1985  00F404                     l408:
  1986  00F404  C01A  FFF6         	movff	printf@cp,tblptrl
  1987  00F408  C01B  FFF7         	movff	printf@cp+1,tblptrh
  1988  00F40C  0E00               	movlw	low (__mediumconst shr (0+16))
  1989  00F40E  6EF8               	movwf	tblptru,c
  1990  00F410  0E0F               	movlw	(high __ramtop+-1)
  1991  00F412  64F7               	cpfsgt	tblptrh,c
  1992  00F414  D003               	bra	u2047
  1993  00F416  0008               	tblrd		*
  1994  00F418  50F5               	movf	tablat,w,c
  1995  00F41A  D005               	bra	u2040
  1996  00F41C                     u2047:
  1997  00F41C  CFF6 FFE9          	movff	tblptrl,fsr0l
  1998  00F420  CFF7 FFEA          	movff	tblptrh,fsr0h
  1999  00F424  50EF               	movf	indf0,w,c
  2000  00F426                     u2040:
  2001  00F426  0900               	iorlw	0
  2002  00F428  B4D8               	btfsc	status,2,c
  2003  00F42A  D07F               	goto	u2110
  2004  00F42C  D7D6               	goto	l409
  2005  00F42E                     l400:
  2006  00F42E  C00D  FFF6         	movff	printf@f,tblptrl
  2007  00F432  C00E  FFF7         	movff	printf@f+1,tblptrh
  2008  00F436  4A0D               	infsnz	printf@f,f,c
  2009  00F438  2A0E               	incf	printf@f+1,f,c
  2010  00F43A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2011  00F43A  6AF8               	clrf	tblptru,c
  2012  00F43C                     	endif
  2013  00F43C                     	if	0	;tblptru may be non-zero
  2014  00F43C                     	endif
  2015  00F43C  0008               	tblrd		*
  2016  00F43E  CFF5 F01E          	movff	tablat,printf@c
  2017  00F442  501E               	movf	printf@c,w,c
  2018                           
  2019                           ; Switch size 1, requested type "space"
  2020                           ; Number of cases is 4, Range of values is 0 to 115
  2021                           ; switch strategies available:
  2022                           ; Name         Instructions Cycles
  2023                           ; simple_byte           13     7 (average)
  2024                           ;	Chosen strategy is simple_byte
  2025  00F444  0A00               	xorlw	0	; case 0
  2026  00F446  B4D8               	btfsc	status,2,c
  2027  00F448  0012               	return	
  2028  00F44A  0A64               	xorlw	100	; case 100
  2029  00F44C  B4D8               	btfsc	status,2,c
  2030  00F44E  D007               	goto	l405
  2031  00F450  0A0D               	xorlw	13	; case 105
  2032  00F452  B4D8               	btfsc	status,2,c
  2033  00F454  D004               	goto	l405
  2034  00F456  0A1A               	xorlw	26	; case 115
  2035  00F458  B4D8               	btfsc	status,2,c
  2036  00F45A  D7AA               	goto	l406
  2037  00F45C  D066               	goto	u2110
  2038  00F45E                     l405:
  2039                           
  2040                           ;doprnt.c: 1253: {
  2041                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2042  00F45E  C018  FFD9         	movff	printf@ap,fsr2l
  2043  00F462  C019  FFDA         	movff	printf@ap+1,fsr2h
  2044  00F466  CFDE F01C          	movff	postinc2,printf@val
  2045  00F46A  CFDD F01D          	movff	postdec2,printf@val+1
  2046  00F46E  0E02               	movlw	2
  2047  00F470  2618               	addwf	printf@ap,f,c
  2048  00F472  0E00               	movlw	0
  2049  00F474  2219               	addwfc	printf@ap+1,f,c
  2050                           
  2051                           ;doprnt.c: 1261: if((int)val < 0) {
  2052  00F476  AE1D               	btfss	printf@val+1,7,c
  2053  00F478  D006               	goto	l412
  2054                           
  2055                           ;doprnt.c: 1262: flag |= 0x03;
  2056  00F47A  0E03               	movlw	3
  2057  00F47C  1216               	iorwf	printf@flag,f,c
  2058                           
  2059                           ;doprnt.c: 1263: val = -val;
  2060  00F47E  6C1C               	negf	printf@val,c
  2061  00F480  1E1D               	comf	printf@val+1,f,c
  2062  00F482  B0D8               	btfsc	status,0,c
  2063  00F484  2A1D               	incf	printf@val+1,f,c
  2064  00F486                     l412:
  2065                           
  2066                           ;doprnt.c: 1264: }
  2067                           ;doprnt.c: 1266: }
  2068                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2069  00F486  0E01               	movlw	1
  2070  00F488  6E1E               	movwf	printf@c,c
  2071  00F48A                     l2263:
  2072  00F48A  0E05               	movlw	5
  2073  00F48C  181E               	xorwf	printf@c,w,c
  2074  00F48E  B4D8               	btfsc	status,2,c
  2075  00F490  D015               	goto	u2090
  2076                           
  2077                           ;doprnt.c: 1306: if(val < dpowers[c])
  2078  00F492  501E               	movf	printf@c,w,c
  2079  00F494  0D02               	mullw	2
  2080  00F496  0E06               	movlw	low _dpowers
  2081  00F498  24F3               	addwf	prodl,w,c
  2082  00F49A  6EF6               	movwf	tblptrl,c
  2083  00F49C  0EFE               	movlw	high _dpowers
  2084  00F49E  20F4               	addwfc	prodh,w,c
  2085  00F4A0  6EF7               	movwf	tblptrh,c
  2086  00F4A2                     	if	1	;There are 3 active tblptr bytes
  2087  00F4A2  6AF8               	clrf	tblptru,c
  2088  00F4A4  0E00               	movlw	low (__mediumconst shr (0+16))
  2089  00F4A6  22F8               	addwfc	tblptru,f,c
  2090  00F4A8                     	endif
  2091  00F4A8  0009               	tblrd		*+
  2092  00F4AA  50F5               	movf	tablat,w,c
  2093  00F4AC  5C1C               	subwf	printf@val,w,c
  2094  00F4AE  0009               	tblrd		*+
  2095  00F4B0  50F5               	movf	tablat,w,c
  2096  00F4B2  581D               	subwfb	printf@val+1,w,c
  2097  00F4B4  A0D8               	btfss	status,0,c
  2098  00F4B6  D002               	goto	u2090
  2099                           
  2100                           ;doprnt.c: 1307: break;
  2101  00F4B8  2A1E               	incf	printf@c,f,c
  2102  00F4BA  D7E7               	goto	l2263
  2103  00F4BC                     u2090:
  2104                           
  2105                           ;doprnt.c: 1422: {
  2106                           ;doprnt.c: 1438: if(flag & 0x03)
  2107  00F4BC  C016  F015         	movff	printf@flag,??_printf
  2108  00F4C0  0E03               	movlw	3
  2109  00F4C2  1615               	andwf	??_printf,f,c
  2110  00F4C4  B4D8               	btfsc	status,2,c
  2111  00F4C6  D003               	goto	l416
  2112                           
  2113                           ;doprnt.c: 1439: (putch('-') );
  2114  00F4C8  0E2D               	movlw	45
  2115  00F4CA  EC65  F076         	call	_putch
  2116  00F4CE                     l416:
  2117                           
  2118                           ;doprnt.c: 1469: }
  2119                           ;doprnt.c: 1472: prec = c;
  2120  00F4CE  C01E  F017         	movff	printf@c,printf@prec
  2121                           
  2122                           ;doprnt.c: 1474: while(prec--) {
  2123  00F4D2  D027               	goto	l417
  2124  00F4D4                     
  2125                           ;doprnt.c: 1478: {
  2126                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2127  00F4D4  5017               	movf	printf@prec,w,c
  2128  00F4D6  0D02               	mullw	2
  2129  00F4D8  0E06               	movlw	low _dpowers
  2130  00F4DA  24F3               	addwf	prodl,w,c
  2131  00F4DC  6EF6               	movwf	tblptrl,c
  2132  00F4DE  0EFE               	movlw	high _dpowers
  2133  00F4E0  20F4               	addwfc	prodh,w,c
  2134  00F4E2  6EF7               	movwf	tblptrh,c
  2135  00F4E4                     	if	1	;There are 3 active tblptr bytes
  2136  00F4E4  6AF8               	clrf	tblptru,c
  2137  00F4E6  0E00               	movlw	low (__mediumconst shr (0+16))
  2138  00F4E8  22F8               	addwfc	tblptru,f,c
  2139  00F4EA                     	endif
  2140  00F4EA  0009               	tblrd		*+
  2141  00F4EC  CFF5 F003          	movff	tablat,___lwdiv@divisor
  2142  00F4F0  000A               	tblrd		*-
  2143  00F4F2  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  2144  00F4F6  C01C  F001         	movff	printf@val,___lwdiv@dividend
  2145  00F4FA  C01D  F002         	movff	printf@val+1,___lwdiv@dividend+1
  2146  00F4FE  EC8F  F077         	call	___lwdiv	;wreg free
  2147  00F502  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  2148  00F506  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  2149  00F50A  0E00               	movlw	0
  2150  00F50C  6E0B               	movwf	___lwmod@divisor+1,c
  2151  00F50E  0E0A               	movlw	10
  2152  00F510  6E0A               	movwf	___lwmod@divisor,c
  2153  00F512  EC22  F077         	call	___lwmod	;wreg free
  2154  00F516  5008               	movf	?___lwmod,w,c
  2155  00F518  0F30               	addlw	48
  2156  00F51A  6E1E               	movwf	printf@c,c
  2157                           
  2158                           ;doprnt.c: 1523: }
  2159                           ;doprnt.c: 1524: (putch(c) );
  2160  00F51C  501E               	movf	printf@c,w,c
  2161  00F51E  EC65  F076         	call	_putch
  2162  00F522                     l417:
  2163  00F522  0617               	decf	printf@prec,f,c
  2164  00F524  2817               	incf	printf@prec,w,c
  2165  00F526  A4D8               	btfss	status,2,c
  2166  00F528  D7D5               	goto	l418
  2167  00F52A                     u2110:
  2168  00F52A  C00D  FFF6         	movff	printf@f,tblptrl
  2169  00F52E  C00E  FFF7         	movff	printf@f+1,tblptrh
  2170  00F532  4A0D               	infsnz	printf@f,f,c
  2171  00F534  2A0E               	incf	printf@f+1,f,c
  2172  00F536                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2173  00F536  6AF8               	clrf	tblptru,c
  2174  00F538                     	endif
  2175  00F538                     	if	0	;tblptru may be non-zero
  2176  00F538                     	endif
  2177  00F538  0008               	tblrd		*
  2178  00F53A  CFF5 F01E          	movff	tablat,printf@c
  2179  00F53E  501E               	movf	printf@c,w,c
  2180  00F540  B4D8               	btfsc	status,2,c
  2181  00F542  0012               	return	
  2182  00F544  D72A               	goto	l398
  2183  00F546                     __end_of_printf:
  2184                           	opt stack 0
  2185                           tblptru	equ	0xFF8
  2186                           tblptrh	equ	0xFF7
  2187                           tblptrl	equ	0xFF6
  2188                           tablat	equ	0xFF5
  2189                           prodh	equ	0xFF4
  2190                           prodl	equ	0xFF3
  2191                           indf0	equ	0xFEF
  2192                           postinc0	equ	0xFEE
  2193                           fsr0h	equ	0xFEA
  2194                           fsr0l	equ	0xFE9
  2195                           wreg	equ	0xFE8
  2196                           postdec1	equ	0xFE5
  2197                           fsr1l	equ	0xFE1
  2198                           indf2	equ	0xFDF
  2199                           postinc2	equ	0xFDE
  2200                           postdec2	equ	0xFDD
  2201                           fsr2h	equ	0xFDA
  2202                           fsr2l	equ	0xFD9
  2203                           status	equ	0xFD8
  2204                           
  2205 ;; *************** function ___lwmod *****************
  2206 ;; Defined at:
  2207 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  2208 ;; Parameters:    Size  Location     Type
  2209 ;;  dividend        2    7[COMRAM] unsigned int 
  2210 ;;  divisor         2    9[COMRAM] unsigned int 
  2211 ;; Auto vars:     Size  Location     Type
  2212 ;;  counter         1   11[COMRAM] unsigned char 
  2213 ;; Return value:  Size  Location     Type
  2214 ;;                  2    7[COMRAM] unsigned int 
  2215 ;; Registers used:
  2216 ;;		wreg, status,2, status,0
  2217 ;; Tracked objects:
  2218 ;;		On entry : 0/0
  2219 ;;		On exit  : 0/0
  2220 ;;		Unchanged: 0/0
  2221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2222 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2223 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2225 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2226 ;;Total ram usage:        5 bytes
  2227 ;; Hardware stack levels used:    1
  2228 ;; This function calls:
  2229 ;;		Nothing
  2230 ;; This function is called by:
  2231 ;;		_printf
  2232 ;; This function uses a non-reentrant model
  2233 ;;
  2234                           
  2235                           	psect	text4
  2236  00EE44                     __ptext4:
  2237                           	opt stack 0
  2238  00EE44                     ___lwmod:
  2239                           	opt stack 28
  2240                           
  2241                           ;incstack = 0
  2242  00EE44  500A               	movf	___lwmod@divisor,w,c
  2243  00EE46  100B               	iorwf	___lwmod@divisor+1,w,c
  2244  00EE48  B4D8               	btfsc	status,2,c
  2245  00EE4A  D018               	goto	l840
  2246  00EE4C  0E01               	movlw	1
  2247  00EE4E  6E0C               	movwf	___lwmod@counter,c
  2248  00EE50  D004               	goto	l835
  2249  00EE52  90D8               	bcf	status,0,c
  2250  00EE54  360A               	rlcf	___lwmod@divisor,f,c
  2251  00EE56  360B               	rlcf	___lwmod@divisor+1,f,c
  2252  00EE58  2A0C               	incf	___lwmod@counter,f,c
  2253  00EE5A                     l835:
  2254  00EE5A  AE0B               	btfss	___lwmod@divisor+1,7,c
  2255  00EE5C  D7FA               	goto	l836
  2256  00EE5E                     u1590:
  2257  00EE5E  500A               	movf	___lwmod@divisor,w,c
  2258  00EE60  5C08               	subwf	___lwmod@dividend,w,c
  2259  00EE62  500B               	movf	___lwmod@divisor+1,w,c
  2260  00EE64  5809               	subwfb	___lwmod@dividend+1,w,c
  2261  00EE66  A0D8               	btfss	status,0,c
  2262  00EE68  D004               	goto	l839
  2263  00EE6A  500A               	movf	___lwmod@divisor,w,c
  2264  00EE6C  5E08               	subwf	___lwmod@dividend,f,c
  2265  00EE6E  500B               	movf	___lwmod@divisor+1,w,c
  2266  00EE70  5A09               	subwfb	___lwmod@dividend+1,f,c
  2267  00EE72                     l839:
  2268  00EE72  90D8               	bcf	status,0,c
  2269  00EE74  320B               	rrcf	___lwmod@divisor+1,f,c
  2270  00EE76  320A               	rrcf	___lwmod@divisor,f,c
  2271  00EE78  2E0C               	decfsz	___lwmod@counter,f,c
  2272  00EE7A  D7F1               	goto	u1590
  2273  00EE7C                     l840:
  2274  00EE7C  C008  F008         	movff	___lwmod@dividend,?___lwmod
  2275  00EE80  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  2276  00EE84  0012               	return		;funcret
  2277  00EE86                     __end_of___lwmod:
  2278                           	opt stack 0
  2279                           tblptru	equ	0xFF8
  2280                           tblptrh	equ	0xFF7
  2281                           tblptrl	equ	0xFF6
  2282                           tablat	equ	0xFF5
  2283                           prodh	equ	0xFF4
  2284                           prodl	equ	0xFF3
  2285                           indf0	equ	0xFEF
  2286                           postinc0	equ	0xFEE
  2287                           fsr0h	equ	0xFEA
  2288                           fsr0l	equ	0xFE9
  2289                           wreg	equ	0xFE8
  2290                           postdec1	equ	0xFE5
  2291                           fsr1l	equ	0xFE1
  2292                           indf2	equ	0xFDF
  2293                           postinc2	equ	0xFDE
  2294                           postdec2	equ	0xFDD
  2295                           fsr2h	equ	0xFDA
  2296                           fsr2l	equ	0xFD9
  2297                           status	equ	0xFD8
  2298                           
  2299 ;; *************** function ___lwdiv *****************
  2300 ;; Defined at:
  2301 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  2302 ;; Parameters:    Size  Location     Type
  2303 ;;  dividend        2    0[COMRAM] unsigned int 
  2304 ;;  divisor         2    2[COMRAM] unsigned int 
  2305 ;; Auto vars:     Size  Location     Type
  2306 ;;  quotient        2    4[COMRAM] unsigned int 
  2307 ;;  counter         1    6[COMRAM] unsigned char 
  2308 ;; Return value:  Size  Location     Type
  2309 ;;                  2    0[COMRAM] unsigned int 
  2310 ;; Registers used:
  2311 ;;		wreg, status,2, status,0
  2312 ;; Tracked objects:
  2313 ;;		On entry : 0/0
  2314 ;;		On exit  : 0/0
  2315 ;;		Unchanged: 0/0
  2316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2317 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2318 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2320 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2321 ;;Total ram usage:        7 bytes
  2322 ;; Hardware stack levels used:    1
  2323 ;; This function calls:
  2324 ;;		Nothing
  2325 ;; This function is called by:
  2326 ;;		_printf
  2327 ;; This function uses a non-reentrant model
  2328 ;;
  2329                           
  2330                           	psect	text5
  2331  00EF1E                     __ptext5:
  2332                           	opt stack 0
  2333  00EF1E                     ___lwdiv:
  2334                           	opt stack 28
  2335                           
  2336                           ;incstack = 0
  2337  00EF1E  0E00               	movlw	0
  2338  00EF20  6E06               	movwf	___lwdiv@quotient+1,c
  2339  00EF22  0E00               	movlw	0
  2340  00EF24  6E05               	movwf	___lwdiv@quotient,c
  2341  00EF26  5003               	movf	___lwdiv@divisor,w,c
  2342  00EF28  1004               	iorwf	___lwdiv@divisor+1,w,c
  2343  00EF2A  B4D8               	btfsc	status,2,c
  2344  00EF2C  D01C               	goto	l830
  2345  00EF2E  0E01               	movlw	1
  2346  00EF30  6E07               	movwf	___lwdiv@counter,c
  2347  00EF32  D004               	goto	l825
  2348  00EF34  90D8               	bcf	status,0,c
  2349  00EF36  3603               	rlcf	___lwdiv@divisor,f,c
  2350  00EF38  3604               	rlcf	___lwdiv@divisor+1,f,c
  2351  00EF3A  2A07               	incf	___lwdiv@counter,f,c
  2352  00EF3C                     l825:
  2353  00EF3C  AE04               	btfss	___lwdiv@divisor+1,7,c
  2354  00EF3E  D7FA               	goto	l826
  2355  00EF40                     u1560:
  2356  00EF40  90D8               	bcf	status,0,c
  2357  00EF42  3605               	rlcf	___lwdiv@quotient,f,c
  2358  00EF44  3606               	rlcf	___lwdiv@quotient+1,f,c
  2359  00EF46  5003               	movf	___lwdiv@divisor,w,c
  2360  00EF48  5C01               	subwf	___lwdiv@dividend,w,c
  2361  00EF4A  5004               	movf	___lwdiv@divisor+1,w,c
  2362  00EF4C  5802               	subwfb	___lwdiv@dividend+1,w,c
  2363  00EF4E  A0D8               	btfss	status,0,c
  2364  00EF50  D005               	goto	l829
  2365  00EF52  5003               	movf	___lwdiv@divisor,w,c
  2366  00EF54  5E01               	subwf	___lwdiv@dividend,f,c
  2367  00EF56  5004               	movf	___lwdiv@divisor+1,w,c
  2368  00EF58  5A02               	subwfb	___lwdiv@dividend+1,f,c
  2369  00EF5A  8005               	bsf	___lwdiv@quotient,0,c
  2370  00EF5C                     l829:
  2371  00EF5C  90D8               	bcf	status,0,c
  2372  00EF5E  3204               	rrcf	___lwdiv@divisor+1,f,c
  2373  00EF60  3203               	rrcf	___lwdiv@divisor,f,c
  2374  00EF62  2E07               	decfsz	___lwdiv@counter,f,c
  2375  00EF64  D7ED               	goto	u1560
  2376  00EF66                     l830:
  2377  00EF66  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  2378  00EF6A  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2379  00EF6E  0012               	return		;funcret
  2380  00EF70                     __end_of___lwdiv:
  2381                           	opt stack 0
  2382                           tblptru	equ	0xFF8
  2383                           tblptrh	equ	0xFF7
  2384                           tblptrl	equ	0xFF6
  2385                           tablat	equ	0xFF5
  2386                           prodh	equ	0xFF4
  2387                           prodl	equ	0xFF3
  2388                           indf0	equ	0xFEF
  2389                           postinc0	equ	0xFEE
  2390                           fsr0h	equ	0xFEA
  2391                           fsr0l	equ	0xFE9
  2392                           wreg	equ	0xFE8
  2393                           postdec1	equ	0xFE5
  2394                           fsr1l	equ	0xFE1
  2395                           indf2	equ	0xFDF
  2396                           postinc2	equ	0xFDE
  2397                           postdec2	equ	0xFDD
  2398                           fsr2h	equ	0xFDA
  2399                           fsr2l	equ	0xFD9
  2400                           status	equ	0xFD8
  2401                           
  2402 ;; *************** function _inputEntry *****************
  2403 ;; Defined at:
  2404 ;;		line 83 in file "main.c"
  2405 ;; Parameters:    Size  Location     Type
  2406 ;;		None
  2407 ;; Auto vars:     Size  Location     Type
  2408 ;;  sum             2   82[COMRAM] int 
  2409 ;;  fastenerStri   32   29[COMRAM] unsigned char [32]
  2410 ;;  compartments    1   71[COMRAM] unsigned char 
  2411 ;;  i               2   90[COMRAM] int 
  2412 ;;  compartmentN    2   88[COMRAM] int 
  2413 ;;  numPressed      2   86[COMRAM] int 
  2414 ;;  inputEntrySt    2   84[COMRAM] int 
  2415 ;;  numW            2   80[COMRAM] int 
  2416 ;;  numS            2   78[COMRAM] int 
  2417 ;;  numN            2   76[COMRAM] int 
  2418 ;;  numB            2   74[COMRAM] int 
  2419 ;;  doneCompartm    2   72[COMRAM] int 
  2420 ;;  doneMultiple    2   69[COMRAM] int 
  2421 ;;  setIsGood       2   67[COMRAM] int 
  2422 ;;  found           2   65[COMRAM] int 
  2423 ;;  done            2   63[COMRAM] int 
  2424 ;;  compartmentL    2   61[COMRAM] unsigned char [2]
  2425 ;;  numFasteners    2    0        int 
  2426 ;;  pressed         1   92[COMRAM] unsigned char 
  2427 ;; Return value:  Size  Location     Type
  2428 ;;                  2   86[None  ] int 
  2429 ;; Registers used:
  2430 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2431 ;; Tracked objects:
  2432 ;;		On entry : 0/0
  2433 ;;		On exit  : 0/0
  2434 ;;		Unchanged: 0/0
  2435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2437 ;;      Locals:        64       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2438 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2439 ;;      Totals:        68       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2440 ;;Total ram usage:       68 bytes
  2441 ;; Hardware stack levels used:    1
  2442 ;; Hardware stack levels required when called:    4
  2443 ;; This function calls:
  2444 ;;		_I2C_Send
  2445 ;;		___wmul
  2446 ;;		_lcdInst
  2447 ;;		_lcd_set_cursor
  2448 ;;		_pollKeypad
  2449 ;;		_printErrorLCD
  2450 ;;		_printStringLCD
  2451 ;;		_putch
  2452 ;;		_strcpy
  2453 ;; This function is called by:
  2454 ;;		_mainMenu
  2455 ;; This function uses a non-reentrant model
  2456 ;;
  2457                           
  2458                           	psect	text6
  2459  00F7EE                     __ptext6:
  2460                           	opt stack 0
  2461  00F7EE                     _inputEntry:
  2462                           	opt stack 25
  2463                           
  2464                           ;main.c: 84: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2465                           
  2466                           ;incstack = 0
  2467  00F7EE  0E01               	movlw	1
  2468  00F7F0  EC5B  F076         	call	_lcdInst
  2469  00F7F4  0EC3               	movlw	195
  2470  00F7F6  6E1A               	movwf	??_inputEntry& (0+255),c
  2471  00F7F8  0ECD               	movlw	205
  2472  00F7FA                     u2327:
  2473  00F7FA  2EE8               	decfsz	wreg,f,c
  2474  00F7FC  D7FE               	bra	u2327
  2475  00F7FE  2E1A               	decfsz	??_inputEntry& (0+255),f,c
  2476  00F800  D7FC               	bra	u2327
  2477  00F802  F000               	nop	
  2478                           
  2479                           ;main.c: 85: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2480  00F804  0E80               	movlw	128
  2481  00F806  EC5B  F076         	call	_lcdInst
  2482  00F80A  0E41               	movlw	65
  2483  00F80C  6E1A               	movwf	??_inputEntry& (0+255),c
  2484  00F80E  0EEE               	movlw	238
  2485  00F810                     u2337:
  2486  00F810  2EE8               	decfsz	wreg,f,c
  2487  00F812  D7FE               	bra	u2337
  2488  00F814  2E1A               	decfsz	??_inputEntry& (0+255),f,c
  2489  00F816  D7FC               	bra	u2337
  2490  00F818  D000               	nop2	
  2491                           
  2492                           ;main.c: 87: I2C_Send(nanoAddr, "Started input entry, hi\0");
  2493  00F81A  0EB8               	movlw	low STR_1
  2494  00F81C  6E04               	movwf	I2C_Send@data,c
  2495  00F81E  0EFF               	movlw	high STR_1
  2496  00F820  6E05               	movwf	I2C_Send@data+1,c
  2497  00F822  0E15               	movlw	low _nanoAddr
  2498  00F824  6EF6               	movwf	tblptrl,c
  2499  00F826                     	if	1	;There is more than 1 active tblptr byte
  2500  00F826  0EFE               	movlw	high _nanoAddr
  2501  00F828  6EF7               	movwf	tblptrh,c
  2502  00F82A                     	endif
  2503  00F82A                     	if	1	;There are 3 active tblptr bytes
  2504  00F82A  0E00               	movlw	low (_nanoAddr shr (0+16))
  2505  00F82C  6EF8               	movwf	tblptru,c
  2506  00F82E                     	endif
  2507  00F82E  0008               	tblrd		*
  2508  00F830  50F5               	movf	tablat,w,c
  2509  00F832  ECE6  F077         	call	_I2C_Send
  2510                           
  2511                           ;main.c: 89: int compartmentNum = 0;
  2512  00F836  0E00               	movlw	0
  2513  00F838  6E5A               	movwf	inputEntry@compartmentNum+1,c
  2514  00F83A  0E00               	movlw	0
  2515  00F83C  6E59               	movwf	inputEntry@compartmentNum,c
  2516                           
  2517                           ;main.c: 90: char compartmentLabel[2] = "C0";
  2518  00F83E  C069  F03E         	movff	inputEntry@F3142,inputEntry@compartmentLabel
  2519  00F842  C06A  F03F         	movff	inputEntry@F3142+1,inputEntry@compartmentLabel+1
  2520                           
  2521                           ;main.c: 91: int inputEntryStep = 0;
  2522  00F846  0E00               	movlw	0
  2523  00F848  6E56               	movwf	inputEntry@inputEntryStep+1,c
  2524  00F84A  0E00               	movlw	0
  2525  00F84C  6E55               	movwf	inputEntry@inputEntryStep,c
  2526                           
  2527                           ;main.c: 92: int done = 0;
  2528  00F84E  0E00               	movlw	0
  2529  00F850  6E41               	movwf	inputEntry@done+1,c
  2530  00F852  0E00               	movlw	0
  2531  00F854  D297               	goto	L1
  2532  00F856                     
  2533                           ;main.c: 100: if (inputEntryStep == 0) {
  2534  00F856  5055               	movf	inputEntry@inputEntryStep,w,c
  2535  00F858  1056               	iorwf	inputEntry@inputEntryStep+1,w,c
  2536  00F85A  A4D8               	btfss	status,2,c
  2537  00F85C  D048               	goto	l91
  2538                           
  2539                           ;main.c: 101: printStringLCD(inputEntryQuestions[inputEntryStep]);
  2540  00F85E  C055  F001         	movff	inputEntry@inputEntryStep,___wmul@multiplier
  2541  00F862  C056  F002         	movff	inputEntry@inputEntryStep+1,___wmul@multiplier+1
  2542  00F866  0E00               	movlw	0
  2543  00F868  6E04               	movwf	___wmul@multiplicand+1,c
  2544  00F86A  0E21               	movlw	33
  2545  00F86C  6E03               	movwf	___wmul@multiplicand,c
  2546  00F86E  EC8F  F076         	call	___wmul	;wreg free
  2547  00F872  0EFC               	movlw	low _inputEntryQuestions
  2548  00F874  2401               	addwf	?___wmul,w,c
  2549  00F876  6E07               	movwf	printStringLCD@string,c
  2550  00F878  0EFE               	movlw	high _inputEntryQuestions
  2551  00F87A  2002               	addwfc	?___wmul+1,w,c
  2552  00F87C  6E08               	movwf	printStringLCD@string+1,c
  2553  00F87E  ECA3  F07A         	call	_printStringLCD	;wreg free
  2554                           
  2555                           ;main.c: 103: pressed = pollKeypad();
  2556  00F882  ECB5  F076         	call	_pollKeypad	;wreg free
  2557  00F886  6E5D               	movwf	inputEntry@pressed,c
  2558                           
  2559                           ;main.c: 104: numPressed = pressed - 48;
  2560  00F888  0ED0               	movlw	208
  2561  00F88A  245D               	addwf	inputEntry@pressed,w,c
  2562  00F88C  6E57               	movwf	inputEntry@numPressed,c
  2563  00F88E  6A58               	clrf	inputEntry@numPressed+1,c
  2564  00F890  0EFF               	movlw	255
  2565  00F892  2258               	addwfc	inputEntry@numPressed+1,f,c
  2566                           
  2567                           ;main.c: 106: putch(pressed);
  2568  00F894  505D               	movf	inputEntry@pressed,w,c
  2569  00F896  EC65  F076         	call	_putch
  2570                           
  2571                           ;main.c: 107: _delay((unsigned long)((500)*(40000000/4000.0)));
  2572  00F89A  0E1A               	movlw	26
  2573  00F89C  6E1B               	movwf	(??_inputEntry+1)& (0+255),c
  2574  00F89E  0E5E               	movlw	94
  2575  00F8A0  6E1A               	movwf	??_inputEntry& (0+255),c
  2576  00F8A2  0E6E               	movlw	110
  2577  00F8A4                     u2347:
  2578  00F8A4  2EE8               	decfsz	wreg,f,c
  2579  00F8A6  D7FE               	bra	u2347
  2580  00F8A8  2E1A               	decfsz	??_inputEntry& (0+255),f,c
  2581  00F8AA  D7FC               	bra	u2347
  2582  00F8AC  2E1B               	decfsz	(??_inputEntry+1)& (0+255),f,c
  2583  00F8AE  D7FA               	bra	u2347
  2584  00F8B0  D000               	nop2	
  2585                           
  2586                           ;main.c: 109: if (numPressed >= 4 && numPressed <= 8) {
  2587  00F8B2  BE58               	btfsc	inputEntry@numPressed+1,7,c
  2588  00F8B4  D015               	goto	l92
  2589  00F8B6  5058               	movf	inputEntry@numPressed+1,w,c
  2590  00F8B8  E104               	bnz	u1620
  2591  00F8BA  0E04               	movlw	4
  2592  00F8BC  5C57               	subwf	inputEntry@numPressed,w,c
  2593  00F8BE  A0D8               	btfss	status,0,c
  2594  00F8C0  D00F               	goto	l92
  2595  00F8C2                     u1620:
  2596  00F8C2  BE58               	btfsc	inputEntry@numPressed+1,7,c
  2597  00F8C4  D006               	goto	u1630
  2598  00F8C6  5058               	movf	inputEntry@numPressed+1,w,c
  2599  00F8C8  E10B               	bnz	l2049
  2600  00F8CA  0E09               	movlw	9
  2601  00F8CC  5C57               	subwf	inputEntry@numPressed,w,c
  2602  00F8CE  B0D8               	btfsc	status,0,c
  2603  00F8D0  D007               	goto	l92
  2604  00F8D2                     u1630:
  2605                           
  2606                           ;main.c: 110: params.steps = numPressed;
  2607  00F8D2  C057  F080         	movff	inputEntry@numPressed,_params
  2608  00F8D6  C058  F081         	movff	inputEntry@numPressed+1,_params+1
  2609                           
  2610                           ;main.c: 111: inputEntryStep++;
  2611  00F8DA  4A55               	infsnz	inputEntry@inputEntryStep,f,c
  2612  00F8DC  2A56               	incf	inputEntry@inputEntryStep+1,f,c
  2613                           
  2614                           ;main.c: 112: } else printErrorLCD(errMsgs.badEntry);
  2615  00F8DE  D253               	goto	l95
  2616  00F8E0                     l92:
  2617  00F8E0                     l2049:
  2618  00F8E0  0E1C               	movlw	low _errMsgs
  2619  00F8E2  6E16               	movwf	printErrorLCD@string,c
  2620  00F8E4  0EFE               	movlw	high _errMsgs
  2621  00F8E6  6E17               	movwf	printErrorLCD@string+1,c
  2622  00F8E8  ECA2  F076         	call	_printErrorLCD	;wreg free
  2623                           
  2624                           ;main.c: 113: } else if (inputEntryStep == 1) {
  2625  00F8EC  D24C               	goto	l95
  2626  00F8EE                     l91:
  2627  00F8EE  0455               	decf	inputEntry@inputEntryStep,w,c
  2628  00F8F0  1056               	iorwf	inputEntry@inputEntryStep+1,w,c
  2629  00F8F2  A4D8               	btfss	status,2,c
  2630  00F8F4  D248               	goto	l95
  2631                           
  2632                           ;main.c: 115: char compartmentsToFill = assemblyStepEncoding[params.steps - 4];
  2633  00F8F6  0EFC               	movlw	252
  2634  00F8F8  6E1A               	movwf	??_inputEntry& (0+255),c
  2635  00F8FA  0EFF               	movlw	255
  2636  00F8FC  6E1B               	movwf	(??_inputEntry+1)& (0+255),c
  2637  00F8FE  C080  F01C         	movff	_params,??_inputEntry+2
  2638  00F902  C081  F01D         	movff	_params+1,??_inputEntry+3
  2639  00F906  501A               	movf	??_inputEntry,w,c
  2640  00F908  261C               	addwf	??_inputEntry+2,f,c
  2641  00F90A  501B               	movf	??_inputEntry+1,w,c
  2642  00F90C  221D               	addwfc	??_inputEntry+3,f,c
  2643  00F90E  0E10               	movlw	low _assemblyStepEncoding
  2644  00F910  241C               	addwf	??_inputEntry+2,w,c
  2645  00F912  6EF6               	movwf	tblptrl,c
  2646  00F914  0EFE               	movlw	high _assemblyStepEncoding
  2647  00F916  201D               	addwfc	??_inputEntry+3,w,c
  2648  00F918  6EF7               	movwf	tblptrh,c
  2649  00F91A                     	if	1	;There are 3 active tblptr bytes
  2650  00F91A  6AF8               	clrf	tblptru,c
  2651  00F91C  0E00               	movlw	low (__mediumconst shr (0+16))
  2652  00F91E  22F8               	addwfc	tblptru,f,c
  2653  00F920                     	endif
  2654  00F920  0008               	tblrd		*
  2655  00F922  CFF5 F048          	movff	tablat,inputEntry@compartmentsToFill
  2656                           
  2657                           ;main.c: 116: for (compartmentNum = 0; compartmentNum < 8; compartmentNum++) {
  2658  00F926  0E00               	movlw	0
  2659  00F928  6E5A               	movwf	inputEntry@compartmentNum+1,c
  2660  00F92A  0E00               	movlw	0
  2661  00F92C  6E59               	movwf	inputEntry@compartmentNum,c
  2662  00F92E  BE5A               	btfsc	inputEntry@compartmentNum+1,7,c
  2663  00F930  D008               	goto	l96
  2664  00F932  505A               	movf	inputEntry@compartmentNum+1,w,c
  2665  00F934  E105               	bnz	u1650
  2666  00F936  0E08               	movlw	8
  2667  00F938  5C59               	subwf	inputEntry@compartmentNum,w,c
  2668  00F93A  B0D8               	btfsc	status,0,c
  2669  00F93C  D220               	goto	u1970
  2670  00F93E  D001               	goto	l96
  2671  00F940                     u1650:
  2672  00F940  D21E               	goto	u1970
  2673  00F942                     l96:
  2674                           
  2675                           ;main.c: 118: if ((compartmentsToFill >> compartmentNum) & 0b1) {
  2676                           
  2677                           ;main.c: 117: STARTCOMPARTMENT:
  2678  00F942  C059  F01A         	movff	inputEntry@compartmentNum,??_inputEntry
  2679  00F946  C048  F01B         	movff	inputEntry@compartmentsToFill,??_inputEntry+1
  2680  00F94A  2A1A               	incf	??_inputEntry,f,c
  2681  00F94C  D002               	goto	u1664
  2682  00F94E                     u1665:
  2683  00F94E  90D8               	bcf	status,0,c
  2684  00F950  321B               	rrcf	??_inputEntry+1,f,c
  2685  00F952                     u1664:
  2686  00F952  2E1A               	decfsz	??_inputEntry,f,c
  2687  00F954  D7FC               	goto	u1665
  2688  00F956  A01B               	btfss	??_inputEntry+1,0,c
  2689  00F958  D1F3               	goto	l99
  2690                           
  2691                           ;main.c: 120: setIsGood = 0;
  2692  00F95A  0E00               	movlw	0
  2693  00F95C  6E45               	movwf	inputEntry@setIsGood+1,c
  2694  00F95E  0E00               	movlw	0
  2695  00F960  D14C               	goto	L2
  2696  00F962                     
  2697                           ;main.c: 122: numB = 0;
  2698  00F962  0E00               	movlw	0
  2699  00F964  6E4C               	movwf	inputEntry@numB+1,c
  2700  00F966  0E00               	movlw	0
  2701  00F968  6E4B               	movwf	inputEntry@numB,c
  2702                           
  2703                           ;main.c: 123: numN = 0;
  2704  00F96A  0E00               	movlw	0
  2705  00F96C  6E4E               	movwf	inputEntry@numN+1,c
  2706  00F96E  0E00               	movlw	0
  2707  00F970  6E4D               	movwf	inputEntry@numN,c
  2708                           
  2709                           ;main.c: 124: numS = 0;
  2710  00F972  0E00               	movlw	0
  2711  00F974  6E50               	movwf	inputEntry@numS+1,c
  2712  00F976  0E00               	movlw	0
  2713  00F978  6E4F               	movwf	inputEntry@numS,c
  2714                           
  2715                           ;main.c: 125: numW = 0;
  2716  00F97A  0E00               	movlw	0
  2717  00F97C  6E52               	movwf	inputEntry@numW+1,c
  2718  00F97E  0E00               	movlw	0
  2719  00F980  6E51               	movwf	inputEntry@numW,c
  2720                           
  2721                           ;main.c: 126: char fastenerString[32];
  2722                           ;main.c: 127: strcpy(fastenerString, inputEntryQuestions[inputEntryStep]);
  2723  00F982  0E1E               	movlw	low inputEntry@fastenerString
  2724  00F984  6E07               	movwf	strcpy@to,c
  2725  00F986  0E00               	movlw	high inputEntry@fastenerString
  2726  00F988  6E08               	movwf	strcpy@to+1,c
  2727  00F98A  C055  F001         	movff	inputEntry@inputEntryStep,___wmul@multiplier
  2728  00F98E  C056  F002         	movff	inputEntry@inputEntryStep+1,___wmul@multiplier+1
  2729  00F992  0E00               	movlw	0
  2730  00F994  6E04               	movwf	___wmul@multiplicand+1,c
  2731  00F996  0E21               	movlw	33
  2732  00F998  6E03               	movwf	___wmul@multiplicand,c
  2733  00F99A  EC8F  F076         	call	___wmul	;wreg free
  2734  00F99E  0EFC               	movlw	low _inputEntryQuestions
  2735  00F9A0  2401               	addwf	?___wmul,w,c
  2736  00F9A2  6E09               	movwf	strcpy@from,c
  2737  00F9A4  0EFE               	movlw	high _inputEntryQuestions
  2738  00F9A6  2002               	addwfc	?___wmul+1,w,c
  2739  00F9A8  6E0A               	movwf	strcpy@from+1,c
  2740  00F9AA  ECCC  F076         	call	_strcpy	;wreg free
  2741                           
  2742                           ;main.c: 128: fastenerString[14] = compartmentNum + 1 + 48;
  2743  00F9AE  5059               	movf	inputEntry@compartmentNum,w,c
  2744  00F9B0  0F31               	addlw	49
  2745  00F9B2  6E2C               	movwf	inputEntry@fastenerString+14,c
  2746                           
  2747                           ;main.c: 130: printStringLCD(fastenerString);
  2748  00F9B4  0E1E               	movlw	low inputEntry@fastenerString
  2749  00F9B6  6E07               	movwf	printStringLCD@string,c
  2750  00F9B8  0E00               	movlw	high inputEntry@fastenerString
  2751  00F9BA  6E08               	movwf	printStringLCD@string+1,c
  2752  00F9BC  ECA3  F07A         	call	_printStringLCD	;wreg free
  2753                           
  2754                           ;main.c: 131: lcd_set_cursor(9, 1);
  2755  00F9C0  0E01               	movlw	1
  2756  00F9C2  6E07               	movwf	lcd_set_cursor@y,c
  2757  00F9C4  0E09               	movlw	9
  2758  00F9C6  EC02  F077         	call	_lcd_set_cursor
  2759                           
  2760                           ;main.c: 132: doneCompartment = 0;
  2761  00F9CA  0E00               	movlw	0
  2762  00F9CC  6E4A               	movwf	inputEntry@doneCompartment+1,c
  2763  00F9CE  0E00               	movlw	0
  2764  00F9D0  D04B               	goto	L3
  2765  00F9D2                     
  2766                           ;main.c: 135: pressed = pollKeypad();
  2767  00F9D2  ECB5  F076         	call	_pollKeypad	;wreg free
  2768  00F9D6  6E5D               	movwf	inputEntry@pressed,c
  2769                           
  2770                           ;main.c: 136: if (pressed == 66 || pressed == 78 || pressed == 83 || pressed == 87) {
  2771  00F9D8  0E42               	movlw	66
  2772  00F9DA  185D               	xorwf	inputEntry@pressed,w,c
  2773  00F9DC  B4D8               	btfsc	status,2,c
  2774  00F9DE  D00C               	goto	u1710
  2775  00F9E0  0E4E               	movlw	78
  2776  00F9E2  185D               	xorwf	inputEntry@pressed,w,c
  2777  00F9E4  B4D8               	btfsc	status,2,c
  2778  00F9E6  D008               	goto	u1710
  2779  00F9E8  0E53               	movlw	83
  2780  00F9EA  185D               	xorwf	inputEntry@pressed,w,c
  2781  00F9EC  B4D8               	btfsc	status,2,c
  2782  00F9EE  D004               	goto	u1710
  2783  00F9F0  0E57               	movlw	87
  2784  00F9F2  185D               	xorwf	inputEntry@pressed,w,c
  2785  00F9F4  A4D8               	btfss	status,2,c
  2786  00F9F6  D021               	goto	l104
  2787  00F9F8                     u1710:
  2788                           
  2789                           ;main.c: 137: putch(pressed);
  2790  00F9F8  505D               	movf	inputEntry@pressed,w,c
  2791  00F9FA  EC65  F076         	call	_putch
  2792                           
  2793                           ;main.c: 138: if (pressed == 66) numB++;
  2794  00F9FE  0E42               	movlw	66
  2795  00FA00  185D               	xorwf	inputEntry@pressed,w,c
  2796  00FA02  A4D8               	btfss	status,2,c
  2797  00FA04  D003               	goto	l107
  2798  00FA06  4A4B               	infsnz	inputEntry@numB,f,c
  2799  00FA08  2A4C               	incf	inputEntry@numB+1,f,c
  2800  00FA0A  D014               	goto	l113
  2801  00FA0C                     l107:
  2802                           
  2803                           ;main.c: 139: else if (pressed == 78) numN++;
  2804  00FA0C  0E4E               	movlw	78
  2805  00FA0E  185D               	xorwf	inputEntry@pressed,w,c
  2806  00FA10  A4D8               	btfss	status,2,c
  2807  00FA12  D003               	goto	l109
  2808  00FA14  4A4D               	infsnz	inputEntry@numN,f,c
  2809  00FA16  2A4E               	incf	inputEntry@numN+1,f,c
  2810  00FA18  D00D               	goto	l113
  2811  00FA1A                     l109:
  2812                           
  2813                           ;main.c: 140: else if (pressed == 83) numS ++;
  2814  00FA1A  0E53               	movlw	83
  2815  00FA1C  185D               	xorwf	inputEntry@pressed,w,c
  2816  00FA1E  A4D8               	btfss	status,2,c
  2817  00FA20  D003               	goto	l111
  2818  00FA22  4A4F               	infsnz	inputEntry@numS,f,c
  2819  00FA24  2A50               	incf	inputEntry@numS+1,f,c
  2820  00FA26  D006               	goto	l113
  2821  00FA28                     l111:
  2822                           
  2823                           ;main.c: 141: else if (pressed == 87) numW++;
  2824  00FA28  0E57               	movlw	87
  2825  00FA2A  185D               	xorwf	inputEntry@pressed,w,c
  2826  00FA2C  A4D8               	btfss	status,2,c
  2827  00FA2E  D002               	goto	l113
  2828  00FA30  4A51               	infsnz	inputEntry@numW,f,c
  2829  00FA32  2A52               	incf	inputEntry@numW+1,f,c
  2830  00FA34                     l113:
  2831                           
  2832                           ;main.c: 142: doneCompartment++;
  2833  00FA34  4A49               	infsnz	inputEntry@doneCompartment,f,c
  2834  00FA36  2A4A               	incf	inputEntry@doneCompartment+1,f,c
  2835                           
  2836                           ;main.c: 143: } else if (pressed == 35) {
  2837  00FA38  D021               	goto	l120
  2838  00FA3A                     l104:
  2839  00FA3A  0E23               	movlw	35
  2840  00FA3C  185D               	xorwf	inputEntry@pressed,w,c
  2841  00FA3E  A4D8               	btfss	status,2,c
  2842  00FA40  D015               	goto	l115
  2843                           
  2844                           ;main.c: 144: if (numB != 0 || numN != 0 || numS != 0 || numW != 0) doneCompartment = 4;
  2845  00FA42  504B               	movf	inputEntry@numB,w,c
  2846  00FA44  104C               	iorwf	inputEntry@numB+1,w,c
  2847  00FA46  A4D8               	btfss	status,2,c
  2848  00FA48  D00C               	goto	u1800
  2849  00FA4A  504D               	movf	inputEntry@numN,w,c
  2850  00FA4C  104E               	iorwf	inputEntry@numN+1,w,c
  2851  00FA4E  A4D8               	btfss	status,2,c
  2852  00FA50  D008               	goto	u1800
  2853  00FA52  504F               	movf	inputEntry@numS,w,c
  2854  00FA54  1050               	iorwf	inputEntry@numS+1,w,c
  2855  00FA56  A4D8               	btfss	status,2,c
  2856  00FA58  D004               	goto	u1800
  2857  00FA5A  5051               	movf	inputEntry@numW,w,c
  2858  00FA5C  1052               	iorwf	inputEntry@numW+1,w,c
  2859  00FA5E  B4D8               	btfsc	status,2,c
  2860  00FA60  D00D               	goto	l120
  2861  00FA62                     u1800:
  2862  00FA62  0E00               	movlw	0
  2863  00FA64  6E4A               	movwf	inputEntry@doneCompartment+1,c
  2864  00FA66  0E04               	movlw	4
  2865  00FA68                     L3:
  2866  00FA68  6E49               	movwf	inputEntry@doneCompartment,c
  2867                           
  2868                           ;main.c: 145: } else if (pressed == 42) {
  2869  00FA6A  D008               	goto	l120
  2870  00FA6C                     l115:
  2871  00FA6C  0E2A               	movlw	42
  2872  00FA6E  185D               	xorwf	inputEntry@pressed,w,c
  2873  00FA70  A4D8               	btfss	status,2,c
  2874  00FA72  D004               	goto	l120
  2875                           
  2876                           ;main.c: 146: compartmentNum--;
  2877  00FA74  0659               	decf	inputEntry@compartmentNum,f,c
  2878  00FA76  A0D8               	btfss	status,0,c
  2879  00FA78  065A               	decf	inputEntry@compartmentNum+1,f,c
  2880                           
  2881                           ;main.c: 147: goto STARTMULTIPLES;
  2882  00FA7A  D0C4               	goto	u1900
  2883  00FA7C                     l120:
  2884  00FA7C  BE4A               	btfsc	inputEntry@doneCompartment+1,7,c
  2885  00FA7E  D7A9               	goto	l103
  2886  00FA80  504A               	movf	inputEntry@doneCompartment+1,w,c
  2887  00FA82  E104               	bnz	l2123
  2888  00FA84  0E04               	movlw	4
  2889  00FA86  5C49               	subwf	inputEntry@doneCompartment,w,c
  2890  00FA88  A0D8               	btfss	status,0,c
  2891  00FA8A  D7A3               	goto	l103
  2892  00FA8C                     l2123:
  2893                           
  2894                           ;main.c: 148: }
  2895                           ;main.c: 149: }
  2896                           ;main.c: 152: found = 0;
  2897  00FA8C  0E00               	movlw	0
  2898  00FA8E  6E43               	movwf	inputEntry@found+1,c
  2899  00FA90  0E00               	movlw	0
  2900  00FA92  6E42               	movwf	inputEntry@found,c
  2901                           
  2902                           ;main.c: 153: for (i = 0; i < 21; i++) {
  2903  00FA94  0E00               	movlw	0
  2904  00FA96  6E5C               	movwf	inputEntry@i+1,c
  2905  00FA98  0E00               	movlw	0
  2906  00FA9A  6E5B               	movwf	inputEntry@i,c
  2907  00FA9C  BE5C               	btfsc	inputEntry@i+1,7,c
  2908  00FA9E  D008               	goto	l123
  2909  00FAA0  505C               	movf	inputEntry@i+1,w,c
  2910  00FAA2  E105               	bnz	u1830
  2911  00FAA4  0E15               	movlw	21
  2912  00FAA6  5C5B               	subwf	inputEntry@i,w,c
  2913  00FAA8  B0D8               	btfsc	status,0,c
  2914  00FAAA  D099               	goto	u1880
  2915  00FAAC  D001               	goto	l123
  2916  00FAAE                     u1830:
  2917  00FAAE  D097               	goto	u1880
  2918  00FAB0                     l123:
  2919                           
  2920                           ;main.c: 154: if (fastenerMatrix[i][0] == numB &&
  2921                           ;main.c: 155: fastenerMatrix[i][1] == numN &&
  2922                           ;main.c: 156: fastenerMatrix[i][2] == numS &&
  2923                           ;main.c: 157: fastenerMatrix[i][3] == numW)
  2924  00FAB0  C05B  F01A         	movff	inputEntry@i,??_inputEntry
  2925  00FAB4  C05C  F01B         	movff	inputEntry@i+1,??_inputEntry+1
  2926  00FAB8  90D8               	bcf	status,0,c
  2927  00FABA  361A               	rlcf	??_inputEntry,f,c
  2928  00FABC  361B               	rlcf	??_inputEntry+1,f,c
  2929  00FABE  90D8               	bcf	status,0,c
  2930  00FAC0  361A               	rlcf	??_inputEntry,f,c
  2931  00FAC2  361B               	rlcf	??_inputEntry+1,f,c
  2932  00FAC4  0E91               	movlw	low _fastenerMatrix
  2933  00FAC6  241A               	addwf	??_inputEntry,w,c
  2934  00FAC8  6EF6               	movwf	tblptrl,c
  2935  00FACA  0EFD               	movlw	high _fastenerMatrix
  2936  00FACC  201B               	addwfc	??_inputEntry+1,w,c
  2937  00FACE  6EF7               	movwf	tblptrh,c
  2938  00FAD0                     	if	1	;There are 3 active tblptr bytes
  2939  00FAD0  6AF8               	clrf	tblptru,c
  2940  00FAD2  0E00               	movlw	low (__mediumconst shr (0+16))
  2941  00FAD4  22F8               	addwfc	tblptru,f,c
  2942  00FAD6                     	endif
  2943  00FAD6  0008               	tblrd		*
  2944  00FAD8  50F5               	movf	tablat,w,c
  2945  00FADA  6E1C               	movwf	(??_inputEntry+2)& (0+255),c
  2946  00FADC  6A1D               	clrf	(??_inputEntry+3)& (0+255),c
  2947  00FADE  504B               	movf	inputEntry@numB,w,c
  2948  00FAE0  181C               	xorwf	??_inputEntry+2,w,c
  2949  00FAE2  E176               	bnz	l2141
  2950  00FAE4  504C               	movf	inputEntry@numB+1,w,c
  2951  00FAE6  181D               	xorwf	??_inputEntry+3,w,c
  2952  00FAE8  A4D8               	btfss	status,2,c
  2953  00FAEA  D072               	goto	l125
  2954  00FAEC  C05B  F01A         	movff	inputEntry@i,??_inputEntry
  2955  00FAF0  C05C  F01B         	movff	inputEntry@i+1,??_inputEntry+1
  2956  00FAF4  90D8               	bcf	status,0,c
  2957  00FAF6  361A               	rlcf	??_inputEntry,f,c
  2958  00FAF8  361B               	rlcf	??_inputEntry+1,f,c
  2959  00FAFA  90D8               	bcf	status,0,c
  2960  00FAFC  361A               	rlcf	??_inputEntry,f,c
  2961  00FAFE  361B               	rlcf	??_inputEntry+1,f,c
  2962  00FB00  0E01               	movlw	1
  2963  00FB02  261A               	addwf	??_inputEntry,f,c
  2964  00FB04  0E00               	movlw	0
  2965  00FB06  221B               	addwfc	??_inputEntry+1,f,c
  2966  00FB08  0E91               	movlw	low _fastenerMatrix
  2967  00FB0A  241A               	addwf	??_inputEntry,w,c
  2968  00FB0C  6EF6               	movwf	tblptrl,c
  2969  00FB0E  0EFD               	movlw	high _fastenerMatrix
  2970  00FB10  201B               	addwfc	??_inputEntry+1,w,c
  2971  00FB12  6EF7               	movwf	tblptrh,c
  2972  00FB14                     	if	1	;There are 3 active tblptr bytes
  2973  00FB14  6AF8               	clrf	tblptru,c
  2974  00FB16  0E00               	movlw	low (__mediumconst shr (0+16))
  2975  00FB18  22F8               	addwfc	tblptru,f,c
  2976  00FB1A                     	endif
  2977  00FB1A  0008               	tblrd		*
  2978  00FB1C  50F5               	movf	tablat,w,c
  2979  00FB1E  6E1C               	movwf	(??_inputEntry+2)& (0+255),c
  2980  00FB20  6A1D               	clrf	(??_inputEntry+3)& (0+255),c
  2981  00FB22  504D               	movf	inputEntry@numN,w,c
  2982  00FB24  181C               	xorwf	??_inputEntry+2,w,c
  2983  00FB26  E154               	bnz	l2141
  2984  00FB28  504E               	movf	inputEntry@numN+1,w,c
  2985  00FB2A  181D               	xorwf	??_inputEntry+3,w,c
  2986  00FB2C  A4D8               	btfss	status,2,c
  2987  00FB2E  D050               	goto	l125
  2988  00FB30  C05B  F01A         	movff	inputEntry@i,??_inputEntry
  2989  00FB34  C05C  F01B         	movff	inputEntry@i+1,??_inputEntry+1
  2990  00FB38  90D8               	bcf	status,0,c
  2991  00FB3A  361A               	rlcf	??_inputEntry,f,c
  2992  00FB3C  361B               	rlcf	??_inputEntry+1,f,c
  2993  00FB3E  90D8               	bcf	status,0,c
  2994  00FB40  361A               	rlcf	??_inputEntry,f,c
  2995  00FB42  361B               	rlcf	??_inputEntry+1,f,c
  2996  00FB44  0E02               	movlw	2
  2997  00FB46  261A               	addwf	??_inputEntry,f,c
  2998  00FB48  0E00               	movlw	0
  2999  00FB4A  221B               	addwfc	??_inputEntry+1,f,c
  3000  00FB4C  0E91               	movlw	low _fastenerMatrix
  3001  00FB4E  241A               	addwf	??_inputEntry,w,c
  3002  00FB50  6EF6               	movwf	tblptrl,c
  3003  00FB52  0EFD               	movlw	high _fastenerMatrix
  3004  00FB54  201B               	addwfc	??_inputEntry+1,w,c
  3005  00FB56  6EF7               	movwf	tblptrh,c
  3006  00FB58                     	if	1	;There are 3 active tblptr bytes
  3007  00FB58  6AF8               	clrf	tblptru,c
  3008  00FB5A  0E00               	movlw	low (__mediumconst shr (0+16))
  3009  00FB5C  22F8               	addwfc	tblptru,f,c
  3010  00FB5E                     	endif
  3011  00FB5E  0008               	tblrd		*
  3012  00FB60  50F5               	movf	tablat,w,c
  3013  00FB62  6E1C               	movwf	(??_inputEntry+2)& (0+255),c
  3014  00FB64  6A1D               	clrf	(??_inputEntry+3)& (0+255),c
  3015  00FB66  504F               	movf	inputEntry@numS,w,c
  3016  00FB68  181C               	xorwf	??_inputEntry+2,w,c
  3017  00FB6A  E132               	bnz	l2141
  3018  00FB6C  5050               	movf	inputEntry@numS+1,w,c
  3019  00FB6E  181D               	xorwf	??_inputEntry+3,w,c
  3020  00FB70  A4D8               	btfss	status,2,c
  3021  00FB72  D02E               	goto	l125
  3022  00FB74  C05B  F01A         	movff	inputEntry@i,??_inputEntry
  3023  00FB78  C05C  F01B         	movff	inputEntry@i+1,??_inputEntry+1
  3024  00FB7C  90D8               	bcf	status,0,c
  3025  00FB7E  361A               	rlcf	??_inputEntry,f,c
  3026  00FB80  361B               	rlcf	??_inputEntry+1,f,c
  3027  00FB82  90D8               	bcf	status,0,c
  3028  00FB84  361A               	rlcf	??_inputEntry,f,c
  3029  00FB86  361B               	rlcf	??_inputEntry+1,f,c
  3030  00FB88  0E03               	movlw	3
  3031  00FB8A  261A               	addwf	??_inputEntry,f,c
  3032  00FB8C  0E00               	movlw	0
  3033  00FB8E  221B               	addwfc	??_inputEntry+1,f,c
  3034  00FB90  0E91               	movlw	low _fastenerMatrix
  3035  00FB92  241A               	addwf	??_inputEntry,w,c
  3036  00FB94  6EF6               	movwf	tblptrl,c
  3037  00FB96  0EFD               	movlw	high _fastenerMatrix
  3038  00FB98  201B               	addwfc	??_inputEntry+1,w,c
  3039  00FB9A  6EF7               	movwf	tblptrh,c
  3040  00FB9C                     	if	1	;There are 3 active tblptr bytes
  3041  00FB9C  6AF8               	clrf	tblptru,c
  3042  00FB9E  0E00               	movlw	low (__mediumconst shr (0+16))
  3043  00FBA0  22F8               	addwfc	tblptru,f,c
  3044  00FBA2                     	endif
  3045  00FBA2  0008               	tblrd		*
  3046  00FBA4  50F5               	movf	tablat,w,c
  3047  00FBA6  6E1C               	movwf	(??_inputEntry+2)& (0+255),c
  3048  00FBA8  6A1D               	clrf	(??_inputEntry+3)& (0+255),c
  3049  00FBAA  5051               	movf	inputEntry@numW,w,c
  3050  00FBAC  181C               	xorwf	??_inputEntry+2,w,c
  3051  00FBAE  E110               	bnz	l2141
  3052  00FBB0  5052               	movf	inputEntry@numW+1,w,c
  3053  00FBB2  181D               	xorwf	??_inputEntry+3,w,c
  3054  00FBB4  A4D8               	btfss	status,2,c
  3055  00FBB6  D00C               	goto	l125
  3056                           
  3057                           ;main.c: 158: {
  3058                           ;main.c: 159: params.toFill[compartmentNum] = i;
  3059  00FBB8  0E82               	movlw	low (_params+2)
  3060  00FBBA  2459               	addwf	inputEntry@compartmentNum,w,c
  3061  00FBBC  6ED9               	movwf	fsr2l,c
  3062  00FBBE  0E00               	movlw	high (_params+2)
  3063  00FBC0  205A               	addwfc	inputEntry@compartmentNum+1,w,c
  3064  00FBC2  6EDA               	movwf	fsr2h,c
  3065  00FBC4  C05B  FFDF         	movff	inputEntry@i,indf2
  3066                           
  3067                           ;main.c: 160: found = 1;
  3068  00FBC8  0E00               	movlw	0
  3069  00FBCA  6E43               	movwf	inputEntry@found+1,c
  3070  00FBCC  0E01               	movlw	1
  3071  00FBCE  6E42               	movwf	inputEntry@found,c
  3072  00FBD0                     l125:
  3073  00FBD0                     l2141:
  3074  00FBD0  4A5B               	infsnz	inputEntry@i,f,c
  3075  00FBD2  2A5C               	incf	inputEntry@i+1,f,c
  3076  00FBD4  BE5C               	btfsc	inputEntry@i+1,7,c
  3077  00FBD6  D76C               	goto	l123
  3078  00FBD8  505C               	movf	inputEntry@i+1,w,c
  3079  00FBDA  E101               	bnz	l2145
  3080  00FBDC  D763               	goto	L4
  3081  00FBDE                     u1880:
  3082  00FBDE                     l2145:
  3083                           
  3084                           ;main.c: 161: }
  3085                           ;main.c: 162: }
  3086                           ;main.c: 163: if (!found) {
  3087  00FBDE  5042               	movf	inputEntry@found,w,c
  3088  00FBE0  1043               	iorwf	inputEntry@found+1,w,c
  3089  00FBE2  A4D8               	btfss	status,2,c
  3090  00FBE4  D007               	goto	l126
  3091                           
  3092                           ;main.c: 164: printErrorLCD(errMsgs.badEntry);
  3093  00FBE6  0E1C               	movlw	low _errMsgs
  3094  00FBE8  6E16               	movwf	printErrorLCD@string,c
  3095  00FBEA  0EFE               	movlw	high _errMsgs
  3096  00FBEC  6E17               	movwf	printErrorLCD@string+1,c
  3097  00FBEE  ECA2  F076         	call	_printErrorLCD	;wreg free
  3098                           
  3099                           ;main.c: 168: } else {
  3100                           
  3101                           ;main.c: 167: continue;
  3102  00FBF2  D004               	goto	l127
  3103  00FBF4                     l126:
  3104                           
  3105                           ;main.c: 169: setIsGood = 1;
  3106  00FBF4  0E00               	movlw	0
  3107  00FBF6  6E45               	movwf	inputEntry@setIsGood+1,c
  3108  00FBF8  0E01               	movlw	1
  3109  00FBFA                     L2:
  3110  00FBFA  6E44               	movwf	inputEntry@setIsGood,c
  3111  00FBFC                     l127:
  3112  00FBFC  5044               	movf	inputEntry@setIsGood,w,c
  3113  00FBFE  1045               	iorwf	inputEntry@setIsGood+1,w,c
  3114  00FC00  B4D8               	btfsc	status,2,c
  3115  00FC02  D6AF               	goto	l101
  3116  00FC04                     u1900:
  3117                           
  3118                           ;main.c: 175: doneMultiples = 0;
  3119                           
  3120                           ;main.c: 170: }
  3121                           ;main.c: 171: }
  3122                           ;main.c: 174: STARTMULTIPLES:
  3123  00FC04  0E00               	movlw	0
  3124  00FC06  6E47               	movwf	inputEntry@doneMultiples+1,c
  3125  00FC08  0E00               	movlw	0
  3126  00FC0A  D094               	goto	L5
  3127  00FC0C                     
  3128                           ;main.c: 177: printStringLCD(inputEntryQuestions[2]);
  3129  00FC0C  0E3E               	movlw	low (_inputEntryQuestions+66)
  3130  00FC0E  6E07               	movwf	printStringLCD@string,c
  3131  00FC10  0EFF               	movlw	high (_inputEntryQuestions+66)
  3132  00FC12  6E08               	movwf	printStringLCD@string+1,c
  3133  00FC14  ECA3  F07A         	call	_printStringLCD	;wreg free
  3134                           
  3135                           ;main.c: 178: lcd_set_cursor(14, 1);
  3136  00FC18  0E01               	movlw	1
  3137  00FC1A  6E07               	movwf	lcd_set_cursor@y,c
  3138  00FC1C  0E0E               	movlw	14
  3139  00FC1E  EC02  F077         	call	_lcd_set_cursor
  3140                           
  3141                           ;main.c: 180: pressed = pollKeypad();
  3142  00FC22  ECB5  F076         	call	_pollKeypad	;wreg free
  3143  00FC26  6E5D               	movwf	inputEntry@pressed,c
  3144                           
  3145                           ;main.c: 181: numPressed = pressed - 48;
  3146  00FC28  0ED0               	movlw	208
  3147  00FC2A  245D               	addwf	inputEntry@pressed,w,c
  3148  00FC2C  6E57               	movwf	inputEntry@numPressed,c
  3149  00FC2E  6A58               	clrf	inputEntry@numPressed+1,c
  3150  00FC30  0EFF               	movlw	255
  3151  00FC32  2258               	addwfc	inputEntry@numPressed+1,f,c
  3152                           
  3153                           ;main.c: 183: if (pressed == 42) goto STARTCOMPARTMENT;
  3154  00FC34  0E2A               	movlw	42
  3155  00FC36  185D               	xorwf	inputEntry@pressed,w,c
  3156  00FC38  B4D8               	btfsc	status,2,c
  3157  00FC3A  D683               	goto	l96
  3158                           
  3159                           ;main.c: 186: putch(pressed);
  3160  00FC3C  505D               	movf	inputEntry@pressed,w,c
  3161  00FC3E  EC65  F076         	call	_putch
  3162                           
  3163                           ;main.c: 187: _delay((unsigned long)((500)*(40000000/4000.0)));
  3164  00FC42  0E1A               	movlw	26
  3165  00FC44  6E1B               	movwf	(??_inputEntry+1)& (0+255),c
  3166  00FC46  0E5E               	movlw	94
  3167  00FC48  6E1A               	movwf	??_inputEntry& (0+255),c
  3168  00FC4A  0E6E               	movlw	110
  3169  00FC4C                     u2357:
  3170  00FC4C  2EE8               	decfsz	wreg,f,c
  3171  00FC4E  D7FE               	bra	u2357
  3172  00FC50  2E1A               	decfsz	??_inputEntry& (0+255),f,c
  3173  00FC52  D7FC               	bra	u2357
  3174  00FC54  2E1B               	decfsz	(??_inputEntry+1)& (0+255),f,c
  3175  00FC56  D7FA               	bra	u2357
  3176  00FC58  D000               	nop2	
  3177                           
  3178                           ;main.c: 189: int sum = 0;
  3179  00FC5A  0E00               	movlw	0
  3180  00FC5C  6E54               	movwf	inputEntry@sum+1,c
  3181  00FC5E  0E00               	movlw	0
  3182  00FC60  6E53               	movwf	inputEntry@sum,c
  3183                           
  3184                           ;main.c: 190: for (i = 0; i < 4; i++) {
  3185  00FC62  0E00               	movlw	0
  3186  00FC64  6E5C               	movwf	inputEntry@i+1,c
  3187  00FC66  0E00               	movlw	0
  3188  00FC68  6E5B               	movwf	inputEntry@i,c
  3189  00FC6A                     l2177:
  3190  00FC6A  BE5C               	btfsc	inputEntry@i+1,7,c
  3191  00FC6C  D006               	goto	l132
  3192  00FC6E  505C               	movf	inputEntry@i+1,w,c
  3193  00FC70  E127               	bnz	l2187
  3194  00FC72  0E04               	movlw	4
  3195  00FC74  5C5B               	subwf	inputEntry@i,w,c
  3196  00FC76  B0D8               	btfsc	status,0,c
  3197  00FC78  D023               	goto	u1930
  3198  00FC7A                     l132:
  3199                           
  3200                           ;main.c: 191: sum += fastenerMatrix[params.toFill[compartmentNum]][i];
  3201  00FC7A  0E82               	movlw	low (_params+2)
  3202  00FC7C  2459               	addwf	inputEntry@compartmentNum,w,c
  3203  00FC7E  6ED9               	movwf	fsr2l,c
  3204  00FC80  0E00               	movlw	high (_params+2)
  3205  00FC82  205A               	addwfc	inputEntry@compartmentNum+1,w,c
  3206  00FC84  6EDA               	movwf	fsr2h,c
  3207  00FC86  50DF               	movf	indf2,w,c
  3208  00FC88  6E1A               	movwf	??_inputEntry& (0+255),c
  3209  00FC8A  501A               	movf	??_inputEntry,w,c
  3210  00FC8C  0D04               	mullw	4
  3211  00FC8E  0E91               	movlw	low _fastenerMatrix
  3212  00FC90  6E1B               	movwf	(??_inputEntry+1)& (0+255),c
  3213  00FC92  0EFD               	movlw	high _fastenerMatrix
  3214  00FC94  6E1C               	movwf	(??_inputEntry+2)& (0+255),c
  3215  00FC96  50F3               	movf	prodl,w,c
  3216  00FC98  261B               	addwf	??_inputEntry+1,f,c
  3217  00FC9A  50F4               	movf	prodh,w,c
  3218  00FC9C  221C               	addwfc	??_inputEntry+2,f,c
  3219  00FC9E  505B               	movf	inputEntry@i,w,c
  3220  00FCA0  261B               	addwf	??_inputEntry+1,f,c
  3221  00FCA2  505C               	movf	inputEntry@i+1,w,c
  3222  00FCA4  221C               	addwfc	??_inputEntry+2,f,c
  3223  00FCA6  C01B  FFF6         	movff	??_inputEntry+1,tblptrl
  3224  00FCAA  C01C  FFF7         	movff	??_inputEntry+2,tblptrh
  3225  00FCAE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3226  00FCAE  6AF8               	clrf	tblptru,c
  3227  00FCB0                     	endif
  3228  00FCB0                     	if	0	;tblptru may be non-zero
  3229  00FCB0                     	endif
  3230  00FCB0  0008               	tblrd		*
  3231  00FCB2  50F5               	movf	tablat,w,c
  3232  00FCB4  2653               	addwf	inputEntry@sum,f,c
  3233  00FCB6  0E00               	movlw	0
  3234  00FCB8  2254               	addwfc	inputEntry@sum+1,f,c
  3235  00FCBA  4A5B               	infsnz	inputEntry@i,f,c
  3236  00FCBC  2A5C               	incf	inputEntry@i+1,f,c
  3237  00FCBE  D7D5               	goto	l2177
  3238  00FCC0                     u1930:
  3239  00FCC0                     l2187:
  3240                           
  3241                           ;main.c: 192: };
  3242                           ;main.c: 193: if (numPressed * sum > 4 || numPressed * sum <= 0) {
  3243  00FCC0  C057  F001         	movff	inputEntry@numPressed,___wmul@multiplier
  3244  00FCC4  C058  F002         	movff	inputEntry@numPressed+1,___wmul@multiplier+1
  3245  00FCC8  C053  F003         	movff	inputEntry@sum,___wmul@multiplicand
  3246  00FCCC  C054  F004         	movff	inputEntry@sum+1,___wmul@multiplicand+1
  3247  00FCD0  EC8F  F076         	call	___wmul	;wreg free
  3248  00FCD4  BE02               	btfsc	?___wmul+1,7,c
  3249  00FCD6  D006               	goto	u1940
  3250  00FCD8  5002               	movf	?___wmul+1,w,c
  3251  00FCDA  E115               	bnz	l2191
  3252  00FCDC  0E05               	movlw	5
  3253  00FCDE  5C01               	subwf	?___wmul,w,c
  3254  00FCE0  B0D8               	btfsc	status,0,c
  3255  00FCE2  D011               	goto	u1950
  3256  00FCE4                     u1940:
  3257  00FCE4  C057  F001         	movff	inputEntry@numPressed,___wmul@multiplier
  3258  00FCE8  C058  F002         	movff	inputEntry@numPressed+1,___wmul@multiplier+1
  3259  00FCEC  C053  F003         	movff	inputEntry@sum,___wmul@multiplicand
  3260  00FCF0  C054  F004         	movff	inputEntry@sum+1,___wmul@multiplicand+1
  3261  00FCF4  EC8F  F076         	call	___wmul	;wreg free
  3262  00FCF8  BE02               	btfsc	?___wmul+1,7,c
  3263  00FCFA  D005               	goto	u1950
  3264  00FCFC  5002               	movf	?___wmul+1,w,c
  3265  00FCFE  E10A               	bnz	l2193
  3266  00FD00  0401               	decf	?___wmul,w,c
  3267  00FD02  B0D8               	btfsc	status,0,c
  3268  00FD04  D007               	goto	l134
  3269  00FD06                     u1950:
  3270  00FD06                     l2191:
  3271                           
  3272                           ;main.c: 194: printErrorLCD(errMsgs.tooManyFasteners);
  3273  00FD06  0E3C               	movlw	low (_errMsgs+32)
  3274  00FD08  6E16               	movwf	printErrorLCD@string,c
  3275  00FD0A  0EFE               	movlw	high (_errMsgs+32)
  3276  00FD0C  6E17               	movwf	printErrorLCD@string+1,c
  3277  00FD0E  ECA2  F076         	call	_printErrorLCD	;wreg free
  3278                           
  3279                           ;main.c: 195: } else {
  3280  00FD12  D011               	goto	l137
  3281  00FD14                     l134:
  3282  00FD14                     l2193:
  3283                           
  3284                           ;main.c: 196: params.setMultiple[compartmentNum] = numPressed;
  3285  00FD14  90D8               	bcf	status,0,c
  3286  00FD16  3459               	rlcf	inputEntry@compartmentNum,w,c
  3287  00FD18  6ED9               	movwf	fsr2l,c
  3288  00FD1A  345A               	rlcf	inputEntry@compartmentNum+1,w,c
  3289  00FD1C  6EDA               	movwf	fsr2h,c
  3290  00FD1E  0E8A               	movlw	low (_params+10)
  3291  00FD20  26D9               	addwf	fsr2l,f,c
  3292  00FD22  0E00               	movlw	high (_params+10)
  3293  00FD24  22DA               	addwfc	fsr2h,f,c
  3294  00FD26  C057  FFDE         	movff	inputEntry@numPressed,postinc2
  3295  00FD2A  C058  FFDD         	movff	inputEntry@numPressed+1,postdec2
  3296                           
  3297                           ;main.c: 197: doneMultiples = 1;
  3298  00FD2E  0E00               	movlw	0
  3299  00FD30  6E47               	movwf	inputEntry@doneMultiples+1,c
  3300  00FD32  0E01               	movlw	1
  3301  00FD34                     L5:
  3302  00FD34  6E46               	movwf	inputEntry@doneMultiples,c
  3303  00FD36                     l137:
  3304  00FD36  5046               	movf	inputEntry@doneMultiples,w,c
  3305  00FD38  1047               	iorwf	inputEntry@doneMultiples+1,w,c
  3306  00FD3A  A4D8               	btfss	status,2,c
  3307  00FD3C  D016               	goto	l139
  3308  00FD3E  D766               	goto	l130
  3309  00FD40                     l99:
  3310                           
  3311                           ;main.c: 201: params.toFill[compartmentNum] = NONE;
  3312  00FD40  0E82               	movlw	low (_params+2)
  3313  00FD42  2459               	addwf	inputEntry@compartmentNum,w,c
  3314  00FD44  6ED9               	movwf	fsr2l,c
  3315  00FD46  0E00               	movlw	high (_params+2)
  3316  00FD48  205A               	addwfc	inputEntry@compartmentNum+1,w,c
  3317  00FD4A  6EDA               	movwf	fsr2h,c
  3318  00FD4C  0E00               	movlw	0
  3319  00FD4E  6EDF               	movwf	indf2,c
  3320                           
  3321                           ;main.c: 202: params.setMultiple[compartmentNum] = 0;
  3322  00FD50  90D8               	bcf	status,0,c
  3323  00FD52  3459               	rlcf	inputEntry@compartmentNum,w,c
  3324  00FD54  6ED9               	movwf	fsr2l,c
  3325  00FD56  345A               	rlcf	inputEntry@compartmentNum+1,w,c
  3326  00FD58  6EDA               	movwf	fsr2h,c
  3327  00FD5A  0E8A               	movlw	low (_params+10)
  3328  00FD5C  26D9               	addwf	fsr2l,f,c
  3329  00FD5E  0E00               	movlw	high (_params+10)
  3330  00FD60  22DA               	addwfc	fsr2h,f,c
  3331  00FD62  0E00               	movlw	0
  3332  00FD64  6EDE               	movwf	postinc2,c
  3333  00FD66  0E00               	movlw	0
  3334  00FD68  6EDD               	movwf	postdec2,c
  3335  00FD6A                     l139:
  3336  00FD6A  4A59               	infsnz	inputEntry@compartmentNum,f,c
  3337  00FD6C  2A5A               	incf	inputEntry@compartmentNum+1,f,c
  3338  00FD6E  BE5A               	btfsc	inputEntry@compartmentNum+1,7,c
  3339  00FD70  D5E8               	goto	l96
  3340  00FD72  505A               	movf	inputEntry@compartmentNum+1,w,c
  3341  00FD74  E104               	bnz	l2205
  3342  00FD76  0E08               	movlw	8
  3343  00FD78  5C59               	subwf	inputEntry@compartmentNum,w,c
  3344  00FD7A  A0D8               	btfss	status,0,c
  3345  00FD7C  D5E2               	goto	l96
  3346  00FD7E                     u1970:
  3347  00FD7E                     l2205:
  3348                           
  3349                           ;main.c: 203: }
  3350                           ;main.c: 204: }
  3351                           ;main.c: 205: done = 1;
  3352  00FD7E  0E00               	movlw	0
  3353  00FD80  6E41               	movwf	inputEntry@done+1,c
  3354  00FD82  0E01               	movlw	1
  3355  00FD84                     L1:
  3356  00FD84  6E40               	movwf	inputEntry@done,c
  3357  00FD86                     l95:
  3358  00FD86  5040               	movf	inputEntry@done,w,c
  3359  00FD88  1041               	iorwf	inputEntry@done+1,w,c
  3360  00FD8A  A4D8               	btfss	status,2,c
  3361  00FD8C  0012               	return	
  3362  00FD8E  D563               	goto	l90
  3363  00FD90                     __end_of_inputEntry:
  3364                           	opt stack 0
  3365                           tblptru	equ	0xFF8
  3366                           tblptrh	equ	0xFF7
  3367                           tblptrl	equ	0xFF6
  3368                           tablat	equ	0xFF5
  3369                           prodh	equ	0xFF4
  3370                           prodl	equ	0xFF3
  3371                           indf0	equ	0xFEF
  3372                           postinc0	equ	0xFEE
  3373                           fsr0h	equ	0xFEA
  3374                           fsr0l	equ	0xFE9
  3375                           wreg	equ	0xFE8
  3376                           postdec1	equ	0xFE5
  3377                           fsr1l	equ	0xFE1
  3378                           indf2	equ	0xFDF
  3379                           postinc2	equ	0xFDE
  3380                           postdec2	equ	0xFDD
  3381                           fsr2h	equ	0xFDA
  3382                           fsr2l	equ	0xFD9
  3383                           status	equ	0xFD8
  3384                           
  3385 ;; *************** function _strcpy *****************
  3386 ;; Defined at:
  3387 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
  3388 ;; Parameters:    Size  Location     Type
  3389 ;;  to              2    6[COMRAM] PTR unsigned char 
  3390 ;;		 -> inputEntry@fastenerString(32), 
  3391 ;;  from            2    8[COMRAM] PTR const unsigned char 
  3392 ;;		 -> inputEntryQuestions(132), 
  3393 ;; Auto vars:     Size  Location     Type
  3394 ;;  cp              2   10[COMRAM] PTR unsigned char 
  3395 ;;		 -> inputEntry@fastenerString(32), 
  3396 ;; Return value:  Size  Location     Type
  3397 ;;                  2    6[COMRAM] PTR unsigned char 
  3398 ;; Registers used:
  3399 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  3400 ;; Tracked objects:
  3401 ;;		On entry : 0/0
  3402 ;;		On exit  : 0/0
  3403 ;;		Unchanged: 0/0
  3404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3405 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3406 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3408 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3409 ;;Total ram usage:        6 bytes
  3410 ;; Hardware stack levels used:    1
  3411 ;; This function calls:
  3412 ;;		Nothing
  3413 ;; This function is called by:
  3414 ;;		_inputEntry
  3415 ;; This function uses a non-reentrant model
  3416 ;;
  3417                           
  3418                           	psect	text7
  3419  00ED98                     __ptext7:
  3420                           	opt stack 0
  3421  00ED98                     _strcpy:
  3422                           	opt stack 28
  3423                           
  3424                           ;incstack = 0
  3425  00ED98  C007  F00B         	movff	strcpy@to,strcpy@cp
  3426  00ED9C  C008  F00C         	movff	strcpy@to+1,strcpy@cp+1
  3427  00EDA0  D004               	goto	l969
  3428  00EDA2  4A0B               	infsnz	strcpy@cp,f,c
  3429  00EDA4  2A0C               	incf	strcpy@cp+1,f,c
  3430  00EDA6  4A09               	infsnz	strcpy@from,f,c
  3431  00EDA8  2A0A               	incf	strcpy@from+1,f,c
  3432  00EDAA                     l969:
  3433  00EDAA  C009  FFF6         	movff	strcpy@from,tblptrl
  3434  00EDAE  C00A  FFF7         	movff	strcpy@from+1,tblptrh
  3435  00EDB2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3436  00EDB2  6AF8               	clrf	tblptru,c
  3437  00EDB4                     	endif
  3438  00EDB4                     	if	0	;tblptru may be non-zero
  3439  00EDB4                     	endif
  3440  00EDB4  C00B  FFD9         	movff	strcpy@cp,fsr2l
  3441  00EDB8  C00C  FFDA         	movff	strcpy@cp+1,fsr2h
  3442  00EDBC  0008               	tblrd		*
  3443  00EDBE  CFF5 FFDF          	movff	tablat,indf2
  3444  00EDC2  50DF               	movf	indf2,w,c
  3445  00EDC4  B4D8               	btfsc	status,2,c
  3446  00EDC6  0012               	return	
  3447  00EDC8  D7EC               	goto	l970
  3448  00EDCA                     __end_of_strcpy:
  3449                           	opt stack 0
  3450                           tblptru	equ	0xFF8
  3451                           tblptrh	equ	0xFF7
  3452                           tblptrl	equ	0xFF6
  3453                           tablat	equ	0xFF5
  3454                           prodh	equ	0xFF4
  3455                           prodl	equ	0xFF3
  3456                           indf0	equ	0xFEF
  3457                           postinc0	equ	0xFEE
  3458                           fsr0h	equ	0xFEA
  3459                           fsr0l	equ	0xFE9
  3460                           wreg	equ	0xFE8
  3461                           postdec1	equ	0xFE5
  3462                           fsr1l	equ	0xFE1
  3463                           indf2	equ	0xFDF
  3464                           postinc2	equ	0xFDE
  3465                           postdec2	equ	0xFDD
  3466                           fsr2h	equ	0xFDA
  3467                           fsr2l	equ	0xFD9
  3468                           status	equ	0xFD8
  3469                           
  3470 ;; *************** function _printErrorLCD *****************
  3471 ;; Defined at:
  3472 ;;		line 62 in file "helpers.c"
  3473 ;; Parameters:    Size  Location     Type
  3474 ;;  string          2   21[COMRAM] PTR unsigned char 
  3475 ;;		 -> errMsgs.tooManyFasteners(32), errMsgs.badEntry(32), errMsgs(224), 
  3476 ;; Auto vars:     Size  Location     Type
  3477 ;;		None
  3478 ;; Return value:  Size  Location     Type
  3479 ;;                  1    wreg      void 
  3480 ;; Registers used:
  3481 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3482 ;; Tracked objects:
  3483 ;;		On entry : 0/0
  3484 ;;		On exit  : 0/0
  3485 ;;		Unchanged: 0/0
  3486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3487 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3489 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3490 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3491 ;;Total ram usage:        4 bytes
  3492 ;; Hardware stack levels used:    1
  3493 ;; Hardware stack levels required when called:    3
  3494 ;; This function calls:
  3495 ;;		_printStringLCD
  3496 ;; This function is called by:
  3497 ;;		_inputEntry
  3498 ;; This function uses a non-reentrant model
  3499 ;;
  3500                           
  3501                           	psect	text8
  3502  00ED44                     __ptext8:
  3503                           	opt stack 0
  3504  00ED44                     _printErrorLCD:
  3505                           	opt stack 25
  3506                           
  3507                           ;helpers.c: 63: printStringLCD(string);
  3508                           
  3509                           ;incstack = 0
  3510  00ED44  C016  F007         	movff	printErrorLCD@string,printStringLCD@string
  3511  00ED48  C017  F008         	movff	printErrorLCD@string+1,printStringLCD@string+1
  3512  00ED4C  ECA3  F07A         	call	_printStringLCD	;wreg free
  3513                           
  3514                           ;helpers.c: 64: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3515  00ED50  0E66               	movlw	102
  3516  00ED52  6E19               	movwf	(??_printErrorLCD+1)& (0+255),c
  3517  00ED54  0E76               	movlw	118
  3518  00ED56  6E18               	movwf	??_printErrorLCD& (0+255),c
  3519  00ED58  0EC1               	movlw	193
  3520  00ED5A                     u2367:
  3521  00ED5A  2EE8               	decfsz	wreg,f,c
  3522  00ED5C  D7FE               	bra	u2367
  3523  00ED5E  2E18               	decfsz	??_printErrorLCD& (0+255),f,c
  3524  00ED60  D7FC               	bra	u2367
  3525  00ED62  2E19               	decfsz	(??_printErrorLCD+1)& (0+255),f,c
  3526  00ED64  D7FA               	bra	u2367
  3527  00ED66  F000               	nop	
  3528  00ED68  0012               	return		;funcret
  3529  00ED6A                     __end_of_printErrorLCD:
  3530                           	opt stack 0
  3531                           tblptru	equ	0xFF8
  3532                           tblptrh	equ	0xFF7
  3533                           tblptrl	equ	0xFF6
  3534                           tablat	equ	0xFF5
  3535                           prodh	equ	0xFF4
  3536                           prodl	equ	0xFF3
  3537                           indf0	equ	0xFEF
  3538                           postinc0	equ	0xFEE
  3539                           fsr0h	equ	0xFEA
  3540                           fsr0l	equ	0xFE9
  3541                           wreg	equ	0xFE8
  3542                           postdec1	equ	0xFE5
  3543                           fsr1l	equ	0xFE1
  3544                           indf2	equ	0xFDF
  3545                           postinc2	equ	0xFDE
  3546                           postdec2	equ	0xFDD
  3547                           fsr2h	equ	0xFDA
  3548                           fsr2l	equ	0xFD9
  3549                           status	equ	0xFD8
  3550                           
  3551 ;; *************** function _lcd_set_cursor *****************
  3552 ;; Defined at:
  3553 ;;		line 81 in file "lcd.c"
  3554 ;; Parameters:    Size  Location     Type
  3555 ;;  x               1    wreg     unsigned char 
  3556 ;;  y               1    6[COMRAM] unsigned char 
  3557 ;; Auto vars:     Size  Location     Type
  3558 ;;  x               1    9[COMRAM] unsigned char 
  3559 ;;  i               1    8[COMRAM] unsigned char 
  3560 ;; Return value:  Size  Location     Type
  3561 ;;                  1    wreg      void 
  3562 ;; Registers used:
  3563 ;;		wreg, status,2, status,0, cstack
  3564 ;; Tracked objects:
  3565 ;;		On entry : 0/0
  3566 ;;		On exit  : 0/0
  3567 ;;		Unchanged: 0/0
  3568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3569 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3570 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3571 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3572 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3573 ;;Total ram usage:        4 bytes
  3574 ;; Hardware stack levels used:    1
  3575 ;; Hardware stack levels required when called:    3
  3576 ;; This function calls:
  3577 ;;		_lcdInst
  3578 ;;		_lcd_shift_cursor
  3579 ;; This function is called by:
  3580 ;;		_inputEntry
  3581 ;; This function uses a non-reentrant model
  3582 ;;
  3583                           
  3584                           	psect	text9
  3585  00EE04                     __ptext9:
  3586                           	opt stack 0
  3587  00EE04                     _lcd_set_cursor:
  3588                           	opt stack 25
  3589                           
  3590                           ;incstack = 0
  3591                           ;lcd_set_cursor@x stored from wreg
  3592  00EE04  6E0A               	movwf	lcd_set_cursor@x,c
  3593                           
  3594                           ;lcd.c: 91: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3595  00EE06  0E80               	movlw	128
  3596  00EE08  EC5B  F076         	call	_lcdInst
  3597  00EE0C  0E41               	movlw	65
  3598  00EE0E  6E08               	movwf	??_lcd_set_cursor& (0+255),c
  3599  00EE10  0EEE               	movlw	238
  3600  00EE12                     u2377:
  3601  00EE12  2EE8               	decfsz	wreg,f,c
  3602  00EE14  D7FE               	bra	u2377
  3603  00EE16  2E08               	decfsz	??_lcd_set_cursor& (0+255),f,c
  3604  00EE18  D7FC               	bra	u2377
  3605  00EE1A  D000               	nop2	
  3606                           
  3607                           ;lcd.c: 92: for(unsigned char i = 0; i < y; i++){lcdInst(0xC0);;}
  3608  00EE1C  0E00               	movlw	0
  3609  00EE1E  6E09               	movwf	lcd_set_cursor@i,c
  3610  00EE20  D004               	goto	l242
  3611  00EE22  0EC0               	movlw	192
  3612  00EE24  EC5B  F076         	call	_lcdInst
  3613  00EE28  2A09               	incf	lcd_set_cursor@i,f,c
  3614  00EE2A                     l242:
  3615  00EE2A  5007               	movf	lcd_set_cursor@y,w,c
  3616  00EE2C  5C09               	subwf	lcd_set_cursor@i,w,c
  3617  00EE2E  A0D8               	btfss	status,0,c
  3618  00EE30  D7F8               	goto	l243
  3619                           
  3620                           ;lcd.c: 93: if(x > 0){
  3621  00EE32  500A               	movf	lcd_set_cursor@x,w,c
  3622  00EE34  B4D8               	btfsc	status,2,c
  3623  00EE36  0012               	return	
  3624                           
  3625                           ;lcd.c: 94: lcd_shift_cursor(x, 1);
  3626  00EE38  0E01               	movlw	1
  3627  00EE3A  6E04               	movwf	lcd_shift_cursor@direction,c
  3628  00EE3C  500A               	movf	lcd_set_cursor@x,w,c
  3629  00EE3E  EC6F  F076         	call	_lcd_shift_cursor
  3630  00EE42  0012               	return	
  3631  00EE44                     __end_of_lcd_set_cursor:
  3632                           	opt stack 0
  3633                           tblptru	equ	0xFF8
  3634                           tblptrh	equ	0xFF7
  3635                           tblptrl	equ	0xFF6
  3636                           tablat	equ	0xFF5
  3637                           prodh	equ	0xFF4
  3638                           prodl	equ	0xFF3
  3639                           indf0	equ	0xFEF
  3640                           postinc0	equ	0xFEE
  3641                           fsr0h	equ	0xFEA
  3642                           fsr0l	equ	0xFE9
  3643                           wreg	equ	0xFE8
  3644                           postdec1	equ	0xFE5
  3645                           fsr1l	equ	0xFE1
  3646                           indf2	equ	0xFDF
  3647                           postinc2	equ	0xFDE
  3648                           postdec2	equ	0xFDD
  3649                           fsr2h	equ	0xFDA
  3650                           fsr2l	equ	0xFD9
  3651                           status	equ	0xFD8
  3652                           
  3653 ;; *************** function _lcd_shift_cursor *****************
  3654 ;; Defined at:
  3655 ;;		line 98 in file "lcd.c"
  3656 ;; Parameters:    Size  Location     Type
  3657 ;;  numChars        1    wreg     unsigned char 
  3658 ;;  direction       1    3[COMRAM] unsigned char 
  3659 ;; Auto vars:     Size  Location     Type
  3660 ;;  numChars        1    4[COMRAM] unsigned char 
  3661 ;;  n               1    5[COMRAM] unsigned char 
  3662 ;; Return value:  Size  Location     Type
  3663 ;;                  1    wreg      void 
  3664 ;; Registers used:
  3665 ;;		wreg, status,2, status,0, cstack
  3666 ;; Tracked objects:
  3667 ;;		On entry : 0/0
  3668 ;;		On exit  : 0/0
  3669 ;;		Unchanged: 0/0
  3670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3671 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3672 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3674 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3675 ;;Total ram usage:        3 bytes
  3676 ;; Hardware stack levels used:    1
  3677 ;; Hardware stack levels required when called:    2
  3678 ;; This function calls:
  3679 ;;		_lcdInst
  3680 ;; This function is called by:
  3681 ;;		_lcd_set_cursor
  3682 ;; This function uses a non-reentrant model
  3683 ;;
  3684                           
  3685                           	psect	text10
  3686  00ECDE                     __ptext10:
  3687                           	opt stack 0
  3688  00ECDE                     _lcd_shift_cursor:
  3689                           	opt stack 25
  3690                           
  3691                           ;incstack = 0
  3692                           ;lcd_shift_cursor@numChars stored from wreg
  3693  00ECDE  6E05               	movwf	lcd_shift_cursor@numChars,c
  3694                           
  3695                           ;lcd.c: 110: for(unsigned char n = numChars; n > 0; n--){
  3696  00ECE0  C005  F006         	movff	lcd_shift_cursor@numChars,lcd_shift_cursor@n
  3697  00ECE4                     l1909:
  3698  00ECE4  5006               	movf	lcd_shift_cursor@n,w,c
  3699  00ECE6  B4D8               	btfsc	status,2,c
  3700  00ECE8  0012               	return	
  3701                           
  3702                           ;lcd.c: 111: lcdInst((unsigned char)(0x10 | (direction << 2)));
  3703  00ECEA  4404               	rlncf	lcd_shift_cursor@direction,w,c
  3704  00ECEC  46E8               	rlncf	wreg,f,c
  3705  00ECEE  0BFC               	andlw	252
  3706  00ECF0  0910               	iorlw	16
  3707  00ECF2  EC5B  F076         	call	_lcdInst
  3708  00ECF6  0606               	decf	lcd_shift_cursor@n,f,c
  3709  00ECF8  D7F5               	goto	l1909
  3710  00ECFA                     __end_of_lcd_shift_cursor:
  3711                           	opt stack 0
  3712                           tblptru	equ	0xFF8
  3713                           tblptrh	equ	0xFF7
  3714                           tblptrl	equ	0xFF6
  3715                           tablat	equ	0xFF5
  3716                           prodh	equ	0xFF4
  3717                           prodl	equ	0xFF3
  3718                           indf0	equ	0xFEF
  3719                           postinc0	equ	0xFEE
  3720                           fsr0h	equ	0xFEA
  3721                           fsr0l	equ	0xFE9
  3722                           wreg	equ	0xFE8
  3723                           postdec1	equ	0xFE5
  3724                           fsr1l	equ	0xFE1
  3725                           indf2	equ	0xFDF
  3726                           postinc2	equ	0xFDE
  3727                           postdec2	equ	0xFDD
  3728                           fsr2h	equ	0xFDA
  3729                           fsr2l	equ	0xFD9
  3730                           status	equ	0xFD8
  3731                           
  3732 ;; *************** function ___wmul *****************
  3733 ;; Defined at:
  3734 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3735 ;; Parameters:    Size  Location     Type
  3736 ;;  multiplier      2    0[COMRAM] unsigned int 
  3737 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3738 ;; Auto vars:     Size  Location     Type
  3739 ;;  product         2    4[COMRAM] unsigned int 
  3740 ;; Return value:  Size  Location     Type
  3741 ;;                  2    0[COMRAM] unsigned int 
  3742 ;; Registers used:
  3743 ;;		wreg, status,2, status,0, prodl, prodh
  3744 ;; Tracked objects:
  3745 ;;		On entry : 0/0
  3746 ;;		On exit  : 0/0
  3747 ;;		Unchanged: 0/0
  3748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3749 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3750 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3752 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3753 ;;Total ram usage:        6 bytes
  3754 ;; Hardware stack levels used:    1
  3755 ;; This function calls:
  3756 ;;		Nothing
  3757 ;; This function is called by:
  3758 ;;		_inputEntry
  3759 ;; This function uses a non-reentrant model
  3760 ;;
  3761                           
  3762                           	psect	text11
  3763  00ED1E                     __ptext11:
  3764                           	opt stack 0
  3765  00ED1E                     ___wmul:
  3766                           	opt stack 28
  3767                           
  3768                           ;incstack = 0
  3769  00ED1E  5001               	movf	___wmul@multiplier,w,c
  3770  00ED20  0203               	mulwf	___wmul@multiplicand,c
  3771  00ED22  CFF3 F005          	movff	prodl,___wmul@product
  3772  00ED26  CFF4 F006          	movff	prodh,___wmul@product+1
  3773  00ED2A  5001               	movf	___wmul@multiplier,w,c
  3774  00ED2C  0204               	mulwf	___wmul@multiplicand+1,c
  3775  00ED2E  50F3               	movf	prodl,w,c
  3776  00ED30  2606               	addwf	___wmul@product+1,f,c
  3777  00ED32  5002               	movf	___wmul@multiplier+1,w,c
  3778  00ED34  0203               	mulwf	___wmul@multiplicand,c
  3779  00ED36  50F3               	movf	prodl,w,c
  3780  00ED38  2606               	addwf	___wmul@product+1,f,c
  3781  00ED3A  C005  F001         	movff	___wmul@product,?___wmul
  3782  00ED3E  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3783  00ED42  0012               	return	
  3784  00ED44                     __end_of___wmul:
  3785                           	opt stack 0
  3786                           tblptru	equ	0xFF8
  3787                           tblptrh	equ	0xFF7
  3788                           tblptrl	equ	0xFF6
  3789                           tablat	equ	0xFF5
  3790                           prodh	equ	0xFF4
  3791                           prodl	equ	0xFF3
  3792                           indf0	equ	0xFEF
  3793                           postinc0	equ	0xFEE
  3794                           fsr0h	equ	0xFEA
  3795                           fsr0l	equ	0xFE9
  3796                           wreg	equ	0xFE8
  3797                           postdec1	equ	0xFE5
  3798                           fsr1l	equ	0xFE1
  3799                           indf2	equ	0xFDF
  3800                           postinc2	equ	0xFDE
  3801                           postdec2	equ	0xFDD
  3802                           fsr2h	equ	0xFDA
  3803                           fsr2l	equ	0xFD9
  3804                           status	equ	0xFD8
  3805                           
  3806 ;; *************** function _I2C_Send *****************
  3807 ;; Defined at:
  3808 ;;		line 83 in file "helpers.c"
  3809 ;; Parameters:    Size  Location     Type
  3810 ;;  address         1    wreg     unsigned char 
  3811 ;;  data            2    3[COMRAM] PTR unsigned char 
  3812 ;;		 -> STR_1(25), 
  3813 ;; Auto vars:     Size  Location     Type
  3814 ;;  address         1    7[COMRAM] unsigned char 
  3815 ;;  i               2    8[COMRAM] int 
  3816 ;; Return value:  Size  Location     Type
  3817 ;;                  1    wreg      void 
  3818 ;; Registers used:
  3819 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3820 ;; Tracked objects:
  3821 ;;		On entry : 0/0
  3822 ;;		On exit  : 0/0
  3823 ;;		Unchanged: 0/0
  3824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3825 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3826 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3827 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3828 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3829 ;;Total ram usage:        7 bytes
  3830 ;; Hardware stack levels used:    1
  3831 ;; Hardware stack levels required when called:    2
  3832 ;; This function calls:
  3833 ;;		_I2C_Master_Start
  3834 ;;		_I2C_Master_Stop
  3835 ;;		_I2C_Master_Write
  3836 ;; This function is called by:
  3837 ;;		_inputEntry
  3838 ;; This function uses a non-reentrant model
  3839 ;;
  3840                           
  3841                           	psect	text12
  3842  00EFCC                     __ptext12:
  3843                           	opt stack 0
  3844  00EFCC                     _I2C_Send:
  3845                           	opt stack 26
  3846                           
  3847                           ;incstack = 0
  3848                           ;I2C_Send@address stored from wreg
  3849  00EFCC  6E08               	movwf	I2C_Send@address,c
  3850                           
  3851                           ;helpers.c: 88: int i=0;
  3852  00EFCE  0E00               	movlw	0
  3853  00EFD0  6E0A               	movwf	I2C_Send@i+1,c
  3854  00EFD2  0E00               	movlw	0
  3855  00EFD4  6E09               	movwf	I2C_Send@i,c
  3856                           
  3857                           ;helpers.c: 90: I2C_Master_Start();
  3858  00EFD6  EC45  F076         	call	_I2C_Master_Start	;wreg free
  3859                           
  3860                           ;helpers.c: 91: I2C_Master_Write(address);
  3861  00EFDA  C008  F002         	movff	I2C_Send@address,I2C_Master_Write@byteToWrite
  3862  00EFDE  6A03               	clrf	I2C_Master_Write@byteToWrite+1,c
  3863  00EFE0  EC4D  F076         	call	_I2C_Master_Write	;wreg free
  3864                           
  3865                           ;helpers.c: 93: while (data[i] != 0) {
  3866  00EFE4  D013               	goto	l383
  3867  00EFE6                     
  3868                           ;helpers.c: 94: I2C_Master_Write(data[i]);
  3869  00EFE6  5009               	movf	I2C_Send@i,w,c
  3870  00EFE8  2404               	addwf	I2C_Send@data,w,c
  3871  00EFEA  6E06               	movwf	??_I2C_Send& (0+255),c
  3872  00EFEC  500A               	movf	I2C_Send@i+1,w,c
  3873  00EFEE  2005               	addwfc	I2C_Send@data+1,w,c
  3874  00EFF0  6E07               	movwf	(??_I2C_Send+1)& (0+255),c
  3875  00EFF2  C006  FFF6         	movff	??_I2C_Send,tblptrl
  3876  00EFF6  C007  FFF7         	movff	??_I2C_Send+1,tblptrh
  3877  00EFFA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3878  00EFFA  6AF8               	clrf	tblptru,c
  3879  00EFFC                     	endif
  3880  00EFFC                     	if	0	;tblptru may be non-zero
  3881  00EFFC                     	endif
  3882  00EFFC  0008               	tblrd		*
  3883  00EFFE  50F5               	movf	tablat,w,c
  3884  00F000  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  3885  00F002  6A03               	clrf	I2C_Master_Write@byteToWrite+1,c
  3886  00F004  EC4D  F076         	call	_I2C_Master_Write	;wreg free
  3887                           
  3888                           ;helpers.c: 95: i++;
  3889  00F008  4A09               	infsnz	I2C_Send@i,f,c
  3890  00F00A  2A0A               	incf	I2C_Send@i+1,f,c
  3891  00F00C                     l383:
  3892  00F00C  5009               	movf	I2C_Send@i,w,c
  3893  00F00E  2404               	addwf	I2C_Send@data,w,c
  3894  00F010  6E06               	movwf	??_I2C_Send& (0+255),c
  3895  00F012  500A               	movf	I2C_Send@i+1,w,c
  3896  00F014  2005               	addwfc	I2C_Send@data+1,w,c
  3897  00F016  6E07               	movwf	(??_I2C_Send+1)& (0+255),c
  3898  00F018  C006  FFF6         	movff	??_I2C_Send,tblptrl
  3899  00F01C  C007  FFF7         	movff	??_I2C_Send+1,tblptrh
  3900  00F020                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3901  00F020  6AF8               	clrf	tblptru,c
  3902  00F022                     	endif
  3903  00F022                     	if	0	;tblptru may be non-zero
  3904  00F022                     	endif
  3905  00F022  0008               	tblrd		*
  3906  00F024  50F5               	movf	tablat,w,c
  3907  00F026  0900               	iorlw	0
  3908  00F028  A4D8               	btfss	status,2,c
  3909  00F02A  D7DD               	goto	l384
  3910                           
  3911                           ;helpers.c: 96: }
  3912                           ;helpers.c: 98: I2C_Master_Stop();
  3913  00F02C  EC49  F076         	call	_I2C_Master_Stop	;wreg free
  3914  00F030  0012               	return	
  3915  00F032                     __end_of_I2C_Send:
  3916                           	opt stack 0
  3917                           tblptru	equ	0xFF8
  3918                           tblptrh	equ	0xFF7
  3919                           tblptrl	equ	0xFF6
  3920                           tablat	equ	0xFF5
  3921                           prodh	equ	0xFF4
  3922                           prodl	equ	0xFF3
  3923                           indf0	equ	0xFEF
  3924                           postinc0	equ	0xFEE
  3925                           fsr0h	equ	0xFEA
  3926                           fsr0l	equ	0xFE9
  3927                           wreg	equ	0xFE8
  3928                           postdec1	equ	0xFE5
  3929                           fsr1l	equ	0xFE1
  3930                           indf2	equ	0xFDF
  3931                           postinc2	equ	0xFDE
  3932                           postdec2	equ	0xFDD
  3933                           fsr2h	equ	0xFDA
  3934                           fsr2l	equ	0xFD9
  3935                           status	equ	0xFD8
  3936                           
  3937 ;; *************** function _I2C_Master_Write *****************
  3938 ;; Defined at:
  3939 ;;		line 108 in file "I2C.c"
  3940 ;; Parameters:    Size  Location     Type
  3941 ;;  byteToWrite     2    1[COMRAM] unsigned int 
  3942 ;; Auto vars:     Size  Location     Type
  3943 ;;		None
  3944 ;; Return value:  Size  Location     Type
  3945 ;;                  1    wreg      void 
  3946 ;; Registers used:
  3947 ;;		wreg, status,2, status,0, cstack
  3948 ;; Tracked objects:
  3949 ;;		On entry : 0/0
  3950 ;;		On exit  : 0/0
  3951 ;;		Unchanged: 0/0
  3952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3953 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3956 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3957 ;;Total ram usage:        2 bytes
  3958 ;; Hardware stack levels used:    1
  3959 ;; Hardware stack levels required when called:    1
  3960 ;; This function calls:
  3961 ;;		_I2C_Master_Wait
  3962 ;; This function is called by:
  3963 ;;		_I2C_Send
  3964 ;; This function uses a non-reentrant model
  3965 ;;
  3966                           
  3967                           	psect	text13
  3968  00EC9A                     __ptext13:
  3969                           	opt stack 0
  3970  00EC9A                     _I2C_Master_Write:
  3971                           	opt stack 26
  3972                           
  3973                           ;I2C.c: 116: I2C_Master_Wait();
  3974                           
  3975                           ;incstack = 0
  3976  00EC9A  EC52  F076         	call	_I2C_Master_Wait	;wreg free
  3977                           
  3978                           ;I2C.c: 117: SSPBUF = byteToWrite;
  3979  00EC9E  C002  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  3980  00ECA2  0012               	return		;funcret
  3981  00ECA4                     __end_of_I2C_Master_Write:
  3982                           	opt stack 0
  3983                           tblptru	equ	0xFF8
  3984                           tblptrh	equ	0xFF7
  3985                           tblptrl	equ	0xFF6
  3986                           tablat	equ	0xFF5
  3987                           prodh	equ	0xFF4
  3988                           prodl	equ	0xFF3
  3989                           indf0	equ	0xFEF
  3990                           postinc0	equ	0xFEE
  3991                           fsr0h	equ	0xFEA
  3992                           fsr0l	equ	0xFE9
  3993                           wreg	equ	0xFE8
  3994                           postdec1	equ	0xFE5
  3995                           fsr1l	equ	0xFE1
  3996                           indf2	equ	0xFDF
  3997                           postinc2	equ	0xFDE
  3998                           postdec2	equ	0xFDD
  3999                           fsr2h	equ	0xFDA
  4000                           fsr2l	equ	0xFD9
  4001                           status	equ	0xFD8
  4002                           
  4003 ;; *************** function _I2C_Master_Stop *****************
  4004 ;; Defined at:
  4005 ;;		line 95 in file "I2C.c"
  4006 ;; Parameters:    Size  Location     Type
  4007 ;;		None
  4008 ;; Auto vars:     Size  Location     Type
  4009 ;;		None
  4010 ;; Return value:  Size  Location     Type
  4011 ;;                  1    wreg      void 
  4012 ;; Registers used:
  4013 ;;		wreg, status,2, status,0, cstack
  4014 ;; Tracked objects:
  4015 ;;		On entry : 0/0
  4016 ;;		On exit  : 0/0
  4017 ;;		Unchanged: 0/0
  4018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4022 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4023 ;;Total ram usage:        0 bytes
  4024 ;; Hardware stack levels used:    1
  4025 ;; Hardware stack levels required when called:    1
  4026 ;; This function calls:
  4027 ;;		_I2C_Master_Wait
  4028 ;; This function is called by:
  4029 ;;		_I2C_Send
  4030 ;; This function uses a non-reentrant model
  4031 ;;
  4032                           
  4033                           	psect	text14
  4034  00EC92                     __ptext14:
  4035                           	opt stack 0
  4036  00EC92                     _I2C_Master_Stop:
  4037                           	opt stack 26
  4038                           
  4039                           ;I2C.c: 104: I2C_Master_Wait();
  4040                           
  4041                           ;incstack = 0
  4042  00EC92  EC52  F076         	call	_I2C_Master_Wait	;wreg free
  4043                           
  4044                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  4045  00EC96  84C5               	bsf	4037,2,c	;volatile
  4046  00EC98  0012               	return		;funcret
  4047  00EC9A                     __end_of_I2C_Master_Stop:
  4048                           	opt stack 0
  4049                           tblptru	equ	0xFF8
  4050                           tblptrh	equ	0xFF7
  4051                           tblptrl	equ	0xFF6
  4052                           tablat	equ	0xFF5
  4053                           prodh	equ	0xFF4
  4054                           prodl	equ	0xFF3
  4055                           indf0	equ	0xFEF
  4056                           postinc0	equ	0xFEE
  4057                           fsr0h	equ	0xFEA
  4058                           fsr0l	equ	0xFE9
  4059                           wreg	equ	0xFE8
  4060                           postdec1	equ	0xFE5
  4061                           fsr1l	equ	0xFE1
  4062                           indf2	equ	0xFDF
  4063                           postinc2	equ	0xFDE
  4064                           postdec2	equ	0xFDD
  4065                           fsr2h	equ	0xFDA
  4066                           fsr2l	equ	0xFD9
  4067                           status	equ	0xFD8
  4068                           
  4069 ;; *************** function _I2C_Master_Start *****************
  4070 ;; Defined at:
  4071 ;;		line 69 in file "I2C.c"
  4072 ;; Parameters:    Size  Location     Type
  4073 ;;		None
  4074 ;; Auto vars:     Size  Location     Type
  4075 ;;		None
  4076 ;; Return value:  Size  Location     Type
  4077 ;;                  1    wreg      void 
  4078 ;; Registers used:
  4079 ;;		wreg, status,2, status,0, cstack
  4080 ;; Tracked objects:
  4081 ;;		On entry : 0/0
  4082 ;;		On exit  : 0/0
  4083 ;;		Unchanged: 0/0
  4084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4089 ;;Total ram usage:        0 bytes
  4090 ;; Hardware stack levels used:    1
  4091 ;; Hardware stack levels required when called:    1
  4092 ;; This function calls:
  4093 ;;		_I2C_Master_Wait
  4094 ;; This function is called by:
  4095 ;;		_I2C_Send
  4096 ;; This function uses a non-reentrant model
  4097 ;;
  4098                           
  4099                           	psect	text15
  4100  00EC8A                     __ptext15:
  4101                           	opt stack 0
  4102  00EC8A                     _I2C_Master_Start:
  4103                           	opt stack 26
  4104                           
  4105                           ;I2C.c: 78: I2C_Master_Wait();
  4106                           
  4107                           ;incstack = 0
  4108  00EC8A  EC52  F076         	call	_I2C_Master_Wait	;wreg free
  4109                           
  4110                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  4111  00EC8E  80C5               	bsf	4037,0,c	;volatile
  4112  00EC90  0012               	return		;funcret
  4113  00EC92                     __end_of_I2C_Master_Start:
  4114                           	opt stack 0
  4115                           tblptru	equ	0xFF8
  4116                           tblptrh	equ	0xFF7
  4117                           tblptrl	equ	0xFF6
  4118                           tablat	equ	0xFF5
  4119                           prodh	equ	0xFF4
  4120                           prodl	equ	0xFF3
  4121                           indf0	equ	0xFEF
  4122                           postinc0	equ	0xFEE
  4123                           fsr0h	equ	0xFEA
  4124                           fsr0l	equ	0xFE9
  4125                           wreg	equ	0xFE8
  4126                           postdec1	equ	0xFE5
  4127                           fsr1l	equ	0xFE1
  4128                           indf2	equ	0xFDF
  4129                           postinc2	equ	0xFDE
  4130                           postdec2	equ	0xFDD
  4131                           fsr2h	equ	0xFDA
  4132                           fsr2l	equ	0xFD9
  4133                           status	equ	0xFD8
  4134                           
  4135 ;; *************** function _I2C_Master_Wait *****************
  4136 ;; Defined at:
  4137 ;;		line 51 in file "I2C.c"
  4138 ;; Parameters:    Size  Location     Type
  4139 ;;		None
  4140 ;; Auto vars:     Size  Location     Type
  4141 ;;		None
  4142 ;; Return value:  Size  Location     Type
  4143 ;;                  1    wreg      void 
  4144 ;; Registers used:
  4145 ;;		wreg, status,2, status,0
  4146 ;; Tracked objects:
  4147 ;;		On entry : 0/0
  4148 ;;		On exit  : 0/0
  4149 ;;		Unchanged: 0/0
  4150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4153 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4154 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4155 ;;Total ram usage:        1 bytes
  4156 ;; Hardware stack levels used:    1
  4157 ;; This function calls:
  4158 ;;		Nothing
  4159 ;; This function is called by:
  4160 ;;		_I2C_Master_Start
  4161 ;;		_I2C_Master_Stop
  4162 ;;		_I2C_Master_Write
  4163 ;;		_I2C_Master_RepeatedStart
  4164 ;;		_I2C_Master_Read
  4165 ;; This function uses a non-reentrant model
  4166 ;;
  4167                           
  4168                           	psect	text16
  4169  00ECA4                     __ptext16:
  4170                           	opt stack 0
  4171  00ECA4                     _I2C_Master_Wait:
  4172                           	opt stack 26
  4173                           
  4174                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  4175                           
  4176                           ;incstack = 0
  4177  00ECA4  B4C7               	btfsc	4039,2,c	;volatile
  4178  00ECA6  D7FE               	goto	_I2C_Master_Wait
  4179  00ECA8  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  4180  00ECAC  0E1F               	movlw	31
  4181  00ECAE  1601               	andwf	??_I2C_Master_Wait,f,c
  4182  00ECB0  B4D8               	btfsc	status,2,c
  4183  00ECB2  0012               	return	
  4184  00ECB4  D7F7               	goto	_I2C_Master_Wait
  4185  00ECB6                     __end_of_I2C_Master_Wait:
  4186                           	opt stack 0
  4187                           tblptru	equ	0xFF8
  4188                           tblptrh	equ	0xFF7
  4189                           tblptrl	equ	0xFF6
  4190                           tablat	equ	0xFF5
  4191                           prodh	equ	0xFF4
  4192                           prodl	equ	0xFF3
  4193                           indf0	equ	0xFEF
  4194                           postinc0	equ	0xFEE
  4195                           fsr0h	equ	0xFEA
  4196                           fsr0l	equ	0xFE9
  4197                           wreg	equ	0xFE8
  4198                           postdec1	equ	0xFE5
  4199                           fsr1l	equ	0xFE1
  4200                           indf2	equ	0xFDF
  4201                           postinc2	equ	0xFDE
  4202                           postdec2	equ	0xFDD
  4203                           fsr2h	equ	0xFDA
  4204                           fsr2l	equ	0xFD9
  4205                           status	equ	0xFD8
  4206                           
  4207 ;; *************** function _hibernate *****************
  4208 ;; Defined at:
  4209 ;;		line 6 in file "menu.c"
  4210 ;; Parameters:    Size  Location     Type
  4211 ;;		None
  4212 ;; Auto vars:     Size  Location     Type
  4213 ;;  pressed         2   25[COMRAM] int 
  4214 ;; Return value:  Size  Location     Type
  4215 ;;                  1    wreg      void 
  4216 ;; Registers used:
  4217 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4218 ;; Tracked objects:
  4219 ;;		On entry : 0/0
  4220 ;;		On exit  : 0/0
  4221 ;;		Unchanged: 0/0
  4222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4224 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4225 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4226 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4227 ;;Total ram usage:        6 bytes
  4228 ;; Hardware stack levels used:    1
  4229 ;; Hardware stack levels required when called:    3
  4230 ;; This function calls:
  4231 ;;		_pollKeypad
  4232 ;;		_printStringLCD
  4233 ;; This function is called by:
  4234 ;;		_main
  4235 ;;		_mainMenu
  4236 ;; This function uses a non-reentrant model
  4237 ;;
  4238                           
  4239                           	psect	text17
  4240  00EDCA                     __ptext17:
  4241                           	opt stack 0
  4242  00EDCA                     _hibernate:
  4243                           	opt stack 26
  4244                           
  4245                           ;menu.c: 7: printStringLCD("Press 1 to begin");
  4246                           
  4247                           ;incstack = 0
  4248  00EDCA  0ED1               	movlw	low STR_2
  4249  00EDCC  6E07               	movwf	printStringLCD@string,c
  4250  00EDCE  0EFF               	movlw	high STR_2
  4251  00EDD0  6E08               	movwf	printStringLCD@string+1,c
  4252  00EDD2  ECA3  F07A         	call	_printStringLCD	;wreg free
  4253  00EDD6                     
  4254                           ;menu.c: 10: pressed = pollKeypad();
  4255  00EDD6  ECB5  F076         	call	_pollKeypad	;wreg free
  4256  00EDDA  6E16               	movwf	??_hibernate& (0+255),c
  4257  00EDDC  5016               	movf	??_hibernate,w,c
  4258  00EDDE  6E1A               	movwf	hibernate@pressed,c
  4259  00EDE0  6A1B               	clrf	hibernate@pressed+1,c
  4260                           
  4261                           ;menu.c: 11: if (pressed - 48 == 1) {
  4262  00EDE2  0ED0               	movlw	208
  4263  00EDE4  6E16               	movwf	??_hibernate& (0+255),c
  4264  00EDE6  0EFF               	movlw	255
  4265  00EDE8  6E17               	movwf	(??_hibernate+1)& (0+255),c
  4266  00EDEA  C01A  F018         	movff	hibernate@pressed,??_hibernate+2
  4267  00EDEE  C01B  F019         	movff	hibernate@pressed+1,??_hibernate+3
  4268  00EDF2  5016               	movf	??_hibernate,w,c
  4269  00EDF4  2618               	addwf	??_hibernate+2,f,c
  4270  00EDF6  5017               	movf	??_hibernate+1,w,c
  4271  00EDF8  2219               	addwfc	??_hibernate+3,f,c
  4272  00EDFA  0418               	decf	??_hibernate+2,w,c
  4273  00EDFC  1019               	iorwf	??_hibernate+3,w,c
  4274  00EDFE  B4D8               	btfsc	status,2,c
  4275  00EE00  0012               	return	
  4276  00EE02  D7E9               	goto	l291
  4277  00EE04                     __end_of_hibernate:
  4278                           	opt stack 0
  4279                           tblptru	equ	0xFF8
  4280                           tblptrh	equ	0xFF7
  4281                           tblptrl	equ	0xFF6
  4282                           tablat	equ	0xFF5
  4283                           prodh	equ	0xFF4
  4284                           prodl	equ	0xFF3
  4285                           indf0	equ	0xFEF
  4286                           postinc0	equ	0xFEE
  4287                           fsr0h	equ	0xFEA
  4288                           fsr0l	equ	0xFE9
  4289                           wreg	equ	0xFE8
  4290                           postdec1	equ	0xFE5
  4291                           fsr1l	equ	0xFE1
  4292                           indf2	equ	0xFDF
  4293                           postinc2	equ	0xFDE
  4294                           postdec2	equ	0xFDD
  4295                           fsr2h	equ	0xFDA
  4296                           fsr2l	equ	0xFD9
  4297                           status	equ	0xFD8
  4298                           
  4299 ;; *************** function _printStringLCD *****************
  4300 ;; Defined at:
  4301 ;;		line 7 in file "helpers.c"
  4302 ;; Parameters:    Size  Location     Type
  4303 ;;  string          2    6[COMRAM] PTR unsigned char 
  4304 ;;		 -> STR_4(30), STR_3(26), STR_2(17), inputEntry@fastenerString(32), 
  4305 ;;		 -> inputEntryQuestions(132), errMsgs.tooManyFasteners(32), errMsgs.badEntry(32), errMsgs(224), 
  4306 ;; Auto vars:     Size  Location     Type
  4307 ;;  i               2   19[COMRAM] int 
  4308 ;;  newlineCharI    2   17[COMRAM] int 
  4309 ;;  newlineIndex    2   15[COMRAM] int 
  4310 ;;  spaceIndex      2   13[COMRAM] int 
  4311 ;;  j               2   11[COMRAM] int 
  4312 ;; Return value:  Size  Location     Type
  4313 ;;                  1    wreg      void 
  4314 ;; Registers used:
  4315 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4316 ;; Tracked objects:
  4317 ;;		On entry : 0/0
  4318 ;;		On exit  : 0/0
  4319 ;;		Unchanged: 0/0
  4320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4321 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4322 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4323 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4324 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4325 ;;Total ram usage:       15 bytes
  4326 ;; Hardware stack levels used:    1
  4327 ;; Hardware stack levels required when called:    2
  4328 ;; This function calls:
  4329 ;;		_lcdInst
  4330 ;;		_putch
  4331 ;; This function is called by:
  4332 ;;		_inputEntry
  4333 ;;		_hibernate
  4334 ;;		_viewLogs
  4335 ;;		_mainMenu
  4336 ;;		_printErrorLCD
  4337 ;; This function uses a non-reentrant model
  4338 ;;
  4339                           
  4340                           	psect	text18
  4341  00F546                     __ptext18:
  4342                           	opt stack 0
  4343  00F546                     _printStringLCD:
  4344                           	opt stack 26
  4345                           
  4346                           ;helpers.c: 12: int i;
  4347                           ;helpers.c: 13: int j = 1;
  4348                           
  4349                           ;incstack = 0
  4350  00F546  0E00               	movlw	0
  4351  00F548  6E0D               	movwf	printStringLCD@j+1,c
  4352  00F54A  0E01               	movlw	1
  4353  00F54C  6E0C               	movwf	printStringLCD@j,c
  4354                           
  4355                           ;helpers.c: 14: int newlineIndex = 16;
  4356  00F54E  0E00               	movlw	0
  4357  00F550  6E11               	movwf	printStringLCD@newlineIndex+1,c
  4358  00F552  0E10               	movlw	16
  4359  00F554  6E10               	movwf	printStringLCD@newlineIndex,c
  4360                           
  4361                           ;helpers.c: 15: int newlineCharIndex = -1;
  4362  00F556  6812               	setf	printStringLCD@newlineCharIndex,c
  4363  00F558  6813               	setf	printStringLCD@newlineCharIndex+1,c
  4364                           
  4365                           ;helpers.c: 16: int spaceIndex = 0;
  4366  00F55A  0E00               	movlw	0
  4367  00F55C  6E0F               	movwf	printStringLCD@spaceIndex+1,c
  4368  00F55E  0E00               	movlw	0
  4369  00F560  6E0E               	movwf	printStringLCD@spaceIndex,c
  4370                           
  4371                           ;helpers.c: 18: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4372  00F562  0E01               	movlw	1
  4373  00F564  EC5B  F076         	call	_lcdInst
  4374  00F568  0EC3               	movlw	195
  4375  00F56A  6E09               	movwf	??_printStringLCD& (0+255),c
  4376  00F56C  0ECD               	movlw	205
  4377  00F56E                     u2387:
  4378  00F56E  2EE8               	decfsz	wreg,f,c
  4379  00F570  D7FE               	bra	u2387
  4380  00F572  2E09               	decfsz	??_printStringLCD& (0+255),f,c
  4381  00F574  D7FC               	bra	u2387
  4382  00F576  F000               	nop	
  4383                           
  4384                           ;helpers.c: 19: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  4385  00F578  0E80               	movlw	128
  4386  00F57A  EC5B  F076         	call	_lcdInst
  4387  00F57E  0E41               	movlw	65
  4388  00F580  6E09               	movwf	??_printStringLCD& (0+255),c
  4389  00F582  0EEE               	movlw	238
  4390  00F584                     u2397:
  4391  00F584  2EE8               	decfsz	wreg,f,c
  4392  00F586  D7FE               	bra	u2397
  4393  00F588  2E09               	decfsz	??_printStringLCD& (0+255),f,c
  4394  00F58A  D7FC               	bra	u2397
  4395  00F58C  D000               	nop2	
  4396                           
  4397                           ;helpers.c: 22: for (i = 0; i < 17; i++) {
  4398  00F58E  0E00               	movlw	0
  4399  00F590  6E15               	movwf	printStringLCD@i+1,c
  4400  00F592  0E00               	movlw	0
  4401  00F594  6E14               	movwf	printStringLCD@i,c
  4402  00F596  BE15               	btfsc	printStringLCD@i+1,7,c
  4403  00F598  D008               	goto	l354
  4404  00F59A  5015               	movf	printStringLCD@i+1,w,c
  4405  00F59C  E105               	bnz	u1240
  4406  00F59E  0E11               	movlw	17
  4407  00F5A0  5C14               	subwf	printStringLCD@i,w,c
  4408  00F5A2  B0D8               	btfsc	status,0,c
  4409  00F5A4  D087               	goto	u1350
  4410  00F5A6  D001               	goto	l354
  4411  00F5A8                     u1240:
  4412  00F5A8  D085               	goto	u1350
  4413  00F5AA                     l354:
  4414                           
  4415                           ;helpers.c: 23: if (string[i] == 0) break;
  4416  00F5AA  5014               	movf	printStringLCD@i,w,c
  4417  00F5AC  2407               	addwf	printStringLCD@string,w,c
  4418  00F5AE  6E09               	movwf	??_printStringLCD& (0+255),c
  4419  00F5B0  5015               	movf	printStringLCD@i+1,w,c
  4420  00F5B2  2008               	addwfc	printStringLCD@string+1,w,c
  4421  00F5B4  6E0A               	movwf	(??_printStringLCD+1)& (0+255),c
  4422  00F5B6  C009  FFF6         	movff	??_printStringLCD,tblptrl
  4423  00F5BA  C00A  FFF7         	movff	??_printStringLCD+1,tblptrh
  4424  00F5BE  0E00               	movlw	low (__mediumconst shr (0+16))
  4425  00F5C0  6EF8               	movwf	tblptru,c
  4426  00F5C2  0E0F               	movlw	(high __ramtop+-1)
  4427  00F5C4  64F7               	cpfsgt	tblptrh,c
  4428  00F5C6  D003               	bra	u1257
  4429  00F5C8  0008               	tblrd		*
  4430  00F5CA  50F5               	movf	tablat,w,c
  4431  00F5CC  D005               	bra	u1250
  4432  00F5CE                     u1257:
  4433  00F5CE  CFF6 FFE9          	movff	tblptrl,fsr0l
  4434  00F5D2  CFF7 FFEA          	movff	tblptrh,fsr0h
  4435  00F5D6  50EF               	movf	indf0,w,c
  4436  00F5D8                     u1250:
  4437  00F5D8  0900               	iorlw	0
  4438  00F5DA  B4D8               	btfsc	status,2,c
  4439  00F5DC  D06B               	goto	u1350
  4440                           
  4441                           ;helpers.c: 24: if (string[i] == 32) {
  4442  00F5DE  5014               	movf	printStringLCD@i,w,c
  4443  00F5E0  2407               	addwf	printStringLCD@string,w,c
  4444  00F5E2  6E09               	movwf	??_printStringLCD& (0+255),c
  4445  00F5E4  5015               	movf	printStringLCD@i+1,w,c
  4446  00F5E6  2008               	addwfc	printStringLCD@string+1,w,c
  4447  00F5E8  6E0A               	movwf	(??_printStringLCD+1)& (0+255),c
  4448  00F5EA  C009  FFF6         	movff	??_printStringLCD,tblptrl
  4449  00F5EE  C00A  FFF7         	movff	??_printStringLCD+1,tblptrh
  4450  00F5F2  0E00               	movlw	low (__mediumconst shr (0+16))
  4451  00F5F4  6EF8               	movwf	tblptru,c
  4452  00F5F6  0E0F               	movlw	(high __ramtop+-1)
  4453  00F5F8  64F7               	cpfsgt	tblptrh,c
  4454  00F5FA  D003               	bra	u1277
  4455  00F5FC  0008               	tblrd		*
  4456  00F5FE  50F5               	movf	tablat,w,c
  4457  00F600  D005               	bra	u1270
  4458  00F602                     u1277:
  4459  00F602  CFF6 FFE9          	movff	tblptrl,fsr0l
  4460  00F606  CFF7 FFEA          	movff	tblptrh,fsr0h
  4461  00F60A  50EF               	movf	indf0,w,c
  4462  00F60C                     u1270:
  4463  00F60C  0A20               	xorlw	32
  4464  00F60E  A4D8               	btfss	status,2,c
  4465  00F610  D004               	goto	l357
  4466                           
  4467                           ;helpers.c: 25: spaceIndex = i;
  4468  00F612  C014  F00E         	movff	printStringLCD@i,printStringLCD@spaceIndex
  4469  00F616  C015  F00F         	movff	printStringLCD@i+1,printStringLCD@spaceIndex+1
  4470  00F61A                     l357:
  4471                           
  4472                           ;helpers.c: 26: }
  4473                           ;helpers.c: 28: if (string[i] == 10) {
  4474  00F61A  5014               	movf	printStringLCD@i,w,c
  4475  00F61C  2407               	addwf	printStringLCD@string,w,c
  4476  00F61E  6E09               	movwf	??_printStringLCD& (0+255),c
  4477  00F620  5015               	movf	printStringLCD@i+1,w,c
  4478  00F622  2008               	addwfc	printStringLCD@string+1,w,c
  4479  00F624  6E0A               	movwf	(??_printStringLCD+1)& (0+255),c
  4480  00F626  C009  FFF6         	movff	??_printStringLCD,tblptrl
  4481  00F62A  C00A  FFF7         	movff	??_printStringLCD+1,tblptrh
  4482  00F62E  0E00               	movlw	low (__mediumconst shr (0+16))
  4483  00F630  6EF8               	movwf	tblptru,c
  4484  00F632  0E0F               	movlw	(high __ramtop+-1)
  4485  00F634  64F7               	cpfsgt	tblptrh,c
  4486  00F636  D003               	bra	u1297
  4487  00F638  0008               	tblrd		*
  4488  00F63A  50F5               	movf	tablat,w,c
  4489  00F63C  D005               	bra	u1290
  4490  00F63E                     u1297:
  4491  00F63E  CFF6 FFE9          	movff	tblptrl,fsr0l
  4492  00F642  CFF7 FFEA          	movff	tblptrh,fsr0h
  4493  00F646  50EF               	movf	indf0,w,c
  4494  00F648                     u1290:
  4495  00F648  0A0A               	xorlw	10
  4496  00F64A  A4D8               	btfss	status,2,c
  4497  00F64C  D008               	goto	l358
  4498                           
  4499                           ;helpers.c: 29: newlineCharIndex = i;
  4500  00F64E  C014  F012         	movff	printStringLCD@i,printStringLCD@newlineCharIndex
  4501  00F652  C015  F013         	movff	printStringLCD@i+1,printStringLCD@newlineCharIndex+1
  4502                           
  4503                           ;helpers.c: 30: newlineIndex = newlineCharIndex;
  4504  00F656  C012  F010         	movff	printStringLCD@newlineCharIndex,printStringLCD@newlineIndex
  4505  00F65A  C013  F011         	movff	printStringLCD@newlineCharIndex+1,printStringLCD@newlineIndex+1
  4506  00F65E                     l358:
  4507                           
  4508                           ;helpers.c: 31: }
  4509                           ;helpers.c: 34: if (i == 16 && string[i] != 32 && newlineCharIndex < 0) {
  4510  00F65E  0E10               	movlw	16
  4511  00F660  1814               	xorwf	printStringLCD@i,w,c
  4512  00F662  1015               	iorwf	printStringLCD@i+1,w,c
  4513  00F664  A4D8               	btfss	status,2,c
  4514  00F666  D01F               	goto	l359
  4515  00F668  5014               	movf	printStringLCD@i,w,c
  4516  00F66A  2407               	addwf	printStringLCD@string,w,c
  4517  00F66C  6E09               	movwf	??_printStringLCD& (0+255),c
  4518  00F66E  5015               	movf	printStringLCD@i+1,w,c
  4519  00F670  2008               	addwfc	printStringLCD@string+1,w,c
  4520  00F672  6E0A               	movwf	(??_printStringLCD+1)& (0+255),c
  4521  00F674  C009  FFF6         	movff	??_printStringLCD,tblptrl
  4522  00F678  C00A  FFF7         	movff	??_printStringLCD+1,tblptrh
  4523  00F67C  0E00               	movlw	low (__mediumconst shr (0+16))
  4524  00F67E  6EF8               	movwf	tblptru,c
  4525  00F680  0E0F               	movlw	(high __ramtop+-1)
  4526  00F682  64F7               	cpfsgt	tblptrh,c
  4527  00F684  D003               	bra	u1327
  4528  00F686  0008               	tblrd		*
  4529  00F688  50F5               	movf	tablat,w,c
  4530  00F68A  D005               	bra	u1320
  4531  00F68C                     u1327:
  4532  00F68C  CFF6 FFE9          	movff	tblptrl,fsr0l
  4533  00F690  CFF7 FFEA          	movff	tblptrh,fsr0h
  4534  00F694  50EF               	movf	indf0,w,c
  4535  00F696                     u1320:
  4536  00F696  0A20               	xorlw	32
  4537  00F698  A4D8               	btfss	status,2,c
  4538  00F69A  AE13               	btfss	printStringLCD@newlineCharIndex+1,7,c
  4539  00F69C  D004               	goto	l359
  4540                           
  4541                           ;helpers.c: 35: newlineIndex = spaceIndex;
  4542  00F69E  C00E  F010         	movff	printStringLCD@spaceIndex,printStringLCD@newlineIndex
  4543  00F6A2  C00F  F011         	movff	printStringLCD@spaceIndex+1,printStringLCD@newlineIndex+1
  4544  00F6A6                     l359:
  4545  00F6A6  4A14               	infsnz	printStringLCD@i,f,c
  4546  00F6A8  2A15               	incf	printStringLCD@i+1,f,c
  4547  00F6AA  BE15               	btfsc	printStringLCD@i+1,7,c
  4548  00F6AC  D77E               	goto	l354
  4549  00F6AE  5015               	movf	printStringLCD@i+1,w,c
  4550  00F6B0  E101               	bnz	l1867
  4551  00F6B2  D775               	goto	L6
  4552  00F6B4                     u1350:
  4553  00F6B4                     l1867:
  4554                           
  4555                           ;helpers.c: 36: }
  4556                           ;helpers.c: 37: }
  4557                           ;helpers.c: 40: for (i = 0; i < 32; i++) {
  4558  00F6B4  0E00               	movlw	0
  4559  00F6B6  6E15               	movwf	printStringLCD@i+1,c
  4560  00F6B8  0E00               	movlw	0
  4561  00F6BA  6E14               	movwf	printStringLCD@i,c
  4562  00F6BC  BE15               	btfsc	printStringLCD@i+1,7,c
  4563  00F6BE  D008               	goto	l360
  4564  00F6C0  5015               	movf	printStringLCD@i+1,w,c
  4565  00F6C2  E105               	bnz	u1360
  4566  00F6C4  0E20               	movlw	32
  4567  00F6C6  5C14               	subwf	printStringLCD@i,w,c
  4568  00F6C8  B0D8               	btfsc	status,0,c
  4569  00F6CA  0012               	return	
  4570  00F6CC  D001               	goto	l360
  4571  00F6CE                     u1360:
  4572  00F6CE  0012               	return	
  4573  00F6D0                     l360:
  4574                           
  4575                           ;helpers.c: 41: if (string[i] == 0) break;
  4576  00F6D0  5014               	movf	printStringLCD@i,w,c
  4577  00F6D2  2407               	addwf	printStringLCD@string,w,c
  4578  00F6D4  6E09               	movwf	??_printStringLCD& (0+255),c
  4579  00F6D6  5015               	movf	printStringLCD@i+1,w,c
  4580  00F6D8  2008               	addwfc	printStringLCD@string+1,w,c
  4581  00F6DA  6E0A               	movwf	(??_printStringLCD+1)& (0+255),c
  4582  00F6DC  C009  FFF6         	movff	??_printStringLCD,tblptrl
  4583  00F6E0  C00A  FFF7         	movff	??_printStringLCD+1,tblptrh
  4584  00F6E4  0E00               	movlw	low (__mediumconst shr (0+16))
  4585  00F6E6  6EF8               	movwf	tblptru,c
  4586  00F6E8  0E0F               	movlw	(high __ramtop+-1)
  4587  00F6EA  64F7               	cpfsgt	tblptrh,c
  4588  00F6EC  D003               	bra	u1377
  4589  00F6EE  0008               	tblrd		*
  4590  00F6F0  50F5               	movf	tablat,w,c
  4591  00F6F2  D005               	bra	u1370
  4592  00F6F4                     u1377:
  4593  00F6F4  CFF6 FFE9          	movff	tblptrl,fsr0l
  4594  00F6F8  CFF7 FFEA          	movff	tblptrh,fsr0h
  4595  00F6FC  50EF               	movf	indf0,w,c
  4596  00F6FE                     u1370:
  4597  00F6FE  0900               	iorlw	0
  4598  00F700  B4D8               	btfsc	status,2,c
  4599  00F702  0012               	return	
  4600                           
  4601                           ;helpers.c: 52: if (i == newlineIndex && j < LCD_SIZE_VERT) {
  4602  00F704  5010               	movf	printStringLCD@newlineIndex,w,c
  4603  00F706  1814               	xorwf	printStringLCD@i,w,c
  4604  00F708  E151               	bnz	l1889
  4605  00F70A  5011               	movf	printStringLCD@newlineIndex+1,w,c
  4606  00F70C  1815               	xorwf	printStringLCD@i+1,w,c
  4607  00F70E  A4D8               	btfss	status,2,c
  4608  00F710  D04D               	goto	l364
  4609  00F712  0E18               	movlw	low _LCD_SIZE_VERT
  4610  00F714  6EF6               	movwf	tblptrl,c
  4611  00F716                     	if	1	;There is more than 1 active tblptr byte
  4612  00F716  0EFE               	movlw	high _LCD_SIZE_VERT
  4613  00F718  6EF7               	movwf	tblptrh,c
  4614  00F71A                     	endif
  4615  00F71A                     	if	1	;There are 3 active tblptr bytes
  4616  00F71A  0E00               	movlw	low (_LCD_SIZE_VERT shr (0+16))
  4617  00F71C  6EF8               	movwf	tblptru,c
  4618  00F71E                     	endif
  4619  00F71E  0008               	tblrd		*
  4620  00F720  50F5               	movf	tablat,w,c
  4621  00F722  6E09               	movwf	??_printStringLCD& (0+255),c
  4622  00F724  6A0A               	clrf	(??_printStringLCD+1)& (0+255),c
  4623  00F726  5009               	movf	??_printStringLCD,w,c
  4624  00F728  5C0C               	subwf	printStringLCD@j,w,c
  4625  00F72A  500D               	movf	printStringLCD@j+1,w,c
  4626  00F72C  0A80               	xorlw	128
  4627  00F72E  6E0B               	movwf	(??_printStringLCD+2)& (0+255),c
  4628  00F730  500A               	movf	??_printStringLCD+1,w,c
  4629  00F732  0A80               	xorlw	128
  4630  00F734  580B               	subwfb	(??_printStringLCD+2)& (0+255),w,c
  4631  00F736  B0D8               	btfsc	status,0,c
  4632  00F738  D039               	goto	l364
  4633                           
  4634                           ;helpers.c: 53: j++;
  4635  00F73A  4A0C               	infsnz	printStringLCD@j,f,c
  4636  00F73C  2A0D               	incf	printStringLCD@j+1,f,c
  4637                           
  4638                           ;helpers.c: 54: lcdInst(0xC0);;
  4639  00F73E  0EC0               	movlw	192
  4640  00F740  EC5B  F076         	call	_lcdInst
  4641                           
  4642                           ;helpers.c: 55: if (string[i] == 32 || string[i] == 10) continue;
  4643  00F744  5014               	movf	printStringLCD@i,w,c
  4644  00F746  2407               	addwf	printStringLCD@string,w,c
  4645  00F748  6E09               	movwf	??_printStringLCD& (0+255),c
  4646  00F74A  5015               	movf	printStringLCD@i+1,w,c
  4647  00F74C  2008               	addwfc	printStringLCD@string+1,w,c
  4648  00F74E  6E0A               	movwf	(??_printStringLCD+1)& (0+255),c
  4649  00F750  C009  FFF6         	movff	??_printStringLCD,tblptrl
  4650  00F754  C00A  FFF7         	movff	??_printStringLCD+1,tblptrh
  4651  00F758  0E00               	movlw	low (__mediumconst shr (0+16))
  4652  00F75A  6EF8               	movwf	tblptru,c
  4653  00F75C  0E0F               	movlw	(high __ramtop+-1)
  4654  00F75E  64F7               	cpfsgt	tblptrh,c
  4655  00F760  D003               	bra	u1417
  4656  00F762  0008               	tblrd		*
  4657  00F764  50F5               	movf	tablat,w,c
  4658  00F766  D005               	bra	u1410
  4659  00F768                     u1417:
  4660  00F768  CFF6 FFE9          	movff	tblptrl,fsr0l
  4661  00F76C  CFF7 FFEA          	movff	tblptrh,fsr0h
  4662  00F770  50EF               	movf	indf0,w,c
  4663  00F772                     u1410:
  4664  00F772  0A20               	xorlw	32
  4665  00F774  B4D8               	btfsc	status,2,c
  4666  00F776  D033               	goto	l367
  4667  00F778  5014               	movf	printStringLCD@i,w,c
  4668  00F77A  2407               	addwf	printStringLCD@string,w,c
  4669  00F77C  6E09               	movwf	??_printStringLCD& (0+255),c
  4670  00F77E  5015               	movf	printStringLCD@i+1,w,c
  4671  00F780  2008               	addwfc	printStringLCD@string+1,w,c
  4672  00F782  6E0A               	movwf	(??_printStringLCD+1)& (0+255),c
  4673  00F784  C009  FFF6         	movff	??_printStringLCD,tblptrl
  4674  00F788  C00A  FFF7         	movff	??_printStringLCD+1,tblptrh
  4675  00F78C  0E00               	movlw	low (__mediumconst shr (0+16))
  4676  00F78E  6EF8               	movwf	tblptru,c
  4677  00F790  0E0F               	movlw	(high __ramtop+-1)
  4678  00F792  64F7               	cpfsgt	tblptrh,c
  4679  00F794  D003               	bra	u1437
  4680  00F796  0008               	tblrd		*
  4681  00F798  50F5               	movf	tablat,w,c
  4682  00F79A  D005               	bra	u1430
  4683  00F79C                     u1437:
  4684  00F79C  CFF6 FFE9          	movff	tblptrl,fsr0l
  4685  00F7A0  CFF7 FFEA          	movff	tblptrh,fsr0h
  4686  00F7A4  50EF               	movf	indf0,w,c
  4687  00F7A6                     u1430:
  4688  00F7A6  0A0A               	xorlw	10
  4689  00F7A8  B4D8               	btfsc	status,2,c
  4690  00F7AA  D019               	goto	l367
  4691  00F7AC                     l364:
  4692  00F7AC                     l1889:
  4693                           
  4694                           ;helpers.c: 56: }
  4695                           ;helpers.c: 58: putch(string[i]);
  4696  00F7AC  5014               	movf	printStringLCD@i,w,c
  4697  00F7AE  2407               	addwf	printStringLCD@string,w,c
  4698  00F7B0  6E09               	movwf	??_printStringLCD& (0+255),c
  4699  00F7B2  5015               	movf	printStringLCD@i+1,w,c
  4700  00F7B4  2008               	addwfc	printStringLCD@string+1,w,c
  4701  00F7B6  6E0A               	movwf	(??_printStringLCD+1)& (0+255),c
  4702  00F7B8  C009  FFF6         	movff	??_printStringLCD,tblptrl
  4703  00F7BC  C00A  FFF7         	movff	??_printStringLCD+1,tblptrh
  4704  00F7C0  0E00               	movlw	low (__mediumconst shr (0+16))
  4705  00F7C2  6EF8               	movwf	tblptru,c
  4706  00F7C4  0E0F               	movlw	(high __ramtop+-1)
  4707  00F7C6  64F7               	cpfsgt	tblptrh,c
  4708  00F7C8  D003               	bra	u1457
  4709  00F7CA  0008               	tblrd		*
  4710  00F7CC  50F5               	movf	tablat,w,c
  4711  00F7CE  D005               	bra	u1450
  4712  00F7D0                     u1457:
  4713  00F7D0  CFF6 FFE9          	movff	tblptrl,fsr0l
  4714  00F7D4  CFF7 FFEA          	movff	tblptrh,fsr0h
  4715  00F7D8  50EF               	movf	indf0,w,c
  4716  00F7DA                     u1450:
  4717  00F7DA  EC65  F076         	call	_putch
  4718  00F7DE                     l367:
  4719  00F7DE  4A14               	infsnz	printStringLCD@i,f,c
  4720  00F7E0  2A15               	incf	printStringLCD@i+1,f,c
  4721  00F7E2  BE15               	btfsc	printStringLCD@i+1,7,c
  4722  00F7E4  D775               	goto	l360
  4723  00F7E6  5015               	movf	printStringLCD@i+1,w,c
  4724  00F7E8  E101               	bnz	l368
  4725  00F7EA  D76C               	goto	L7
  4726  00F7EC                     l368:
  4727  00F7EC  0012               	return		;funcret
  4728  00F7EE                     __end_of_printStringLCD:
  4729                           	opt stack 0
  4730                           tblptru	equ	0xFF8
  4731                           tblptrh	equ	0xFF7
  4732                           tblptrl	equ	0xFF6
  4733                           tablat	equ	0xFF5
  4734                           prodh	equ	0xFF4
  4735                           prodl	equ	0xFF3
  4736                           indf0	equ	0xFEF
  4737                           postinc0	equ	0xFEE
  4738                           fsr0h	equ	0xFEA
  4739                           fsr0l	equ	0xFE9
  4740                           wreg	equ	0xFE8
  4741                           postdec1	equ	0xFE5
  4742                           fsr1l	equ	0xFE1
  4743                           indf2	equ	0xFDF
  4744                           postinc2	equ	0xFDE
  4745                           postdec2	equ	0xFDD
  4746                           fsr2h	equ	0xFDA
  4747                           fsr2l	equ	0xFD9
  4748                           status	equ	0xFD8
  4749                           
  4750 ;; *************** function _putch *****************
  4751 ;; Defined at:
  4752 ;;		line 25 in file "lcd.c"
  4753 ;; Parameters:    Size  Location     Type
  4754 ;;  data            1    wreg     unsigned char 
  4755 ;; Auto vars:     Size  Location     Type
  4756 ;;  data            1    2[COMRAM] unsigned char 
  4757 ;; Return value:  Size  Location     Type
  4758 ;;                  1    wreg      void 
  4759 ;; Registers used:
  4760 ;;		wreg, status,2, status,0, cstack
  4761 ;; Tracked objects:
  4762 ;;		On entry : 0/0
  4763 ;;		On exit  : 0/0
  4764 ;;		Unchanged: 0/0
  4765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4767 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4769 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4770 ;;Total ram usage:        1 bytes
  4771 ;; Hardware stack levels used:    1
  4772 ;; Hardware stack levels required when called:    1
  4773 ;; This function calls:
  4774 ;;		_lcdNibble
  4775 ;; This function is called by:
  4776 ;;		_inputEntry
  4777 ;;		_mainMenu
  4778 ;;		_printStringLCD
  4779 ;;		_printf
  4780 ;; This function uses a non-reentrant model
  4781 ;;
  4782                           
  4783                           	psect	text19
  4784  00ECCA                     __ptext19:
  4785                           	opt stack 0
  4786  00ECCA                     _putch:
  4787                           	opt stack 26
  4788                           
  4789                           ;incstack = 0
  4790                           ;putch@data stored from wreg
  4791  00ECCA  6E03               	movwf	putch@data,c
  4792                           
  4793                           ;lcd.c: 33: LATDbits.LATD2 = 1;
  4794  00ECCC  848C               	bsf	3980,2,c	;volatile
  4795                           
  4796                           ;lcd.c: 34: lcdNibble(data);
  4797  00ECCE  5003               	movf	putch@data,w,c
  4798  00ECD0  EC89  F078         	call	_lcdNibble
  4799                           
  4800                           ;lcd.c: 35: _delay((unsigned long)((100)*(40000000/4000000.0)));
  4801  00ECD4  0EC8               	movlw	200
  4802  00ECD6                     u2407:
  4803  00ECD6  D000               	nop2	
  4804  00ECD8  2EE8               	decfsz	wreg,f,c
  4805  00ECDA  D7FD               	bra	u2407
  4806  00ECDC  0012               	return		;funcret
  4807  00ECDE                     __end_of_putch:
  4808                           	opt stack 0
  4809                           tblptru	equ	0xFF8
  4810                           tblptrh	equ	0xFF7
  4811                           tblptrl	equ	0xFF6
  4812                           tablat	equ	0xFF5
  4813                           prodh	equ	0xFF4
  4814                           prodl	equ	0xFF3
  4815                           indf0	equ	0xFEF
  4816                           postinc0	equ	0xFEE
  4817                           fsr0h	equ	0xFEA
  4818                           fsr0l	equ	0xFE9
  4819                           wreg	equ	0xFE8
  4820                           postdec1	equ	0xFE5
  4821                           fsr1l	equ	0xFE1
  4822                           indf2	equ	0xFDF
  4823                           postinc2	equ	0xFDE
  4824                           postdec2	equ	0xFDD
  4825                           fsr2h	equ	0xFDA
  4826                           fsr2l	equ	0xFD9
  4827                           status	equ	0xFD8
  4828                           
  4829 ;; *************** function _pollKeypad *****************
  4830 ;; Defined at:
  4831 ;;		line 68 in file "helpers.c"
  4832 ;; Parameters:    Size  Location     Type
  4833 ;;		None
  4834 ;; Auto vars:     Size  Location     Type
  4835 ;;  keypress        1    0[COMRAM] unsigned char 
  4836 ;; Return value:  Size  Location     Type
  4837 ;;                  1    wreg      unsigned char 
  4838 ;; Registers used:
  4839 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4840 ;; Tracked objects:
  4841 ;;		On entry : 0/0
  4842 ;;		On exit  : 0/0
  4843 ;;		Unchanged: 0/0
  4844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4846 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4848 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4849 ;;Total ram usage:        1 bytes
  4850 ;; Hardware stack levels used:    1
  4851 ;; This function calls:
  4852 ;;		Nothing
  4853 ;; This function is called by:
  4854 ;;		_inputEntry
  4855 ;;		_hibernate
  4856 ;;		_viewLogs
  4857 ;;		_mainMenu
  4858 ;; This function uses a non-reentrant model
  4859 ;;
  4860                           
  4861                           	psect	text20
  4862  00ED6A                     __ptext20:
  4863                           	opt stack 0
  4864  00ED6A                     _pollKeypad:
  4865                           	opt stack 28
  4866                           
  4867                           ;helpers.c: 70: while (PORTBbits.RB1 == 0) {continue;}
  4868                           
  4869                           ;incstack = 0
  4870  00ED6A  A281               	btfss	3969,1,c	;volatile
  4871  00ED6C  D7FE               	goto	_pollKeypad
  4872                           
  4873                           ;helpers.c: 73: unsigned char keypress = (unsigned char)(PORTB & 0xF0) >> 4;
  4874  00ED6E  3881               	swapf	3969,w,c	;volatile
  4875  00ED70  0B0F               	andlw	15
  4876  00ED72  0B0F               	andlw	15
  4877  00ED74  6E01               	movwf	pollKeypad@keypress,c
  4878  00ED76  B281               	btfsc	3969,1,c	;volatile
  4879  00ED78  D7FE               	goto	l378
  4880                           
  4881                           ;helpers.c: 78: __nop();
  4882  00ED7A  F000               	nop	
  4883                           
  4884                           ;helpers.c: 80: return keypadChars[keypress];
  4885  00ED7C  5001               	movf	pollKeypad@keypress,w,c
  4886  00ED7E  0D01               	mullw	1
  4887  00ED80  0EE5               	movlw	low _keypadChars
  4888  00ED82  24F3               	addwf	prodl,w,c
  4889  00ED84  6EF6               	movwf	tblptrl,c
  4890  00ED86  0EFD               	movlw	high _keypadChars
  4891  00ED88  20F4               	addwfc	prodh,w,c
  4892  00ED8A  6EF7               	movwf	tblptrh,c
  4893  00ED8C                     	if	1	;There are 3 active tblptr bytes
  4894  00ED8C  6AF8               	clrf	tblptru,c
  4895  00ED8E  0E00               	movlw	low (__mediumconst shr (0+16))
  4896  00ED90  22F8               	addwfc	tblptru,f,c
  4897  00ED92                     	endif
  4898  00ED92  0008               	tblrd		*
  4899  00ED94  50F5               	movf	tablat,w,c
  4900  00ED96  0012               	return	
  4901  00ED98                     __end_of_pollKeypad:
  4902                           	opt stack 0
  4903                           tblptru	equ	0xFF8
  4904                           tblptrh	equ	0xFF7
  4905                           tblptrl	equ	0xFF6
  4906                           tablat	equ	0xFF5
  4907                           prodh	equ	0xFF4
  4908                           prodl	equ	0xFF3
  4909                           indf0	equ	0xFEF
  4910                           postinc0	equ	0xFEE
  4911                           fsr0h	equ	0xFEA
  4912                           fsr0l	equ	0xFE9
  4913                           wreg	equ	0xFE8
  4914                           postdec1	equ	0xFE5
  4915                           fsr1l	equ	0xFE1
  4916                           indf2	equ	0xFDF
  4917                           postinc2	equ	0xFDE
  4918                           postdec2	equ	0xFDD
  4919                           fsr2h	equ	0xFDA
  4920                           fsr2l	equ	0xFD9
  4921                           status	equ	0xFD8
  4922                           
  4923 ;; *************** function _initLCD *****************
  4924 ;; Defined at:
  4925 ;;		line 61 in file "lcd.c"
  4926 ;; Parameters:    Size  Location     Type
  4927 ;;		None
  4928 ;; Auto vars:     Size  Location     Type
  4929 ;;		None
  4930 ;; Return value:  Size  Location     Type
  4931 ;;                  1    wreg      void 
  4932 ;; Registers used:
  4933 ;;		wreg, status,2, status,0, cstack
  4934 ;; Tracked objects:
  4935 ;;		On entry : 0/0
  4936 ;;		On exit  : 0/0
  4937 ;;		Unchanged: 0/0
  4938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4941 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4942 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4943 ;;Total ram usage:        1 bytes
  4944 ;; Hardware stack levels used:    1
  4945 ;; Hardware stack levels required when called:    2
  4946 ;; This function calls:
  4947 ;;		_lcdInst
  4948 ;; This function is called by:
  4949 ;;		_main
  4950 ;; This function uses a non-reentrant model
  4951 ;;
  4952                           
  4953                           	psect	text21
  4954  00EE86                     __ptext21:
  4955                           	opt stack 0
  4956  00EE86                     _initLCD:
  4957                           	opt stack 28
  4958                           
  4959                           ;lcd.c: 69: _delay((unsigned long)((15)*(40000000/4000.0)));
  4960                           
  4961                           ;incstack = 0
  4962  00EE86  0EC3               	movlw	195
  4963  00EE88  6E04               	movwf	??_initLCD& (0+255),c
  4964  00EE8A  0ECD               	movlw	205
  4965  00EE8C                     u2417:
  4966  00EE8C  2EE8               	decfsz	wreg,f,c
  4967  00EE8E  D7FE               	bra	u2417
  4968  00EE90  2E04               	decfsz	??_initLCD& (0+255),f,c
  4969  00EE92  D7FC               	bra	u2417
  4970  00EE94  F000               	nop	
  4971                           
  4972                           ;lcd.c: 70: lcdInst(0b00110011);
  4973  00EE96  0E33               	movlw	51
  4974  00EE98  EC5B  F076         	call	_lcdInst
  4975                           
  4976                           ;lcd.c: 71: lcdInst(0b00110010);
  4977  00EE9C  0E32               	movlw	50
  4978  00EE9E  EC5B  F076         	call	_lcdInst
  4979                           
  4980                           ;lcd.c: 72: lcdInst(0b00101000);
  4981  00EEA2  0E28               	movlw	40
  4982  00EEA4  EC5B  F076         	call	_lcdInst
  4983                           
  4984                           ;lcd.c: 73: lcdInst(0b00001111);
  4985  00EEA8  0E0F               	movlw	15
  4986  00EEAA  EC5B  F076         	call	_lcdInst
  4987                           
  4988                           ;lcd.c: 74: lcdInst(0b00000110);
  4989  00EEAE  0E06               	movlw	6
  4990  00EEB0  EC5B  F076         	call	_lcdInst
  4991                           
  4992                           ;lcd.c: 75: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4993  00EEB4  0E01               	movlw	1
  4994  00EEB6  EC5B  F076         	call	_lcdInst
  4995  00EEBA  0EC3               	movlw	195
  4996  00EEBC  6E04               	movwf	??_initLCD& (0+255),c
  4997  00EEBE  0ECD               	movlw	205
  4998  00EEC0                     u2427:
  4999  00EEC0  2EE8               	decfsz	wreg,f,c
  5000  00EEC2  D7FE               	bra	u2427
  5001  00EEC4  2E04               	decfsz	??_initLCD& (0+255),f,c
  5002  00EEC6  D7FC               	bra	u2427
  5003  00EEC8  F000               	nop	
  5004                           
  5005                           ;lcd.c: 78: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  5006  00EECA  0E0F               	movlw	15
  5007  00EECC  EC5B  F076         	call	_lcdInst
  5008  00EED0  0012               	return		;funcret
  5009  00EED2                     __end_of_initLCD:
  5010                           	opt stack 0
  5011                           tblptru	equ	0xFF8
  5012                           tblptrh	equ	0xFF7
  5013                           tblptrl	equ	0xFF6
  5014                           tablat	equ	0xFF5
  5015                           prodh	equ	0xFF4
  5016                           prodl	equ	0xFF3
  5017                           indf0	equ	0xFEF
  5018                           postinc0	equ	0xFEE
  5019                           fsr0h	equ	0xFEA
  5020                           fsr0l	equ	0xFE9
  5021                           wreg	equ	0xFE8
  5022                           postdec1	equ	0xFE5
  5023                           fsr1l	equ	0xFE1
  5024                           indf2	equ	0xFDF
  5025                           postinc2	equ	0xFDE
  5026                           postdec2	equ	0xFDD
  5027                           fsr2h	equ	0xFDA
  5028                           fsr2l	equ	0xFD9
  5029                           status	equ	0xFD8
  5030                           
  5031 ;; *************** function _lcdInst *****************
  5032 ;; Defined at:
  5033 ;;		line 12 in file "lcd.c"
  5034 ;; Parameters:    Size  Location     Type
  5035 ;;  data            1    wreg     unsigned char 
  5036 ;; Auto vars:     Size  Location     Type
  5037 ;;  data            1    2[COMRAM] unsigned char 
  5038 ;; Return value:  Size  Location     Type
  5039 ;;                  1    wreg      void 
  5040 ;; Registers used:
  5041 ;;		wreg, status,2, status,0, cstack
  5042 ;; Tracked objects:
  5043 ;;		On entry : 0/0
  5044 ;;		On exit  : 0/0
  5045 ;;		Unchanged: 0/0
  5046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5048 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5050 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5051 ;;Total ram usage:        1 bytes
  5052 ;; Hardware stack levels used:    1
  5053 ;; Hardware stack levels required when called:    1
  5054 ;; This function calls:
  5055 ;;		_lcdNibble
  5056 ;; This function is called by:
  5057 ;;		_inputEntry
  5058 ;;		_main
  5059 ;;		_initLCD
  5060 ;;		_lcd_set_cursor
  5061 ;;		_lcd_shift_cursor
  5062 ;;		_mainMenu
  5063 ;;		_printStringLCD
  5064 ;;		_lcd_shift_display
  5065 ;; This function uses a non-reentrant model
  5066 ;;
  5067                           
  5068                           	psect	text22
  5069  00ECB6                     __ptext22:
  5070                           	opt stack 0
  5071  00ECB6                     _lcdInst:
  5072                           	opt stack 26
  5073                           
  5074                           ;incstack = 0
  5075                           ;lcdInst@data stored from wreg
  5076  00ECB6  6E03               	movwf	lcdInst@data,c
  5077                           
  5078                           ;lcd.c: 20: LATDbits.LATD2 = 0;
  5079  00ECB8  948C               	bcf	3980,2,c	;volatile
  5080                           
  5081                           ;lcd.c: 21: lcdNibble(data);
  5082  00ECBA  5003               	movf	lcdInst@data,w,c
  5083  00ECBC  EC89  F078         	call	_lcdNibble
  5084                           
  5085                           ;lcd.c: 22: _delay((unsigned long)((100)*(40000000/4000000.0)));
  5086  00ECC0  0EC8               	movlw	200
  5087  00ECC2                     u2437:
  5088  00ECC2  D000               	nop2	
  5089  00ECC4  2EE8               	decfsz	wreg,f,c
  5090  00ECC6  D7FD               	bra	u2437
  5091  00ECC8  0012               	return		;funcret
  5092  00ECCA                     __end_of_lcdInst:
  5093                           	opt stack 0
  5094                           tblptru	equ	0xFF8
  5095                           tblptrh	equ	0xFF7
  5096                           tblptrl	equ	0xFF6
  5097                           tablat	equ	0xFF5
  5098                           prodh	equ	0xFF4
  5099                           prodl	equ	0xFF3
  5100                           indf0	equ	0xFEF
  5101                           postinc0	equ	0xFEE
  5102                           fsr0h	equ	0xFEA
  5103                           fsr0l	equ	0xFE9
  5104                           wreg	equ	0xFE8
  5105                           postdec1	equ	0xFE5
  5106                           fsr1l	equ	0xFE1
  5107                           indf2	equ	0xFDF
  5108                           postinc2	equ	0xFDE
  5109                           postdec2	equ	0xFDD
  5110                           fsr2h	equ	0xFDA
  5111                           fsr2l	equ	0xFD9
  5112                           status	equ	0xFD8
  5113                           
  5114 ;; *************** function _lcdNibble *****************
  5115 ;; Defined at:
  5116 ;;		line 38 in file "lcd.c"
  5117 ;; Parameters:    Size  Location     Type
  5118 ;;  data            1    wreg     unsigned char 
  5119 ;; Auto vars:     Size  Location     Type
  5120 ;;  data            1    1[COMRAM] unsigned char 
  5121 ;;  temp            1    0[COMRAM] unsigned char 
  5122 ;; Return value:  Size  Location     Type
  5123 ;;                  1    wreg      void 
  5124 ;; Registers used:
  5125 ;;		wreg, status,2, status,0
  5126 ;; Tracked objects:
  5127 ;;		On entry : 0/0
  5128 ;;		On exit  : 0/0
  5129 ;;		Unchanged: 0/0
  5130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5132 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5134 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5135 ;;Total ram usage:        2 bytes
  5136 ;; Hardware stack levels used:    1
  5137 ;; This function calls:
  5138 ;;		Nothing
  5139 ;; This function is called by:
  5140 ;;		_lcdInst
  5141 ;;		_putch
  5142 ;; This function uses a non-reentrant model
  5143 ;;
  5144                           
  5145                           	psect	text23
  5146  00F112                     __ptext23:
  5147                           	opt stack 0
  5148  00F112                     _lcdNibble:
  5149                           	opt stack 26
  5150                           
  5151                           ;incstack = 0
  5152                           ;lcdNibble@data stored from wreg
  5153  00F112  6E02               	movwf	lcdNibble@data,c
  5154                           
  5155                           ;lcd.c: 46: char temp = (unsigned char) (data & 0xF0);
  5156  00F114  5002               	movf	lcdNibble@data,w,c
  5157  00F116  0BF0               	andlw	240
  5158  00F118  6E01               	movwf	lcdNibble@temp,c
  5159                           
  5160                           ;lcd.c: 47: LATD = (unsigned char) (LATD & 0x0F);
  5161  00F11A  508C               	movf	3980,w,c	;volatile
  5162  00F11C  0B0F               	andlw	15
  5163  00F11E  6E8C               	movwf	3980,c	;volatile
  5164                           
  5165                           ;lcd.c: 48: LATD = (unsigned char) (temp | LATD);
  5166  00F120  5001               	movf	lcdNibble@temp,w,c
  5167  00F122  108C               	iorwf	3980,w,c	;volatile
  5168  00F124  6E8C               	movwf	3980,c	;volatile
  5169                           
  5170                           ;lcd.c: 50: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  5171  00F126  0E00               	movlw	0
  5172  00F128  BEF2               	btfsc	intcon,7,c	;volatile
  5173  00F12A  0E01               	movlw	1
  5174  00F12C  6E6B               	movwf	_LCDinterruptState,c
  5175  00F12E  9EF2               	bcf	intcon,7,c	;volatile
  5176  00F130  868C               	bsf	3980,3,c	;volatile
  5177  00F132  0E53               	movlw	83
  5178  00F134                     u2447:
  5179  00F134  2EE8               	decfsz	wreg,f,c
  5180  00F136  D7FE               	bra	u2447
  5181  00F138  F000               	nop	
  5182  00F13A  968C               	bcf	3980,3,c	;volatile
  5183  00F13C  0EC8               	movlw	200
  5184  00F13E                     u2457:
  5185  00F13E  D000               	nop2	
  5186  00F140  2EE8               	decfsz	wreg,f,c
  5187  00F142  D7FD               	bra	u2457
  5188  00F144  B06B               	btfsc	_LCDinterruptState,0,c
  5189  00F146  D002               	bra	u1205
  5190  00F148  9EF2               	bcf	intcon,7,c	;volatile
  5191  00F14A  D001               	bra	u1206
  5192  00F14C                     u1205:
  5193  00F14C  8EF2               	bsf	intcon,7,c	;volatile
  5194  00F14E                     u1206:
  5195                           
  5196                           ;lcd.c: 53: data = (unsigned char) (data << 4);
  5197  00F14E  3802               	swapf	lcdNibble@data,w,c
  5198  00F150  0BF0               	andlw	240
  5199  00F152  6E02               	movwf	lcdNibble@data,c
  5200                           
  5201                           ;lcd.c: 54: temp = (unsigned char) (data & 0xF0);
  5202  00F154  5002               	movf	lcdNibble@data,w,c
  5203  00F156  0BF0               	andlw	240
  5204  00F158  6E01               	movwf	lcdNibble@temp,c
  5205                           
  5206                           ;lcd.c: 55: LATD = (unsigned char) (LATD & 0x0F);
  5207  00F15A  508C               	movf	3980,w,c	;volatile
  5208  00F15C  0B0F               	andlw	15
  5209  00F15E  6E8C               	movwf	3980,c	;volatile
  5210                           
  5211                           ;lcd.c: 56: LATD = (unsigned char) (temp | LATD);
  5212  00F160  5001               	movf	lcdNibble@temp,w,c
  5213  00F162  108C               	iorwf	3980,w,c	;volatile
  5214  00F164  6E8C               	movwf	3980,c	;volatile
  5215                           
  5216                           ;lcd.c: 58: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  5217  00F166  0E00               	movlw	0
  5218  00F168  BEF2               	btfsc	intcon,7,c	;volatile
  5219  00F16A  0E01               	movlw	1
  5220  00F16C  6E6B               	movwf	_LCDinterruptState,c
  5221  00F16E  9EF2               	bcf	intcon,7,c	;volatile
  5222  00F170  868C               	bsf	3980,3,c	;volatile
  5223  00F172  0E53               	movlw	83
  5224  00F174                     u2467:
  5225  00F174  2EE8               	decfsz	wreg,f,c
  5226  00F176  D7FE               	bra	u2467
  5227  00F178  F000               	nop	
  5228  00F17A  968C               	bcf	3980,3,c	;volatile
  5229  00F17C  0EC8               	movlw	200
  5230  00F17E                     u2477:
  5231  00F17E  D000               	nop2	
  5232  00F180  2EE8               	decfsz	wreg,f,c
  5233  00F182  D7FD               	bra	u2477
  5234  00F184  B06B               	btfsc	_LCDinterruptState,0,c
  5235  00F186  D002               	bra	u1215
  5236  00F188  9EF2               	bcf	intcon,7,c	;volatile
  5237  00F18A  D001               	bra	u1216
  5238  00F18C                     u1215:
  5239  00F18C  8EF2               	bsf	intcon,7,c	;volatile
  5240  00F18E                     u1216:
  5241  00F18E  0012               	return		;funcret
  5242  00F190                     __end_of_lcdNibble:
  5243                           	opt stack 0
  5244                           tblptru	equ	0xFF8
  5245                           tblptrh	equ	0xFF7
  5246                           tblptrl	equ	0xFF6
  5247                           tablat	equ	0xFF5
  5248                           prodh	equ	0xFF4
  5249                           prodl	equ	0xFF3
  5250                           intcon	equ	0xFF2
  5251                           indf0	equ	0xFEF
  5252                           postinc0	equ	0xFEE
  5253                           fsr0h	equ	0xFEA
  5254                           fsr0l	equ	0xFE9
  5255                           wreg	equ	0xFE8
  5256                           postdec1	equ	0xFE5
  5257                           fsr1l	equ	0xFE1
  5258                           indf2	equ	0xFDF
  5259                           postinc2	equ	0xFDE
  5260                           postdec2	equ	0xFDD
  5261                           fsr2h	equ	0xFDA
  5262                           fsr2l	equ	0xFD9
  5263                           status	equ	0xFD8
  5264                           
  5265 ;; *************** function _I2C_Master_Init *****************
  5266 ;; Defined at:
  5267 ;;		line 14 in file "I2C.c"
  5268 ;; Parameters:    Size  Location     Type
  5269 ;;  clockFreq       4   13[COMRAM] const unsigned long 
  5270 ;; Auto vars:     Size  Location     Type
  5271 ;;		None
  5272 ;; Return value:  Size  Location     Type
  5273 ;;                  1    wreg      void 
  5274 ;; Registers used:
  5275 ;;		wreg, status,2, status,0, cstack
  5276 ;; Tracked objects:
  5277 ;;		On entry : 0/0
  5278 ;;		On exit  : 0/0
  5279 ;;		Unchanged: 0/0
  5280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5281 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5283 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5284 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5285 ;;Total ram usage:        8 bytes
  5286 ;; Hardware stack levels used:    1
  5287 ;; Hardware stack levels required when called:    1
  5288 ;; This function calls:
  5289 ;;		___lldiv
  5290 ;; This function is called by:
  5291 ;;		_main
  5292 ;; This function uses a non-reentrant model
  5293 ;;
  5294                           
  5295                           	psect	text24
  5296  00EF70                     __ptext24:
  5297                           	opt stack 0
  5298  00EF70                     _I2C_Master_Init:
  5299                           	opt stack 29
  5300                           
  5301                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  5302                           
  5303                           ;incstack = 0
  5304  00EF70  9AC6               	bcf	4038,5,c	;volatile
  5305                           
  5306                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  5307  00EF72  8694               	bsf	3988,3,c	;volatile
  5308                           
  5309                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  5310  00EF74  8894               	bsf	3988,4,c	;volatile
  5311                           
  5312                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  5313  00EF76  0E80               	movlw	128
  5314  00EF78  6EC7               	movwf	4039,c	;volatile
  5315                           
  5316                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  5317  00EF7A  0E28               	movlw	40
  5318  00EF7C  6EC6               	movwf	4038,c	;volatile
  5319                           
  5320                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  5321  00EF7E  0E00               	movlw	0
  5322  00EF80  6EC5               	movwf	4037,c	;volatile
  5323                           
  5324                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
  5325  00EF82  0E00               	movlw	0
  5326  00EF84  6E01               	movwf	___lldiv@dividend,c
  5327  00EF86  0E5A               	movlw	90
  5328  00EF88  6E02               	movwf	___lldiv@dividend+1,c
  5329  00EF8A  0E62               	movlw	98
  5330  00EF8C  6E03               	movwf	___lldiv@dividend+2,c
  5331  00EF8E  0E02               	movlw	2
  5332  00EF90  6E04               	movwf	___lldiv@dividend+3,c
  5333  00EF92  C00E  F012         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  5334  00EF96  C00F  F013         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  5335  00EF9A  C010  F014         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  5336  00EF9E  C011  F015         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  5337  00EFA2  0E02               	movlw	2
  5338  00EFA4                     u2165:
  5339  00EFA4  90D8               	bcf	status,0,c
  5340  00EFA6  3612               	rlcf	??_I2C_Master_Init,f,c
  5341  00EFA8  3613               	rlcf	??_I2C_Master_Init+1,f,c
  5342  00EFAA  3614               	rlcf	??_I2C_Master_Init+2,f,c
  5343  00EFAC  3615               	rlcf	??_I2C_Master_Init+3,f,c
  5344  00EFAE  2EE8               	decfsz	wreg,f,c
  5345  00EFB0  D7F9               	goto	u2165
  5346  00EFB2  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  5347  00EFB6  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5348  00EFBA  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5349  00EFBE  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5350  00EFC2  ECC8  F078         	call	___lldiv	;wreg free
  5351  00EFC6  0401               	decf	?___lldiv,w,c
  5352  00EFC8  6EC8               	movwf	4040,c	;volatile
  5353  00EFCA  0012               	return		;funcret
  5354  00EFCC                     __end_of_I2C_Master_Init:
  5355                           	opt stack 0
  5356                           tblptru	equ	0xFF8
  5357                           tblptrh	equ	0xFF7
  5358                           tblptrl	equ	0xFF6
  5359                           tablat	equ	0xFF5
  5360                           prodh	equ	0xFF4
  5361                           prodl	equ	0xFF3
  5362                           intcon	equ	0xFF2
  5363                           indf0	equ	0xFEF
  5364                           postinc0	equ	0xFEE
  5365                           fsr0h	equ	0xFEA
  5366                           fsr0l	equ	0xFE9
  5367                           wreg	equ	0xFE8
  5368                           postdec1	equ	0xFE5
  5369                           fsr1l	equ	0xFE1
  5370                           indf2	equ	0xFDF
  5371                           postinc2	equ	0xFDE
  5372                           postdec2	equ	0xFDD
  5373                           fsr2h	equ	0xFDA
  5374                           fsr2l	equ	0xFD9
  5375                           status	equ	0xFD8
  5376                           
  5377 ;; *************** function ___lldiv *****************
  5378 ;; Defined at:
  5379 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  5380 ;; Parameters:    Size  Location     Type
  5381 ;;  dividend        4    0[COMRAM] unsigned long 
  5382 ;;  divisor         4    4[COMRAM] unsigned long 
  5383 ;; Auto vars:     Size  Location     Type
  5384 ;;  quotient        4    8[COMRAM] unsigned long 
  5385 ;;  counter         1   12[COMRAM] unsigned char 
  5386 ;; Return value:  Size  Location     Type
  5387 ;;                  4    0[COMRAM] unsigned long 
  5388 ;; Registers used:
  5389 ;;		wreg, status,2, status,0
  5390 ;; Tracked objects:
  5391 ;;		On entry : 0/0
  5392 ;;		On exit  : 0/0
  5393 ;;		Unchanged: 0/0
  5394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5395 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5396 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5398 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5399 ;;Total ram usage:       13 bytes
  5400 ;; Hardware stack levels used:    1
  5401 ;; This function calls:
  5402 ;;		Nothing
  5403 ;; This function is called by:
  5404 ;;		_I2C_Master_Init
  5405 ;; This function uses a non-reentrant model
  5406 ;;
  5407                           
  5408                           	psect	text25
  5409  00F190                     __ptext25:
  5410                           	opt stack 0
  5411  00F190                     ___lldiv:
  5412                           	opt stack 29
  5413                           
  5414                           ;incstack = 0
  5415  00F190  0E00               	movlw	0
  5416  00F192  6E09               	movwf	___lldiv@quotient,c
  5417  00F194  0E00               	movlw	0
  5418  00F196  6E0A               	movwf	___lldiv@quotient+1,c
  5419  00F198  0E00               	movlw	0
  5420  00F19A  6E0B               	movwf	___lldiv@quotient+2,c
  5421  00F19C  0E00               	movlw	0
  5422  00F19E  6E0C               	movwf	___lldiv@quotient+3,c
  5423  00F1A0  5005               	movf	___lldiv@divisor,w,c
  5424  00F1A2  1006               	iorwf	___lldiv@divisor+1,w,c
  5425  00F1A4  1007               	iorwf	___lldiv@divisor+2,w,c
  5426  00F1A6  1008               	iorwf	___lldiv@divisor+3,w,c
  5427  00F1A8  B4D8               	btfsc	status,2,c
  5428  00F1AA  D02A               	goto	l777
  5429  00F1AC  0E01               	movlw	1
  5430  00F1AE  6E0D               	movwf	___lldiv@counter,c
  5431  00F1B0  D006               	goto	l772
  5432  00F1B2  90D8               	bcf	status,0,c
  5433  00F1B4  3605               	rlcf	___lldiv@divisor,f,c
  5434  00F1B6  3606               	rlcf	___lldiv@divisor+1,f,c
  5435  00F1B8  3607               	rlcf	___lldiv@divisor+2,f,c
  5436  00F1BA  3608               	rlcf	___lldiv@divisor+3,f,c
  5437  00F1BC  2A0D               	incf	___lldiv@counter,f,c
  5438  00F1BE                     l772:
  5439  00F1BE  AE08               	btfss	___lldiv@divisor+3,7,c
  5440  00F1C0  D7F8               	goto	l773
  5441  00F1C2                     u2140:
  5442  00F1C2  90D8               	bcf	status,0,c
  5443  00F1C4  3609               	rlcf	___lldiv@quotient,f,c
  5444  00F1C6  360A               	rlcf	___lldiv@quotient+1,f,c
  5445  00F1C8  360B               	rlcf	___lldiv@quotient+2,f,c
  5446  00F1CA  360C               	rlcf	___lldiv@quotient+3,f,c
  5447  00F1CC  5005               	movf	___lldiv@divisor,w,c
  5448  00F1CE  5C01               	subwf	___lldiv@dividend,w,c
  5449  00F1D0  5006               	movf	___lldiv@divisor+1,w,c
  5450  00F1D2  5802               	subwfb	___lldiv@dividend+1,w,c
  5451  00F1D4  5007               	movf	___lldiv@divisor+2,w,c
  5452  00F1D6  5803               	subwfb	___lldiv@dividend+2,w,c
  5453  00F1D8  5008               	movf	___lldiv@divisor+3,w,c
  5454  00F1DA  5804               	subwfb	___lldiv@dividend+3,w,c
  5455  00F1DC  A0D8               	btfss	status,0,c
  5456  00F1DE  D009               	goto	l776
  5457  00F1E0  5005               	movf	___lldiv@divisor,w,c
  5458  00F1E2  5E01               	subwf	___lldiv@dividend,f,c
  5459  00F1E4  5006               	movf	___lldiv@divisor+1,w,c
  5460  00F1E6  5A02               	subwfb	___lldiv@dividend+1,f,c
  5461  00F1E8  5007               	movf	___lldiv@divisor+2,w,c
  5462  00F1EA  5A03               	subwfb	___lldiv@dividend+2,f,c
  5463  00F1EC  5008               	movf	___lldiv@divisor+3,w,c
  5464  00F1EE  5A04               	subwfb	___lldiv@dividend+3,f,c
  5465  00F1F0  8009               	bsf	___lldiv@quotient,0,c
  5466  00F1F2                     l776:
  5467  00F1F2  90D8               	bcf	status,0,c
  5468  00F1F4  3208               	rrcf	___lldiv@divisor+3,f,c
  5469  00F1F6  3207               	rrcf	___lldiv@divisor+2,f,c
  5470  00F1F8  3206               	rrcf	___lldiv@divisor+1,f,c
  5471  00F1FA  3205               	rrcf	___lldiv@divisor,f,c
  5472  00F1FC  2E0D               	decfsz	___lldiv@counter,f,c
  5473  00F1FE  D7E1               	goto	u2140
  5474  00F200                     l777:
  5475  00F200  C009  F001         	movff	___lldiv@quotient,?___lldiv
  5476  00F204  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  5477  00F208  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  5478  00F20C  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  5479  00F210  0012               	return		;funcret
  5480  00F212                     __end_of___lldiv:
  5481                           	opt stack 0
  5482                           tblptru	equ	0xFF8
  5483                           tblptrh	equ	0xFF7
  5484                           tblptrl	equ	0xFF6
  5485                           tablat	equ	0xFF5
  5486                           prodh	equ	0xFF4
  5487                           prodl	equ	0xFF3
  5488                           intcon	equ	0xFF2
  5489                           indf0	equ	0xFEF
  5490                           postinc0	equ	0xFEE
  5491                           fsr0h	equ	0xFEA
  5492                           fsr0l	equ	0xFE9
  5493                           wreg	equ	0xFE8
  5494                           postdec1	equ	0xFE5
  5495                           fsr1l	equ	0xFE1
  5496                           indf2	equ	0xFDF
  5497                           postinc2	equ	0xFDE
  5498                           postdec2	equ	0xFDD
  5499                           fsr2h	equ	0xFDA
  5500                           fsr2l	equ	0xFD9
  5501                           status	equ	0xFD8
  5502                           tblptru	equ	0xFF8
  5503                           tblptrh	equ	0xFF7
  5504                           tblptrl	equ	0xFF6
  5505                           tablat	equ	0xFF5
  5506                           prodh	equ	0xFF4
  5507                           prodl	equ	0xFF3
  5508                           intcon	equ	0xFF2
  5509                           indf0	equ	0xFEF
  5510                           postinc0	equ	0xFEE
  5511                           fsr0h	equ	0xFEA
  5512                           fsr0l	equ	0xFE9
  5513                           wreg	equ	0xFE8
  5514                           postdec1	equ	0xFE5
  5515                           fsr1l	equ	0xFE1
  5516                           indf2	equ	0xFDF
  5517                           postinc2	equ	0xFDE
  5518                           postdec2	equ	0xFDD
  5519                           fsr2h	equ	0xFDA
  5520                           fsr2l	equ	0xFD9
  5521                           status	equ	0xFD8
  5522                           
  5523                           	psect	rparam
  5524  0000                     tblptru	equ	0xFF8
  5525                           tblptrh	equ	0xFF7
  5526                           tblptrl	equ	0xFF6
  5527                           tablat	equ	0xFF5
  5528                           prodh	equ	0xFF4
  5529                           prodl	equ	0xFF3
  5530                           intcon	equ	0xFF2
  5531                           indf0	equ	0xFEF
  5532                           postinc0	equ	0xFEE
  5533                           fsr0h	equ	0xFEA
  5534                           fsr0l	equ	0xFE9
  5535                           wreg	equ	0xFE8
  5536                           postdec1	equ	0xFE5
  5537                           fsr1l	equ	0xFE1
  5538                           indf2	equ	0xFDF
  5539                           postinc2	equ	0xFDE
  5540                           postdec2	equ	0xFDD
  5541                           fsr2h	equ	0xFDA
  5542                           fsr2l	equ	0xFD9
  5543                           status	equ	0xFD8


Data Sizes:
    Strings     126
    Constant    495
    Data        107
    BSS         27
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    104     107
    BANK0           128      0      26
    BANK1           256      0     105
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 132
		 -> inputEntryQuestions(CODE[132]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 32
		 -> inputEntry@fastenerString(COMRAM[32]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 32
		 -> inputEntry@fastenerString(COMRAM[32]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_6(CODE[12]), STR_5(CODE[9]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 105
		 -> STR_7(CODE[7]), fSLookup(BANK1[105]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    I2C_Send@data	PTR unsigned char  size(2) Largest target is 25
		 -> STR_1(CODE[25]), 

    printErrorLCD@string	PTR unsigned char  size(2) Largest target is 224
		 -> errMsgs.tooManyFasteners(CODE[32]), errMsgs.badEntry(CODE[32]), errMsgs(CODE[224]), 

    printStringLCD@string	PTR unsigned char  size(2) Largest target is 224
		 -> STR_4(CODE[30]), STR_3(CODE[26]), STR_2(CODE[17]), inputEntry@fastenerString(COMRAM[32]), 
		 -> inputEntryQuestions(CODE[132]), errMsgs.tooManyFasteners(CODE[32]), errMsgs.badEntry(CODE[32]), errMsgs(CODE[224]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 32
		 -> inputEntry@fastenerString(COMRAM[32]), 


Critical Paths under _main in COMRAM

    _main->_mainMenu
    _mainMenu->_inputEntry
    _viewLogs->_printStringLCD
    _printf->___lwmod
    ___lwmod->___lwdiv
    _inputEntry->_printErrorLCD
    _strcpy->___wmul
    _printErrorLCD->_printStringLCD
    _lcd_set_cursor->_lcd_shift_cursor
    _lcd_shift_cursor->_lcdInst
    _I2C_Send->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _hibernate->_printStringLCD
    _printStringLCD->___wmul
    _putch->_lcdNibble
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   15483
                                            103 COMRAM     1     1      0
                    _I2C_Master_Init
                          _hibernate
                            _initLCD
                            _lcdInst
                           _mainMenu
 ---------------------------------------------------------------------------------
 (1) _mainMenu                                            10    10      0   13302
                                             93 COMRAM    10    10      0
                          _hibernate
                         _inputEntry
                            _lcdInst
                         _pollKeypad
                     _printStringLCD
                             _printf
                              _putch
                           _viewLogs
 ---------------------------------------------------------------------------------
 (2) _viewLogs                                             3     3      0    1499
                                             21 COMRAM     3     3      0
                         _pollKeypad
                     _printStringLCD
 ---------------------------------------------------------------------------------
 (2) _printf                                              24    16      8    1390
                                             12 COMRAM    18    10      8
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _inputEntry                                          70    70      0    6941
                                             25 COMRAM    68    68      0
                           _I2C_Send
                             ___wmul
                            _lcdInst
                     _lcd_set_cursor
                         _pollKeypad
                      _printErrorLCD
                     _printStringLCD
                              _putch
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _strcpy                                               6     2      4     227
                                              6 COMRAM     6     2      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _printErrorLCD                                        4     2      2    1703
                                             21 COMRAM     4     2      2
                     _printStringLCD
 ---------------------------------------------------------------------------------
 (3) _lcd_set_cursor                                       4     3      1     678
                                              6 COMRAM     4     3      1
                            _lcdInst
                   _lcd_shift_cursor
 ---------------------------------------------------------------------------------
 (4) _lcd_shift_cursor                                     3     2      1     301
                                              3 COMRAM     3     2      1
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     767
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _I2C_Send                                             7     5      2     362
                                              3 COMRAM     7     5      2
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Write                                     2     0      2     174
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _hibernate                                            6     6      0    1499
                                             21 COMRAM     6     6      0
                         _pollKeypad
                     _printStringLCD
 ---------------------------------------------------------------------------------
 (3) _printStringLCD                                      15    13      2    1453
                                              6 COMRAM    15    13      2
                             ___wmul (ARG)
                            _lcdInst
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _pollKeypad                                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (4) _lcdInst                                              1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNibble                                            2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     412
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _hibernate
     _pollKeypad
     _printStringLCD
       ___wmul (ARG)
       _lcdInst (ARG)
         _lcdNibble
       _putch (ARG)
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _mainMenu
     _hibernate
       _pollKeypad
       _printStringLCD
         ___wmul (ARG)
         _lcdInst (ARG)
           _lcdNibble
         _putch (ARG)
           _lcdNibble
     _inputEntry
       _I2C_Send
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       ___wmul
       _lcdInst
         _lcdNibble
       _lcd_set_cursor
         _lcdInst
           _lcdNibble
         _lcd_shift_cursor
           _lcdInst
             _lcdNibble
       _pollKeypad
       _printErrorLCD
         _printStringLCD
           ___wmul (ARG)
           _lcdInst (ARG)
             _lcdNibble
           _putch (ARG)
             _lcdNibble
       _printStringLCD
         ___wmul (ARG)
         _lcdInst (ARG)
           _lcdNibble
         _putch (ARG)
           _lcdNibble
       _putch
         _lcdNibble
       _strcpy
         ___wmul (ARG)
     _lcdInst
       _lcdNibble
     _pollKeypad
     _printStringLCD
       ___wmul (ARG)
       _lcdInst (ARG)
         _lcdNibble
       _putch (ARG)
         _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _lcdNibble
     _putch
       _lcdNibble
     _viewLogs
       _pollKeypad
       _printStringLCD
         ___wmul (ARG)
         _lcdInst (ARG)
           _lcdNibble
         _putch (ARG)
           _lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      69       7       41.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      1A       5       20.3%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     68      6B       1       84.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      EE      34        0.0%
DATA                 0      0      EE       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Feb 22 18:48:39 2018

                            l90 F856                              l91 F8EE                              l92 F8E0  
                            l95 FD86                              l96 F942                              l99 FD40  
           printErrorLCD@string 0016             ___wmul@multiplicand 0003                     __CFG_BORV$3 000000  
                  __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000  
                  __CFG_CP3$OFF 000000                             l101 F962                             l111 FA28  
                           l103 F9D2                             l120 FA7C                             l104 FA3A  
                           l113 FA34                             l130 FC0C                             l123 FAB0  
                           l115 FA6C                             l107 FA0C                             l132 FC7A  
                           l125 FBD0                             l109 FA1A                             l134 FD14  
                           l126 FBF4                             l310 F2B4                             l127 FBFC  
                           l311 F2CC                             l400 F42E                             l137 FD36  
                           l305 F21A                             l242 EE2A                             l306 F236  
                           l243 EE22                             l139 FD6A                             l307 F26E  
                           l412 F486                             l405 F45E                             l309 F368  
                           l406 F3B0                             l360 F6D0                             l416 F4CE  
                           l408 F404                             l417 F522                             l409 F3DA  
                           l354 F5AA                             l418 F4D4                             l291 EDD6  
                           l364 F7AC                             l357 F61A                             l358 F65E  
                           l367 F7DE                             l359 F6A6                             l383 F00C  
                           l368 F7EC                             l384 EFE6                             l378 ED76  
                           l298 ED06                             l830 EF66                             l398 F39A  
                           l399 F3AA                             l840 EE7C                             l825 EF3C  
                           l826 EF34                             l835 EE5A                             l772 F1BE  
                           l836 EE52                             l773 F1B2                             l829 EF5C  
                           l839 EE72                             l776 F1F2                             l777 F200  
                           l970 EDA2                             l969 EDAA                    __CFG_CPB$OFF 000000  
                  __CFG_CPD$OFF 000000                             prod 000FF3                             wreg 000FE8  
               ?_lcd_set_cursor 0007                    __CFG_LVP$OFF 000000                    __CFG_WDT$OFF 000000  
                          l2123 FA8C                            l2141 FBD0                            l2205 FD7E  
                          l2145 FBDE                            l2049 F8E0                            l2191 FD06  
                          l2263 F48A                            l2193 FD14                            l2177 FC6A  
                          l2187 FCC0                            l2357 F2B4                            l2359 F2BC  
                          l1909 ECE4                            l1867 F6B4                            l1889 F7AC  
                          STR_1 FFB8                            STR_2 FFD1                            STR_3 FF9E  
                          STR_4 FF80                            STR_5 FFEE                            STR_6 FFE2  
                          STR_7 FFF7                            u1205 F14C                            u1206 F14E  
                          u2110 F52A                            u2030 F3FC                            u1215 F18C  
                          u1216 F18E                            u1320 F696                            u1240 F5A8  
                          u2040 F426                            u1410 F772                            u1250 F5D8  
                          u2140 F1C2                            u2037 F3F2                            _LATA 000F89  
                          u1430 F7A6                            u1350 F6B4                            u1270 F60C  
                          _LATB 000F8A                            u1327 F68C                            u2047 F41C  
                          _LATC 000F8B                            u1360 F6CE                            _LATD 000F8C  
                          u1417 F768                            u1257 F5CE                            _LATE 000F8D  
                          u1450 F7DA                            u1370 F6FE                            u1290 F648  
                          u2090 F4BC                            u2307 F2EE                            u1620 F8C2  
                          u2165 EFA4                            u1437 F79C                            u1277 F602  
                          u2317 F354                            u1710 F9F8                            u1630 F8D2  
                          u2407 ECD6                            u2327 F7FA                            u1800 FA62  
                          u1560 EF40                            u2417 EE8C                            u1457 F7D0  
                          u1377 F6F4                            u1297 F63E                            u2337 F810  
                          u1650 F940                            u2427 EEC0                            u2347 F8A4  
                          u2267 F0E6                            u1900 FC04                            u2437 ECC2  
                          u2357 FC4C                            u2277 F0FC                            u1830 FAAE  
                          u1590 EE5E                            u2447 F134                            u2367 ED5A  
                          u2287 F2A8                            u1664 F952                            u2457 F13E  
                          u2377 EE12                            u1665 F94E                            u2297 F2D8  
                          u1930 FCC0                            u2467 F174                            u2387 F56E  
                          u1940 FCE4                            u2477 F17E                            u2397 F584  
                          u1950 FD06                            u1880 FBDE                            u1970 FD7E  
                          _main F09C    __end_of_assemblyStepEncoding FE15                            fsr0h 000FEA  
                          indf0 000FEF                            fsr2h 000FDA                            fsr0l 000FE9  
                          indf2 000FDF                            fsr1l 000FE1                            fsr2l 000FD9  
              __end_of_I2C_Send F032                            prodh 000FF4                            prodl 000FF3  
                          start 0000                   __CFG_IESO$OFF 000000                   __CFG_MCLRE$ON 000000  
                  ___param_bank 000000                __end_of_LCD_LEFT FE17                 ??_printErrorLCD 0018  
              ?_I2C_Master_Init 000E                ?_I2C_Master_Wait 0001                ?_I2C_Master_Stop 0001  
                         ?_main 0001                 __end_of___lldiv F212                 __end_of___lwdiv EF70  
               __end_of___lwmod EE86                           _PORTB 000F81                           _TRISA 000F92  
                         _TRISB 000F93                           _TRISC 000F94                           _TRISD 000F95  
                         _TRISE 000F96            printStringLCD@string 0007                 mainMenu@pressed 0064  
                 __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000  
                 __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000                 __end_of_lcdInst ECCA  
                __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000                  __CFG_EBTR1$OFF 000000  
                __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000                   __CFG_WRTB$OFF 000000  
                 __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000                 __end_of_errMsgs FEFC  
               __end_of_initLCD EED2                  __CFG_EBTRB$OFF 000000                 __end_of_dpowers FE10  
                         _putch ECCA                           tablat 000FF5               _LCDinterruptState 006B  
                         status 000FD8                 __initialization EED2                    __end_of_main F112  
             ?_lcd_shift_cursor 0004                  __CFG_OSC$HSPLL 000000               __end_of_LCD_RIGHT FE18  
                        ??_main 0068              ??_lcd_shift_cursor 0005                   __activetblptr 000003  
             ?_I2C_Master_Start 0001               ?_I2C_Master_Write 0002                       I2C_Send@i 0009  
            ??_I2C_Master_Start 0002              ??_I2C_Master_Write 0004                          ?_putch 0001  
                 inputEntry@sum 0053                          _SSPADD 000FC8                          _SSPBUF 000FC9  
                __CFG_XINST$OFF 000000                __end_of_mainMenu F390                          ___wmul ED1E  
                __CFG_STVREN$ON 000000                __end_of_nanoAddr FE16                       ??___lldiv 0009  
                     ??___lwdiv 0005                       ??___lwmod 000C                          _params 0080  
                        clear_0 EF10                ??_printStringLCD 0009                       ??_lcdInst 0003  
                        _printf F390                          _strcpy ED98                       ??_initLCD 0004  
          _assemblyStepEncoding FE10                    __pdataCOMRAM 0069                       ?_I2C_Send 0004  
                  __mediumconst FD90                __end_of_viewLogs ED1E                          tblptrh 000FF7  
                        tblptrl 000FF6                          tblptru 000FF8            __end_of_LCDMenuIcons FE06  
                    __accesstop 0080         __end_of__initialization EF18                 __CFG_PBADEN$OFF 000000  
                 ___rparam_used 000001                  __pcstackCOMRAM 0001                    __pidataBANK1 F033  
               viewLogs@pressed 0017                   __end_of_putch ECDE                ??_lcd_set_cursor 0008  
            __size_of_lcdNibble 007E                      ??_I2C_Send 0006                     inputEntry@i 005B  
            __size_of_hibernate 003A                         ??_putch 0003                      __pbssBANK0 0080  
           mainMenu@needToPrint 0062             _inputEntryQuestions FEFC                         ?___wmul 0001  
                       ?_printf 000D                    I2C_Send@data 0004                         ?_strcpy 0007  
                inputEntry@done 0040                  inputEntry@numB 004B                  inputEntry@numN 004D  
                inputEntry@numS 004F                  inputEntry@numW 0051                         _SSPCON1 000FC6  
                       _SSPCON2 000FC5                         _SSPSTAT 000FC7                       ?_mainMenu 0001  
             __end_of_lcdNibble F190                         __Hparam 0000                         __Lparam 0000  
             __end_of_hibernate EE04                       ?_viewLogs 0001                         ___lldiv F190  
               __size_of___wmul 0026                         ___lwdiv EF1E                         ___lwmod EE44  
                       __pcinit EED2                         __ramtop 1000           __end_of_printErrorLCD ED6A  
                       _lcdInst ECB6                         __ptext0 F09C                         __ptext1 F212  
                       __ptext2 ECFA                         __ptext3 F390                         __ptext4 EE44  
                       __ptext5 EF1E                         __ptext6 F7EE                         __ptext7 ED98  
                       __ptext8 ED44                         __ptext9 EE04                 __size_of_printf 01B6  
                       _errMsgs FE1C                 __size_of_strcpy 0032                         _initLCD EE86  
                       _dpowers FE06      printStringLCD@newlineIndex 0010                       _LCD_RIGHT FE17  
                    _inputEntry F7EE        __size_of_I2C_Master_Init 005C        __size_of_I2C_Master_Wait 0012  
      __size_of_I2C_Master_Stop 0008        printStringLCD@spaceIndex 000E                 printStringLCD@i 0014  
               printStringLCD@j 000C       __size_of_lcd_shift_cursor 001C            end_of_initialization EF18  
                    ??_mainMenu 005E           __end_of_LCD_SIZE_HORZ FE1A           __end_of_LCD_SIZE_VERT FE19  
      inputEntry@fastenerString 001E       __size_of_I2C_Master_Start 0008       __size_of_I2C_Master_Write 000A  
               ___lldiv@divisor 0005                 ___lldiv@counter 000D                      _pollKeypad ED6A  
                       printf@c 001E                         printf@f 000D                         postdec1 000FE5  
                       postdec2 000FDD                      ??_viewLogs 0016                         postinc0 000FEE  
                       postinc2 000FDE       inputEntry@doneCompartment 0049                    _LCDMenuIcons FDF6  
                     _PORTAbits 000F80                       _PORTBbits 000F81                       _TRISCbits 000F94  
             __size_of_I2C_Send 0066    inputEntry@compartmentsToFill 0048       lcd_shift_cursor@direction 0004  
                __end_of___wmul ED44                   __pidataCOMRAM EC88              pollKeypad@keypress 0001  
                __end_of_printf F546                  __end_of_strcpy EDCA             start_initialization EED2  
                   ?_inputEntry 0001            inputEntry@numPressed 0057               ??_I2C_Master_Init 0012  
             ??_I2C_Master_Wait 0001               ??_I2C_Master_Stop 0002                     ?_pollKeypad 0001  
                      ??___wmul 0005        I2C_Master_Init@clockFreq 000E                     __pdataBANK1 0100  
              __CFG_LPT1OSC$OFF 000000                        ??_printf 0015                        ??_strcpy 000B  
                   __pbssCOMRAM 006B                hibernate@pressed 001A        inputEntry@inputEntryStep 0055  
              _lcd_shift_cursor ECDE         __size_of_printStringLCD 02A8               __size_of_mainMenu 017E  
              _I2C_Master_Start EC8A                _I2C_Master_Write EC9A                ___lwdiv@dividend 0001  
             __CFG_CCP2MX$PORTC 000000             __size_of_inputEntry 05A2                   __pmediumconst FD90  
                     _lcdNibble F112                        ?___lldiv 0001                        ?___lwdiv 0001  
                      ?___lwmod 0008               __size_of_viewLogs 0024                       _hibernate EDCA  
                      ?_lcdInst 0001                        ?_initLCD 0001                        _I2C_Send EFCC  
           __size_of_pollKeypad 002E                ___lwdiv@quotient 0005                  __size_of_putch 0014  
               inputEntry@F3142 0069             __end_of_keypadChars FDF6                        _LCD_LEFT FE16  
       __size_of_lcd_set_cursor 0040                  _fastenerMatrix FD91                  ___wmul@product 0005  
                      _LATBbits 000F8A                        _LATCbits 000F8B      inputEntry@compartmentLabel 003E  
                      _LATDbits 000F8C                 lcd_set_cursor@i 0009                 lcd_set_cursor@x 000A  
               lcd_set_cursor@y 0007                 inputEntry@found 0042                __CFG_WDTPS$32768 000000  
                    ?_lcdNibble 0001        inputEntry@compartmentNum 0059     __end_of_inputEntryQuestions FF80  
                    ?_hibernate 0001               ___wmul@multiplier 0001                   lcdNibble@data 0002  
                    printf@flag 0016                   lcdNibble@temp 0001                      printf@prec 0017  
                     mainMenu@i 0066                  _LCD_HORZ_LIMIT FE1B             inputEntry@setIsGood 0044  
                     copy_data0 EEE6          __end_of_fastenerMatrix FDE5         inputEntry@doneMultiples 0046  
        __size_of_printErrorLCD 0026                        __Hrparam 0000                        __Lrparam 0000  
            __CFG_BOREN$SBORDIS 000000                        _fSLookup 0100                 I2C_Send@address 0008  
              __size_of___lldiv 0082                __size_of___lwdiv 0052                __size_of___lwmod 0042  
              __size_of_lcdInst 0014                 _I2C_Master_Init EF70                __size_of_initLCD 004C  
               _I2C_Master_Wait ECA4                 _I2C_Master_Stop EC92          __end_of_LCD_HORZ_LIMIT FE1C  
                  ??_inputEntry 001A                     _keypadChars FDE5                 ___lwdiv@divisor 0003  
               ___lwdiv@counter 0007                        __ptext10 ECDE                        __ptext11 ED1E  
                      __ptext20 ED6A                        __ptext12 EFCC                        __ptext21 EE86  
                      __ptext13 EC9A                        __ptext22 ECB6                        __ptext14 EC92  
                      __ptext23 F112                        __ptext15 EC8A                        __ptext24 EF70  
                      __ptext16 ECA4                        __ptext25 F190                        __ptext17 EDCA  
                      __ptext18 F546                        __ptext19 ECCA                  _printStringLCD F546  
                _LCD_VERT_LIMIT FE1A                        _mainMenu F212                        _nanoAddr FE15  
                    strcpy@from 0009                   __size_of_main 0076                    ??_pollKeypad 0001  
                   ??_lcdNibble 0001                        _viewLogs ECFA              __end_of_inputEntry FD90  
      __end_of_lcd_shift_cursor ECFA                       printf@val 001C                     ??_hibernate 0016  
   I2C_Master_Write@byteToWrite 0002                   _printErrorLCD ED44               lcd_shift_cursor@n 0006  
                     putch@data 0003        __end_of_I2C_Master_Start EC92        __end_of_I2C_Master_Write ECA4  
                    _INTCONbits 000FF2          __end_of_printStringLCD F7EE          __end_of_LCD_VERT_LIMIT FE1B  
printStringLCD@newlineCharIndex 0012              __end_of_pollKeypad ED98                  _lcd_set_cursor EE04  
                 _LCD_SIZE_HORZ FE19                ___lwmod@dividend 0008                   _LCD_SIZE_VERT FE18  
              ___lldiv@dividend 0001                        printf@ap 0018                        printf@cp 001A  
       __end_of_I2C_Master_Init EFCC         __end_of_I2C_Master_Wait ECB6         __end_of_I2C_Master_Stop EC9A  
                   lcdInst@data 0003               inputEntry@pressed 005D                  ?_printErrorLCD 0016  
              ___lldiv@quotient 0009                 ___lwmod@divisor 000A                        strcpy@cp 000B  
                      strcpy@to 0007                 ___lwmod@counter 000C                 ?_printStringLCD 0007  
                   _SSPCON1bits 000FC6                     _SSPCON2bits 000FC5          __end_of_lcd_set_cursor EE44  
      lcd_shift_cursor@numChars 0005  
