

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar 06 14:38:02 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    56                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    57  0000                     
    58                           ; Version 1.45
    59                           ; Generated 16/11/2017 GMT
    60                           ; 
    61                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    62                           ; All rights reserved.
    63                           ; 
    64                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    65                           ; 
    66                           ; Redistribution and use in source and binary forms, with or without modification, are
    67                           ; permitted provided that the following conditions are met:
    68                           ; 
    69                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    70                           ;        conditions and the following disclaimer.
    71                           ; 
    72                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    73                           ;        of conditions and the following disclaimer in the documentation and/or other
    74                           ;        materials provided with the distribution.
    75                           ; 
    76                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    77                           ;        software without specific prior written permission.
    78                           ; 
    79                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    80                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    81                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    82                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    83                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    84                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    85                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    86                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    87                           ; 
    88                           ; 
    89                           ; Code-generator required, PIC18F4620 Definitions
    90                           ; 
    91                           ; SFR Addresses
    92  0000                     
    93                           	psect	idataBANK0
    94  002042                     __pidataBANK0:
    95                           	opt stack 0
    96                           
    97                           ;initializer for inputEntry@F3167
    98  002042  43                 	db	67
    99  002043  30                 	db	48
   100                           
   101                           	psect	idataBANK1
   102  00180A                     __pidataBANK1:
   103                           	opt stack 0
   104                           
   105                           ;initializer for packaging@F3188
   106  00180A  01                 	db	1
   107  00180B  53                 	db	83
   108  00180C  74                 	db	116
   109  00180D  61                 	db	97
   110  00180E  72                 	db	114
   111  00180F  74                 	db	116
   112  001810  65                 	db	101
   113  001811  64                 	db	100
   114  001812  20                 	db	32
   115  001813  70                 	db	112
   116  001814  61                 	db	97
   117  001815  63                 	db	99
   118  001816  6B                 	db	107
   119  001817  61                 	db	97
   120  001818  67                 	db	103
   121  001819  69                 	db	105
   122  00181A  6E                 	db	110
   123  00181B  67                 	db	103
   124  00181C  20                 	db	32
   125  00181D  63                 	db	99
   126  00181E  6F                 	db	111
   127  00181F  6D                 	db	109
   128  001820  70                 	db	112
   129  001821  61                 	db	97
   130  001822  72                 	db	114
   131  001823  74                 	db	116
   132  001824  6D                 	db	109
   133  001825  65                 	db	101
   134  001826  6E                 	db	110
   135  001827  74                 	db	116
   136  001828  20                 	db	32
   137  001829  78                 	db	120
   138  00182A  00                 	db	0
   139  00182B  00                 	db	0
   140                           
   141                           ;initializer for inputEntry@F3188
   142  00182C  01                 	db	1
   143  00182D  53                 	db	83
   144  00182E  74                 	db	116
   145  00182F  61                 	db	97
   146  001830  72                 	db	114
   147  001831  74                 	db	116
   148  001832  65                 	db	101
   149  001833  64                 	db	100
   150  001834  20                 	db	32
   151  001835  63                 	db	99
   152  001836  6F                 	db	111
   153  001837  6D                 	db	109
   154  001838  70                 	db	112
   155  001839  61                 	db	97
   156  00183A  72                 	db	114
   157  00183B  74                 	db	116
   158  00183C  6D                 	db	109
   159  00183D  65                 	db	101
   160  00183E  6E                 	db	110
   161  00183F  74                 	db	116
   162  001840  20                 	db	32
   163  001841  78                 	db	120
   164  001842  00                 	db	0
   165  001843  00                 	db	0
   166                           
   167                           ;initializer for _fSLookup
   168  001844  4E                 	db	78
   169  001845  4F                 	db	79
   170  001846  4E                 	db	78
   171  001847  45                 	db	69
   172  001848  00                 	db	0
   173  001849  42                 	db	66
   174  00184A  00                 	db	0
   175  00184B  00                 	db	0
   176  00184C  00                 	db	0
   177  00184D  00                 	db	0
   178  00184E  4E                 	db	78
   179  00184F  00                 	db	0
   180  001850  00                 	db	0
   181  001851  00                 	db	0
   182  001852  00                 	db	0
   183  001853  53                 	db	83
   184  001854  00                 	db	0
   185  001855  00                 	db	0
   186  001856  00                 	db	0
   187  001857  00                 	db	0
   188  001858  57                 	db	87
   189  001859  00                 	db	0
   190  00185A  00                 	db	0
   191  00185B  00                 	db	0
   192  00185C  00                 	db	0
   193  00185D  42                 	db	66
   194  00185E  4E                 	db	78
   195  00185F  00                 	db	0
   196  001860  00                 	db	0
   197  001861  00                 	db	0
   198  001862  42                 	db	66
   199  001863  53                 	db	83
   200  001864  00                 	db	0
   201  001865  00                 	db	0
   202  001866  00                 	db	0
   203  001867  42                 	db	66
   204  001868  57                 	db	87
   205  001869  00                 	db	0
   206  00186A  00                 	db	0
   207  00186B  00                 	db	0
   208  00186C  42                 	db	66
   209  00186D  42                 	db	66
   210  00186E  4E                 	db	78
   211  00186F  00                 	db	0
   212  001870  00                 	db	0
   213  001871  42                 	db	66
   214  001872  42                 	db	66
   215  001873  53                 	db	83
   216  001874  00                 	db	0
   217  001875  00                 	db	0
   218  001876  42                 	db	66
   219  001877  42                 	db	66
   220  001878  57                 	db	87
   221  001879  00                 	db	0
   222  00187A  00                 	db	0
   223  00187B  42                 	db	66
   224  00187C  4E                 	db	78
   225  00187D  57                 	db	87
   226  00187E  00                 	db	0
   227  00187F  00                 	db	0
   228  001880  42                 	db	66
   229  001881  53                 	db	83
   230  001882  57                 	db	87
   231  001883  00                 	db	0
   232  001884  00                 	db	0
   233  001885  42                 	db	66
   234  001886  57                 	db	87
   235  001887  57                 	db	87
   236  001888  00                 	db	0
   237  001889  00                 	db	0
   238  00188A  42                 	db	66
   239  00188B  4E                 	db	78
   240  00188C  4E                 	db	78
   241  00188D  57                 	db	87
   242  00188E  00                 	db	0
   243  00188F  42                 	db	66
   244  001890  53                 	db	83
   245  001891  57                 	db	87
   246  001892  57                 	db	87
   247  001893  00                 	db	0
   248  001894  42                 	db	66
   249  001895  42                 	db	66
   250  001896  53                 	db	83
   251  001897  57                 	db	87
   252  001898  00                 	db	0
   253  001899  42                 	db	66
   254  00189A  42                 	db	66
   255  00189B  4E                 	db	78
   256  00189C  57                 	db	87
   257  00189D  00                 	db	0
   258  00189E  42                 	db	66
   259  00189F  4E                 	db	78
   260  0018A0  4E                 	db	78
   261  0018A1  57                 	db	87
   262  0018A2  00                 	db	0
   263  0018A3  42                 	db	66
   264  0018A4  4E                 	db	78
   265  0018A5  4E                 	db	78
   266  0018A6  4E                 	db	78
   267  0018A7  00                 	db	0
   268  0018A8  42                 	db	66
   269  0018A9  57                 	db	87
   270  0018AA  57                 	db	87
   271  0018AB  57                 	db	87
   272  0018AC  00                 	db	0
   273                           
   274                           	psect	mediumconst
   275  00FC80                     __pmediumconst:
   276                           	opt stack 0
   277  00FC80  00                 	db	0
   278  00FC81                     _dpowers:
   279                           	opt stack 0
   280  00FC81  0001               	dw	1
   281  00FC83  0000               	dw	0
   282  00FC85  000A               	dw	10
   283  00FC87  0000               	dw	0
   284  00FC89  0064               	dw	100
   285  00FC8B  0000               	dw	0
   286  00FC8D  03E8               	dw	1000
   287  00FC8F  0000               	dw	0
   288  00FC91  2710               	dw	10000
   289  00FC93  0000               	dw	0
   290  00FC95  86A0               	dw	34464
   291  00FC97  0001               	dw	1
   292  00FC99  4240               	dw	16960
   293  00FC9B  000F               	dw	15
   294  00FC9D  9680               	dw	38528
   295  00FC9F  0098               	dw	152
   296  00FCA1  E100               	dw	57600
   297  00FCA3  05F5               	dw	1525
   298  00FCA5  CA00               	dw	51712
   299  00FCA7  3B9A               	dw	15258
   300  00FCA9                     __end_of_dpowers:
   301                           	opt stack 0
   302  00FCA9                     _keypadChars:
   303                           	opt stack 0
   304  00FCA9  31                 	db	49
   305  00FCAA  32                 	db	50
   306  00FCAB  33                 	db	51
   307  00FCAC  42                 	db	66
   308  00FCAD  34                 	db	52
   309  00FCAE  35                 	db	53
   310  00FCAF  36                 	db	54
   311  00FCB0  4E                 	db	78
   312  00FCB1  37                 	db	55
   313  00FCB2  38                 	db	56
   314  00FCB3  39                 	db	57
   315  00FCB4  53                 	db	83
   316  00FCB5  2A                 	db	42
   317  00FCB6  30                 	db	48
   318  00FCB7  23                 	db	35
   319  00FCB8  57                 	db	87
   320  00FCB9  00                 	db	0
   321  00FCBA                     __end_of_keypadChars:
   322                           	opt stack 0
   323  00FCBA                     _LCDMenuIcons:
   324                           	opt stack 0
   325  00FCBA  2A                 	db	42
   326  00FCBB  3C                 	db	60
   327  00FCBC  2D                 	db	45
   328  00FCBD  20                 	db	32
   329  00FCBE  20                 	db	32
   330  00FCBF  20                 	db	32
   331  00FCC0  28                 	db	40
   332  00FCC1  20                 	db	32
   333  00FCC2  2D                 	db	45
   334  00FCC3  20                 	db	32
   335  00FCC4  29                 	db	41
   336  00FCC5  20                 	db	32
   337  00FCC6  20                 	db	32
   338  00FCC7  20                 	db	32
   339  00FCC8  20                 	db	32
   340  00FCC9  00                 	db	0
   341  00FCCA                     __end_of_LCDMenuIcons:
   342                           	opt stack 0
   343  00FCCA                     _assemblyStepEncoding:
   344                           	opt stack 0
   345  00FCCA  55                 	db	85
   346  00FCCB  5B                 	db	91
   347  00FCCC  77                 	db	119
   348  00FCCD  7F                 	db	127
   349  00FCCE  FF                 	db	255
   350  00FCCF                     __end_of_assemblyStepEncoding:
   351                           	opt stack 0
   352  00FCCF                     _nanoAddr:
   353                           	opt stack 0
   354  00FCCF  10                 	db	16
   355  00FCD0                     __end_of_nanoAddr:
   356                           	opt stack 0
   357  00FCD0                     _LCD_LEFT:
   358                           	opt stack 0
   359  00FCD0  00                 	db	0
   360  00FCD1                     __end_of_LCD_LEFT:
   361                           	opt stack 0
   362  00FCD1                     _LCD_RIGHT:
   363                           	opt stack 0
   364  00FCD1  01                 	db	1
   365  00FCD2                     __end_of_LCD_RIGHT:
   366                           	opt stack 0
   367  00FCD2                     _LCD_SIZE_VERT:
   368                           	opt stack 0
   369  00FCD2  02                 	db	2
   370  00FCD3                     __end_of_LCD_SIZE_VERT:
   371                           	opt stack 0
   372  00FCD3                     _LCD_SIZE_HORZ:
   373                           	opt stack 0
   374  00FCD3  10                 	db	16
   375  00FCD4                     __end_of_LCD_SIZE_HORZ:
   376                           	opt stack 0
   377  00FCD4                     _LCD_VERT_LIMIT:
   378                           	opt stack 0
   379  00FCD4  02                 	db	2
   380  00FCD5                     __end_of_LCD_VERT_LIMIT:
   381                           	opt stack 0
   382  00FCD5                     _LCD_HORZ_LIMIT:
   383                           	opt stack 0
   384  00FCD5  28                 	db	40
   385  00FCD6                     __end_of_LCD_HORZ_LIMIT:
   386                           	opt stack 0
   387  00FCD6                     _errMsgs:
   388                           	opt stack 0
   389  00FCD6  49                 	db	73
   390  00FCD7  6E                 	db	110
   391  00FCD8  76                 	db	118
   392  00FCD9  61                 	db	97
   393  00FCDA  6C                 	db	108
   394  00FCDB  69                 	db	105
   395  00FCDC  64                 	db	100
   396  00FCDD  20                 	db	32
   397  00FCDE  65                 	db	101
   398  00FCDF  6E                 	db	110
   399  00FCE0  74                 	db	116
   400  00FCE1  72                 	db	114
   401  00FCE2  79                 	db	121
   402  00FCE3  0A                 	db	10
   403  00FCE4  50                 	db	80
   404  00FCE5  6C                 	db	108
   405  00FCE6  65                 	db	101
   406  00FCE7  61                 	db	97
   407  00FCE8  73                 	db	115
   408  00FCE9  65                 	db	101
   409  00FCEA  20                 	db	32
   410  00FCEB  74                 	db	116
   411  00FCEC  72                 	db	114
   412  00FCED  79                 	db	121
   413  00FCEE  20                 	db	32
   414  00FCEF  61                 	db	97
   415  00FCF0  67                 	db	103
   416  00FCF1  61                 	db	97
   417  00FCF2  69                 	db	105
   418  00FCF3  6E                 	db	110
   419  00FCF4  00                 	db	0
   420  00FCF5  00                 	db	0
   421  00FCF6  54                 	db	84
   422  00FCF7  6F                 	db	111
   423  00FCF8  6F                 	db	111
   424  00FCF9  20                 	db	32
   425  00FCFA  6D                 	db	109
   426  00FCFB  61                 	db	97
   427  00FCFC  6E                 	db	110
   428  00FCFD  79                 	db	121
   429  00FCFE  20                 	db	32
   430  00FCFF  66                 	db	102
   431  00FD00  61                 	db	97
   432  00FD01  73                 	db	115
   433  00FD02  74                 	db	116
   434  00FD03  65                 	db	101
   435  00FD04  6E                 	db	110
   436  00FD05  65                 	db	101
   437  00FD06  72                 	db	114
   438  00FD07  73                 	db	115
   439  00FD08  00                 	db	0
   440  00FD09  00                 	db	0
   441  00FD0A  00                 	db	0
   442  00FD0B  00                 	db	0
   443  00FD0C  00                 	db	0
   444  00FD0D  00                 	db	0
   445  00FD0E  00                 	db	0
   446  00FD0F  00                 	db	0
   447  00FD10  00                 	db	0
   448  00FD11  00                 	db	0
   449  00FD12  00                 	db	0
   450  00FD13  00                 	db	0
   451  00FD14  00                 	db	0
   452  00FD15  00                 	db	0
   453  00FD16  54                 	db	84
   454  00FD17  6F                 	db	111
   455  00FD18  6F                 	db	111
   456  00FD19  20                 	db	32
   457  00FD1A  6D                 	db	109
   458  00FD1B  61                 	db	97
   459  00FD1C  6E                 	db	110
   460  00FD1D  79                 	db	121
   461  00FD1E  20                 	db	32
   462  00FD1F  62                 	db	98
   463  00FD20  6F                 	db	111
   464  00FD21  6C                 	db	108
   465  00FD22  74                 	db	116
   466  00FD23  73                 	db	115
   467  00FD24  00                 	db	0
   468  00FD25  00                 	db	0
   469  00FD26  00                 	db	0
   470  00FD27  00                 	db	0
   471  00FD28  00                 	db	0
   472  00FD29  00                 	db	0
   473  00FD2A  00                 	db	0
   474  00FD2B  00                 	db	0
   475  00FD2C  00                 	db	0
   476  00FD2D  00                 	db	0
   477  00FD2E  00                 	db	0
   478  00FD2F  00                 	db	0
   479  00FD30  00                 	db	0
   480  00FD31  00                 	db	0
   481  00FD32  00                 	db	0
   482  00FD33  00                 	db	0
   483  00FD34  00                 	db	0
   484  00FD35  00                 	db	0
   485  00FD36  54                 	db	84
   486  00FD37  6F                 	db	111
   487  00FD38  6F                 	db	111
   488  00FD39  20                 	db	32
   489  00FD3A  6D                 	db	109
   490  00FD3B  61                 	db	97
   491  00FD3C  6E                 	db	110
   492  00FD3D  79                 	db	121
   493  00FD3E  20                 	db	32
   494  00FD3F  6E                 	db	110
   495  00FD40  75                 	db	117
   496  00FD41  74                 	db	116
   497  00FD42  73                 	db	115
   498  00FD43  00                 	db	0
   499  00FD44  00                 	db	0
   500  00FD45  00                 	db	0
   501  00FD46  00                 	db	0
   502  00FD47  00                 	db	0
   503  00FD48  00                 	db	0
   504  00FD49  00                 	db	0
   505  00FD4A  00                 	db	0
   506  00FD4B  00                 	db	0
   507  00FD4C  00                 	db	0
   508  00FD4D  00                 	db	0
   509  00FD4E  00                 	db	0
   510  00FD4F  00                 	db	0
   511  00FD50  00                 	db	0
   512  00FD51  00                 	db	0
   513  00FD52  00                 	db	0
   514  00FD53  00                 	db	0
   515  00FD54  00                 	db	0
   516  00FD55  00                 	db	0
   517  00FD56  54                 	db	84
   518  00FD57  6F                 	db	111
   519  00FD58  6F                 	db	111
   520  00FD59  20                 	db	32
   521  00FD5A  6D                 	db	109
   522  00FD5B  61                 	db	97
   523  00FD5C  6E                 	db	110
   524  00FD5D  79                 	db	121
   525  00FD5E  20                 	db	32
   526  00FD5F  77                 	db	119
   527  00FD60  61                 	db	97
   528  00FD61  73                 	db	115
   529  00FD62  68                 	db	104
   530  00FD63  65                 	db	101
   531  00FD64  72                 	db	114
   532  00FD65  73                 	db	115
   533  00FD66  00                 	db	0
   534  00FD67  00                 	db	0
   535  00FD68  00                 	db	0
   536  00FD69  00                 	db	0
   537  00FD6A  00                 	db	0
   538  00FD6B  00                 	db	0
   539  00FD6C  00                 	db	0
   540  00FD6D  00                 	db	0
   541  00FD6E  00                 	db	0
   542  00FD6F  00                 	db	0
   543  00FD70  00                 	db	0
   544  00FD71  00                 	db	0
   545  00FD72  00                 	db	0
   546  00FD73  00                 	db	0
   547  00FD74  00                 	db	0
   548  00FD75  00                 	db	0
   549  00FD76  54                 	db	84
   550  00FD77  6F                 	db	111
   551  00FD78  6F                 	db	111
   552  00FD79  20                 	db	32
   553  00FD7A  6D                 	db	109
   554  00FD7B  61                 	db	97
   555  00FD7C  6E                 	db	110
   556  00FD7D  79                 	db	121
   557  00FD7E  20                 	db	32
   558  00FD7F  73                 	db	115
   559  00FD80  70                 	db	112
   560  00FD81  61                 	db	97
   561  00FD82  63                 	db	99
   562  00FD83  65                 	db	101
   563  00FD84  72                 	db	114
   564  00FD85  73                 	db	115
   565  00FD86  00                 	db	0
   566  00FD87  00                 	db	0
   567  00FD88  00                 	db	0
   568  00FD89  00                 	db	0
   569  00FD8A  00                 	db	0
   570  00FD8B  00                 	db	0
   571  00FD8C  00                 	db	0
   572  00FD8D  00                 	db	0
   573  00FD8E  00                 	db	0
   574  00FD8F  00                 	db	0
   575  00FD90  00                 	db	0
   576  00FD91  00                 	db	0
   577  00FD92  00                 	db	0
   578  00FD93  00                 	db	0
   579  00FD94  00                 	db	0
   580  00FD95  00                 	db	0
   581  00FD96  4E                 	db	78
   582  00FD97  6F                 	db	111
   583  00FD98  20                 	db	32
   584  00FD99  66                 	db	102
   585  00FD9A  61                 	db	97
   586  00FD9B  73                 	db	115
   587  00FD9C  74                 	db	116
   588  00FD9D  65                 	db	101
   589  00FD9E  6E                 	db	110
   590  00FD9F  65                 	db	101
   591  00FDA0  72                 	db	114
   592  00FDA1  73                 	db	115
   593  00FDA2  20                 	db	32
   594  00FDA3  73                 	db	115
   595  00FDA4  65                 	db	101
   596  00FDA5  6C                 	db	108
   597  00FDA6  65                 	db	101
   598  00FDA7  63                 	db	99
   599  00FDA8  74                 	db	116
   600  00FDA9  65                 	db	101
   601  00FDAA  64                 	db	100
   602  00FDAB  00                 	db	0
   603  00FDAC  00                 	db	0
   604  00FDAD  00                 	db	0
   605  00FDAE  00                 	db	0
   606  00FDAF  00                 	db	0
   607  00FDB0  00                 	db	0
   608  00FDB1  00                 	db	0
   609  00FDB2  00                 	db	0
   610  00FDB3  00                 	db	0
   611  00FDB4  00                 	db	0
   612  00FDB5  00                 	db	0
   613  00FDB6                     __end_of_errMsgs:
   614                           	opt stack 0
   615  00FDB6                     _inputEntryQuestions:
   616                           	opt stack 0
   617  00FDB6  41                 	db	65
   618  00FDB7  73                 	db	115
   619  00FDB8  73                 	db	115
   620  00FDB9  65                 	db	101
   621  00FDBA  6D                 	db	109
   622  00FDBB  62                 	db	98
   623  00FDBC  6C                 	db	108
   624  00FDBD  79                 	db	121
   625  00FDBE  20                 	db	32
   626  00FDBF  73                 	db	115
   627  00FDC0  74                 	db	116
   628  00FDC1  65                 	db	101
   629  00FDC2  70                 	db	112
   630  00FDC3  73                 	db	115
   631  00FDC4  0A                 	db	10
   632  00FDC5  2A                 	db	42
   633  00FDC6  3C                 	db	60
   634  00FDC7  2D                 	db	45
   635  00FDC8  20                 	db	32
   636  00FDC9  20                 	db	32
   637  00FDCA  28                 	db	40
   638  00FDCB  34                 	db	52
   639  00FDCC  2D                 	db	45
   640  00FDCD  38                 	db	56
   641  00FDCE  29                 	db	41
   642  00FDCF  20                 	db	32
   643  00FDD0  20                 	db	32
   644  00FDD1  20                 	db	32
   645  00FDD2  20                 	db	32
   646  00FDD3  20                 	db	32
   647  00FDD4  00                 	db	0
   648  00FDD5  00                 	db	0
   649  00FDD6  00                 	db	0
   650  00FDD7  46                 	db	70
   651  00FDD8  61                 	db	97
   652  00FDD9  73                 	db	115
   653  00FDDA  74                 	db	116
   654  00FDDB  65                 	db	101
   655  00FDDC  6E                 	db	110
   656  00FDDD  65                 	db	101
   657  00FDDE  72                 	db	114
   658  00FDDF  73                 	db	115
   659  00FDE0  20                 	db	32
   660  00FDE1  69                 	db	105
   661  00FDE2  6E                 	db	110
   662  00FDE3  20                 	db	32
   663  00FDE4  43                 	db	67
   664  00FDE5  78                 	db	120
   665  00FDE6  0A                 	db	10
   666  00FDE7  2A                 	db	42
   667  00FDE8  3C                 	db	60
   668  00FDE9  2D                 	db	45
   669  00FDEA  28                 	db	40
   670  00FDEB  42                 	db	66
   671  00FDEC  4E                 	db	78
   672  00FDED  53                 	db	83
   673  00FDEE  57                 	db	87
   674  00FDEF  29                 	db	41
   675  00FDF0  20                 	db	32
   676  00FDF1  20                 	db	32
   677  00FDF2  20                 	db	32
   678  00FDF3  20                 	db	32
   679  00FDF4  2D                 	db	45
   680  00FDF5  3E                 	db	62
   681  00FDF6  23                 	db	35
   682  00FDF7  00                 	db	0
   683  00FDF8  48                 	db	72
   684  00FDF9  6F                 	db	111
   685  00FDFA  77                 	db	119
   686  00FDFB  20                 	db	32
   687  00FDFC  6D                 	db	109
   688  00FDFD  61                 	db	97
   689  00FDFE  6E                 	db	110
   690  00FDFF  79                 	db	121
   691  00FE00  20                 	db	32
   692  00FE01  73                 	db	115
   693  00FE02  65                 	db	101
   694  00FE03  74                 	db	116
   695  00FE04  73                 	db	115
   696  00FE05  3F                 	db	63
   697  00FE06  0A                 	db	10
   698  00FE07  2A                 	db	42
   699  00FE08  3C                 	db	60
   700  00FE09  2D                 	db	45
   701  00FE0A  20                 	db	32
   702  00FE0B  20                 	db	32
   703  00FE0C  28                 	db	40
   704  00FE0D  31                 	db	49
   705  00FE0E  2D                 	db	45
   706  00FE0F  34                 	db	52
   707  00FE10  29                 	db	41
   708  00FE11  20                 	db	32
   709  00FE12  20                 	db	32
   710  00FE13  20                 	db	32
   711  00FE14  20                 	db	32
   712  00FE15  20                 	db	32
   713  00FE16  00                 	db	0
   714  00FE17  00                 	db	0
   715  00FE18  00                 	db	0
   716  00FE19  43                 	db	67
   717  00FE1A  6F                 	db	111
   718  00FE1B  6E                 	db	110
   719  00FE1C  66                 	db	102
   720  00FE1D  69                 	db	105
   721  00FE1E  72                 	db	114
   722  00FE1F  6D                 	db	109
   723  00FE20  3F                 	db	63
   724  00FE21  0A                 	db	10
   725  00FE22  2A                 	db	42
   726  00FE23  3C                 	db	60
   727  00FE24  2D                 	db	45
   728  00FE25  20                 	db	32
   729  00FE26  20                 	db	32
   730  00FE27  28                 	db	40
   731  00FE28  41                 	db	65
   732  00FE29  3A                 	db	58
   733  00FE2A  59                 	db	89
   734  00FE2B  2F                 	db	47
   735  00FE2C  42                 	db	66
   736  00FE2D  3A                 	db	58
   737  00FE2E  4E                 	db	78
   738  00FE2F  29                 	db	41
   739  00FE30  20                 	db	32
   740  00FE31  00                 	db	0
   741  00FE32  00                 	db	0
   742  00FE33  00                 	db	0
   743  00FE34  00                 	db	0
   744  00FE35  00                 	db	0
   745  00FE36  00                 	db	0
   746  00FE37  00                 	db	0
   747  00FE38  00                 	db	0
   748  00FE39  00                 	db	0
   749  00FE3A                     __end_of_inputEntryQuestions:
   750                           	opt stack 0
   751  00FE3A                     _fastenerMatrix:
   752                           	opt stack 0
   753  00FE3A  00                 	db	0
   754  00FE3B  00                 	db	0
   755  00FE3C  00                 	db	0
   756  00FE3D  00                 	db	0
   757  00FE3E  01                 	db	1
   758  00FE3F  00                 	db	0
   759  00FE40  00                 	db	0
   760  00FE41  00                 	db	0
   761  00FE42  00                 	db	0
   762  00FE43  01                 	db	1
   763  00FE44  00                 	db	0
   764  00FE45  00                 	db	0
   765  00FE46  00                 	db	0
   766  00FE47  00                 	db	0
   767  00FE48  01                 	db	1
   768  00FE49  00                 	db	0
   769  00FE4A  00                 	db	0
   770  00FE4B  00                 	db	0
   771  00FE4C  00                 	db	0
   772  00FE4D  01                 	db	1
   773  00FE4E  01                 	db	1
   774  00FE4F  01                 	db	1
   775  00FE50  00                 	db	0
   776  00FE51  00                 	db	0
   777  00FE52  01                 	db	1
   778  00FE53  00                 	db	0
   779  00FE54  01                 	db	1
   780  00FE55  00                 	db	0
   781  00FE56  01                 	db	1
   782  00FE57  00                 	db	0
   783  00FE58  00                 	db	0
   784  00FE59  01                 	db	1
   785  00FE5A  02                 	db	2
   786  00FE5B  01                 	db	1
   787  00FE5C  00                 	db	0
   788  00FE5D  00                 	db	0
   789  00FE5E  02                 	db	2
   790  00FE5F  00                 	db	0
   791  00FE60  01                 	db	1
   792  00FE61  00                 	db	0
   793  00FE62  02                 	db	2
   794  00FE63  00                 	db	0
   795  00FE64  00                 	db	0
   796  00FE65  01                 	db	1
   797  00FE66  01                 	db	1
   798  00FE67  01                 	db	1
   799  00FE68  00                 	db	0
   800  00FE69  01                 	db	1
   801  00FE6A  01                 	db	1
   802  00FE6B  00                 	db	0
   803  00FE6C  01                 	db	1
   804  00FE6D  01                 	db	1
   805  00FE6E  01                 	db	1
   806  00FE6F  00                 	db	0
   807  00FE70  00                 	db	0
   808  00FE71  02                 	db	2
   809  00FE72  01                 	db	1
   810  00FE73  01                 	db	1
   811  00FE74  00                 	db	0
   812  00FE75  02                 	db	2
   813  00FE76  01                 	db	1
   814  00FE77  00                 	db	0
   815  00FE78  01                 	db	1
   816  00FE79  02                 	db	2
   817  00FE7A  02                 	db	2
   818  00FE7B  00                 	db	0
   819  00FE7C  01                 	db	1
   820  00FE7D  01                 	db	1
   821  00FE7E  02                 	db	2
   822  00FE7F  01                 	db	1
   823  00FE80  00                 	db	0
   824  00FE81  01                 	db	1
   825  00FE82  01                 	db	1
   826  00FE83  02                 	db	2
   827  00FE84  00                 	db	0
   828  00FE85  01                 	db	1
   829  00FE86  01                 	db	1
   830  00FE87  03                 	db	3
   831  00FE88  00                 	db	0
   832  00FE89  00                 	db	0
   833  00FE8A  01                 	db	1
   834  00FE8B  00                 	db	0
   835  00FE8C  00                 	db	0
   836  00FE8D  03                 	db	3
   837  00FE8E                     __end_of_fastenerMatrix:
   838                           	opt stack 0
   839  0000                     _TMR0L	set	4054
   840  0000                     _TMR0H	set	4055
   841  0000                     _T0CONbits	set	4053
   842  0000                     _PORTB	set	3969
   843  0000                     _PORTBbits	set	3969
   844  0000                     _INTCONbits	set	4082
   845  0000                     _LATDbits	set	3980
   846  0000                     _SSPBUF	set	4041
   847  0000                     _SSPCON2bits	set	4037
   848  0000                     _SSPADD	set	4040
   849  0000                     _SSPCON2	set	4037
   850  0000                     _SSPCON1	set	4038
   851  0000                     _SSPSTAT	set	4039
   852  0000                     _TRISCbits	set	3988
   853  0000                     _SSPCON1bits	set	4038
   854  0000                     _TRISE	set	3990
   855  0000                     _TRISD	set	3989
   856  0000                     _TRISC	set	3988
   857  0000                     _TRISB	set	3987
   858  0000                     _TRISA	set	3986
   859  0000                     _LATE	set	3981
   860  0000                     _LATD	set	3980
   861  0000                     _LATC	set	3979
   862  0000                     _LATB	set	3978
   863  0000                     _LATA	set	3977
   864  0000                     _PORTAbits	set	3968
   865  0000                     _LATCbits	set	3979
   866  0000                     _LATBbits	set	3978
   867  0000                     _TMR0IE	set	32661
   868  0000                     _T0IF	set	32658
   869  0000                     _T0IE	set	32661
   870  00FE8E                     STR_9:
   871  00FE8E  01                 	db	1
   872  00FE8F  45                 	db	69	;'E'
   873  00FE90  6E                 	db	110	;'n'
   874  00FE91  74                 	db	116	;'t'
   875  00FE92  65                 	db	101	;'e'
   876  00FE93  72                 	db	114	;'r'
   877  00FE94  65                 	db	101	;'e'
   878  00FE95  64                 	db	100	;'d'
   879  00FE96  20                 	db	32
   880  00FE97  74                 	db	116	;'t'
   881  00FE98  68                 	db	104	;'h'
   882  00FE99  65                 	db	101	;'e'
   883  00FE9A  20                 	db	32
   884  00FE9B  70                 	db	112	;'p'
   885  00FE9C  61                 	db	97	;'a'
   886  00FE9D  63                 	db	99	;'c'
   887  00FE9E  6B                 	db	107	;'k'
   888  00FE9F  61                 	db	97	;'a'
   889  00FEA0  67                 	db	103	;'g'
   890  00FEA1  69                 	db	105	;'i'
   891  00FEA2  6E                 	db	110	;'n'
   892  00FEA3  67                 	db	103	;'g'
   893  00FEA4  20                 	db	32
   894  00FEA5  66                 	db	102	;'f'
   895  00FEA6  75                 	db	117	;'u'
   896  00FEA7  6E                 	db	110	;'n'
   897  00FEA8  63                 	db	99	;'c'
   898  00FEA9  74                 	db	116	;'t'
   899  00FEAA  69                 	db	105	;'i'
   900  00FEAB  6F                 	db	111	;'o'
   901  00FEAC  6E                 	db	110	;'n'
   902  00FEAD  00                 	db	0
   903  00FEAE  00                 	db	0
   904  00FEAF                     STR_16:
   905  00FEAF  30                 	db	48	;'0'
   906  00FEB0  3A                 	db	58	;':'
   907  00FEB1  53                 	db	83	;'S'
   908  00FEB2  6C                 	db	108	;'l'
   909  00FEB3  65                 	db	101	;'e'
   910  00FEB4  65                 	db	101	;'e'
   911  00FEB5  70                 	db	112	;'p'
   912  00FEB6  20                 	db	32
   913  00FEB7  31                 	db	49	;'1'
   914  00FEB8  3A                 	db	58	;':'
   915  00FEB9  42                 	db	66	;'B'
   916  00FEBA  65                 	db	101	;'e'
   917  00FEBB  67                 	db	103	;'g'
   918  00FEBC  69                 	db	105	;'i'
   919  00FEBD  6E                 	db	110	;'n'
   920  00FEBE  20                 	db	32
   921  00FEBF  0A                 	db	10
   922  00FEC0  32                 	db	50	;'2'
   923  00FEC1  3A                 	db	58	;':'
   924  00FEC2  20                 	db	32
   925  00FEC3  56                 	db	86	;'V'
   926  00FEC4  69                 	db	105	;'i'
   927  00FEC5  65                 	db	101	;'e'
   928  00FEC6  77                 	db	119	;'w'
   929  00FEC7  20                 	db	32
   930  00FEC8  4C                 	db	76	;'L'
   931  00FEC9  6F                 	db	111	;'o'
   932  00FECA  67                 	db	103	;'g'
   933  00FECB  73                 	db	115	;'s'
   934  00FECC  00                 	db	0
   935  00FECD                     STR_13:
   936  00FECD  4E                 	db	78	;'N'
   937  00FECE  6F                 	db	111	;'o'
   938  00FECF  74                 	db	116	;'t'
   939  00FED0  20                 	db	32
   940  00FED1  74                 	db	116	;'t'
   941  00FED2  68                 	db	104	;'h'
   942  00FED3  65                 	db	101	;'e'
   943  00FED4  72                 	db	114	;'r'
   944  00FED5  65                 	db	101	;'e'
   945  00FED6  20                 	db	32
   946  00FED7  79                 	db	121	;'y'
   947  00FED8  65                 	db	101	;'e'
   948  00FED9  74                 	db	116	;'t'
   949  00FEDA  0A                 	db	10
   950  00FEDB  2A                 	db	42
   951  00FEDC  20                 	db	32
   952  00FEDD  74                 	db	116	;'t'
   953  00FEDE  6F                 	db	111	;'o'
   954  00FEDF  20                 	db	32
   955  00FEE0  72                 	db	114	;'r'
   956  00FEE1  65                 	db	101	;'e'
   957  00FEE2  74                 	db	116	;'t'
   958  00FEE3  75                 	db	117	;'u'
   959  00FEE4  72                 	db	114	;'r'
   960  00FEE5  6E                 	db	110	;'n'
   961  00FEE6  00                 	db	0
   962  00FEE7                     STR_14:
   963  00FEE7  53                 	db	83	;'S'
   964  00FEE8  74                 	db	116	;'t'
   965  00FEE9  61                 	db	97	;'a'
   966  00FEEA  72                 	db	114	;'r'
   967  00FEEB  74                 	db	116	;'t'
   968  00FEEC  65                 	db	101	;'e'
   969  00FEED  64                 	db	100	;'d'
   970  00FEEE  20                 	db	32
   971  00FEEF  69                 	db	105	;'i'
   972  00FEF0  6E                 	db	110	;'n'
   973  00FEF1  70                 	db	112	;'p'
   974  00FEF2  75                 	db	117	;'u'
   975  00FEF3  74                 	db	116	;'t'
   976  00FEF4  20                 	db	32
   977  00FEF5  65                 	db	101	;'e'
   978  00FEF6  6E                 	db	110	;'n'
   979  00FEF7  74                 	db	116	;'t'
   980  00FEF8  72                 	db	114	;'r'
   981  00FEF9  79                 	db	121	;'y'
   982  00FEFA  2C                 	db	44
   983  00FEFB  20                 	db	32
   984  00FEFC  68                 	db	104	;'h'
   985  00FEFD  69                 	db	105	;'i'
   986  00FEFE  00                 	db	0
   987  00FEFF  00                 	db	0
   988  00FF00                     STR_11:
   989  00FF00  01                 	db	1
   990  00FF01  42                 	db	66	;'B'
   991  00FF02  3A                 	db	58	;':'
   992  00FF03  25                 	db	37
   993  00FF04  64                 	db	100	;'d'
   994  00FF05  20                 	db	32
   995  00FF06  4E                 	db	78	;'N'
   996  00FF07  3A                 	db	58	;':'
   997  00FF08  25                 	db	37
   998  00FF09  64                 	db	100	;'d'
   999  00FF0A  20                 	db	32
  1000  00FF0B  53                 	db	83	;'S'
  1001  00FF0C  3A                 	db	58	;':'
  1002  00FF0D  25                 	db	37
  1003  00FF0E  64                 	db	100	;'d'
  1004  00FF0F  20                 	db	32
  1005  00FF10  57                 	db	87	;'W'
  1006  00FF11  3A                 	db	58	;':'
  1007  00FF12  25                 	db	37
  1008  00FF13  64                 	db	100	;'d'
  1009  00FF14  00                 	db	0
  1010  00FF15  00                 	db	0
  1011  00FF16                     STR_18:
  1012  00FF16  01                 	db	1
  1013  00FF17  53                 	db	83	;'S'
  1014  00FF18  74                 	db	116	;'t'
  1015  00FF19  61                 	db	97	;'a'
  1016  00FF1A  72                 	db	114	;'r'
  1017  00FF1B  74                 	db	116	;'t'
  1018  00FF1C  69                 	db	105	;'i'
  1019  00FF1D  6E                 	db	110	;'n'
  1020  00FF1E  67                 	db	103	;'g'
  1021  00FF1F  20                 	db	32
  1022  00FF20  70                 	db	112	;'p'
  1023  00FF21  61                 	db	97	;'a'
  1024  00FF22  63                 	db	99	;'c'
  1025  00FF23  6B                 	db	107	;'k'
  1026  00FF24  61                 	db	97	;'a'
  1027  00FF25  67                 	db	103	;'g'
  1028  00FF26  69                 	db	105	;'i'
  1029  00FF27  6E                 	db	110	;'n'
  1030  00FF28  67                 	db	103	;'g'
  1031  00FF29  00                 	db	0
  1032  00FF2A  00                 	db	0
  1033  00FF2B                     STR_17:
  1034  00FF2B  53                 	db	83	;'S'
  1035  00FF2C  74                 	db	116	;'t'
  1036  00FF2D  61                 	db	97	;'a'
  1037  00FF2E  72                 	db	114	;'r'
  1038  00FF2F  74                 	db	116	;'t'
  1039  00FF30  69                 	db	105	;'i'
  1040  00FF31  6E                 	db	110	;'n'
  1041  00FF32  67                 	db	103	;'g'
  1042  00FF33  20                 	db	32
  1043  00FF34  70                 	db	112	;'p'
  1044  00FF35  61                 	db	97	;'a'
  1045  00FF36  63                 	db	99	;'c'
  1046  00FF37  6B                 	db	107	;'k'
  1047  00FF38  61                 	db	97	;'a'
  1048  00FF39  67                 	db	103	;'g'
  1049  00FF3A  69                 	db	105	;'i'
  1050  00FF3B  6E                 	db	110	;'n'
  1051  00FF3C  67                 	db	103	;'g'
  1052  00FF3D  00                 	db	0
  1053  00FF3E  01                 	db	1
  1054  00FF3F  44                 	db	68	;'D'
  1055  00FF40  6F                 	db	111	;'o'
  1056  00FF41  6E                 	db	110	;'n'
  1057  00FF42  65                 	db	101	;'e'
  1058  00FF43  20                 	db	32
  1059  00FF44  63                 	db	99	;'c'
  1060  00FF45  6F                 	db	111	;'o'
  1061  00FF46  6D                 	db	109	;'m'
  1062  00FF47  70                 	db	112	;'p'
  1063  00FF48  61                 	db	97	;'a'
  1064  00FF49  72                 	db	114	;'r'
  1065  00FF4A  74                 	db	116	;'t'
  1066  00FF4B  6D                 	db	109	;'m'
  1067  00FF4C  65                 	db	101	;'e'
  1068  00FF4D  6E                 	db	110	;'n'
  1069  00FF4E  74                 	db	116	;'t'
  1070  00FF4F  00                 	db	0
  1071  00FF50  00                 	db	0
  1072  00FF51                     STR_12:
  1073  00FF51  50                 	db	80	;'P'
  1074  00FF52  72                 	db	114	;'r'
  1075  00FF53  65                 	db	101	;'e'
  1076  00FF54  73                 	db	115	;'s'
  1077  00FF55  73                 	db	115	;'s'
  1078  00FF56  20                 	db	32
  1079  00FF57  31                 	db	49	;'1'
  1080  00FF58  20                 	db	32
  1081  00FF59  74                 	db	116	;'t'
  1082  00FF5A  6F                 	db	111	;'o'
  1083  00FF5B  20                 	db	32
  1084  00FF5C  62                 	db	98	;'b'
  1085  00FF5D  65                 	db	101	;'e'
  1086  00FF5E  67                 	db	103	;'g'
  1087  00FF5F  69                 	db	105	;'i'
  1088  00FF60  6E                 	db	110	;'n'
  1089  00FF61  00                 	db	0
  1090  00FF62  01                 	db	1
  1091  00FF63  53                 	db	83	;'S'
  1092  00FF64  70                 	db	112	;'p'
  1093  00FF65  61                 	db	97	;'a'
  1094  00FF66  63                 	db	99	;'c'
  1095  00FF67  65                 	db	101	;'e'
  1096  00FF68  72                 	db	114	;'r'
  1097  00FF69  20                 	db	32
  1098  00FF6A  43                 	db	67	;'C'
  1099  00FF6B  6F                 	db	111	;'o'
  1100  00FF6C  75                 	db	117	;'u'
  1101  00FF6D  6E                 	db	110	;'n'
  1102  00FF6E  74                 	db	116	;'t'
  1103  00FF6F  65                 	db	101	;'e'
  1104  00FF70  64                 	db	100	;'d'
  1105  00FF71  00                 	db	0
  1106  00FF72  00                 	db	0
  1107  00FF73  01                 	db	1
  1108  00FF74  57                 	db	87	;'W'
  1109  00FF75  61                 	db	97	;'a'
  1110  00FF76  73                 	db	115	;'s'
  1111  00FF77  68                 	db	104	;'h'
  1112  00FF78  65                 	db	101	;'e'
  1113  00FF79  72                 	db	114	;'r'
  1114  00FF7A  20                 	db	32
  1115  00FF7B  43                 	db	67	;'C'
  1116  00FF7C  6F                 	db	111	;'o'
  1117  00FF7D  75                 	db	117	;'u'
  1118  00FF7E  6E                 	db	110	;'n'
  1119  00FF7F  74                 	db	116	;'t'
  1120  00FF80  65                 	db	101	;'e'
  1121  00FF81  64                 	db	100	;'d'
  1122  00FF82  00                 	db	0
  1123  00FF83  00                 	db	0
  1124  00FF84                     STR_22:
  1125  00FF84  42                 	db	66	;'B'
  1126  00FF85  25                 	db	37
  1127  00FF86  64                 	db	100	;'d'
  1128  00FF87  20                 	db	32
  1129  00FF88  4E                 	db	78	;'N'
  1130  00FF89  25                 	db	37
  1131  00FF8A  64                 	db	100	;'d'
  1132  00FF8B  20                 	db	32
  1133  00FF8C  53                 	db	83	;'S'
  1134  00FF8D  25                 	db	37
  1135  00FF8E  64                 	db	100	;'d'
  1136  00FF8F  20                 	db	32
  1137  00FF90  57                 	db	87	;'W'
  1138  00FF91  25                 	db	37
  1139  00FF92  64                 	db	100	;'d'
  1140  00FF93  00                 	db	0
  1141  00FF94  01                 	db	1
  1142  00FF95  42                 	db	66	;'B'
  1143  00FF96  6F                 	db	111	;'o'
  1144  00FF97  6C                 	db	108	;'l'
  1145  00FF98  74                 	db	116	;'t'
  1146  00FF99  20                 	db	32
  1147  00FF9A  43                 	db	67	;'C'
  1148  00FF9B  6F                 	db	111	;'o'
  1149  00FF9C  75                 	db	117	;'u'
  1150  00FF9D  6E                 	db	110	;'n'
  1151  00FF9E  74                 	db	116	;'t'
  1152  00FF9F  65                 	db	101	;'e'
  1153  00FFA0  64                 	db	100	;'d'
  1154  00FFA1  00                 	db	0
  1155  00FFA2  00                 	db	0
  1156  00FFA3                     STR_15:
  1157  00FFA3  01                 	db	1
  1158  00FFA4  44                 	db	68	;'D'
  1159  00FFA5  6F                 	db	111	;'o'
  1160  00FFA6  6E                 	db	110	;'n'
  1161  00FFA7  65                 	db	101	;'e'
  1162  00FFA8  20                 	db	32
  1163  00FFA9  69                 	db	105	;'i'
  1164  00FFAA  6E                 	db	110	;'n'
  1165  00FFAB  70                 	db	112	;'p'
  1166  00FFAC  75                 	db	117	;'u'
  1167  00FFAD  74                 	db	116	;'t'
  1168  00FFAE  73                 	db	115	;'s'
  1169  00FFAF  00                 	db	0
  1170  00FFB0  00                 	db	0
  1171  00FFB1  01                 	db	1
  1172  00FFB2  4E                 	db	78	;'N'
  1173  00FFB3  75                 	db	117	;'u'
  1174  00FFB4  74                 	db	116	;'t'
  1175  00FFB5  20                 	db	32
  1176  00FFB6  43                 	db	67	;'C'
  1177  00FFB7  6F                 	db	111	;'o'
  1178  00FFB8  75                 	db	117	;'u'
  1179  00FFB9  6E                 	db	110	;'n'
  1180  00FFBA  74                 	db	116	;'t'
  1181  00FFBB  65                 	db	101	;'e'
  1182  00FFBC  64                 	db	100	;'d'
  1183  00FFBD  00                 	db	0
  1184  00FFBE  00                 	db	0
  1185  00FFBF  4E                 	db	78	;'N'
  1186  00FFC0  6F                 	db	111	;'o'
  1187  00FFC1  77                 	db	119	;'w'
  1188  00FFC2  20                 	db	32
  1189  00FFC3  63                 	db	99	;'c'
  1190  00FFC4  6F                 	db	111	;'o'
  1191  00FFC5  75                 	db	117	;'u'
  1192  00FFC6  6E                 	db	110	;'n'
  1193  00FFC7  74                 	db	116	;'t'
  1194  00FFC8  69                 	db	105	;'i'
  1195  00FFC9  6E                 	db	110	;'n'
  1196  00FFCA  67                 	db	103	;'g'
  1197  00FFCB  00                 	db	0
  1198  00FFCC                     STR_20:
  1199  00FFCC  43                 	db	67	;'C'
  1200  00FFCD  25                 	db	37
  1201  00FFCE  64                 	db	100	;'d'
  1202  00FFCF  3A                 	db	58	;':'
  1203  00FFD0  20                 	db	32
  1204  00FFD1  25                 	db	37
  1205  00FFD2  73                 	db	115	;'s'
  1206  00FFD3  20                 	db	32
  1207  00FFD4  78                 	db	120	;'x'
  1208  00FFD5  25                 	db	37
  1209  00FFD6  64                 	db	100	;'d'
  1210  00FFD7  00                 	db	0
  1211  00FFD8                     STR_21:
  1212  00FFD8  52                 	db	82	;'R'
  1213  00FFD9  65                 	db	101	;'e'
  1214  00FFDA  6D                 	db	109	;'m'
  1215  00FFDB  61                 	db	97	;'a'
  1216  00FFDC  69                 	db	105	;'i'
  1217  00FFDD  6E                 	db	110	;'n'
  1218  00FFDE  69                 	db	105	;'i'
  1219  00FFDF  6E                 	db	110	;'n'
  1220  00FFE0  67                 	db	103	;'g'
  1221  00FFE1  3A                 	db	58	;':'
  1222  00FFE2  00                 	db	0
  1223  00FFE3                     STR_19:
  1224  00FFE3  53                 	db	83	;'S'
  1225  00FFE4  75                 	db	117	;'u'
  1226  00FFE5  6D                 	db	109	;'m'
  1227  00FFE6  6D                 	db	109	;'m'
  1228  00FFE7  61                 	db	97	;'a'
  1229  00FFE8  72                 	db	114	;'r'
  1230  00FFE9  79                 	db	121	;'y'
  1231  00FFEA  3A                 	db	58	;':'
  1232  00FFEB  00                 	db	0
  1233  00FFEC                     STR_23:
  1234  00FFEC  28                 	db	40
  1235  00FFED  6E                 	db	110	;'n'
  1236  00FFEE  75                 	db	117	;'u'
  1237  00FFEF  6C                 	db	108	;'l'
  1238  00FFF0  6C                 	db	108	;'l'
  1239  00FFF1  29                 	db	41
  1240  00FFF2  00                 	db	0
  1241  00FFF3                     STR_10:
  1242  00FFF3  01                 	db	1
  1243  00FFF4  4C                 	db	76	;'L'
  1244  00FFF5  6F                 	db	111	;'o'
  1245  00FFF6  6F                 	db	111	;'o'
  1246  00FFF7  70                 	db	112	;'p'
  1247  00FFF8  00                 	db	0
  1248  00FFF9  00                 	db	0
  1249  00FFFA  25                 	db	37
  1250  00FFFB  6C                 	db	108	;'l'
  1251  00FFFC  69                 	db	105	;'i'
  1252  00FFFD  00                 	db	0
  1253  0000                     
  1254                           ; #config settings
  1255  00FFFE  00                 	db	0	; dummy byte at the end
  1256  0000                     
  1257                           	psect	cinit
  1258  001D0C                     __pcinit:
  1259                           	opt stack 0
  1260  001D0C                     start_initialization:
  1261                           	opt stack 0
  1262  001D0C                     __initialization:
  1263                           	opt stack 0
  1264                           
  1265                           ; Initialize objects allocated to BANK1 (163 bytes)
  1266                           ; load TBLPTR registers with __pidataBANK1
  1267  001D0C  0E0A               	movlw	low __pidataBANK1
  1268  001D0E  6EF6               	movwf	tblptrl,c
  1269  001D10  0E18               	movlw	high __pidataBANK1
  1270  001D12  6EF7               	movwf	tblptrh,c
  1271  001D14  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1272  001D16  6EF8               	movwf	tblptru,c
  1273  001D18  EE01  F000         	lfsr	0,__pdataBANK1
  1274  001D1C  EE10 F0A3          	lfsr	1,163
  1275  001D20                     copy_data0:
  1276  001D20  0009               	tblrd		*+
  1277  001D22  CFF5 FFEE          	movff	tablat,postinc0
  1278  001D26  50E5               	movf	postdec1,w,c
  1279  001D28  50E1               	movf	fsr1l,w,c
  1280  001D2A  E1FA               	bnz	copy_data0
  1281                           
  1282                           ; Initialize objects allocated to BANK0 (2 bytes)
  1283                           ; load TBLPTR registers with __pidataBANK0
  1284  001D2C  0E42               	movlw	low __pidataBANK0
  1285  001D2E  6EF6               	movwf	tblptrl,c
  1286  001D30  0E20               	movlw	high __pidataBANK0
  1287  001D32  6EF7               	movwf	tblptrh,c
  1288  001D34  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1289  001D36  6EF8               	movwf	tblptru,c
  1290  001D38  0009               	tblrd		*+	;fetch initializer
  1291  001D3A  CFF5 F0F7          	movff	tablat,__pdataBANK0
  1292  001D3E  0009               	tblrd		*+	;fetch initializer
  1293  001D40  CFF5 F0F8          	movff	tablat,__pdataBANK0+1
  1294                           
  1295                           ; Clear objects allocated to BANK0 (8 bytes)
  1296  001D44  EE00  F0EF         	lfsr	0,__pbssBANK0
  1297  001D48  0E08               	movlw	8
  1298  001D4A                     clear_0:
  1299  001D4A  6AEE               	clrf	postinc0,c
  1300  001D4C  06E8               	decf	wreg,f,c
  1301  001D4E  E1FD               	bnz	clear_0
  1302                           
  1303                           ; Clear objects allocated to COMRAM (38 bytes)
  1304  001D50  EE00  F033         	lfsr	0,__pbssCOMRAM
  1305  001D54  0E26               	movlw	38
  1306  001D56                     clear_1:
  1307  001D56  6AEE               	clrf	postinc0,c
  1308  001D58  06E8               	decf	wreg,f,c
  1309  001D5A  E1FD               	bnz	clear_1
  1310  001D5C                     end_of_initialization:
  1311                           	opt stack 0
  1312  001D5C                     __end_of__initialization:
  1313                           	opt stack 0
  1314  001D5C  9059               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1315  001D5E  9259               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1316  001D60  0100               	movlb	0
  1317  001D62  EFAF  F00D         	goto	_main	;jump to C main() function
  1318                           tblptru	equ	0xFF8
  1319                           tblptrh	equ	0xFF7
  1320                           tblptrl	equ	0xFF6
  1321                           tablat	equ	0xFF5
  1322                           postinc0	equ	0xFEE
  1323                           wreg	equ	0xFE8
  1324                           postdec1	equ	0xFE5
  1325                           fsr1l	equ	0xFE1
  1326                           
  1327                           	psect	bssCOMRAM
  1328  000033                     __pbssCOMRAM:
  1329                           	opt stack 0
  1330  000033                     _params:
  1331                           	opt stack 0
  1332  000033                     	ds	26
  1333  00004D                     _extras:
  1334                           	opt stack 0
  1335  00004D                     	ds	8
  1336  000055                     _timeSinceLastTic:
  1337                           	opt stack 0
  1338  000055                     	ds	3
  1339  000058                     _LCDinterruptState:
  1340                           	opt stack 0
  1341  000058                     	ds	1
  1342                           tblptru	equ	0xFF8
  1343                           tblptrh	equ	0xFF7
  1344                           tblptrl	equ	0xFF6
  1345                           tablat	equ	0xFF5
  1346                           postinc0	equ	0xFEE
  1347                           wreg	equ	0xFE8
  1348                           postdec1	equ	0xFE5
  1349                           fsr1l	equ	0xFE1
  1350                           
  1351                           	psect	bssBANK0
  1352  0000EF                     __pbssBANK0:
  1353                           	opt stack 0
  1354  0000EF                     _dispensed:
  1355                           	opt stack 0
  1356  0000EF                     	ds	8
  1357                           tblptru	equ	0xFF8
  1358                           tblptrh	equ	0xFF7
  1359                           tblptrl	equ	0xFF6
  1360                           tablat	equ	0xFF5
  1361                           postinc0	equ	0xFEE
  1362                           wreg	equ	0xFE8
  1363                           postdec1	equ	0xFE5
  1364                           fsr1l	equ	0xFE1
  1365                           
  1366                           	psect	dataBANK0
  1367  0000F7                     __pdataBANK0:
  1368                           	opt stack 0
  1369  0000F7                     inputEntry@F3167:
  1370                           	opt stack 0
  1371  0000F7                     	ds	2
  1372                           tblptru	equ	0xFF8
  1373                           tblptrh	equ	0xFF7
  1374                           tblptrl	equ	0xFF6
  1375                           tablat	equ	0xFF5
  1376                           postinc0	equ	0xFEE
  1377                           wreg	equ	0xFE8
  1378                           postdec1	equ	0xFE5
  1379                           fsr1l	equ	0xFE1
  1380                           
  1381                           	psect	dataBANK1
  1382  000100                     __pdataBANK1:
  1383                           	opt stack 0
  1384  000100                     packaging@F3188:
  1385                           	opt stack 0
  1386  000100                     	ds	34
  1387  000122                     inputEntry@F3188:
  1388                           	opt stack 0
  1389  000122                     	ds	24
  1390  00013A                     _fSLookup:
  1391                           	opt stack 0
  1392  00013A                     	ds	105
  1393                           tblptru	equ	0xFF8
  1394                           tblptrh	equ	0xFF7
  1395                           tblptrl	equ	0xFF6
  1396                           tablat	equ	0xFF5
  1397                           postinc0	equ	0xFEE
  1398                           wreg	equ	0xFE8
  1399                           postdec1	equ	0xFE5
  1400                           fsr1l	equ	0xFE1
  1401                           
  1402                           	psect	cstackBANK1
  1403  0001A3                     __pcstackBANK1:
  1404                           	opt stack 0
  1405  0001A3                     packaging@msg:
  1406                           	opt stack 0
  1407                           
  1408                           ; 34 bytes @ 0x0
  1409  0001A3                     	ds	34
  1410  0001C5                     packaging@msg2:
  1411                           	opt stack 0
  1412                           
  1413                           ; 32 bytes @ 0x22
  1414  0001C5                     	ds	32
  1415  0001E5                     packaging@set:
  1416                           	opt stack 0
  1417                           
  1418                           ; 2 bytes @ 0x42
  1419  0001E5                     	ds	2
  1420  0001E7                     packaging@compartmentNum:
  1421                           	opt stack 0
  1422                           
  1423                           ; 2 bytes @ 0x44
  1424  0001E7                     	ds	2
  1425  0001E9                     mainMenu@totalTime:
  1426                           	opt stack 0
  1427                           
  1428                           ; 4 bytes @ 0x46
  1429  0001E9                     	ds	4
  1430  0001ED                     mainMenu@startTime:
  1431                           	opt stack 0
  1432                           
  1433                           ; 4 bytes @ 0x4A
  1434  0001ED                     	ds	4
  1435  0001F1                     mainMenu@endTime:
  1436                           	opt stack 0
  1437                           
  1438                           ; 4 bytes @ 0x4E
  1439  0001F1                     	ds	4
  1440  0001F5                     mainMenu@needToPrint:
  1441                           	opt stack 0
  1442                           
  1443                           ; 2 bytes @ 0x52
  1444  0001F5                     	ds	2
  1445  0001F7                     mainMenu@pressed:
  1446                           	opt stack 0
  1447                           
  1448                           ; 2 bytes @ 0x54
  1449  0001F7                     	ds	2
  1450  0001F9                     mainMenu@i:
  1451                           	opt stack 0
  1452                           
  1453                           ; 2 bytes @ 0x56
  1454  0001F9                     	ds	2
  1455                           tblptru	equ	0xFF8
  1456                           tblptrh	equ	0xFF7
  1457                           tblptrl	equ	0xFF6
  1458                           tablat	equ	0xFF5
  1459                           postinc0	equ	0xFEE
  1460                           wreg	equ	0xFE8
  1461                           postdec1	equ	0xFE5
  1462                           fsr1l	equ	0xFE1
  1463                           
  1464                           	psect	cstackBANK0
  1465  000080                     __pcstackBANK0:
  1466                           	opt stack 0
  1467  000080                     ??_clearing:
  1468  000080                     printStringLCD@j:
  1469                           	opt stack 0
  1470  000080                     ___lldiv@quotient:
  1471                           	opt stack 0
  1472  000080                     RTC_getSeconds@time:
  1473                           	opt stack 0
  1474                           
  1475                           ; 7 bytes @ 0x0
  1476  000080                     	ds	2
  1477  000082                     clearing@spinTime:
  1478                           	opt stack 0
  1479  000082                     printStringLCD@spaceIndex:
  1480                           	opt stack 0
  1481                           
  1482                           ; 2 bytes @ 0x2
  1483  000082                     	ds	2
  1484  000084                     ___lldiv@counter:
  1485                           	opt stack 0
  1486  000084                     clearing@i:
  1487                           	opt stack 0
  1488  000084                     printStringLCD@newlineIndex:
  1489                           	opt stack 0
  1490                           
  1491                           ; 2 bytes @ 0x4
  1492  000084                     	ds	1
  1493  000085                     ??_I2C_Master_Init:
  1494  000085                     ?___llmod:
  1495                           	opt stack 0
  1496  000085                     ___llmod@dividend:
  1497                           	opt stack 0
  1498                           
  1499                           ; 4 bytes @ 0x5
  1500  000085                     	ds	1
  1501  000086                     printStringLCD@newlineCharIndex:
  1502                           	opt stack 0
  1503                           
  1504                           ; 2 bytes @ 0x6
  1505  000086                     	ds	1
  1506  000087                     RTC_getSeconds@seconds:
  1507                           	opt stack 0
  1508                           
  1509                           ; 4 bytes @ 0x7
  1510  000087                     	ds	1
  1511  000088                     printStringLCD@i:
  1512                           	opt stack 0
  1513                           
  1514                           ; 2 bytes @ 0x8
  1515  000088                     	ds	1
  1516  000089                     ___llmod@divisor:
  1517                           	opt stack 0
  1518                           
  1519                           ; 4 bytes @ 0x9
  1520  000089                     	ds	1
  1521  00008A                     ??_hibernate:
  1522  00008A                     viewLogs@pressed:
  1523                           	opt stack 0
  1524  00008A                     printErrorLCD@string:
  1525                           	opt stack 0
  1526                           
  1527                           ; 2 bytes @ 0xA
  1528  00008A                     	ds	2
  1529  00008C                     ??_printErrorLCD:
  1530                           
  1531                           ; 1 bytes @ 0xC
  1532  00008C                     	ds	1
  1533  00008D                     ?__doprnt:
  1534                           	opt stack 0
  1535  00008D                     __doprnt@pb:
  1536                           	opt stack 0
  1537                           
  1538                           ; 2 bytes @ 0xD
  1539  00008D                     	ds	1
  1540  00008E                     ??_inputEntry:
  1541  00008E                     hibernate@pressed:
  1542                           	opt stack 0
  1543                           
  1544                           ; 2 bytes @ 0xE
  1545  00008E                     	ds	1
  1546  00008F                     __doprnt@f:
  1547                           	opt stack 0
  1548                           
  1549                           ; 2 bytes @ 0xF
  1550  00008F                     	ds	2
  1551  000091                     __doprnt@ap:
  1552                           	opt stack 0
  1553                           
  1554                           ; 2 bytes @ 0x11
  1555  000091                     	ds	1
  1556  000092                     inputEntry@msg:
  1557                           	opt stack 0
  1558                           
  1559                           ; 24 bytes @ 0x12
  1560  000092                     	ds	1
  1561  000093                     __doprnt@prec:
  1562                           	opt stack 0
  1563                           
  1564                           ; 2 bytes @ 0x13
  1565  000093                     	ds	2
  1566  000095                     __doprnt@flag:
  1567                           	opt stack 0
  1568                           
  1569                           ; 1 bytes @ 0x15
  1570  000095                     	ds	1
  1571  000096                     __doprnt@val:
  1572                           	opt stack 0
  1573                           
  1574                           ; 4 bytes @ 0x16
  1575  000096                     	ds	4
  1576  00009A                     __doprnt@cp:
  1577                           	opt stack 0
  1578                           
  1579                           ; 2 bytes @ 0x1A
  1580  00009A                     	ds	2
  1581  00009C                     __doprnt@c:
  1582                           	opt stack 0
  1583                           
  1584                           ; 1 bytes @ 0x1C
  1585  00009C                     	ds	1
  1586  00009D                     ?_printf:
  1587                           	opt stack 0
  1588  00009D                     ?_sprintf:
  1589                           	opt stack 0
  1590  00009D                     printf@f:
  1591                           	opt stack 0
  1592  00009D                     sprintf@wh:
  1593                           	opt stack 0
  1594                           
  1595                           ; 2 bytes @ 0x1D
  1596  00009D                     	ds	2
  1597  00009F                     sprintf@f:
  1598                           	opt stack 0
  1599                           
  1600                           ; 2 bytes @ 0x1F
  1601  00009F                     	ds	8
  1602  0000A7                     printf@ap:
  1603                           	opt stack 0
  1604                           
  1605                           ; 2 bytes @ 0x27
  1606  0000A7                     	ds	2
  1607  0000A9                     sprintf@ap:
  1608                           	opt stack 0
  1609  0000A9                     printf@pb:
  1610                           	opt stack 0
  1611                           
  1612                           ; 4 bytes @ 0x29
  1613  0000A9                     	ds	1
  1614  0000AA                     inputEntry@fastenerString:
  1615                           	opt stack 0
  1616                           
  1617                           ; 32 bytes @ 0x2A
  1618  0000AA                     	ds	1
  1619  0000AB                     sprintf@pb:
  1620                           	opt stack 0
  1621                           
  1622                           ; 4 bytes @ 0x2B
  1623  0000AB                     	ds	4
  1624  0000AF                     ??_packaging:
  1625                           
  1626                           ; 1 bytes @ 0x2F
  1627  0000AF                     	ds	27
  1628  0000CA                     inputEntry@compartmentLabel:
  1629                           	opt stack 0
  1630                           
  1631                           ; 2 bytes @ 0x4A
  1632  0000CA                     	ds	2
  1633  0000CC                     inputEntry@compartmentsToFill:
  1634                           	opt stack 0
  1635                           
  1636                           ; 1 bytes @ 0x4C
  1637  0000CC                     	ds	1
  1638  0000CD                     inputEntry@done:
  1639                           	opt stack 0
  1640                           
  1641                           ; 2 bytes @ 0x4D
  1642  0000CD                     	ds	2
  1643  0000CF                     inputEntry@found:
  1644                           	opt stack 0
  1645                           
  1646                           ; 2 bytes @ 0x4F
  1647  0000CF                     	ds	2
  1648  0000D1                     inputEntry@setIsGood:
  1649                           	opt stack 0
  1650                           
  1651                           ; 2 bytes @ 0x51
  1652  0000D1                     	ds	2
  1653  0000D3                     inputEntry@doneMultiples:
  1654                           	opt stack 0
  1655                           
  1656                           ; 2 bytes @ 0x53
  1657  0000D3                     	ds	2
  1658  0000D5                     inputEntry@doneCompartment:
  1659                           	opt stack 0
  1660                           
  1661                           ; 2 bytes @ 0x55
  1662  0000D5                     	ds	2
  1663  0000D7                     inputEntry@sum:
  1664                           	opt stack 0
  1665                           
  1666                           ; 2 bytes @ 0x57
  1667  0000D7                     	ds	2
  1668  0000D9                     inputEntry@numB:
  1669                           	opt stack 0
  1670                           
  1671                           ; 2 bytes @ 0x59
  1672  0000D9                     	ds	2
  1673  0000DB                     inputEntry@numN:
  1674                           	opt stack 0
  1675                           
  1676                           ; 2 bytes @ 0x5B
  1677  0000DB                     	ds	2
  1678  0000DD                     inputEntry@numS:
  1679                           	opt stack 0
  1680                           
  1681                           ; 2 bytes @ 0x5D
  1682  0000DD                     	ds	2
  1683  0000DF                     inputEntry@numW:
  1684                           	opt stack 0
  1685                           
  1686                           ; 2 bytes @ 0x5F
  1687  0000DF                     	ds	2
  1688  0000E1                     inputEntry@inputEntryStep:
  1689                           	opt stack 0
  1690                           
  1691                           ; 2 bytes @ 0x61
  1692  0000E1                     	ds	2
  1693  0000E3                     inputEntry@numPressed:
  1694                           	opt stack 0
  1695                           
  1696                           ; 2 bytes @ 0x63
  1697  0000E3                     	ds	2
  1698  0000E5                     inputEntry@compartmentNum:
  1699                           	opt stack 0
  1700                           
  1701                           ; 2 bytes @ 0x65
  1702  0000E5                     	ds	2
  1703  0000E7                     inputEntry@i:
  1704                           	opt stack 0
  1705                           
  1706                           ; 2 bytes @ 0x67
  1707  0000E7                     	ds	2
  1708  0000E9                     inputEntry@pressed:
  1709                           	opt stack 0
  1710                           
  1711                           ; 1 bytes @ 0x69
  1712  0000E9                     	ds	1
  1713  0000EA                     ??_mainMenu:
  1714                           
  1715                           ; 1 bytes @ 0x6A
  1716  0000EA                     	ds	4
  1717  0000EE                     ??_main:
  1718                           
  1719                           ; 1 bytes @ 0x6E
  1720  0000EE                     	ds	1
  1721                           tblptru	equ	0xFF8
  1722                           tblptrh	equ	0xFF7
  1723                           tblptrl	equ	0xFF6
  1724                           tablat	equ	0xFF5
  1725                           postinc0	equ	0xFEE
  1726                           wreg	equ	0xFE8
  1727                           postdec1	equ	0xFE5
  1728                           fsr1l	equ	0xFE1
  1729                           
  1730                           	psect	cstackCOMRAM
  1731  000001                     __pcstackCOMRAM:
  1732                           	opt stack 0
  1733  000001                     ?___ftpack:
  1734                           	opt stack 0
  1735  000001                     ___ftpack@arg:
  1736                           	opt stack 0
  1737                           
  1738                           ; 3 bytes @ 0x0
  1739  000001                     	ds	3
  1740  000004                     ___ftpack@exp:
  1741                           	opt stack 0
  1742                           
  1743                           ; 1 bytes @ 0x3
  1744  000004                     	ds	1
  1745  000005                     ___ftpack@sign:
  1746                           	opt stack 0
  1747                           
  1748                           ; 1 bytes @ 0x4
  1749  000005                     	ds	1
  1750  000006                     ??___ftpack:
  1751                           
  1752                           ; 1 bytes @ 0x5
  1753  000006                     	ds	3
  1754  000009                     ?___ftadd:
  1755                           	opt stack 0
  1756  000009                     ___ftadd@f1:
  1757                           	opt stack 0
  1758                           
  1759                           ; 3 bytes @ 0x8
  1760  000009                     	ds	3
  1761  00000C                     ___ftadd@f2:
  1762                           	opt stack 0
  1763                           
  1764                           ; 3 bytes @ 0xB
  1765  00000C                     	ds	3
  1766  00000F                     ??___ftadd:
  1767                           
  1768                           ; 1 bytes @ 0xE
  1769  00000F                     	ds	3
  1770  000012                     ___ftadd@sign:
  1771                           	opt stack 0
  1772                           
  1773                           ; 1 bytes @ 0x11
  1774  000012                     	ds	1
  1775  000013                     ___ftadd@exp2:
  1776                           	opt stack 0
  1777                           
  1778                           ; 1 bytes @ 0x12
  1779  000013                     	ds	1
  1780  000014                     ___ftadd@exp1:
  1781                           	opt stack 0
  1782                           
  1783                           ; 1 bytes @ 0x13
  1784  000014                     	ds	1
  1785  000015                     ??_interruptHandler:
  1786                           
  1787                           ; 1 bytes @ 0x14
  1788  000015                     	ds	18
  1789  000027                     ??_I2C_Master_Wait:
  1790  000027                     ?___wmul:
  1791                           	opt stack 0
  1792  000027                     ?___lldiv:
  1793                           	opt stack 0
  1794  000027                     lcdNibble@temp:
  1795                           	opt stack 0
  1796  000027                     pollKeypad@keypress:
  1797                           	opt stack 0
  1798  000027                     ___wmul@multiplier:
  1799                           	opt stack 0
  1800  000027                     ___lldiv@dividend:
  1801                           	opt stack 0
  1802                           
  1803                           ; 4 bytes @ 0x26
  1804  000027                     	ds	1
  1805  000028                     I2C_Master_Read@ackBit:
  1806                           	opt stack 0
  1807  000028                     lcdNibble@data:
  1808                           	opt stack 0
  1809  000028                     I2C_Master_Write@byteToWrite:
  1810                           	opt stack 0
  1811                           
  1812                           ; 2 bytes @ 0x27
  1813  000028                     	ds	1
  1814  000029                     I2C_Master_Read@receivedByte:
  1815                           	opt stack 0
  1816  000029                     lcdInst@data:
  1817                           	opt stack 0
  1818  000029                     putch@data:
  1819                           	opt stack 0
  1820  000029                     ___wmul@multiplicand:
  1821                           	opt stack 0
  1822                           
  1823                           ; 2 bytes @ 0x28
  1824  000029                     	ds	1
  1825  00002A                     ??_initLCD:
  1826  00002A                     lcd_shift_cursor@direction:
  1827                           	opt stack 0
  1828  00002A                     I2C_Send@data:
  1829                           	opt stack 0
  1830  00002A                     RTC_getTime@time:
  1831                           	opt stack 0
  1832                           
  1833                           ; 2 bytes @ 0x29
  1834  00002A                     	ds	1
  1835  00002B                     lcd_shift_cursor@numChars:
  1836                           	opt stack 0
  1837  00002B                     ___wmul@product:
  1838                           	opt stack 0
  1839  00002B                     ___lldiv@divisor:
  1840                           	opt stack 0
  1841                           
  1842                           ; 4 bytes @ 0x2A
  1843  00002B                     	ds	1
  1844  00002C                     ??_I2C_Send:
  1845  00002C                     lcd_shift_cursor@n:
  1846                           	opt stack 0
  1847  00002C                     RTC_getTime@i:
  1848                           	opt stack 0
  1849                           
  1850                           ; 1 bytes @ 0x2B
  1851  00002C                     	ds	1
  1852  00002D                     ?_RTC_getSeconds:
  1853                           	opt stack 0
  1854  00002D                     lcd_set_cursor@y:
  1855                           	opt stack 0
  1856  00002D                     printStringLCD@string:
  1857                           	opt stack 0
  1858  00002D                     strcpy@to:
  1859                           	opt stack 0
  1860                           
  1861                           ; 2 bytes @ 0x2C
  1862  00002D                     	ds	1
  1863  00002E                     ??_lcd_set_cursor:
  1864                           
  1865                           ; 1 bytes @ 0x2D
  1866  00002E                     	ds	1
  1867  00002F                     ??_printStringLCD:
  1868  00002F                     lcd_set_cursor@i:
  1869                           	opt stack 0
  1870  00002F                     I2C_Send@address:
  1871                           	opt stack 0
  1872  00002F                     ___llmod@counter:
  1873                           	opt stack 0
  1874  00002F                     strcpy@from:
  1875                           	opt stack 0
  1876  00002F                     I2C_Master_Init@clockFreq:
  1877                           	opt stack 0
  1878                           
  1879                           ; 4 bytes @ 0x2E
  1880  00002F                     	ds	1
  1881  000030                     ??__doprnt:
  1882  000030                     lcd_set_cursor@x:
  1883                           	opt stack 0
  1884  000030                     I2C_Send@i:
  1885                           	opt stack 0
  1886                           
  1887                           ; 2 bytes @ 0x2F
  1888  000030                     	ds	1
  1889  000031                     ??_RTC_getSeconds:
  1890  000031                     strcpy@cp:
  1891                           	opt stack 0
  1892                           
  1893                           ; 2 bytes @ 0x30
  1894  000031                     	ds	1
  1895  000032                     ??_viewLogs:
  1896                           
  1897                           ; 1 bytes @ 0x31
  1898  000032                     	ds	1
  1899                           tblptru	equ	0xFF8
  1900                           tblptrh	equ	0xFF7
  1901                           tblptrl	equ	0xFF6
  1902                           tablat	equ	0xFF5
  1903                           postinc0	equ	0xFEE
  1904                           wreg	equ	0xFE8
  1905                           postdec1	equ	0xFE5
  1906                           fsr1l	equ	0xFE1
  1907                           
  1908 ;;
  1909 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1910 ;;
  1911 ;; *************** function _main *****************
  1912 ;; Defined at:
  1913 ;;		line 209 in file "main.c"
  1914 ;; Parameters:    Size  Location     Type
  1915 ;;		None
  1916 ;; Auto vars:     Size  Location     Type
  1917 ;;		None
  1918 ;; Return value:  Size  Location     Type
  1919 ;;                  1    wreg      void 
  1920 ;; Registers used:
  1921 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  1922 ;; Tracked objects:
  1923 ;;		On entry : 0/0
  1924 ;;		On exit  : 0/0
  1925 ;;		Unchanged: 0/0
  1926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1929 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1930 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1931 ;;Total ram usage:        1 bytes
  1932 ;; Hardware stack levels required when called:   10
  1933 ;; This function calls:
  1934 ;;		_I2C_Master_Init
  1935 ;;		_hibernate
  1936 ;;		_initLCD
  1937 ;;		_lcdInst
  1938 ;;		_mainMenu
  1939 ;; This function is called by:
  1940 ;;		Startup code after reset
  1941 ;; This function uses a non-reentrant model
  1942 ;;
  1943                           
  1944                           	psect	text0
  1945  001B5E                     __ptext0:
  1946                           	opt stack 0
  1947  001B5E                     _main:
  1948                           	opt stack 21
  1949                           
  1950                           ;main.c: 214: LATA = 0x00;
  1951                           
  1952                           ;incstack = 0
  1953  001B5E  0E00               	movlw	0
  1954  001B60  6E89               	movwf	3977,c	;volatile
  1955                           
  1956                           ;main.c: 215: LATB = 0x00;
  1957  001B62  0E00               	movlw	0
  1958  001B64  6E8A               	movwf	3978,c	;volatile
  1959                           
  1960                           ;main.c: 216: LATC = 0x00;
  1961  001B66  0E00               	movlw	0
  1962  001B68  6E8B               	movwf	3979,c	;volatile
  1963                           
  1964                           ;main.c: 217: LATD = 0x00;
  1965  001B6A  0E00               	movlw	0
  1966  001B6C  6E8C               	movwf	3980,c	;volatile
  1967                           
  1968                           ;main.c: 218: LATE = 0x00;
  1969  001B6E  0E00               	movlw	0
  1970  001B70  6E8D               	movwf	3981,c	;volatile
  1971                           
  1972                           ;main.c: 221: TRISA = 0xFF;
  1973  001B72  6892               	setf	3986,c	;volatile
  1974                           
  1975                           ;main.c: 222: TRISB = 0b11110111;
  1976  001B74  0EF7               	movlw	247
  1977  001B76  6E93               	movwf	3987,c	;volatile
  1978                           
  1979                           ;main.c: 223: TRISC = 0x00;
  1980  001B78  0E00               	movlw	0
  1981  001B7A  6E94               	movwf	3988,c	;volatile
  1982                           
  1983                           ;main.c: 224: TRISD = 0x00;
  1984  001B7C  0E00               	movlw	0
  1985  001B7E  6E95               	movwf	3989,c	;volatile
  1986                           
  1987                           ;main.c: 225: TRISE = 0x00;
  1988  001B80  0E00               	movlw	0
  1989  001B82  6E96               	movwf	3990,c	;volatile
  1990                           
  1991                           ;main.c: 228: I2C_Master_Init(100000);
  1992  001B84  0EA0               	movlw	160
  1993  001B86  6E2F               	movwf	I2C_Master_Init@clockFreq,c
  1994  001B88  0E86               	movlw	134
  1995  001B8A  6E30               	movwf	I2C_Master_Init@clockFreq+1,c
  1996  001B8C  0E01               	movlw	1
  1997  001B8E  6E31               	movwf	I2C_Master_Init@clockFreq+2,c
  1998  001B90  0E00               	movlw	0
  1999  001B92  6E32               	movwf	I2C_Master_Init@clockFreq+3,c
  2000  001B94  EC57  F00E         	call	_I2C_Master_Init	;wreg free
  2001                           
  2002                           ;main.c: 230: initLCD();
  2003  001B98  ECB3  F00E         	call	_initLCD	;wreg free
  2004                           
  2005                           ;main.c: 232: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2006  001B9C  0E01               	movlw	1
  2007  001B9E  EC01  F010         	call	_lcdInst
  2008  001BA2  0EC3               	movlw	195
  2009  001BA4  0100               	movlb	0	; () banked
  2010  001BA6  6FEE               	movwf	??_main& (0+255),b
  2011  001BA8  0ECD               	movlw	205
  2012  001BAA                     u5347:
  2013  001BAA  2EE8               	decfsz	wreg,f,c
  2014  001BAC  D7FE               	bra	u5347
  2015  001BAE  2FEE               	decfsz	??_main& (0+255),f,b
  2016  001BB0  D7FC               	bra	u5347
  2017                           
  2018                           ;main.c: 233: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2019  001BB2  0E80               	movlw	128
  2020  001BB4  EC01  F010         	call	_lcdInst
  2021  001BB8  0E41               	movlw	65
  2022  001BBA  0100               	movlb	0	; () banked
  2023  001BBC  6FEE               	movwf	??_main& (0+255),b
  2024  001BBE  0EEE               	movlw	238
  2025  001BC0                     u5357:
  2026  001BC0  2EE8               	decfsz	wreg,f,c
  2027  001BC2  D7FE               	bra	u5357
  2028  001BC4  2FEE               	decfsz	??_main& (0+255),f,b
  2029  001BC6  D7FC               	bra	u5357
  2030  001BC8  F000               	nop	
  2031                           
  2032                           ;main.c: 235: hibernate();
  2033  001BCA  EC1B  F00F         	call	_hibernate	;wreg free
  2034                           
  2035                           ;main.c: 236: mainMenu();
  2036  001BCE  ECE2  F005         	call	_mainMenu	;wreg free
  2037  001BD2                     l142:
  2038  001BD2  D7FF               	goto	l142
  2039  001BD4                     __end_of_main:
  2040                           	opt stack 0
  2041                           tblptru	equ	0xFF8
  2042                           tblptrh	equ	0xFF7
  2043                           tblptrl	equ	0xFF6
  2044                           tablat	equ	0xFF5
  2045                           postinc0	equ	0xFEE
  2046                           wreg	equ	0xFE8
  2047                           postdec1	equ	0xFE5
  2048                           fsr1l	equ	0xFE1
  2049                           
  2050 ;; *************** function _mainMenu *****************
  2051 ;; Defined at:
  2052 ;;		line 174 in file "menu.c"
  2053 ;; Parameters:    Size  Location     Type
  2054 ;;		None
  2055 ;; Auto vars:     Size  Location     Type
  2056 ;;  endTime         4   78[BANK1 ] long 
  2057 ;;  startTime       4   74[BANK1 ] long 
  2058 ;;  totalTime       4   70[BANK1 ] long 
  2059 ;;  i               2   86[BANK1 ] int 
  2060 ;;  pressed         2   84[BANK1 ] int 
  2061 ;;  needToPrint     2   82[BANK1 ] int 
  2062 ;; Return value:  Size  Location     Type
  2063 ;;                  1    wreg      void 
  2064 ;; Registers used:
  2065 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2066 ;; Tracked objects:
  2067 ;;		On entry : 0/0
  2068 ;;		On exit  : 0/0
  2069 ;;		Unchanged: 0/0
  2070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2072 ;;      Locals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2073 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2074 ;;      Totals:         0       4      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2075 ;;Total ram usage:       22 bytes
  2076 ;; Hardware stack levels used:    1
  2077 ;; Hardware stack levels required when called:    9
  2078 ;; This function calls:
  2079 ;;		_I2C_Send
  2080 ;;		_RTC_getSeconds
  2081 ;;		_clearing
  2082 ;;		_hibernate
  2083 ;;		_inputEntry
  2084 ;;		_lcdInst
  2085 ;;		_packaging
  2086 ;;		_pollKeypad
  2087 ;;		_printStringLCD
  2088 ;;		_printf
  2089 ;;		_putch
  2090 ;;		_viewLogs
  2091 ;; This function is called by:
  2092 ;;		_main
  2093 ;; This function uses a non-reentrant model
  2094 ;;
  2095                           
  2096                           	psect	text1
  2097  000BC4                     __ptext1:
  2098                           	opt stack 0
  2099  000BC4                     _mainMenu:
  2100                           	opt stack 21
  2101                           
  2102                           ;menu.c: 175: int pressed;
  2103                           ;menu.c: 176: int needToPrint = 1;
  2104                           
  2105                           ;incstack = 0
  2106  000BC4  0E00               	movlw	0
  2107  000BC6  0101               	movlb	1	; () banked
  2108  000BC8  6FF6               	movwf	(mainMenu@needToPrint+1)& (0+255),b
  2109  000BCA  0E01               	movlw	1
  2110  000BCC  6FF5               	movwf	mainMenu@needToPrint& (0+255),b
  2111  000BCE                     
  2112                           ;menu.c: 179: if (needToPrint) {
  2113                           
  2114                           ; BSR set to: 1
  2115  000BCE  0101               	movlb	1	; () banked
  2116  000BD0  51F5               	movf	mainMenu@needToPrint& (0+255),w,b
  2117  000BD2  11F6               	iorwf	(mainMenu@needToPrint+1)& (0+255),w,b
  2118  000BD4  B4D8               	btfsc	status,2,c
  2119  000BD6  D00B               	goto	l387
  2120                           
  2121                           ; BSR set to: 1
  2122                           ;menu.c: 180: printStringLCD("0:Sleep 1:Begin \n2: View Logs");
  2123  000BD8  0EAF               	movlw	low STR_16
  2124  000BDA  6E2D               	movwf	printStringLCD@string,c
  2125  000BDC  0EFE               	movlw	high STR_16
  2126  000BDE  6E2E               	movwf	printStringLCD@string+1,c
  2127  000BE0  EC67  F007         	call	_printStringLCD	;wreg free
  2128                           
  2129                           ;menu.c: 181: needToPrint = 0;
  2130  000BE4  0E00               	movlw	0
  2131  000BE6  0101               	movlb	1	; () banked
  2132  000BE8  6FF6               	movwf	(mainMenu@needToPrint+1)& (0+255),b
  2133  000BEA  0E00               	movlw	0
  2134  000BEC  6FF5               	movwf	mainMenu@needToPrint& (0+255),b
  2135  000BEE                     l387:
  2136                           
  2137                           ; BSR set to: 1
  2138                           ;menu.c: 182: }
  2139                           ;menu.c: 183: pressed = pollKeypad();
  2140                           
  2141                           ; BSR set to: 1
  2142  000BEE  EC87  F00F         	call	_pollKeypad	;wreg free
  2143  000BF2  0100               	movlb	0	; () banked
  2144  000BF4  6FEA               	movwf	??_mainMenu& (0+255),b
  2145  000BF6  51EA               	movf	??_mainMenu& (0+255),w,b
  2146  000BF8  0101               	movlb	1	; () banked
  2147  000BFA  6FF7               	movwf	mainMenu@pressed& (0+255),b
  2148  000BFC  6BF8               	clrf	(mainMenu@pressed+1)& (0+255),b
  2149                           
  2150                           ; BSR set to: 1
  2151                           ;menu.c: 184: putch(pressed);
  2152  000BFE  51F7               	movf	mainMenu@pressed& (0+255),w,b
  2153  000C00  ECF7  F00F         	call	_putch
  2154                           
  2155                           ;menu.c: 185: if (pressed - 48 == 0) {
  2156  000C04  0ED0               	movlw	208
  2157  000C06  0100               	movlb	0	; () banked
  2158  000C08  6FEA               	movwf	??_mainMenu& (0+255),b
  2159  000C0A  0EFF               	movlw	255
  2160  000C0C  6FEB               	movwf	(??_mainMenu+1)& (0+255),b
  2161  000C0E  C1F7  F0EC         	movff	mainMenu@pressed,??_mainMenu+2
  2162  000C12  C1F8  F0ED         	movff	mainMenu@pressed+1,??_mainMenu+3
  2163  000C16  51EA               	movf	??_mainMenu& (0+255),w,b
  2164  000C18  27EC               	addwf	(??_mainMenu+2)& (0+255),f,b
  2165  000C1A  51EB               	movf	(??_mainMenu+1)& (0+255),w,b
  2166  000C1C  23ED               	addwfc	(??_mainMenu+3)& (0+255),f,b
  2167  000C1E  51EC               	movf	(??_mainMenu+2)& (0+255),w,b
  2168  000C20  11ED               	iorwf	(??_mainMenu+3)& (0+255),w,b
  2169  000C22  A4D8               	btfss	status,2,c
  2170  000C24  D003               	goto	l388
  2171                           
  2172                           ; BSR set to: 0
  2173                           ;menu.c: 186: hibernate();
  2174  000C26  EC1B  F00F         	call	_hibernate	;wreg free
  2175  000C2A  D7CC               	goto	_mainMenu
  2176  000C2C                     l388:
  2177                           
  2178                           ; BSR set to: 1
  2179  000C2C  0ED0               	movlw	208
  2180  000C2E  0100               	movlb	0	; () banked
  2181  000C30  6FEA               	movwf	??_mainMenu& (0+255),b
  2182  000C32  0EFF               	movlw	255
  2183  000C34  6FEB               	movwf	(??_mainMenu+1)& (0+255),b
  2184  000C36  C1F7  F0EC         	movff	mainMenu@pressed,??_mainMenu+2
  2185  000C3A  C1F8  F0ED         	movff	mainMenu@pressed+1,??_mainMenu+3
  2186  000C3E  51EA               	movf	??_mainMenu& (0+255),w,b
  2187  000C40  27EC               	addwf	(??_mainMenu+2)& (0+255),f,b
  2188  000C42  51EB               	movf	(??_mainMenu+1)& (0+255),w,b
  2189  000C44  23ED               	addwfc	(??_mainMenu+3)& (0+255),f,b
  2190  000C46  05EC               	decf	(??_mainMenu+2)& (0+255),w,b
  2191  000C48  11ED               	iorwf	(??_mainMenu+3)& (0+255),w,b
  2192  000C4A  A4D8               	btfss	status,2,c
  2193  000C4C  D12B               	goto	l390
  2194                           
  2195                           ; BSR set to: 0
  2196                           ;menu.c: 189: inputEntry();
  2197  000C4E  EC09  F000         	call	_inputEntry	;wreg free
  2198                           
  2199                           ;menu.c: 190: long startTime = RTC_getSeconds();
  2200  000C52  EC72  F00D         	call	_RTC_getSeconds	;wreg free
  2201  000C56  C02D  F1ED         	movff	?_RTC_getSeconds,mainMenu@startTime
  2202  000C5A  C02E  F1EE         	movff	?_RTC_getSeconds+1,mainMenu@startTime+1
  2203  000C5E  C02F  F1EF         	movff	?_RTC_getSeconds+2,mainMenu@startTime+2
  2204  000C62  C030  F1F0         	movff	?_RTC_getSeconds+3,mainMenu@startTime+3
  2205                           
  2206                           ;menu.c: 191: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2207  000C66  0E01               	movlw	1
  2208  000C68  EC01  F010         	call	_lcdInst
  2209  000C6C  0EC3               	movlw	195
  2210  000C6E  0100               	movlb	0	; () banked
  2211  000C70  6FEA               	movwf	??_mainMenu& (0+255),b
  2212  000C72  0ECD               	movlw	205
  2213  000C74                     u5367:
  2214  000C74  2EE8               	decfsz	wreg,f,c
  2215  000C76  D7FE               	bra	u5367
  2216  000C78  2FEA               	decfsz	??_mainMenu& (0+255),f,b
  2217  000C7A  D7FC               	bra	u5367
  2218                           
  2219                           ;menu.c: 192: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2220  000C7C  0E80               	movlw	128
  2221  000C7E  EC01  F010         	call	_lcdInst
  2222  000C82  0E41               	movlw	65
  2223  000C84  0100               	movlb	0	; () banked
  2224  000C86  6FEA               	movwf	??_mainMenu& (0+255),b
  2225  000C88  0EEE               	movlw	238
  2226  000C8A                     u5377:
  2227  000C8A  2EE8               	decfsz	wreg,f,c
  2228  000C8C  D7FE               	bra	u5377
  2229  000C8E  2FEA               	decfsz	??_mainMenu& (0+255),f,b
  2230  000C90  D7FC               	bra	u5377
  2231  000C92  F000               	nop	
  2232                           
  2233                           ;menu.c: 193: printf("Starting packaging");
  2234  000C94  0E2B               	movlw	low STR_17
  2235  000C96  0100               	movlb	0	; () banked
  2236  000C98  6F9D               	movwf	printf@f& (0+255),b
  2237  000C9A  0EFF               	movlw	high STR_17
  2238  000C9C  6F9E               	movwf	(printf@f+1)& (0+255),b
  2239  000C9E  EC39  F00F         	call	_printf	;wreg free
  2240                           
  2241                           ;menu.c: 194: I2C_Send(nanoAddr, "\1Starting packaging\0");
  2242  000CA2  0E16               	movlw	low STR_18
  2243  000CA4  6E2A               	movwf	I2C_Send@data,c
  2244  000CA6  0EFF               	movlw	high STR_18
  2245  000CA8  6E2B               	movwf	I2C_Send@data+1,c
  2246  000CAA  0ECF               	movlw	low _nanoAddr
  2247  000CAC  6EF6               	movwf	tblptrl,c
  2248  000CAE                     	if	1	;There is more than 1 active tblptr byte
  2249  000CAE  0EFC               	movlw	high _nanoAddr
  2250  000CB0  6EF7               	movwf	tblptrh,c
  2251  000CB2                     	endif
  2252  000CB2                     	if	1	;There are 3 active tblptr bytes
  2253  000CB2  0E00               	movlw	low (_nanoAddr shr (0+16))
  2254  000CB4  6EF8               	movwf	tblptru,c
  2255  000CB6                     	endif
  2256  000CB6  0008               	tblrd		*
  2257  000CB8  50F5               	movf	tablat,w,c
  2258  000CBA  ECA8  F00C         	call	_I2C_Send
  2259                           
  2260                           ;menu.c: 195: packaging();
  2261  000CBE  EC01  F00A         	call	_packaging	;wreg free
  2262                           
  2263                           ;menu.c: 196: clearing();
  2264  000CC2  ECC9  F008         	call	_clearing	;wreg free
  2265                           
  2266                           ;menu.c: 197: long endTime = RTC_getSeconds();
  2267  000CC6  EC72  F00D         	call	_RTC_getSeconds	;wreg free
  2268  000CCA  C02D  F1F1         	movff	?_RTC_getSeconds,mainMenu@endTime
  2269  000CCE  C02E  F1F2         	movff	?_RTC_getSeconds+1,mainMenu@endTime+1
  2270  000CD2  C02F  F1F3         	movff	?_RTC_getSeconds+2,mainMenu@endTime+2
  2271  000CD6  C030  F1F4         	movff	?_RTC_getSeconds+3,mainMenu@endTime+3
  2272                           
  2273                           ;menu.c: 198: long totalTime = endTime - startTime;
  2274  000CDA  C1ED  F0EA         	movff	mainMenu@startTime,??_mainMenu
  2275  000CDE  C1EE  F0EB         	movff	mainMenu@startTime+1,??_mainMenu+1
  2276  000CE2  C1EF  F0EC         	movff	mainMenu@startTime+2,??_mainMenu+2
  2277  000CE6  C1F0  F0ED         	movff	mainMenu@startTime+3,??_mainMenu+3
  2278  000CEA  0100               	movlb	0	; () banked
  2279  000CEC  1FEA               	comf	??_mainMenu& (0+255),f,b
  2280  000CEE  1FEB               	comf	(??_mainMenu+1)& (0+255),f,b
  2281  000CF0  1FEC               	comf	(??_mainMenu+2)& (0+255),f,b
  2282  000CF2  1FED               	comf	(??_mainMenu+3)& (0+255),f,b
  2283  000CF4  2BEA               	incf	??_mainMenu& (0+255),f,b
  2284  000CF6  0E00               	movlw	0
  2285  000CF8  23EB               	addwfc	(??_mainMenu+1)& (0+255),f,b
  2286  000CFA  23EC               	addwfc	(??_mainMenu+2)& (0+255),f,b
  2287  000CFC  23ED               	addwfc	(??_mainMenu+3)& (0+255),f,b
  2288  000CFE  0101               	movlb	1	; () banked
  2289  000D00  51F1               	movf	mainMenu@endTime& (0+255),w,b
  2290  000D02  0100               	movlb	0	; () banked
  2291  000D04  25EA               	addwf	??_mainMenu& (0+255),w,b
  2292  000D06  0101               	movlb	1	; () banked
  2293  000D08  6FE9               	movwf	mainMenu@totalTime& (0+255),b
  2294  000D0A  51F2               	movf	(mainMenu@endTime+1)& (0+255),w,b
  2295  000D0C  0100               	movlb	0	; () banked
  2296  000D0E  21EB               	addwfc	(??_mainMenu+1)& (0+255),w,b
  2297  000D10  0101               	movlb	1	; () banked
  2298  000D12  6FEA               	movwf	(mainMenu@totalTime+1)& (0+255),b
  2299  000D14  51F3               	movf	(mainMenu@endTime+2)& (0+255),w,b
  2300  000D16  0100               	movlb	0	; () banked
  2301  000D18  21EC               	addwfc	(??_mainMenu+2)& (0+255),w,b
  2302  000D1A  0101               	movlb	1	; () banked
  2303  000D1C  6FEB               	movwf	(mainMenu@totalTime+2)& (0+255),b
  2304  000D1E  51F4               	movf	(mainMenu@endTime+3)& (0+255),w,b
  2305  000D20  0100               	movlb	0	; () banked
  2306  000D22  21ED               	addwfc	(??_mainMenu+3)& (0+255),w,b
  2307  000D24  0101               	movlb	1	; () banked
  2308  000D26  6FEC               	movwf	(mainMenu@totalTime+3)& (0+255),b
  2309                           
  2310                           ; BSR set to: 1
  2311                           ;menu.c: 200: printf("Summary:");
  2312  000D28  0EE3               	movlw	low STR_19
  2313  000D2A  0100               	movlb	0	; () banked
  2314  000D2C  6F9D               	movwf	printf@f& (0+255),b
  2315  000D2E  0EFF               	movlw	high STR_19
  2316  000D30  6F9E               	movwf	(printf@f+1)& (0+255),b
  2317  000D32  EC39  F00F         	call	_printf	;wreg free
  2318                           
  2319                           ;menu.c: 201: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2320  000D36  0E33               	movlw	51
  2321  000D38  0100               	movlb	0	; () banked
  2322  000D3A  6FEB               	movwf	(??_mainMenu+1)& (0+255),b
  2323  000D3C  0EBB               	movlw	187
  2324  000D3E  6FEA               	movwf	??_mainMenu& (0+255),b
  2325  000D40  0EDF               	movlw	223
  2326  000D42                     u5387:
  2327  000D42  2EE8               	decfsz	wreg,f,c
  2328  000D44  D7FE               	bra	u5387
  2329  000D46  2FEA               	decfsz	??_mainMenu& (0+255),f,b
  2330  000D48  D7FC               	bra	u5387
  2331  000D4A  2FEB               	decfsz	(??_mainMenu+1)& (0+255),f,b
  2332  000D4C  D7FA               	bra	u5387
  2333  000D4E  D000               	nop2	
  2334  000D50                     
  2335                           ;menu.c: 204: for (i = 0; i < 8; i++) {
  2336  000D50  0E00               	movlw	0
  2337  000D52  0101               	movlb	1	; () banked
  2338  000D54  6FFA               	movwf	(mainMenu@i+1)& (0+255),b
  2339  000D56  0E00               	movlw	0
  2340  000D58  6FF9               	movwf	mainMenu@i& (0+255),b
  2341  000D5A                     l4314:
  2342                           
  2343                           ; BSR set to: 1
  2344  000D5A  BFFA               	btfsc	(mainMenu@i+1)& (0+255),7,b
  2345  000D5C  D006               	goto	l392
  2346  000D5E  51FA               	movf	(mainMenu@i+1)& (0+255),w,b
  2347  000D60  E15C               	bnz	l4332
  2348  000D62  0E08               	movlw	8
  2349  000D64  5DF9               	subwf	mainMenu@i& (0+255),w,b
  2350  000D66  B0D8               	btfsc	status,0,c
  2351  000D68  D058               	goto	u5140
  2352  000D6A                     l392:
  2353                           
  2354                           ; BSR set to: 1
  2355                           ;menu.c: 205: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2356                           
  2357                           ; BSR set to: 1
  2358  000D6A  0E01               	movlw	1
  2359  000D6C  EC01  F010         	call	_lcdInst
  2360  000D70  0EC3               	movlw	195
  2361  000D72  0100               	movlb	0	; () banked
  2362  000D74  6FEA               	movwf	??_mainMenu& (0+255),b
  2363  000D76  0ECD               	movlw	205
  2364  000D78                     u5397:
  2365  000D78  2EE8               	decfsz	wreg,f,c
  2366  000D7A  D7FE               	bra	u5397
  2367  000D7C  2FEA               	decfsz	??_mainMenu& (0+255),f,b
  2368  000D7E  D7FC               	bra	u5397
  2369                           
  2370                           ;menu.c: 206: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2371  000D80  0E80               	movlw	128
  2372  000D82  EC01  F010         	call	_lcdInst
  2373  000D86  0E41               	movlw	65
  2374  000D88  0100               	movlb	0	; () banked
  2375  000D8A  6FEA               	movwf	??_mainMenu& (0+255),b
  2376  000D8C  0EEE               	movlw	238
  2377  000D8E                     u5407:
  2378  000D8E  2EE8               	decfsz	wreg,f,c
  2379  000D90  D7FE               	bra	u5407
  2380  000D92  2FEA               	decfsz	??_mainMenu& (0+255),f,b
  2381  000D94  D7FC               	bra	u5407
  2382  000D96  F000               	nop	
  2383                           
  2384                           ;menu.c: 207: printf("C%d: %s x%d", i+1, fSLookup[params.toFill[i]], params.setMultiple[
      +                          i]);
  2385  000D98  0ECC               	movlw	low STR_20
  2386  000D9A  0100               	movlb	0	; () banked
  2387  000D9C  6F9D               	movwf	printf@f& (0+255),b
  2388  000D9E  0EFF               	movlw	high STR_20
  2389  000DA0  6F9E               	movwf	(printf@f+1)& (0+255),b
  2390  000DA2  0E01               	movlw	1
  2391  000DA4  0101               	movlb	1	; () banked
  2392  000DA6  25F9               	addwf	mainMenu@i& (0+255),w,b
  2393  000DA8  0100               	movlb	0	; () banked
  2394  000DAA  6F9F               	movwf	(?_printf+2)& (0+255),b
  2395  000DAC  0E00               	movlw	0
  2396  000DAE  0101               	movlb	1	; () banked
  2397  000DB0  21FA               	addwfc	(mainMenu@i+1)& (0+255),w,b
  2398  000DB2  0100               	movlb	0	; () banked
  2399  000DB4  6FA0               	movwf	(?_printf+3)& (0+255),b
  2400  000DB6  0E35               	movlw	low (_params+2)
  2401  000DB8  0101               	movlb	1	; () banked
  2402  000DBA  25F9               	addwf	mainMenu@i& (0+255),w,b
  2403  000DBC  6ED9               	movwf	fsr2l,c
  2404  000DBE  0E00               	movlw	high (_params+2)
  2405  000DC0  21FA               	addwfc	(mainMenu@i+1)& (0+255),w,b
  2406  000DC2  6EDA               	movwf	fsr2h,c
  2407  000DC4  50DF               	movf	indf2,w,c
  2408  000DC6  0100               	movlb	0	; () banked
  2409  000DC8  6FEA               	movwf	??_mainMenu& (0+255),b
  2410  000DCA  51EA               	movf	??_mainMenu& (0+255),w,b
  2411  000DCC  0D05               	mullw	5
  2412  000DCE  0E3A               	movlw	low _fSLookup
  2413  000DD0  24F3               	addwf	prodl,w,c
  2414  000DD2  6FA1               	movwf	(?_printf+4)& (0+255),b
  2415  000DD4  0E01               	movlw	high _fSLookup
  2416  000DD6  20F4               	addwfc	prodh,w,c
  2417  000DD8  6FA2               	movwf	(?_printf+5)& (0+255),b
  2418  000DDA  90D8               	bcf	status,0,c
  2419  000DDC  0101               	movlb	1	; () banked
  2420  000DDE  35F9               	rlcf	mainMenu@i& (0+255),w,b
  2421  000DE0  6ED9               	movwf	fsr2l,c
  2422  000DE2  35FA               	rlcf	(mainMenu@i+1)& (0+255),w,b
  2423  000DE4  6EDA               	movwf	fsr2h,c
  2424  000DE6  0E3D               	movlw	low (_params+10)
  2425  000DE8  26D9               	addwf	fsr2l,f,c
  2426  000DEA  0E00               	movlw	high (_params+10)
  2427  000DEC  22DA               	addwfc	fsr2h,f,c
  2428  000DEE  CFDE F0A3          	movff	postinc2,?_printf+6
  2429  000DF2  CFDD F0A4          	movff	postdec2,?_printf+7
  2430  000DF6  EC39  F00F         	call	_printf	;wreg free
  2431                           
  2432                           ;menu.c: 208: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2433  000DFA  0E66               	movlw	102
  2434  000DFC  0100               	movlb	0	; () banked
  2435  000DFE  6FEB               	movwf	(??_mainMenu+1)& (0+255),b
  2436  000E00  0E76               	movlw	118
  2437  000E02  6FEA               	movwf	??_mainMenu& (0+255),b
  2438  000E04  0EC1               	movlw	193
  2439  000E06                     u5417:
  2440  000E06  2EE8               	decfsz	wreg,f,c
  2441  000E08  D7FE               	bra	u5417
  2442  000E0A  2FEA               	decfsz	??_mainMenu& (0+255),f,b
  2443  000E0C  D7FC               	bra	u5417
  2444  000E0E  2FEB               	decfsz	(??_mainMenu+1)& (0+255),f,b
  2445  000E10  D7FA               	bra	u5417
  2446  000E12  0101               	movlb	1	; () banked
  2447  000E14  4BF9               	infsnz	mainMenu@i& (0+255),f,b
  2448  000E16  2BFA               	incf	(mainMenu@i+1)& (0+255),f,b
  2449  000E18  D7A0               	goto	l4314
  2450  000E1A                     u5140:
  2451  000E1A                     l4332:
  2452                           
  2453                           ; BSR set to: 1
  2454                           ;menu.c: 209: }
  2455                           ;menu.c: 211: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2456  000E1A  0E01               	movlw	1
  2457  000E1C  EC01  F010         	call	_lcdInst
  2458  000E20  0EC3               	movlw	195
  2459  000E22  0100               	movlb	0	; () banked
  2460  000E24  6FEA               	movwf	??_mainMenu& (0+255),b
  2461  000E26  0ECD               	movlw	205
  2462  000E28                     u5427:
  2463  000E28  2EE8               	decfsz	wreg,f,c
  2464  000E2A  D7FE               	bra	u5427
  2465  000E2C  2FEA               	decfsz	??_mainMenu& (0+255),f,b
  2466  000E2E  D7FC               	bra	u5427
  2467                           
  2468                           ;menu.c: 212: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2469  000E30  0E80               	movlw	128
  2470  000E32  EC01  F010         	call	_lcdInst
  2471  000E36  0E41               	movlw	65
  2472  000E38  0100               	movlb	0	; () banked
  2473  000E3A  6FEA               	movwf	??_mainMenu& (0+255),b
  2474  000E3C  0EEE               	movlw	238
  2475  000E3E                     u5437:
  2476  000E3E  2EE8               	decfsz	wreg,f,c
  2477  000E40  D7FE               	bra	u5437
  2478  000E42  2FEA               	decfsz	??_mainMenu& (0+255),f,b
  2479  000E44  D7FC               	bra	u5437
  2480  000E46  F000               	nop	
  2481                           
  2482                           ;menu.c: 213: printf("Remaining:");
  2483  000E48  0ED8               	movlw	low STR_21
  2484  000E4A  0100               	movlb	0	; () banked
  2485  000E4C  6F9D               	movwf	printf@f& (0+255),b
  2486  000E4E  0EFF               	movlw	high STR_21
  2487  000E50  6F9E               	movwf	(printf@f+1)& (0+255),b
  2488  000E52  EC39  F00F         	call	_printf	;wreg free
  2489                           
  2490                           ;menu.c: 214: lcdInst(0xC0);;
  2491  000E56  0EC0               	movlw	192
  2492  000E58  EC01  F010         	call	_lcdInst
  2493                           
  2494                           ;menu.c: 215: printf("B%d N%d S%d W%d", extras.b, extras.n, extras.s, extras.w);
  2495  000E5C  0E84               	movlw	low STR_22
  2496  000E5E  0100               	movlb	0	; () banked
  2497  000E60  6F9D               	movwf	printf@f& (0+255),b
  2498  000E62  0EFF               	movlw	high STR_22
  2499  000E64  6F9E               	movwf	(printf@f+1)& (0+255),b
  2500  000E66  C04D  F09F         	movff	_extras,?_printf+2
  2501  000E6A  C04E  F0A0         	movff	_extras+1,?_printf+3
  2502  000E6E  C04F  F0A1         	movff	_extras+2,?_printf+4
  2503  000E72  C050  F0A2         	movff	_extras+3,?_printf+5
  2504  000E76  C051  F0A3         	movff	_extras+4,?_printf+6
  2505  000E7A  C052  F0A4         	movff	_extras+5,?_printf+7
  2506  000E7E  C053  F0A5         	movff	_extras+6,?_printf+8
  2507  000E82  C054  F0A6         	movff	_extras+7,?_printf+9
  2508  000E86  EC39  F00F         	call	_printf	;wreg free
  2509                           
  2510                           ;menu.c: 216: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2511  000E8A  0E66               	movlw	102
  2512  000E8C  0100               	movlb	0	; () banked
  2513  000E8E  6FEB               	movwf	(??_mainMenu+1)& (0+255),b
  2514  000E90  0E76               	movlw	118
  2515  000E92  6FEA               	movwf	??_mainMenu& (0+255),b
  2516  000E94  0EC1               	movlw	193
  2517  000E96                     u5447:
  2518  000E96  2EE8               	decfsz	wreg,f,c
  2519  000E98  D7FE               	bra	u5447
  2520  000E9A  2FEA               	decfsz	??_mainMenu& (0+255),f,b
  2521  000E9C  D7FC               	bra	u5447
  2522  000E9E  2FEB               	decfsz	(??_mainMenu+1)& (0+255),f,b
  2523  000EA0  D7FA               	bra	u5447
  2524  000EA2  D756               	goto	l391
  2525  000EA4                     l390:
  2526  000EA4  0ED0               	movlw	208
  2527  000EA6  0100               	movlb	0	; () banked
  2528  000EA8  6FEA               	movwf	??_mainMenu& (0+255),b
  2529  000EAA  0EFF               	movlw	255
  2530  000EAC  6FEB               	movwf	(??_mainMenu+1)& (0+255),b
  2531  000EAE  C1F7  F0EC         	movff	mainMenu@pressed,??_mainMenu+2
  2532  000EB2  C1F8  F0ED         	movff	mainMenu@pressed+1,??_mainMenu+3
  2533  000EB6  51EA               	movf	??_mainMenu& (0+255),w,b
  2534  000EB8  27EC               	addwf	(??_mainMenu+2)& (0+255),f,b
  2535  000EBA  51EB               	movf	(??_mainMenu+1)& (0+255),w,b
  2536  000EBC  23ED               	addwfc	(??_mainMenu+3)& (0+255),f,b
  2537  000EBE  0E02               	movlw	2
  2538  000EC0  19EC               	xorwf	(??_mainMenu+2)& (0+255),w,b
  2539  000EC2  11ED               	iorwf	(??_mainMenu+3)& (0+255),w,b
  2540  000EC4  A4D8               	btfss	status,2,c
  2541  000EC6  D683               	goto	l386
  2542                           
  2543                           ; BSR set to: 0
  2544                           ;menu.c: 220: viewLogs();
  2545  000EC8  EC9E  F00F         	call	_viewLogs	;wreg free
  2546  000ECC  D67B               	goto	_mainMenu
  2547  000ECE                     __end_of_mainMenu:
  2548                           	opt stack 0
  2549                           tblptru	equ	0xFF8
  2550                           tblptrh	equ	0xFF7
  2551                           tblptrl	equ	0xFF6
  2552                           tablat	equ	0xFF5
  2553                           prodh	equ	0xFF4
  2554                           prodl	equ	0xFF3
  2555                           postinc0	equ	0xFEE
  2556                           wreg	equ	0xFE8
  2557                           postdec1	equ	0xFE5
  2558                           fsr1l	equ	0xFE1
  2559                           indf2	equ	0xFDF
  2560                           postinc2	equ	0xFDE
  2561                           postdec2	equ	0xFDD
  2562                           fsr2h	equ	0xFDA
  2563                           fsr2l	equ	0xFD9
  2564                           status	equ	0xFD8
  2565                           
  2566 ;; *************** function _viewLogs *****************
  2567 ;; Defined at:
  2568 ;;		line 22 in file "menu.c"
  2569 ;; Parameters:    Size  Location     Type
  2570 ;;		None
  2571 ;; Auto vars:     Size  Location     Type
  2572 ;;  pressed         2   10[BANK0 ] int 
  2573 ;; Return value:  Size  Location     Type
  2574 ;;                  1    wreg      void 
  2575 ;; Registers used:
  2576 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2577 ;; Tracked objects:
  2578 ;;		On entry : 0/0
  2579 ;;		On exit  : 0/0
  2580 ;;		Unchanged: 0/0
  2581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2583 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2584 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2585 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2586 ;;Total ram usage:        3 bytes
  2587 ;; Hardware stack levels used:    1
  2588 ;; Hardware stack levels required when called:    7
  2589 ;; This function calls:
  2590 ;;		_pollKeypad
  2591 ;;		_printStringLCD
  2592 ;; This function is called by:
  2593 ;;		_mainMenu
  2594 ;; This function uses a non-reentrant model
  2595 ;;
  2596                           
  2597                           	psect	text2
  2598  001F3C                     __ptext2:
  2599                           	opt stack 0
  2600  001F3C                     _viewLogs:
  2601                           	opt stack 22
  2602                           
  2603                           ;menu.c: 23: printStringLCD("Not there yet\n* to return");
  2604                           
  2605                           ; BSR set to: 1
  2606                           ;incstack = 0
  2607  001F3C  0ECD               	movlw	low STR_13
  2608  001F3E  6E2D               	movwf	printStringLCD@string,c
  2609  001F40  0EFE               	movlw	high STR_13
  2610  001F42  6E2E               	movwf	printStringLCD@string+1,c
  2611  001F44  EC67  F007         	call	_printStringLCD	;wreg free
  2612  001F48                     
  2613                           ;menu.c: 25: int pressed = pollKeypad();
  2614  001F48  EC87  F00F         	call	_pollKeypad	;wreg free
  2615  001F4C  6E32               	movwf	??_viewLogs& (0+255),c
  2616  001F4E  5032               	movf	??_viewLogs,w,c
  2617  001F50  0100               	movlb	0	; () banked
  2618  001F52  6F8A               	movwf	viewLogs@pressed& (0+255),b
  2619  001F54  6B8B               	clrf	(viewLogs@pressed+1)& (0+255),b
  2620                           
  2621                           ; BSR set to: 0
  2622                           ;menu.c: 26: if (pressed == 42) return;
  2623  001F56  0E2A               	movlw	42
  2624  001F58  198A               	xorwf	viewLogs@pressed& (0+255),w,b
  2625  001F5A  118B               	iorwf	(viewLogs@pressed+1)& (0+255),w,b
  2626  001F5C  B4D8               	btfsc	status,2,c
  2627  001F5E  0012               	return	
  2628  001F60  D7F3               	goto	l312
  2629  001F62                     __end_of_viewLogs:
  2630                           	opt stack 0
  2631                           tblptru	equ	0xFF8
  2632                           tblptrh	equ	0xFF7
  2633                           tblptrl	equ	0xFF6
  2634                           tablat	equ	0xFF5
  2635                           prodh	equ	0xFF4
  2636                           prodl	equ	0xFF3
  2637                           postinc0	equ	0xFEE
  2638                           wreg	equ	0xFE8
  2639                           postdec1	equ	0xFE5
  2640                           fsr1l	equ	0xFE1
  2641                           indf2	equ	0xFDF
  2642                           postinc2	equ	0xFDE
  2643                           postdec2	equ	0xFDD
  2644                           fsr2h	equ	0xFDA
  2645                           fsr2l	equ	0xFD9
  2646                           status	equ	0xFD8
  2647                           
  2648 ;; *************** function _printf *****************
  2649 ;; Defined at:
  2650 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\printf.c"
  2651 ;; Parameters:    Size  Location     Type
  2652 ;;  f               2   29[BANK0 ] PTR const unsigned char 
  2653 ;;		 -> STR_22(16), STR_21(11), STR_20(12), STR_19(9), 
  2654 ;;		 -> STR_17(19), packageCompartment@currTimeString(33), STR_1(13), 
  2655 ;; Auto vars:     Size  Location     Type
  2656 ;;  pb              4   41[BANK0 ] struct __prbuf
  2657 ;;  ap              2   39[BANK0 ] PTR void [1]
  2658 ;;		 -> ?_sprintf(2), ?_printf(2), 
  2659 ;; Return value:  Size  Location     Type
  2660 ;;                  2   29[BANK0 ] int 
  2661 ;; Registers used:
  2662 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2663 ;; Tracked objects:
  2664 ;;		On entry : 0/0
  2665 ;;		On exit  : 0/0
  2666 ;;		Unchanged: 0/0
  2667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2668 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2669 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2671 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2672 ;;Total ram usage:       16 bytes
  2673 ;; Hardware stack levels used:    1
  2674 ;; Hardware stack levels required when called:    7
  2675 ;; This function calls:
  2676 ;;		__doprnt
  2677 ;; This function is called by:
  2678 ;;		_mainMenu
  2679 ;;		_packageCompartment
  2680 ;; This function uses a non-reentrant model
  2681 ;;
  2682                           
  2683                           	psect	text3
  2684  001E72                     __ptext3:
  2685                           	opt stack 0
  2686  001E72                     _printf:
  2687                           	opt stack 22
  2688                           
  2689                           ; BSR set to: 0
  2690                           ;incstack = 0
  2691  001E72  0E00               	movlw	0
  2692  001E74  0100               	movlb	0	; () banked
  2693  001E76  6FA9               	movwf	printf@pb& (0+255),b
  2694  001E78  0E00               	movlw	0
  2695  001E7A  6FAA               	movwf	(printf@pb+1)& (0+255),b
  2696  001E7C  0EEE               	movlw	low _putch
  2697  001E7E  6FAB               	movwf	(printf@pb+2)& (0+255),b
  2698  001E80  0E1F               	movlw	high _putch
  2699  001E82  6FAC               	movwf	(printf@pb+3)& (0+255),b
  2700  001E84  0E9F               	movlw	low (?_printf+2)
  2701  001E86  6FA7               	movwf	printf@ap& (0+255),b
  2702  001E88  0E00               	movlw	high (?_printf+2)
  2703  001E8A  6FA8               	movwf	(printf@ap+1)& (0+255),b
  2704                           
  2705                           ; BSR set to: 0
  2706                           ;	Return value of _printf is never used
  2707  001E8C  0EA9               	movlw	low printf@pb
  2708  001E8E  6F8D               	movwf	__doprnt@pb& (0+255),b
  2709  001E90  0E00               	movlw	high printf@pb
  2710  001E92  6F8E               	movwf	(__doprnt@pb+1)& (0+255),b
  2711  001E94  C09D  F08F         	movff	printf@f,__doprnt@f
  2712  001E98  C09E  F090         	movff	printf@f+1,__doprnt@f+1
  2713  001E9C  0EA7               	movlw	low printf@ap
  2714  001E9E  6F91               	movwf	__doprnt@ap& (0+255),b
  2715  001EA0  0E00               	movlw	high printf@ap
  2716  001EA2  6F92               	movwf	(__doprnt@ap+1)& (0+255),b
  2717  001EA4  EC88  F003         	call	__doprnt	;wreg free
  2718  001EA8  0012               	return	
  2719  001EAA                     __end_of_printf:
  2720                           	opt stack 0
  2721                           tblptru	equ	0xFF8
  2722                           tblptrh	equ	0xFF7
  2723                           tblptrl	equ	0xFF6
  2724                           tablat	equ	0xFF5
  2725                           prodh	equ	0xFF4
  2726                           prodl	equ	0xFF3
  2727                           postinc0	equ	0xFEE
  2728                           wreg	equ	0xFE8
  2729                           postdec1	equ	0xFE5
  2730                           fsr1l	equ	0xFE1
  2731                           indf2	equ	0xFDF
  2732                           postinc2	equ	0xFDE
  2733                           postdec2	equ	0xFDD
  2734                           fsr2h	equ	0xFDA
  2735                           fsr2l	equ	0xFD9
  2736                           status	equ	0xFD8
  2737                           
  2738 ;; *************** function _packaging *****************
  2739 ;; Defined at:
  2740 ;;		line 105 in file "main.c"
  2741 ;; Parameters:    Size  Location     Type
  2742 ;;		None
  2743 ;; Auto vars:     Size  Location     Type
  2744 ;;  msg            34    0[BANK1 ] unsigned char [34]
  2745 ;;  msg2           32   34[BANK1 ] unsigned char [32]
  2746 ;;  set             2   66[BANK1 ] PTR unsigned char 
  2747 ;;		 -> fastenerMatrix(84), 
  2748 ;;  compartmentN    2   68[BANK1 ] int 
  2749 ;; Return value:  Size  Location     Type
  2750 ;;                  1    wreg      void 
  2751 ;; Registers used:
  2752 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2753 ;; Tracked objects:
  2754 ;;		On entry : 0/0
  2755 ;;		On exit  : 0/0
  2756 ;;		Unchanged: 0/0
  2757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2759 ;;      Locals:         0       0      70       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2760 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2761 ;;      Totals:         0       6      70       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2762 ;;Total ram usage:       76 bytes
  2763 ;; Hardware stack levels used:    1
  2764 ;; Hardware stack levels required when called:    8
  2765 ;; This function calls:
  2766 ;;		_I2C_Send
  2767 ;;		_sprintf
  2768 ;; This function is called by:
  2769 ;;		_mainMenu
  2770 ;; This function uses a non-reentrant model
  2771 ;;
  2772                           
  2773                           	psect	text4
  2774  001402                     __ptext4:
  2775                           	opt stack 0
  2776  001402                     _packaging:
  2777                           	opt stack 21
  2778                           
  2779                           ;main.c: 106: int compartmentNum;
  2780                           ;main.c: 111: dispensed.b = 0;
  2781                           
  2782                           ;incstack = 0
  2783  001402  0E00               	movlw	0
  2784  001404  0100               	movlb	0	; () banked
  2785  001406  6FF0               	movwf	(_dispensed+1)& (0+255),b
  2786  001408  0E00               	movlw	0
  2787  00140A  6FEF               	movwf	_dispensed& (0+255),b
  2788                           
  2789                           ;main.c: 112: dispensed.n = 0;
  2790  00140C  0E00               	movlw	0
  2791  00140E  6FF2               	movwf	(_dispensed+3)& (0+255),b
  2792  001410  0E00               	movlw	0
  2793  001412  6FF1               	movwf	(_dispensed+2)& (0+255),b
  2794                           
  2795                           ;main.c: 113: dispensed.s = 0;
  2796  001414  0E00               	movlw	0
  2797  001416  6FF4               	movwf	(_dispensed+5)& (0+255),b
  2798  001418  0E00               	movlw	0
  2799  00141A  6FF3               	movwf	(_dispensed+4)& (0+255),b
  2800                           
  2801                           ;main.c: 114: dispensed.w = 0;
  2802  00141C  0E00               	movlw	0
  2803  00141E  6FF6               	movwf	(_dispensed+7)& (0+255),b
  2804  001420  0E00               	movlw	0
  2805  001422  6FF5               	movwf	(_dispensed+6)& (0+255),b
  2806                           
  2807                           ; BSR set to: 0
  2808                           ;main.c: 116: I2C_Send(nanoAddr, "\1Entered the packaging function\0");
  2809  001424  0E8E               	movlw	low STR_9
  2810  001426  6E2A               	movwf	I2C_Send@data,c
  2811  001428  0EFE               	movlw	high STR_9
  2812  00142A  6E2B               	movwf	I2C_Send@data+1,c
  2813  00142C  0ECF               	movlw	low _nanoAddr
  2814  00142E  6EF6               	movwf	tblptrl,c
  2815  001430                     	if	1	;There is more than 1 active tblptr byte
  2816  001430  0EFC               	movlw	high _nanoAddr
  2817  001432  6EF7               	movwf	tblptrh,c
  2818  001434                     	endif
  2819  001434                     	if	1	;There are 3 active tblptr bytes
  2820  001434  0E00               	movlw	low (_nanoAddr shr (0+16))
  2821  001436  6EF8               	movwf	tblptru,c
  2822  001438                     	endif
  2823  001438  0008               	tblrd		*
  2824  00143A  50F5               	movf	tablat,w,c
  2825  00143C  ECA8  F00C         	call	_I2C_Send
  2826                           
  2827                           ;main.c: 118: for (compartmentNum = 8; compartmentNum > 0; compartmentNum--) {
  2828  001440  0E00               	movlw	0
  2829  001442  0101               	movlb	1	; () banked
  2830  001444  6FE8               	movwf	(packaging@compartmentNum+1)& (0+255),b
  2831  001446  0E08               	movlw	8
  2832  001448  6FE7               	movwf	packaging@compartmentNum& (0+255),b
  2833                           
  2834                           ; BSR set to: 1
  2835  00144A  BFE8               	btfsc	(packaging@compartmentNum+1)& (0+255),7,b
  2836  00144C  0012               	return	
  2837  00144E  51E8               	movf	(packaging@compartmentNum+1)& (0+255),w,b
  2838  001450  E103               	bnz	l3904
  2839  001452  05E7               	decf	packaging@compartmentNum& (0+255),w,b
  2840  001454  A0D8               	btfss	status,0,c
  2841  001456  0012               	return	
  2842  001458                     l3904:
  2843                           
  2844                           ; BSR set to: 1
  2845                           ;main.c: 119: I2C_Send(nanoAddr, "\1Loop\0");
  2846  001458  0EF3               	movlw	low STR_10
  2847  00145A  6E2A               	movwf	I2C_Send@data,c
  2848  00145C  0EFF               	movlw	high STR_10
  2849  00145E  6E2B               	movwf	I2C_Send@data+1,c
  2850  001460  0ECF               	movlw	low _nanoAddr
  2851  001462  6EF6               	movwf	tblptrl,c
  2852  001464                     	if	1	;There is more than 1 active tblptr byte
  2853  001464  0EFC               	movlw	high _nanoAddr
  2854  001466  6EF7               	movwf	tblptrh,c
  2855  001468                     	endif
  2856  001468                     	if	1	;There are 3 active tblptr bytes
  2857  001468  0E00               	movlw	low (_nanoAddr shr (0+16))
  2858  00146A  6EF8               	movwf	tblptru,c
  2859  00146C                     	endif
  2860  00146C  0008               	tblrd		*
  2861  00146E  50F5               	movf	tablat,w,c
  2862  001470  ECA8  F00C         	call	_I2C_Send
  2863                           
  2864                           ;main.c: 120: char msg[] = "\1Started packaging compartment x\0";
  2865  001474  EE21  F000         	lfsr	2,packaging@F3188
  2866  001478  EE11  F0A3         	lfsr	1,packaging@msg
  2867  00147C  0E21               	movlw	33
  2868  00147E                     u4501:
  2869  00147E  CFDB FFE3          	movff	plusw2,plusw1
  2870  001482  06E8               	decf	wreg,f,c
  2871  001484  E2FC               	bc	u4501
  2872                           
  2873                           ;main.c: 121: msg[31] = compartmentNum + 48;
  2874  001486  0101               	movlb	1	; () banked
  2875  001488  51E7               	movf	packaging@compartmentNum& (0+255),w,b
  2876  00148A  0F30               	addlw	48
  2877  00148C  6FC2               	movwf	(packaging@msg+31)& (0+255),b
  2878                           
  2879                           ; BSR set to: 1
  2880                           ;main.c: 122: I2C_Send(nanoAddr, msg);
  2881  00148E  0EA3               	movlw	low packaging@msg
  2882  001490  6E2A               	movwf	I2C_Send@data,c
  2883  001492  0E01               	movlw	high packaging@msg
  2884  001494  6E2B               	movwf	I2C_Send@data+1,c
  2885  001496  0ECF               	movlw	low _nanoAddr
  2886  001498  6EF6               	movwf	tblptrl,c
  2887  00149A                     	if	1	;There is more than 1 active tblptr byte
  2888  00149A  0EFC               	movlw	high _nanoAddr
  2889  00149C  6EF7               	movwf	tblptrh,c
  2890  00149E                     	endif
  2891  00149E                     	if	1	;There are 3 active tblptr bytes
  2892  00149E  0E00               	movlw	low (_nanoAddr shr (0+16))
  2893  0014A0  6EF8               	movwf	tblptru,c
  2894  0014A2                     	endif
  2895  0014A2  0008               	tblrd		*
  2896  0014A4  50F5               	movf	tablat,w,c
  2897  0014A6  ECA8  F00C         	call	_I2C_Send
  2898                           
  2899                           ;main.c: 125: char * set = fastenerMatrix[params.toFill[compartmentNum-1]];
  2900  0014AA  0EFF               	movlw	255
  2901  0014AC  0100               	movlb	0	; () banked
  2902  0014AE  6FAF               	movwf	??_packaging& (0+255),b
  2903  0014B0  0EFF               	movlw	255
  2904  0014B2  6FB0               	movwf	(??_packaging+1)& (0+255),b
  2905  0014B4  C1E7  F0B1         	movff	packaging@compartmentNum,??_packaging+2
  2906  0014B8  C1E8  F0B2         	movff	packaging@compartmentNum+1,??_packaging+3
  2907  0014BC  51AF               	movf	??_packaging& (0+255),w,b
  2908  0014BE  27B1               	addwf	(??_packaging+2)& (0+255),f,b
  2909  0014C0  51B0               	movf	(??_packaging+1)& (0+255),w,b
  2910  0014C2  23B2               	addwfc	(??_packaging+3)& (0+255),f,b
  2911  0014C4  0E35               	movlw	low (_params+2)
  2912  0014C6  25B1               	addwf	(??_packaging+2)& (0+255),w,b
  2913  0014C8  6ED9               	movwf	fsr2l,c
  2914  0014CA  0E00               	movlw	high (_params+2)
  2915  0014CC  21B2               	addwfc	(??_packaging+3)& (0+255),w,b
  2916  0014CE  6EDA               	movwf	fsr2h,c
  2917  0014D0  50DF               	movf	indf2,w,c
  2918  0014D2  6FB3               	movwf	(??_packaging+4)& (0+255),b
  2919  0014D4  51B3               	movf	(??_packaging+4)& (0+255),w,b
  2920  0014D6  0D04               	mullw	4
  2921  0014D8  0E3A               	movlw	low _fastenerMatrix
  2922  0014DA  24F3               	addwf	prodl,w,c
  2923  0014DC  0101               	movlb	1	; () banked
  2924  0014DE  6FE5               	movwf	packaging@set& (0+255),b
  2925  0014E0  0EFE               	movlw	high _fastenerMatrix
  2926  0014E2  20F4               	addwfc	prodh,w,c
  2927  0014E4  6FE6               	movwf	(packaging@set+1)& (0+255),b
  2928                           
  2929                           ; BSR set to: 1
  2930                           ;main.c: 126: char msg2[32];
  2931                           ;main.c: 127: sprintf(msg2, "\1B:%d N:%d S:%d W:%d\0", set[0], set[1], set[2], set[3]);
  2932  0014E6  0EC5               	movlw	low packaging@msg2
  2933  0014E8  0100               	movlb	0	; () banked
  2934  0014EA  6F9D               	movwf	sprintf@wh& (0+255),b
  2935  0014EC  0E01               	movlw	high packaging@msg2
  2936  0014EE  6F9E               	movwf	(sprintf@wh+1)& (0+255),b
  2937  0014F0  0E00               	movlw	low STR_11
  2938  0014F2  6F9F               	movwf	sprintf@f& (0+255),b
  2939  0014F4  0EFF               	movlw	high STR_11
  2940  0014F6  6FA0               	movwf	(sprintf@f+1)& (0+255),b
  2941  0014F8  C1E5  FFF6         	movff	packaging@set,tblptrl
  2942  0014FC  C1E6  FFF7         	movff	packaging@set+1,tblptrh
  2943  001500                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2944  001500  6AF8               	clrf	tblptru,c
  2945  001502                     	endif
  2946  001502                     	if	0	;tblptru may be non-zero
  2947  001502                     	endif
  2948  001502  0008               	tblrd		*
  2949  001504  50F5               	movf	tablat,w,c
  2950  001506  6FA1               	movwf	(?_sprintf+4)& (0+255),b
  2951  001508  6BA2               	clrf	(?_sprintf+5)& (0+255),b
  2952  00150A  0E01               	movlw	1
  2953  00150C  0101               	movlb	1	; () banked
  2954  00150E  25E5               	addwf	packaging@set& (0+255),w,b
  2955  001510  0100               	movlb	0	; () banked
  2956  001512  6FAF               	movwf	??_packaging& (0+255),b
  2957  001514  0E00               	movlw	0
  2958  001516  0101               	movlb	1	; () banked
  2959  001518  21E6               	addwfc	(packaging@set+1)& (0+255),w,b
  2960  00151A  0100               	movlb	0	; () banked
  2961  00151C  6FB0               	movwf	(??_packaging+1)& (0+255),b
  2962  00151E  C0AF  FFF6         	movff	??_packaging,tblptrl
  2963  001522  C0B0  FFF7         	movff	??_packaging+1,tblptrh
  2964  001526                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2965  001526  6AF8               	clrf	tblptru,c
  2966  001528                     	endif
  2967  001528                     	if	0	;tblptru may be non-zero
  2968  001528                     	endif
  2969  001528  0008               	tblrd		*
  2970  00152A  50F5               	movf	tablat,w,c
  2971  00152C  6FA3               	movwf	(?_sprintf+6)& (0+255),b
  2972  00152E  6BA4               	clrf	(?_sprintf+7)& (0+255),b
  2973  001530  0E02               	movlw	2
  2974  001532  0101               	movlb	1	; () banked
  2975  001534  25E5               	addwf	packaging@set& (0+255),w,b
  2976  001536  0100               	movlb	0	; () banked
  2977  001538  6FB1               	movwf	(??_packaging+2)& (0+255),b
  2978  00153A  0E00               	movlw	0
  2979  00153C  0101               	movlb	1	; () banked
  2980  00153E  21E6               	addwfc	(packaging@set+1)& (0+255),w,b
  2981  001540  0100               	movlb	0	; () banked
  2982  001542  6FB2               	movwf	(??_packaging+3)& (0+255),b
  2983  001544  C0B1  FFF6         	movff	??_packaging+2,tblptrl
  2984  001548  C0B2  FFF7         	movff	??_packaging+3,tblptrh
  2985  00154C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2986  00154C  6AF8               	clrf	tblptru,c
  2987  00154E                     	endif
  2988  00154E                     	if	0	;tblptru may be non-zero
  2989  00154E                     	endif
  2990  00154E  0008               	tblrd		*
  2991  001550  50F5               	movf	tablat,w,c
  2992  001552  6FA5               	movwf	(?_sprintf+8)& (0+255),b
  2993  001554  6BA6               	clrf	(?_sprintf+9)& (0+255),b
  2994  001556  0E03               	movlw	3
  2995  001558  0101               	movlb	1	; () banked
  2996  00155A  25E5               	addwf	packaging@set& (0+255),w,b
  2997  00155C  0100               	movlb	0	; () banked
  2998  00155E  6FB3               	movwf	(??_packaging+4)& (0+255),b
  2999  001560  0E00               	movlw	0
  3000  001562  0101               	movlb	1	; () banked
  3001  001564  21E6               	addwfc	(packaging@set+1)& (0+255),w,b
  3002  001566  0100               	movlb	0	; () banked
  3003  001568  6FB4               	movwf	(??_packaging+5)& (0+255),b
  3004  00156A  C0B3  FFF6         	movff	??_packaging+4,tblptrl
  3005  00156E  C0B4  FFF7         	movff	??_packaging+5,tblptrh
  3006  001572                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3007  001572  6AF8               	clrf	tblptru,c
  3008  001574                     	endif
  3009  001574                     	if	0	;tblptru may be non-zero
  3010  001574                     	endif
  3011  001574  0008               	tblrd		*
  3012  001576  50F5               	movf	tablat,w,c
  3013  001578  6FA7               	movwf	(?_sprintf+10)& (0+255),b
  3014  00157A  6BA8               	clrf	(?_sprintf+11)& (0+255),b
  3015  00157C  ECD9  F00E         	call	_sprintf	;wreg free
  3016                           
  3017                           ;main.c: 128: I2C_Send(nanoAddr, msg2);
  3018  001580  0EC5               	movlw	low packaging@msg2
  3019  001582  6E2A               	movwf	I2C_Send@data,c
  3020  001584  0E01               	movlw	high packaging@msg2
  3021  001586  6E2B               	movwf	I2C_Send@data+1,c
  3022  001588  0ECF               	movlw	low _nanoAddr
  3023  00158A  6EF6               	movwf	tblptrl,c
  3024  00158C                     	if	1	;There is more than 1 active tblptr byte
  3025  00158C  0EFC               	movlw	high _nanoAddr
  3026  00158E  6EF7               	movwf	tblptrh,c
  3027  001590                     	endif
  3028  001590                     	if	1	;There are 3 active tblptr bytes
  3029  001590  0E00               	movlw	low (_nanoAddr shr (0+16))
  3030  001592  6EF8               	movwf	tblptru,c
  3031  001594                     	endif
  3032  001594  0008               	tblrd		*
  3033  001596  50F5               	movf	tablat,w,c
  3034  001598  ECA8  F00C         	call	_I2C_Send
  3035  00159C  0101               	movlb	1	; () banked
  3036  00159E  07E7               	decf	packaging@compartmentNum& (0+255),f,b
  3037  0015A0  A0D8               	btfss	status,0,c
  3038  0015A2  07E8               	decf	(packaging@compartmentNum+1)& (0+255),f,b
  3039                           
  3040                           ; BSR set to: 1
  3041  0015A4  BFE8               	btfsc	(packaging@compartmentNum+1)& (0+255),7,b
  3042  0015A6  0012               	return	
  3043  0015A8  51E8               	movf	(packaging@compartmentNum+1)& (0+255),w,b
  3044  0015AA  E101               	bnz	u4511
  3045  0015AC  D752               	goto	L1
  3046  0015AE                     u4511:
  3047  0015AE  D754               	goto	l104
  3048  0015B0                     __end_of_packaging:
  3049                           	opt stack 0
  3050                           tblptru	equ	0xFF8
  3051                           tblptrh	equ	0xFF7
  3052                           tblptrl	equ	0xFF6
  3053                           tablat	equ	0xFF5
  3054                           prodh	equ	0xFF4
  3055                           prodl	equ	0xFF3
  3056                           postinc0	equ	0xFEE
  3057                           wreg	equ	0xFE8
  3058                           postdec1	equ	0xFE5
  3059                           plusw1	equ	0xFE3
  3060                           fsr1l	equ	0xFE1
  3061                           indf2	equ	0xFDF
  3062                           postinc2	equ	0xFDE
  3063                           postdec2	equ	0xFDD
  3064                           plusw2	equ	0xFDB
  3065                           fsr2h	equ	0xFDA
  3066                           fsr2l	equ	0xFD9
  3067                           status	equ	0xFD8
  3068                           
  3069 ;; *************** function _sprintf *****************
  3070 ;; Defined at:
  3071 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprintf.c"
  3072 ;; Parameters:    Size  Location     Type
  3073 ;;  wh              2   29[BANK0 ] PTR unsigned char 
  3074 ;;		 -> packaging@msg2(32), packageCompartment@currTimeString(33), 
  3075 ;;  f               2   31[BANK0 ] PTR const unsigned char 
  3076 ;;		 -> STR_11(22), STR_2(4), 
  3077 ;; Auto vars:     Size  Location     Type
  3078 ;;  pb              4   43[BANK0 ] struct __prbuf
  3079 ;;  ap              2   41[BANK0 ] PTR void [1]
  3080 ;;		 -> ?_sprintf(2), ?_printf(2), 
  3081 ;; Return value:  Size  Location     Type
  3082 ;;                  2   29[BANK0 ] int 
  3083 ;; Registers used:
  3084 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3085 ;; Tracked objects:
  3086 ;;		On entry : 0/0
  3087 ;;		On exit  : 0/0
  3088 ;;		Unchanged: 0/0
  3089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3090 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3091 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3093 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3094 ;;Total ram usage:       18 bytes
  3095 ;; Hardware stack levels used:    1
  3096 ;; Hardware stack levels required when called:    7
  3097 ;; This function calls:
  3098 ;;		__doprnt
  3099 ;; This function is called by:
  3100 ;;		_packaging
  3101 ;;		_packageCompartment
  3102 ;; This function uses a non-reentrant model
  3103 ;;
  3104                           
  3105                           	psect	text5
  3106  001DB2                     __ptext5:
  3107                           	opt stack 0
  3108  001DB2                     _sprintf:
  3109                           	opt stack 21
  3110                           
  3111                           ; BSR set to: 1
  3112                           ;incstack = 0
  3113  001DB2  C09D  F0AB         	movff	sprintf@wh,sprintf@pb
  3114  001DB6  C09E  F0AC         	movff	sprintf@wh+1,sprintf@pb+1
  3115  001DBA  0E00               	movlw	0
  3116  001DBC  0100               	movlb	0	; () banked
  3117  001DBE  6FAD               	movwf	(sprintf@pb+2)& (0+255),b
  3118  001DC0  0E00               	movlw	0
  3119  001DC2  6FAE               	movwf	(sprintf@pb+3)& (0+255),b
  3120  001DC4  0EA1               	movlw	low (?_sprintf+4)
  3121  001DC6  6FA9               	movwf	sprintf@ap& (0+255),b
  3122  001DC8  0E00               	movlw	high (?_sprintf+4)
  3123  001DCA  6FAA               	movwf	(sprintf@ap+1)& (0+255),b
  3124                           
  3125                           ; BSR set to: 0
  3126  001DCC  0EAB               	movlw	low sprintf@pb
  3127  001DCE  6F8D               	movwf	__doprnt@pb& (0+255),b
  3128  001DD0  0E00               	movlw	high sprintf@pb
  3129  001DD2  6F8E               	movwf	(__doprnt@pb+1)& (0+255),b
  3130  001DD4  C09F  F08F         	movff	sprintf@f,__doprnt@f
  3131  001DD8  C0A0  F090         	movff	sprintf@f+1,__doprnt@f+1
  3132  001DDC  0EA9               	movlw	low sprintf@ap
  3133  001DDE  6F91               	movwf	__doprnt@ap& (0+255),b
  3134  001DE0  0E00               	movlw	high sprintf@ap
  3135  001DE2  6F92               	movwf	(__doprnt@ap+1)& (0+255),b
  3136  001DE4  EC88  F003         	call	__doprnt	;wreg free
  3137  001DE8  C0AB  FFD9         	movff	sprintf@pb,fsr2l
  3138  001DEC  C0AC  FFDA         	movff	sprintf@pb+1,fsr2h
  3139  001DF0  0E00               	movlw	0
  3140  001DF2  6EDF               	movwf	indf2,c
  3141  001DF4  0012               	return	
  3142  001DF6                     __end_of_sprintf:
  3143                           	opt stack 0
  3144                           tblptru	equ	0xFF8
  3145                           tblptrh	equ	0xFF7
  3146                           tblptrl	equ	0xFF6
  3147                           tablat	equ	0xFF5
  3148                           prodh	equ	0xFF4
  3149                           prodl	equ	0xFF3
  3150                           postinc0	equ	0xFEE
  3151                           wreg	equ	0xFE8
  3152                           postdec1	equ	0xFE5
  3153                           plusw1	equ	0xFE3
  3154                           fsr1l	equ	0xFE1
  3155                           indf2	equ	0xFDF
  3156                           postinc2	equ	0xFDE
  3157                           postdec2	equ	0xFDD
  3158                           plusw2	equ	0xFDB
  3159                           fsr2h	equ	0xFDA
  3160                           fsr2l	equ	0xFD9
  3161                           status	equ	0xFD8
  3162                           
  3163 ;; *************** function __doprnt *****************
  3164 ;; Defined at:
  3165 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3166 ;; Parameters:    Size  Location     Type
  3167 ;;  pb              2   13[BANK0 ] PTR struct __prbuf
  3168 ;;		 -> sprintf@pb(4), printf@pb(4), 
  3169 ;;  f               2   15[BANK0 ] PTR const unsigned char 
  3170 ;;		 -> STR_22(16), STR_21(11), STR_20(12), STR_19(9), 
  3171 ;;		 -> STR_17(19), STR_11(22), STR_2(4), packageCompartment@currTimeString(33), 
  3172 ;;		 -> STR_1(13), 
  3173 ;;  ap              2   17[BANK0 ] PTR PTR void 
  3174 ;;		 -> sprintf@ap(2), printf@ap(2), 
  3175 ;; Auto vars:     Size  Location     Type
  3176 ;;  val             4   22[BANK0 ] unsigned long 
  3177 ;;  tmpval          4    0        struct .
  3178 ;;  cp              2   26[BANK0 ] PTR const unsigned char 
  3179 ;;		 -> ?_sprintf(2), ?_printf(2), NULL(0), STR_23(7), 
  3180 ;;		 -> fSLookup(105), packaging@msg2(32), packageCompartment@currTimeString(33), 
  3181 ;;  prec            2   19[BANK0 ] int 
  3182 ;;  len             2    0        unsigned int 
  3183 ;;  c               1   28[BANK0 ] char 
  3184 ;;  flag            1   21[BANK0 ] unsigned char 
  3185 ;; Return value:  Size  Location     Type
  3186 ;;                  2   13[BANK0 ] int 
  3187 ;; Registers used:
  3188 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3189 ;; Tracked objects:
  3190 ;;		On entry : 0/0
  3191 ;;		On exit  : 0/0
  3192 ;;		Unchanged: 0/0
  3193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3194 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3195 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3196 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3197 ;;      Totals:         2      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3198 ;;Total ram usage:       18 bytes
  3199 ;; Hardware stack levels used:    1
  3200 ;; Hardware stack levels required when called:    6
  3201 ;; This function calls:
  3202 ;;		Absolute function
  3203 ;;		___lldiv
  3204 ;;		___llmod
  3205 ;;		_putch
  3206 ;; This function is called by:
  3207 ;;		_printf
  3208 ;;		_sprintf
  3209 ;; This function uses a non-reentrant model
  3210 ;;
  3211                           
  3212                           	psect	text6
  3213  000710                     __ptext6:
  3214                           	opt stack 0
  3215  000710                     __doprnt:
  3216                           	opt stack 22
  3217                           
  3218                           ;doprnt.c: 499: signed char c;
  3219                           ;doprnt.c: 504: int prec;
  3220                           ;doprnt.c: 508: unsigned char flag;
  3221                           ;doprnt.c: 523: union {
  3222                           ;doprnt.c: 524: unsigned long vd;
  3223                           ;doprnt.c: 525: double integ;
  3224                           ;doprnt.c: 526: } tmpval;
  3225                           ;doprnt.c: 528: unsigned long val;
  3226                           ;doprnt.c: 529: unsigned len;
  3227                           ;doprnt.c: 530: const char * cp;
  3228                           ;doprnt.c: 536: while(c = *f++) {
  3229                           
  3230                           ;incstack = 0
  3231  000710  D237               	goto	u4360
  3232  000712                     
  3233                           ;doprnt.c: 538: if(c != '%')
  3234  000712  0E25               	movlw	37
  3235  000714  0100               	movlb	0	; () banked
  3236  000716  199C               	xorwf	__doprnt@c& (0+255),w,b
  3237  000718  B4D8               	btfsc	status,2,c
  3238  00071A  D019               	goto	l556
  3239                           
  3240                           ; BSR set to: 0
  3241                           ;doprnt.c: 540: {
  3242                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  3243  00071C  EE20 F002          	lfsr	2,2
  3244  000720  518D               	movf	__doprnt@pb& (0+255),w,b
  3245  000722  26D9               	addwf	fsr2l,f,c
  3246  000724  518E               	movf	(__doprnt@pb+1)& (0+255),w,b
  3247  000726  22DA               	addwfc	fsr2h,f,c
  3248  000728  50DE               	movf	postinc2,w,c
  3249  00072A  10DE               	iorwf	postinc2,w,c
  3250  00072C  B4D8               	btfsc	status,2,c
  3251  00072E  D0C5               	goto	l575
  3252                           
  3253                           ; BSR set to: 0
  3254  000730  EE20 F002          	lfsr	2,2
  3255  000734  518D               	movf	__doprnt@pb& (0+255),w,b
  3256  000736  26D9               	addwf	fsr2l,f,c
  3257  000738  518E               	movf	(__doprnt@pb+1)& (0+255),w,b
  3258  00073A  22DA               	addwfc	fsr2h,f,c
  3259  00073C  CFDE F030          	movff	postinc2,??__doprnt
  3260  000740  CFDD F031          	movff	postdec2,??__doprnt+1
  3261  000744  D801               	call	u4158
  3262  000746  D21C               	goto	u4360
  3263  000748                     u4158:
  3264  000748  0005               	push	
  3265  00074A  6EFA               	movwf	pclath,c
  3266  00074C  D0AE               	goto	L2
  3267  00074E                     l556:
  3268                           
  3269                           ;doprnt.c: 543: }
  3270                           ;doprnt.c: 548: flag = 0;
  3271  00074E  0E00               	movlw	0
  3272  000750  0100               	movlb	0	; () banked
  3273  000752  6F95               	movwf	__doprnt@flag& (0+255),b
  3274                           
  3275                           ; BSR set to: 0
  3276                           ;doprnt.c: 635: switch(c = *f++) {
  3277                           
  3278                           ;doprnt.c: 633: loop:
  3279  000754  D0C8               	goto	l560
  3280  000756                     
  3281                           ; BSR set to: 0
  3282                           ;doprnt.c: 643: flag |= 0x10;
  3283                           
  3284                           ; BSR set to: 0
  3285  000756  8995               	bsf	__doprnt@flag& (0+255),4,b
  3286                           
  3287                           ;doprnt.c: 644: goto loop;
  3288  000758  D0C6               	goto	l560
  3289  00075A                     
  3290                           ; BSR set to: 0
  3291                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  3292                           
  3293                           ; BSR set to: 0
  3294  00075A  C091  FFD9         	movff	__doprnt@ap,fsr2l
  3295  00075E  C092  FFDA         	movff	__doprnt@ap+1,fsr2h
  3296  000762  CFDF F030          	movff	indf2,??__doprnt
  3297  000766  0E02               	movlw	2
  3298  000768  26DE               	addwf	postinc2,f,c
  3299  00076A  CFDF F031          	movff	indf2,??__doprnt+1
  3300  00076E  0E00               	movlw	0
  3301  000770  22DD               	addwfc	postdec2,f,c
  3302  000772  C030  FFD9         	movff	??__doprnt,fsr2l
  3303  000776  C031  FFDA         	movff	??__doprnt+1,fsr2h
  3304  00077A  CFDE F09A          	movff	postinc2,__doprnt@cp
  3305  00077E  CFDD F09B          	movff	postdec2,__doprnt@cp+1
  3306                           
  3307                           ; BSR set to: 0
  3308                           ;doprnt.c: 740: if(!cp)
  3309  000782  519A               	movf	__doprnt@cp& (0+255),w,b
  3310  000784  119B               	iorwf	(__doprnt@cp+1)& (0+255),w,b
  3311  000786  A4D8               	btfss	status,2,c
  3312  000788  D062               	goto	l572
  3313                           
  3314                           ; BSR set to: 0
  3315                           ;doprnt.c: 741: cp = "(null)";
  3316  00078A  0EEC               	movlw	low STR_23
  3317  00078C  6F9A               	movwf	__doprnt@cp& (0+255),b
  3318  00078E  0EFF               	movlw	high STR_23
  3319  000790  6F9B               	movwf	(__doprnt@cp+1)& (0+255),b
  3320                           
  3321                           ; BSR set to: 0
  3322                           ;doprnt.c: 777: while(*cp)
  3323  000792  D05D               	goto	l572
  3324  000794                     
  3325                           ;doprnt.c: 778: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
  3326                           
  3327                           ; BSR set to: 0
  3328  000794  0100               	movlb	0	; () banked
  3329  000796  EE20 F002          	lfsr	2,2
  3330  00079A  518D               	movf	__doprnt@pb& (0+255),w,b
  3331  00079C  26D9               	addwf	fsr2l,f,c
  3332  00079E  518E               	movf	(__doprnt@pb+1)& (0+255),w,b
  3333  0007A0  22DA               	addwfc	fsr2h,f,c
  3334  0007A2  50DE               	movf	postinc2,w,c
  3335  0007A4  10DE               	iorwf	postinc2,w,c
  3336  0007A6  B4D8               	btfsc	status,2,c
  3337  0007A8  D02A               	goto	l571
  3338                           
  3339                           ; BSR set to: 0
  3340  0007AA  EE20 F002          	lfsr	2,2
  3341  0007AE  518D               	movf	__doprnt@pb& (0+255),w,b
  3342  0007B0  26D9               	addwf	fsr2l,f,c
  3343  0007B2  518E               	movf	(__doprnt@pb+1)& (0+255),w,b
  3344  0007B4  22DA               	addwfc	fsr2h,f,c
  3345  0007B6  CFDE F030          	movff	postinc2,??__doprnt
  3346  0007BA  CFDD F031          	movff	postdec2,??__doprnt+1
  3347  0007BE  D801               	call	u4188
  3348  0007C0  D01A               	goto	u4189
  3349  0007C2                     u4188:
  3350  0007C2  0005               	push	
  3351  0007C4  6EFA               	movwf	pclath,c
  3352  0007C6  5030               	movf	??__doprnt,w,c
  3353  0007C8  6EFD               	movwf	tosl,c
  3354  0007CA  5031               	movf	??__doprnt+1,w,c
  3355  0007CC  6EFE               	movwf	tosh,c
  3356  0007CE  6AFF               	clrf	tosu,c
  3357  0007D0  50FA               	movf	pclath,w,c
  3358  0007D2  C09A  FFF6         	movff	__doprnt@cp,tblptrl
  3359  0007D6  C09B  FFF7         	movff	__doprnt@cp+1,tblptrh
  3360  0007DA  0E00               	movlw	low (__mediumconst shr (0+16))
  3361  0007DC  6EF8               	movwf	tblptru,c
  3362  0007DE  0E0F               	movlw	(high __ramtop+-1)
  3363  0007E0  64F7               	cpfsgt	tblptrh,c
  3364  0007E2  D003               	bra	u4197
  3365  0007E4  0008               	tblrd		*
  3366  0007E6  50F5               	movf	tablat,w,c
  3367  0007E8  D005               	bra	u4190
  3368  0007EA                     u4197:
  3369  0007EA  CFF6 FFE9          	movff	tblptrl,fsr0l
  3370  0007EE  CFF7 FFEA          	movff	tblptrh,fsr0h
  3371  0007F2  50EF               	movf	indf0,w,c
  3372  0007F4                     u4190:
  3373  0007F4  0012               	return		;indir
  3374  0007F6                     u4189:
  3375  0007F6  0100               	movlb	0	; () banked
  3376  0007F8  4B9A               	infsnz	__doprnt@cp& (0+255),f,b
  3377  0007FA  2B9B               	incf	(__doprnt@cp+1)& (0+255),f,b
  3378  0007FC  D028               	goto	l572
  3379  0007FE                     l571:
  3380                           
  3381                           ; BSR set to: 0
  3382                           
  3383                           ; BSR set to: 0
  3384  0007FE  C09A  FFF6         	movff	__doprnt@cp,tblptrl
  3385  000802  C09B  FFF7         	movff	__doprnt@cp+1,tblptrh
  3386  000806  0E00               	movlw	low (__mediumconst shr (0+16))
  3387  000808  6EF8               	movwf	tblptru,c
  3388  00080A  C08D  FFD9         	movff	__doprnt@pb,fsr2l
  3389  00080E  C08E  FFDA         	movff	__doprnt@pb+1,fsr2h
  3390  000812  CFDE F030          	movff	postinc2,??__doprnt
  3391  000816  CFDD F031          	movff	postdec2,??__doprnt+1
  3392  00081A  C030  FFD9         	movff	??__doprnt,fsr2l
  3393  00081E  C031  FFDA         	movff	??__doprnt+1,fsr2h
  3394  000822  0E0F               	movlw	(high __ramtop+-1)
  3395  000824  64F7               	cpfsgt	tblptrh,c
  3396  000826  D003               	bra	u4207
  3397  000828  0008               	tblrd		*
  3398  00082A  50F5               	movf	tablat,w,c
  3399  00082C  D005               	bra	u4200
  3400  00082E                     u4207:
  3401  00082E  CFF6 FFE9          	movff	tblptrl,fsr0l
  3402  000832  CFF7 FFEA          	movff	tblptrh,fsr0h
  3403  000836  50EF               	movf	indf0,w,c
  3404  000838                     u4200:
  3405  000838  6EDF               	movwf	indf2,c
  3406  00083A  0100               	movlb	0	; () banked
  3407  00083C  4B9A               	infsnz	__doprnt@cp& (0+255),f,b
  3408  00083E  2B9B               	incf	(__doprnt@cp+1)& (0+255),f,b
  3409                           
  3410                           ; BSR set to: 0
  3411  000840  C08D  FFD9         	movff	__doprnt@pb,fsr2l
  3412  000844  C08E  FFDA         	movff	__doprnt@pb+1,fsr2h
  3413  000848  2ADE               	incf	postinc2,f,c
  3414  00084A  0E00               	movlw	0
  3415  00084C  22DD               	addwfc	postdec2,f,c
  3416  00084E                     l572:
  3417                           
  3418                           ; BSR set to: 0
  3419                           
  3420                           ; BSR set to: 0
  3421                           
  3422                           ; BSR set to: 0
  3423  00084E  C09A  FFF6         	movff	__doprnt@cp,tblptrl
  3424  000852  C09B  FFF7         	movff	__doprnt@cp+1,tblptrh
  3425  000856  0E00               	movlw	low (__mediumconst shr (0+16))
  3426  000858  6EF8               	movwf	tblptru,c
  3427  00085A  0E0F               	movlw	(high __ramtop+-1)
  3428  00085C  64F7               	cpfsgt	tblptrh,c
  3429  00085E  D003               	bra	u4217
  3430  000860  0008               	tblrd		*
  3431  000862  50F5               	movf	tablat,w,c
  3432  000864  D005               	bra	u4210
  3433  000866                     u4217:
  3434  000866  CFF6 FFE9          	movff	tblptrl,fsr0l
  3435  00086A  CFF7 FFEA          	movff	tblptrh,fsr0h
  3436  00086E  50EF               	movf	indf0,w,c
  3437  000870                     u4210:
  3438  000870  0900               	iorlw	0
  3439  000872  B4D8               	btfsc	status,2,c
  3440  000874  D185               	goto	u4360
  3441  000876  D78E               	goto	l570
  3442  000878                     
  3443                           ;doprnt.c: 809: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  3444  000878  0100               	movlb	0	; () banked
  3445  00087A  EE20 F002          	lfsr	2,2
  3446  00087E  518D               	movf	__doprnt@pb& (0+255),w,b
  3447  000880  26D9               	addwf	fsr2l,f,c
  3448  000882  518E               	movf	(__doprnt@pb+1)& (0+255),w,b
  3449  000884  22DA               	addwfc	fsr2h,f,c
  3450  000886  50DE               	movf	postinc2,w,c
  3451  000888  10DE               	iorwf	postinc2,w,c
  3452  00088A  B4D8               	btfsc	status,2,c
  3453  00088C  D016               	goto	l575
  3454                           
  3455                           ; BSR set to: 0
  3456  00088E  EE20 F002          	lfsr	2,2
  3457  000892  518D               	movf	__doprnt@pb& (0+255),w,b
  3458  000894  26D9               	addwf	fsr2l,f,c
  3459  000896  518E               	movf	(__doprnt@pb+1)& (0+255),w,b
  3460  000898  22DA               	addwfc	fsr2h,f,c
  3461  00089A  CFDE F030          	movff	postinc2,??__doprnt
  3462  00089E  CFDD F031          	movff	postdec2,??__doprnt+1
  3463  0008A2  D801               	call	u4248
  3464  0008A4  D16D               	goto	u4360
  3465  0008A6                     u4248:
  3466  0008A6  0005               	push	
  3467  0008A8  6EFA               	movwf	pclath,c
  3468  0008AA                     L2:
  3469  0008AA  5030               	movf	??__doprnt,w,c
  3470  0008AC  6EFD               	movwf	tosl,c
  3471  0008AE  5031               	movf	??__doprnt+1,w,c
  3472  0008B0  6EFE               	movwf	tosh,c
  3473  0008B2  6AFF               	clrf	tosu,c
  3474  0008B4  50FA               	movf	pclath,w,c
  3475  0008B6  519C               	movf	__doprnt@c& (0+255),w,b
  3476  0008B8  0012               	return		;indir
  3477  0008BA                     l575:
  3478  0008BA  C08D  FFD9         	movff	__doprnt@pb,fsr2l
  3479  0008BE  C08E  FFDA         	movff	__doprnt@pb+1,fsr2h
  3480  0008C2  CFDE F030          	movff	postinc2,??__doprnt
  3481  0008C6  CFDD F031          	movff	postdec2,??__doprnt+1
  3482  0008CA  C030  FFD9         	movff	??__doprnt,fsr2l
  3483  0008CE  C031  FFDA         	movff	??__doprnt+1,fsr2h
  3484  0008D2  C09C  FFDF         	movff	__doprnt@c,indf2
  3485  0008D6  C08D  FFD9         	movff	__doprnt@pb,fsr2l
  3486  0008DA  C08E  FFDA         	movff	__doprnt@pb+1,fsr2h
  3487  0008DE  2ADE               	incf	postinc2,f,c
  3488  0008E0  0E00               	movlw	0
  3489  0008E2  22DD               	addwfc	postdec2,f,c
  3490                           
  3491                           ;doprnt.c: 810: continue;
  3492  0008E4  D14D               	goto	u4360
  3493  0008E6                     l560:
  3494  0008E6  0100               	movlb	0	; () banked
  3495  0008E8  518F               	movf	__doprnt@f& (0+255),w,b
  3496  0008EA  6E30               	movwf	??__doprnt& (0+255),c
  3497  0008EC  5190               	movf	(__doprnt@f+1)& (0+255),w,b
  3498  0008EE  6E31               	movwf	(??__doprnt+1)& (0+255),c
  3499  0008F0  4B8F               	infsnz	__doprnt@f& (0+255),f,b
  3500  0008F2  2B90               	incf	(__doprnt@f+1)& (0+255),f,b
  3501  0008F4  C030  FFF6         	movff	??__doprnt,tblptrl
  3502  0008F8  C031  FFF7         	movff	??__doprnt+1,tblptrh
  3503  0008FC  0E00               	movlw	low (__mediumconst shr (0+16))
  3504  0008FE  6EF8               	movwf	tblptru,c
  3505  000900  0E0F               	movlw	(high __ramtop+-1)
  3506  000902  64F7               	cpfsgt	tblptrh,c
  3507  000904  D003               	bra	u4257
  3508  000906  0008               	tblrd		*
  3509  000908  50F5               	movf	tablat,w,c
  3510  00090A  D005               	bra	u4250
  3511  00090C                     u4257:
  3512  00090C  CFF6 FFE9          	movff	tblptrl,fsr0l
  3513  000910  CFF7 FFEA          	movff	tblptrh,fsr0h
  3514  000914  50EF               	movf	indf0,w,c
  3515  000916                     u4250:
  3516  000916  0100               	movlb	0	; () banked
  3517  000918  6F9C               	movwf	__doprnt@c& (0+255),b
  3518  00091A  519C               	movf	__doprnt@c& (0+255),w,b
  3519                           
  3520                           ; Switch size 1, requested type "space"
  3521                           ; Number of cases is 5, Range of values is 0 to 115
  3522                           ; switch strategies available:
  3523                           ; Name         Instructions Cycles
  3524                           ; simple_byte           16     9 (average)
  3525                           ;	Chosen strategy is simple_byte
  3526  00091C  0A00               	xorlw	0	; case 0
  3527  00091E  B4D8               	btfsc	status,2,c
  3528  000920  D14C               	goto	u4380
  3529  000922  0A64               	xorlw	100	; case 100
  3530  000924  B4D8               	btfsc	status,2,c
  3531  000926  D00A               	goto	l566
  3532  000928  0A0D               	xorlw	13	; case 105
  3533  00092A  B4D8               	btfsc	status,2,c
  3534  00092C  D007               	goto	l566
  3535  00092E  0A05               	xorlw	5	; case 108
  3536  000930  B4D8               	btfsc	status,2,c
  3537  000932  D711               	goto	l563
  3538  000934  0A1F               	xorlw	31	; case 115
  3539  000936  B4D8               	btfsc	status,2,c
  3540  000938  D710               	goto	l567
  3541  00093A  D79E               	goto	l574
  3542  00093C                     l566:
  3543                           
  3544                           ;doprnt.c: 1253: {
  3545                           ;doprnt.c: 1255: if(flag & 0x10)
  3546  00093C  0100               	movlb	0	; () banked
  3547  00093E  A995               	btfss	__doprnt@flag& (0+255),4,b
  3548  000940  D019               	goto	l577
  3549                           
  3550                           ; BSR set to: 0
  3551                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  3552  000942  C091  FFD9         	movff	__doprnt@ap,fsr2l
  3553  000946  C092  FFDA         	movff	__doprnt@ap+1,fsr2h
  3554  00094A  CFDF F030          	movff	indf2,??__doprnt
  3555  00094E  0E04               	movlw	4
  3556  000950  26DE               	addwf	postinc2,f,c
  3557  000952  CFDF F031          	movff	indf2,??__doprnt+1
  3558  000956  0E00               	movlw	0
  3559  000958  22DD               	addwfc	postdec2,f,c
  3560  00095A  C030  FFD9         	movff	??__doprnt,fsr2l
  3561  00095E  C031  FFDA         	movff	??__doprnt+1,fsr2h
  3562  000962  CFDE F096          	movff	postinc2,__doprnt@val
  3563  000966  CFDE F097          	movff	postinc2,__doprnt@val+1
  3564  00096A  CFDE F098          	movff	postinc2,__doprnt@val+2
  3565  00096E  CFDE F099          	movff	postinc2,__doprnt@val+3
  3566  000972  D019               	goto	l578
  3567  000974                     l577:
  3568                           
  3569                           ; BSR set to: 0
  3570                           ;doprnt.c: 1257: else
  3571                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  3572                           
  3573                           ; BSR set to: 0
  3574  000974  C091  FFD9         	movff	__doprnt@ap,fsr2l
  3575  000978  C092  FFDA         	movff	__doprnt@ap+1,fsr2h
  3576  00097C  CFDF F030          	movff	indf2,??__doprnt
  3577  000980  0E02               	movlw	2
  3578  000982  26DE               	addwf	postinc2,f,c
  3579  000984  CFDF F031          	movff	indf2,??__doprnt+1
  3580  000988  0E00               	movlw	0
  3581  00098A  22DD               	addwfc	postdec2,f,c
  3582  00098C  C030  FFD9         	movff	??__doprnt,fsr2l
  3583  000990  C031  FFDA         	movff	??__doprnt+1,fsr2h
  3584  000994  CFDE F096          	movff	postinc2,__doprnt@val
  3585  000998  CFDD F097          	movff	postdec2,__doprnt@val+1
  3586  00099C  0E00               	movlw	0
  3587  00099E  BF97               	btfsc	(__doprnt@val+1)& (0+255),7,b
  3588  0009A0  0EFF               	movlw	-1
  3589  0009A2  6F98               	movwf	(__doprnt@val+2)& (0+255),b
  3590  0009A4  6F99               	movwf	(__doprnt@val+3)& (0+255),b
  3591  0009A6                     l578:
  3592                           
  3593                           ; BSR set to: 0
  3594                           ;doprnt.c: 1261: if((long)val < 0) {
  3595                           
  3596                           ; BSR set to: 0
  3597  0009A6  AF99               	btfss	(__doprnt@val+3)& (0+255),7,b
  3598  0009A8  D00A               	goto	l579
  3599                           
  3600                           ; BSR set to: 0
  3601                           ;doprnt.c: 1262: flag |= 0x03;
  3602  0009AA  0E03               	movlw	3
  3603  0009AC  1395               	iorwf	__doprnt@flag& (0+255),f,b
  3604                           
  3605                           ; BSR set to: 0
  3606                           ;doprnt.c: 1263: val = -val;
  3607  0009AE  1F99               	comf	(__doprnt@val+3)& (0+255),f,b
  3608  0009B0  1F98               	comf	(__doprnt@val+2)& (0+255),f,b
  3609  0009B2  1F97               	comf	(__doprnt@val+1)& (0+255),f,b
  3610  0009B4  6D96               	negf	__doprnt@val& (0+255),b
  3611  0009B6  0E00               	movlw	0
  3612  0009B8  2397               	addwfc	(__doprnt@val+1)& (0+255),f,b
  3613  0009BA  2398               	addwfc	(__doprnt@val+2)& (0+255),f,b
  3614  0009BC  2399               	addwfc	(__doprnt@val+3)& (0+255),f,b
  3615  0009BE                     l579:
  3616                           
  3617                           ; BSR set to: 0
  3618                           ;doprnt.c: 1264: }
  3619                           ;doprnt.c: 1266: }
  3620                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3621                           
  3622                           ; BSR set to: 0
  3623  0009BE  0E01               	movlw	1
  3624  0009C0  6F9C               	movwf	__doprnt@c& (0+255),b
  3625  0009C2                     l3756:
  3626                           
  3627                           ; BSR set to: 0
  3628  0009C2  0E0A               	movlw	10
  3629  0009C4  199C               	xorwf	__doprnt@c& (0+255),w,b
  3630  0009C6  B4D8               	btfsc	status,2,c
  3631  0009C8  D01B               	goto	u4300
  3632                           
  3633                           ; BSR set to: 0
  3634                           ;doprnt.c: 1306: if(val < dpowers[c])
  3635                           
  3636                           ; BSR set to: 0
  3637                           
  3638                           ; BSR set to: 0
  3639  0009CA  519C               	movf	__doprnt@c& (0+255),w,b
  3640  0009CC  0D04               	mullw	4
  3641  0009CE  0E81               	movlw	low _dpowers
  3642  0009D0  24F3               	addwf	prodl,w,c
  3643  0009D2  6EF6               	movwf	tblptrl,c
  3644  0009D4  0EFC               	movlw	high _dpowers
  3645  0009D6  20F4               	addwfc	prodh,w,c
  3646  0009D8  6EF7               	movwf	tblptrh,c
  3647  0009DA                     	if	1	;There are 3 active tblptr bytes
  3648  0009DA  6AF8               	clrf	tblptru,c
  3649  0009DC  0E00               	movlw	low (__mediumconst shr (0+16))
  3650  0009DE  22F8               	addwfc	tblptru,f,c
  3651  0009E0                     	endif
  3652  0009E0  0009               	tblrd		*+
  3653  0009E2  50F5               	movf	tablat,w,c
  3654  0009E4  5D96               	subwf	__doprnt@val& (0+255),w,b
  3655  0009E6  0009               	tblrd		*+
  3656  0009E8  50F5               	movf	tablat,w,c
  3657  0009EA  5997               	subwfb	(__doprnt@val+1)& (0+255),w,b
  3658  0009EC  0009               	tblrd		*+
  3659  0009EE  50F5               	movf	tablat,w,c
  3660  0009F0  5998               	subwfb	(__doprnt@val+2)& (0+255),w,b
  3661  0009F2  0009               	tblrd		*+
  3662  0009F4  50F5               	movf	tablat,w,c
  3663  0009F6  5999               	subwfb	(__doprnt@val+3)& (0+255),w,b
  3664  0009F8  A0D8               	btfss	status,0,c
  3665  0009FA  D002               	goto	u4300
  3666                           
  3667                           ; BSR set to: 0
  3668                           
  3669                           ; BSR set to: 0
  3670                           
  3671                           ; BSR set to: 0
  3672                           ;doprnt.c: 1307: break;
  3673  0009FC  2B9C               	incf	__doprnt@c& (0+255),f,b
  3674  0009FE  D7E1               	goto	l3756
  3675  000A00                     u4300:
  3676                           
  3677                           ; BSR set to: 0
  3678                           ;doprnt.c: 1422: {
  3679                           ;doprnt.c: 1438: if(flag & 0x03)
  3680                           
  3681                           ; BSR set to: 0
  3682  000A00  C095  F030         	movff	__doprnt@flag,??__doprnt
  3683  000A04  0E03               	movlw	3
  3684  000A06  1630               	andwf	??__doprnt,f,c
  3685  000A08  B4D8               	btfsc	status,2,c
  3686  000A0A  D035               	goto	l585
  3687                           
  3688                           ; BSR set to: 0
  3689                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  3690  000A0C  EE20 F002          	lfsr	2,2
  3691  000A10  518D               	movf	__doprnt@pb& (0+255),w,b
  3692  000A12  26D9               	addwf	fsr2l,f,c
  3693  000A14  518E               	movf	(__doprnt@pb+1)& (0+255),w,b
  3694  000A16  22DA               	addwfc	fsr2h,f,c
  3695  000A18  50DE               	movf	postinc2,w,c
  3696  000A1A  10DE               	iorwf	postinc2,w,c
  3697  000A1C  B4D8               	btfsc	status,2,c
  3698  000A1E  D016               	goto	l584
  3699                           
  3700                           ; BSR set to: 0
  3701  000A20  EE20 F002          	lfsr	2,2
  3702  000A24  518D               	movf	__doprnt@pb& (0+255),w,b
  3703  000A26  26D9               	addwf	fsr2l,f,c
  3704  000A28  518E               	movf	(__doprnt@pb+1)& (0+255),w,b
  3705  000A2A  22DA               	addwfc	fsr2h,f,c
  3706  000A2C  CFDE F030          	movff	postinc2,??__doprnt
  3707  000A30  CFDD F031          	movff	postdec2,??__doprnt+1
  3708  000A34  D801               	call	u4338
  3709  000A36  D01F               	goto	l585
  3710  000A38                     u4338:
  3711  000A38  0005               	push	
  3712  000A3A  6EFA               	movwf	pclath,c
  3713  000A3C  5030               	movf	??__doprnt,w,c
  3714  000A3E  6EFD               	movwf	tosl,c
  3715  000A40  5031               	movf	??__doprnt+1,w,c
  3716  000A42  6EFE               	movwf	tosh,c
  3717  000A44  6AFF               	clrf	tosu,c
  3718  000A46  50FA               	movf	pclath,w,c
  3719  000A48  0E2D               	movlw	45
  3720  000A4A  0012               	return		;indir
  3721  000A4C                     l584:
  3722  000A4C  C08D  FFD9         	movff	__doprnt@pb,fsr2l
  3723  000A50  C08E  FFDA         	movff	__doprnt@pb+1,fsr2h
  3724  000A54  CFDE F030          	movff	postinc2,??__doprnt
  3725  000A58  CFDD F031          	movff	postdec2,??__doprnt+1
  3726  000A5C  C030  FFD9         	movff	??__doprnt,fsr2l
  3727  000A60  C031  FFDA         	movff	??__doprnt+1,fsr2h
  3728  000A64  0E2D               	movlw	45
  3729  000A66  6EDF               	movwf	indf2,c
  3730  000A68  C08D  FFD9         	movff	__doprnt@pb,fsr2l
  3731  000A6C  C08E  FFDA         	movff	__doprnt@pb+1,fsr2h
  3732  000A70  2ADE               	incf	postinc2,f,c
  3733  000A72  0E00               	movlw	0
  3734  000A74  22DD               	addwfc	postdec2,f,c
  3735  000A76                     l585:
  3736                           
  3737                           ;doprnt.c: 1469: }
  3738                           ;doprnt.c: 1472: prec = c;
  3739  000A76  0100               	movlb	0	; () banked
  3740  000A78  519C               	movf	__doprnt@c& (0+255),w,b
  3741  000A7A  6F93               	movwf	__doprnt@prec& (0+255),b
  3742  000A7C  6B94               	clrf	(__doprnt@prec+1)& (0+255),b
  3743  000A7E  BF93               	btfsc	__doprnt@prec& (0+255),7,b
  3744  000A80  0794               	decf	(__doprnt@prec+1)& (0+255),f,b
  3745                           
  3746                           ;doprnt.c: 1474: while(prec--) {
  3747  000A82  D075               	goto	l589
  3748  000A84                     l3780:
  3749                           
  3750                           ; BSR set to: 0
  3751                           ;doprnt.c: 1478: {
  3752                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3753  000A84  C093  F030         	movff	__doprnt@prec,??__doprnt
  3754  000A88  C094  F031         	movff	__doprnt@prec+1,??__doprnt+1
  3755  000A8C  90D8               	bcf	status,0,c
  3756  000A8E  3630               	rlcf	??__doprnt,f,c
  3757  000A90  3631               	rlcf	??__doprnt+1,f,c
  3758  000A92  90D8               	bcf	status,0,c
  3759  000A94  3630               	rlcf	??__doprnt,f,c
  3760  000A96  3631               	rlcf	??__doprnt+1,f,c
  3761  000A98  0E81               	movlw	low _dpowers
  3762  000A9A  2430               	addwf	??__doprnt,w,c
  3763  000A9C  6EF6               	movwf	tblptrl,c
  3764  000A9E  0EFC               	movlw	high _dpowers
  3765  000AA0  2031               	addwfc	??__doprnt+1,w,c
  3766  000AA2  6EF7               	movwf	tblptrh,c
  3767  000AA4                     	if	1	;There are 3 active tblptr bytes
  3768  000AA4  6AF8               	clrf	tblptru,c
  3769  000AA6  0E00               	movlw	low (__mediumconst shr (0+16))
  3770  000AA8  22F8               	addwfc	tblptru,f,c
  3771  000AAA                     	endif
  3772  000AAA  0009               	tblrd		*+
  3773  000AAC  CFF5 F02B          	movff	tablat,___lldiv@divisor
  3774  000AB0  0009               	tblrd		*+
  3775  000AB2  CFF5 F02C          	movff	tablat,___lldiv@divisor+1
  3776  000AB6  0009               	tblrd		*+
  3777  000AB8  CFF5 F02D          	movff	tablat,___lldiv@divisor+2
  3778  000ABC  000A               	tblrd		*-
  3779  000ABE  CFF5 F02E          	movff	tablat,___lldiv@divisor+3
  3780  000AC2  C096  F027         	movff	__doprnt@val,___lldiv@dividend
  3781  000AC6  C097  F028         	movff	__doprnt@val+1,___lldiv@dividend+1
  3782  000ACA  C098  F029         	movff	__doprnt@val+2,___lldiv@dividend+2
  3783  000ACE  C099  F02A         	movff	__doprnt@val+3,___lldiv@dividend+3
  3784  000AD2  ECF1  F00C         	call	___lldiv
  3785  000AD6  C027  F085         	movff	?___lldiv,___llmod@dividend
  3786  000ADA  C028  F086         	movff	?___lldiv+1,___llmod@dividend+1
  3787  000ADE  C029  F087         	movff	?___lldiv+2,___llmod@dividend+2
  3788  000AE2  C02A  F088         	movff	?___lldiv+3,___llmod@dividend+3
  3789  000AE6  0E0A               	movlw	10
  3790  000AE8  0100               	movlb	0	; () banked
  3791  000AEA  6F89               	movwf	___llmod@divisor& (0+255),b
  3792  000AEC  0E00               	movlw	0
  3793  000AEE  6F8A               	movwf	(___llmod@divisor+1)& (0+255),b
  3794  000AF0  0E00               	movlw	0
  3795  000AF2  6F8B               	movwf	(___llmod@divisor+2)& (0+255),b
  3796  000AF4  0E00               	movlw	0
  3797  000AF6  6F8C               	movwf	(___llmod@divisor+3)& (0+255),b
  3798  000AF8  EC23  F00E         	call	___llmod	;wreg free
  3799  000AFC  0100               	movlb	0	; () banked
  3800  000AFE  5185               	movf	?___llmod& (0+255),w,b
  3801  000B00  0F30               	addlw	48
  3802  000B02  6F9C               	movwf	__doprnt@c& (0+255),b
  3803                           
  3804                           ; BSR set to: 0
  3805                           ;doprnt.c: 1523: }
  3806                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  3807  000B04  EE20 F002          	lfsr	2,2
  3808  000B08  518D               	movf	__doprnt@pb& (0+255),w,b
  3809  000B0A  26D9               	addwf	fsr2l,f,c
  3810  000B0C  518E               	movf	(__doprnt@pb+1)& (0+255),w,b
  3811  000B0E  22DA               	addwfc	fsr2h,f,c
  3812  000B10  50DE               	movf	postinc2,w,c
  3813  000B12  10DE               	iorwf	postinc2,w,c
  3814  000B14  B4D8               	btfsc	status,2,c
  3815  000B16  D016               	goto	l588
  3816                           
  3817                           ; BSR set to: 0
  3818  000B18  EE20 F002          	lfsr	2,2
  3819  000B1C  518D               	movf	__doprnt@pb& (0+255),w,b
  3820  000B1E  26D9               	addwf	fsr2l,f,c
  3821  000B20  518E               	movf	(__doprnt@pb+1)& (0+255),w,b
  3822  000B22  22DA               	addwfc	fsr2h,f,c
  3823  000B24  CFDE F030          	movff	postinc2,??__doprnt
  3824  000B28  CFDD F031          	movff	postdec2,??__doprnt+1
  3825  000B2C  D801               	call	u4358
  3826  000B2E  D01F               	goto	l589
  3827  000B30                     u4358:
  3828  000B30  0005               	push	
  3829  000B32  6EFA               	movwf	pclath,c
  3830  000B34  5030               	movf	??__doprnt,w,c
  3831  000B36  6EFD               	movwf	tosl,c
  3832  000B38  5031               	movf	??__doprnt+1,w,c
  3833  000B3A  6EFE               	movwf	tosh,c
  3834  000B3C  6AFF               	clrf	tosu,c
  3835  000B3E  50FA               	movf	pclath,w,c
  3836  000B40  519C               	movf	__doprnt@c& (0+255),w,b
  3837  000B42  0012               	return		;indir
  3838  000B44                     l588:
  3839  000B44  C08D  FFD9         	movff	__doprnt@pb,fsr2l
  3840  000B48  C08E  FFDA         	movff	__doprnt@pb+1,fsr2h
  3841  000B4C  CFDE F030          	movff	postinc2,??__doprnt
  3842  000B50  CFDD F031          	movff	postdec2,??__doprnt+1
  3843  000B54  C030  FFD9         	movff	??__doprnt,fsr2l
  3844  000B58  C031  FFDA         	movff	??__doprnt+1,fsr2h
  3845  000B5C  C09C  FFDF         	movff	__doprnt@c,indf2
  3846  000B60  C08D  FFD9         	movff	__doprnt@pb,fsr2l
  3847  000B64  C08E  FFDA         	movff	__doprnt@pb+1,fsr2h
  3848  000B68  2ADE               	incf	postinc2,f,c
  3849  000B6A  0E00               	movlw	0
  3850  000B6C  22DD               	addwfc	postdec2,f,c
  3851  000B6E                     l589:
  3852  000B6E  0100               	movlb	0	; () banked
  3853  000B70  0793               	decf	__doprnt@prec& (0+255),f,b
  3854  000B72  A0D8               	btfss	status,0,c
  3855  000B74  0794               	decf	(__doprnt@prec+1)& (0+255),f,b
  3856  000B76  2993               	incf	__doprnt@prec& (0+255),w,b
  3857  000B78  E185               	bnz	l3780
  3858  000B7A  2994               	incf	(__doprnt@prec+1)& (0+255),w,b
  3859  000B7C  A4D8               	btfss	status,2,c
  3860  000B7E  D782               	goto	l587
  3861  000B80                     u4360:
  3862                           
  3863                           ; BSR set to: 0
  3864                           
  3865                           ; BSR set to: 0
  3866  000B80  0100               	movlb	0	; () banked
  3867  000B82  518F               	movf	__doprnt@f& (0+255),w,b
  3868  000B84  6E30               	movwf	??__doprnt& (0+255),c
  3869  000B86  5190               	movf	(__doprnt@f+1)& (0+255),w,b
  3870  000B88  6E31               	movwf	(??__doprnt+1)& (0+255),c
  3871  000B8A  4B8F               	infsnz	__doprnt@f& (0+255),f,b
  3872  000B8C  2B90               	incf	(__doprnt@f+1)& (0+255),f,b
  3873  000B8E  C030  FFF6         	movff	??__doprnt,tblptrl
  3874  000B92  C031  FFF7         	movff	??__doprnt+1,tblptrh
  3875  000B96  0E00               	movlw	low (__mediumconst shr (0+16))
  3876  000B98  6EF8               	movwf	tblptru,c
  3877  000B9A  0E0F               	movlw	(high __ramtop+-1)
  3878  000B9C  64F7               	cpfsgt	tblptrh,c
  3879  000B9E  D003               	bra	u4377
  3880  000BA0  0008               	tblrd		*
  3881  000BA2  50F5               	movf	tablat,w,c
  3882  000BA4  D005               	bra	u4370
  3883  000BA6                     u4377:
  3884  000BA6  CFF6 FFE9          	movff	tblptrl,fsr0l
  3885  000BAA  CFF7 FFEA          	movff	tblptrh,fsr0h
  3886  000BAE  50EF               	movf	indf0,w,c
  3887  000BB0                     u4370:
  3888  000BB0  0100               	movlb	0	; () banked
  3889  000BB2  6F9C               	movwf	__doprnt@c& (0+255),b
  3890  000BB4  519C               	movf	__doprnt@c& (0+255),w,b
  3891  000BB6  A4D8               	btfss	status,2,c
  3892  000BB8  D5AC               	goto	l555
  3893  000BBA                     u4380:
  3894                           
  3895                           ; BSR set to: 0
  3896                           ;doprnt.c: 1540: return 0;
  3897                           
  3898                           ; BSR set to: 0
  3899                           
  3900                           ;doprnt.c: 1525: }
  3901                           ;doprnt.c: 1533: }
  3902                           ;doprnt.c: 1535: alldone:
  3903                           
  3904                           ; BSR set to: 0
  3905  000BBA  0E00               	movlw	0
  3906  000BBC  6F8E               	movwf	(?__doprnt+1)& (0+255),b
  3907  000BBE  0E00               	movlw	0
  3908  000BC0  6F8D               	movwf	?__doprnt& (0+255),b
  3909  000BC2  0012               	return	
  3910  000BC4                     __end_of__doprnt:
  3911                           	opt stack 0
  3912                           tosu	equ	0xFFF
  3913                           tosh	equ	0xFFE
  3914                           tosl	equ	0xFFD
  3915                           pclath	equ	0xFFA
  3916                           tblptru	equ	0xFF8
  3917                           tblptrh	equ	0xFF7
  3918                           tblptrl	equ	0xFF6
  3919                           tablat	equ	0xFF5
  3920                           prodh	equ	0xFF4
  3921                           prodl	equ	0xFF3
  3922                           indf0	equ	0xFEF
  3923                           postinc0	equ	0xFEE
  3924                           fsr0h	equ	0xFEA
  3925                           fsr0l	equ	0xFE9
  3926                           wreg	equ	0xFE8
  3927                           postdec1	equ	0xFE5
  3928                           plusw1	equ	0xFE3
  3929                           fsr1l	equ	0xFE1
  3930                           indf2	equ	0xFDF
  3931                           postinc2	equ	0xFDE
  3932                           postdec2	equ	0xFDD
  3933                           plusw2	equ	0xFDB
  3934                           fsr2h	equ	0xFDA
  3935                           fsr2l	equ	0xFD9
  3936                           status	equ	0xFD8
  3937                           
  3938 ;; *************** function ___llmod *****************
  3939 ;; Defined at:
  3940 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  3941 ;; Parameters:    Size  Location     Type
  3942 ;;  dividend        4    5[BANK0 ] unsigned long 
  3943 ;;  divisor         4    9[BANK0 ] unsigned long 
  3944 ;; Auto vars:     Size  Location     Type
  3945 ;;  counter         1   46[COMRAM] unsigned char 
  3946 ;; Return value:  Size  Location     Type
  3947 ;;                  4    5[BANK0 ] unsigned long 
  3948 ;; Registers used:
  3949 ;;		wreg, status,2, status,0
  3950 ;; Tracked objects:
  3951 ;;		On entry : 0/0
  3952 ;;		On exit  : 0/0
  3953 ;;		Unchanged: 0/0
  3954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3955 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3956 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3958 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3959 ;;Total ram usage:        9 bytes
  3960 ;; Hardware stack levels used:    1
  3961 ;; Hardware stack levels required when called:    4
  3962 ;; This function calls:
  3963 ;;		Nothing
  3964 ;; This function is called by:
  3965 ;;		__doprnt
  3966 ;; This function uses a non-reentrant model
  3967 ;;
  3968                           
  3969                           	psect	text7
  3970  001C46                     __ptext7:
  3971                           	opt stack 0
  3972  001C46                     ___llmod:
  3973                           	opt stack 23
  3974                           
  3975                           ; BSR set to: 0
  3976                           ;incstack = 0
  3977  001C46  0100               	movlb	0	; () banked
  3978  001C48  5189               	movf	___llmod@divisor& (0+255),w,b
  3979  001C4A  118A               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  3980  001C4C  118B               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  3981  001C4E  118C               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  3982  001C50  B4D8               	btfsc	status,2,c
  3983  001C52  D024               	goto	l958
  3984                           
  3985                           ; BSR set to: 0
  3986  001C54  0E01               	movlw	1
  3987  001C56  6E2F               	movwf	___llmod@counter,c
  3988  001C58  D006               	goto	l953
  3989  001C5A                     
  3990                           ; BSR set to: 0
  3991                           
  3992                           ; BSR set to: 0
  3993  001C5A  90D8               	bcf	status,0,c
  3994  001C5C  3789               	rlcf	___llmod@divisor& (0+255),f,b
  3995  001C5E  378A               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  3996  001C60  378B               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  3997  001C62  378C               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  3998  001C64  2A2F               	incf	___llmod@counter,f,c
  3999  001C66                     l953:
  4000                           
  4001                           ; BSR set to: 0
  4002                           
  4003                           ; BSR set to: 0
  4004  001C66  AF8C               	btfss	(___llmod@divisor+3)& (0+255),7,b
  4005  001C68  D7F8               	goto	l954
  4006  001C6A                     u3850:
  4007                           
  4008                           ; BSR set to: 0
  4009                           
  4010                           ; BSR set to: 0
  4011                           
  4012                           ; BSR set to: 0
  4013  001C6A  5189               	movf	___llmod@divisor& (0+255),w,b
  4014  001C6C  5D85               	subwf	___llmod@dividend& (0+255),w,b
  4015  001C6E  518A               	movf	(___llmod@divisor+1)& (0+255),w,b
  4016  001C70  5986               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  4017  001C72  518B               	movf	(___llmod@divisor+2)& (0+255),w,b
  4018  001C74  5987               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  4019  001C76  518C               	movf	(___llmod@divisor+3)& (0+255),w,b
  4020  001C78  5988               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  4021  001C7A  A0D8               	btfss	status,0,c
  4022  001C7C  D008               	goto	l957
  4023                           
  4024                           ; BSR set to: 0
  4025  001C7E  5189               	movf	___llmod@divisor& (0+255),w,b
  4026  001C80  5F85               	subwf	___llmod@dividend& (0+255),f,b
  4027  001C82  518A               	movf	(___llmod@divisor+1)& (0+255),w,b
  4028  001C84  5B86               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  4029  001C86  518B               	movf	(___llmod@divisor+2)& (0+255),w,b
  4030  001C88  5B87               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  4031  001C8A  518C               	movf	(___llmod@divisor+3)& (0+255),w,b
  4032  001C8C  5B88               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  4033  001C8E                     l957:
  4034                           
  4035                           ; BSR set to: 0
  4036                           
  4037                           ; BSR set to: 0
  4038  001C8E  90D8               	bcf	status,0,c
  4039  001C90  338C               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  4040  001C92  338B               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  4041  001C94  338A               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  4042  001C96  3389               	rrcf	___llmod@divisor& (0+255),f,b
  4043                           
  4044                           ; BSR set to: 0
  4045  001C98  2E2F               	decfsz	___llmod@counter,f,c
  4046  001C9A  D7E7               	goto	u3850
  4047  001C9C                     l958:
  4048                           
  4049                           ; BSR set to: 0
  4050                           
  4051                           ; BSR set to: 0
  4052  001C9C  C085  F085         	movff	___llmod@dividend,?___llmod
  4053  001CA0  C086  F086         	movff	___llmod@dividend+1,?___llmod+1
  4054  001CA4  C087  F087         	movff	___llmod@dividend+2,?___llmod+2
  4055  001CA8  C088  F088         	movff	___llmod@dividend+3,?___llmod+3
  4056                           
  4057                           ; BSR set to: 0
  4058  001CAC  0012               	return		;funcret
  4059  001CAE                     __end_of___llmod:
  4060                           	opt stack 0
  4061                           tosu	equ	0xFFF
  4062                           tosh	equ	0xFFE
  4063                           tosl	equ	0xFFD
  4064                           pclath	equ	0xFFA
  4065                           tblptru	equ	0xFF8
  4066                           tblptrh	equ	0xFF7
  4067                           tblptrl	equ	0xFF6
  4068                           tablat	equ	0xFF5
  4069                           prodh	equ	0xFF4
  4070                           prodl	equ	0xFF3
  4071                           indf0	equ	0xFEF
  4072                           postinc0	equ	0xFEE
  4073                           fsr0h	equ	0xFEA
  4074                           fsr0l	equ	0xFE9
  4075                           wreg	equ	0xFE8
  4076                           postdec1	equ	0xFE5
  4077                           plusw1	equ	0xFE3
  4078                           fsr1l	equ	0xFE1
  4079                           indf2	equ	0xFDF
  4080                           postinc2	equ	0xFDE
  4081                           postdec2	equ	0xFDD
  4082                           plusw2	equ	0xFDB
  4083                           fsr2h	equ	0xFDA
  4084                           fsr2l	equ	0xFD9
  4085                           status	equ	0xFD8
  4086                           
  4087 ;; *************** function _inputEntry *****************
  4088 ;; Defined at:
  4089 ;;		line 30 in file "menu.c"
  4090 ;; Parameters:    Size  Location     Type
  4091 ;;		None
  4092 ;; Auto vars:     Size  Location     Type
  4093 ;;  sum             2   87[BANK0 ] int 
  4094 ;;  fastenerStri   32   42[BANK0 ] unsigned char [32]
  4095 ;;  msg            24   18[BANK0 ] unsigned char [24]
  4096 ;;  compartments    1   76[BANK0 ] unsigned char 
  4097 ;;  i               2  103[BANK0 ] int 
  4098 ;;  compartmentN    2  101[BANK0 ] int 
  4099 ;;  numPressed      2   99[BANK0 ] int 
  4100 ;;  inputEntrySt    2   97[BANK0 ] int 
  4101 ;;  numW            2   95[BANK0 ] int 
  4102 ;;  numS            2   93[BANK0 ] int 
  4103 ;;  numN            2   91[BANK0 ] int 
  4104 ;;  numB            2   89[BANK0 ] int 
  4105 ;;  doneCompartm    2   85[BANK0 ] int 
  4106 ;;  doneMultiple    2   83[BANK0 ] int 
  4107 ;;  setIsGood       2   81[BANK0 ] int 
  4108 ;;  found           2   79[BANK0 ] int 
  4109 ;;  done            2   77[BANK0 ] int 
  4110 ;;  compartmentL    2   74[BANK0 ] unsigned char [2]
  4111 ;;  numFasteners    2    0        int 
  4112 ;;  pressed         1  105[BANK0 ] unsigned char 
  4113 ;; Return value:  Size  Location     Type
  4114 ;;                  1    wreg      void 
  4115 ;; Registers used:
  4116 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4117 ;; Tracked objects:
  4118 ;;		On entry : 0/0
  4119 ;;		On exit  : 0/0
  4120 ;;		Unchanged: 0/0
  4121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4123 ;;      Locals:         0      88       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4124 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4125 ;;      Totals:         0      92       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4126 ;;Total ram usage:       92 bytes
  4127 ;; Hardware stack levels used:    1
  4128 ;; Hardware stack levels required when called:    8
  4129 ;; This function calls:
  4130 ;;		_I2C_Send
  4131 ;;		___wmul
  4132 ;;		_lcdInst
  4133 ;;		_lcd_set_cursor
  4134 ;;		_pollKeypad
  4135 ;;		_printErrorLCD
  4136 ;;		_printStringLCD
  4137 ;;		_putch
  4138 ;;		_strcpy
  4139 ;; This function is called by:
  4140 ;;		_mainMenu
  4141 ;; This function uses a non-reentrant model
  4142 ;;
  4143                           
  4144                           	psect	text8
  4145  000012                     __ptext8:
  4146                           	opt stack 0
  4147  000012                     _inputEntry:
  4148                           	opt stack 21
  4149                           
  4150                           ;menu.c: 31: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4151                           
  4152                           ; BSR set to: 0
  4153                           ;incstack = 0
  4154  000012  0E01               	movlw	1
  4155  000014  EC01  F010         	call	_lcdInst
  4156  000018  0EC3               	movlw	195
  4157  00001A  0100               	movlb	0	; () banked
  4158  00001C  6F8E               	movwf	??_inputEntry& (0+255),b
  4159  00001E  0ECD               	movlw	205
  4160  000020                     u5457:
  4161  000020  2EE8               	decfsz	wreg,f,c
  4162  000022  D7FE               	bra	u5457
  4163  000024  2F8E               	decfsz	??_inputEntry& (0+255),f,b
  4164  000026  D7FC               	bra	u5457
  4165                           
  4166                           ;menu.c: 32: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  4167  000028  0E80               	movlw	128
  4168  00002A  EC01  F010         	call	_lcdInst
  4169  00002E  0E41               	movlw	65
  4170  000030  0100               	movlb	0	; () banked
  4171  000032  6F8E               	movwf	??_inputEntry& (0+255),b
  4172  000034  0EEE               	movlw	238
  4173  000036                     u5467:
  4174  000036  2EE8               	decfsz	wreg,f,c
  4175  000038  D7FE               	bra	u5467
  4176  00003A  2F8E               	decfsz	??_inputEntry& (0+255),f,b
  4177  00003C  D7FC               	bra	u5467
  4178  00003E  F000               	nop	
  4179                           
  4180                           ;menu.c: 34: I2C_Send(nanoAddr, "Started input entry, hi\0");
  4181  000040  0EE7               	movlw	low STR_14
  4182  000042  6E2A               	movwf	I2C_Send@data,c
  4183  000044  0EFE               	movlw	high STR_14
  4184  000046  6E2B               	movwf	I2C_Send@data+1,c
  4185  000048  0ECF               	movlw	low _nanoAddr
  4186  00004A  6EF6               	movwf	tblptrl,c
  4187  00004C                     	if	1	;There is more than 1 active tblptr byte
  4188  00004C  0EFC               	movlw	high _nanoAddr
  4189  00004E  6EF7               	movwf	tblptrh,c
  4190  000050                     	endif
  4191  000050                     	if	1	;There are 3 active tblptr bytes
  4192  000050  0E00               	movlw	low (_nanoAddr shr (0+16))
  4193  000052  6EF8               	movwf	tblptru,c
  4194  000054                     	endif
  4195  000054  0008               	tblrd		*
  4196  000056  50F5               	movf	tablat,w,c
  4197  000058  ECA8  F00C         	call	_I2C_Send
  4198                           
  4199                           ;menu.c: 36: int compartmentNum = 0;
  4200  00005C  0E00               	movlw	0
  4201  00005E  0100               	movlb	0	; () banked
  4202  000060  6FE6               	movwf	(inputEntry@compartmentNum+1)& (0+255),b
  4203  000062  0E00               	movlw	0
  4204  000064  6FE5               	movwf	inputEntry@compartmentNum& (0+255),b
  4205                           
  4206                           ; BSR set to: 0
  4207                           ;menu.c: 37: char compartmentLabel[2] = "C0";
  4208  000066  C0F7  F0CA         	movff	inputEntry@F3167,inputEntry@compartmentLabel
  4209  00006A  C0F8  F0CB         	movff	inputEntry@F3167+1,inputEntry@compartmentLabel+1
  4210                           
  4211                           ; BSR set to: 0
  4212                           ;menu.c: 38: int inputEntryStep = 0;
  4213  00006E  0E00               	movlw	0
  4214  000070  6FE2               	movwf	(inputEntry@inputEntryStep+1)& (0+255),b
  4215  000072  0E00               	movlw	0
  4216  000074  6FE1               	movwf	inputEntry@inputEntryStep& (0+255),b
  4217                           
  4218                           ; BSR set to: 0
  4219                           ;menu.c: 39: int done = 0;
  4220  000076  0E00               	movlw	0
  4221  000078  6FCE               	movwf	(inputEntry@done+1)& (0+255),b
  4222  00007A  0E00               	movlw	0
  4223  00007C  6FCD               	movwf	inputEntry@done& (0+255),b
  4224                           
  4225                           ;menu.c: 41: int i, numPressed, doneCompartment, numB, numN, numS, numW, found, numFaste
      +                          ners;
  4226                           ;menu.c: 42: int setIsGood, doneMultiples;
  4227                           ;menu.c: 43: unsigned char pressed;
  4228                           ;menu.c: 45: while (!done) {
  4229  00007E  D342               	goto	l327
  4230  000080                     
  4231                           ; BSR set to: 0
  4232                           ;menu.c: 47: if (inputEntryStep == 0) {
  4233                           
  4234                           ; BSR set to: 0
  4235  000080  51E1               	movf	inputEntry@inputEntryStep& (0+255),w,b
  4236  000082  11E2               	iorwf	(inputEntry@inputEntryStep+1)& (0+255),w,b
  4237  000084  A4D8               	btfss	status,2,c
  4238  000086  D04B               	goto	l323
  4239                           
  4240                           ; BSR set to: 0
  4241                           ;menu.c: 48: printStringLCD(inputEntryQuestions[inputEntryStep]);
  4242  000088  C0E1  F027         	movff	inputEntry@inputEntryStep,___wmul@multiplier
  4243  00008C  C0E2  F028         	movff	inputEntry@inputEntryStep+1,___wmul@multiplier+1
  4244  000090  0E00               	movlw	0
  4245  000092  6E2A               	movwf	___wmul@multiplicand+1,c
  4246  000094  0E21               	movlw	33
  4247  000096  6E29               	movwf	___wmul@multiplicand,c
  4248  000098  ECC4  F00F         	call	___wmul	;wreg free
  4249  00009C  0EB6               	movlw	low _inputEntryQuestions
  4250  00009E  2427               	addwf	?___wmul,w,c
  4251  0000A0  6E2D               	movwf	printStringLCD@string,c
  4252  0000A2  0EFD               	movlw	high _inputEntryQuestions
  4253  0000A4  2028               	addwfc	?___wmul+1,w,c
  4254  0000A6  6E2E               	movwf	printStringLCD@string+1,c
  4255  0000A8  EC67  F007         	call	_printStringLCD	;wreg free
  4256                           
  4257                           ;menu.c: 50: pressed = pollKeypad();
  4258  0000AC  EC87  F00F         	call	_pollKeypad	;wreg free
  4259  0000B0  0100               	movlb	0	; () banked
  4260  0000B2  6FE9               	movwf	inputEntry@pressed& (0+255),b
  4261                           
  4262                           ; BSR set to: 0
  4263                           ;menu.c: 51: numPressed = pressed - 48;
  4264  0000B4  0ED0               	movlw	208
  4265  0000B6  25E9               	addwf	inputEntry@pressed& (0+255),w,b
  4266  0000B8  6FE3               	movwf	inputEntry@numPressed& (0+255),b
  4267  0000BA  6BE4               	clrf	(inputEntry@numPressed+1)& (0+255),b
  4268  0000BC  0EFF               	movlw	255
  4269  0000BE  23E4               	addwfc	(inputEntry@numPressed+1)& (0+255),f,b
  4270                           
  4271                           ; BSR set to: 0
  4272                           ;menu.c: 53: putch(pressed);
  4273  0000C0  51E9               	movf	inputEntry@pressed& (0+255),w,b
  4274  0000C2  ECF7  F00F         	call	_putch
  4275                           
  4276                           ;menu.c: 54: _delay((unsigned long)((500)*(40000000/4000.0)));
  4277  0000C6  0E1A               	movlw	26
  4278  0000C8  0100               	movlb	0	; () banked
  4279  0000CA  6F8F               	movwf	(??_inputEntry+1)& (0+255),b
  4280  0000CC  0E5E               	movlw	94
  4281  0000CE  6F8E               	movwf	??_inputEntry& (0+255),b
  4282  0000D0  0E6E               	movlw	110
  4283  0000D2                     u5477:
  4284  0000D2  2EE8               	decfsz	wreg,f,c
  4285  0000D4  D7FE               	bra	u5477
  4286  0000D6  2F8E               	decfsz	??_inputEntry& (0+255),f,b
  4287  0000D8  D7FC               	bra	u5477
  4288  0000DA  2F8F               	decfsz	(??_inputEntry+1)& (0+255),f,b
  4289  0000DC  D7FA               	bra	u5477
  4290  0000DE  F000               	nop	
  4291                           
  4292                           ;menu.c: 56: if (numPressed >= 4 && numPressed <= 8) {
  4293  0000E0  0100               	movlb	0	; () banked
  4294  0000E2  BFE4               	btfsc	(inputEntry@numPressed+1)& (0+255),7,b
  4295  0000E4  D015               	goto	l324
  4296  0000E6  51E4               	movf	(inputEntry@numPressed+1)& (0+255),w,b
  4297  0000E8  E104               	bnz	u4670
  4298  0000EA  0E04               	movlw	4
  4299  0000EC  5DE3               	subwf	inputEntry@numPressed& (0+255),w,b
  4300  0000EE  A0D8               	btfss	status,0,c
  4301  0000F0  D00F               	goto	l324
  4302  0000F2                     u4670:
  4303                           
  4304                           ; BSR set to: 0
  4305  0000F2  BFE4               	btfsc	(inputEntry@numPressed+1)& (0+255),7,b
  4306  0000F4  D006               	goto	u4680
  4307  0000F6  51E4               	movf	(inputEntry@numPressed+1)& (0+255),w,b
  4308  0000F8  E10B               	bnz	l4056
  4309  0000FA  0E09               	movlw	9
  4310  0000FC  5DE3               	subwf	inputEntry@numPressed& (0+255),w,b
  4311  0000FE  B0D8               	btfsc	status,0,c
  4312  000100  D007               	goto	l324
  4313  000102                     u4680:
  4314                           
  4315                           ; BSR set to: 0
  4316                           ;menu.c: 57: params.steps = numPressed;
  4317  000102  C0E3  F033         	movff	inputEntry@numPressed,_params
  4318  000106  C0E4  F034         	movff	inputEntry@numPressed+1,_params+1
  4319                           
  4320                           ; BSR set to: 0
  4321                           ;menu.c: 58: inputEntryStep++;
  4322  00010A  4BE1               	infsnz	inputEntry@inputEntryStep& (0+255),f,b
  4323  00010C  2BE2               	incf	(inputEntry@inputEntryStep+1)& (0+255),f,b
  4324                           
  4325                           ;menu.c: 59: } else printErrorLCD(errMsgs.badEntry);
  4326  00010E  D2FA               	goto	l327
  4327  000110                     l324:
  4328  000110                     l4056:
  4329                           
  4330                           ; BSR set to: 0
  4331  000110  0ED6               	movlw	low _errMsgs
  4332  000112  6F8A               	movwf	printErrorLCD@string& (0+255),b
  4333  000114  0EFC               	movlw	high _errMsgs
  4334  000116  6F8B               	movwf	(printErrorLCD@string+1)& (0+255),b
  4335  000118  ECB1  F00F         	call	_printErrorLCD	;wreg free
  4336                           
  4337                           ;menu.c: 60: } else if (inputEntryStep == 1) {
  4338  00011C  D2F3               	goto	l327
  4339  00011E                     l323:
  4340  00011E  0100               	movlb	0	; () banked
  4341  000120  05E1               	decf	inputEntry@inputEntryStep& (0+255),w,b
  4342  000122  11E2               	iorwf	(inputEntry@inputEntryStep+1)& (0+255),w,b
  4343  000124  A4D8               	btfss	status,2,c
  4344  000126  D2EE               	goto	l327
  4345                           
  4346                           ; BSR set to: 0
  4347                           ;menu.c: 62: char compartmentsToFill = assemblyStepEncoding[params.steps - 4];
  4348  000128  0EFC               	movlw	252
  4349  00012A  6F8E               	movwf	??_inputEntry& (0+255),b
  4350  00012C  0EFF               	movlw	255
  4351  00012E  6F8F               	movwf	(??_inputEntry+1)& (0+255),b
  4352  000130  C033  F090         	movff	_params,??_inputEntry+2
  4353  000134  C034  F091         	movff	_params+1,??_inputEntry+3
  4354  000138  518E               	movf	??_inputEntry& (0+255),w,b
  4355  00013A  2790               	addwf	(??_inputEntry+2)& (0+255),f,b
  4356  00013C  518F               	movf	(??_inputEntry+1)& (0+255),w,b
  4357  00013E  2391               	addwfc	(??_inputEntry+3)& (0+255),f,b
  4358  000140  0ECA               	movlw	low _assemblyStepEncoding
  4359  000142  2590               	addwf	(??_inputEntry+2)& (0+255),w,b
  4360  000144  6EF6               	movwf	tblptrl,c
  4361  000146  0EFC               	movlw	high _assemblyStepEncoding
  4362  000148  2191               	addwfc	(??_inputEntry+3)& (0+255),w,b
  4363  00014A  6EF7               	movwf	tblptrh,c
  4364  00014C                     	if	1	;There are 3 active tblptr bytes
  4365  00014C  6AF8               	clrf	tblptru,c
  4366  00014E  0E00               	movlw	low (__mediumconst shr (0+16))
  4367  000150  22F8               	addwfc	tblptru,f,c
  4368  000152                     	endif
  4369  000152  0008               	tblrd		*
  4370  000154  CFF5 F0CC          	movff	tablat,inputEntry@compartmentsToFill
  4371                           
  4372                           ; BSR set to: 0
  4373                           ;menu.c: 63: for (compartmentNum = 0; compartmentNum < 8; compartmentNum++) {
  4374  000158  0E00               	movlw	0
  4375  00015A  6FE6               	movwf	(inputEntry@compartmentNum+1)& (0+255),b
  4376  00015C  0E00               	movlw	0
  4377  00015E  6FE5               	movwf	inputEntry@compartmentNum& (0+255),b
  4378                           
  4379                           ; BSR set to: 0
  4380  000160  BFE6               	btfsc	(inputEntry@compartmentNum+1)& (0+255),7,b
  4381  000162  D008               	goto	l328
  4382  000164  51E6               	movf	(inputEntry@compartmentNum+1)& (0+255),w,b
  4383  000166  E105               	bnz	u4700
  4384  000168  0E08               	movlw	8
  4385  00016A  5DE5               	subwf	inputEntry@compartmentNum& (0+255),w,b
  4386  00016C  B0D8               	btfsc	status,0,c
  4387  00016E  D2B8               	goto	u5070
  4388  000170  D001               	goto	l328
  4389  000172                     u4700:
  4390                           
  4391                           ; BSR set to: 0
  4392  000172  D2B6               	goto	u5070
  4393  000174                     l328:
  4394                           
  4395                           ; BSR set to: 0
  4396                           ;menu.c: 65: if ((compartmentsToFill >> compartmentNum) & 0b1) {
  4397                           
  4398                           ; BSR set to: 0
  4399                           
  4400                           ;menu.c: 64: STARTCOMPARTMENT:
  4401                           
  4402                           ; BSR set to: 0
  4403  000174  C0E5  F08E         	movff	inputEntry@compartmentNum,??_inputEntry
  4404  000178  C0CC  F08F         	movff	inputEntry@compartmentsToFill,??_inputEntry+1
  4405  00017C  2B8E               	incf	??_inputEntry& (0+255),f,b
  4406  00017E  D002               	goto	u4714
  4407  000180                     u4715:
  4408  000180  90D8               	bcf	status,0,c
  4409  000182  338F               	rrcf	(??_inputEntry+1)& (0+255),f,b
  4410  000184                     u4714:
  4411  000184  2F8E               	decfsz	??_inputEntry& (0+255),f,b
  4412  000186  D7FC               	goto	u4715
  4413  000188  0100               	movlb	0	; () banked
  4414  00018A  A18F               	btfss	(??_inputEntry+1)& (0+255),0,b
  4415  00018C  D28A               	goto	l331
  4416                           
  4417                           ; BSR set to: 0
  4418                           ;menu.c: 66: char msg[] = "\1Started compartment x\0";
  4419  00018E  EE21  F022         	lfsr	2,inputEntry@F3188
  4420  000192  EE10  F092         	lfsr	1,inputEntry@msg
  4421  000196  0E17               	movlw	23
  4422  000198                     u4731:
  4423  000198  CFDB FFE3          	movff	plusw2,plusw1
  4424  00019C  06E8               	decf	wreg,f,c
  4425  00019E  E2FC               	bc	u4731
  4426                           
  4427                           ; BSR set to: 0
  4428                           ;menu.c: 67: msg[21] = compartmentNum + 1 + 48;
  4429  0001A0  51E5               	movf	inputEntry@compartmentNum& (0+255),w,b
  4430  0001A2  0F31               	addlw	49
  4431  0001A4  6FA7               	movwf	(inputEntry@msg+21)& (0+255),b
  4432                           
  4433                           ; BSR set to: 0
  4434                           ;menu.c: 68: I2C_Send(nanoAddr, msg);
  4435  0001A6  0E92               	movlw	low inputEntry@msg
  4436  0001A8  6E2A               	movwf	I2C_Send@data,c
  4437  0001AA  0E00               	movlw	high inputEntry@msg
  4438  0001AC  6E2B               	movwf	I2C_Send@data+1,c
  4439  0001AE  0ECF               	movlw	low _nanoAddr
  4440  0001B0  6EF6               	movwf	tblptrl,c
  4441  0001B2                     	if	1	;There is more than 1 active tblptr byte
  4442  0001B2  0EFC               	movlw	high _nanoAddr
  4443  0001B4  6EF7               	movwf	tblptrh,c
  4444  0001B6                     	endif
  4445  0001B6                     	if	1	;There are 3 active tblptr bytes
  4446  0001B6  0E00               	movlw	low (_nanoAddr shr (0+16))
  4447  0001B8  6EF8               	movwf	tblptru,c
  4448  0001BA                     	endif
  4449  0001BA  0008               	tblrd		*
  4450  0001BC  50F5               	movf	tablat,w,c
  4451  0001BE  ECA8  F00C         	call	_I2C_Send
  4452                           
  4453                           ;menu.c: 70: setIsGood = 0;
  4454  0001C2  0E00               	movlw	0
  4455  0001C4  0100               	movlb	0	; () banked
  4456  0001C6  6FD2               	movwf	(inputEntry@setIsGood+1)& (0+255),b
  4457  0001C8  0E00               	movlw	0
  4458  0001CA  D151               	goto	L3
  4459  0001CC                     
  4460                           ; BSR set to: 0
  4461                           ;menu.c: 72: numB = 0;
  4462                           
  4463                           ; BSR set to: 0
  4464  0001CC  0E00               	movlw	0
  4465  0001CE  6FDA               	movwf	(inputEntry@numB+1)& (0+255),b
  4466  0001D0  0E00               	movlw	0
  4467  0001D2  6FD9               	movwf	inputEntry@numB& (0+255),b
  4468                           
  4469                           ;menu.c: 73: numN = 0;
  4470  0001D4  0E00               	movlw	0
  4471  0001D6  6FDC               	movwf	(inputEntry@numN+1)& (0+255),b
  4472  0001D8  0E00               	movlw	0
  4473  0001DA  6FDB               	movwf	inputEntry@numN& (0+255),b
  4474                           
  4475                           ;menu.c: 74: numS = 0;
  4476  0001DC  0E00               	movlw	0
  4477  0001DE  6FDE               	movwf	(inputEntry@numS+1)& (0+255),b
  4478  0001E0  0E00               	movlw	0
  4479  0001E2  6FDD               	movwf	inputEntry@numS& (0+255),b
  4480                           
  4481                           ;menu.c: 75: numW = 0;
  4482  0001E4  0E00               	movlw	0
  4483  0001E6  6FE0               	movwf	(inputEntry@numW+1)& (0+255),b
  4484  0001E8  0E00               	movlw	0
  4485  0001EA  6FDF               	movwf	inputEntry@numW& (0+255),b
  4486                           
  4487                           ; BSR set to: 0
  4488                           ;menu.c: 76: char fastenerString[32];
  4489                           ;menu.c: 77: strcpy(fastenerString, inputEntryQuestions[inputEntryStep]);
  4490  0001EC  0EAA               	movlw	low inputEntry@fastenerString
  4491  0001EE  6E2D               	movwf	strcpy@to,c
  4492  0001F0  0E00               	movlw	high inputEntry@fastenerString
  4493  0001F2  6E2E               	movwf	strcpy@to+1,c
  4494  0001F4  C0E1  F027         	movff	inputEntry@inputEntryStep,___wmul@multiplier
  4495  0001F8  C0E2  F028         	movff	inputEntry@inputEntryStep+1,___wmul@multiplier+1
  4496  0001FC  0E00               	movlw	0
  4497  0001FE  6E2A               	movwf	___wmul@multiplicand+1,c
  4498  000200  0E21               	movlw	33
  4499  000202  6E29               	movwf	___wmul@multiplicand,c
  4500  000204  ECC4  F00F         	call	___wmul	;wreg free
  4501  000208  0EB6               	movlw	low _inputEntryQuestions
  4502  00020A  2427               	addwf	?___wmul,w,c
  4503  00020C  6E2F               	movwf	strcpy@from,c
  4504  00020E  0EFD               	movlw	high _inputEntryQuestions
  4505  000210  2028               	addwfc	?___wmul+1,w,c
  4506  000212  6E30               	movwf	strcpy@from+1,c
  4507  000214  EC55  F00F         	call	_strcpy	;wreg free
  4508                           
  4509                           ;menu.c: 78: fastenerString[14] = compartmentNum + 1 + 48;
  4510  000218  0100               	movlb	0	; () banked
  4511  00021A  51E5               	movf	inputEntry@compartmentNum& (0+255),w,b
  4512  00021C  0F31               	addlw	49
  4513  00021E  6FB8               	movwf	(inputEntry@fastenerString+14)& (0+255),b
  4514                           
  4515                           ; BSR set to: 0
  4516                           ;menu.c: 80: printStringLCD(fastenerString);
  4517  000220  0EAA               	movlw	low inputEntry@fastenerString
  4518  000222  6E2D               	movwf	printStringLCD@string,c
  4519  000224  0E00               	movlw	high inputEntry@fastenerString
  4520  000226  6E2E               	movwf	printStringLCD@string+1,c
  4521  000228  EC67  F007         	call	_printStringLCD	;wreg free
  4522                           
  4523                           ;menu.c: 81: lcd_set_cursor(9, 1);
  4524  00022C  0E01               	movlw	1
  4525  00022E  6E2D               	movwf	lcd_set_cursor@y,c
  4526  000230  0E09               	movlw	9
  4527  000232  ECFB  F00E         	call	_lcd_set_cursor
  4528                           
  4529                           ;menu.c: 82: doneCompartment = 0;
  4530  000236  0E00               	movlw	0
  4531  000238  0100               	movlb	0	; () banked
  4532  00023A  6FD6               	movwf	(inputEntry@doneCompartment+1)& (0+255),b
  4533  00023C  0E00               	movlw	0
  4534  00023E  D04D               	goto	L4
  4535  000240                     
  4536                           ; BSR set to: 0
  4537                           ;menu.c: 85: pressed = pollKeypad();
  4538                           
  4539                           ; BSR set to: 0
  4540  000240  EC87  F00F         	call	_pollKeypad	;wreg free
  4541  000244  0100               	movlb	0	; () banked
  4542  000246  6FE9               	movwf	inputEntry@pressed& (0+255),b
  4543                           
  4544                           ; BSR set to: 0
  4545                           ;menu.c: 86: if (pressed == 66 || pressed == 78 || pressed == 83 || pressed == 87) {
  4546  000248  0E42               	movlw	66
  4547  00024A  19E9               	xorwf	inputEntry@pressed& (0+255),w,b
  4548  00024C  B4D8               	btfsc	status,2,c
  4549  00024E  D00C               	goto	u4770
  4550                           
  4551                           ; BSR set to: 0
  4552  000250  0E4E               	movlw	78
  4553  000252  19E9               	xorwf	inputEntry@pressed& (0+255),w,b
  4554  000254  B4D8               	btfsc	status,2,c
  4555  000256  D008               	goto	u4770
  4556                           
  4557                           ; BSR set to: 0
  4558  000258  0E53               	movlw	83
  4559  00025A  19E9               	xorwf	inputEntry@pressed& (0+255),w,b
  4560  00025C  B4D8               	btfsc	status,2,c
  4561  00025E  D004               	goto	u4770
  4562                           
  4563                           ; BSR set to: 0
  4564  000260  0E57               	movlw	87
  4565  000262  19E9               	xorwf	inputEntry@pressed& (0+255),w,b
  4566  000264  A4D8               	btfss	status,2,c
  4567  000266  D022               	goto	l338
  4568  000268                     u4770:
  4569                           
  4570                           ; BSR set to: 0
  4571                           ;menu.c: 87: putch(pressed);
  4572                           
  4573                           ; BSR set to: 0
  4574  000268  51E9               	movf	inputEntry@pressed& (0+255),w,b
  4575  00026A  ECF7  F00F         	call	_putch
  4576                           
  4577                           ;menu.c: 88: if (pressed == 66) numB++;
  4578  00026E  0E42               	movlw	66
  4579  000270  0100               	movlb	0	; () banked
  4580  000272  19E9               	xorwf	inputEntry@pressed& (0+255),w,b
  4581  000274  A4D8               	btfss	status,2,c
  4582  000276  D003               	goto	l341
  4583                           
  4584                           ; BSR set to: 0
  4585  000278  4BD9               	infsnz	inputEntry@numB& (0+255),f,b
  4586  00027A  2BDA               	incf	(inputEntry@numB+1)& (0+255),f,b
  4587  00027C  D014               	goto	l347
  4588  00027E                     l341:
  4589                           
  4590                           ; BSR set to: 0
  4591                           ;menu.c: 89: else if (pressed == 78) numN++;
  4592                           
  4593                           ; BSR set to: 0
  4594  00027E  0E4E               	movlw	78
  4595  000280  19E9               	xorwf	inputEntry@pressed& (0+255),w,b
  4596  000282  A4D8               	btfss	status,2,c
  4597  000284  D003               	goto	l343
  4598                           
  4599                           ; BSR set to: 0
  4600  000286  4BDB               	infsnz	inputEntry@numN& (0+255),f,b
  4601  000288  2BDC               	incf	(inputEntry@numN+1)& (0+255),f,b
  4602  00028A  D00D               	goto	l347
  4603  00028C                     l343:
  4604                           
  4605                           ; BSR set to: 0
  4606                           ;menu.c: 90: else if (pressed == 83) numS ++;
  4607                           
  4608                           ; BSR set to: 0
  4609  00028C  0E53               	movlw	83
  4610  00028E  19E9               	xorwf	inputEntry@pressed& (0+255),w,b
  4611  000290  A4D8               	btfss	status,2,c
  4612  000292  D003               	goto	l345
  4613                           
  4614                           ; BSR set to: 0
  4615  000294  4BDD               	infsnz	inputEntry@numS& (0+255),f,b
  4616  000296  2BDE               	incf	(inputEntry@numS+1)& (0+255),f,b
  4617  000298  D006               	goto	l347
  4618  00029A                     l345:
  4619                           
  4620                           ; BSR set to: 0
  4621                           ;menu.c: 91: else if (pressed == 87) numW++;
  4622                           
  4623                           ; BSR set to: 0
  4624  00029A  0E57               	movlw	87
  4625  00029C  19E9               	xorwf	inputEntry@pressed& (0+255),w,b
  4626  00029E  A4D8               	btfss	status,2,c
  4627  0002A0  D002               	goto	l347
  4628                           
  4629                           ; BSR set to: 0
  4630  0002A2  4BDF               	infsnz	inputEntry@numW& (0+255),f,b
  4631  0002A4  2BE0               	incf	(inputEntry@numW+1)& (0+255),f,b
  4632  0002A6                     l347:
  4633                           
  4634                           ; BSR set to: 0
  4635                           ;menu.c: 92: doneCompartment++;
  4636                           
  4637                           ; BSR set to: 0
  4638                           
  4639                           ; BSR set to: 0
  4640                           
  4641                           ; BSR set to: 0
  4642  0002A6  4BD5               	infsnz	inputEntry@doneCompartment& (0+255),f,b
  4643  0002A8  2BD6               	incf	(inputEntry@doneCompartment+1)& (0+255),f,b
  4644                           
  4645                           ;menu.c: 93: } else if (pressed == 35) {
  4646  0002AA  D021               	goto	l354
  4647  0002AC                     l338:
  4648                           
  4649                           ; BSR set to: 0
  4650                           
  4651                           ; BSR set to: 0
  4652  0002AC  0E23               	movlw	35
  4653  0002AE  19E9               	xorwf	inputEntry@pressed& (0+255),w,b
  4654  0002B0  A4D8               	btfss	status,2,c
  4655  0002B2  D015               	goto	l349
  4656                           
  4657                           ; BSR set to: 0
  4658                           ;menu.c: 94: if (numB != 0 || numN != 0 || numS != 0 || numW != 0) doneCompartment = 4;
  4659  0002B4  51D9               	movf	inputEntry@numB& (0+255),w,b
  4660  0002B6  11DA               	iorwf	(inputEntry@numB+1)& (0+255),w,b
  4661  0002B8  A4D8               	btfss	status,2,c
  4662  0002BA  D00C               	goto	u4860
  4663                           
  4664                           ; BSR set to: 0
  4665  0002BC  51DB               	movf	inputEntry@numN& (0+255),w,b
  4666  0002BE  11DC               	iorwf	(inputEntry@numN+1)& (0+255),w,b
  4667  0002C0  A4D8               	btfss	status,2,c
  4668  0002C2  D008               	goto	u4860
  4669                           
  4670                           ; BSR set to: 0
  4671  0002C4  51DD               	movf	inputEntry@numS& (0+255),w,b
  4672  0002C6  11DE               	iorwf	(inputEntry@numS+1)& (0+255),w,b
  4673  0002C8  A4D8               	btfss	status,2,c
  4674  0002CA  D004               	goto	u4860
  4675                           
  4676                           ; BSR set to: 0
  4677  0002CC  51DF               	movf	inputEntry@numW& (0+255),w,b
  4678  0002CE  11E0               	iorwf	(inputEntry@numW+1)& (0+255),w,b
  4679  0002D0  B4D8               	btfsc	status,2,c
  4680  0002D2  D00D               	goto	l354
  4681  0002D4                     u4860:
  4682                           
  4683                           ; BSR set to: 0
  4684                           
  4685                           ; BSR set to: 0
  4686  0002D4  0E00               	movlw	0
  4687  0002D6  6FD6               	movwf	(inputEntry@doneCompartment+1)& (0+255),b
  4688  0002D8  0E04               	movlw	4
  4689  0002DA                     L4:
  4690  0002DA  6FD5               	movwf	inputEntry@doneCompartment& (0+255),b
  4691                           
  4692                           ; BSR set to: 0
  4693                           ;menu.c: 95: } else if (pressed == 42) {
  4694  0002DC  D008               	goto	l354
  4695  0002DE                     l349:
  4696                           
  4697                           ; BSR set to: 0
  4698                           
  4699                           ; BSR set to: 0
  4700  0002DE  0E2A               	movlw	42
  4701  0002E0  19E9               	xorwf	inputEntry@pressed& (0+255),w,b
  4702  0002E2  A4D8               	btfss	status,2,c
  4703  0002E4  D004               	goto	l354
  4704                           
  4705                           ; BSR set to: 0
  4706                           ;menu.c: 96: compartmentNum--;
  4707  0002E6  07E5               	decf	inputEntry@compartmentNum& (0+255),f,b
  4708  0002E8  A0D8               	btfss	status,0,c
  4709  0002EA  07E6               	decf	(inputEntry@compartmentNum+1)& (0+255),f,b
  4710                           
  4711                           ;menu.c: 97: goto STARTMULTIPLES;
  4712  0002EC  D0C6               	goto	u4960
  4713  0002EE                     l354:
  4714                           
  4715                           ; BSR set to: 0
  4716                           
  4717                           ; BSR set to: 0
  4718                           
  4719                           ; BSR set to: 0
  4720                           
  4721                           ; BSR set to: 0
  4722                           
  4723                           ; BSR set to: 0
  4724  0002EE  BFD6               	btfsc	(inputEntry@doneCompartment+1)& (0+255),7,b
  4725  0002F0  D7A7               	goto	l337
  4726  0002F2  51D6               	movf	(inputEntry@doneCompartment+1)& (0+255),w,b
  4727  0002F4  E104               	bnz	l4136
  4728  0002F6  0E04               	movlw	4
  4729  0002F8  5DD5               	subwf	inputEntry@doneCompartment& (0+255),w,b
  4730  0002FA  A0D8               	btfss	status,0,c
  4731  0002FC  D7A1               	goto	l337
  4732  0002FE                     l4136:
  4733                           
  4734                           ; BSR set to: 0
  4735                           ;menu.c: 98: }
  4736                           ;menu.c: 99: }
  4737                           ;menu.c: 102: found = 0;
  4738  0002FE  0E00               	movlw	0
  4739  000300  6FD0               	movwf	(inputEntry@found+1)& (0+255),b
  4740  000302  0E00               	movlw	0
  4741  000304  6FCF               	movwf	inputEntry@found& (0+255),b
  4742                           
  4743                           ;menu.c: 103: for (i = 0; i < 21; i++) {
  4744  000306  0E00               	movlw	0
  4745  000308  6FE8               	movwf	(inputEntry@i+1)& (0+255),b
  4746  00030A  0E00               	movlw	0
  4747  00030C  6FE7               	movwf	inputEntry@i& (0+255),b
  4748                           
  4749                           ; BSR set to: 0
  4750  00030E  BFE8               	btfsc	(inputEntry@i+1)& (0+255),7,b
  4751  000310  D008               	goto	l357
  4752  000312  51E8               	movf	(inputEntry@i+1)& (0+255),w,b
  4753  000314  E105               	bnz	u4890
  4754  000316  0E15               	movlw	21
  4755  000318  5DE7               	subwf	inputEntry@i& (0+255),w,b
  4756  00031A  B0D8               	btfsc	status,0,c
  4757  00031C  D099               	goto	u4940
  4758  00031E  D001               	goto	l357
  4759  000320                     u4890:
  4760                           
  4761                           ; BSR set to: 0
  4762  000320  D097               	goto	u4940
  4763  000322                     l357:
  4764                           
  4765                           ; BSR set to: 0
  4766                           ;menu.c: 104: if (fastenerMatrix[i][0] == numB &&
  4767                           ;menu.c: 105: fastenerMatrix[i][1] == numN &&
  4768                           ;menu.c: 106: fastenerMatrix[i][2] == numS &&
  4769                           ;menu.c: 107: fastenerMatrix[i][3] == numW)
  4770                           
  4771                           ; BSR set to: 0
  4772  000322  C0E7  F08E         	movff	inputEntry@i,??_inputEntry
  4773  000326  C0E8  F08F         	movff	inputEntry@i+1,??_inputEntry+1
  4774  00032A  90D8               	bcf	status,0,c
  4775  00032C  378E               	rlcf	??_inputEntry& (0+255),f,b
  4776  00032E  378F               	rlcf	(??_inputEntry+1)& (0+255),f,b
  4777  000330  90D8               	bcf	status,0,c
  4778  000332  378E               	rlcf	??_inputEntry& (0+255),f,b
  4779  000334  378F               	rlcf	(??_inputEntry+1)& (0+255),f,b
  4780  000336  0E3A               	movlw	low _fastenerMatrix
  4781  000338  258E               	addwf	??_inputEntry& (0+255),w,b
  4782  00033A  6EF6               	movwf	tblptrl,c
  4783  00033C  0EFE               	movlw	high _fastenerMatrix
  4784  00033E  218F               	addwfc	(??_inputEntry+1)& (0+255),w,b
  4785  000340  6EF7               	movwf	tblptrh,c
  4786  000342                     	if	1	;There are 3 active tblptr bytes
  4787  000342  6AF8               	clrf	tblptru,c
  4788  000344  0E00               	movlw	low (__mediumconst shr (0+16))
  4789  000346  22F8               	addwfc	tblptru,f,c
  4790  000348                     	endif
  4791  000348  0008               	tblrd		*
  4792  00034A  50F5               	movf	tablat,w,c
  4793  00034C  6F90               	movwf	(??_inputEntry+2)& (0+255),b
  4794  00034E  6B91               	clrf	(??_inputEntry+3)& (0+255),b
  4795  000350  51D9               	movf	inputEntry@numB& (0+255),w,b
  4796  000352  1990               	xorwf	(??_inputEntry+2)& (0+255),w,b
  4797  000354  E176               	bnz	l4154
  4798  000356  51DA               	movf	(inputEntry@numB+1)& (0+255),w,b
  4799  000358  1991               	xorwf	(??_inputEntry+3)& (0+255),w,b
  4800  00035A  A4D8               	btfss	status,2,c
  4801  00035C  D072               	goto	l359
  4802                           
  4803                           ; BSR set to: 0
  4804  00035E  C0E7  F08E         	movff	inputEntry@i,??_inputEntry
  4805  000362  C0E8  F08F         	movff	inputEntry@i+1,??_inputEntry+1
  4806  000366  90D8               	bcf	status,0,c
  4807  000368  378E               	rlcf	??_inputEntry& (0+255),f,b
  4808  00036A  378F               	rlcf	(??_inputEntry+1)& (0+255),f,b
  4809  00036C  90D8               	bcf	status,0,c
  4810  00036E  378E               	rlcf	??_inputEntry& (0+255),f,b
  4811  000370  378F               	rlcf	(??_inputEntry+1)& (0+255),f,b
  4812  000372  0E01               	movlw	1
  4813  000374  278E               	addwf	??_inputEntry& (0+255),f,b
  4814  000376  0E00               	movlw	0
  4815  000378  238F               	addwfc	(??_inputEntry+1)& (0+255),f,b
  4816  00037A  0E3A               	movlw	low _fastenerMatrix
  4817  00037C  258E               	addwf	??_inputEntry& (0+255),w,b
  4818  00037E  6EF6               	movwf	tblptrl,c
  4819  000380  0EFE               	movlw	high _fastenerMatrix
  4820  000382  218F               	addwfc	(??_inputEntry+1)& (0+255),w,b
  4821  000384  6EF7               	movwf	tblptrh,c
  4822  000386                     	if	1	;There are 3 active tblptr bytes
  4823  000386  6AF8               	clrf	tblptru,c
  4824  000388  0E00               	movlw	low (__mediumconst shr (0+16))
  4825  00038A  22F8               	addwfc	tblptru,f,c
  4826  00038C                     	endif
  4827  00038C  0008               	tblrd		*
  4828  00038E  50F5               	movf	tablat,w,c
  4829  000390  6F90               	movwf	(??_inputEntry+2)& (0+255),b
  4830  000392  6B91               	clrf	(??_inputEntry+3)& (0+255),b
  4831  000394  51DB               	movf	inputEntry@numN& (0+255),w,b
  4832  000396  1990               	xorwf	(??_inputEntry+2)& (0+255),w,b
  4833  000398  E154               	bnz	l4154
  4834  00039A  51DC               	movf	(inputEntry@numN+1)& (0+255),w,b
  4835  00039C  1991               	xorwf	(??_inputEntry+3)& (0+255),w,b
  4836  00039E  A4D8               	btfss	status,2,c
  4837  0003A0  D050               	goto	l359
  4838                           
  4839                           ; BSR set to: 0
  4840  0003A2  C0E7  F08E         	movff	inputEntry@i,??_inputEntry
  4841  0003A6  C0E8  F08F         	movff	inputEntry@i+1,??_inputEntry+1
  4842  0003AA  90D8               	bcf	status,0,c
  4843  0003AC  378E               	rlcf	??_inputEntry& (0+255),f,b
  4844  0003AE  378F               	rlcf	(??_inputEntry+1)& (0+255),f,b
  4845  0003B0  90D8               	bcf	status,0,c
  4846  0003B2  378E               	rlcf	??_inputEntry& (0+255),f,b
  4847  0003B4  378F               	rlcf	(??_inputEntry+1)& (0+255),f,b
  4848  0003B6  0E02               	movlw	2
  4849  0003B8  278E               	addwf	??_inputEntry& (0+255),f,b
  4850  0003BA  0E00               	movlw	0
  4851  0003BC  238F               	addwfc	(??_inputEntry+1)& (0+255),f,b
  4852  0003BE  0E3A               	movlw	low _fastenerMatrix
  4853  0003C0  258E               	addwf	??_inputEntry& (0+255),w,b
  4854  0003C2  6EF6               	movwf	tblptrl,c
  4855  0003C4  0EFE               	movlw	high _fastenerMatrix
  4856  0003C6  218F               	addwfc	(??_inputEntry+1)& (0+255),w,b
  4857  0003C8  6EF7               	movwf	tblptrh,c
  4858  0003CA                     	if	1	;There are 3 active tblptr bytes
  4859  0003CA  6AF8               	clrf	tblptru,c
  4860  0003CC  0E00               	movlw	low (__mediumconst shr (0+16))
  4861  0003CE  22F8               	addwfc	tblptru,f,c
  4862  0003D0                     	endif
  4863  0003D0  0008               	tblrd		*
  4864  0003D2  50F5               	movf	tablat,w,c
  4865  0003D4  6F90               	movwf	(??_inputEntry+2)& (0+255),b
  4866  0003D6  6B91               	clrf	(??_inputEntry+3)& (0+255),b
  4867  0003D8  51DD               	movf	inputEntry@numS& (0+255),w,b
  4868  0003DA  1990               	xorwf	(??_inputEntry+2)& (0+255),w,b
  4869  0003DC  E132               	bnz	l4154
  4870  0003DE  51DE               	movf	(inputEntry@numS+1)& (0+255),w,b
  4871  0003E0  1991               	xorwf	(??_inputEntry+3)& (0+255),w,b
  4872  0003E2  A4D8               	btfss	status,2,c
  4873  0003E4  D02E               	goto	l359
  4874                           
  4875                           ; BSR set to: 0
  4876  0003E6  C0E7  F08E         	movff	inputEntry@i,??_inputEntry
  4877  0003EA  C0E8  F08F         	movff	inputEntry@i+1,??_inputEntry+1
  4878  0003EE  90D8               	bcf	status,0,c
  4879  0003F0  378E               	rlcf	??_inputEntry& (0+255),f,b
  4880  0003F2  378F               	rlcf	(??_inputEntry+1)& (0+255),f,b
  4881  0003F4  90D8               	bcf	status,0,c
  4882  0003F6  378E               	rlcf	??_inputEntry& (0+255),f,b
  4883  0003F8  378F               	rlcf	(??_inputEntry+1)& (0+255),f,b
  4884  0003FA  0E03               	movlw	3
  4885  0003FC  278E               	addwf	??_inputEntry& (0+255),f,b
  4886  0003FE  0E00               	movlw	0
  4887  000400  238F               	addwfc	(??_inputEntry+1)& (0+255),f,b
  4888  000402  0E3A               	movlw	low _fastenerMatrix
  4889  000404  258E               	addwf	??_inputEntry& (0+255),w,b
  4890  000406  6EF6               	movwf	tblptrl,c
  4891  000408  0EFE               	movlw	high _fastenerMatrix
  4892  00040A  218F               	addwfc	(??_inputEntry+1)& (0+255),w,b
  4893  00040C  6EF7               	movwf	tblptrh,c
  4894  00040E                     	if	1	;There are 3 active tblptr bytes
  4895  00040E  6AF8               	clrf	tblptru,c
  4896  000410  0E00               	movlw	low (__mediumconst shr (0+16))
  4897  000412  22F8               	addwfc	tblptru,f,c
  4898  000414                     	endif
  4899  000414  0008               	tblrd		*
  4900  000416  50F5               	movf	tablat,w,c
  4901  000418  6F90               	movwf	(??_inputEntry+2)& (0+255),b
  4902  00041A  6B91               	clrf	(??_inputEntry+3)& (0+255),b
  4903  00041C  51DF               	movf	inputEntry@numW& (0+255),w,b
  4904  00041E  1990               	xorwf	(??_inputEntry+2)& (0+255),w,b
  4905  000420  E110               	bnz	l4154
  4906  000422  51E0               	movf	(inputEntry@numW+1)& (0+255),w,b
  4907  000424  1991               	xorwf	(??_inputEntry+3)& (0+255),w,b
  4908  000426  A4D8               	btfss	status,2,c
  4909  000428  D00C               	goto	l359
  4910                           
  4911                           ; BSR set to: 0
  4912                           ;menu.c: 108: {
  4913                           ;menu.c: 109: params.toFill[compartmentNum] = i;
  4914  00042A  0E35               	movlw	low (_params+2)
  4915  00042C  25E5               	addwf	inputEntry@compartmentNum& (0+255),w,b
  4916  00042E  6ED9               	movwf	fsr2l,c
  4917  000430  0E00               	movlw	high (_params+2)
  4918  000432  21E6               	addwfc	(inputEntry@compartmentNum+1)& (0+255),w,b
  4919  000434  6EDA               	movwf	fsr2h,c
  4920  000436  C0E7  FFDF         	movff	inputEntry@i,indf2
  4921                           
  4922                           ; BSR set to: 0
  4923                           ;menu.c: 110: found = 1;
  4924  00043A  0E00               	movlw	0
  4925  00043C  6FD0               	movwf	(inputEntry@found+1)& (0+255),b
  4926  00043E  0E01               	movlw	1
  4927  000440  6FCF               	movwf	inputEntry@found& (0+255),b
  4928  000442                     l359:
  4929  000442                     l4154:
  4930                           
  4931                           ; BSR set to: 0
  4932  000442  4BE7               	infsnz	inputEntry@i& (0+255),f,b
  4933  000444  2BE8               	incf	(inputEntry@i+1)& (0+255),f,b
  4934                           
  4935                           ; BSR set to: 0
  4936  000446  BFE8               	btfsc	(inputEntry@i+1)& (0+255),7,b
  4937  000448  D76C               	goto	l357
  4938  00044A  51E8               	movf	(inputEntry@i+1)& (0+255),w,b
  4939  00044C  E101               	bnz	l4158
  4940  00044E  D763               	goto	L5
  4941  000450                     u4940:
  4942  000450                     l4158:
  4943                           
  4944                           ; BSR set to: 0
  4945                           ;menu.c: 111: }
  4946                           ;menu.c: 112: }
  4947                           ;menu.c: 113: if (!found) {
  4948  000450  51CF               	movf	inputEntry@found& (0+255),w,b
  4949  000452  11D0               	iorwf	(inputEntry@found+1)& (0+255),w,b
  4950  000454  A4D8               	btfss	status,2,c
  4951  000456  D007               	goto	l360
  4952                           
  4953                           ; BSR set to: 0
  4954                           ;menu.c: 114: printErrorLCD(errMsgs.badEntry);
  4955  000458  0ED6               	movlw	low _errMsgs
  4956  00045A  6F8A               	movwf	printErrorLCD@string& (0+255),b
  4957  00045C  0EFC               	movlw	high _errMsgs
  4958  00045E  6F8B               	movwf	(printErrorLCD@string+1)& (0+255),b
  4959  000460  ECB1  F00F         	call	_printErrorLCD	;wreg free
  4960                           
  4961                           ;menu.c: 118: } else {
  4962                           
  4963                           ;menu.c: 117: continue;
  4964  000464  D005               	goto	l361
  4965  000466                     l360:
  4966                           
  4967                           ;menu.c: 119: setIsGood = 1;
  4968  000466  0E00               	movlw	0
  4969  000468  0100               	movlb	0	; () banked
  4970  00046A  6FD2               	movwf	(inputEntry@setIsGood+1)& (0+255),b
  4971  00046C  0E01               	movlw	1
  4972  00046E                     L3:
  4973  00046E  6FD1               	movwf	inputEntry@setIsGood& (0+255),b
  4974  000470                     l361:
  4975                           
  4976                           ; BSR set to: 0
  4977                           
  4978                           ; BSR set to: 0
  4979  000470  0100               	movlb	0	; () banked
  4980  000472  51D1               	movf	inputEntry@setIsGood& (0+255),w,b
  4981  000474  11D2               	iorwf	(inputEntry@setIsGood+1)& (0+255),w,b
  4982  000476  B4D8               	btfsc	status,2,c
  4983  000478  D6A9               	goto	l335
  4984  00047A                     u4960:
  4985                           
  4986                           ; BSR set to: 0
  4987                           ;menu.c: 125: doneMultiples = 0;
  4988                           
  4989                           ; BSR set to: 0
  4990                           
  4991                           ;menu.c: 120: }
  4992                           ;menu.c: 121: }
  4993                           ;menu.c: 124: STARTMULTIPLES:
  4994                           
  4995                           ; BSR set to: 0
  4996  00047A  0E00               	movlw	0
  4997  00047C  6FD4               	movwf	(inputEntry@doneMultiples+1)& (0+255),b
  4998  00047E  0E00               	movlw	0
  4999  000480  D109               	goto	L6
  5000  000482                     
  5001                           ; BSR set to: 0
  5002                           ;menu.c: 127: printStringLCD(inputEntryQuestions[2]);
  5003                           
  5004                           ; BSR set to: 0
  5005  000482  0EF8               	movlw	low (_inputEntryQuestions+66)
  5006  000484  6E2D               	movwf	printStringLCD@string,c
  5007  000486  0EFD               	movlw	high (_inputEntryQuestions+66)
  5008  000488  6E2E               	movwf	printStringLCD@string+1,c
  5009  00048A  EC67  F007         	call	_printStringLCD	;wreg free
  5010                           
  5011                           ;menu.c: 128: lcd_set_cursor(14, 1);
  5012  00048E  0E01               	movlw	1
  5013  000490  6E2D               	movwf	lcd_set_cursor@y,c
  5014  000492  0E0E               	movlw	14
  5015  000494  ECFB  F00E         	call	_lcd_set_cursor
  5016                           
  5017                           ;menu.c: 130: pressed = pollKeypad();
  5018  000498  EC87  F00F         	call	_pollKeypad	;wreg free
  5019  00049C  0100               	movlb	0	; () banked
  5020  00049E  6FE9               	movwf	inputEntry@pressed& (0+255),b
  5021                           
  5022                           ; BSR set to: 0
  5023                           ;menu.c: 131: numPressed = pressed - 48;
  5024  0004A0  0ED0               	movlw	208
  5025  0004A2  25E9               	addwf	inputEntry@pressed& (0+255),w,b
  5026  0004A4  6FE3               	movwf	inputEntry@numPressed& (0+255),b
  5027  0004A6  6BE4               	clrf	(inputEntry@numPressed+1)& (0+255),b
  5028  0004A8  0EFF               	movlw	255
  5029  0004AA  23E4               	addwfc	(inputEntry@numPressed+1)& (0+255),f,b
  5030                           
  5031                           ; BSR set to: 0
  5032                           ;menu.c: 133: if (pressed == 42) goto STARTCOMPARTMENT;
  5033  0004AC  0E2A               	movlw	42
  5034  0004AE  19E9               	xorwf	inputEntry@pressed& (0+255),w,b
  5035  0004B0  B4D8               	btfsc	status,2,c
  5036  0004B2  D660               	goto	l328
  5037                           
  5038                           ; BSR set to: 0
  5039                           ;menu.c: 136: putch(pressed);
  5040                           
  5041                           ; BSR set to: 0
  5042                           
  5043                           ; BSR set to: 0
  5044  0004B4  51E9               	movf	inputEntry@pressed& (0+255),w,b
  5045  0004B6  ECF7  F00F         	call	_putch
  5046                           
  5047                           ;menu.c: 137: _delay((unsigned long)((500)*(40000000/4000.0)));
  5048  0004BA  0E1A               	movlw	26
  5049  0004BC  0100               	movlb	0	; () banked
  5050  0004BE  6F8F               	movwf	(??_inputEntry+1)& (0+255),b
  5051  0004C0  0E5E               	movlw	94
  5052  0004C2  6F8E               	movwf	??_inputEntry& (0+255),b
  5053  0004C4  0E6E               	movlw	110
  5054  0004C6                     u5487:
  5055  0004C6  2EE8               	decfsz	wreg,f,c
  5056  0004C8  D7FE               	bra	u5487
  5057  0004CA  2F8E               	decfsz	??_inputEntry& (0+255),f,b
  5058  0004CC  D7FC               	bra	u5487
  5059  0004CE  2F8F               	decfsz	(??_inputEntry+1)& (0+255),f,b
  5060  0004D0  D7FA               	bra	u5487
  5061  0004D2  F000               	nop	
  5062                           
  5063                           ;menu.c: 139: int sum = 0;
  5064  0004D4  0E00               	movlw	0
  5065  0004D6  0100               	movlb	0	; () banked
  5066  0004D8  6FD8               	movwf	(inputEntry@sum+1)& (0+255),b
  5067  0004DA  0E00               	movlw	0
  5068  0004DC  6FD7               	movwf	inputEntry@sum& (0+255),b
  5069                           
  5070                           ; BSR set to: 0
  5071                           ;menu.c: 140: for (i = 0; i < 4; i++) {
  5072  0004DE  0E00               	movlw	0
  5073  0004E0  6FE8               	movwf	(inputEntry@i+1)& (0+255),b
  5074  0004E2  0E00               	movlw	0
  5075  0004E4  6FE7               	movwf	inputEntry@i& (0+255),b
  5076  0004E6                     l4190:
  5077                           
  5078                           ; BSR set to: 0
  5079  0004E6  BFE8               	btfsc	(inputEntry@i+1)& (0+255),7,b
  5080  0004E8  D006               	goto	l366
  5081  0004EA  51E8               	movf	(inputEntry@i+1)& (0+255),w,b
  5082  0004EC  E127               	bnz	l4200
  5083  0004EE  0E04               	movlw	4
  5084  0004F0  5DE7               	subwf	inputEntry@i& (0+255),w,b
  5085  0004F2  B0D8               	btfsc	status,0,c
  5086  0004F4  D023               	goto	u4990
  5087  0004F6                     l366:
  5088                           
  5089                           ; BSR set to: 0
  5090                           ;menu.c: 141: sum += fastenerMatrix[params.toFill[compartmentNum]][i];
  5091                           
  5092                           ; BSR set to: 0
  5093  0004F6  0E35               	movlw	low (_params+2)
  5094  0004F8  25E5               	addwf	inputEntry@compartmentNum& (0+255),w,b
  5095  0004FA  6ED9               	movwf	fsr2l,c
  5096  0004FC  0E00               	movlw	high (_params+2)
  5097  0004FE  21E6               	addwfc	(inputEntry@compartmentNum+1)& (0+255),w,b
  5098  000500  6EDA               	movwf	fsr2h,c
  5099  000502  50DF               	movf	indf2,w,c
  5100  000504  6F8E               	movwf	??_inputEntry& (0+255),b
  5101  000506  518E               	movf	??_inputEntry& (0+255),w,b
  5102  000508  0D04               	mullw	4
  5103  00050A  0E3A               	movlw	low _fastenerMatrix
  5104  00050C  6F8F               	movwf	(??_inputEntry+1)& (0+255),b
  5105  00050E  0EFE               	movlw	high _fastenerMatrix
  5106  000510  6F90               	movwf	(??_inputEntry+2)& (0+255),b
  5107  000512  50F3               	movf	prodl,w,c
  5108  000514  278F               	addwf	(??_inputEntry+1)& (0+255),f,b
  5109  000516  50F4               	movf	prodh,w,c
  5110  000518  2390               	addwfc	(??_inputEntry+2)& (0+255),f,b
  5111  00051A  51E7               	movf	inputEntry@i& (0+255),w,b
  5112  00051C  278F               	addwf	(??_inputEntry+1)& (0+255),f,b
  5113  00051E  51E8               	movf	(inputEntry@i+1)& (0+255),w,b
  5114  000520  2390               	addwfc	(??_inputEntry+2)& (0+255),f,b
  5115  000522  C08F  FFF6         	movff	??_inputEntry+1,tblptrl
  5116  000526  C090  FFF7         	movff	??_inputEntry+2,tblptrh
  5117  00052A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5118  00052A  6AF8               	clrf	tblptru,c
  5119  00052C                     	endif
  5120  00052C                     	if	0	;tblptru may be non-zero
  5121  00052C                     	endif
  5122  00052C  0008               	tblrd		*
  5123  00052E  50F5               	movf	tablat,w,c
  5124  000530  27D7               	addwf	inputEntry@sum& (0+255),f,b
  5125  000532  0E00               	movlw	0
  5126  000534  23D8               	addwfc	(inputEntry@sum+1)& (0+255),f,b
  5127                           
  5128                           ; BSR set to: 0
  5129  000536  4BE7               	infsnz	inputEntry@i& (0+255),f,b
  5130  000538  2BE8               	incf	(inputEntry@i+1)& (0+255),f,b
  5131  00053A  D7D5               	goto	l4190
  5132  00053C                     u4990:
  5133  00053C                     l4200:
  5134                           
  5135                           ; BSR set to: 0
  5136                           ;menu.c: 142: };
  5137                           ;menu.c: 143: if (numPressed * sum > 4) {
  5138  00053C  C0E3  F027         	movff	inputEntry@numPressed,___wmul@multiplier
  5139  000540  C0E4  F028         	movff	inputEntry@numPressed+1,___wmul@multiplier+1
  5140  000544  C0D7  F029         	movff	inputEntry@sum,___wmul@multiplicand
  5141  000548  C0D8  F02A         	movff	inputEntry@sum+1,___wmul@multiplicand+1
  5142  00054C  ECC4  F00F         	call	___wmul	;wreg free
  5143  000550  BE28               	btfsc	?___wmul+1,7,c
  5144  000552  D00E               	goto	l368
  5145  000554  5028               	movf	?___wmul+1,w,c
  5146  000556  E104               	bnz	u5000
  5147  000558  0E05               	movlw	5
  5148  00055A  5C27               	subwf	?___wmul,w,c
  5149  00055C  A0D8               	btfss	status,0,c
  5150  00055E  D008               	goto	l368
  5151  000560                     u5000:
  5152                           
  5153                           ;menu.c: 144: printErrorLCD(errMsgs.tooManyFasteners);
  5154  000560  0EF6               	movlw	low (_errMsgs+32)
  5155  000562  0100               	movlb	0	; () banked
  5156  000564  6F8A               	movwf	printErrorLCD@string& (0+255),b
  5157  000566  0EFC               	movlw	high (_errMsgs+32)
  5158  000568  6F8B               	movwf	(printErrorLCD@string+1)& (0+255),b
  5159  00056A  ECB1  F00F         	call	_printErrorLCD	;wreg free
  5160                           
  5161                           ;menu.c: 145: } else if (numPressed * sum <= 0) {
  5162  00056E  D093               	goto	l379
  5163  000570                     l368:
  5164  000570  C0E3  F027         	movff	inputEntry@numPressed,___wmul@multiplier
  5165  000574  C0E4  F028         	movff	inputEntry@numPressed+1,___wmul@multiplier+1
  5166  000578  C0D7  F029         	movff	inputEntry@sum,___wmul@multiplicand
  5167  00057C  C0D8  F02A         	movff	inputEntry@sum+1,___wmul@multiplicand+1
  5168  000580  ECC4  F00F         	call	___wmul	;wreg free
  5169  000584  BE28               	btfsc	?___wmul+1,7,c
  5170  000586  D005               	goto	u5010
  5171  000588  5028               	movf	?___wmul+1,w,c
  5172  00058A  E10B               	bnz	l4208
  5173  00058C  0427               	decf	?___wmul,w,c
  5174  00058E  B0D8               	btfsc	status,0,c
  5175  000590  D008               	goto	l370
  5176  000592                     u5010:
  5177                           
  5178                           ;menu.c: 146: printErrorLCD(errMsgs.noFasteners);
  5179  000592  0E96               	movlw	low (_errMsgs+192)
  5180  000594  0100               	movlb	0	; () banked
  5181  000596  6F8A               	movwf	printErrorLCD@string& (0+255),b
  5182  000598  0EFD               	movlw	high (_errMsgs+192)
  5183  00059A  6F8B               	movwf	(printErrorLCD@string+1)& (0+255),b
  5184  00059C  ECB1  F00F         	call	_printErrorLCD	;wreg free
  5185                           
  5186                           ;menu.c: 150: } else if (numB * numPressed > 2) {
  5187  0005A0  D07A               	goto	l379
  5188  0005A2                     l370:
  5189  0005A2                     l4208:
  5190  0005A2  C0D9  F027         	movff	inputEntry@numB,___wmul@multiplier
  5191  0005A6  C0DA  F028         	movff	inputEntry@numB+1,___wmul@multiplier+1
  5192  0005AA  C0E3  F029         	movff	inputEntry@numPressed,___wmul@multiplicand
  5193  0005AE  C0E4  F02A         	movff	inputEntry@numPressed+1,___wmul@multiplicand+1
  5194  0005B2  ECC4  F00F         	call	___wmul	;wreg free
  5195  0005B6  BE28               	btfsc	?___wmul+1,7,c
  5196  0005B8  D00E               	goto	l372
  5197  0005BA  5028               	movf	?___wmul+1,w,c
  5198  0005BC  E104               	bnz	u5020
  5199  0005BE  0E03               	movlw	3
  5200  0005C0  5C27               	subwf	?___wmul,w,c
  5201  0005C2  A0D8               	btfss	status,0,c
  5202  0005C4  D008               	goto	l372
  5203  0005C6                     u5020:
  5204                           
  5205                           ;menu.c: 151: printErrorLCD(errMsgs.tooManyBolts);
  5206  0005C6  0E16               	movlw	low (_errMsgs+64)
  5207  0005C8  0100               	movlb	0	; () banked
  5208  0005CA  6F8A               	movwf	printErrorLCD@string& (0+255),b
  5209  0005CC  0EFD               	movlw	high (_errMsgs+64)
  5210  0005CE  6F8B               	movwf	(printErrorLCD@string+1)& (0+255),b
  5211  0005D0  ECB1  F00F         	call	_printErrorLCD	;wreg free
  5212                           
  5213                           ;menu.c: 152: } else if (numN * numPressed > 3) {
  5214  0005D4  D060               	goto	l379
  5215  0005D6                     l372:
  5216  0005D6  C0DB  F027         	movff	inputEntry@numN,___wmul@multiplier
  5217  0005DA  C0DC  F028         	movff	inputEntry@numN+1,___wmul@multiplier+1
  5218  0005DE  C0E3  F029         	movff	inputEntry@numPressed,___wmul@multiplicand
  5219  0005E2  C0E4  F02A         	movff	inputEntry@numPressed+1,___wmul@multiplicand+1
  5220  0005E6  ECC4  F00F         	call	___wmul	;wreg free
  5221  0005EA  BE28               	btfsc	?___wmul+1,7,c
  5222  0005EC  D00E               	goto	l374
  5223  0005EE  5028               	movf	?___wmul+1,w,c
  5224  0005F0  E104               	bnz	u5030
  5225  0005F2  0E04               	movlw	4
  5226  0005F4  5C27               	subwf	?___wmul,w,c
  5227  0005F6  A0D8               	btfss	status,0,c
  5228  0005F8  D008               	goto	l374
  5229  0005FA                     u5030:
  5230                           
  5231                           ;menu.c: 153: printErrorLCD(errMsgs.tooManyNuts);
  5232  0005FA  0E36               	movlw	low (_errMsgs+96)
  5233  0005FC  0100               	movlb	0	; () banked
  5234  0005FE  6F8A               	movwf	printErrorLCD@string& (0+255),b
  5235  000600  0EFD               	movlw	high (_errMsgs+96)
  5236  000602  6F8B               	movwf	(printErrorLCD@string+1)& (0+255),b
  5237  000604  ECB1  F00F         	call	_printErrorLCD	;wreg free
  5238                           
  5239                           ;menu.c: 154: } else if (numS * numPressed > 2) {
  5240  000608  D046               	goto	l379
  5241  00060A                     l374:
  5242  00060A  C0DD  F027         	movff	inputEntry@numS,___wmul@multiplier
  5243  00060E  C0DE  F028         	movff	inputEntry@numS+1,___wmul@multiplier+1
  5244  000612  C0E3  F029         	movff	inputEntry@numPressed,___wmul@multiplicand
  5245  000616  C0E4  F02A         	movff	inputEntry@numPressed+1,___wmul@multiplicand+1
  5246  00061A  ECC4  F00F         	call	___wmul	;wreg free
  5247  00061E  BE28               	btfsc	?___wmul+1,7,c
  5248  000620  D00E               	goto	l376
  5249  000622  5028               	movf	?___wmul+1,w,c
  5250  000624  E104               	bnz	u5040
  5251  000626  0E03               	movlw	3
  5252  000628  5C27               	subwf	?___wmul,w,c
  5253  00062A  A0D8               	btfss	status,0,c
  5254  00062C  D008               	goto	l376
  5255  00062E                     u5040:
  5256                           
  5257                           ;menu.c: 155: printErrorLCD(errMsgs.tooManySpacers);
  5258  00062E  0E76               	movlw	low (_errMsgs+160)
  5259  000630  0100               	movlb	0	; () banked
  5260  000632  6F8A               	movwf	printErrorLCD@string& (0+255),b
  5261  000634  0EFD               	movlw	high (_errMsgs+160)
  5262  000636  6F8B               	movwf	(printErrorLCD@string+1)& (0+255),b
  5263  000638  ECB1  F00F         	call	_printErrorLCD	;wreg free
  5264                           
  5265                           ;menu.c: 156: } else if (numW * numPressed > 4) {
  5266  00063C  D02C               	goto	l379
  5267  00063E                     l376:
  5268  00063E  C0DF  F027         	movff	inputEntry@numW,___wmul@multiplier
  5269  000642  C0E0  F028         	movff	inputEntry@numW+1,___wmul@multiplier+1
  5270  000646  C0E3  F029         	movff	inputEntry@numPressed,___wmul@multiplicand
  5271  00064A  C0E4  F02A         	movff	inputEntry@numPressed+1,___wmul@multiplicand+1
  5272  00064E  ECC4  F00F         	call	___wmul	;wreg free
  5273  000652  BE28               	btfsc	?___wmul+1,7,c
  5274  000654  D00E               	goto	l378
  5275  000656  5028               	movf	?___wmul+1,w,c
  5276  000658  E104               	bnz	u5050
  5277  00065A  0E05               	movlw	5
  5278  00065C  5C27               	subwf	?___wmul,w,c
  5279  00065E  A0D8               	btfss	status,0,c
  5280  000660  D008               	goto	l378
  5281  000662                     u5050:
  5282                           
  5283                           ;menu.c: 157: printErrorLCD(errMsgs.tooManyWashers);
  5284  000662  0E56               	movlw	low (_errMsgs+128)
  5285  000664  0100               	movlb	0	; () banked
  5286  000666  6F8A               	movwf	printErrorLCD@string& (0+255),b
  5287  000668  0EFD               	movlw	high (_errMsgs+128)
  5288  00066A  6F8B               	movwf	(printErrorLCD@string+1)& (0+255),b
  5289  00066C  ECB1  F00F         	call	_printErrorLCD	;wreg free
  5290                           
  5291                           ;menu.c: 158: } else {
  5292  000670  D012               	goto	l379
  5293  000672                     l378:
  5294                           
  5295                           ;menu.c: 159: params.setMultiple[compartmentNum] = numPressed;
  5296  000672  90D8               	bcf	status,0,c
  5297  000674  0100               	movlb	0	; () banked
  5298  000676  35E5               	rlcf	inputEntry@compartmentNum& (0+255),w,b
  5299  000678  6ED9               	movwf	fsr2l,c
  5300  00067A  35E6               	rlcf	(inputEntry@compartmentNum+1)& (0+255),w,b
  5301  00067C  6EDA               	movwf	fsr2h,c
  5302  00067E  0E3D               	movlw	low (_params+10)
  5303  000680  26D9               	addwf	fsr2l,f,c
  5304  000682  0E00               	movlw	high (_params+10)
  5305  000684  22DA               	addwfc	fsr2h,f,c
  5306  000686  C0E3  FFDE         	movff	inputEntry@numPressed,postinc2
  5307  00068A  C0E4  FFDD         	movff	inputEntry@numPressed+1,postdec2
  5308                           
  5309                           ; BSR set to: 0
  5310                           ;menu.c: 160: doneMultiples = 1;
  5311  00068E  0E00               	movlw	0
  5312  000690  6FD4               	movwf	(inputEntry@doneMultiples+1)& (0+255),b
  5313  000692  0E01               	movlw	1
  5314  000694                     L6:
  5315  000694  6FD3               	movwf	inputEntry@doneMultiples& (0+255),b
  5316  000696                     l379:
  5317                           
  5318                           ; BSR set to: 0
  5319                           
  5320                           ; BSR set to: 0
  5321                           
  5322                           ; BSR set to: 0
  5323                           
  5324                           ; BSR set to: 0
  5325                           
  5326                           ; BSR set to: 0
  5327                           
  5328                           ; BSR set to: 0
  5329                           
  5330                           ; BSR set to: 0
  5331  000696  0100               	movlb	0	; () banked
  5332  000698  51D3               	movf	inputEntry@doneMultiples& (0+255),w,b
  5333  00069A  11D4               	iorwf	(inputEntry@doneMultiples+1)& (0+255),w,b
  5334  00069C  A4D8               	btfss	status,2,c
  5335  00069E  D016               	goto	l381
  5336  0006A0  D6F0               	goto	l364
  5337  0006A2                     l331:
  5338                           
  5339                           ; BSR set to: 0
  5340                           ;menu.c: 164: params.toFill[compartmentNum] = NONE;
  5341                           
  5342                           ; BSR set to: 0
  5343  0006A2  0E35               	movlw	low (_params+2)
  5344  0006A4  25E5               	addwf	inputEntry@compartmentNum& (0+255),w,b
  5345  0006A6  6ED9               	movwf	fsr2l,c
  5346  0006A8  0E00               	movlw	high (_params+2)
  5347  0006AA  21E6               	addwfc	(inputEntry@compartmentNum+1)& (0+255),w,b
  5348  0006AC  6EDA               	movwf	fsr2h,c
  5349  0006AE  0E00               	movlw	0
  5350  0006B0  6EDF               	movwf	indf2,c
  5351                           
  5352                           ;menu.c: 165: params.setMultiple[compartmentNum] = 0;
  5353  0006B2  90D8               	bcf	status,0,c
  5354  0006B4  35E5               	rlcf	inputEntry@compartmentNum& (0+255),w,b
  5355  0006B6  6ED9               	movwf	fsr2l,c
  5356  0006B8  35E6               	rlcf	(inputEntry@compartmentNum+1)& (0+255),w,b
  5357  0006BA  6EDA               	movwf	fsr2h,c
  5358  0006BC  0E3D               	movlw	low (_params+10)
  5359  0006BE  26D9               	addwf	fsr2l,f,c
  5360  0006C0  0E00               	movlw	high (_params+10)
  5361  0006C2  22DA               	addwfc	fsr2h,f,c
  5362  0006C4  0E00               	movlw	0
  5363  0006C6  6EDE               	movwf	postinc2,c
  5364  0006C8  0E00               	movlw	0
  5365  0006CA  6EDD               	movwf	postdec2,c
  5366  0006CC                     l381:
  5367                           
  5368                           ; BSR set to: 0
  5369                           
  5370                           ; BSR set to: 0
  5371  0006CC  4BE5               	infsnz	inputEntry@compartmentNum& (0+255),f,b
  5372  0006CE  2BE6               	incf	(inputEntry@compartmentNum+1)& (0+255),f,b
  5373                           
  5374                           ; BSR set to: 0
  5375  0006D0  BFE6               	btfsc	(inputEntry@compartmentNum+1)& (0+255),7,b
  5376  0006D2  D550               	goto	l328
  5377  0006D4  51E6               	movf	(inputEntry@compartmentNum+1)& (0+255),w,b
  5378  0006D6  E104               	bnz	l4236
  5379  0006D8  0E08               	movlw	8
  5380  0006DA  5DE5               	subwf	inputEntry@compartmentNum& (0+255),w,b
  5381  0006DC  A0D8               	btfss	status,0,c
  5382  0006DE  D54A               	goto	l328
  5383  0006E0                     u5070:
  5384  0006E0                     l4236:
  5385                           
  5386                           ; BSR set to: 0
  5387                           ;menu.c: 166: }
  5388                           ;menu.c: 167: }
  5389                           ;menu.c: 168: done = 1;
  5390  0006E0  0E00               	movlw	0
  5391  0006E2  6FCE               	movwf	(inputEntry@done+1)& (0+255),b
  5392  0006E4  0E01               	movlw	1
  5393  0006E6  6FCD               	movwf	inputEntry@done& (0+255),b
  5394                           
  5395                           ; BSR set to: 0
  5396                           ;menu.c: 169: I2C_Send(nanoAddr, "\1Done inputs\0");
  5397  0006E8  0EA3               	movlw	low STR_15
  5398  0006EA  6E2A               	movwf	I2C_Send@data,c
  5399  0006EC  0EFF               	movlw	high STR_15
  5400  0006EE  6E2B               	movwf	I2C_Send@data+1,c
  5401  0006F0  0ECF               	movlw	low _nanoAddr
  5402  0006F2  6EF6               	movwf	tblptrl,c
  5403  0006F4                     	if	1	;There is more than 1 active tblptr byte
  5404  0006F4  0EFC               	movlw	high _nanoAddr
  5405  0006F6  6EF7               	movwf	tblptrh,c
  5406  0006F8                     	endif
  5407  0006F8                     	if	1	;There are 3 active tblptr bytes
  5408  0006F8  0E00               	movlw	low (_nanoAddr shr (0+16))
  5409  0006FA  6EF8               	movwf	tblptru,c
  5410  0006FC                     	endif
  5411  0006FC  0008               	tblrd		*
  5412  0006FE  50F5               	movf	tablat,w,c
  5413  000700  ECA8  F00C         	call	_I2C_Send
  5414  000704                     l327:
  5415  000704  0100               	movlb	0	; () banked
  5416  000706  51CD               	movf	inputEntry@done& (0+255),w,b
  5417  000708  11CE               	iorwf	(inputEntry@done+1)& (0+255),w,b
  5418  00070A  A4D8               	btfss	status,2,c
  5419  00070C  0012               	return	
  5420  00070E  D4B8               	goto	l322
  5421  000710                     __end_of_inputEntry:
  5422                           	opt stack 0
  5423                           tosu	equ	0xFFF
  5424                           tosh	equ	0xFFE
  5425                           tosl	equ	0xFFD
  5426                           pclath	equ	0xFFA
  5427                           tblptru	equ	0xFF8
  5428                           tblptrh	equ	0xFF7
  5429                           tblptrl	equ	0xFF6
  5430                           tablat	equ	0xFF5
  5431                           prodh	equ	0xFF4
  5432                           prodl	equ	0xFF3
  5433                           indf0	equ	0xFEF
  5434                           postinc0	equ	0xFEE
  5435                           fsr0h	equ	0xFEA
  5436                           fsr0l	equ	0xFE9
  5437                           wreg	equ	0xFE8
  5438                           postdec1	equ	0xFE5
  5439                           plusw1	equ	0xFE3
  5440                           fsr1l	equ	0xFE1
  5441                           indf2	equ	0xFDF
  5442                           postinc2	equ	0xFDE
  5443                           postdec2	equ	0xFDD
  5444                           plusw2	equ	0xFDB
  5445                           fsr2h	equ	0xFDA
  5446                           fsr2l	equ	0xFD9
  5447                           status	equ	0xFD8
  5448                           
  5449 ;; *************** function _strcpy *****************
  5450 ;; Defined at:
  5451 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
  5452 ;; Parameters:    Size  Location     Type
  5453 ;;  to              2   44[COMRAM] PTR unsigned char 
  5454 ;;		 -> inputEntry@fastenerString(32), 
  5455 ;;  from            2   46[COMRAM] PTR const unsigned char 
  5456 ;;		 -> inputEntryQuestions(132), 
  5457 ;; Auto vars:     Size  Location     Type
  5458 ;;  cp              2   48[COMRAM] PTR unsigned char 
  5459 ;;		 -> inputEntry@fastenerString(32), 
  5460 ;; Return value:  Size  Location     Type
  5461 ;;                  2   44[COMRAM] PTR unsigned char 
  5462 ;; Registers used:
  5463 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5464 ;; Tracked objects:
  5465 ;;		On entry : 0/0
  5466 ;;		On exit  : 0/0
  5467 ;;		Unchanged: 0/0
  5468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5469 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5470 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5472 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5473 ;;Total ram usage:        6 bytes
  5474 ;; Hardware stack levels used:    1
  5475 ;; Hardware stack levels required when called:    4
  5476 ;; This function calls:
  5477 ;;		Nothing
  5478 ;; This function is called by:
  5479 ;;		_inputEntry
  5480 ;; This function uses a non-reentrant model
  5481 ;;
  5482                           
  5483                           	psect	text9
  5484  001EAA                     __ptext9:
  5485                           	opt stack 0
  5486  001EAA                     _strcpy:
  5487                           	opt stack 24
  5488                           
  5489                           ; BSR set to: 0
  5490                           ;incstack = 0
  5491  001EAA  C02D  F031         	movff	strcpy@to,strcpy@cp
  5492  001EAE  C02E  F032         	movff	strcpy@to+1,strcpy@cp+1
  5493  001EB2  D004               	goto	l1156
  5494  001EB4  4A31               	infsnz	strcpy@cp,f,c
  5495  001EB6  2A32               	incf	strcpy@cp+1,f,c
  5496  001EB8  4A2F               	infsnz	strcpy@from,f,c
  5497  001EBA  2A30               	incf	strcpy@from+1,f,c
  5498  001EBC                     l1156:
  5499  001EBC  C02F  FFF6         	movff	strcpy@from,tblptrl
  5500  001EC0  C030  FFF7         	movff	strcpy@from+1,tblptrh
  5501  001EC4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5502  001EC4  6AF8               	clrf	tblptru,c
  5503  001EC6                     	endif
  5504  001EC6                     	if	0	;tblptru may be non-zero
  5505  001EC6                     	endif
  5506  001EC6  C031  FFD9         	movff	strcpy@cp,fsr2l
  5507  001ECA  C032  FFDA         	movff	strcpy@cp+1,fsr2h
  5508  001ECE  0008               	tblrd		*
  5509  001ED0  CFF5 FFDF          	movff	tablat,indf2
  5510  001ED4  50DF               	movf	indf2,w,c
  5511  001ED6  B4D8               	btfsc	status,2,c
  5512  001ED8  0012               	return	
  5513  001EDA  D7EC               	goto	l1157
  5514  001EDC                     __end_of_strcpy:
  5515                           	opt stack 0
  5516                           tosu	equ	0xFFF
  5517                           tosh	equ	0xFFE
  5518                           tosl	equ	0xFFD
  5519                           pclath	equ	0xFFA
  5520                           tblptru	equ	0xFF8
  5521                           tblptrh	equ	0xFF7
  5522                           tblptrl	equ	0xFF6
  5523                           tablat	equ	0xFF5
  5524                           prodh	equ	0xFF4
  5525                           prodl	equ	0xFF3
  5526                           indf0	equ	0xFEF
  5527                           postinc0	equ	0xFEE
  5528                           fsr0h	equ	0xFEA
  5529                           fsr0l	equ	0xFE9
  5530                           wreg	equ	0xFE8
  5531                           postdec1	equ	0xFE5
  5532                           plusw1	equ	0xFE3
  5533                           fsr1l	equ	0xFE1
  5534                           indf2	equ	0xFDF
  5535                           postinc2	equ	0xFDE
  5536                           postdec2	equ	0xFDD
  5537                           plusw2	equ	0xFDB
  5538                           fsr2h	equ	0xFDA
  5539                           fsr2l	equ	0xFD9
  5540                           status	equ	0xFD8
  5541                           
  5542 ;; *************** function _printErrorLCD *****************
  5543 ;; Defined at:
  5544 ;;		line 62 in file "helpers.c"
  5545 ;; Parameters:    Size  Location     Type
  5546 ;;  string          2   10[BANK0 ] PTR unsigned char 
  5547 ;;		 -> errMsgs.noFasteners(32), errMsgs.tooManySpacers(32), errMsgs.tooManyWashers(32), errMsgs.tooManyNuts(32), 
  5548 ;;		 -> errMsgs.tooManyBolts(32), errMsgs.tooManyFasteners(32), errMsgs.badEntry(32), errMsgs(224), 
  5549 ;; Auto vars:     Size  Location     Type
  5550 ;;		None
  5551 ;; Return value:  Size  Location     Type
  5552 ;;                  1    wreg      void 
  5553 ;; Registers used:
  5554 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5555 ;; Tracked objects:
  5556 ;;		On entry : 0/0
  5557 ;;		On exit  : 0/0
  5558 ;;		Unchanged: 0/0
  5559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5560 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5562 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5563 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5564 ;;Total ram usage:        4 bytes
  5565 ;; Hardware stack levels used:    1
  5566 ;; Hardware stack levels required when called:    7
  5567 ;; This function calls:
  5568 ;;		_printStringLCD
  5569 ;; This function is called by:
  5570 ;;		_inputEntry
  5571 ;; This function uses a non-reentrant model
  5572 ;;
  5573                           
  5574                           	psect	text10
  5575  001F62                     __ptext10:
  5576                           	opt stack 0
  5577  001F62                     _printErrorLCD:
  5578                           	opt stack 21
  5579                           
  5580                           ;helpers.c: 63: printStringLCD(string);
  5581                           
  5582                           ;incstack = 0
  5583  001F62  C08A  F02D         	movff	printErrorLCD@string,printStringLCD@string
  5584  001F66  C08B  F02E         	movff	printErrorLCD@string+1,printStringLCD@string+1
  5585  001F6A  EC67  F007         	call	_printStringLCD	;wreg free
  5586                           
  5587                           ;helpers.c: 64: _delay((unsigned long)((2000)*(40000000/4000.0)));
  5588  001F6E  0E66               	movlw	102
  5589  001F70  0100               	movlb	0	; () banked
  5590  001F72  6F8D               	movwf	(??_printErrorLCD+1)& (0+255),b
  5591  001F74  0E76               	movlw	118
  5592  001F76  6F8C               	movwf	??_printErrorLCD& (0+255),b
  5593  001F78  0EC1               	movlw	193
  5594  001F7A                     u5497:
  5595  001F7A  2EE8               	decfsz	wreg,f,c
  5596  001F7C  D7FE               	bra	u5497
  5597  001F7E  2F8C               	decfsz	??_printErrorLCD& (0+255),f,b
  5598  001F80  D7FC               	bra	u5497
  5599  001F82  2F8D               	decfsz	(??_printErrorLCD+1)& (0+255),f,b
  5600  001F84  D7FA               	bra	u5497
  5601  001F86  0012               	return		;funcret
  5602  001F88                     __end_of_printErrorLCD:
  5603                           	opt stack 0
  5604                           tosu	equ	0xFFF
  5605                           tosh	equ	0xFFE
  5606                           tosl	equ	0xFFD
  5607                           pclath	equ	0xFFA
  5608                           tblptru	equ	0xFF8
  5609                           tblptrh	equ	0xFF7
  5610                           tblptrl	equ	0xFF6
  5611                           tablat	equ	0xFF5
  5612                           prodh	equ	0xFF4
  5613                           prodl	equ	0xFF3
  5614                           indf0	equ	0xFEF
  5615                           postinc0	equ	0xFEE
  5616                           fsr0h	equ	0xFEA
  5617                           fsr0l	equ	0xFE9
  5618                           wreg	equ	0xFE8
  5619                           postdec1	equ	0xFE5
  5620                           plusw1	equ	0xFE3
  5621                           fsr1l	equ	0xFE1
  5622                           indf2	equ	0xFDF
  5623                           postinc2	equ	0xFDE
  5624                           postdec2	equ	0xFDD
  5625                           plusw2	equ	0xFDB
  5626                           fsr2h	equ	0xFDA
  5627                           fsr2l	equ	0xFD9
  5628                           status	equ	0xFD8
  5629                           
  5630 ;; *************** function _lcd_set_cursor *****************
  5631 ;; Defined at:
  5632 ;;		line 81 in file "lcd.c"
  5633 ;; Parameters:    Size  Location     Type
  5634 ;;  x               1    wreg     unsigned char 
  5635 ;;  y               1   44[COMRAM] unsigned char 
  5636 ;; Auto vars:     Size  Location     Type
  5637 ;;  x               1   47[COMRAM] unsigned char 
  5638 ;;  i               1   46[COMRAM] unsigned char 
  5639 ;; Return value:  Size  Location     Type
  5640 ;;                  1    wreg      void 
  5641 ;; Registers used:
  5642 ;;		wreg, status,2, status,0, cstack
  5643 ;; Tracked objects:
  5644 ;;		On entry : 0/0
  5645 ;;		On exit  : 0/0
  5646 ;;		Unchanged: 0/0
  5647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5648 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5649 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5650 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5651 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5652 ;;Total ram usage:        4 bytes
  5653 ;; Hardware stack levels used:    1
  5654 ;; Hardware stack levels required when called:    7
  5655 ;; This function calls:
  5656 ;;		_lcdInst
  5657 ;;		_lcd_shift_cursor
  5658 ;; This function is called by:
  5659 ;;		_inputEntry
  5660 ;; This function uses a non-reentrant model
  5661 ;;
  5662                           
  5663                           	psect	text11
  5664  001DF6                     __ptext11:
  5665                           	opt stack 0
  5666  001DF6                     _lcd_set_cursor:
  5667                           	opt stack 21
  5668                           
  5669                           ;incstack = 0
  5670                           ;lcd_set_cursor@x stored from wreg
  5671  001DF6  6E30               	movwf	lcd_set_cursor@x,c
  5672                           
  5673                           ;lcd.c: 91: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  5674  001DF8  0E80               	movlw	128
  5675  001DFA  EC01  F010         	call	_lcdInst
  5676  001DFE  0E41               	movlw	65
  5677  001E00  6E2E               	movwf	??_lcd_set_cursor& (0+255),c
  5678  001E02  0EEE               	movlw	238
  5679  001E04                     u5507:
  5680  001E04  2EE8               	decfsz	wreg,f,c
  5681  001E06  D7FE               	bra	u5507
  5682  001E08  2E2E               	decfsz	??_lcd_set_cursor& (0+255),f,c
  5683  001E0A  D7FC               	bra	u5507
  5684  001E0C  D000               	nop2	
  5685                           
  5686                           ;lcd.c: 92: for(unsigned char i = 0; i < y; i++){lcdInst(0xC0);;}
  5687  001E0E  0E00               	movlw	0
  5688  001E10  6E2F               	movwf	lcd_set_cursor@i,c
  5689  001E12  D004               	goto	l228
  5690  001E14  0EC0               	movlw	192
  5691  001E16  EC01  F010         	call	_lcdInst
  5692  001E1A  2A2F               	incf	lcd_set_cursor@i,f,c
  5693  001E1C                     l228:
  5694  001E1C  502D               	movf	lcd_set_cursor@y,w,c
  5695  001E1E  5C2F               	subwf	lcd_set_cursor@i,w,c
  5696  001E20  A0D8               	btfss	status,0,c
  5697  001E22  D7F8               	goto	l229
  5698                           
  5699                           ;lcd.c: 93: if(x > 0){
  5700  001E24  5030               	movf	lcd_set_cursor@x,w,c
  5701  001E26  B4D8               	btfsc	status,2,c
  5702  001E28  0012               	return	
  5703                           
  5704                           ;lcd.c: 94: lcd_shift_cursor(x, 1);
  5705  001E2A  0E01               	movlw	1
  5706  001E2C  6E2A               	movwf	lcd_shift_cursor@direction,c
  5707  001E2E  5030               	movf	lcd_set_cursor@x,w,c
  5708  001E30  ECE9  F00F         	call	_lcd_shift_cursor
  5709  001E34  0012               	return	
  5710  001E36                     __end_of_lcd_set_cursor:
  5711                           	opt stack 0
  5712                           tosu	equ	0xFFF
  5713                           tosh	equ	0xFFE
  5714                           tosl	equ	0xFFD
  5715                           pclath	equ	0xFFA
  5716                           tblptru	equ	0xFF8
  5717                           tblptrh	equ	0xFF7
  5718                           tblptrl	equ	0xFF6
  5719                           tablat	equ	0xFF5
  5720                           prodh	equ	0xFF4
  5721                           prodl	equ	0xFF3
  5722                           indf0	equ	0xFEF
  5723                           postinc0	equ	0xFEE
  5724                           fsr0h	equ	0xFEA
  5725                           fsr0l	equ	0xFE9
  5726                           wreg	equ	0xFE8
  5727                           postdec1	equ	0xFE5
  5728                           plusw1	equ	0xFE3
  5729                           fsr1l	equ	0xFE1
  5730                           indf2	equ	0xFDF
  5731                           postinc2	equ	0xFDE
  5732                           postdec2	equ	0xFDD
  5733                           plusw2	equ	0xFDB
  5734                           fsr2h	equ	0xFDA
  5735                           fsr2l	equ	0xFD9
  5736                           status	equ	0xFD8
  5737                           
  5738 ;; *************** function _lcd_shift_cursor *****************
  5739 ;; Defined at:
  5740 ;;		line 98 in file "lcd.c"
  5741 ;; Parameters:    Size  Location     Type
  5742 ;;  numChars        1    wreg     unsigned char 
  5743 ;;  direction       1   41[COMRAM] unsigned char 
  5744 ;; Auto vars:     Size  Location     Type
  5745 ;;  numChars        1   42[COMRAM] unsigned char 
  5746 ;;  n               1   43[COMRAM] unsigned char 
  5747 ;; Return value:  Size  Location     Type
  5748 ;;                  1    wreg      void 
  5749 ;; Registers used:
  5750 ;;		wreg, status,2, status,0, cstack
  5751 ;; Tracked objects:
  5752 ;;		On entry : 0/0
  5753 ;;		On exit  : 0/0
  5754 ;;		Unchanged: 0/0
  5755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5756 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5757 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5759 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5760 ;;Total ram usage:        3 bytes
  5761 ;; Hardware stack levels used:    1
  5762 ;; Hardware stack levels required when called:    6
  5763 ;; This function calls:
  5764 ;;		_lcdInst
  5765 ;; This function is called by:
  5766 ;;		_lcd_set_cursor
  5767 ;; This function uses a non-reentrant model
  5768 ;;
  5769                           
  5770                           	psect	text12
  5771  001FD2                     __ptext12:
  5772                           	opt stack 0
  5773  001FD2                     _lcd_shift_cursor:
  5774                           	opt stack 21
  5775                           
  5776                           ;incstack = 0
  5777                           ;lcd_shift_cursor@numChars stored from wreg
  5778  001FD2  6E2B               	movwf	lcd_shift_cursor@numChars,c
  5779                           
  5780                           ;lcd.c: 110: for(unsigned char n = numChars; n > 0; n--){
  5781  001FD4  C02B  F02C         	movff	lcd_shift_cursor@numChars,lcd_shift_cursor@n
  5782  001FD8                     l3618:
  5783  001FD8  502C               	movf	lcd_shift_cursor@n,w,c
  5784  001FDA  B4D8               	btfsc	status,2,c
  5785  001FDC  0012               	return	
  5786                           
  5787                           ;lcd.c: 111: lcdInst((unsigned char)(0x10 | (direction << 2)));
  5788  001FDE  442A               	rlncf	lcd_shift_cursor@direction,w,c
  5789  001FE0  46E8               	rlncf	wreg,f,c
  5790  001FE2  0BFC               	andlw	252
  5791  001FE4  0910               	iorlw	16
  5792  001FE6  EC01  F010         	call	_lcdInst
  5793  001FEA  062C               	decf	lcd_shift_cursor@n,f,c
  5794  001FEC  D7F5               	goto	l3618
  5795  001FEE                     __end_of_lcd_shift_cursor:
  5796                           	opt stack 0
  5797                           tosu	equ	0xFFF
  5798                           tosh	equ	0xFFE
  5799                           tosl	equ	0xFFD
  5800                           pclath	equ	0xFFA
  5801                           tblptru	equ	0xFF8
  5802                           tblptrh	equ	0xFF7
  5803                           tblptrl	equ	0xFF6
  5804                           tablat	equ	0xFF5
  5805                           prodh	equ	0xFF4
  5806                           prodl	equ	0xFF3
  5807                           indf0	equ	0xFEF
  5808                           postinc0	equ	0xFEE
  5809                           fsr0h	equ	0xFEA
  5810                           fsr0l	equ	0xFE9
  5811                           wreg	equ	0xFE8
  5812                           postdec1	equ	0xFE5
  5813                           plusw1	equ	0xFE3
  5814                           fsr1l	equ	0xFE1
  5815                           indf2	equ	0xFDF
  5816                           postinc2	equ	0xFDE
  5817                           postdec2	equ	0xFDD
  5818                           plusw2	equ	0xFDB
  5819                           fsr2h	equ	0xFDA
  5820                           fsr2l	equ	0xFD9
  5821                           status	equ	0xFD8
  5822                           
  5823 ;; *************** function _hibernate *****************
  5824 ;; Defined at:
  5825 ;;		line 11 in file "menu.c"
  5826 ;; Parameters:    Size  Location     Type
  5827 ;;		None
  5828 ;; Auto vars:     Size  Location     Type
  5829 ;;  pressed         2   14[BANK0 ] int 
  5830 ;; Return value:  Size  Location     Type
  5831 ;;                  1    wreg      void 
  5832 ;; Registers used:
  5833 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5834 ;; Tracked objects:
  5835 ;;		On entry : 0/0
  5836 ;;		On exit  : 0/0
  5837 ;;		Unchanged: 0/0
  5838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5840 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5841 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5842 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5843 ;;Total ram usage:        6 bytes
  5844 ;; Hardware stack levels used:    1
  5845 ;; Hardware stack levels required when called:    7
  5846 ;; This function calls:
  5847 ;;		_pollKeypad
  5848 ;;		_printStringLCD
  5849 ;; This function is called by:
  5850 ;;		_main
  5851 ;;		_mainMenu
  5852 ;; This function uses a non-reentrant model
  5853 ;;
  5854                           
  5855                           	psect	text13
  5856  001E36                     __ptext13:
  5857                           	opt stack 0
  5858  001E36                     _hibernate:
  5859                           	opt stack 22
  5860                           
  5861                           ;menu.c: 12: printStringLCD("Press 1 to begin");
  5862                           
  5863                           ;incstack = 0
  5864  001E36  0E51               	movlw	low STR_12
  5865  001E38  6E2D               	movwf	printStringLCD@string,c
  5866  001E3A  0EFF               	movlw	high STR_12
  5867  001E3C  6E2E               	movwf	printStringLCD@string+1,c
  5868  001E3E  EC67  F007         	call	_printStringLCD	;wreg free
  5869  001E42                     
  5870                           ;menu.c: 15: pressed = pollKeypad();
  5871  001E42  EC87  F00F         	call	_pollKeypad	;wreg free
  5872  001E46  0100               	movlb	0	; () banked
  5873  001E48  6F8A               	movwf	??_hibernate& (0+255),b
  5874  001E4A  518A               	movf	??_hibernate& (0+255),w,b
  5875  001E4C  6F8E               	movwf	hibernate@pressed& (0+255),b
  5876  001E4E  6B8F               	clrf	(hibernate@pressed+1)& (0+255),b
  5877                           
  5878                           ; BSR set to: 0
  5879                           ;menu.c: 16: if (pressed - 48 == 1) {
  5880  001E50  0ED0               	movlw	208
  5881  001E52  6F8A               	movwf	??_hibernate& (0+255),b
  5882  001E54  0EFF               	movlw	255
  5883  001E56  6F8B               	movwf	(??_hibernate+1)& (0+255),b
  5884  001E58  C08E  F08C         	movff	hibernate@pressed,??_hibernate+2
  5885  001E5C  C08F  F08D         	movff	hibernate@pressed+1,??_hibernate+3
  5886  001E60  518A               	movf	??_hibernate& (0+255),w,b
  5887  001E62  278C               	addwf	(??_hibernate+2)& (0+255),f,b
  5888  001E64  518B               	movf	(??_hibernate+1)& (0+255),w,b
  5889  001E66  238D               	addwfc	(??_hibernate+3)& (0+255),f,b
  5890  001E68  058C               	decf	(??_hibernate+2)& (0+255),w,b
  5891  001E6A  118D               	iorwf	(??_hibernate+3)& (0+255),w,b
  5892  001E6C  B4D8               	btfsc	status,2,c
  5893  001E6E  0012               	return	
  5894  001E70  D7E8               	goto	l305
  5895  001E72                     __end_of_hibernate:
  5896                           	opt stack 0
  5897                           tosu	equ	0xFFF
  5898                           tosh	equ	0xFFE
  5899                           tosl	equ	0xFFD
  5900                           pclath	equ	0xFFA
  5901                           tblptru	equ	0xFF8
  5902                           tblptrh	equ	0xFF7
  5903                           tblptrl	equ	0xFF6
  5904                           tablat	equ	0xFF5
  5905                           prodh	equ	0xFF4
  5906                           prodl	equ	0xFF3
  5907                           indf0	equ	0xFEF
  5908                           postinc0	equ	0xFEE
  5909                           fsr0h	equ	0xFEA
  5910                           fsr0l	equ	0xFE9
  5911                           wreg	equ	0xFE8
  5912                           postdec1	equ	0xFE5
  5913                           plusw1	equ	0xFE3
  5914                           fsr1l	equ	0xFE1
  5915                           indf2	equ	0xFDF
  5916                           postinc2	equ	0xFDE
  5917                           postdec2	equ	0xFDD
  5918                           plusw2	equ	0xFDB
  5919                           fsr2h	equ	0xFDA
  5920                           fsr2l	equ	0xFD9
  5921                           status	equ	0xFD8
  5922                           
  5923 ;; *************** function _printStringLCD *****************
  5924 ;; Defined at:
  5925 ;;		line 7 in file "helpers.c"
  5926 ;; Parameters:    Size  Location     Type
  5927 ;;  string          2   44[COMRAM] PTR unsigned char 
  5928 ;;		 -> STR_16(30), inputEntry@fastenerString(32), inputEntryQuestions(132), STR_13(26), 
  5929 ;;		 -> STR_12(17), errMsgs.noFasteners(32), errMsgs.tooManySpacers(32), errMsgs.tooManyWashers(32), 
  5930 ;;		 -> errMsgs.tooManyNuts(32), errMsgs.tooManyBolts(32), errMsgs.tooManyFasteners(32), errMsgs.badEntry(32), 
  5931 ;;		 -> errMsgs(224), 
  5932 ;; Auto vars:     Size  Location     Type
  5933 ;;  i               2    8[BANK0 ] int 
  5934 ;;  newlineCharI    2    6[BANK0 ] int 
  5935 ;;  newlineIndex    2    4[BANK0 ] int 
  5936 ;;  spaceIndex      2    2[BANK0 ] int 
  5937 ;;  j               2    0[BANK0 ] int 
  5938 ;; Return value:  Size  Location     Type
  5939 ;;                  1    wreg      void 
  5940 ;; Registers used:
  5941 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5942 ;; Tracked objects:
  5943 ;;		On entry : 0/0
  5944 ;;		On exit  : 0/0
  5945 ;;		Unchanged: 0/0
  5946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5947 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5948 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5949 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5950 ;;      Totals:         5      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5951 ;;Total ram usage:       15 bytes
  5952 ;; Hardware stack levels used:    1
  5953 ;; Hardware stack levels required when called:    6
  5954 ;; This function calls:
  5955 ;;		_lcdInst
  5956 ;;		_putch
  5957 ;; This function is called by:
  5958 ;;		_hibernate
  5959 ;;		_viewLogs
  5960 ;;		_inputEntry
  5961 ;;		_mainMenu
  5962 ;;		_printErrorLCD
  5963 ;; This function uses a non-reentrant model
  5964 ;;
  5965                           
  5966                           	psect	text14
  5967  000ECE                     __ptext14:
  5968                           	opt stack 0
  5969  000ECE                     _printStringLCD:
  5970                           	opt stack 22
  5971                           
  5972                           ;helpers.c: 12: int i;
  5973                           ;helpers.c: 13: int j = 1;
  5974                           
  5975                           ; BSR set to: 0
  5976                           ;incstack = 0
  5977  000ECE  0E00               	movlw	0
  5978  000ED0  0100               	movlb	0	; () banked
  5979  000ED2  6F81               	movwf	(printStringLCD@j+1)& (0+255),b
  5980  000ED4  0E01               	movlw	1
  5981  000ED6  6F80               	movwf	printStringLCD@j& (0+255),b
  5982                           
  5983                           ;helpers.c: 14: int newlineIndex = 16;
  5984  000ED8  0E00               	movlw	0
  5985  000EDA  6F85               	movwf	(printStringLCD@newlineIndex+1)& (0+255),b
  5986  000EDC  0E10               	movlw	16
  5987  000EDE  6F84               	movwf	printStringLCD@newlineIndex& (0+255),b
  5988                           
  5989                           ; BSR set to: 0
  5990                           ;helpers.c: 15: int newlineCharIndex = -1;
  5991  000EE0  6986               	setf	printStringLCD@newlineCharIndex& (0+255),b
  5992  000EE2  6987               	setf	(printStringLCD@newlineCharIndex+1)& (0+255),b
  5993                           
  5994                           ;helpers.c: 16: int spaceIndex = 0;
  5995  000EE4  0E00               	movlw	0
  5996  000EE6  6F83               	movwf	(printStringLCD@spaceIndex+1)& (0+255),b
  5997  000EE8  0E00               	movlw	0
  5998  000EEA  6F82               	movwf	printStringLCD@spaceIndex& (0+255),b
  5999                           
  6000                           ; BSR set to: 0
  6001                           ;helpers.c: 18: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  6002  000EEC  0E01               	movlw	1
  6003  000EEE  EC01  F010         	call	_lcdInst
  6004  000EF2  0EC3               	movlw	195
  6005  000EF4  6E2F               	movwf	??_printStringLCD& (0+255),c
  6006  000EF6  0ECD               	movlw	205
  6007  000EF8                     u5517:
  6008  000EF8  2EE8               	decfsz	wreg,f,c
  6009  000EFA  D7FE               	bra	u5517
  6010  000EFC  2E2F               	decfsz	??_printStringLCD& (0+255),f,c
  6011  000EFE  D7FC               	bra	u5517
  6012  000F00  F000               	nop	
  6013                           
  6014                           ;helpers.c: 19: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  6015  000F02  0E80               	movlw	128
  6016  000F04  EC01  F010         	call	_lcdInst
  6017  000F08  0E41               	movlw	65
  6018  000F0A  6E2F               	movwf	??_printStringLCD& (0+255),c
  6019  000F0C  0EEE               	movlw	238
  6020  000F0E                     u5527:
  6021  000F0E  2EE8               	decfsz	wreg,f,c
  6022  000F10  D7FE               	bra	u5527
  6023  000F12  2E2F               	decfsz	??_printStringLCD& (0+255),f,c
  6024  000F14  D7FC               	bra	u5527
  6025  000F16  D000               	nop2	
  6026                           
  6027                           ;helpers.c: 22: for (i = 0; i < 17; i++) {
  6028  000F18  0E00               	movlw	0
  6029  000F1A  0100               	movlb	0	; () banked
  6030  000F1C  6F89               	movwf	(printStringLCD@i+1)& (0+255),b
  6031  000F1E  0E00               	movlw	0
  6032  000F20  6F88               	movwf	printStringLCD@i& (0+255),b
  6033                           
  6034                           ; BSR set to: 0
  6035  000F22  BF89               	btfsc	(printStringLCD@i+1)& (0+255),7,b
  6036  000F24  D008               	goto	l437
  6037  000F26  5189               	movf	(printStringLCD@i+1)& (0+255),w,b
  6038  000F28  E105               	bnz	u3900
  6039  000F2A  0E11               	movlw	17
  6040  000F2C  5D88               	subwf	printStringLCD@i& (0+255),w,b
  6041  000F2E  B0D8               	btfsc	status,0,c
  6042  000F30  D08D               	goto	u4010
  6043  000F32  D001               	goto	l437
  6044  000F34                     u3900:
  6045                           
  6046                           ; BSR set to: 0
  6047  000F34  D08B               	goto	u4010
  6048  000F36                     l437:
  6049                           
  6050                           ; BSR set to: 0
  6051                           ;helpers.c: 23: if (string[i] == 0) break;
  6052                           
  6053                           ; BSR set to: 0
  6054  000F36  5188               	movf	printStringLCD@i& (0+255),w,b
  6055  000F38  242D               	addwf	printStringLCD@string,w,c
  6056  000F3A  6E2F               	movwf	??_printStringLCD& (0+255),c
  6057  000F3C  5189               	movf	(printStringLCD@i+1)& (0+255),w,b
  6058  000F3E  202E               	addwfc	printStringLCD@string+1,w,c
  6059  000F40  6E30               	movwf	(??_printStringLCD+1)& (0+255),c
  6060  000F42  C02F  FFF6         	movff	??_printStringLCD,tblptrl
  6061  000F46  C030  FFF7         	movff	??_printStringLCD+1,tblptrh
  6062  000F4A  0E00               	movlw	low (__mediumconst shr (0+16))
  6063  000F4C  6EF8               	movwf	tblptru,c
  6064  000F4E  0E0F               	movlw	(high __ramtop+-1)
  6065  000F50  64F7               	cpfsgt	tblptrh,c
  6066  000F52  D003               	bra	u3917
  6067  000F54  0008               	tblrd		*
  6068  000F56  50F5               	movf	tablat,w,c
  6069  000F58  D005               	bra	u3910
  6070  000F5A                     u3917:
  6071  000F5A  CFF6 FFE9          	movff	tblptrl,fsr0l
  6072  000F5E  CFF7 FFEA          	movff	tblptrh,fsr0h
  6073  000F62  50EF               	movf	indf0,w,c
  6074  000F64                     u3910:
  6075  000F64  0900               	iorlw	0
  6076  000F66  B4D8               	btfsc	status,2,c
  6077  000F68  D071               	goto	u4010
  6078                           
  6079                           ;helpers.c: 24: if (string[i] == 32) {
  6080  000F6A  0100               	movlb	0	; () banked
  6081  000F6C  5188               	movf	printStringLCD@i& (0+255),w,b
  6082  000F6E  242D               	addwf	printStringLCD@string,w,c
  6083  000F70  6E2F               	movwf	??_printStringLCD& (0+255),c
  6084  000F72  5189               	movf	(printStringLCD@i+1)& (0+255),w,b
  6085  000F74  202E               	addwfc	printStringLCD@string+1,w,c
  6086  000F76  6E30               	movwf	(??_printStringLCD+1)& (0+255),c
  6087  000F78  C02F  FFF6         	movff	??_printStringLCD,tblptrl
  6088  000F7C  C030  FFF7         	movff	??_printStringLCD+1,tblptrh
  6089  000F80  0E00               	movlw	low (__mediumconst shr (0+16))
  6090  000F82  6EF8               	movwf	tblptru,c
  6091  000F84  0E0F               	movlw	(high __ramtop+-1)
  6092  000F86  64F7               	cpfsgt	tblptrh,c
  6093  000F88  D003               	bra	u3937
  6094  000F8A  0008               	tblrd		*
  6095  000F8C  50F5               	movf	tablat,w,c
  6096  000F8E  D005               	bra	u3930
  6097  000F90                     u3937:
  6098  000F90  CFF6 FFE9          	movff	tblptrl,fsr0l
  6099  000F94  CFF7 FFEA          	movff	tblptrh,fsr0h
  6100  000F98  50EF               	movf	indf0,w,c
  6101  000F9A                     u3930:
  6102  000F9A  0A20               	xorlw	32
  6103  000F9C  A4D8               	btfss	status,2,c
  6104  000F9E  D004               	goto	l440
  6105                           
  6106                           ;helpers.c: 25: spaceIndex = i;
  6107  000FA0  C088  F082         	movff	printStringLCD@i,printStringLCD@spaceIndex
  6108  000FA4  C089  F083         	movff	printStringLCD@i+1,printStringLCD@spaceIndex+1
  6109  000FA8                     l440:
  6110                           
  6111                           ;helpers.c: 26: }
  6112                           ;helpers.c: 28: if (string[i] == 10) {
  6113  000FA8  0100               	movlb	0	; () banked
  6114  000FAA  5188               	movf	printStringLCD@i& (0+255),w,b
  6115  000FAC  242D               	addwf	printStringLCD@string,w,c
  6116  000FAE  6E2F               	movwf	??_printStringLCD& (0+255),c
  6117  000FB0  5189               	movf	(printStringLCD@i+1)& (0+255),w,b
  6118  000FB2  202E               	addwfc	printStringLCD@string+1,w,c
  6119  000FB4  6E30               	movwf	(??_printStringLCD+1)& (0+255),c
  6120  000FB6  C02F  FFF6         	movff	??_printStringLCD,tblptrl
  6121  000FBA  C030  FFF7         	movff	??_printStringLCD+1,tblptrh
  6122  000FBE  0E00               	movlw	low (__mediumconst shr (0+16))
  6123  000FC0  6EF8               	movwf	tblptru,c
  6124  000FC2  0E0F               	movlw	(high __ramtop+-1)
  6125  000FC4  64F7               	cpfsgt	tblptrh,c
  6126  000FC6  D003               	bra	u3957
  6127  000FC8  0008               	tblrd		*
  6128  000FCA  50F5               	movf	tablat,w,c
  6129  000FCC  D005               	bra	u3950
  6130  000FCE                     u3957:
  6131  000FCE  CFF6 FFE9          	movff	tblptrl,fsr0l
  6132  000FD2  CFF7 FFEA          	movff	tblptrh,fsr0h
  6133  000FD6  50EF               	movf	indf0,w,c
  6134  000FD8                     u3950:
  6135  000FD8  0A0A               	xorlw	10
  6136  000FDA  A4D8               	btfss	status,2,c
  6137  000FDC  D008               	goto	l441
  6138                           
  6139                           ;helpers.c: 29: newlineCharIndex = i;
  6140  000FDE  C088  F086         	movff	printStringLCD@i,printStringLCD@newlineCharIndex
  6141  000FE2  C089  F087         	movff	printStringLCD@i+1,printStringLCD@newlineCharIndex+1
  6142                           
  6143                           ;helpers.c: 30: newlineIndex = newlineCharIndex;
  6144  000FE6  C086  F084         	movff	printStringLCD@newlineCharIndex,printStringLCD@newlineIndex
  6145  000FEA  C087  F085         	movff	printStringLCD@newlineCharIndex+1,printStringLCD@newlineIndex+1
  6146  000FEE                     l441:
  6147                           
  6148                           ;helpers.c: 31: }
  6149                           ;helpers.c: 34: if (i == 16 && string[i] != 32 && newlineCharIndex < 0) {
  6150  000FEE  0E10               	movlw	16
  6151  000FF0  0100               	movlb	0	; () banked
  6152  000FF2  1988               	xorwf	printStringLCD@i& (0+255),w,b
  6153  000FF4  1189               	iorwf	(printStringLCD@i+1)& (0+255),w,b
  6154  000FF6  A4D8               	btfss	status,2,c
  6155  000FF8  D021               	goto	l442
  6156                           
  6157                           ; BSR set to: 0
  6158  000FFA  5188               	movf	printStringLCD@i& (0+255),w,b
  6159  000FFC  242D               	addwf	printStringLCD@string,w,c
  6160  000FFE  6E2F               	movwf	??_printStringLCD& (0+255),c
  6161  001000  5189               	movf	(printStringLCD@i+1)& (0+255),w,b
  6162  001002  202E               	addwfc	printStringLCD@string+1,w,c
  6163  001004  6E30               	movwf	(??_printStringLCD+1)& (0+255),c
  6164  001006  C02F  FFF6         	movff	??_printStringLCD,tblptrl
  6165  00100A  C030  FFF7         	movff	??_printStringLCD+1,tblptrh
  6166  00100E  0E00               	movlw	low (__mediumconst shr (0+16))
  6167  001010  6EF8               	movwf	tblptru,c
  6168  001012  0E0F               	movlw	(high __ramtop+-1)
  6169  001014  64F7               	cpfsgt	tblptrh,c
  6170  001016  D003               	bra	u3987
  6171  001018  0008               	tblrd		*
  6172  00101A  50F5               	movf	tablat,w,c
  6173  00101C  D005               	bra	u3980
  6174  00101E                     u3987:
  6175  00101E  CFF6 FFE9          	movff	tblptrl,fsr0l
  6176  001022  CFF7 FFEA          	movff	tblptrh,fsr0h
  6177  001026  50EF               	movf	indf0,w,c
  6178  001028                     u3980:
  6179  001028  0A20               	xorlw	32
  6180  00102A  B4D8               	btfsc	status,2,c
  6181  00102C  D007               	goto	l442
  6182  00102E  0100               	movlb	0	; () banked
  6183  001030  AF87               	btfss	(printStringLCD@newlineCharIndex+1)& (0+255),7,b
  6184  001032  D004               	goto	l442
  6185                           
  6186                           ; BSR set to: 0
  6187                           ;helpers.c: 35: newlineIndex = spaceIndex;
  6188  001034  C082  F084         	movff	printStringLCD@spaceIndex,printStringLCD@newlineIndex
  6189  001038  C083  F085         	movff	printStringLCD@spaceIndex+1,printStringLCD@newlineIndex+1
  6190  00103C                     l442:
  6191                           
  6192                           ; BSR set to: 0
  6193  00103C  0100               	movlb	0	; () banked
  6194  00103E  4B88               	infsnz	printStringLCD@i& (0+255),f,b
  6195  001040  2B89               	incf	(printStringLCD@i+1)& (0+255),f,b
  6196                           
  6197                           ; BSR set to: 0
  6198  001042  BF89               	btfsc	(printStringLCD@i+1)& (0+255),7,b
  6199  001044  D778               	goto	l437
  6200  001046  5189               	movf	(printStringLCD@i+1)& (0+255),w,b
  6201  001048  E101               	bnz	l3668
  6202  00104A  D76F               	goto	L7
  6203  00104C                     u4010:
  6204  00104C                     l3668:
  6205                           
  6206                           ;helpers.c: 36: }
  6207                           ;helpers.c: 37: }
  6208                           ;helpers.c: 40: for (i = 0; i < 32; i++) {
  6209  00104C  0E00               	movlw	0
  6210  00104E  0100               	movlb	0	; () banked
  6211  001050  6F89               	movwf	(printStringLCD@i+1)& (0+255),b
  6212  001052  0E00               	movlw	0
  6213  001054  6F88               	movwf	printStringLCD@i& (0+255),b
  6214                           
  6215                           ; BSR set to: 0
  6216  001056  BF89               	btfsc	(printStringLCD@i+1)& (0+255),7,b
  6217  001058  D008               	goto	l443
  6218  00105A  5189               	movf	(printStringLCD@i+1)& (0+255),w,b
  6219  00105C  E105               	bnz	u4020
  6220  00105E  0E20               	movlw	32
  6221  001060  5D88               	subwf	printStringLCD@i& (0+255),w,b
  6222  001062  B0D8               	btfsc	status,0,c
  6223  001064  0012               	return	
  6224  001066  D001               	goto	l443
  6225  001068                     u4020:
  6226                           
  6227                           ; BSR set to: 0
  6228  001068  0012               	return	
  6229  00106A                     l443:
  6230                           
  6231                           ; BSR set to: 0
  6232                           ;helpers.c: 41: if (string[i] == 0) break;
  6233                           
  6234                           ; BSR set to: 0
  6235  00106A  5188               	movf	printStringLCD@i& (0+255),w,b
  6236  00106C  242D               	addwf	printStringLCD@string,w,c
  6237  00106E  6E2F               	movwf	??_printStringLCD& (0+255),c
  6238  001070  5189               	movf	(printStringLCD@i+1)& (0+255),w,b
  6239  001072  202E               	addwfc	printStringLCD@string+1,w,c
  6240  001074  6E30               	movwf	(??_printStringLCD+1)& (0+255),c
  6241  001076  C02F  FFF6         	movff	??_printStringLCD,tblptrl
  6242  00107A  C030  FFF7         	movff	??_printStringLCD+1,tblptrh
  6243  00107E  0E00               	movlw	low (__mediumconst shr (0+16))
  6244  001080  6EF8               	movwf	tblptru,c
  6245  001082  0E0F               	movlw	(high __ramtop+-1)
  6246  001084  64F7               	cpfsgt	tblptrh,c
  6247  001086  D003               	bra	u4037
  6248  001088  0008               	tblrd		*
  6249  00108A  50F5               	movf	tablat,w,c
  6250  00108C  D005               	bra	u4030
  6251  00108E                     u4037:
  6252  00108E  CFF6 FFE9          	movff	tblptrl,fsr0l
  6253  001092  CFF7 FFEA          	movff	tblptrh,fsr0h
  6254  001096  50EF               	movf	indf0,w,c
  6255  001098                     u4030:
  6256  001098  0900               	iorlw	0
  6257  00109A  B4D8               	btfsc	status,2,c
  6258  00109C  0012               	return	
  6259                           
  6260                           ;helpers.c: 52: if (i == newlineIndex && j < LCD_SIZE_VERT) {
  6261  00109E  0100               	movlb	0	; () banked
  6262  0010A0  5184               	movf	printStringLCD@newlineIndex& (0+255),w,b
  6263  0010A2  1988               	xorwf	printStringLCD@i& (0+255),w,b
  6264  0010A4  E153               	bnz	l3690
  6265  0010A6  5185               	movf	(printStringLCD@newlineIndex+1)& (0+255),w,b
  6266  0010A8  1989               	xorwf	(printStringLCD@i+1)& (0+255),w,b
  6267  0010AA  A4D8               	btfss	status,2,c
  6268  0010AC  D04F               	goto	l447
  6269                           
  6270                           ; BSR set to: 0
  6271  0010AE  0ED2               	movlw	low _LCD_SIZE_VERT
  6272  0010B0  6EF6               	movwf	tblptrl,c
  6273  0010B2                     	if	1	;There is more than 1 active tblptr byte
  6274  0010B2  0EFC               	movlw	high _LCD_SIZE_VERT
  6275  0010B4  6EF7               	movwf	tblptrh,c
  6276  0010B6                     	endif
  6277  0010B6                     	if	1	;There are 3 active tblptr bytes
  6278  0010B6  0E00               	movlw	low (_LCD_SIZE_VERT shr (0+16))
  6279  0010B8  6EF8               	movwf	tblptru,c
  6280  0010BA                     	endif
  6281  0010BA  0008               	tblrd		*
  6282  0010BC  50F5               	movf	tablat,w,c
  6283  0010BE  6E2F               	movwf	??_printStringLCD& (0+255),c
  6284  0010C0  6A30               	clrf	(??_printStringLCD+1)& (0+255),c
  6285  0010C2  502F               	movf	??_printStringLCD,w,c
  6286  0010C4  5D80               	subwf	printStringLCD@j& (0+255),w,b
  6287  0010C6  5181               	movf	(printStringLCD@j+1)& (0+255),w,b
  6288  0010C8  0A80               	xorlw	128
  6289  0010CA  6E31               	movwf	(??_printStringLCD+2)& (0+255),c
  6290  0010CC  5030               	movf	??_printStringLCD+1,w,c
  6291  0010CE  0A80               	xorlw	128
  6292  0010D0  5831               	subwfb	(??_printStringLCD+2)& (0+255),w,c
  6293  0010D2  B0D8               	btfsc	status,0,c
  6294  0010D4  D03B               	goto	l447
  6295                           
  6296                           ; BSR set to: 0
  6297                           ;helpers.c: 53: j++;
  6298  0010D6  4B80               	infsnz	printStringLCD@j& (0+255),f,b
  6299  0010D8  2B81               	incf	(printStringLCD@j+1)& (0+255),f,b
  6300                           
  6301                           ; BSR set to: 0
  6302                           ;helpers.c: 54: lcdInst(0xC0);;
  6303  0010DA  0EC0               	movlw	192
  6304  0010DC  EC01  F010         	call	_lcdInst
  6305                           
  6306                           ;helpers.c: 55: if (string[i] == 32 || string[i] == 10) continue;
  6307  0010E0  0100               	movlb	0	; () banked
  6308  0010E2  5188               	movf	printStringLCD@i& (0+255),w,b
  6309  0010E4  242D               	addwf	printStringLCD@string,w,c
  6310  0010E6  6E2F               	movwf	??_printStringLCD& (0+255),c
  6311  0010E8  5189               	movf	(printStringLCD@i+1)& (0+255),w,b
  6312  0010EA  202E               	addwfc	printStringLCD@string+1,w,c
  6313  0010EC  6E30               	movwf	(??_printStringLCD+1)& (0+255),c
  6314  0010EE  C02F  FFF6         	movff	??_printStringLCD,tblptrl
  6315  0010F2  C030  FFF7         	movff	??_printStringLCD+1,tblptrh
  6316  0010F6  0E00               	movlw	low (__mediumconst shr (0+16))
  6317  0010F8  6EF8               	movwf	tblptru,c
  6318  0010FA  0E0F               	movlw	(high __ramtop+-1)
  6319  0010FC  64F7               	cpfsgt	tblptrh,c
  6320  0010FE  D003               	bra	u4077
  6321  001100  0008               	tblrd		*
  6322  001102  50F5               	movf	tablat,w,c
  6323  001104  D005               	bra	u4070
  6324  001106                     u4077:
  6325  001106  CFF6 FFE9          	movff	tblptrl,fsr0l
  6326  00110A  CFF7 FFEA          	movff	tblptrh,fsr0h
  6327  00110E  50EF               	movf	indf0,w,c
  6328  001110                     u4070:
  6329  001110  0A20               	xorlw	32
  6330  001112  B4D8               	btfsc	status,2,c
  6331  001114  D035               	goto	l450
  6332  001116  0100               	movlb	0	; () banked
  6333  001118  5188               	movf	printStringLCD@i& (0+255),w,b
  6334  00111A  242D               	addwf	printStringLCD@string,w,c
  6335  00111C  6E2F               	movwf	??_printStringLCD& (0+255),c
  6336  00111E  5189               	movf	(printStringLCD@i+1)& (0+255),w,b
  6337  001120  202E               	addwfc	printStringLCD@string+1,w,c
  6338  001122  6E30               	movwf	(??_printStringLCD+1)& (0+255),c
  6339  001124  C02F  FFF6         	movff	??_printStringLCD,tblptrl
  6340  001128  C030  FFF7         	movff	??_printStringLCD+1,tblptrh
  6341  00112C  0E00               	movlw	low (__mediumconst shr (0+16))
  6342  00112E  6EF8               	movwf	tblptru,c
  6343  001130  0E0F               	movlw	(high __ramtop+-1)
  6344  001132  64F7               	cpfsgt	tblptrh,c
  6345  001134  D003               	bra	u4097
  6346  001136  0008               	tblrd		*
  6347  001138  50F5               	movf	tablat,w,c
  6348  00113A  D005               	bra	u4090
  6349  00113C                     u4097:
  6350  00113C  CFF6 FFE9          	movff	tblptrl,fsr0l
  6351  001140  CFF7 FFEA          	movff	tblptrh,fsr0h
  6352  001144  50EF               	movf	indf0,w,c
  6353  001146                     u4090:
  6354  001146  0A0A               	xorlw	10
  6355  001148  B4D8               	btfsc	status,2,c
  6356  00114A  D01A               	goto	l450
  6357  00114C                     l447:
  6358  00114C                     l3690:
  6359                           
  6360                           ;helpers.c: 56: }
  6361                           ;helpers.c: 58: putch(string[i]);
  6362  00114C  0100               	movlb	0	; () banked
  6363  00114E  5188               	movf	printStringLCD@i& (0+255),w,b
  6364  001150  242D               	addwf	printStringLCD@string,w,c
  6365  001152  6E2F               	movwf	??_printStringLCD& (0+255),c
  6366  001154  5189               	movf	(printStringLCD@i+1)& (0+255),w,b
  6367  001156  202E               	addwfc	printStringLCD@string+1,w,c
  6368  001158  6E30               	movwf	(??_printStringLCD+1)& (0+255),c
  6369  00115A  C02F  FFF6         	movff	??_printStringLCD,tblptrl
  6370  00115E  C030  FFF7         	movff	??_printStringLCD+1,tblptrh
  6371  001162  0E00               	movlw	low (__mediumconst shr (0+16))
  6372  001164  6EF8               	movwf	tblptru,c
  6373  001166  0E0F               	movlw	(high __ramtop+-1)
  6374  001168  64F7               	cpfsgt	tblptrh,c
  6375  00116A  D003               	bra	u4117
  6376  00116C  0008               	tblrd		*
  6377  00116E  50F5               	movf	tablat,w,c
  6378  001170  D005               	bra	u4110
  6379  001172                     u4117:
  6380  001172  CFF6 FFE9          	movff	tblptrl,fsr0l
  6381  001176  CFF7 FFEA          	movff	tblptrh,fsr0h
  6382  00117A  50EF               	movf	indf0,w,c
  6383  00117C                     u4110:
  6384  00117C  ECF7  F00F         	call	_putch
  6385  001180                     l450:
  6386  001180  0100               	movlb	0	; () banked
  6387  001182  4B88               	infsnz	printStringLCD@i& (0+255),f,b
  6388  001184  2B89               	incf	(printStringLCD@i+1)& (0+255),f,b
  6389                           
  6390                           ; BSR set to: 0
  6391  001186  BF89               	btfsc	(printStringLCD@i+1)& (0+255),7,b
  6392  001188  D770               	goto	l443
  6393  00118A  5189               	movf	(printStringLCD@i+1)& (0+255),w,b
  6394  00118C  E101               	bnz	l451
  6395  00118E  D767               	goto	L8
  6396  001190                     l451:
  6397  001190  0012               	return		;funcret
  6398  001192                     __end_of_printStringLCD:
  6399                           	opt stack 0
  6400                           tosu	equ	0xFFF
  6401                           tosh	equ	0xFFE
  6402                           tosl	equ	0xFFD
  6403                           pclath	equ	0xFFA
  6404                           tblptru	equ	0xFF8
  6405                           tblptrh	equ	0xFF7
  6406                           tblptrl	equ	0xFF6
  6407                           tablat	equ	0xFF5
  6408                           prodh	equ	0xFF4
  6409                           prodl	equ	0xFF3
  6410                           indf0	equ	0xFEF
  6411                           postinc0	equ	0xFEE
  6412                           fsr0h	equ	0xFEA
  6413                           fsr0l	equ	0xFE9
  6414                           wreg	equ	0xFE8
  6415                           postdec1	equ	0xFE5
  6416                           plusw1	equ	0xFE3
  6417                           fsr1l	equ	0xFE1
  6418                           indf2	equ	0xFDF
  6419                           postinc2	equ	0xFDE
  6420                           postdec2	equ	0xFDD
  6421                           plusw2	equ	0xFDB
  6422                           fsr2h	equ	0xFDA
  6423                           fsr2l	equ	0xFD9
  6424                           status	equ	0xFD8
  6425                           
  6426 ;; *************** function _putch *****************
  6427 ;; Defined at:
  6428 ;;		line 25 in file "lcd.c"
  6429 ;; Parameters:    Size  Location     Type
  6430 ;;  data            1    wreg     unsigned char 
  6431 ;; Auto vars:     Size  Location     Type
  6432 ;;  data            1   40[COMRAM] unsigned char 
  6433 ;; Return value:  Size  Location     Type
  6434 ;;                  1    wreg      void 
  6435 ;; Registers used:
  6436 ;;		wreg, status,2, status,0, cstack
  6437 ;; Tracked objects:
  6438 ;;		On entry : 0/0
  6439 ;;		On exit  : 0/0
  6440 ;;		Unchanged: 0/0
  6441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6443 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6445 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6446 ;;Total ram usage:        1 bytes
  6447 ;; Hardware stack levels used:    1
  6448 ;; Hardware stack levels required when called:    5
  6449 ;; This function calls:
  6450 ;;		_lcdNibble
  6451 ;; This function is called by:
  6452 ;;		_inputEntry
  6453 ;;		_mainMenu
  6454 ;;		_printStringLCD
  6455 ;;		_printf
  6456 ;;		__doprnt
  6457 ;; This function uses a non-reentrant model
  6458 ;;
  6459                           
  6460                           	psect	text15
  6461  001FEE                     __ptext15:
  6462                           	opt stack 0
  6463  001FEE                     _putch:
  6464                           	opt stack 22
  6465                           
  6466                           ;incstack = 0
  6467                           ;putch@data stored from wreg
  6468  001FEE  6E29               	movwf	putch@data,c
  6469                           
  6470                           ;lcd.c: 33: LATDbits.LATD2 = 1;
  6471  001FF0  848C               	bsf	3980,2,c	;volatile
  6472                           
  6473                           ;lcd.c: 34: lcdNibble(data);
  6474  001FF2  5029               	movf	putch@data,w,c
  6475  001FF4  EC33  F00D         	call	_lcdNibble
  6476                           
  6477                           ;lcd.c: 35: _delay((unsigned long)((100)*(40000000/4000000.0)));
  6478  001FF8  0EC8               	movlw	200
  6479  001FFA                     u5537:
  6480  001FFA  D000               	nop2	
  6481  001FFC  2EE8               	decfsz	wreg,f,c
  6482  001FFE  D7FD               	bra	u5537
  6483  002000  0012               	return		;funcret
  6484  002002                     __end_of_putch:
  6485                           	opt stack 0
  6486                           tosu	equ	0xFFF
  6487                           tosh	equ	0xFFE
  6488                           tosl	equ	0xFFD
  6489                           pclath	equ	0xFFA
  6490                           tblptru	equ	0xFF8
  6491                           tblptrh	equ	0xFF7
  6492                           tblptrl	equ	0xFF6
  6493                           tablat	equ	0xFF5
  6494                           prodh	equ	0xFF4
  6495                           prodl	equ	0xFF3
  6496                           indf0	equ	0xFEF
  6497                           postinc0	equ	0xFEE
  6498                           fsr0h	equ	0xFEA
  6499                           fsr0l	equ	0xFE9
  6500                           wreg	equ	0xFE8
  6501                           postdec1	equ	0xFE5
  6502                           plusw1	equ	0xFE3
  6503                           fsr1l	equ	0xFE1
  6504                           indf2	equ	0xFDF
  6505                           postinc2	equ	0xFDE
  6506                           postdec2	equ	0xFDD
  6507                           plusw2	equ	0xFDB
  6508                           fsr2h	equ	0xFDA
  6509                           fsr2l	equ	0xFD9
  6510                           status	equ	0xFD8
  6511                           
  6512 ;; *************** function _pollKeypad *****************
  6513 ;; Defined at:
  6514 ;;		line 68 in file "helpers.c"
  6515 ;; Parameters:    Size  Location     Type
  6516 ;;		None
  6517 ;; Auto vars:     Size  Location     Type
  6518 ;;  keypress        1   38[COMRAM] unsigned char 
  6519 ;; Return value:  Size  Location     Type
  6520 ;;                  1    wreg      unsigned char 
  6521 ;; Registers used:
  6522 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  6523 ;; Tracked objects:
  6524 ;;		On entry : 0/0
  6525 ;;		On exit  : 0/0
  6526 ;;		Unchanged: 0/0
  6527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6529 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6531 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6532 ;;Total ram usage:        1 bytes
  6533 ;; Hardware stack levels used:    1
  6534 ;; Hardware stack levels required when called:    4
  6535 ;; This function calls:
  6536 ;;		Nothing
  6537 ;; This function is called by:
  6538 ;;		_hibernate
  6539 ;;		_viewLogs
  6540 ;;		_inputEntry
  6541 ;;		_mainMenu
  6542 ;; This function uses a non-reentrant model
  6543 ;;
  6544                           
  6545                           	psect	text16
  6546  001F0E                     __ptext16:
  6547                           	opt stack 0
  6548  001F0E                     _pollKeypad:
  6549                           	opt stack 24
  6550                           
  6551                           ;helpers.c: 70: while (PORTBbits.RB1 == 0) {continue;}
  6552                           
  6553                           ;incstack = 0
  6554  001F0E  A281               	btfss	3969,1,c	;volatile
  6555  001F10  D7FE               	goto	_pollKeypad
  6556                           
  6557                           ;helpers.c: 73: unsigned char keypress = (unsigned char)(PORTB & 0xF0) >> 4;
  6558  001F12  3881               	swapf	3969,w,c	;volatile
  6559  001F14  0B0F               	andlw	15
  6560  001F16  0B0F               	andlw	15
  6561  001F18  6E27               	movwf	pollKeypad@keypress,c
  6562  001F1A  B281               	btfsc	3969,1,c	;volatile
  6563  001F1C  D7FE               	goto	l461
  6564                           
  6565                           ;helpers.c: 78: __nop();
  6566  001F1E  F000               	nop	
  6567                           
  6568                           ;helpers.c: 80: return keypadChars[keypress];
  6569  001F20  5027               	movf	pollKeypad@keypress,w,c
  6570  001F22  0D01               	mullw	1
  6571  001F24  0EA9               	movlw	low _keypadChars
  6572  001F26  24F3               	addwf	prodl,w,c
  6573  001F28  6EF6               	movwf	tblptrl,c
  6574  001F2A  0EFC               	movlw	high _keypadChars
  6575  001F2C  20F4               	addwfc	prodh,w,c
  6576  001F2E  6EF7               	movwf	tblptrh,c
  6577  001F30                     	if	1	;There are 3 active tblptr bytes
  6578  001F30  6AF8               	clrf	tblptru,c
  6579  001F32  0E00               	movlw	low (__mediumconst shr (0+16))
  6580  001F34  22F8               	addwfc	tblptru,f,c
  6581  001F36                     	endif
  6582  001F36  0008               	tblrd		*
  6583  001F38  50F5               	movf	tablat,w,c
  6584  001F3A  0012               	return	
  6585  001F3C                     __end_of_pollKeypad:
  6586                           	opt stack 0
  6587                           tosu	equ	0xFFF
  6588                           tosh	equ	0xFFE
  6589                           tosl	equ	0xFFD
  6590                           pclath	equ	0xFFA
  6591                           tblptru	equ	0xFF8
  6592                           tblptrh	equ	0xFF7
  6593                           tblptrl	equ	0xFF6
  6594                           tablat	equ	0xFF5
  6595                           prodh	equ	0xFF4
  6596                           prodl	equ	0xFF3
  6597                           indf0	equ	0xFEF
  6598                           postinc0	equ	0xFEE
  6599                           fsr0h	equ	0xFEA
  6600                           fsr0l	equ	0xFE9
  6601                           wreg	equ	0xFE8
  6602                           postdec1	equ	0xFE5
  6603                           plusw1	equ	0xFE3
  6604                           fsr1l	equ	0xFE1
  6605                           indf2	equ	0xFDF
  6606                           postinc2	equ	0xFDE
  6607                           postdec2	equ	0xFDD
  6608                           plusw2	equ	0xFDB
  6609                           fsr2h	equ	0xFDA
  6610                           fsr2l	equ	0xFD9
  6611                           status	equ	0xFD8
  6612                           
  6613 ;; *************** function _clearing *****************
  6614 ;; Defined at:
  6615 ;;		line 134 in file "main.c"
  6616 ;; Parameters:    Size  Location     Type
  6617 ;;		None
  6618 ;; Auto vars:     Size  Location     Type
  6619 ;;  i               2    4[BANK0 ] int 
  6620 ;;  spinTime        2    2[BANK0 ] int 
  6621 ;; Return value:  Size  Location     Type
  6622 ;;                  1    wreg      void 
  6623 ;; Registers used:
  6624 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6625 ;; Tracked objects:
  6626 ;;		On entry : 0/0
  6627 ;;		On exit  : 0/0
  6628 ;;		Unchanged: 0/0
  6629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6631 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6632 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6633 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6634 ;;Total ram usage:        6 bytes
  6635 ;; Hardware stack levels used:    1
  6636 ;; Hardware stack levels required when called:    7
  6637 ;; This function calls:
  6638 ;;		_I2C_Send
  6639 ;; This function is called by:
  6640 ;;		_mainMenu
  6641 ;; This function uses a non-reentrant model
  6642 ;;
  6643                           
  6644                           	psect	text17
  6645  001192                     __ptext17:
  6646                           	opt stack 0
  6647  001192                     _clearing:
  6648                           	opt stack 22
  6649                           
  6650                           ;main.c: 139: I2C_Send(nanoAddr, 3);
  6651                           
  6652                           ;incstack = 0
  6653  001192  0E03               	movlw	3
  6654  001194  6E2A               	movwf	I2C_Send@data,c
  6655  001196  0E00               	movlw	0
  6656  001198  6E2B               	movwf	I2C_Send@data+1,c
  6657  00119A  0ECF               	movlw	low _nanoAddr
  6658  00119C  6EF6               	movwf	tblptrl,c
  6659  00119E                     	if	1	;There is more than 1 active tblptr byte
  6660  00119E  0EFC               	movlw	high _nanoAddr
  6661  0011A0  6EF7               	movwf	tblptrh,c
  6662  0011A2                     	endif
  6663  0011A2                     	if	1	;There are 3 active tblptr bytes
  6664  0011A2  0E00               	movlw	low (_nanoAddr shr (0+16))
  6665  0011A4  6EF8               	movwf	tblptru,c
  6666  0011A6                     	endif
  6667  0011A6  0008               	tblrd		*
  6668  0011A8  50F5               	movf	tablat,w,c
  6669  0011AA  ECA8  F00C         	call	_I2C_Send
  6670                           
  6671                           ;main.c: 141: int i;
  6672                           ;main.c: 142: int spinTime=100;
  6673  0011AE  0E00               	movlw	0
  6674  0011B0  0100               	movlb	0	; () banked
  6675  0011B2  6F83               	movwf	(clearing@spinTime+1)& (0+255),b
  6676  0011B4  0E64               	movlw	100
  6677  0011B6  6F82               	movwf	clearing@spinTime& (0+255),b
  6678                           
  6679                           ; BSR set to: 0
  6680                           ;main.c: 144: extras.b = 0;
  6681  0011B8  0E00               	movlw	0
  6682  0011BA  6E4E               	movwf	_extras+1,c
  6683  0011BC  0E00               	movlw	0
  6684  0011BE  6E4D               	movwf	_extras,c
  6685                           
  6686                           ; BSR set to: 0
  6687                           ;main.c: 145: extras.n = 0;
  6688  0011C0  0E00               	movlw	0
  6689  0011C2  6E50               	movwf	_extras+3,c
  6690  0011C4  0E00               	movlw	0
  6691  0011C6  6E4F               	movwf	_extras+2,c
  6692                           
  6693                           ; BSR set to: 0
  6694                           ;main.c: 146: extras.s = 0;
  6695  0011C8  0E00               	movlw	0
  6696  0011CA  6E52               	movwf	_extras+5,c
  6697  0011CC  0E00               	movlw	0
  6698  0011CE  6E51               	movwf	_extras+4,c
  6699                           
  6700                           ; BSR set to: 0
  6701                           ;main.c: 147: extras.w = 0;
  6702  0011D0  0E00               	movlw	0
  6703  0011D2  6E54               	movwf	_extras+7,c
  6704  0011D4  0E00               	movlw	0
  6705  0011D6  6E53               	movwf	_extras+6,c
  6706                           
  6707                           ; BSR set to: 0
  6708                           ;main.c: 149: LATBbits.LATB3 = 1;
  6709  0011D8  868A               	bsf	3978,3,c	;volatile
  6710                           
  6711                           ; BSR set to: 0
  6712                           ;main.c: 150: for (i = 0; i < spinTime; i++) {
  6713  0011DA  0E00               	movlw	0
  6714  0011DC  6F85               	movwf	(clearing@i+1)& (0+255),b
  6715  0011DE  0E00               	movlw	0
  6716  0011E0  6F84               	movwf	clearing@i& (0+255),b
  6717  0011E2  D01F               	goto	l111
  6718  0011E4                     l112:
  6719                           
  6720                           ; BSR set to: 0
  6721                           ;main.c: 152: if (PORTAbits.RA0 == 0) {
  6722  0011E4  B080               	btfsc	3968,0,c	;volatile
  6723  0011E6  D002               	goto	l113
  6724                           
  6725                           ; BSR set to: 0
  6726                           ;main.c: 153: extras.b++;
  6727  0011E8  4A4D               	infsnz	_extras,f,c
  6728  0011EA  2A4E               	incf	_extras+1,f,c
  6729  0011EC                     l113:
  6730                           
  6731                           ; BSR set to: 0
  6732                           ;main.c: 154: }
  6733                           ;main.c: 155: if (extras.b + dispensed.b == 20) break;
  6734                           
  6735                           ; BSR set to: 0
  6736  0011EC  51EF               	movf	_dispensed& (0+255),w,b
  6737  0011EE  244D               	addwf	_extras,w,c
  6738  0011F0  6F80               	movwf	??_clearing& (0+255),b
  6739  0011F2  51F0               	movf	(_dispensed+1)& (0+255),w,b
  6740  0011F4  204E               	addwfc	_extras+1,w,c
  6741  0011F6  6F81               	movwf	(??_clearing+1)& (0+255),b
  6742  0011F8  0E14               	movlw	20
  6743  0011FA  1980               	xorwf	??_clearing& (0+255),w,b
  6744  0011FC  1181               	iorwf	(??_clearing+1)& (0+255),w,b
  6745  0011FE  B4D8               	btfsc	status,2,c
  6746  001200  D01A               	goto	u4540
  6747                           
  6748                           ; BSR set to: 0
  6749                           ;main.c: 156: _delay((unsigned long)((25)*(40000000/4000.0)));
  6750                           
  6751                           ; BSR set to: 0
  6752                           
  6753                           ; BSR set to: 0
  6754  001202  0E02               	movlw	2
  6755  001204  0100               	movlb	0	; () banked
  6756  001206  6F81               	movwf	(??_clearing+1)& (0+255),b
  6757  001208  0E45               	movlw	69
  6758  00120A  6F80               	movwf	??_clearing& (0+255),b
  6759  00120C  0EA9               	movlw	169
  6760  00120E                     u5547:
  6761  00120E  2EE8               	decfsz	wreg,f,c
  6762  001210  D7FE               	bra	u5547
  6763  001212  2F80               	decfsz	??_clearing& (0+255),f,b
  6764  001214  D7FC               	bra	u5547
  6765  001216  2F81               	decfsz	(??_clearing+1)& (0+255),f,b
  6766  001218  D7FA               	bra	u5547
  6767  00121A  D000               	nop2	
  6768  00121C  0100               	movlb	0	; () banked
  6769  00121E  4B84               	infsnz	clearing@i& (0+255),f,b
  6770  001220  2B85               	incf	(clearing@i+1)& (0+255),f,b
  6771  001222                     l111:
  6772                           
  6773                           ; BSR set to: 0
  6774  001222  5182               	movf	clearing@spinTime& (0+255),w,b
  6775  001224  5D84               	subwf	clearing@i& (0+255),w,b
  6776  001226  5185               	movf	(clearing@i+1)& (0+255),w,b
  6777  001228  0A80               	xorlw	128
  6778  00122A  6F80               	movwf	??_clearing& (0+255),b
  6779  00122C  5183               	movf	(clearing@spinTime+1)& (0+255),w,b
  6780  00122E  0A80               	xorlw	128
  6781  001230  5980               	subwfb	??_clearing& (0+255),w,b
  6782  001232  A0D8               	btfss	status,0,c
  6783  001234  D7D7               	goto	l112
  6784  001236                     u4540:
  6785                           
  6786                           ; BSR set to: 0
  6787                           ;main.c: 157: }
  6788                           ;main.c: 158: LATBbits.LATB3 = 0;
  6789  001236  968A               	bcf	3978,3,c	;volatile
  6790                           
  6791                           ; BSR set to: 0
  6792                           ;main.c: 160: I2C_Send(nanoAddr, 4);
  6793  001238  0E04               	movlw	4
  6794  00123A  6E2A               	movwf	I2C_Send@data,c
  6795  00123C  0E00               	movlw	0
  6796  00123E  6E2B               	movwf	I2C_Send@data+1,c
  6797  001240  0ECF               	movlw	low _nanoAddr
  6798  001242  6EF6               	movwf	tblptrl,c
  6799  001244                     	if	1	;There is more than 1 active tblptr byte
  6800  001244  0EFC               	movlw	high _nanoAddr
  6801  001246  6EF7               	movwf	tblptrh,c
  6802  001248                     	endif
  6803  001248                     	if	1	;There are 3 active tblptr bytes
  6804  001248  0E00               	movlw	low (_nanoAddr shr (0+16))
  6805  00124A  6EF8               	movwf	tblptru,c
  6806  00124C                     	endif
  6807  00124C  0008               	tblrd		*
  6808  00124E  50F5               	movf	tablat,w,c
  6809  001250  ECA8  F00C         	call	_I2C_Send
  6810                           
  6811                           ;main.c: 161: _delay((unsigned long)((5000)*(40000000/4000.0)));
  6812  001254  0EFE               	movlw	254
  6813  001256  0100               	movlb	0	; () banked
  6814  001258  6F81               	movwf	(??_clearing+1)& (0+255),b
  6815  00125A  0EA7               	movlw	167
  6816  00125C  6F80               	movwf	??_clearing& (0+255),b
  6817  00125E  0E65               	movlw	101
  6818  001260                     u5557:
  6819  001260  2EE8               	decfsz	wreg,f,c
  6820  001262  D7FE               	bra	u5557
  6821  001264  2F80               	decfsz	??_clearing& (0+255),f,b
  6822  001266  D7FC               	bra	u5557
  6823  001268  2F81               	decfsz	(??_clearing+1)& (0+255),f,b
  6824  00126A  D7FA               	bra	u5557
  6825  00126C  D000               	nop2	
  6826                           
  6827                           ;main.c: 163: LATCbits.LATC1 = 1;
  6828  00126E  828B               	bsf	3979,1,c	;volatile
  6829                           
  6830                           ;main.c: 164: for (i = 0; i < spinTime; i++) {
  6831  001270  0E00               	movlw	0
  6832  001272  0100               	movlb	0	; () banked
  6833  001274  6F85               	movwf	(clearing@i+1)& (0+255),b
  6834  001276  0E00               	movlw	0
  6835  001278  6F84               	movwf	clearing@i& (0+255),b
  6836  00127A  D01F               	goto	l116
  6837  00127C                     l117:
  6838                           
  6839                           ; BSR set to: 0
  6840                           ;main.c: 165: if (PORTAbits.RA1 == 0) {
  6841  00127C  B280               	btfsc	3968,1,c	;volatile
  6842  00127E  D002               	goto	l118
  6843                           
  6844                           ; BSR set to: 0
  6845                           ;main.c: 166: extras.n++;
  6846  001280  4A4F               	infsnz	_extras+2,f,c
  6847  001282  2A50               	incf	_extras+3,f,c
  6848  001284                     l118:
  6849                           
  6850                           ; BSR set to: 0
  6851                           ;main.c: 167: }
  6852                           ;main.c: 168: if (extras.n + dispensed.n == 25) break;
  6853                           
  6854                           ; BSR set to: 0
  6855  001284  51F1               	movf	(_dispensed+2)& (0+255),w,b
  6856  001286  244F               	addwf	_extras+2,w,c
  6857  001288  6F80               	movwf	??_clearing& (0+255),b
  6858  00128A  51F2               	movf	(_dispensed+3)& (0+255),w,b
  6859  00128C  2050               	addwfc	_extras+3,w,c
  6860  00128E  6F81               	movwf	(??_clearing+1)& (0+255),b
  6861  001290  0E19               	movlw	25
  6862  001292  1980               	xorwf	??_clearing& (0+255),w,b
  6863  001294  1181               	iorwf	(??_clearing+1)& (0+255),w,b
  6864  001296  B4D8               	btfsc	status,2,c
  6865  001298  D01A               	goto	u4570
  6866                           
  6867                           ; BSR set to: 0
  6868                           ;main.c: 169: _delay((unsigned long)((25)*(40000000/4000.0)));
  6869                           
  6870                           ; BSR set to: 0
  6871                           
  6872                           ; BSR set to: 0
  6873  00129A  0E02               	movlw	2
  6874  00129C  0100               	movlb	0	; () banked
  6875  00129E  6F81               	movwf	(??_clearing+1)& (0+255),b
  6876  0012A0  0E45               	movlw	69
  6877  0012A2  6F80               	movwf	??_clearing& (0+255),b
  6878  0012A4  0EA9               	movlw	169
  6879  0012A6                     u5567:
  6880  0012A6  2EE8               	decfsz	wreg,f,c
  6881  0012A8  D7FE               	bra	u5567
  6882  0012AA  2F80               	decfsz	??_clearing& (0+255),f,b
  6883  0012AC  D7FC               	bra	u5567
  6884  0012AE  2F81               	decfsz	(??_clearing+1)& (0+255),f,b
  6885  0012B0  D7FA               	bra	u5567
  6886  0012B2  D000               	nop2	
  6887  0012B4  0100               	movlb	0	; () banked
  6888  0012B6  4B84               	infsnz	clearing@i& (0+255),f,b
  6889  0012B8  2B85               	incf	(clearing@i+1)& (0+255),f,b
  6890  0012BA                     l116:
  6891                           
  6892                           ; BSR set to: 0
  6893  0012BA  5182               	movf	clearing@spinTime& (0+255),w,b
  6894  0012BC  5D84               	subwf	clearing@i& (0+255),w,b
  6895  0012BE  5185               	movf	(clearing@i+1)& (0+255),w,b
  6896  0012C0  0A80               	xorlw	128
  6897  0012C2  6F80               	movwf	??_clearing& (0+255),b
  6898  0012C4  5183               	movf	(clearing@spinTime+1)& (0+255),w,b
  6899  0012C6  0A80               	xorlw	128
  6900  0012C8  5980               	subwfb	??_clearing& (0+255),w,b
  6901  0012CA  A0D8               	btfss	status,0,c
  6902  0012CC  D7D7               	goto	l117
  6903  0012CE                     u4570:
  6904                           
  6905                           ; BSR set to: 0
  6906                           ;main.c: 170: }
  6907                           ;main.c: 171: LATCbits.LATC1 = 0;
  6908  0012CE  928B               	bcf	3979,1,c	;volatile
  6909                           
  6910                           ; BSR set to: 0
  6911                           ;main.c: 173: I2C_Send(nanoAddr, 5);
  6912  0012D0  0E05               	movlw	5
  6913  0012D2  6E2A               	movwf	I2C_Send@data,c
  6914  0012D4  0E00               	movlw	0
  6915  0012D6  6E2B               	movwf	I2C_Send@data+1,c
  6916  0012D8  0ECF               	movlw	low _nanoAddr
  6917  0012DA  6EF6               	movwf	tblptrl,c
  6918  0012DC                     	if	1	;There is more than 1 active tblptr byte
  6919  0012DC  0EFC               	movlw	high _nanoAddr
  6920  0012DE  6EF7               	movwf	tblptrh,c
  6921  0012E0                     	endif
  6922  0012E0                     	if	1	;There are 3 active tblptr bytes
  6923  0012E0  0E00               	movlw	low (_nanoAddr shr (0+16))
  6924  0012E2  6EF8               	movwf	tblptru,c
  6925  0012E4                     	endif
  6926  0012E4  0008               	tblrd		*
  6927  0012E6  50F5               	movf	tablat,w,c
  6928  0012E8  ECA8  F00C         	call	_I2C_Send
  6929                           
  6930                           ;main.c: 174: _delay((unsigned long)((5000)*(40000000/4000.0)));
  6931  0012EC  0EFE               	movlw	254
  6932  0012EE  0100               	movlb	0	; () banked
  6933  0012F0  6F81               	movwf	(??_clearing+1)& (0+255),b
  6934  0012F2  0EA7               	movlw	167
  6935  0012F4  6F80               	movwf	??_clearing& (0+255),b
  6936  0012F6  0E65               	movlw	101
  6937  0012F8                     u5577:
  6938  0012F8  2EE8               	decfsz	wreg,f,c
  6939  0012FA  D7FE               	bra	u5577
  6940  0012FC  2F80               	decfsz	??_clearing& (0+255),f,b
  6941  0012FE  D7FC               	bra	u5577
  6942  001300  2F81               	decfsz	(??_clearing+1)& (0+255),f,b
  6943  001302  D7FA               	bra	u5577
  6944  001304  D000               	nop2	
  6945                           
  6946                           ;main.c: 176: LATCbits.LATC5 = 1;
  6947  001306  8A8B               	bsf	3979,5,c	;volatile
  6948                           
  6949                           ;main.c: 177: for (i = 0; i < spinTime; i++) {
  6950  001308  0E00               	movlw	0
  6951  00130A  0100               	movlb	0	; () banked
  6952  00130C  6F85               	movwf	(clearing@i+1)& (0+255),b
  6953  00130E  0E00               	movlw	0
  6954  001310  6F84               	movwf	clearing@i& (0+255),b
  6955  001312  D01F               	goto	l121
  6956  001314                     l122:
  6957                           
  6958                           ; BSR set to: 0
  6959                           ;main.c: 178: if (PORTAbits.RA2 == 0) {
  6960  001314  B480               	btfsc	3968,2,c	;volatile
  6961  001316  D002               	goto	l123
  6962                           
  6963                           ; BSR set to: 0
  6964                           ;main.c: 179: extras.s++;
  6965  001318  4A51               	infsnz	_extras+4,f,c
  6966  00131A  2A52               	incf	_extras+5,f,c
  6967  00131C                     l123:
  6968                           
  6969                           ; BSR set to: 0
  6970                           ;main.c: 180: }
  6971                           ;main.c: 181: if (extras.s + dispensed.s == 20) break;
  6972                           
  6973                           ; BSR set to: 0
  6974  00131C  51F3               	movf	(_dispensed+4)& (0+255),w,b
  6975  00131E  2451               	addwf	_extras+4,w,c
  6976  001320  6F80               	movwf	??_clearing& (0+255),b
  6977  001322  51F4               	movf	(_dispensed+5)& (0+255),w,b
  6978  001324  2052               	addwfc	_extras+5,w,c
  6979  001326  6F81               	movwf	(??_clearing+1)& (0+255),b
  6980  001328  0E14               	movlw	20
  6981  00132A  1980               	xorwf	??_clearing& (0+255),w,b
  6982  00132C  1181               	iorwf	(??_clearing+1)& (0+255),w,b
  6983  00132E  B4D8               	btfsc	status,2,c
  6984  001330  D01A               	goto	u4600
  6985                           
  6986                           ; BSR set to: 0
  6987                           ;main.c: 182: _delay((unsigned long)((25)*(40000000/4000.0)));
  6988                           
  6989                           ; BSR set to: 0
  6990                           
  6991                           ; BSR set to: 0
  6992  001332  0E02               	movlw	2
  6993  001334  0100               	movlb	0	; () banked
  6994  001336  6F81               	movwf	(??_clearing+1)& (0+255),b
  6995  001338  0E45               	movlw	69
  6996  00133A  6F80               	movwf	??_clearing& (0+255),b
  6997  00133C  0EA9               	movlw	169
  6998  00133E                     u5587:
  6999  00133E  2EE8               	decfsz	wreg,f,c
  7000  001340  D7FE               	bra	u5587
  7001  001342  2F80               	decfsz	??_clearing& (0+255),f,b
  7002  001344  D7FC               	bra	u5587
  7003  001346  2F81               	decfsz	(??_clearing+1)& (0+255),f,b
  7004  001348  D7FA               	bra	u5587
  7005  00134A  D000               	nop2	
  7006  00134C  0100               	movlb	0	; () banked
  7007  00134E  4B84               	infsnz	clearing@i& (0+255),f,b
  7008  001350  2B85               	incf	(clearing@i+1)& (0+255),f,b
  7009  001352                     l121:
  7010                           
  7011                           ; BSR set to: 0
  7012  001352  5182               	movf	clearing@spinTime& (0+255),w,b
  7013  001354  5D84               	subwf	clearing@i& (0+255),w,b
  7014  001356  5185               	movf	(clearing@i+1)& (0+255),w,b
  7015  001358  0A80               	xorlw	128
  7016  00135A  6F80               	movwf	??_clearing& (0+255),b
  7017  00135C  5183               	movf	(clearing@spinTime+1)& (0+255),w,b
  7018  00135E  0A80               	xorlw	128
  7019  001360  5980               	subwfb	??_clearing& (0+255),w,b
  7020  001362  A0D8               	btfss	status,0,c
  7021  001364  D7D7               	goto	l122
  7022  001366                     u4600:
  7023                           
  7024                           ; BSR set to: 0
  7025                           ;main.c: 183: }
  7026                           ;main.c: 184: LATCbits.LATC5 = 0;
  7027  001366  9A8B               	bcf	3979,5,c	;volatile
  7028                           
  7029                           ; BSR set to: 0
  7030                           ;main.c: 186: I2C_Send(nanoAddr, 6);
  7031  001368  0E06               	movlw	6
  7032  00136A  6E2A               	movwf	I2C_Send@data,c
  7033  00136C  0E00               	movlw	0
  7034  00136E  6E2B               	movwf	I2C_Send@data+1,c
  7035  001370  0ECF               	movlw	low _nanoAddr
  7036  001372  6EF6               	movwf	tblptrl,c
  7037  001374                     	if	1	;There is more than 1 active tblptr byte
  7038  001374  0EFC               	movlw	high _nanoAddr
  7039  001376  6EF7               	movwf	tblptrh,c
  7040  001378                     	endif
  7041  001378                     	if	1	;There are 3 active tblptr bytes
  7042  001378  0E00               	movlw	low (_nanoAddr shr (0+16))
  7043  00137A  6EF8               	movwf	tblptru,c
  7044  00137C                     	endif
  7045  00137C  0008               	tblrd		*
  7046  00137E  50F5               	movf	tablat,w,c
  7047  001380  ECA8  F00C         	call	_I2C_Send
  7048                           
  7049                           ;main.c: 187: _delay((unsigned long)((5000)*(40000000/4000.0)));
  7050  001384  0EFE               	movlw	254
  7051  001386  0100               	movlb	0	; () banked
  7052  001388  6F81               	movwf	(??_clearing+1)& (0+255),b
  7053  00138A  0EA7               	movlw	167
  7054  00138C  6F80               	movwf	??_clearing& (0+255),b
  7055  00138E  0E65               	movlw	101
  7056  001390                     u5597:
  7057  001390  2EE8               	decfsz	wreg,f,c
  7058  001392  D7FE               	bra	u5597
  7059  001394  2F80               	decfsz	??_clearing& (0+255),f,b
  7060  001396  D7FC               	bra	u5597
  7061  001398  2F81               	decfsz	(??_clearing+1)& (0+255),f,b
  7062  00139A  D7FA               	bra	u5597
  7063  00139C  D000               	nop2	
  7064                           
  7065                           ;main.c: 189: LATCbits.LATC7 = 1;
  7066  00139E  8E8B               	bsf	3979,7,c	;volatile
  7067                           
  7068                           ;main.c: 190: for (i = 0; i < spinTime; i++) {
  7069  0013A0  0E00               	movlw	0
  7070  0013A2  0100               	movlb	0	; () banked
  7071  0013A4  6F85               	movwf	(clearing@i+1)& (0+255),b
  7072  0013A6  0E00               	movlw	0
  7073  0013A8  6F84               	movwf	clearing@i& (0+255),b
  7074  0013AA  D011               	goto	l126
  7075  0013AC                     l127:
  7076                           
  7077                           ; BSR set to: 0
  7078                           ;main.c: 191: if (PORTAbits.RA3 == 0) {
  7079  0013AC  B680               	btfsc	3968,3,c	;volatile
  7080  0013AE  D002               	goto	l128
  7081                           
  7082                           ; BSR set to: 0
  7083                           ;main.c: 192: extras.w++;
  7084  0013B0  4A53               	infsnz	_extras+6,f,c
  7085  0013B2  2A54               	incf	_extras+7,f,c
  7086  0013B4                     l128:
  7087                           
  7088                           ; BSR set to: 0
  7089                           ;main.c: 193: }
  7090                           ;main.c: 194: if (extras.w + dispensed.w == 35) break;
  7091                           
  7092                           ; BSR set to: 0
  7093  0013B4  51F5               	movf	(_dispensed+6)& (0+255),w,b
  7094  0013B6  2453               	addwf	_extras+6,w,c
  7095  0013B8  6F80               	movwf	??_clearing& (0+255),b
  7096  0013BA  51F6               	movf	(_dispensed+7)& (0+255),w,b
  7097  0013BC  2054               	addwfc	_extras+7,w,c
  7098  0013BE  6F81               	movwf	(??_clearing+1)& (0+255),b
  7099  0013C0  0E23               	movlw	35
  7100  0013C2  1980               	xorwf	??_clearing& (0+255),w,b
  7101  0013C4  1181               	iorwf	(??_clearing+1)& (0+255),w,b
  7102  0013C6  B4D8               	btfsc	status,2,c
  7103  0013C8  D00C               	goto	u4630
  7104                           
  7105                           ; BSR set to: 0
  7106                           
  7107                           ; BSR set to: 0
  7108                           
  7109                           ; BSR set to: 0
  7110  0013CA  4B84               	infsnz	clearing@i& (0+255),f,b
  7111  0013CC  2B85               	incf	(clearing@i+1)& (0+255),f,b
  7112  0013CE                     l126:
  7113                           
  7114                           ; BSR set to: 0
  7115                           
  7116                           ; BSR set to: 0
  7117  0013CE  5182               	movf	clearing@spinTime& (0+255),w,b
  7118  0013D0  5D84               	subwf	clearing@i& (0+255),w,b
  7119  0013D2  5185               	movf	(clearing@i+1)& (0+255),w,b
  7120  0013D4  0A80               	xorlw	128
  7121  0013D6  6F80               	movwf	??_clearing& (0+255),b
  7122  0013D8  5183               	movf	(clearing@spinTime+1)& (0+255),w,b
  7123  0013DA  0A80               	xorlw	128
  7124  0013DC  5980               	subwfb	??_clearing& (0+255),w,b
  7125  0013DE  A0D8               	btfss	status,0,c
  7126  0013E0  D7E5               	goto	l127
  7127  0013E2                     u4630:
  7128                           
  7129                           ; BSR set to: 0
  7130                           ;main.c: 195: }
  7131                           ;main.c: 196: LATCbits.LATC7 = 0;
  7132  0013E2  9E8B               	bcf	3979,7,c	;volatile
  7133                           
  7134                           ; BSR set to: 0
  7135                           ;main.c: 198: I2C_Send(nanoAddr, 7);
  7136  0013E4  0E07               	movlw	7
  7137  0013E6  6E2A               	movwf	I2C_Send@data,c
  7138  0013E8  0E00               	movlw	0
  7139  0013EA  6E2B               	movwf	I2C_Send@data+1,c
  7140  0013EC  0ECF               	movlw	low _nanoAddr
  7141  0013EE  6EF6               	movwf	tblptrl,c
  7142  0013F0                     	if	1	;There is more than 1 active tblptr byte
  7143  0013F0  0EFC               	movlw	high _nanoAddr
  7144  0013F2  6EF7               	movwf	tblptrh,c
  7145  0013F4                     	endif
  7146  0013F4                     	if	1	;There are 3 active tblptr bytes
  7147  0013F4  0E00               	movlw	low (_nanoAddr shr (0+16))
  7148  0013F6  6EF8               	movwf	tblptru,c
  7149  0013F8                     	endif
  7150  0013F8  0008               	tblrd		*
  7151  0013FA  50F5               	movf	tablat,w,c
  7152  0013FC  ECA8  F00C         	call	_I2C_Send
  7153  001400  0012               	return		;funcret
  7154  001402                     __end_of_clearing:
  7155                           	opt stack 0
  7156                           tosu	equ	0xFFF
  7157                           tosh	equ	0xFFE
  7158                           tosl	equ	0xFFD
  7159                           pclath	equ	0xFFA
  7160                           tblptru	equ	0xFF8
  7161                           tblptrh	equ	0xFF7
  7162                           tblptrl	equ	0xFF6
  7163                           tablat	equ	0xFF5
  7164                           prodh	equ	0xFF4
  7165                           prodl	equ	0xFF3
  7166                           indf0	equ	0xFEF
  7167                           postinc0	equ	0xFEE
  7168                           fsr0h	equ	0xFEA
  7169                           fsr0l	equ	0xFE9
  7170                           wreg	equ	0xFE8
  7171                           postdec1	equ	0xFE5
  7172                           plusw1	equ	0xFE3
  7173                           fsr1l	equ	0xFE1
  7174                           indf2	equ	0xFDF
  7175                           postinc2	equ	0xFDE
  7176                           postdec2	equ	0xFDD
  7177                           plusw2	equ	0xFDB
  7178                           fsr2h	equ	0xFDA
  7179                           fsr2l	equ	0xFD9
  7180                           status	equ	0xFD8
  7181                           
  7182 ;; *************** function _I2C_Send *****************
  7183 ;; Defined at:
  7184 ;;		line 83 in file "helpers.c"
  7185 ;; Parameters:    Size  Location     Type
  7186 ;;  address         1    wreg     unsigned char 
  7187 ;;  data            2   41[COMRAM] PTR unsigned char 
  7188 ;;		 -> STR_18(21), STR_15(14), inputEntry@msg(24), STR_14(25), 
  7189 ;;		 -> packaging@msg2(32), packaging@msg(34), STR_10(7), STR_9(33), 
  7190 ;;		 -> RAM(3967), STR_8(19), STR_7(17), STR_6(17), 
  7191 ;;		 -> STR_5(14), STR_4(15), packageCompartment@currTimeString(33), 
  7192 ;; Auto vars:     Size  Location     Type
  7193 ;;  address         1   46[COMRAM] unsigned char 
  7194 ;;  i               2   47[COMRAM] int 
  7195 ;; Return value:  Size  Location     Type
  7196 ;;                  1    wreg      void 
  7197 ;; Registers used:
  7198 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7199 ;; Tracked objects:
  7200 ;;		On entry : 0/0
  7201 ;;		On exit  : 0/0
  7202 ;;		Unchanged: 0/0
  7203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7204 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7205 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7206 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7207 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7208 ;;Total ram usage:        8 bytes
  7209 ;; Hardware stack levels used:    1
  7210 ;; Hardware stack levels required when called:    6
  7211 ;; This function calls:
  7212 ;;		_I2C_Master_Start
  7213 ;;		_I2C_Master_Stop
  7214 ;;		_I2C_Master_Write
  7215 ;; This function is called by:
  7216 ;;		_packaging
  7217 ;;		_clearing
  7218 ;;		_inputEntry
  7219 ;;		_mainMenu
  7220 ;;		_packageCompartment
  7221 ;; This function uses a non-reentrant model
  7222 ;;
  7223                           
  7224                           	psect	text18
  7225  001950                     __ptext18:
  7226                           	opt stack 0
  7227  001950                     _I2C_Send:
  7228                           	opt stack 22
  7229                           
  7230                           ;incstack = 0
  7231                           ;I2C_Send@address stored from wreg
  7232  001950  6E2F               	movwf	I2C_Send@address,c
  7233                           
  7234                           ;helpers.c: 88: int i=0;
  7235  001952  0E00               	movlw	0
  7236  001954  6E31               	movwf	I2C_Send@i+1,c
  7237  001956  0E00               	movlw	0
  7238  001958  6E30               	movwf	I2C_Send@i,c
  7239                           
  7240                           ;helpers.c: 90: I2C_Master_Start();
  7241  00195A  EC1D  F010         	call	_I2C_Master_Start	;wreg free
  7242                           
  7243                           ;helpers.c: 91: I2C_Master_Write(address);
  7244  00195E  C02F  F028         	movff	I2C_Send@address,I2C_Master_Write@byteToWrite
  7245  001962  6A29               	clrf	I2C_Master_Write@byteToWrite+1,c
  7246  001964  EC14  F010         	call	_I2C_Master_Write	;wreg free
  7247                           
  7248                           ;helpers.c: 93: while (data[i] != 0) {
  7249  001968  D01F               	goto	l466
  7250  00196A                     
  7251                           ;helpers.c: 94: I2C_Master_Write(data[i]);
  7252  00196A  5030               	movf	I2C_Send@i,w,c
  7253  00196C  242A               	addwf	I2C_Send@data,w,c
  7254  00196E  6E2C               	movwf	??_I2C_Send& (0+255),c
  7255  001970  5031               	movf	I2C_Send@i+1,w,c
  7256  001972  202B               	addwfc	I2C_Send@data+1,w,c
  7257  001974  6E2D               	movwf	(??_I2C_Send+1)& (0+255),c
  7258  001976  C02C  FFF6         	movff	??_I2C_Send,tblptrl
  7259  00197A  C02D  FFF7         	movff	??_I2C_Send+1,tblptrh
  7260  00197E  0E00               	movlw	low (__mediumconst shr (0+16))
  7261  001980  6EF8               	movwf	tblptru,c
  7262  001982  0E0F               	movlw	(high __ramtop+-1)
  7263  001984  64F7               	cpfsgt	tblptrh,c
  7264  001986  D003               	bra	u4397
  7265  001988  0008               	tblrd		*
  7266  00198A  50F5               	movf	tablat,w,c
  7267  00198C  D005               	bra	u4390
  7268  00198E                     u4397:
  7269  00198E  CFF6 FFE9          	movff	tblptrl,fsr0l
  7270  001992  CFF7 FFEA          	movff	tblptrh,fsr0h
  7271  001996  50EF               	movf	indf0,w,c
  7272  001998                     u4390:
  7273  001998  6E2E               	movwf	(??_I2C_Send+2)& (0+255),c
  7274  00199A  502E               	movf	??_I2C_Send+2,w,c
  7275  00199C  6E28               	movwf	I2C_Master_Write@byteToWrite,c
  7276  00199E  6A29               	clrf	I2C_Master_Write@byteToWrite+1,c
  7277  0019A0  EC14  F010         	call	_I2C_Master_Write	;wreg free
  7278                           
  7279                           ;helpers.c: 95: i++;
  7280  0019A4  4A30               	infsnz	I2C_Send@i,f,c
  7281  0019A6  2A31               	incf	I2C_Send@i+1,f,c
  7282  0019A8                     l466:
  7283  0019A8  5030               	movf	I2C_Send@i,w,c
  7284  0019AA  242A               	addwf	I2C_Send@data,w,c
  7285  0019AC  6E2C               	movwf	??_I2C_Send& (0+255),c
  7286  0019AE  5031               	movf	I2C_Send@i+1,w,c
  7287  0019B0  202B               	addwfc	I2C_Send@data+1,w,c
  7288  0019B2  6E2D               	movwf	(??_I2C_Send+1)& (0+255),c
  7289  0019B4  C02C  FFF6         	movff	??_I2C_Send,tblptrl
  7290  0019B8  C02D  FFF7         	movff	??_I2C_Send+1,tblptrh
  7291  0019BC  0E00               	movlw	low (__mediumconst shr (0+16))
  7292  0019BE  6EF8               	movwf	tblptru,c
  7293  0019C0  0E0F               	movlw	(high __ramtop+-1)
  7294  0019C2  64F7               	cpfsgt	tblptrh,c
  7295  0019C4  D003               	bra	u4407
  7296  0019C6  0008               	tblrd		*
  7297  0019C8  50F5               	movf	tablat,w,c
  7298  0019CA  D005               	bra	u4400
  7299  0019CC                     u4407:
  7300  0019CC  CFF6 FFE9          	movff	tblptrl,fsr0l
  7301  0019D0  CFF7 FFEA          	movff	tblptrh,fsr0h
  7302  0019D4  50EF               	movf	indf0,w,c
  7303  0019D6                     u4400:
  7304  0019D6  0900               	iorlw	0
  7305  0019D8  A4D8               	btfss	status,2,c
  7306  0019DA  D7C7               	goto	l467
  7307                           
  7308                           ;helpers.c: 96: }
  7309                           ;helpers.c: 98: I2C_Master_Stop();
  7310  0019DC  EC19  F010         	call	_I2C_Master_Stop	;wreg free
  7311  0019E0  0012               	return	
  7312  0019E2                     __end_of_I2C_Send:
  7313                           	opt stack 0
  7314                           tosu	equ	0xFFF
  7315                           tosh	equ	0xFFE
  7316                           tosl	equ	0xFFD
  7317                           pclath	equ	0xFFA
  7318                           tblptru	equ	0xFF8
  7319                           tblptrh	equ	0xFF7
  7320                           tblptrl	equ	0xFF6
  7321                           tablat	equ	0xFF5
  7322                           prodh	equ	0xFF4
  7323                           prodl	equ	0xFF3
  7324                           indf0	equ	0xFEF
  7325                           postinc0	equ	0xFEE
  7326                           fsr0h	equ	0xFEA
  7327                           fsr0l	equ	0xFE9
  7328                           wreg	equ	0xFE8
  7329                           postdec1	equ	0xFE5
  7330                           plusw1	equ	0xFE3
  7331                           fsr1l	equ	0xFE1
  7332                           indf2	equ	0xFDF
  7333                           postinc2	equ	0xFDE
  7334                           postdec2	equ	0xFDD
  7335                           plusw2	equ	0xFDB
  7336                           fsr2h	equ	0xFDA
  7337                           fsr2l	equ	0xFD9
  7338                           status	equ	0xFD8
  7339                           
  7340 ;; *************** function _RTC_getSeconds *****************
  7341 ;; Defined at:
  7342 ;;		line 32 in file "RTC.c"
  7343 ;; Parameters:    Size  Location     Type
  7344 ;;		None
  7345 ;; Auto vars:     Size  Location     Type
  7346 ;;  time            7    0[BANK0 ] unsigned char [7]
  7347 ;;  seconds         4    7[BANK0 ] long 
  7348 ;; Return value:  Size  Location     Type
  7349 ;;                  4   44[COMRAM] long 
  7350 ;; Registers used:
  7351 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7352 ;; Tracked objects:
  7353 ;;		On entry : 0/0
  7354 ;;		On exit  : 0/0
  7355 ;;		Unchanged: 0/0
  7356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7357 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7358 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7359 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7360 ;;      Totals:         6      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7361 ;;Total ram usage:       17 bytes
  7362 ;; Hardware stack levels used:    1
  7363 ;; Hardware stack levels required when called:    7
  7364 ;; This function calls:
  7365 ;;		_RTC_getTime
  7366 ;;		___wmul
  7367 ;; This function is called by:
  7368 ;;		_mainMenu
  7369 ;;		_packageCompartment
  7370 ;; This function uses a non-reentrant model
  7371 ;;
  7372                           
  7373                           	psect	text19
  7374  001AE4                     __ptext19:
  7375                           	opt stack 0
  7376  001AE4                     _RTC_getSeconds:
  7377                           	opt stack 22
  7378                           
  7379                           ;RTC.c: 36: unsigned char time[7];
  7380                           ;RTC.c: 37: RTC_getTime(time);
  7381                           
  7382                           ;incstack = 0
  7383  001AE4  0E80               	movlw	low RTC_getSeconds@time
  7384  001AE6  6E2A               	movwf	RTC_getTime@time,c
  7385  001AE8  0E00               	movlw	high RTC_getSeconds@time
  7386  001AEA  6E2B               	movwf	RTC_getTime@time+1,c
  7387  001AEC  ECEA  F00D         	call	_RTC_getTime	;wreg free
  7388                           
  7389                           ;RTC.c: 39: long seconds = time[0] + 60*time[1] + 60*60*time[2] + 60*60*24*time[3];
  7390  001AF0  C082  F027         	movff	RTC_getSeconds@time+2,___wmul@multiplier
  7391  001AF4  6A28               	clrf	___wmul@multiplier+1,c
  7392  001AF6  0E0E               	movlw	14
  7393  001AF8  6E2A               	movwf	___wmul@multiplicand+1,c
  7394  001AFA  0E10               	movlw	16
  7395  001AFC  6E29               	movwf	___wmul@multiplicand,c
  7396  001AFE  ECC4  F00F         	call	___wmul	;wreg free
  7397  001B02  0100               	movlb	0	; () banked
  7398  001B04  5181               	movf	(RTC_getSeconds@time+1)& (0+255),w,b
  7399  001B06  0D3C               	mullw	60
  7400  001B08  5180               	movf	RTC_getSeconds@time& (0+255),w,b
  7401  001B0A  6E31               	movwf	??_RTC_getSeconds& (0+255),c
  7402  001B0C  6A32               	clrf	(??_RTC_getSeconds+1)& (0+255),c
  7403  001B0E  50F3               	movf	prodl,w,c
  7404  001B10  2631               	addwf	??_RTC_getSeconds,f,c
  7405  001B12  50F4               	movf	prodh,w,c
  7406  001B14  2232               	addwfc	??_RTC_getSeconds+1,f,c
  7407  001B16  5027               	movf	?___wmul,w,c
  7408  001B18  2631               	addwf	??_RTC_getSeconds,f,c
  7409  001B1A  5028               	movf	?___wmul+1,w,c
  7410  001B1C  2232               	addwfc	??_RTC_getSeconds+1,f,c
  7411  001B1E  C083  F027         	movff	RTC_getSeconds@time+3,___wmul@multiplier
  7412  001B22  6A28               	clrf	___wmul@multiplier+1,c
  7413  001B24  0E51               	movlw	81
  7414  001B26  6E2A               	movwf	___wmul@multiplicand+1,c
  7415  001B28  0E80               	movlw	128
  7416  001B2A  6E29               	movwf	___wmul@multiplicand,c
  7417  001B2C  ECC4  F00F         	call	___wmul	;wreg free
  7418  001B30  5027               	movf	?___wmul,w,c
  7419  001B32  2631               	addwf	??_RTC_getSeconds,f,c
  7420  001B34  5028               	movf	?___wmul+1,w,c
  7421  001B36  2232               	addwfc	??_RTC_getSeconds+1,f,c
  7422  001B38  C031  F087         	movff	??_RTC_getSeconds,RTC_getSeconds@seconds
  7423  001B3C  C032  F088         	movff	??_RTC_getSeconds+1,RTC_getSeconds@seconds+1
  7424  001B40  0100               	movlb	0	; () banked
  7425  001B42  0E00               	movlw	0
  7426  001B44  BF88               	btfsc	(RTC_getSeconds@seconds+1)& (0+255),7,b
  7427  001B46  0EFF               	movlw	-1
  7428  001B48  6F89               	movwf	(RTC_getSeconds@seconds+2)& (0+255),b
  7429  001B4A  6F8A               	movwf	(RTC_getSeconds@seconds+3)& (0+255),b
  7430                           
  7431                           ; BSR set to: 0
  7432                           ;RTC.c: 40: return seconds;
  7433  001B4C  C087  F02D         	movff	RTC_getSeconds@seconds,?_RTC_getSeconds
  7434  001B50  C088  F02E         	movff	RTC_getSeconds@seconds+1,?_RTC_getSeconds+1
  7435  001B54  C089  F02F         	movff	RTC_getSeconds@seconds+2,?_RTC_getSeconds+2
  7436  001B58  C08A  F030         	movff	RTC_getSeconds@seconds+3,?_RTC_getSeconds+3
  7437  001B5C  0012               	return	
  7438  001B5E                     __end_of_RTC_getSeconds:
  7439                           	opt stack 0
  7440                           tosu	equ	0xFFF
  7441                           tosh	equ	0xFFE
  7442                           tosl	equ	0xFFD
  7443                           pclath	equ	0xFFA
  7444                           tblptru	equ	0xFF8
  7445                           tblptrh	equ	0xFF7
  7446                           tblptrl	equ	0xFF6
  7447                           tablat	equ	0xFF5
  7448                           prodh	equ	0xFF4
  7449                           prodl	equ	0xFF3
  7450                           indf0	equ	0xFEF
  7451                           postinc0	equ	0xFEE
  7452                           fsr0h	equ	0xFEA
  7453                           fsr0l	equ	0xFE9
  7454                           wreg	equ	0xFE8
  7455                           postdec1	equ	0xFE5
  7456                           plusw1	equ	0xFE3
  7457                           fsr1l	equ	0xFE1
  7458                           indf2	equ	0xFDF
  7459                           postinc2	equ	0xFDE
  7460                           postdec2	equ	0xFDD
  7461                           plusw2	equ	0xFDB
  7462                           fsr2h	equ	0xFDA
  7463                           fsr2l	equ	0xFD9
  7464                           status	equ	0xFD8
  7465                           
  7466 ;; *************** function ___wmul *****************
  7467 ;; Defined at:
  7468 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  7469 ;; Parameters:    Size  Location     Type
  7470 ;;  multiplier      2   38[COMRAM] unsigned int 
  7471 ;;  multiplicand    2   40[COMRAM] unsigned int 
  7472 ;; Auto vars:     Size  Location     Type
  7473 ;;  product         2   42[COMRAM] unsigned int 
  7474 ;; Return value:  Size  Location     Type
  7475 ;;                  2   38[COMRAM] unsigned int 
  7476 ;; Registers used:
  7477 ;;		wreg, status,2, status,0, prodl, prodh
  7478 ;; Tracked objects:
  7479 ;;		On entry : 0/0
  7480 ;;		On exit  : 0/0
  7481 ;;		Unchanged: 0/0
  7482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7483 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7484 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7486 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7487 ;;Total ram usage:        6 bytes
  7488 ;; Hardware stack levels used:    1
  7489 ;; Hardware stack levels required when called:    4
  7490 ;; This function calls:
  7491 ;;		Nothing
  7492 ;; This function is called by:
  7493 ;;		_inputEntry
  7494 ;;		_RTC_getSeconds
  7495 ;; This function uses a non-reentrant model
  7496 ;;
  7497                           
  7498                           	psect	text20
  7499  001F88                     __ptext20:
  7500                           	opt stack 0
  7501  001F88                     ___wmul:
  7502                           	opt stack 24
  7503                           
  7504                           ; BSR set to: 0
  7505                           ;incstack = 0
  7506  001F88  5027               	movf	___wmul@multiplier,w,c
  7507  001F8A  0229               	mulwf	___wmul@multiplicand,c
  7508  001F8C  CFF3 F02B          	movff	prodl,___wmul@product
  7509  001F90  CFF4 F02C          	movff	prodh,___wmul@product+1
  7510  001F94  5027               	movf	___wmul@multiplier,w,c
  7511  001F96  022A               	mulwf	___wmul@multiplicand+1,c
  7512  001F98  50F3               	movf	prodl,w,c
  7513  001F9A  262C               	addwf	___wmul@product+1,f,c
  7514  001F9C  5028               	movf	___wmul@multiplier+1,w,c
  7515  001F9E  0229               	mulwf	___wmul@multiplicand,c
  7516  001FA0  50F3               	movf	prodl,w,c
  7517  001FA2  262C               	addwf	___wmul@product+1,f,c
  7518  001FA4  C02B  F027         	movff	___wmul@product,?___wmul
  7519  001FA8  C02C  F028         	movff	___wmul@product+1,?___wmul+1
  7520  001FAC  0012               	return	
  7521  001FAE                     __end_of___wmul:
  7522                           	opt stack 0
  7523                           tosu	equ	0xFFF
  7524                           tosh	equ	0xFFE
  7525                           tosl	equ	0xFFD
  7526                           pclath	equ	0xFFA
  7527                           tblptru	equ	0xFF8
  7528                           tblptrh	equ	0xFF7
  7529                           tblptrl	equ	0xFF6
  7530                           tablat	equ	0xFF5
  7531                           prodh	equ	0xFF4
  7532                           prodl	equ	0xFF3
  7533                           indf0	equ	0xFEF
  7534                           postinc0	equ	0xFEE
  7535                           fsr0h	equ	0xFEA
  7536                           fsr0l	equ	0xFE9
  7537                           wreg	equ	0xFE8
  7538                           postdec1	equ	0xFE5
  7539                           plusw1	equ	0xFE3
  7540                           fsr1l	equ	0xFE1
  7541                           indf2	equ	0xFDF
  7542                           postinc2	equ	0xFDE
  7543                           postdec2	equ	0xFDD
  7544                           plusw2	equ	0xFDB
  7545                           fsr2h	equ	0xFDA
  7546                           fsr2l	equ	0xFD9
  7547                           status	equ	0xFD8
  7548                           
  7549 ;; *************** function _RTC_getTime *****************
  7550 ;; Defined at:
  7551 ;;		line 12 in file "RTC.c"
  7552 ;; Parameters:    Size  Location     Type
  7553 ;;  time            2   41[COMRAM] PTR unsigned char 
  7554 ;;		 -> RTC_getSeconds@time(7), 
  7555 ;; Auto vars:     Size  Location     Type
  7556 ;;  i               1   43[COMRAM] unsigned char 
  7557 ;; Return value:  Size  Location     Type
  7558 ;;                  1    wreg      void 
  7559 ;; Registers used:
  7560 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7561 ;; Tracked objects:
  7562 ;;		On entry : 0/0
  7563 ;;		On exit  : 0/0
  7564 ;;		Unchanged: 0/0
  7565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7566 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7567 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7569 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7570 ;;Total ram usage:        3 bytes
  7571 ;; Hardware stack levels used:    1
  7572 ;; Hardware stack levels required when called:    6
  7573 ;; This function calls:
  7574 ;;		_I2C_Master_Read
  7575 ;;		_I2C_Master_Start
  7576 ;;		_I2C_Master_Stop
  7577 ;;		_I2C_Master_Write
  7578 ;; This function is called by:
  7579 ;;		_RTC_getSeconds
  7580 ;; This function uses a non-reentrant model
  7581 ;;
  7582                           
  7583                           	psect	text21
  7584  001BD4                     __ptext21:
  7585                           	opt stack 0
  7586  001BD4                     _RTC_getTime:
  7587                           	opt stack 22
  7588                           
  7589                           ;RTC.c: 14: I2C_Master_Start();
  7590                           
  7591                           ;incstack = 0
  7592  001BD4  EC1D  F010         	call	_I2C_Master_Start	;wreg free
  7593                           
  7594                           ;RTC.c: 15: I2C_Master_Write(0b11010000);
  7595  001BD8  0E00               	movlw	0
  7596  001BDA  6E29               	movwf	I2C_Master_Write@byteToWrite+1,c
  7597  001BDC  0ED0               	movlw	208
  7598  001BDE  6E28               	movwf	I2C_Master_Write@byteToWrite,c
  7599  001BE0  EC14  F010         	call	_I2C_Master_Write	;wreg free
  7600                           
  7601                           ;RTC.c: 16: I2C_Master_Write(0x00);
  7602  001BE4  0E00               	movlw	0
  7603  001BE6  6E29               	movwf	I2C_Master_Write@byteToWrite+1,c
  7604  001BE8  0E00               	movlw	0
  7605  001BEA  6E28               	movwf	I2C_Master_Write@byteToWrite,c
  7606  001BEC  EC14  F010         	call	_I2C_Master_Write	;wreg free
  7607                           
  7608                           ;RTC.c: 17: I2C_Master_Stop();
  7609  001BF0  EC19  F010         	call	_I2C_Master_Stop	;wreg free
  7610                           
  7611                           ;RTC.c: 20: char i;
  7612                           ;RTC.c: 22: I2C_Master_Start();
  7613  001BF4  EC1D  F010         	call	_I2C_Master_Start	;wreg free
  7614                           
  7615                           ;RTC.c: 23: I2C_Master_Write(0b11010001);
  7616  001BF8  0E00               	movlw	0
  7617  001BFA  6E29               	movwf	I2C_Master_Write@byteToWrite+1,c
  7618  001BFC  0ED1               	movlw	209
  7619  001BFE  6E28               	movwf	I2C_Master_Write@byteToWrite,c
  7620  001C00  EC14  F010         	call	_I2C_Master_Write	;wreg free
  7621                           
  7622                           ;RTC.c: 25: for (i = 0; i < 6; i++) {
  7623  001C04  0E00               	movlw	0
  7624  001C06  6E2C               	movwf	RTC_getTime@i,c
  7625  001C08                     l3860:
  7626  001C08  0E05               	movlw	5
  7627  001C0A  642C               	cpfsgt	RTC_getTime@i,c
  7628  001C0C  D001               	goto	l500
  7629  001C0E  D00E               	goto	u4480
  7630  001C10                     l500:
  7631                           
  7632                           ;RTC.c: 26: time[i] = I2C_Master_Read(0);
  7633  001C10  502C               	movf	RTC_getTime@i,w,c
  7634  001C12  0D01               	mullw	1
  7635  001C14  50F3               	movf	prodl,w,c
  7636  001C16  242A               	addwf	RTC_getTime@time,w,c
  7637  001C18  6ED9               	movwf	fsr2l,c
  7638  001C1A  50F4               	movf	prodh,w,c
  7639  001C1C  202B               	addwfc	RTC_getTime@time+1,w,c
  7640  001C1E  6EDA               	movwf	fsr2h,c
  7641  001C20  0E00               	movlw	0
  7642  001C22  ECD7  F00F         	call	_I2C_Master_Read
  7643  001C26  6EDF               	movwf	indf2,c
  7644  001C28  2A2C               	incf	RTC_getTime@i,f,c
  7645  001C2A  D7EE               	goto	l3860
  7646  001C2C                     u4480:
  7647                           
  7648                           ;RTC.c: 27: }
  7649                           ;RTC.c: 28: time[6] = I2C_Master_Read(1);
  7650  001C2C  EE20 F006          	lfsr	2,6
  7651  001C30  502A               	movf	RTC_getTime@time,w,c
  7652  001C32  26D9               	addwf	fsr2l,f,c
  7653  001C34  502B               	movf	RTC_getTime@time+1,w,c
  7654  001C36  22DA               	addwfc	fsr2h,f,c
  7655  001C38  0E01               	movlw	1
  7656  001C3A  ECD7  F00F         	call	_I2C_Master_Read
  7657  001C3E  6EDF               	movwf	indf2,c
  7658                           
  7659                           ;RTC.c: 29: I2C_Master_Stop();
  7660  001C40  EC19  F010         	call	_I2C_Master_Stop	;wreg free
  7661  001C44  0012               	return		;funcret
  7662  001C46                     __end_of_RTC_getTime:
  7663                           	opt stack 0
  7664                           tosu	equ	0xFFF
  7665                           tosh	equ	0xFFE
  7666                           tosl	equ	0xFFD
  7667                           pclath	equ	0xFFA
  7668                           tblptru	equ	0xFF8
  7669                           tblptrh	equ	0xFF7
  7670                           tblptrl	equ	0xFF6
  7671                           tablat	equ	0xFF5
  7672                           prodh	equ	0xFF4
  7673                           prodl	equ	0xFF3
  7674                           indf0	equ	0xFEF
  7675                           postinc0	equ	0xFEE
  7676                           fsr0h	equ	0xFEA
  7677                           fsr0l	equ	0xFE9
  7678                           wreg	equ	0xFE8
  7679                           postdec1	equ	0xFE5
  7680                           plusw1	equ	0xFE3
  7681                           fsr1l	equ	0xFE1
  7682                           indf2	equ	0xFDF
  7683                           postinc2	equ	0xFDE
  7684                           postdec2	equ	0xFDD
  7685                           plusw2	equ	0xFDB
  7686                           fsr2h	equ	0xFDA
  7687                           fsr2l	equ	0xFD9
  7688                           status	equ	0xFD8
  7689                           
  7690 ;; *************** function _I2C_Master_Write *****************
  7691 ;; Defined at:
  7692 ;;		line 108 in file "I2C.c"
  7693 ;; Parameters:    Size  Location     Type
  7694 ;;  byteToWrite     2   39[COMRAM] unsigned int 
  7695 ;; Auto vars:     Size  Location     Type
  7696 ;;		None
  7697 ;; Return value:  Size  Location     Type
  7698 ;;                  1    wreg      void 
  7699 ;; Registers used:
  7700 ;;		wreg, status,2, status,0, cstack
  7701 ;; Tracked objects:
  7702 ;;		On entry : 0/0
  7703 ;;		On exit  : 0/0
  7704 ;;		Unchanged: 0/0
  7705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7706 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7709 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7710 ;;Total ram usage:        2 bytes
  7711 ;; Hardware stack levels used:    1
  7712 ;; Hardware stack levels required when called:    5
  7713 ;; This function calls:
  7714 ;;		_I2C_Master_Wait
  7715 ;; This function is called by:
  7716 ;;		_I2C_Send
  7717 ;;		_RTC_getTime
  7718 ;; This function uses a non-reentrant model
  7719 ;;
  7720                           
  7721                           	psect	text22
  7722  002028                     __ptext22:
  7723                           	opt stack 0
  7724  002028                     _I2C_Master_Write:
  7725                           	opt stack 22
  7726                           
  7727                           ;I2C.c: 116: I2C_Master_Wait();
  7728                           
  7729                           ;incstack = 0
  7730  002028  EC0B  F010         	call	_I2C_Master_Wait	;wreg free
  7731                           
  7732                           ;I2C.c: 117: SSPBUF = byteToWrite;
  7733  00202C  C028  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  7734  002030  0012               	return		;funcret
  7735  002032                     __end_of_I2C_Master_Write:
  7736                           	opt stack 0
  7737                           tosu	equ	0xFFF
  7738                           tosh	equ	0xFFE
  7739                           tosl	equ	0xFFD
  7740                           pclath	equ	0xFFA
  7741                           tblptru	equ	0xFF8
  7742                           tblptrh	equ	0xFF7
  7743                           tblptrl	equ	0xFF6
  7744                           tablat	equ	0xFF5
  7745                           prodh	equ	0xFF4
  7746                           prodl	equ	0xFF3
  7747                           indf0	equ	0xFEF
  7748                           postinc0	equ	0xFEE
  7749                           fsr0h	equ	0xFEA
  7750                           fsr0l	equ	0xFE9
  7751                           wreg	equ	0xFE8
  7752                           postdec1	equ	0xFE5
  7753                           plusw1	equ	0xFE3
  7754                           fsr1l	equ	0xFE1
  7755                           indf2	equ	0xFDF
  7756                           postinc2	equ	0xFDE
  7757                           postdec2	equ	0xFDD
  7758                           plusw2	equ	0xFDB
  7759                           fsr2h	equ	0xFDA
  7760                           fsr2l	equ	0xFD9
  7761                           status	equ	0xFD8
  7762                           
  7763 ;; *************** function _I2C_Master_Stop *****************
  7764 ;; Defined at:
  7765 ;;		line 95 in file "I2C.c"
  7766 ;; Parameters:    Size  Location     Type
  7767 ;;		None
  7768 ;; Auto vars:     Size  Location     Type
  7769 ;;		None
  7770 ;; Return value:  Size  Location     Type
  7771 ;;                  1    wreg      void 
  7772 ;; Registers used:
  7773 ;;		wreg, status,2, status,0, cstack
  7774 ;; Tracked objects:
  7775 ;;		On entry : 0/0
  7776 ;;		On exit  : 0/0
  7777 ;;		Unchanged: 0/0
  7778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7782 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7783 ;;Total ram usage:        0 bytes
  7784 ;; Hardware stack levels used:    1
  7785 ;; Hardware stack levels required when called:    5
  7786 ;; This function calls:
  7787 ;;		_I2C_Master_Wait
  7788 ;; This function is called by:
  7789 ;;		_I2C_Send
  7790 ;;		_RTC_getTime
  7791 ;; This function uses a non-reentrant model
  7792 ;;
  7793                           
  7794                           	psect	text23
  7795  002032                     __ptext23:
  7796                           	opt stack 0
  7797  002032                     _I2C_Master_Stop:
  7798                           	opt stack 22
  7799                           
  7800                           ;I2C.c: 104: I2C_Master_Wait();
  7801                           
  7802                           ;incstack = 0
  7803  002032  EC0B  F010         	call	_I2C_Master_Wait	;wreg free
  7804                           
  7805                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  7806  002036  84C5               	bsf	4037,2,c	;volatile
  7807  002038  0012               	return		;funcret
  7808  00203A                     __end_of_I2C_Master_Stop:
  7809                           	opt stack 0
  7810                           tosu	equ	0xFFF
  7811                           tosh	equ	0xFFE
  7812                           tosl	equ	0xFFD
  7813                           pclath	equ	0xFFA
  7814                           tblptru	equ	0xFF8
  7815                           tblptrh	equ	0xFF7
  7816                           tblptrl	equ	0xFF6
  7817                           tablat	equ	0xFF5
  7818                           prodh	equ	0xFF4
  7819                           prodl	equ	0xFF3
  7820                           indf0	equ	0xFEF
  7821                           postinc0	equ	0xFEE
  7822                           fsr0h	equ	0xFEA
  7823                           fsr0l	equ	0xFE9
  7824                           wreg	equ	0xFE8
  7825                           postdec1	equ	0xFE5
  7826                           plusw1	equ	0xFE3
  7827                           fsr1l	equ	0xFE1
  7828                           indf2	equ	0xFDF
  7829                           postinc2	equ	0xFDE
  7830                           postdec2	equ	0xFDD
  7831                           plusw2	equ	0xFDB
  7832                           fsr2h	equ	0xFDA
  7833                           fsr2l	equ	0xFD9
  7834                           status	equ	0xFD8
  7835                           
  7836 ;; *************** function _I2C_Master_Start *****************
  7837 ;; Defined at:
  7838 ;;		line 69 in file "I2C.c"
  7839 ;; Parameters:    Size  Location     Type
  7840 ;;		None
  7841 ;; Auto vars:     Size  Location     Type
  7842 ;;		None
  7843 ;; Return value:  Size  Location     Type
  7844 ;;                  1    wreg      void 
  7845 ;; Registers used:
  7846 ;;		wreg, status,2, status,0, cstack
  7847 ;; Tracked objects:
  7848 ;;		On entry : 0/0
  7849 ;;		On exit  : 0/0
  7850 ;;		Unchanged: 0/0
  7851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7855 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7856 ;;Total ram usage:        0 bytes
  7857 ;; Hardware stack levels used:    1
  7858 ;; Hardware stack levels required when called:    5
  7859 ;; This function calls:
  7860 ;;		_I2C_Master_Wait
  7861 ;; This function is called by:
  7862 ;;		_I2C_Send
  7863 ;;		_RTC_getTime
  7864 ;; This function uses a non-reentrant model
  7865 ;;
  7866                           
  7867                           	psect	text24
  7868  00203A                     __ptext24:
  7869                           	opt stack 0
  7870  00203A                     _I2C_Master_Start:
  7871                           	opt stack 22
  7872                           
  7873                           ;I2C.c: 78: I2C_Master_Wait();
  7874                           
  7875                           ;incstack = 0
  7876  00203A  EC0B  F010         	call	_I2C_Master_Wait	;wreg free
  7877                           
  7878                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  7879  00203E  80C5               	bsf	4037,0,c	;volatile
  7880  002040  0012               	return		;funcret
  7881  002042                     __end_of_I2C_Master_Start:
  7882                           	opt stack 0
  7883                           tosu	equ	0xFFF
  7884                           tosh	equ	0xFFE
  7885                           tosl	equ	0xFFD
  7886                           pclath	equ	0xFFA
  7887                           tblptru	equ	0xFF8
  7888                           tblptrh	equ	0xFF7
  7889                           tblptrl	equ	0xFF6
  7890                           tablat	equ	0xFF5
  7891                           prodh	equ	0xFF4
  7892                           prodl	equ	0xFF3
  7893                           indf0	equ	0xFEF
  7894                           postinc0	equ	0xFEE
  7895                           fsr0h	equ	0xFEA
  7896                           fsr0l	equ	0xFE9
  7897                           wreg	equ	0xFE8
  7898                           postdec1	equ	0xFE5
  7899                           plusw1	equ	0xFE3
  7900                           fsr1l	equ	0xFE1
  7901                           indf2	equ	0xFDF
  7902                           postinc2	equ	0xFDE
  7903                           postdec2	equ	0xFDD
  7904                           plusw2	equ	0xFDB
  7905                           fsr2h	equ	0xFDA
  7906                           fsr2l	equ	0xFD9
  7907                           status	equ	0xFD8
  7908                           
  7909 ;; *************** function _I2C_Master_Read *****************
  7910 ;; Defined at:
  7911 ;;		line 120 in file "I2C.c"
  7912 ;; Parameters:    Size  Location     Type
  7913 ;;  ackBit          1    wreg     unsigned char 
  7914 ;; Auto vars:     Size  Location     Type
  7915 ;;  ackBit          1   39[COMRAM] unsigned char 
  7916 ;;  receivedByte    1   40[COMRAM] unsigned char 
  7917 ;; Return value:  Size  Location     Type
  7918 ;;                  1    wreg      unsigned char 
  7919 ;; Registers used:
  7920 ;;		wreg, status,2, status,0, cstack
  7921 ;; Tracked objects:
  7922 ;;		On entry : 0/0
  7923 ;;		On exit  : 0/0
  7924 ;;		Unchanged: 0/0
  7925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7927 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7929 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7930 ;;Total ram usage:        2 bytes
  7931 ;; Hardware stack levels used:    1
  7932 ;; Hardware stack levels required when called:    5
  7933 ;; This function calls:
  7934 ;;		_I2C_Master_Wait
  7935 ;; This function is called by:
  7936 ;;		_RTC_getTime
  7937 ;; This function uses a non-reentrant model
  7938 ;;
  7939                           
  7940                           	psect	text25
  7941  001FAE                     __ptext25:
  7942                           	opt stack 0
  7943  001FAE                     _I2C_Master_Read:
  7944                           	opt stack 22
  7945                           
  7946                           ;incstack = 0
  7947                           ;I2C_Master_Read@ackBit stored from wreg
  7948  001FAE  6E28               	movwf	I2C_Master_Read@ackBit,c
  7949                           
  7950                           ;I2C.c: 130: unsigned char receivedByte;
  7951                           ;I2C.c: 132: I2C_Master_Wait();
  7952  001FB0  EC0B  F010         	call	_I2C_Master_Wait	;wreg free
  7953                           
  7954                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
  7955  001FB4  86C5               	bsf	4037,3,c	;volatile
  7956                           
  7957                           ;I2C.c: 135: I2C_Master_Wait();
  7958  001FB6  EC0B  F010         	call	_I2C_Master_Wait	;wreg free
  7959                           
  7960                           ;I2C.c: 136: receivedByte = SSPBUF;
  7961  001FBA  CFC9 F029          	movff	4041,I2C_Master_Read@receivedByte	;volatile
  7962                           
  7963                           ;I2C.c: 138: I2C_Master_Wait();
  7964  001FBE  EC0B  F010         	call	_I2C_Master_Wait	;wreg free
  7965                           
  7966                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
  7967  001FC2  B028               	btfsc	I2C_Master_Read@ackBit,0,c
  7968  001FC4  D002               	bra	u3875
  7969  001FC6  9AC5               	bcf	4037,5,c	;volatile
  7970  001FC8  D001               	bra	u3876
  7971  001FCA                     u3875:
  7972  001FCA  8AC5               	bsf	4037,5,c	;volatile
  7973  001FCC                     u3876:
  7974                           
  7975                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
  7976  001FCC  88C5               	bsf	4037,4,c	;volatile
  7977                           
  7978                           ;I2C.c: 142: return receivedByte;
  7979  001FCE  5029               	movf	I2C_Master_Read@receivedByte,w,c
  7980  001FD0  0012               	return	
  7981  001FD2                     __end_of_I2C_Master_Read:
  7982                           	opt stack 0
  7983                           tosu	equ	0xFFF
  7984                           tosh	equ	0xFFE
  7985                           tosl	equ	0xFFD
  7986                           pclath	equ	0xFFA
  7987                           tblptru	equ	0xFF8
  7988                           tblptrh	equ	0xFF7
  7989                           tblptrl	equ	0xFF6
  7990                           tablat	equ	0xFF5
  7991                           prodh	equ	0xFF4
  7992                           prodl	equ	0xFF3
  7993                           indf0	equ	0xFEF
  7994                           postinc0	equ	0xFEE
  7995                           fsr0h	equ	0xFEA
  7996                           fsr0l	equ	0xFE9
  7997                           wreg	equ	0xFE8
  7998                           postdec1	equ	0xFE5
  7999                           plusw1	equ	0xFE3
  8000                           fsr1l	equ	0xFE1
  8001                           indf2	equ	0xFDF
  8002                           postinc2	equ	0xFDE
  8003                           postdec2	equ	0xFDD
  8004                           plusw2	equ	0xFDB
  8005                           fsr2h	equ	0xFDA
  8006                           fsr2l	equ	0xFD9
  8007                           status	equ	0xFD8
  8008                           
  8009 ;; *************** function _I2C_Master_Wait *****************
  8010 ;; Defined at:
  8011 ;;		line 51 in file "I2C.c"
  8012 ;; Parameters:    Size  Location     Type
  8013 ;;		None
  8014 ;; Auto vars:     Size  Location     Type
  8015 ;;		None
  8016 ;; Return value:  Size  Location     Type
  8017 ;;                  1    wreg      void 
  8018 ;; Registers used:
  8019 ;;		wreg, status,2, status,0
  8020 ;; Tracked objects:
  8021 ;;		On entry : 0/0
  8022 ;;		On exit  : 0/0
  8023 ;;		Unchanged: 0/0
  8024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8027 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8028 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8029 ;;Total ram usage:        1 bytes
  8030 ;; Hardware stack levels used:    1
  8031 ;; Hardware stack levels required when called:    4
  8032 ;; This function calls:
  8033 ;;		Nothing
  8034 ;; This function is called by:
  8035 ;;		_I2C_Master_Start
  8036 ;;		_I2C_Master_Stop
  8037 ;;		_I2C_Master_Write
  8038 ;;		_I2C_Master_Read
  8039 ;;		_I2C_Master_RepeatedStart
  8040 ;; This function uses a non-reentrant model
  8041 ;;
  8042                           
  8043                           	psect	text26
  8044  002016                     __ptext26:
  8045                           	opt stack 0
  8046  002016                     _I2C_Master_Wait:
  8047                           	opt stack 22
  8048                           
  8049                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  8050                           
  8051                           ;incstack = 0
  8052  002016  B4C7               	btfsc	4039,2,c	;volatile
  8053  002018  D7FE               	goto	_I2C_Master_Wait
  8054  00201A  CFC5 F027          	movff	4037,??_I2C_Master_Wait	;volatile
  8055  00201E  0E1F               	movlw	31
  8056  002020  1627               	andwf	??_I2C_Master_Wait,f,c
  8057  002022  B4D8               	btfsc	status,2,c
  8058  002024  0012               	return	
  8059  002026  D7F7               	goto	_I2C_Master_Wait
  8060  002028                     __end_of_I2C_Master_Wait:
  8061                           	opt stack 0
  8062                           tosu	equ	0xFFF
  8063                           tosh	equ	0xFFE
  8064                           tosl	equ	0xFFD
  8065                           pclath	equ	0xFFA
  8066                           tblptru	equ	0xFF8
  8067                           tblptrh	equ	0xFF7
  8068                           tblptrl	equ	0xFF6
  8069                           tablat	equ	0xFF5
  8070                           prodh	equ	0xFF4
  8071                           prodl	equ	0xFF3
  8072                           indf0	equ	0xFEF
  8073                           postinc0	equ	0xFEE
  8074                           fsr0h	equ	0xFEA
  8075                           fsr0l	equ	0xFE9
  8076                           wreg	equ	0xFE8
  8077                           postdec1	equ	0xFE5
  8078                           plusw1	equ	0xFE3
  8079                           fsr1l	equ	0xFE1
  8080                           indf2	equ	0xFDF
  8081                           postinc2	equ	0xFDE
  8082                           postdec2	equ	0xFDD
  8083                           plusw2	equ	0xFDB
  8084                           fsr2h	equ	0xFDA
  8085                           fsr2l	equ	0xFD9
  8086                           status	equ	0xFD8
  8087                           
  8088 ;; *************** function _initLCD *****************
  8089 ;; Defined at:
  8090 ;;		line 61 in file "lcd.c"
  8091 ;; Parameters:    Size  Location     Type
  8092 ;;		None
  8093 ;; Auto vars:     Size  Location     Type
  8094 ;;		None
  8095 ;; Return value:  Size  Location     Type
  8096 ;;                  1    wreg      void 
  8097 ;; Registers used:
  8098 ;;		wreg, status,2, status,0, cstack
  8099 ;; Tracked objects:
  8100 ;;		On entry : 0/0
  8101 ;;		On exit  : 0/0
  8102 ;;		Unchanged: 0/0
  8103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8106 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8107 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8108 ;;Total ram usage:        1 bytes
  8109 ;; Hardware stack levels used:    1
  8110 ;; Hardware stack levels required when called:    6
  8111 ;; This function calls:
  8112 ;;		_lcdInst
  8113 ;; This function is called by:
  8114 ;;		_main
  8115 ;; This function uses a non-reentrant model
  8116 ;;
  8117                           
  8118                           	psect	text27
  8119  001D66                     __ptext27:
  8120                           	opt stack 0
  8121  001D66                     _initLCD:
  8122                           	opt stack 24
  8123                           
  8124                           ;lcd.c: 69: _delay((unsigned long)((15)*(40000000/4000.0)));
  8125                           
  8126                           ;incstack = 0
  8127  001D66  0EC3               	movlw	195
  8128  001D68  6E2A               	movwf	??_initLCD& (0+255),c
  8129  001D6A  0ECD               	movlw	205
  8130  001D6C                     u5607:
  8131  001D6C  2EE8               	decfsz	wreg,f,c
  8132  001D6E  D7FE               	bra	u5607
  8133  001D70  2E2A               	decfsz	??_initLCD& (0+255),f,c
  8134  001D72  D7FC               	bra	u5607
  8135  001D74  F000               	nop	
  8136                           
  8137                           ;lcd.c: 70: lcdInst(0b00110011);
  8138  001D76  0E33               	movlw	51
  8139  001D78  EC01  F010         	call	_lcdInst
  8140                           
  8141                           ;lcd.c: 71: lcdInst(0b00110010);
  8142  001D7C  0E32               	movlw	50
  8143  001D7E  EC01  F010         	call	_lcdInst
  8144                           
  8145                           ;lcd.c: 72: lcdInst(0b00101000);
  8146  001D82  0E28               	movlw	40
  8147  001D84  EC01  F010         	call	_lcdInst
  8148                           
  8149                           ;lcd.c: 73: lcdInst(0b00001111);
  8150  001D88  0E0F               	movlw	15
  8151  001D8A  EC01  F010         	call	_lcdInst
  8152                           
  8153                           ;lcd.c: 74: lcdInst(0b00000110);
  8154  001D8E  0E06               	movlw	6
  8155  001D90  EC01  F010         	call	_lcdInst
  8156                           
  8157                           ;lcd.c: 75: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  8158  001D94  0E01               	movlw	1
  8159  001D96  EC01  F010         	call	_lcdInst
  8160  001D9A  0EC3               	movlw	195
  8161  001D9C  6E2A               	movwf	??_initLCD& (0+255),c
  8162  001D9E  0ECD               	movlw	205
  8163  001DA0                     u5617:
  8164  001DA0  2EE8               	decfsz	wreg,f,c
  8165  001DA2  D7FE               	bra	u5617
  8166  001DA4  2E2A               	decfsz	??_initLCD& (0+255),f,c
  8167  001DA6  D7FC               	bra	u5617
  8168  001DA8  F000               	nop	
  8169                           
  8170                           ;lcd.c: 78: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  8171  001DAA  0E0F               	movlw	15
  8172  001DAC  EC01  F010         	call	_lcdInst
  8173  001DB0  0012               	return		;funcret
  8174  001DB2                     __end_of_initLCD:
  8175                           	opt stack 0
  8176                           tosu	equ	0xFFF
  8177                           tosh	equ	0xFFE
  8178                           tosl	equ	0xFFD
  8179                           pclath	equ	0xFFA
  8180                           tblptru	equ	0xFF8
  8181                           tblptrh	equ	0xFF7
  8182                           tblptrl	equ	0xFF6
  8183                           tablat	equ	0xFF5
  8184                           prodh	equ	0xFF4
  8185                           prodl	equ	0xFF3
  8186                           indf0	equ	0xFEF
  8187                           postinc0	equ	0xFEE
  8188                           fsr0h	equ	0xFEA
  8189                           fsr0l	equ	0xFE9
  8190                           wreg	equ	0xFE8
  8191                           postdec1	equ	0xFE5
  8192                           plusw1	equ	0xFE3
  8193                           fsr1l	equ	0xFE1
  8194                           indf2	equ	0xFDF
  8195                           postinc2	equ	0xFDE
  8196                           postdec2	equ	0xFDD
  8197                           plusw2	equ	0xFDB
  8198                           fsr2h	equ	0xFDA
  8199                           fsr2l	equ	0xFD9
  8200                           status	equ	0xFD8
  8201                           
  8202 ;; *************** function _lcdInst *****************
  8203 ;; Defined at:
  8204 ;;		line 12 in file "lcd.c"
  8205 ;; Parameters:    Size  Location     Type
  8206 ;;  data            1    wreg     unsigned char 
  8207 ;; Auto vars:     Size  Location     Type
  8208 ;;  data            1   40[COMRAM] unsigned char 
  8209 ;; Return value:  Size  Location     Type
  8210 ;;                  1    wreg      void 
  8211 ;; Registers used:
  8212 ;;		wreg, status,2, status,0, cstack
  8213 ;; Tracked objects:
  8214 ;;		On entry : 0/0
  8215 ;;		On exit  : 0/0
  8216 ;;		Unchanged: 0/0
  8217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8219 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8221 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8222 ;;Total ram usage:        1 bytes
  8223 ;; Hardware stack levels used:    1
  8224 ;; Hardware stack levels required when called:    5
  8225 ;; This function calls:
  8226 ;;		_lcdNibble
  8227 ;; This function is called by:
  8228 ;;		_main
  8229 ;;		_initLCD
  8230 ;;		_lcd_set_cursor
  8231 ;;		_lcd_shift_cursor
  8232 ;;		_inputEntry
  8233 ;;		_mainMenu
  8234 ;;		_printStringLCD
  8235 ;;		_packageCompartment
  8236 ;;		_lcd_shift_display
  8237 ;; This function uses a non-reentrant model
  8238 ;;
  8239                           
  8240                           	psect	text28
  8241  002002                     __ptext28:
  8242                           	opt stack 0
  8243  002002                     _lcdInst:
  8244                           	opt stack 22
  8245                           
  8246                           ;incstack = 0
  8247                           ;lcdInst@data stored from wreg
  8248  002002  6E29               	movwf	lcdInst@data,c
  8249                           
  8250                           ;lcd.c: 20: LATDbits.LATD2 = 0;
  8251  002004  948C               	bcf	3980,2,c	;volatile
  8252                           
  8253                           ;lcd.c: 21: lcdNibble(data);
  8254  002006  5029               	movf	lcdInst@data,w,c
  8255  002008  EC33  F00D         	call	_lcdNibble
  8256                           
  8257                           ;lcd.c: 22: _delay((unsigned long)((100)*(40000000/4000000.0)));
  8258  00200C  0EC8               	movlw	200
  8259  00200E                     u5627:
  8260  00200E  D000               	nop2	
  8261  002010  2EE8               	decfsz	wreg,f,c
  8262  002012  D7FD               	bra	u5627
  8263  002014  0012               	return		;funcret
  8264  002016                     __end_of_lcdInst:
  8265                           	opt stack 0
  8266                           tosu	equ	0xFFF
  8267                           tosh	equ	0xFFE
  8268                           tosl	equ	0xFFD
  8269                           pclath	equ	0xFFA
  8270                           tblptru	equ	0xFF8
  8271                           tblptrh	equ	0xFF7
  8272                           tblptrl	equ	0xFF6
  8273                           tablat	equ	0xFF5
  8274                           prodh	equ	0xFF4
  8275                           prodl	equ	0xFF3
  8276                           indf0	equ	0xFEF
  8277                           postinc0	equ	0xFEE
  8278                           fsr0h	equ	0xFEA
  8279                           fsr0l	equ	0xFE9
  8280                           wreg	equ	0xFE8
  8281                           postdec1	equ	0xFE5
  8282                           plusw1	equ	0xFE3
  8283                           fsr1l	equ	0xFE1
  8284                           indf2	equ	0xFDF
  8285                           postinc2	equ	0xFDE
  8286                           postdec2	equ	0xFDD
  8287                           plusw2	equ	0xFDB
  8288                           fsr2h	equ	0xFDA
  8289                           fsr2l	equ	0xFD9
  8290                           status	equ	0xFD8
  8291                           
  8292 ;; *************** function _lcdNibble *****************
  8293 ;; Defined at:
  8294 ;;		line 38 in file "lcd.c"
  8295 ;; Parameters:    Size  Location     Type
  8296 ;;  data            1    wreg     unsigned char 
  8297 ;; Auto vars:     Size  Location     Type
  8298 ;;  data            1   39[COMRAM] unsigned char 
  8299 ;;  temp            1   38[COMRAM] unsigned char 
  8300 ;; Return value:  Size  Location     Type
  8301 ;;                  1    wreg      void 
  8302 ;; Registers used:
  8303 ;;		wreg, status,2, status,0
  8304 ;; Tracked objects:
  8305 ;;		On entry : 0/0
  8306 ;;		On exit  : 0/0
  8307 ;;		Unchanged: 0/0
  8308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8310 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8312 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8313 ;;Total ram usage:        2 bytes
  8314 ;; Hardware stack levels used:    1
  8315 ;; Hardware stack levels required when called:    4
  8316 ;; This function calls:
  8317 ;;		Nothing
  8318 ;; This function is called by:
  8319 ;;		_lcdInst
  8320 ;;		_putch
  8321 ;; This function uses a non-reentrant model
  8322 ;;
  8323                           
  8324                           	psect	text29
  8325  001A66                     __ptext29:
  8326                           	opt stack 0
  8327  001A66                     _lcdNibble:
  8328                           	opt stack 22
  8329                           
  8330                           ;incstack = 0
  8331                           ;lcdNibble@data stored from wreg
  8332  001A66  6E28               	movwf	lcdNibble@data,c
  8333                           
  8334                           ;lcd.c: 46: char temp = (unsigned char) (data & 0xF0);
  8335  001A68  5028               	movf	lcdNibble@data,w,c
  8336  001A6A  0BF0               	andlw	240
  8337  001A6C  6E27               	movwf	lcdNibble@temp,c
  8338                           
  8339                           ;lcd.c: 47: LATD = (unsigned char) (LATD & 0x0F);
  8340  001A6E  508C               	movf	3980,w,c	;volatile
  8341  001A70  0B0F               	andlw	15
  8342  001A72  6E8C               	movwf	3980,c	;volatile
  8343                           
  8344                           ;lcd.c: 48: LATD = (unsigned char) (temp | LATD);
  8345  001A74  5027               	movf	lcdNibble@temp,w,c
  8346  001A76  108C               	iorwf	3980,w,c	;volatile
  8347  001A78  6E8C               	movwf	3980,c	;volatile
  8348                           
  8349                           ;lcd.c: 50: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  8350  001A7A  0E00               	movlw	0
  8351  001A7C  BEF2               	btfsc	intcon,7,c	;volatile
  8352  001A7E  0E01               	movlw	1
  8353  001A80  6E58               	movwf	_LCDinterruptState,c
  8354  001A82  9EF2               	bcf	intcon,7,c	;volatile
  8355  001A84  868C               	bsf	3980,3,c	;volatile
  8356  001A86  0E53               	movlw	83
  8357  001A88                     u5637:
  8358  001A88  2EE8               	decfsz	wreg,f,c
  8359  001A8A  D7FE               	bra	u5637
  8360  001A8C  F000               	nop	
  8361  001A8E  968C               	bcf	3980,3,c	;volatile
  8362  001A90  0EC8               	movlw	200
  8363  001A92                     u5647:
  8364  001A92  D000               	nop2	
  8365  001A94  2EE8               	decfsz	wreg,f,c
  8366  001A96  D7FD               	bra	u5647
  8367  001A98  B058               	btfsc	_LCDinterruptState,0,c
  8368  001A9A  D002               	bra	u3775
  8369  001A9C  9EF2               	bcf	intcon,7,c	;volatile
  8370  001A9E  D001               	bra	u3776
  8371  001AA0                     u3775:
  8372  001AA0  8EF2               	bsf	intcon,7,c	;volatile
  8373  001AA2                     u3776:
  8374                           
  8375                           ;lcd.c: 53: data = (unsigned char) (data << 4);
  8376  001AA2  3828               	swapf	lcdNibble@data,w,c
  8377  001AA4  0BF0               	andlw	240
  8378  001AA6  6E28               	movwf	lcdNibble@data,c
  8379                           
  8380                           ;lcd.c: 54: temp = (unsigned char) (data & 0xF0);
  8381  001AA8  5028               	movf	lcdNibble@data,w,c
  8382  001AAA  0BF0               	andlw	240
  8383  001AAC  6E27               	movwf	lcdNibble@temp,c
  8384                           
  8385                           ;lcd.c: 55: LATD = (unsigned char) (LATD & 0x0F);
  8386  001AAE  508C               	movf	3980,w,c	;volatile
  8387  001AB0  0B0F               	andlw	15
  8388  001AB2  6E8C               	movwf	3980,c	;volatile
  8389                           
  8390                           ;lcd.c: 56: LATD = (unsigned char) (temp | LATD);
  8391  001AB4  5027               	movf	lcdNibble@temp,w,c
  8392  001AB6  108C               	iorwf	3980,w,c	;volatile
  8393  001AB8  6E8C               	movwf	3980,c	;volatile
  8394                           
  8395                           ;lcd.c: 58: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  8396  001ABA  0E00               	movlw	0
  8397  001ABC  BEF2               	btfsc	intcon,7,c	;volatile
  8398  001ABE  0E01               	movlw	1
  8399  001AC0  6E58               	movwf	_LCDinterruptState,c
  8400  001AC2  9EF2               	bcf	intcon,7,c	;volatile
  8401  001AC4  868C               	bsf	3980,3,c	;volatile
  8402  001AC6  0E53               	movlw	83
  8403  001AC8                     u5657:
  8404  001AC8  2EE8               	decfsz	wreg,f,c
  8405  001ACA  D7FE               	bra	u5657
  8406  001ACC  F000               	nop	
  8407  001ACE  968C               	bcf	3980,3,c	;volatile
  8408  001AD0  0EC8               	movlw	200
  8409  001AD2                     u5667:
  8410  001AD2  D000               	nop2	
  8411  001AD4  2EE8               	decfsz	wreg,f,c
  8412  001AD6  D7FD               	bra	u5667
  8413  001AD8  B058               	btfsc	_LCDinterruptState,0,c
  8414  001ADA  D002               	bra	u3785
  8415  001ADC  9EF2               	bcf	intcon,7,c	;volatile
  8416  001ADE  D001               	bra	u3786
  8417  001AE0                     u3785:
  8418  001AE0  8EF2               	bsf	intcon,7,c	;volatile
  8419  001AE2                     u3786:
  8420  001AE2  0012               	return		;funcret
  8421  001AE4                     __end_of_lcdNibble:
  8422                           	opt stack 0
  8423                           tosu	equ	0xFFF
  8424                           tosh	equ	0xFFE
  8425                           tosl	equ	0xFFD
  8426                           pclath	equ	0xFFA
  8427                           tblptru	equ	0xFF8
  8428                           tblptrh	equ	0xFF7
  8429                           tblptrl	equ	0xFF6
  8430                           tablat	equ	0xFF5
  8431                           prodh	equ	0xFF4
  8432                           prodl	equ	0xFF3
  8433                           intcon	equ	0xFF2
  8434                           indf0	equ	0xFEF
  8435                           postinc0	equ	0xFEE
  8436                           fsr0h	equ	0xFEA
  8437                           fsr0l	equ	0xFE9
  8438                           wreg	equ	0xFE8
  8439                           postdec1	equ	0xFE5
  8440                           plusw1	equ	0xFE3
  8441                           fsr1l	equ	0xFE1
  8442                           indf2	equ	0xFDF
  8443                           postinc2	equ	0xFDE
  8444                           postdec2	equ	0xFDD
  8445                           plusw2	equ	0xFDB
  8446                           fsr2h	equ	0xFDA
  8447                           fsr2l	equ	0xFD9
  8448                           status	equ	0xFD8
  8449                           
  8450 ;; *************** function _I2C_Master_Init *****************
  8451 ;; Defined at:
  8452 ;;		line 14 in file "I2C.c"
  8453 ;; Parameters:    Size  Location     Type
  8454 ;;  clockFreq       4   46[COMRAM] const unsigned long 
  8455 ;; Auto vars:     Size  Location     Type
  8456 ;;		None
  8457 ;; Return value:  Size  Location     Type
  8458 ;;                  1    wreg      void 
  8459 ;; Registers used:
  8460 ;;		wreg, status,2, status,0, cstack
  8461 ;; Tracked objects:
  8462 ;;		On entry : 0/0
  8463 ;;		On exit  : 0/0
  8464 ;;		Unchanged: 0/0
  8465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8466 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8468 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8469 ;;      Totals:         4       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8470 ;;Total ram usage:        8 bytes
  8471 ;; Hardware stack levels used:    1
  8472 ;; Hardware stack levels required when called:    5
  8473 ;; This function calls:
  8474 ;;		___lldiv
  8475 ;; This function is called by:
  8476 ;;		_main
  8477 ;; This function uses a non-reentrant model
  8478 ;;
  8479                           
  8480                           	psect	text30
  8481  001CAE                     __ptext30:
  8482                           	opt stack 0
  8483  001CAE                     _I2C_Master_Init:
  8484                           	opt stack 25
  8485                           
  8486                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  8487                           
  8488                           ;incstack = 0
  8489  001CAE  9AC6               	bcf	4038,5,c	;volatile
  8490                           
  8491                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  8492  001CB0  8694               	bsf	3988,3,c	;volatile
  8493                           
  8494                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  8495  001CB2  8894               	bsf	3988,4,c	;volatile
  8496                           
  8497                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  8498  001CB4  0E80               	movlw	128
  8499  001CB6  6EC7               	movwf	4039,c	;volatile
  8500                           
  8501                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  8502  001CB8  0E28               	movlw	40
  8503  001CBA  6EC6               	movwf	4038,c	;volatile
  8504                           
  8505                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  8506  001CBC  0E00               	movlw	0
  8507  001CBE  6EC5               	movwf	4037,c	;volatile
  8508                           
  8509                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
  8510  001CC0  0E00               	movlw	0
  8511  001CC2  6E27               	movwf	___lldiv@dividend,c
  8512  001CC4  0E5A               	movlw	90
  8513  001CC6  6E28               	movwf	___lldiv@dividend+1,c
  8514  001CC8  0E62               	movlw	98
  8515  001CCA  6E29               	movwf	___lldiv@dividend+2,c
  8516  001CCC  0E02               	movlw	2
  8517  001CCE  6E2A               	movwf	___lldiv@dividend+3,c
  8518  001CD0  C02F  F085         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  8519  001CD4  C030  F086         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  8520  001CD8  C031  F087         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  8521  001CDC  C032  F088         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  8522  001CE0  0E02               	movlw	2
  8523  001CE2                     u5095:
  8524  001CE2  90D8               	bcf	status,0,c
  8525  001CE4  0100               	movlb	0	; () banked
  8526  001CE6  3785               	rlcf	??_I2C_Master_Init& (0+255),f,b
  8527  001CE8  3786               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  8528  001CEA  3787               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  8529  001CEC  3788               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  8530  001CEE  2EE8               	decfsz	wreg,f,c
  8531  001CF0  D7F8               	goto	u5095
  8532  001CF2  C085  F02B         	movff	??_I2C_Master_Init,___lldiv@divisor
  8533  001CF6  C086  F02C         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  8534  001CFA  C087  F02D         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  8535  001CFE  C088  F02E         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  8536  001D02  ECF1  F00C         	call	___lldiv	;wreg free
  8537  001D06  0427               	decf	?___lldiv,w,c
  8538  001D08  6EC8               	movwf	4040,c	;volatile
  8539  001D0A  0012               	return		;funcret
  8540  001D0C                     __end_of_I2C_Master_Init:
  8541                           	opt stack 0
  8542                           tosu	equ	0xFFF
  8543                           tosh	equ	0xFFE
  8544                           tosl	equ	0xFFD
  8545                           pclath	equ	0xFFA
  8546                           tblptru	equ	0xFF8
  8547                           tblptrh	equ	0xFF7
  8548                           tblptrl	equ	0xFF6
  8549                           tablat	equ	0xFF5
  8550                           prodh	equ	0xFF4
  8551                           prodl	equ	0xFF3
  8552                           intcon	equ	0xFF2
  8553                           indf0	equ	0xFEF
  8554                           postinc0	equ	0xFEE
  8555                           fsr0h	equ	0xFEA
  8556                           fsr0l	equ	0xFE9
  8557                           wreg	equ	0xFE8
  8558                           postdec1	equ	0xFE5
  8559                           plusw1	equ	0xFE3
  8560                           fsr1l	equ	0xFE1
  8561                           indf2	equ	0xFDF
  8562                           postinc2	equ	0xFDE
  8563                           postdec2	equ	0xFDD
  8564                           plusw2	equ	0xFDB
  8565                           fsr2h	equ	0xFDA
  8566                           fsr2l	equ	0xFD9
  8567                           status	equ	0xFD8
  8568                           
  8569 ;; *************** function ___lldiv *****************
  8570 ;; Defined at:
  8571 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  8572 ;; Parameters:    Size  Location     Type
  8573 ;;  dividend        4   38[COMRAM] unsigned long 
  8574 ;;  divisor         4   42[COMRAM] unsigned long 
  8575 ;; Auto vars:     Size  Location     Type
  8576 ;;  quotient        4    0[BANK0 ] unsigned long 
  8577 ;;  counter         1    4[BANK0 ] unsigned char 
  8578 ;; Return value:  Size  Location     Type
  8579 ;;                  4   38[COMRAM] unsigned long 
  8580 ;; Registers used:
  8581 ;;		wreg, status,2, status,0
  8582 ;; Tracked objects:
  8583 ;;		On entry : 0/0
  8584 ;;		On exit  : 0/0
  8585 ;;		Unchanged: 0/0
  8586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8587 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8588 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8590 ;;      Totals:         8       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8591 ;;Total ram usage:       13 bytes
  8592 ;; Hardware stack levels used:    1
  8593 ;; Hardware stack levels required when called:    4
  8594 ;; This function calls:
  8595 ;;		Nothing
  8596 ;; This function is called by:
  8597 ;;		_I2C_Master_Init
  8598 ;;		__doprnt
  8599 ;; This function uses a non-reentrant model
  8600 ;;
  8601                           
  8602                           	psect	text31
  8603  0019E2                     __ptext31:
  8604                           	opt stack 0
  8605  0019E2                     ___lldiv:
  8606                           	opt stack 23
  8607                           
  8608                           ;incstack = 0
  8609  0019E2  0E00               	movlw	0
  8610  0019E4  0100               	movlb	0	; () banked
  8611  0019E6  6F80               	movwf	___lldiv@quotient& (0+255),b
  8612  0019E8  0E00               	movlw	0
  8613  0019EA  6F81               	movwf	(___lldiv@quotient+1)& (0+255),b
  8614  0019EC  0E00               	movlw	0
  8615  0019EE  6F82               	movwf	(___lldiv@quotient+2)& (0+255),b
  8616  0019F0  0E00               	movlw	0
  8617  0019F2  6F83               	movwf	(___lldiv@quotient+3)& (0+255),b
  8618                           
  8619                           ; BSR set to: 0
  8620  0019F4  502B               	movf	___lldiv@divisor,w,c
  8621  0019F6  102C               	iorwf	___lldiv@divisor+1,w,c
  8622  0019F8  102D               	iorwf	___lldiv@divisor+2,w,c
  8623  0019FA  102E               	iorwf	___lldiv@divisor+3,w,c
  8624  0019FC  B4D8               	btfsc	status,2,c
  8625  0019FE  D02A               	goto	l948
  8626                           
  8627                           ; BSR set to: 0
  8628  001A00  0E01               	movlw	1
  8629  001A02  6F84               	movwf	___lldiv@counter& (0+255),b
  8630  001A04  D006               	goto	l943
  8631  001A06                     
  8632                           ; BSR set to: 0
  8633                           
  8634                           ; BSR set to: 0
  8635  001A06  90D8               	bcf	status,0,c
  8636  001A08  362B               	rlcf	___lldiv@divisor,f,c
  8637  001A0A  362C               	rlcf	___lldiv@divisor+1,f,c
  8638  001A0C  362D               	rlcf	___lldiv@divisor+2,f,c
  8639  001A0E  362E               	rlcf	___lldiv@divisor+3,f,c
  8640  001A10  2B84               	incf	___lldiv@counter& (0+255),f,b
  8641  001A12                     l943:
  8642                           
  8643                           ; BSR set to: 0
  8644                           
  8645                           ; BSR set to: 0
  8646  001A12  AE2E               	btfss	___lldiv@divisor+3,7,c
  8647  001A14  D7F8               	goto	l944
  8648  001A16                     u3820:
  8649                           
  8650                           ; BSR set to: 0
  8651                           
  8652                           ; BSR set to: 0
  8653                           
  8654                           ; BSR set to: 0
  8655  001A16  90D8               	bcf	status,0,c
  8656  001A18  3780               	rlcf	___lldiv@quotient& (0+255),f,b
  8657  001A1A  3781               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  8658  001A1C  3782               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  8659  001A1E  3783               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  8660                           
  8661                           ; BSR set to: 0
  8662  001A20  502B               	movf	___lldiv@divisor,w,c
  8663  001A22  5C27               	subwf	___lldiv@dividend,w,c
  8664  001A24  502C               	movf	___lldiv@divisor+1,w,c
  8665  001A26  5828               	subwfb	___lldiv@dividend+1,w,c
  8666  001A28  502D               	movf	___lldiv@divisor+2,w,c
  8667  001A2A  5829               	subwfb	___lldiv@dividend+2,w,c
  8668  001A2C  502E               	movf	___lldiv@divisor+3,w,c
  8669  001A2E  582A               	subwfb	___lldiv@dividend+3,w,c
  8670  001A30  A0D8               	btfss	status,0,c
  8671  001A32  D009               	goto	l947
  8672                           
  8673                           ; BSR set to: 0
  8674  001A34  502B               	movf	___lldiv@divisor,w,c
  8675  001A36  5E27               	subwf	___lldiv@dividend,f,c
  8676  001A38  502C               	movf	___lldiv@divisor+1,w,c
  8677  001A3A  5A28               	subwfb	___lldiv@dividend+1,f,c
  8678  001A3C  502D               	movf	___lldiv@divisor+2,w,c
  8679  001A3E  5A29               	subwfb	___lldiv@dividend+2,f,c
  8680  001A40  502E               	movf	___lldiv@divisor+3,w,c
  8681  001A42  5A2A               	subwfb	___lldiv@dividend+3,f,c
  8682                           
  8683                           ; BSR set to: 0
  8684  001A44  8180               	bsf	___lldiv@quotient& (0+255),0,b
  8685  001A46                     l947:
  8686                           
  8687                           ; BSR set to: 0
  8688                           
  8689                           ; BSR set to: 0
  8690  001A46  90D8               	bcf	status,0,c
  8691  001A48  322E               	rrcf	___lldiv@divisor+3,f,c
  8692  001A4A  322D               	rrcf	___lldiv@divisor+2,f,c
  8693  001A4C  322C               	rrcf	___lldiv@divisor+1,f,c
  8694  001A4E  322B               	rrcf	___lldiv@divisor,f,c
  8695                           
  8696                           ; BSR set to: 0
  8697  001A50  2F84               	decfsz	___lldiv@counter& (0+255),f,b
  8698  001A52  D7E1               	goto	u3820
  8699  001A54                     l948:
  8700                           
  8701                           ; BSR set to: 0
  8702                           
  8703                           ; BSR set to: 0
  8704  001A54  C080  F027         	movff	___lldiv@quotient,?___lldiv
  8705  001A58  C081  F028         	movff	___lldiv@quotient+1,?___lldiv+1
  8706  001A5C  C082  F029         	movff	___lldiv@quotient+2,?___lldiv+2
  8707  001A60  C083  F02A         	movff	___lldiv@quotient+3,?___lldiv+3
  8708                           
  8709                           ; BSR set to: 0
  8710  001A64  0012               	return		;funcret
  8711  001A66                     __end_of___lldiv:
  8712                           	opt stack 0
  8713                           tosu	equ	0xFFF
  8714                           tosh	equ	0xFFE
  8715                           tosl	equ	0xFFD
  8716                           pclath	equ	0xFFA
  8717                           tblptru	equ	0xFF8
  8718                           tblptrh	equ	0xFF7
  8719                           tblptrl	equ	0xFF6
  8720                           tablat	equ	0xFF5
  8721                           prodh	equ	0xFF4
  8722                           prodl	equ	0xFF3
  8723                           intcon	equ	0xFF2
  8724                           indf0	equ	0xFEF
  8725                           postinc0	equ	0xFEE
  8726                           fsr0h	equ	0xFEA
  8727                           fsr0l	equ	0xFE9
  8728                           wreg	equ	0xFE8
  8729                           postdec1	equ	0xFE5
  8730                           plusw1	equ	0xFE3
  8731                           fsr1l	equ	0xFE1
  8732                           indf2	equ	0xFDF
  8733                           postinc2	equ	0xFDE
  8734                           postdec2	equ	0xFDD
  8735                           plusw2	equ	0xFDB
  8736                           fsr2h	equ	0xFDA
  8737                           fsr2l	equ	0xFD9
  8738                           status	equ	0xFD8
  8739                           
  8740 ;; *************** function _interruptHandler *****************
  8741 ;; Defined at:
  8742 ;;		line 202 in file "main.c"
  8743 ;; Parameters:    Size  Location     Type
  8744 ;;		None
  8745 ;; Auto vars:     Size  Location     Type
  8746 ;;		None
  8747 ;; Return value:  Size  Location     Type
  8748 ;;                  1    wreg      void 
  8749 ;; Registers used:
  8750 ;;		wreg, status,2, status,0, cstack
  8751 ;; Tracked objects:
  8752 ;;		On entry : 0/0
  8753 ;;		On exit  : 0/0
  8754 ;;		Unchanged: 0/0
  8755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8758 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8759 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8760 ;;Total ram usage:       18 bytes
  8761 ;; Hardware stack levels used:    1
  8762 ;; Hardware stack levels required when called:    3
  8763 ;; This function calls:
  8764 ;;		_tmr0_ISR
  8765 ;; This function is called by:
  8766 ;;		Interrupt level 2
  8767 ;; This function uses a non-reentrant model
  8768 ;;
  8769                           
  8770                           	psect	intcode
  8771  000008                     __pintcode:
  8772                           	opt stack 0
  8773  000008                     _interruptHandler:
  8774                           	opt stack 21
  8775                           
  8776                           ; BSR set to: 0
  8777                           ;incstack = 0
  8778  000008  8259               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8779  00000A  ED57  F00C         	call	int_func,f	;refresh shadow registers
  8780                           tosu	equ	0xFFF
  8781                           tosh	equ	0xFFE
  8782                           tosl	equ	0xFFD
  8783                           pclath	equ	0xFFA
  8784                           tblptru	equ	0xFF8
  8785                           tblptrh	equ	0xFF7
  8786                           tblptrl	equ	0xFF6
  8787                           tablat	equ	0xFF5
  8788                           prodh	equ	0xFF4
  8789                           prodl	equ	0xFF3
  8790                           intcon	equ	0xFF2
  8791                           indf0	equ	0xFEF
  8792                           postinc0	equ	0xFEE
  8793                           fsr0h	equ	0xFEA
  8794                           fsr0l	equ	0xFE9
  8795                           wreg	equ	0xFE8
  8796                           postdec1	equ	0xFE5
  8797                           plusw1	equ	0xFE3
  8798                           fsr1l	equ	0xFE1
  8799                           indf2	equ	0xFDF
  8800                           postinc2	equ	0xFDE
  8801                           postdec2	equ	0xFDD
  8802                           plusw2	equ	0xFDB
  8803                           fsr2h	equ	0xFDA
  8804                           fsr2l	equ	0xFD9
  8805                           status	equ	0xFD8
  8806                           
  8807                           	psect	intcode_body
  8808  0018AE                     __pintcode_body:
  8809                           	opt stack 21
  8810  0018AE                     int_func:
  8811                           	opt stack 21
  8812  0018AE  0006               	pop		; remove dummy address from shadow register refresh
  8813  0018B0  CFFA F015          	movff	pclath,??_interruptHandler
  8814  0018B4  CFFB F016          	movff	pclatu,??_interruptHandler+1
  8815  0018B8  CFE9 F017          	movff	fsr0l,??_interruptHandler+2
  8816  0018BC  CFEA F018          	movff	fsr0h,??_interruptHandler+3
  8817  0018C0  CFE1 F019          	movff	fsr1l,??_interruptHandler+4
  8818  0018C4  CFE2 F01A          	movff	fsr1h,??_interruptHandler+5
  8819  0018C8  CFD9 F01B          	movff	fsr2l,??_interruptHandler+6
  8820  0018CC  CFDA F01C          	movff	fsr2h,??_interruptHandler+7
  8821  0018D0  CFF3 F01D          	movff	prodl,??_interruptHandler+8
  8822  0018D4  CFF4 F01E          	movff	prodh,??_interruptHandler+9
  8823  0018D8  CFF6 F01F          	movff	tblptrl,??_interruptHandler+10
  8824  0018DC  CFF7 F020          	movff	tblptrh,??_interruptHandler+11
  8825  0018E0  CFF8 F021          	movff	tblptru,??_interruptHandler+12
  8826  0018E4  CFF5 F022          	movff	tablat,??_interruptHandler+13
  8827  0018E8  C059  F023         	movff	btemp,??_interruptHandler+14
  8828  0018EC  C05A  F024         	movff	btemp+1,??_interruptHandler+15
  8829  0018F0  C05B  F025         	movff	btemp+2,??_interruptHandler+16
  8830  0018F4  C05C  F026         	movff	btemp+3,??_interruptHandler+17
  8831                           
  8832                           ;main.c: 203: if (T0IE && T0IF) {
  8833  0018F8  BAF2               	btfsc	intcon,5,c	;volatile
  8834  0018FA  A4F2               	btfss	intcon,2,c	;volatile
  8835  0018FC  D003               	goto	i2l136
  8836                           
  8837                           ;main.c: 204: T0IF = 0;
  8838  0018FE  94F2               	bcf	intcon,2,c	;volatile
  8839                           
  8840                           ;main.c: 205: tmr0_ISR();
  8841  001900  EC6E  F00F         	call	_tmr0_ISR	;wreg free
  8842  001904                     i2l136:
  8843  001904  C026  F05C         	movff	??_interruptHandler+17,btemp+3
  8844  001908  C025  F05B         	movff	??_interruptHandler+16,btemp+2
  8845  00190C  C024  F05A         	movff	??_interruptHandler+15,btemp+1
  8846  001910  C023  F059         	movff	??_interruptHandler+14,btemp
  8847  001914  C022  FFF5         	movff	??_interruptHandler+13,tablat
  8848  001918  C021  FFF8         	movff	??_interruptHandler+12,tblptru
  8849  00191C  C020  FFF7         	movff	??_interruptHandler+11,tblptrh
  8850  001920  C01F  FFF6         	movff	??_interruptHandler+10,tblptrl
  8851  001924  C01E  FFF4         	movff	??_interruptHandler+9,prodh
  8852  001928  C01D  FFF3         	movff	??_interruptHandler+8,prodl
  8853  00192C  C01C  FFDA         	movff	??_interruptHandler+7,fsr2h
  8854  001930  C01B  FFD9         	movff	??_interruptHandler+6,fsr2l
  8855  001934  C01A  FFE2         	movff	??_interruptHandler+5,fsr1h
  8856  001938  C019  FFE1         	movff	??_interruptHandler+4,fsr1l
  8857  00193C  C018  FFEA         	movff	??_interruptHandler+3,fsr0h
  8858  001940  C017  FFE9         	movff	??_interruptHandler+2,fsr0l
  8859  001944  C016  FFFB         	movff	??_interruptHandler+1,pclatu
  8860  001948  C015  FFFA         	movff	??_interruptHandler,pclath
  8861  00194C  9259               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8862  00194E  0011               	retfie		f
  8863  001950                     __end_of_interruptHandler:
  8864                           	opt stack 0
  8865                           tosu	equ	0xFFF
  8866                           tosh	equ	0xFFE
  8867                           tosl	equ	0xFFD
  8868                           pclatu	equ	0xFFB
  8869                           pclath	equ	0xFFA
  8870                           tblptru	equ	0xFF8
  8871                           tblptrh	equ	0xFF7
  8872                           tblptrl	equ	0xFF6
  8873                           tablat	equ	0xFF5
  8874                           prodh	equ	0xFF4
  8875                           prodl	equ	0xFF3
  8876                           intcon	equ	0xFF2
  8877                           indf0	equ	0xFEF
  8878                           postinc0	equ	0xFEE
  8879                           fsr0h	equ	0xFEA
  8880                           fsr0l	equ	0xFE9
  8881                           wreg	equ	0xFE8
  8882                           postdec1	equ	0xFE5
  8883                           plusw1	equ	0xFE3
  8884                           fsr1h	equ	0xFE2
  8885                           fsr1l	equ	0xFE1
  8886                           indf2	equ	0xFDF
  8887                           postinc2	equ	0xFDE
  8888                           postdec2	equ	0xFDD
  8889                           plusw2	equ	0xFDB
  8890                           fsr2h	equ	0xFDA
  8891                           fsr2l	equ	0xFD9
  8892                           status	equ	0xFD8
  8893                           
  8894 ;; *************** function _tmr0_ISR *****************
  8895 ;; Defined at:
  8896 ;;		line 56 in file "timer.c"
  8897 ;; Parameters:    Size  Location     Type
  8898 ;;		None
  8899 ;; Auto vars:     Size  Location     Type
  8900 ;;		None
  8901 ;; Return value:  Size  Location     Type
  8902 ;;                  1    wreg      void 
  8903 ;; Registers used:
  8904 ;;		wreg, status,2, status,0, cstack
  8905 ;; Tracked objects:
  8906 ;;		On entry : 0/0
  8907 ;;		On exit  : 0/0
  8908 ;;		Unchanged: 0/0
  8909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8914 ;;Total ram usage:        0 bytes
  8915 ;; Hardware stack levels used:    1
  8916 ;; Hardware stack levels required when called:    2
  8917 ;; This function calls:
  8918 ;;		___ftadd
  8919 ;; This function is called by:
  8920 ;;		_interruptHandler
  8921 ;; This function uses a non-reentrant model
  8922 ;;
  8923                           
  8924                           	psect	text33
  8925  001EDC                     __ptext33:
  8926                           	opt stack 0
  8927  001EDC                     _tmr0_ISR:
  8928                           	opt stack 21
  8929                           
  8930                           ;timer.c: 57: timeSinceLastTic += 0.1;
  8931                           
  8932                           ;incstack = 0
  8933  001EDC  C055  F009         	movff	_timeSinceLastTic,___ftadd@f1
  8934  001EE0  C056  F00A         	movff	_timeSinceLastTic+1,___ftadd@f1+1
  8935  001EE4  C057  F00B         	movff	_timeSinceLastTic+2,___ftadd@f1+2
  8936  001EE8  0ECD               	movlw	205
  8937  001EEA  6E0C               	movwf	___ftadd@f2,c
  8938  001EEC  0ECC               	movlw	204
  8939  001EEE  6E0D               	movwf	___ftadd@f2+1,c
  8940  001EF0  0E3D               	movlw	61
  8941  001EF2  6E0E               	movwf	___ftadd@f2+2,c
  8942  001EF4  ECD8  F00A         	call	___ftadd	;wreg free
  8943  001EF8  C009  F055         	movff	?___ftadd,_timeSinceLastTic
  8944  001EFC  C00A  F056         	movff	?___ftadd+1,_timeSinceLastTic+1
  8945  001F00  C00B  F057         	movff	?___ftadd+2,_timeSinceLastTic+2
  8946                           
  8947                           ;timer.c: 58: TMR0H = 0xF2;
  8948  001F04  0EF2               	movlw	242
  8949  001F06  6ED7               	movwf	4055,c	;volatile
  8950                           
  8951                           ;timer.c: 59: TMR0L = 0xC0;
  8952  001F08  0EC0               	movlw	192
  8953  001F0A  6ED6               	movwf	4054,c	;volatile
  8954  001F0C  0012               	return		;funcret
  8955  001F0E                     __end_of_tmr0_ISR:
  8956                           	opt stack 0
  8957                           tosu	equ	0xFFF
  8958                           tosh	equ	0xFFE
  8959                           tosl	equ	0xFFD
  8960                           pclatu	equ	0xFFB
  8961                           pclath	equ	0xFFA
  8962                           tblptru	equ	0xFF8
  8963                           tblptrh	equ	0xFF7
  8964                           tblptrl	equ	0xFF6
  8965                           tablat	equ	0xFF5
  8966                           prodh	equ	0xFF4
  8967                           prodl	equ	0xFF3
  8968                           intcon	equ	0xFF2
  8969                           indf0	equ	0xFEF
  8970                           postinc0	equ	0xFEE
  8971                           fsr0h	equ	0xFEA
  8972                           fsr0l	equ	0xFE9
  8973                           wreg	equ	0xFE8
  8974                           postdec1	equ	0xFE5
  8975                           plusw1	equ	0xFE3
  8976                           fsr1h	equ	0xFE2
  8977                           fsr1l	equ	0xFE1
  8978                           indf2	equ	0xFDF
  8979                           postinc2	equ	0xFDE
  8980                           postdec2	equ	0xFDD
  8981                           plusw2	equ	0xFDB
  8982                           fsr2h	equ	0xFDA
  8983                           fsr2l	equ	0xFD9
  8984                           status	equ	0xFD8
  8985                           
  8986 ;; *************** function ___ftadd *****************
  8987 ;; Defined at:
  8988 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  8989 ;; Parameters:    Size  Location     Type
  8990 ;;  f1              3    8[COMRAM] float 
  8991 ;;  f2              3   11[COMRAM] float 
  8992 ;; Auto vars:     Size  Location     Type
  8993 ;;  exp1            1   19[COMRAM] unsigned char 
  8994 ;;  exp2            1   18[COMRAM] unsigned char 
  8995 ;;  sign            1   17[COMRAM] unsigned char 
  8996 ;; Return value:  Size  Location     Type
  8997 ;;                  3    8[COMRAM] float 
  8998 ;; Registers used:
  8999 ;;		wreg, status,2, status,0, cstack
  9000 ;; Tracked objects:
  9001 ;;		On entry : 0/0
  9002 ;;		On exit  : 0/0
  9003 ;;		Unchanged: 0/0
  9004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9005 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9006 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9007 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9008 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9009 ;;Total ram usage:       12 bytes
  9010 ;; Hardware stack levels used:    1
  9011 ;; Hardware stack levels required when called:    1
  9012 ;; This function calls:
  9013 ;;		___ftpack
  9014 ;; This function is called by:
  9015 ;;		_tmr0_ISR
  9016 ;; This function uses a non-reentrant model
  9017 ;;
  9018                           
  9019                           	psect	text34
  9020  0015B0                     __ptext34:
  9021                           	opt stack 0
  9022  0015B0                     ___ftadd:
  9023                           	opt stack 21
  9024                           
  9025                           ;incstack = 0
  9026  0015B0  C00B  F00F         	movff	___ftadd@f1+2,??___ftadd
  9027  0015B4  6A10               	clrf	(??___ftadd+1)& (0+255),c
  9028  0015B6  6A11               	clrf	(??___ftadd+2)& (0+255),c
  9029  0015B8  340A               	rlcf	___ftadd@f1+1,w,c
  9030  0015BA  360F               	rlcf	??___ftadd& (0+255),f,c
  9031  0015BC  E301               	bnc	u329_41
  9032  0015BE  8010               	bsf	(??___ftadd+1)& (0+255),0,c
  9033  0015C0                     u329_41:
  9034  0015C0  500F               	movf	??___ftadd,w,c
  9035  0015C2  6E14               	movwf	___ftadd@exp1,c
  9036  0015C4  C00E  F00F         	movff	___ftadd@f2+2,??___ftadd
  9037  0015C8  6A10               	clrf	(??___ftadd+1)& (0+255),c
  9038  0015CA  6A11               	clrf	(??___ftadd+2)& (0+255),c
  9039  0015CC  340D               	rlcf	___ftadd@f2+1,w,c
  9040  0015CE  360F               	rlcf	??___ftadd& (0+255),f,c
  9041  0015D0  E301               	bnc	u330_41
  9042  0015D2  8010               	bsf	(??___ftadd+1)& (0+255),0,c
  9043  0015D4                     u330_41:
  9044  0015D4  500F               	movf	??___ftadd,w,c
  9045  0015D6  6E13               	movwf	___ftadd@exp2,c
  9046  0015D8  5014               	movf	___ftadd@exp1,w,c
  9047  0015DA  B4D8               	btfsc	status,2,c
  9048  0015DC  D00B               	goto	i2u333_40
  9049  0015DE  5013               	movf	___ftadd@exp2,w,c
  9050  0015E0  5C14               	subwf	___ftadd@exp1,w,c
  9051  0015E2  B0D8               	btfsc	status,0,c
  9052  0015E4  D00E               	goto	i2l838
  9053  0015E6  5014               	movf	___ftadd@exp1,w,c
  9054  0015E8  0800               	sublw	0
  9055  0015EA  2413               	addwf	___ftadd@exp2,w,c
  9056  0015EC  6E0F               	movwf	??___ftadd& (0+255),c
  9057  0015EE  0E18               	movlw	24
  9058  0015F0  640F               	cpfsgt	??___ftadd,c
  9059  0015F2  D007               	goto	i2l838
  9060  0015F4                     i2u333_40:
  9061  0015F4  C00C  F009         	movff	___ftadd@f2,?___ftadd
  9062  0015F8  C00D  F00A         	movff	___ftadd@f2+1,?___ftadd+1
  9063  0015FC  C00E  F00B         	movff	___ftadd@f2+2,?___ftadd+2
  9064  001600  0012               	return	
  9065  001602                     i2l838:
  9066  001602  5013               	movf	___ftadd@exp2,w,c
  9067  001604  B4D8               	btfsc	status,2,c
  9068  001606  D00B               	goto	i2u336_40
  9069  001608  5014               	movf	___ftadd@exp1,w,c
  9070  00160A  5C13               	subwf	___ftadd@exp2,w,c
  9071  00160C  B0D8               	btfsc	status,0,c
  9072  00160E  D00E               	goto	i2l842
  9073  001610  5013               	movf	___ftadd@exp2,w,c
  9074  001612  0800               	sublw	0
  9075  001614  2414               	addwf	___ftadd@exp1,w,c
  9076  001616  6E0F               	movwf	??___ftadd& (0+255),c
  9077  001618  0E18               	movlw	24
  9078  00161A  640F               	cpfsgt	??___ftadd,c
  9079  00161C  D007               	goto	i2l842
  9080  00161E                     i2u336_40:
  9081  00161E  C009  F009         	movff	___ftadd@f1,?___ftadd
  9082  001622  C00A  F00A         	movff	___ftadd@f1+1,?___ftadd+1
  9083  001626  C00B  F00B         	movff	___ftadd@f1+2,?___ftadd+2
  9084  00162A  0012               	return	
  9085  00162C                     i2l842:
  9086  00162C  0E06               	movlw	6
  9087  00162E  6E12               	movwf	___ftadd@sign,c
  9088  001630  BE0B               	btfsc	___ftadd@f1+2,7,c
  9089  001632  8E12               	bsf	___ftadd@sign,7,c
  9090  001634  BE0E               	btfsc	___ftadd@f2+2,7,c
  9091  001636  8C12               	bsf	___ftadd@sign,6,c
  9092  001638  8E0A               	bsf	___ftadd@f1+1,7,c
  9093  00163A  0EFF               	movlw	255
  9094  00163C  1609               	andwf	___ftadd@f1,f,c
  9095  00163E  0EFF               	movlw	255
  9096  001640  160A               	andwf	___ftadd@f1+1,f,c
  9097  001642  0E00               	movlw	0
  9098  001644  160B               	andwf	___ftadd@f1+2,f,c
  9099  001646  8E0D               	bsf	___ftadd@f2+1,7,c
  9100  001648  0EFF               	movlw	255
  9101  00164A  160C               	andwf	___ftadd@f2,f,c
  9102  00164C  0EFF               	movlw	255
  9103  00164E  160D               	andwf	___ftadd@f2+1,f,c
  9104  001650  0E00               	movlw	0
  9105  001652  160E               	andwf	___ftadd@f2+2,f,c
  9106  001654  5013               	movf	___ftadd@exp2,w,c
  9107  001656  5C14               	subwf	___ftadd@exp1,w,c
  9108  001658  B0D8               	btfsc	status,0,c
  9109  00165A  D01B               	goto	i2l847
  9110  00165C                     i2u339_40:
  9111  00165C  90D8               	bcf	status,0,c
  9112  00165E  360C               	rlcf	___ftadd@f2,f,c
  9113  001660  360D               	rlcf	___ftadd@f2+1,f,c
  9114  001662  360E               	rlcf	___ftadd@f2+2,f,c
  9115  001664  0613               	decf	___ftadd@exp2,f,c
  9116  001666  5014               	movf	___ftadd@exp1,w,c
  9117  001668  1813               	xorwf	___ftadd@exp2,w,c
  9118  00166A  B4D8               	btfsc	status,2,c
  9119  00166C  D00D               	goto	i2l852
  9120  00166E  0612               	decf	___ftadd@sign,f,c
  9121  001670  C012  F00F         	movff	___ftadd@sign,??___ftadd
  9122  001674  0E07               	movlw	7
  9123  001676  160F               	andwf	??___ftadd,f,c
  9124  001678  B4D8               	btfsc	status,2,c
  9125  00167A  D006               	goto	i2l852
  9126  00167C  D7EF               	goto	i2u339_40
  9127  00167E  90D8               	bcf	status,0,c
  9128  001680  320B               	rrcf	___ftadd@f1+2,f,c
  9129  001682  320A               	rrcf	___ftadd@f1+1,f,c
  9130  001684  3209               	rrcf	___ftadd@f1,f,c
  9131  001686  2A14               	incf	___ftadd@exp1,f,c
  9132  001688                     i2l852:
  9133  001688  5013               	movf	___ftadd@exp2,w,c
  9134  00168A  1814               	xorwf	___ftadd@exp1,w,c
  9135  00168C  B4D8               	btfsc	status,2,c
  9136  00168E  D01F               	goto	i2u346_40
  9137  001690  D7F6               	goto	i2l853
  9138  001692                     i2l847:
  9139  001692  5014               	movf	___ftadd@exp1,w,c
  9140  001694  5C13               	subwf	___ftadd@exp2,w,c
  9141  001696  B0D8               	btfsc	status,0,c
  9142  001698  D01A               	goto	i2u346_40
  9143  00169A                     i2u343_40:
  9144  00169A  90D8               	bcf	status,0,c
  9145  00169C  3609               	rlcf	___ftadd@f1,f,c
  9146  00169E  360A               	rlcf	___ftadd@f1+1,f,c
  9147  0016A0  360B               	rlcf	___ftadd@f1+2,f,c
  9148  0016A2  0614               	decf	___ftadd@exp1,f,c
  9149  0016A4  5014               	movf	___ftadd@exp1,w,c
  9150  0016A6  1813               	xorwf	___ftadd@exp2,w,c
  9151  0016A8  B4D8               	btfsc	status,2,c
  9152  0016AA  D00D               	goto	i2l861
  9153  0016AC  0612               	decf	___ftadd@sign,f,c
  9154  0016AE  C012  F00F         	movff	___ftadd@sign,??___ftadd
  9155  0016B2  0E07               	movlw	7
  9156  0016B4  160F               	andwf	??___ftadd,f,c
  9157  0016B6  B4D8               	btfsc	status,2,c
  9158  0016B8  D006               	goto	i2l861
  9159  0016BA  D7EF               	goto	i2u343_40
  9160  0016BC  90D8               	bcf	status,0,c
  9161  0016BE  320E               	rrcf	___ftadd@f2+2,f,c
  9162  0016C0  320D               	rrcf	___ftadd@f2+1,f,c
  9163  0016C2  320C               	rrcf	___ftadd@f2,f,c
  9164  0016C4  2A13               	incf	___ftadd@exp2,f,c
  9165  0016C6                     i2l861:
  9166  0016C6  5013               	movf	___ftadd@exp2,w,c
  9167  0016C8  1814               	xorwf	___ftadd@exp1,w,c
  9168  0016CA  A4D8               	btfss	status,2,c
  9169  0016CC  D7F7               	goto	i2l862
  9170  0016CE                     i2u346_40:
  9171  0016CE  AE12               	btfss	___ftadd@sign,7,c
  9172  0016D0  D00C               	goto	i2l864
  9173  0016D2  0EFF               	movlw	255
  9174  0016D4  1A09               	xorwf	___ftadd@f1,f,c
  9175  0016D6  0EFF               	movlw	255
  9176  0016D8  1A0A               	xorwf	___ftadd@f1+1,f,c
  9177  0016DA  0EFF               	movlw	255
  9178  0016DC  1A0B               	xorwf	___ftadd@f1+2,f,c
  9179  0016DE  0E01               	movlw	1
  9180  0016E0  2609               	addwf	___ftadd@f1,f,c
  9181  0016E2  0E00               	movlw	0
  9182  0016E4  220A               	addwfc	___ftadd@f1+1,f,c
  9183  0016E6  0E00               	movlw	0
  9184  0016E8  220B               	addwfc	___ftadd@f1+2,f,c
  9185  0016EA                     i2l864:
  9186  0016EA  AC12               	btfss	___ftadd@sign,6,c
  9187  0016EC  D00C               	goto	i2l865
  9188  0016EE  0EFF               	movlw	255
  9189  0016F0  1A0C               	xorwf	___ftadd@f2,f,c
  9190  0016F2  0EFF               	movlw	255
  9191  0016F4  1A0D               	xorwf	___ftadd@f2+1,f,c
  9192  0016F6  0EFF               	movlw	255
  9193  0016F8  1A0E               	xorwf	___ftadd@f2+2,f,c
  9194  0016FA  0E01               	movlw	1
  9195  0016FC  260C               	addwf	___ftadd@f2,f,c
  9196  0016FE  0E00               	movlw	0
  9197  001700  220D               	addwfc	___ftadd@f2+1,f,c
  9198  001702  0E00               	movlw	0
  9199  001704  220E               	addwfc	___ftadd@f2+2,f,c
  9200  001706                     i2l865:
  9201  001706  0E00               	movlw	0
  9202  001708  6E12               	movwf	___ftadd@sign,c
  9203  00170A  5009               	movf	___ftadd@f1,w,c
  9204  00170C  260C               	addwf	___ftadd@f2,f,c
  9205  00170E  500A               	movf	___ftadd@f1+1,w,c
  9206  001710  220D               	addwfc	___ftadd@f2+1,f,c
  9207  001712  500B               	movf	___ftadd@f1+2,w,c
  9208  001714  220E               	addwfc	___ftadd@f2+2,f,c
  9209  001716  AE0E               	btfss	___ftadd@f2+2,7,c
  9210  001718  D00E               	goto	i2l866
  9211  00171A  0EFF               	movlw	255
  9212  00171C  1A0C               	xorwf	___ftadd@f2,f,c
  9213  00171E  0EFF               	movlw	255
  9214  001720  1A0D               	xorwf	___ftadd@f2+1,f,c
  9215  001722  0EFF               	movlw	255
  9216  001724  1A0E               	xorwf	___ftadd@f2+2,f,c
  9217  001726  0E01               	movlw	1
  9218  001728  260C               	addwf	___ftadd@f2,f,c
  9219  00172A  0E00               	movlw	0
  9220  00172C  220D               	addwfc	___ftadd@f2+1,f,c
  9221  00172E  0E00               	movlw	0
  9222  001730  220E               	addwfc	___ftadd@f2+2,f,c
  9223  001732  0E01               	movlw	1
  9224  001734  6E12               	movwf	___ftadd@sign,c
  9225  001736                     i2l866:
  9226  001736  C00C  F001         	movff	___ftadd@f2,___ftpack@arg
  9227  00173A  C00D  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  9228  00173E  C00E  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  9229  001742  C014  F004         	movff	___ftadd@exp1,___ftpack@exp
  9230  001746  C012  F005         	movff	___ftadd@sign,___ftpack@sign
  9231  00174A  ECAE  F00B         	call	___ftpack	;wreg free
  9232  00174E  C001  F009         	movff	?___ftpack,?___ftadd
  9233  001752  C002  F00A         	movff	?___ftpack+1,?___ftadd+1
  9234  001756  C003  F00B         	movff	?___ftpack+2,?___ftadd+2
  9235  00175A  0012               	return	
  9236  00175C                     __end_of___ftadd:
  9237                           	opt stack 0
  9238                           tosu	equ	0xFFF
  9239                           tosh	equ	0xFFE
  9240                           tosl	equ	0xFFD
  9241                           pclatu	equ	0xFFB
  9242                           pclath	equ	0xFFA
  9243                           tblptru	equ	0xFF8
  9244                           tblptrh	equ	0xFF7
  9245                           tblptrl	equ	0xFF6
  9246                           tablat	equ	0xFF5
  9247                           prodh	equ	0xFF4
  9248                           prodl	equ	0xFF3
  9249                           intcon	equ	0xFF2
  9250                           indf0	equ	0xFEF
  9251                           postinc0	equ	0xFEE
  9252                           fsr0h	equ	0xFEA
  9253                           fsr0l	equ	0xFE9
  9254                           wreg	equ	0xFE8
  9255                           postdec1	equ	0xFE5
  9256                           plusw1	equ	0xFE3
  9257                           fsr1h	equ	0xFE2
  9258                           fsr1l	equ	0xFE1
  9259                           indf2	equ	0xFDF
  9260                           postinc2	equ	0xFDE
  9261                           postdec2	equ	0xFDD
  9262                           plusw2	equ	0xFDB
  9263                           fsr2h	equ	0xFDA
  9264                           fsr2l	equ	0xFD9
  9265                           status	equ	0xFD8
  9266                           
  9267 ;; *************** function ___ftpack *****************
  9268 ;; Defined at:
  9269 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  9270 ;; Parameters:    Size  Location     Type
  9271 ;;  arg             3    0[COMRAM] unsigned um
  9272 ;;  exp             1    3[COMRAM] unsigned char 
  9273 ;;  sign            1    4[COMRAM] unsigned char 
  9274 ;; Auto vars:     Size  Location     Type
  9275 ;;		None
  9276 ;; Return value:  Size  Location     Type
  9277 ;;                  3    0[COMRAM] float 
  9278 ;; Registers used:
  9279 ;;		wreg, status,2, status,0
  9280 ;; Tracked objects:
  9281 ;;		On entry : 0/0
  9282 ;;		On exit  : 0/0
  9283 ;;		Unchanged: 0/0
  9284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9285 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9287 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9288 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9289 ;;Total ram usage:        8 bytes
  9290 ;; Hardware stack levels used:    1
  9291 ;; This function calls:
  9292 ;;		Nothing
  9293 ;; This function is called by:
  9294 ;;		___ftadd
  9295 ;; This function uses a non-reentrant model
  9296 ;;
  9297                           
  9298                           	psect	text35
  9299  00175C                     __ptext35:
  9300                           	opt stack 0
  9301  00175C                     ___ftpack:
  9302                           	opt stack 21
  9303                           
  9304                           ;incstack = 0
  9305  00175C  5004               	movf	___ftpack@exp,w,c
  9306  00175E  B4D8               	btfsc	status,2,c
  9307  001760  D005               	goto	i2u262_40
  9308  001762  5001               	movf	___ftpack@arg,w,c
  9309  001764  1002               	iorwf	___ftpack@arg+1,w,c
  9310  001766  1003               	iorwf	___ftpack@arg+2,w,c
  9311  001768  A4D8               	btfss	status,2,c
  9312  00176A  D00C               	goto	i2l807
  9313  00176C                     i2u262_40:
  9314  00176C  0E00               	movlw	0
  9315  00176E  6E01               	movwf	?___ftpack,c
  9316  001770  0E00               	movlw	0
  9317  001772  6E02               	movwf	?___ftpack+1,c
  9318  001774  0E00               	movlw	0
  9319  001776  6E03               	movwf	?___ftpack+2,c
  9320  001778  0012               	return	
  9321  00177A  2A04               	incf	___ftpack@exp,f,c
  9322  00177C  90D8               	bcf	status,0,c
  9323  00177E  3203               	rrcf	___ftpack@arg+2,f,c
  9324  001780  3202               	rrcf	___ftpack@arg+1,f,c
  9325  001782  3201               	rrcf	___ftpack@arg,f,c
  9326  001784                     i2l807:
  9327  001784  0E00               	movlw	0
  9328  001786  1401               	andwf	___ftpack@arg,w,c
  9329  001788  6E06               	movwf	??___ftpack& (0+255),c
  9330  00178A  0E00               	movlw	0
  9331  00178C  1402               	andwf	___ftpack@arg+1,w,c
  9332  00178E  6E07               	movwf	(??___ftpack+1)& (0+255),c
  9333  001790  0EFE               	movlw	254
  9334  001792  1403               	andwf	___ftpack@arg+2,w,c
  9335  001794  6E08               	movwf	(??___ftpack+2)& (0+255),c
  9336  001796  5006               	movf	??___ftpack,w,c
  9337  001798  1007               	iorwf	??___ftpack+1,w,c
  9338  00179A  1008               	iorwf	??___ftpack+2,w,c
  9339  00179C  B4D8               	btfsc	status,2,c
  9340  00179E  D00C               	goto	i2l810
  9341  0017A0  D7EC               	goto	i2l808
  9342  0017A2  2A04               	incf	___ftpack@exp,f,c
  9343  0017A4  0E01               	movlw	1
  9344  0017A6  2601               	addwf	___ftpack@arg,f,c
  9345  0017A8  0E00               	movlw	0
  9346  0017AA  2202               	addwfc	___ftpack@arg+1,f,c
  9347  0017AC  0E00               	movlw	0
  9348  0017AE  2203               	addwfc	___ftpack@arg+2,f,c
  9349  0017B0  90D8               	bcf	status,0,c
  9350  0017B2  3203               	rrcf	___ftpack@arg+2,f,c
  9351  0017B4  3202               	rrcf	___ftpack@arg+1,f,c
  9352  0017B6  3201               	rrcf	___ftpack@arg,f,c
  9353  0017B8                     i2l810:
  9354  0017B8  0E00               	movlw	0
  9355  0017BA  1401               	andwf	___ftpack@arg,w,c
  9356  0017BC  6E06               	movwf	??___ftpack& (0+255),c
  9357  0017BE  0E00               	movlw	0
  9358  0017C0  1402               	andwf	___ftpack@arg+1,w,c
  9359  0017C2  6E07               	movwf	(??___ftpack+1)& (0+255),c
  9360  0017C4  0EFF               	movlw	255
  9361  0017C6  1403               	andwf	___ftpack@arg+2,w,c
  9362  0017C8  6E08               	movwf	(??___ftpack+2)& (0+255),c
  9363  0017CA  5006               	movf	??___ftpack,w,c
  9364  0017CC  1007               	iorwf	??___ftpack+1,w,c
  9365  0017CE  1008               	iorwf	??___ftpack+2,w,c
  9366  0017D0  B4D8               	btfsc	status,2,c
  9367  0017D2  D006               	goto	i2l813
  9368  0017D4  D7E6               	goto	i2l811
  9369  0017D6  0604               	decf	___ftpack@exp,f,c
  9370  0017D8  90D8               	bcf	status,0,c
  9371  0017DA  3601               	rlcf	___ftpack@arg,f,c
  9372  0017DC  3602               	rlcf	___ftpack@arg+1,f,c
  9373  0017DE  3603               	rlcf	___ftpack@arg+2,f,c
  9374  0017E0                     i2l813:
  9375  0017E0  BE02               	btfsc	___ftpack@arg+1,7,c
  9376  0017E2  D003               	goto	i2u266_40
  9377  0017E4  0E02               	movlw	2
  9378  0017E6  6004               	cpfslt	___ftpack@exp,c
  9379  0017E8  D7F6               	goto	i2l814
  9380  0017EA                     i2u266_40:
  9381  0017EA  A004               	btfss	___ftpack@exp,0,c
  9382  0017EC  9E02               	bcf	___ftpack@arg+1,7,c
  9383  0017EE  90D8               	bcf	status,0,c
  9384  0017F0  3204               	rrcf	___ftpack@exp,f,c
  9385  0017F2  5004               	movf	___ftpack@exp,w,c
  9386  0017F4  1203               	iorwf	___ftpack@arg+2,f,c
  9387  0017F6  5005               	movf	___ftpack@sign,w,c
  9388  0017F8  A4D8               	btfss	status,2,c
  9389  0017FA  8E03               	bsf	___ftpack@arg+2,7,c
  9390  0017FC  C001  F001         	movff	___ftpack@arg,?___ftpack
  9391  001800  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  9392  001804  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  9393  001808  0012               	return	
  9394  00180A                     __end_of___ftpack:
  9395                           	opt stack 0
  9396                           tosu	equ	0xFFF
  9397                           tosh	equ	0xFFE
  9398                           tosl	equ	0xFFD
  9399                           pclatu	equ	0xFFB
  9400                           pclath	equ	0xFFA
  9401                           tblptru	equ	0xFF8
  9402                           tblptrh	equ	0xFF7
  9403                           tblptrl	equ	0xFF6
  9404                           tablat	equ	0xFF5
  9405                           prodh	equ	0xFF4
  9406                           prodl	equ	0xFF3
  9407                           intcon	equ	0xFF2
  9408                           indf0	equ	0xFEF
  9409                           postinc0	equ	0xFEE
  9410                           fsr0h	equ	0xFEA
  9411                           fsr0l	equ	0xFE9
  9412                           wreg	equ	0xFE8
  9413                           postdec1	equ	0xFE5
  9414                           plusw1	equ	0xFE3
  9415                           fsr1h	equ	0xFE2
  9416                           fsr1l	equ	0xFE1
  9417                           indf2	equ	0xFDF
  9418                           postinc2	equ	0xFDE
  9419                           postdec2	equ	0xFDD
  9420                           plusw2	equ	0xFDB
  9421                           fsr2h	equ	0xFDA
  9422                           fsr2l	equ	0xFD9
  9423                           status	equ	0xFD8
  9424                           tosu	equ	0xFFF
  9425                           tosh	equ	0xFFE
  9426                           tosl	equ	0xFFD
  9427                           pclatu	equ	0xFFB
  9428                           pclath	equ	0xFFA
  9429                           tblptru	equ	0xFF8
  9430                           tblptrh	equ	0xFF7
  9431                           tblptrl	equ	0xFF6
  9432                           tablat	equ	0xFF5
  9433                           prodh	equ	0xFF4
  9434                           prodl	equ	0xFF3
  9435                           intcon	equ	0xFF2
  9436                           indf0	equ	0xFEF
  9437                           postinc0	equ	0xFEE
  9438                           fsr0h	equ	0xFEA
  9439                           fsr0l	equ	0xFE9
  9440                           wreg	equ	0xFE8
  9441                           postdec1	equ	0xFE5
  9442                           plusw1	equ	0xFE3
  9443                           fsr1h	equ	0xFE2
  9444                           fsr1l	equ	0xFE1
  9445                           indf2	equ	0xFDF
  9446                           postinc2	equ	0xFDE
  9447                           postdec2	equ	0xFDD
  9448                           plusw2	equ	0xFDB
  9449                           fsr2h	equ	0xFDA
  9450                           fsr2l	equ	0xFD9
  9451                           status	equ	0xFD8
  9452                           
  9453                           	psect	text36
  9454  000000                     __ptext36:
  9455                           	opt stack 0
  9456                           tosu	equ	0xFFF
  9457                           tosh	equ	0xFFE
  9458                           tosl	equ	0xFFD
  9459                           pclatu	equ	0xFFB
  9460                           pclath	equ	0xFFA
  9461                           tblptru	equ	0xFF8
  9462                           tblptrh	equ	0xFF7
  9463                           tblptrl	equ	0xFF6
  9464                           tablat	equ	0xFF5
  9465                           prodh	equ	0xFF4
  9466                           prodl	equ	0xFF3
  9467                           intcon	equ	0xFF2
  9468                           indf0	equ	0xFEF
  9469                           postinc0	equ	0xFEE
  9470                           fsr0h	equ	0xFEA
  9471                           fsr0l	equ	0xFE9
  9472                           wreg	equ	0xFE8
  9473                           postdec1	equ	0xFE5
  9474                           plusw1	equ	0xFE3
  9475                           fsr1h	equ	0xFE2
  9476                           fsr1l	equ	0xFE1
  9477                           indf2	equ	0xFDF
  9478                           postinc2	equ	0xFDE
  9479                           postdec2	equ	0xFDD
  9480                           plusw2	equ	0xFDB
  9481                           fsr2h	equ	0xFDA
  9482                           fsr2l	equ	0xFD9
  9483                           status	equ	0xFD8
  9484                           
  9485                           	psect	rparam
  9486  0000                     tosu	equ	0xFFF
  9487                           tosh	equ	0xFFE
  9488                           tosl	equ	0xFFD
  9489                           pclatu	equ	0xFFB
  9490                           pclath	equ	0xFFA
  9491                           tblptru	equ	0xFF8
  9492                           tblptrh	equ	0xFF7
  9493                           tblptrl	equ	0xFF6
  9494                           tablat	equ	0xFF5
  9495                           prodh	equ	0xFF4
  9496                           prodl	equ	0xFF3
  9497                           intcon	equ	0xFF2
  9498                           indf0	equ	0xFEF
  9499                           postinc0	equ	0xFEE
  9500                           fsr0h	equ	0xFEA
  9501                           fsr0l	equ	0xFE9
  9502                           wreg	equ	0xFE8
  9503                           postdec1	equ	0xFE5
  9504                           plusw1	equ	0xFE3
  9505                           fsr1h	equ	0xFE2
  9506                           fsr1l	equ	0xFE1
  9507                           indf2	equ	0xFDF
  9508                           postinc2	equ	0xFDE
  9509                           postdec2	equ	0xFDD
  9510                           plusw2	equ	0xFDB
  9511                           fsr2h	equ	0xFDA
  9512                           fsr2l	equ	0xFD9
  9513                           status	equ	0xFD8
  9514                           
  9515                           	psect	temp
  9516  000059                     btemp:
  9517                           	opt stack 0
  9518  000059                     	ds	1
  9519  0000                     int$flags	set	btemp
  9520  0000                     wtemp6	set	btemp+1
  9521                           tosu	equ	0xFFF
  9522                           tosh	equ	0xFFE
  9523                           tosl	equ	0xFFD
  9524                           pclatu	equ	0xFFB
  9525                           pclath	equ	0xFFA
  9526                           tblptru	equ	0xFF8
  9527                           tblptrh	equ	0xFF7
  9528                           tblptrl	equ	0xFF6
  9529                           tablat	equ	0xFF5
  9530                           prodh	equ	0xFF4
  9531                           prodl	equ	0xFF3
  9532                           intcon	equ	0xFF2
  9533                           indf0	equ	0xFEF
  9534                           postinc0	equ	0xFEE
  9535                           fsr0h	equ	0xFEA
  9536                           fsr0l	equ	0xFE9
  9537                           wreg	equ	0xFE8
  9538                           postdec1	equ	0xFE5
  9539                           plusw1	equ	0xFE3
  9540                           fsr1h	equ	0xFE2
  9541                           fsr1l	equ	0xFE1
  9542                           indf2	equ	0xFDF
  9543                           postinc2	equ	0xFDE
  9544                           postdec2	equ	0xFDD
  9545                           plusw2	equ	0xFDB
  9546                           fsr2h	equ	0xFDA
  9547                           fsr2l	equ	0xFD9
  9548                           status	equ	0xFD8


Data Sizes:
    Strings     368
    Constant    525
    Data        165
    BSS         46
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     50      88
    BANK0           128    111     121
    BANK1           256     88     251
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 132
		 -> inputEntryQuestions(CODE[132]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 32
		 -> inputEntry@fastenerString(BANK0[32]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 32
		 -> inputEntry@fastenerString(BANK0[32]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_11(CODE[22]), STR_2(CODE[4]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 33
		 -> packaging@msg2(BANK1[32]), packageCompartment@currTimeString(COMRAM[33]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), packaging@msg2(BANK1[32]), packageCompartment@currTimeString(COMRAM[33]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_22(CODE[16]), STR_21(CODE[11]), STR_20(CODE[12]), STR_19(CODE[9]), 
		 -> STR_17(CODE[19]), packageCompartment@currTimeString(COMRAM[33]), STR_1(CODE[13]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), packaging@msg2(BANK1[32]), packageCompartment@currTimeString(COMRAM[33]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_22(CODE[16]), STR_21(CODE[11]), STR_20(CODE[12]), STR_19(CODE[9]), 
		 -> STR_17(CODE[19]), STR_11(CODE[22]), STR_2(CODE[4]), packageCompartment@currTimeString(COMRAM[33]), 
		 -> STR_1(CODE[13]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), printf@ap(BANK0[2]), 

    _doprnt@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), NULL(NULL[0]), STR_23(CODE[7]), 
		 -> fSLookup(BANK1[105]), packaging@msg2(BANK1[32]), packageCompartment@currTimeString(COMRAM[33]), 

    S1109__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S1109__prbuf$ptr	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), packaging@msg2(BANK1[32]), packageCompartment@currTimeString(COMRAM[33]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), packaging@msg2(BANK1[32]), packageCompartment@currTimeString(COMRAM[33]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(BANK0[4]), printf@pb(BANK0[4]), 

    RTC_getTime@time	PTR unsigned char  size(2) Largest target is 7
		 -> RTC_getSeconds@time(BANK0[7]), 

    I2C_Send@data	PTR unsigned char  size(2) Largest target is 3967
		 -> STR_18(CODE[21]), STR_15(CODE[14]), inputEntry@msg(BANK0[24]), STR_14(CODE[25]), 
		 -> packaging@msg2(BANK1[32]), packaging@msg(BANK1[34]), STR_10(CODE[7]), STR_9(CODE[33]), 
		 -> RAM(DATA[3967]), STR_8(CODE[19]), STR_7(CODE[17]), STR_6(CODE[17]), 
		 -> STR_5(CODE[14]), STR_4(CODE[15]), packageCompartment@currTimeString(COMRAM[33]), 

    printErrorLCD@string	PTR unsigned char  size(2) Largest target is 224
		 -> errMsgs.noFasteners(CODE[32]), errMsgs.tooManySpacers(CODE[32]), errMsgs.tooManyWashers(CODE[32]), errMsgs.tooManyNuts(CODE[32]), 
		 -> errMsgs.tooManyBolts(CODE[32]), errMsgs.tooManyFasteners(CODE[32]), errMsgs.badEntry(CODE[32]), errMsgs(CODE[224]), 

    printStringLCD@string	PTR unsigned char  size(2) Largest target is 224
		 -> STR_16(CODE[30]), inputEntry@fastenerString(BANK0[32]), inputEntryQuestions(CODE[132]), STR_13(CODE[26]), 
		 -> STR_12(CODE[17]), errMsgs.noFasteners(CODE[32]), errMsgs.tooManySpacers(CODE[32]), errMsgs.tooManyWashers(CODE[32]), 
		 -> errMsgs.tooManyNuts(CODE[32]), errMsgs.tooManyBolts(CODE[32]), errMsgs.tooManyFasteners(CODE[32]), errMsgs.badEntry(CODE[32]), 
		 -> errMsgs(CODE[224]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 32
		 -> inputEntry@fastenerString(BANK0[32]), 

    packaging@set	PTR unsigned char  size(2) Largest target is 84
		 -> fastenerMatrix(CODE[84]), 


Critical Paths under _main in COMRAM

    _main->_I2C_Master_Init
    _mainMenu->_RTC_getSeconds
    _mainMenu->_viewLogs
    _viewLogs->_printStringLCD
    _printf->__doprnt
    _packaging->_I2C_Send
    _sprintf->__doprnt
    __doprnt->___llmod
    ___llmod->___lldiv
    _inputEntry->_strcpy
    _strcpy->___wmul
    _printErrorLCD->_printStringLCD
    _lcd_set_cursor->_lcd_shift_cursor
    _lcd_shift_cursor->_lcdInst
    _hibernate->_printStringLCD
    _printStringLCD->___wmul
    _putch->_lcdNibble
    _clearing->_I2C_Send
    _I2C_Send->_I2C_Master_Write
    _RTC_getSeconds->_RTC_getTime
    _RTC_getSeconds->___wmul
    _RTC_getTime->_I2C_Master_Read
    _RTC_getTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _interruptHandler in COMRAM

    _tmr0_ISR->___ftadd
    ___ftadd->___ftpack

Critical Paths under _main in BANK0

    _main->_mainMenu
    _mainMenu->_inputEntry
    _viewLogs->_printStringLCD
    _printf->__doprnt
    _packaging->_sprintf
    _sprintf->__doprnt
    __doprnt->___llmod
    ___llmod->___lldiv
    _inputEntry->_printErrorLCD
    _printErrorLCD->_printStringLCD
    _hibernate->_printStringLCD
    _I2C_Master_Init->___lldiv

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_mainMenu
    _mainMenu->_packaging

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   42417
                                            110 BANK0      1     1      0
                    _I2C_Master_Init
                          _hibernate
                            _initLCD
                            _lcdInst
                           _mainMenu
 ---------------------------------------------------------------------------------
 (1) _mainMenu                                            22    22      0   39279
                                            106 BANK0      4     4      0
                                             70 BANK1     18    18      0
                           _I2C_Send
                     _RTC_getSeconds
                           _clearing
                          _hibernate
                         _inputEntry
                            _lcdInst
                          _packaging
                         _pollKeypad
                     _printStringLCD
                             _printf
                              _putch
                           _viewLogs
 ---------------------------------------------------------------------------------
 (2) _viewLogs                                             3     3      0    2026
                                             49 COMRAM     1     1      0
                                             10 BANK0      2     2      0
                         _pollKeypad
                     _printStringLCD
 ---------------------------------------------------------------------------------
 (2) _printf                                              16     6     10    4143
                                             29 BANK0     16     6     10
                            __doprnt
 ---------------------------------------------------------------------------------
 (2) _packaging                                           76    76      0    6838
                                             47 BANK0      6     6      0
                                              0 BANK1     70    70      0
                           _I2C_Send
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             18     6     12    3949
                                             29 BANK0     18     6     12
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) __doprnt                                             24    18      6    3284
                                             47 COMRAM     2     2      0
                                             13 BANK0     16    10      6
                   Absolute function *
                            ___lldiv
                            ___llmod
                              _putch *
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     412
                                             46 COMRAM     1     1      0
                                              5 BANK0      8     0      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _inputEntry                                          94    94      0   13264
                                             14 BANK0     92    92      0
                           _I2C_Send
                             ___wmul
                            _lcdInst
                     _lcd_set_cursor
                         _pollKeypad
                      _printErrorLCD
                     _printStringLCD
                              _putch
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _strcpy                                               6     2      4     289
                                             44 COMRAM     6     2      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _printErrorLCD                                        4     2      2    2709
                                             10 BANK0      4     2      2
                     _printStringLCD
 ---------------------------------------------------------------------------------
 (3) _lcd_set_cursor                                       4     3      1     920
                                             44 COMRAM     4     3      1
                            _lcdInst
                   _lcd_shift_cursor
 ---------------------------------------------------------------------------------
 (4) _lcd_shift_cursor                                     3     2      1     415
                                             41 COMRAM     3     2      1
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _hibernate                                            6     6      0    2026
                                             10 BANK0      6     6      0
                         _pollKeypad
                     _printStringLCD
 ---------------------------------------------------------------------------------
 (3) _printStringLCD                                      15    13      2    1958
                                             44 COMRAM     5     3      2
                                              0 BANK0     10    10      0
                             ___wmul (ARG)
                            _lcdInst
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     195
                                             40 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _pollKeypad                                           1     1      0      34
                                             38 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _clearing                                             6     6      0    2717
                                              0 BANK0      6     6      0
                           _I2C_Send
 ---------------------------------------------------------------------------------
 (3) _I2C_Send                                             8     6      2    2442
                                             41 COMRAM     8     6      2
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _RTC_getSeconds                                      17    13      4    3039
                                             44 COMRAM     6     2      4
                                              0 BANK0     11    11      0
                        _RTC_getTime
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2032
                                             38 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _RTC_getTime                                          3     1      2     797
                                             41 COMRAM     3     1      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Write                                     2     0      2     481
                                             39 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Read                                      2     2      0      65
                                             39 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Wait                                      1     1      0       0
                                             38 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             41 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (4) _lcdInst                                              1     1      0     195
                                             40 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNibble                                            2     2      0     164
                                             38 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     722
                                             46 COMRAM     4     0      4
                                              5 BANK0      4     4      0
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     601
                                             38 COMRAM     8     0      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _interruptHandler                                    18    18      0    3593
                                             20 COMRAM    18    18      0
                           _tmr0_ISR
 ---------------------------------------------------------------------------------
 (8) _tmr0_ISR                                             0     0      0    3593
                            ___ftadd
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             12     6      6    3593
                                              8 COMRAM    12     6      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2349
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _hibernate
     _pollKeypad
     _printStringLCD
       ___wmul (ARG)
       _lcdInst (ARG)
         _lcdNibble
       _putch (ARG)
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _mainMenu
     _I2C_Send
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _RTC_getSeconds
       _RTC_getTime
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       ___wmul
     _clearing
       _I2C_Send
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
     _hibernate
       _pollKeypad
       _printStringLCD
         ___wmul (ARG)
         _lcdInst (ARG)
           _lcdNibble
         _putch (ARG)
           _lcdNibble
     _inputEntry
       _I2C_Send
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       ___wmul
       _lcdInst
         _lcdNibble
       _lcd_set_cursor
         _lcdInst
           _lcdNibble
         _lcd_shift_cursor
           _lcdInst
             _lcdNibble
       _pollKeypad
       _printErrorLCD
         _printStringLCD
           ___wmul (ARG)
           _lcdInst (ARG)
             _lcdNibble
           _putch (ARG)
             _lcdNibble
       _printStringLCD
         ___wmul (ARG)
         _lcdInst (ARG)
           _lcdNibble
         _putch (ARG)
           _lcdNibble
       _putch
         _lcdNibble
       _strcpy
         ___wmul (ARG)
     _lcdInst
       _lcdNibble
     _packaging
       _I2C_Send
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lldiv *
           ___llmod *
             ___lldiv (ARG)
           _putch *
             _lcdNibble
     _pollKeypad
     _printStringLCD
       ___wmul (ARG)
       _lcdInst (ARG)
         _lcdNibble
       _putch (ARG)
         _lcdNibble
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lldiv *
         ___llmod *
           ___lldiv (ARG)
         _putch *
           _lcdNibble
     _putch
       _lcdNibble
     _viewLogs
       _pollKeypad
       _printStringLCD
         ___wmul (ARG)
         _lcdInst (ARG)
           _lcdNibble
         _putch (ARG)
           _lcdNibble

 _interruptHandler (ROOT)
   _tmr0_ISR
     ___ftadd
       ___ftpack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     58      FB       7       98.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     6F      79       5       94.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     32      58       1       69.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1CC      34        0.0%
DATA                 0      0     1CC       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar 06 14:38:02 2018

           printErrorLCD@string 008A             ___wmul@multiplicand 0029                     __CFG_BORV$3 000000  
                  __CFG_CP0$OFF 000000                     _RTC_getTime 1BD4                    __CFG_CP1$OFF 000000  
                  __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000                    ___ftadd@exp1 0014  
                  ___ftadd@exp2 0013                    ___ftadd@sign 0012                             l111 1222  
                           l112 11E4                             l104 1458                             l121 1352  
                           l113 11EC                             l122 1314                             l123 131C  
                           l116 12BA                             l117 127C                             l126 13CE  
                           l118 1284                             l142 1BD2                             l127 13AC  
                           l128 13B4                             l312 1F48                             l305 1E42  
                           l322 0080                             l331 06A2                             l323 011E  
                           l500 1C10                             l228 1E1C                             l324 0110  
                           l229 1E14                             l341 027E                             l327 0704  
                           l343 028C                             l335 01CC                             l440 0FA8  
                           l360 0466                             l328 0174                             l441 0FEE  
                           l361 0470                             l345 029A                             l337 0240  
                           l450 1180                             l442 103C                             l370 05A2  
                           l354 02EE                             l338 02AC                             l443 106A  
                           l451 1190                             l347 02A6                             l372 05D6  
                           l364 0482                             l461 1F1A                             l437 0F36  
                           l381 06CC                             l357 0322                             l349 02DE  
                           l374 060A                             l366 04F6                             l390 0EA4  
                           l447 114C                             l359 0442                             l391 0D50  
                           l376 063E                             l368 0570                             l560 08E6  
                           l392 0D6A                             l466 19A8                             l378 0672  
                           l570 0794                             l386 0BCE                             l467 196A  
                           l379 0696                             l571 07FE                             l563 0756  
                           l555 0712                             l387 0BEE                             l572 084E  
                           l556 074E                             l388 0C2C                             l574 0878  
                           l566 093C                             l575 08BA                             l567 075A  
                           l584 0A4C                             l585 0A76                             l577 0974  
                           l578 09A6                             l587 0A84                             l579 09BE  
                           l588 0B44                             l589 0B6E                             l943 1A12  
                           l944 1A06                             l953 1C66                             l954 1C5A  
                           l947 1A46                             l948 1A54                             l957 1C8E  
                           l958 1C9C                    __CFG_CPB$OFF 000000                    __CFG_CPD$OFF 000000  
                           prod 000FF3                             tosl 000FFD                             wreg 000FE8  
               ?_lcd_set_cursor 002D                    __CFG_LVP$OFF 000000                    __CFG_WDT$OFF 000000  
                          l1156 1EBC                            l1157 1EB4                            l4200 053C  
                          l4208 05A2                            l4136 02FE                            l4056 0110  
                          l4154 0442                            l4314 0D5A                            l4236 06E0  
                          l4332 0E1A                            l4190 04E6                            l4158 0450  
                          l3618 1FD8                            l3904 1458                            l3690 114C  
                          l3860 1C08                            l3668 104C                            l3780 0A84  
                          l3756 09C2                            STR_1 FFBF                            STR_2 FFFA  
                          STR_4 FF94                            STR_5 FFB1                            STR_6 FF62  
                          STR_7 FF73                            STR_8 FF3E                            STR_9 FE8E  
                          _T0IE 007F95                            _T0IF 007F92                            _LATA 000F89  
                          _LATB 000F8A                            _LATC 000F8B                            _LATD 000F8C  
                          _LATE 000F8D                            u4010 104C                            u4020 1068  
                          u4110 117C                            u4030 1098                            u5000 0560  
                          u4200 0838                            u5010 0592                            u4210 0870  
                          u5020 05C6                            u4300 0A00                            u4117 1172  
                          u4037 108E                            u4070 1110                            u5030 05FA  
                          u4207 082E                            u4400 19D6                            u5040 062E  
                          u4217 0866                            u4090 1146                            u5050 0662  
                          u4250 0916                            u5140 0E1A                            u4077 1106  
                          u4501 147E                            u5070 06E0                            u4190 07F4  
                          u4158 0748                            u4407 19CC                            u4511 15AE  
                          u4600 1366                            u4360 0B80                            u4248 08A6  
                          u4097 113C                            u4257 090C                            u4370 0BB0  
                          u4338 0A38                            u3820 1A16                            u4540 1236  
                          u3900 0F34                            u4700 0172                            u4380 0BBA  
                          u4188 07C2                            u4197 07EA                            u4189 07F6  
                          u4390 1998                            u4630 13E2                            u3910 0F64  
                          u4358 0B30                            u5095 1CE2                            u5407 0D8E  
                          u4480 1C2C                            u4377 0BA6                            u5417 0E06  
                          u4570 12CE                            u3930 0F9A                            u4714 0184  
                          u3850 1C6A                            u5507 1E04                            u4731 0198  
                          u4715 0180                            u5427 0E28                            u5347 1BAA  
                          u4397 198E                            u3917 0F5A                            u5517 0EF8  
                          u5437 0E3E                            u5357 1BC0                            u3950 0FD8  
                          u4670 00F2                            u3775 1AA0                            u5607 1D6C  
                          u5527 0F0E                            u5447 0E96                            u5367 0C74  
                          u3776 1AA2                            u4680 0102                            u3785 1AE0  
                          u5617 1DA0                            u5537 1FFA                            u3937 0F90  
                          u5457 0020                            u5377 0C8A                            u3786 1AE2  
                          u4770 0268                            u5627 200E                            u3875 1FCA  
                          u5547 120E                            u5467 0036                            u5387 0D42  
                          u3876 1FCC                            u3980 1028                            u4940 0450  
                          u4860 02D4                            u5637 1A88                            u5557 1260  
                          u3957 0FCE                            u5477 00D2                            u5397 0D78  
                          u5647 1A92                            u5567 12A6                            u5487 04C6  
                          u4960 047A                            u5657 1AC8                            u5577 12F8  
                          u5497 1F7A                            u4890 0320                            u5667 1AD2  
                          u5587 133E                            u3987 101E                            u5597 1390  
                          u4990 053C                            _main 1B5E        __end_of_interruptHandler 1950  
                  ___ftpack@arg 0001                    ___ftpack@exp 0004    __end_of_assemblyStepEncoding FCCF  
                          fsr0h 000FEA                            fsr1h 000FE2                            indf0 000FEF  
                          fsr2h 000FDA                            fsr0l 000FE9                            indf2 000FDF  
                          fsr1l 000FE1                            fsr2l 000FD9                __end_of_I2C_Send 19E2  
                          btemp 0059                            prodh 000FF4                            prodl 000FF3  
                          start 000E                   __CFG_IESO$OFF 000000                   __CFG_MCLRE$ON 000000  
                  ___param_bank 000000                __end_of_LCD_LEFT FCD1                 mainMenu@endTime 01F1  
               ??_printErrorLCD 008C           I2C_Master_Read@ackBit 0028                ?_I2C_Master_Init 002F  
              ?_I2C_Master_Read 0001                ?_I2C_Master_Wait 0001                ?_I2C_Master_Stop 0001  
                         ?_main 0001                 __end_of___ftadd 175C                           STR_10 FFF3  
                         STR_11 FF00                           STR_20 FFCC                           STR_12 FF51  
                         STR_21 FFD8                           STR_13 FECD                           STR_22 FF84  
                         STR_14 FEE7                           STR_23 FFEC                           STR_15 FFA3  
                         STR_16 FEAF                           STR_17 FF2B                           STR_18 FF16  
                         STR_19 FFE3                 __end_of___lldiv 1A66                 __end_of___llmod 1CAE  
                         i2l136 1904                           i2l810 17B8                           i2l811 17A2  
                         i2l813 17E0                           i2l814 17D6                           i2l807 1784  
                         i2l808 177A                           i2l842 162C                           i2l852 1688  
                         i2l861 16C6                           i2l853 167E                           i2l862 16BC  
                         i2l838 1602                           i2l847 1692                           i2l864 16EA  
                         i2l865 1706                           i2l866 1736                           _TMR0H 000FD7  
                         _TMR0L 000FD6                           _PORTB 000F81                 __end_of__doprnt 0BC4  
                         _TRISA 000F92                           _TRISB 000F93                           _TRISC 000F94  
                         _TRISD 000F95                           _TRISE 000F96            printStringLCD@string 002D  
               mainMenu@pressed 01F7                   __CFG_PWRT$OFF 000000              RTC_getSeconds@time 0080  
                 __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000                   __CFG_WRT2$OFF 000000  
                 __CFG_WRT3$OFF 000000                 __end_of_lcdInst 2016                  __CFG_EBTR0$OFF 000000  
                __CFG_FCMEN$OFF 000000                  __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000  
                __CFG_EBTR3$OFF 000000                   __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000  
                 __CFG_WRTD$OFF 000000                 __end_of_errMsgs FDB6                 __end_of_initLCD 1DB2  
                __CFG_EBTRB$OFF 000000                 __end_of_dpowers FCA9                   ___ftpack@sign 0005  
                         _putch 1FEE                           pclath 000FFA                           tablat 000FF5  
             _LCDinterruptState 0058                           plusw1 000FE3                           plusw2 000FDB  
                         status 000FD8     I2C_Master_Read@receivedByte 0029                           wtemp6 005A  
               __end_of_sprintf 1DF6                _timeSinceLastTic 0055                 __initialization 1D0C  
                  __end_of_main 1BD4                  _RTC_getSeconds 1AE4               ?_lcd_shift_cursor 002A  
                __CFG_OSC$HSPLL 000000               __end_of_LCD_RIGHT FCD2                          ??_main 00EE  
            ??_lcd_shift_cursor 002B                   __activetblptr 000003                  packaging@F3188 0100  
             ?_I2C_Master_Start 0001               ?_I2C_Master_Write 0028                       I2C_Send@i 0030  
            ??_I2C_Master_Start 0028              ??_I2C_Master_Write 002A                ___llmod@dividend 0085  
                        ?_putch 0001                __end_of___ftpack 180A                          u330_41 15D4  
                        u329_41 15C0                   inputEntry@msg 0092                          _TMR0IE 007F95  
                 inputEntry@sum 00D7                          _SSPADD 000FC8                          _SSPBUF 000FC9  
              __end_of_clearing 1402                  __CFG_XINST$OFF 000000          __end_of_RTC_getSeconds 1B5E  
              __end_of_mainMenu 0ECE                    RTC_getTime@i 002C                          ___wmul 1F88  
                     ??___ftadd 000F                  __CFG_STVREN$ON 000000                __end_of_nanoAddr FCD0  
                     ??___lldiv 002F                       ??___llmod 002F                       ??__doprnt 0030  
                        _params 0033                          clear_0 1D4A                          clear_1 1D56  
                        _extras 004D                    __doprnt@flag 0095                ??_printStringLCD 002F  
                     ??_lcdInst 0029                          _printf 1E72                __end_of_tmr0_ISR 1F0E  
                  __doprnt@prec 0093                          _strcpy 1EAA                       ??_initLCD 002A  
          _assemblyStepEncoding FCCA                       ?_I2C_Send 002A                    __mediumconst FC80  
              __end_of_viewLogs 1F62                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8                       ??_sprintf 0032            __end_of_LCDMenuIcons FCCA  
                    __accesstop 0080         __end_of__initialization 1D5C                 __CFG_PBADEN$OFF 000000  
                    ___ftadd@f1 0009                      ___ftadd@f2 000C                   ___rparam_used 000001  
               ?_RTC_getSeconds 002D                  __pcstackCOMRAM 0001                    __pidataBANK0 2042  
                  __pidataBANK1 180A                 viewLogs@pressed 008A                   __end_of_putch 2002  
                  ?_RTC_getTime 002A                ??_lcd_set_cursor 002E              __size_of_lcdNibble 007E  
                    ??_I2C_Send 002C                     inputEntry@i 00E7                    packaging@msg 01A3  
                  packaging@set 01E5              __size_of_hibernate 003C                      __doprnt@ap 0091  
                    __doprnt@cp 009A                      __doprnt@pb 008D                         ??_putch 0029  
                    __pbssBANK0 00EF              __size_of_packaging 01AE             mainMenu@needToPrint 01F5  
             ?_interruptHandler 0001              ??_interruptHandler 0015             _inputEntryQuestions FDB6  
                       ?___wmul 0027                       ?___ftpack 0001                         ?_printf 009D  
                  I2C_Send@data 002A                         ?_strcpy 002D                  inputEntry@done 00CD  
                     ?_clearing 0001                  inputEntry@numB 00D9                  inputEntry@numN 00DB  
                inputEntry@numS 00DD                  inputEntry@numW 00DF                         _SSPCON1 000FC6  
                       _SSPCON2 000FC5                         _SSPSTAT 000FC7                       ?_mainMenu 0001  
                     ?_tmr0_ISR 0001               mainMenu@startTime 01ED               __end_of_lcdNibble 1AE4  
             mainMenu@totalTime 01E9                         __Hparam 0000                         __Lparam 0000  
             __end_of_hibernate 1E72                       ?_viewLogs 0001                         ___ftadd 15B0  
                       ___lldiv 19E2                 __size_of___wmul 0026                         ___llmod 1C46  
                       __doprnt 0710                         __pcinit 1D0C                      ??___ftpack 0006  
                       __ramtop 1000           __end_of_printErrorLCD 1F88                         _lcdInst 2002  
             __end_of_packaging 15B0                         __ptext0 1B5E                         __ptext1 0BC4  
                       __ptext2 1F3C                         __ptext3 1E72                         __ptext4 1402  
                       __ptext5 1DB2                         __ptext6 0710                         __ptext7 1C46  
                       __ptext8 0012                         __ptext9 1EAA                 __size_of_printf 0038  
                     _T0CONbits 000FD5                         _errMsgs FCD6                 __size_of_strcpy 0032  
                       _initLCD 1D66                         _dpowers FC81      printStringLCD@newlineIndex 0084  
                     _LCD_RIGHT FCD1                      _inputEntry 0012        __size_of_I2C_Master_Init 005E  
      __size_of_I2C_Master_Read 0024                      ??_clearing 0080        __size_of_I2C_Master_Wait 0012  
      __size_of_I2C_Master_Stop 0008        printStringLCD@spaceIndex 0082                 printStringLCD@i 0088  
               printStringLCD@j 0080                         _sprintf 1DB2                  __pintcode_body 18AE  
     __size_of_lcd_shift_cursor 001C            end_of_initialization 1D5C                      ??_mainMenu 00EA  
         __end_of_LCD_SIZE_HORZ FCD4           __end_of_LCD_SIZE_VERT FCD3        inputEntry@fastenerString 00AA  
                       int_func 18AE                      ??_tmr0_ISR 0015       __size_of_I2C_Master_Start 0008  
     __size_of_I2C_Master_Write 000A                 ___lldiv@divisor 002B                 ___lldiv@counter 0084  
                    _pollKeypad 1F0E                         printf@f 009D                         postdec1 000FE5  
                       postdec2 000FDD                      ??_viewLogs 0032                         postinc0 000FEE  
                       postinc2 000FDE       inputEntry@doneCompartment 00D5                    _LCDMenuIcons FCBA  
                     _PORTAbits 000F80                       _PORTBbits 000F81            __size_of_RTC_getTime 0072  
                     _TRISCbits 000F94               __size_of_I2C_Send 0092    inputEntry@compartmentsToFill 00CC  
              ??_RTC_getSeconds 0031       lcd_shift_cursor@direction 002A                  __end_of___wmul 1FAE  
            pollKeypad@keypress 0027                  __end_of_printf 1EAA                  __end_of_strcpy 1EDC  
           start_initialization 1D0C                     ?_inputEntry 0001            inputEntry@numPressed 00E3  
             ??_I2C_Master_Init 0085               ??_I2C_Master_Read 0028               ??_I2C_Master_Wait 0027  
             ??_I2C_Master_Stop 0028                 ___llmod@divisor 0089                 ___llmod@counter 002F  
                 packaging@msg2 01C5         packaging@compartmentNum 01E7                     ?_pollKeypad 0001  
                      ??___wmul 002B                     __doprnt@val 0096        I2C_Master_Init@clockFreq 002F  
                   __pdataBANK0 00F7                     __pdataBANK1 0100                __CFG_LPT1OSC$OFF 000000  
                      ??_printf 0032       __size_of_interruptHandler 1948                        ??_strcpy 0031  
             __size_of___ftpack 00AE                     __pbssCOMRAM 0033                hibernate@pressed 008E  
                 __pcstackBANK0 0080                   __pcstackBANK1 01A3        inputEntry@inputEntryStep 00E1  
              _lcd_shift_cursor 1FD2         __size_of_printStringLCD 02C4               __size_of_clearing 0270  
               RTC_getTime@time 002A                       __doprnt@c 009C                       __doprnt@f 008F  
             __size_of_mainMenu 030A                _I2C_Master_Start 203A                _I2C_Master_Write 2028  
             __CFG_CCP2MX$PORTC 000000               __size_of_tmr0_ISR 0032             __size_of_inputEntry 06FE  
                     __pintcode 0008                   __pmediumconst FC80                       _lcdNibble 1A66  
                      ?___ftadd 0009                        ?___lldiv 0027                        ?___llmod 0085  
                      ?__doprnt 008D               __size_of_viewLogs 0026                       _hibernate 1E36  
                      ?_lcdInst 0001                       _dispensed 00EF                        ?_initLCD 0001  
                      _I2C_Send 1950                       _packaging 1402             __size_of_pollKeypad 002E  
                      ?_sprintf 009D                  __size_of_putch 0014                 inputEntry@F3167 00F7  
               inputEntry@F3188 0122             __end_of_keypadChars FCBA                        _LCD_LEFT FCD0  
       __size_of_lcd_set_cursor 0040                  _fastenerMatrix FE3A                  ___wmul@product 002B  
                      _LATBbits 000F8A                        _LATCbits 000F8B      inputEntry@compartmentLabel 00CA  
                      _LATDbits 000F8C                       clearing@i 0084                 lcd_set_cursor@i 002F  
               lcd_set_cursor@x 0030                 lcd_set_cursor@y 002D                        i2u333_40 15F4  
                      i2u262_40 176C                        i2u343_40 169A                        i2u336_40 161E  
                      i2u266_40 17EA                        i2u346_40 16CE                        i2u339_40 165C  
               inputEntry@found 00CF                __CFG_WDTPS$32768 000000                      ?_lcdNibble 0001  
      inputEntry@compartmentNum 00E5     __end_of_inputEntryQuestions FE3A                      ?_hibernate 0001  
             ___wmul@multiplier 0027                   lcdNibble@data 0028                   lcdNibble@temp 0027  
         RTC_getSeconds@seconds 0087                      ?_packaging 0001                       mainMenu@i 01F9  
                _LCD_HORZ_LIMIT FCD5             inputEntry@setIsGood 00D1                       copy_data0 1D20  
        __end_of_fastenerMatrix FE8E         inputEntry@doneMultiples 00D3          __size_of_printErrorLCD 0026  
                      __Hrparam 0000                        __Lrparam 0000              __CFG_BOREN$SBORDIS 000000  
                      _fSLookup 013A                 I2C_Send@address 002F                __size_of___ftadd 01AC  
              __size_of___lldiv 0084                __size_of___llmod 0068                   ??_RTC_getTime 002C  
                      ___ftpack 175C                __size_of__doprnt 04B4                _interruptHandler 0008  
              __size_of_lcdInst 0014                 _I2C_Master_Init 1CAE                 _I2C_Master_Read 1FAE  
              __size_of_initLCD 004C                 _I2C_Master_Wait 2016                 _I2C_Master_Stop 2032  
        __end_of_LCD_HORZ_LIMIT FCD6                    ??_inputEntry 008E                     _keypadChars FCA9  
                      _clearing 1192                        __ptext10 1F62                        __ptext11 1DF6  
                      __ptext20 1F88                        __ptext12 1FD2                        __ptext21 1BD4  
                      __ptext13 1E36                        __ptext30 1CAE                        __ptext22 2028  
                      __ptext14 0ECE                        __ptext31 19E2                        __ptext23 2032  
                      __ptext15 1FEE                        __ptext24 203A                        __ptext16 1F0E  
                      __ptext33 1EDC                        __ptext25 1FAE                        __ptext17 1192  
                      __ptext34 15B0                        __ptext26 2016                        __ptext18 1950  
                      __ptext35 175C                        __ptext27 1D66                        __ptext19 1AE4  
                      __ptext36 0000                        __ptext28 2002                        __ptext29 1A66  
                _printStringLCD 0ECE                  _LCD_VERT_LIMIT FCD4                        _mainMenu 0BC4  
              __size_of_sprintf 0044                        _nanoAddr FCCF                      strcpy@from 002F  
                 __size_of_main 0076                        _tmr0_ISR 1EDC                    ??_pollKeypad 0027  
                   ??_lcdNibble 0027                        _viewLogs 1F3C              __end_of_inputEntry 0710  
                      int$flags 0059        __end_of_lcd_shift_cursor 1FEE                     ??_hibernate 008A  
   I2C_Master_Write@byteToWrite 0028                   _printErrorLCD 1F62               lcd_shift_cursor@n 002C  
                     putch@data 0029        __end_of_I2C_Master_Start 2042        __end_of_I2C_Master_Write 2032  
                    _INTCONbits 000FF2                     ??_packaging 00AF          __end_of_printStringLCD 1192  
        __end_of_LCD_VERT_LIMIT FCD5             __end_of_RTC_getTime 1C46  printStringLCD@newlineCharIndex 0086  
            __end_of_pollKeypad 1F3C                        intlevel2 0000                  _lcd_set_cursor 1DF6  
                     sprintf@ap 00A9                       sprintf@pb 00AB                       sprintf@wh 009D  
                 _LCD_SIZE_HORZ FCD3                   _LCD_SIZE_VERT FCD2                ___lldiv@dividend 0027  
                      printf@ap 00A7                        printf@pb 00A9         __size_of_RTC_getSeconds 007A  
       __end_of_I2C_Master_Init 1D0C         __end_of_I2C_Master_Read 1FD2         __end_of_I2C_Master_Wait 2028  
       __end_of_I2C_Master_Stop 203A                     lcdInst@data 0029               inputEntry@pressed 00E9  
                ?_printErrorLCD 008A                        sprintf@f 009F                ___lldiv@quotient 0080  
                      strcpy@cp 0031                        strcpy@to 002D                 ?_printStringLCD 002D  
                   _SSPCON1bits 000FC6                     _SSPCON2bits 000FC5          __end_of_lcd_set_cursor 1E36  
      lcd_shift_cursor@numChars 002B                clearing@spinTime 0082  
