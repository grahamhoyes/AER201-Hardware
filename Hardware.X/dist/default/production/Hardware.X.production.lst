

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Feb 22 16:53:40 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    39                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    40  0000                     
    41                           ; Version 1.45
    42                           ; Generated 16/11/2017 GMT
    43                           ; 
    44                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC18F4620 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75  0000                     
    76                           	psect	idataBANK0
    77  00EDD1                     __pidataBANK0:
    78                           	opt stack 0
    79                           
    80                           ;initializer for inputEntry@F3137
    81  00EDD1  53                 	db	83
    82  00EDD2  74                 	db	116
    83  00EDD3  61                 	db	97
    84  00EDD4  72                 	db	114
    85  00EDD5  74                 	db	116
    86  00EDD6  65                 	db	101
    87  00EDD7  64                 	db	100
    88  00EDD8  20                 	db	32
    89  00EDD9  69                 	db	105
    90  00EDDA  6E                 	db	110
    91  00EDDB  70                 	db	112
    92  00EDDC  75                 	db	117
    93  00EDDD  74                 	db	116
    94  00EDDE  20                 	db	32
    95  00EDDF  65                 	db	101
    96  00EDE0  6E                 	db	110
    97  00EDE1  74                 	db	116
    98  00EDE2  72                 	db	114
    99  00EDE3  79                 	db	121
   100  00EDE4  00                 	db	0
   101  00EDE5  00                 	db	0
   102                           
   103                           ;initializer for inputEntry@F3140
   104  00EDE6  43                 	db	67
   105  00EDE7  30                 	db	48
   106                           
   107                           	psect	idataBANK1
   108  00F133                     __pidataBANK1:
   109                           	opt stack 0
   110                           
   111                           ;initializer for _fSLookup
   112  00F133  4E                 	db	78
   113  00F134  4F                 	db	79
   114  00F135  4E                 	db	78
   115  00F136  45                 	db	69
   116  00F137  00                 	db	0
   117  00F138  42                 	db	66
   118  00F139  00                 	db	0
   119  00F13A  00                 	db	0
   120  00F13B  00                 	db	0
   121  00F13C  00                 	db	0
   122  00F13D  4E                 	db	78
   123  00F13E  00                 	db	0
   124  00F13F  00                 	db	0
   125  00F140  00                 	db	0
   126  00F141  00                 	db	0
   127  00F142  53                 	db	83
   128  00F143  00                 	db	0
   129  00F144  00                 	db	0
   130  00F145  00                 	db	0
   131  00F146  00                 	db	0
   132  00F147  57                 	db	87
   133  00F148  00                 	db	0
   134  00F149  00                 	db	0
   135  00F14A  00                 	db	0
   136  00F14B  00                 	db	0
   137  00F14C  42                 	db	66
   138  00F14D  4E                 	db	78
   139  00F14E  00                 	db	0
   140  00F14F  00                 	db	0
   141  00F150  00                 	db	0
   142  00F151  42                 	db	66
   143  00F152  53                 	db	83
   144  00F153  00                 	db	0
   145  00F154  00                 	db	0
   146  00F155  00                 	db	0
   147  00F156  42                 	db	66
   148  00F157  57                 	db	87
   149  00F158  00                 	db	0
   150  00F159  00                 	db	0
   151  00F15A  00                 	db	0
   152  00F15B  42                 	db	66
   153  00F15C  42                 	db	66
   154  00F15D  4E                 	db	78
   155  00F15E  00                 	db	0
   156  00F15F  00                 	db	0
   157  00F160  42                 	db	66
   158  00F161  42                 	db	66
   159  00F162  53                 	db	83
   160  00F163  00                 	db	0
   161  00F164  00                 	db	0
   162  00F165  42                 	db	66
   163  00F166  42                 	db	66
   164  00F167  57                 	db	87
   165  00F168  00                 	db	0
   166  00F169  00                 	db	0
   167  00F16A  42                 	db	66
   168  00F16B  4E                 	db	78
   169  00F16C  57                 	db	87
   170  00F16D  00                 	db	0
   171  00F16E  00                 	db	0
   172  00F16F  42                 	db	66
   173  00F170  53                 	db	83
   174  00F171  57                 	db	87
   175  00F172  00                 	db	0
   176  00F173  00                 	db	0
   177  00F174  42                 	db	66
   178  00F175  57                 	db	87
   179  00F176  57                 	db	87
   180  00F177  00                 	db	0
   181  00F178  00                 	db	0
   182  00F179  42                 	db	66
   183  00F17A  4E                 	db	78
   184  00F17B  4E                 	db	78
   185  00F17C  57                 	db	87
   186  00F17D  00                 	db	0
   187  00F17E  42                 	db	66
   188  00F17F  53                 	db	83
   189  00F180  57                 	db	87
   190  00F181  57                 	db	87
   191  00F182  00                 	db	0
   192  00F183  42                 	db	66
   193  00F184  42                 	db	66
   194  00F185  53                 	db	83
   195  00F186  57                 	db	87
   196  00F187  00                 	db	0
   197  00F188  42                 	db	66
   198  00F189  42                 	db	66
   199  00F18A  4E                 	db	78
   200  00F18B  57                 	db	87
   201  00F18C  00                 	db	0
   202  00F18D  42                 	db	66
   203  00F18E  4E                 	db	78
   204  00F18F  4E                 	db	78
   205  00F190  57                 	db	87
   206  00F191  00                 	db	0
   207  00F192  42                 	db	66
   208  00F193  4E                 	db	78
   209  00F194  4E                 	db	78
   210  00F195  4E                 	db	78
   211  00F196  00                 	db	0
   212  00F197  42                 	db	66
   213  00F198  57                 	db	87
   214  00F199  57                 	db	87
   215  00F19A  57                 	db	87
   216  00F19B  00                 	db	0
   217                           
   218                           	psect	mediumconst
   219  00FDAA                     __pmediumconst:
   220                           	opt stack 0
   221  00FDAA  00                 	db	0
   222  00FDAB                     _fastenerMatrix:
   223                           	opt stack 0
   224  00FDAB  00                 	db	0
   225  00FDAC  00                 	db	0
   226  00FDAD  00                 	db	0
   227  00FDAE  00                 	db	0
   228  00FDAF  01                 	db	1
   229  00FDB0  00                 	db	0
   230  00FDB1  00                 	db	0
   231  00FDB2  00                 	db	0
   232  00FDB3  00                 	db	0
   233  00FDB4  01                 	db	1
   234  00FDB5  00                 	db	0
   235  00FDB6  00                 	db	0
   236  00FDB7  00                 	db	0
   237  00FDB8  00                 	db	0
   238  00FDB9  01                 	db	1
   239  00FDBA  00                 	db	0
   240  00FDBB  00                 	db	0
   241  00FDBC  00                 	db	0
   242  00FDBD  00                 	db	0
   243  00FDBE  01                 	db	1
   244  00FDBF  01                 	db	1
   245  00FDC0  01                 	db	1
   246  00FDC1  00                 	db	0
   247  00FDC2  00                 	db	0
   248  00FDC3  01                 	db	1
   249  00FDC4  00                 	db	0
   250  00FDC5  01                 	db	1
   251  00FDC6  00                 	db	0
   252  00FDC7  01                 	db	1
   253  00FDC8  00                 	db	0
   254  00FDC9  00                 	db	0
   255  00FDCA  01                 	db	1
   256  00FDCB  02                 	db	2
   257  00FDCC  01                 	db	1
   258  00FDCD  00                 	db	0
   259  00FDCE  00                 	db	0
   260  00FDCF  02                 	db	2
   261  00FDD0  00                 	db	0
   262  00FDD1  01                 	db	1
   263  00FDD2  00                 	db	0
   264  00FDD3  02                 	db	2
   265  00FDD4  00                 	db	0
   266  00FDD5  00                 	db	0
   267  00FDD6  01                 	db	1
   268  00FDD7  01                 	db	1
   269  00FDD8  01                 	db	1
   270  00FDD9  00                 	db	0
   271  00FDDA  01                 	db	1
   272  00FDDB  01                 	db	1
   273  00FDDC  00                 	db	0
   274  00FDDD  01                 	db	1
   275  00FDDE  01                 	db	1
   276  00FDDF  01                 	db	1
   277  00FDE0  00                 	db	0
   278  00FDE1  00                 	db	0
   279  00FDE2  02                 	db	2
   280  00FDE3  01                 	db	1
   281  00FDE4  01                 	db	1
   282  00FDE5  00                 	db	0
   283  00FDE6  02                 	db	2
   284  00FDE7  01                 	db	1
   285  00FDE8  00                 	db	0
   286  00FDE9  01                 	db	1
   287  00FDEA  02                 	db	2
   288  00FDEB  02                 	db	2
   289  00FDEC  00                 	db	0
   290  00FDED  01                 	db	1
   291  00FDEE  01                 	db	1
   292  00FDEF  02                 	db	2
   293  00FDF0  01                 	db	1
   294  00FDF1  00                 	db	0
   295  00FDF2  01                 	db	1
   296  00FDF3  01                 	db	1
   297  00FDF4  02                 	db	2
   298  00FDF5  00                 	db	0
   299  00FDF6  01                 	db	1
   300  00FDF7  01                 	db	1
   301  00FDF8  03                 	db	3
   302  00FDF9  00                 	db	0
   303  00FDFA  00                 	db	0
   304  00FDFB  01                 	db	1
   305  00FDFC  00                 	db	0
   306  00FDFD  00                 	db	0
   307  00FDFE  03                 	db	3
   308  00FDFF                     __end_of_fastenerMatrix:
   309                           	opt stack 0
   310  00FDFF                     _keypadChars:
   311                           	opt stack 0
   312  00FDFF  31                 	db	49
   313  00FE00  32                 	db	50
   314  00FE01  33                 	db	51
   315  00FE02  42                 	db	66
   316  00FE03  34                 	db	52
   317  00FE04  35                 	db	53
   318  00FE05  36                 	db	54
   319  00FE06  4E                 	db	78
   320  00FE07  37                 	db	55
   321  00FE08  38                 	db	56
   322  00FE09  39                 	db	57
   323  00FE0A  53                 	db	83
   324  00FE0B  2A                 	db	42
   325  00FE0C  30                 	db	48
   326  00FE0D  23                 	db	35
   327  00FE0E  57                 	db	87
   328  00FE0F  00                 	db	0
   329  00FE10                     __end_of_keypadChars:
   330                           	opt stack 0
   331  00FE10                     _LCDMenuIcons:
   332                           	opt stack 0
   333  00FE10  2A                 	db	42
   334  00FE11  3C                 	db	60
   335  00FE12  2D                 	db	45
   336  00FE13  20                 	db	32
   337  00FE14  20                 	db	32
   338  00FE15  20                 	db	32
   339  00FE16  28                 	db	40
   340  00FE17  20                 	db	32
   341  00FE18  2D                 	db	45
   342  00FE19  20                 	db	32
   343  00FE1A  29                 	db	41
   344  00FE1B  20                 	db	32
   345  00FE1C  20                 	db	32
   346  00FE1D  20                 	db	32
   347  00FE1E  20                 	db	32
   348  00FE1F  00                 	db	0
   349  00FE20                     __end_of_LCDMenuIcons:
   350                           	opt stack 0
   351  00FE20                     _dpowers:
   352                           	opt stack 0
   353  00FE20  0001               	dw	1
   354  00FE22  000A               	dw	10
   355  00FE24  0064               	dw	100
   356  00FE26  03E8               	dw	1000
   357  00FE28  2710               	dw	10000
   358  00FE2A                     __end_of_dpowers:
   359                           	opt stack 0
   360  00FE2A                     _assemblyStepEncoding:
   361                           	opt stack 0
   362  00FE2A  55                 	db	85
   363  00FE2B  5B                 	db	91
   364  00FE2C  77                 	db	119
   365  00FE2D  7F                 	db	127
   366  00FE2E  FF                 	db	255
   367  00FE2F                     __end_of_assemblyStepEncoding:
   368                           	opt stack 0
   369  00FE2F                     _nanoAddr:
   370                           	opt stack 0
   371  00FE2F  10                 	db	16
   372  00FE30                     __end_of_nanoAddr:
   373                           	opt stack 0
   374  00FE30                     _LCD_LEFT:
   375                           	opt stack 0
   376  00FE30  00                 	db	0
   377  00FE31                     __end_of_LCD_LEFT:
   378                           	opt stack 0
   379  00FE31                     _LCD_RIGHT:
   380                           	opt stack 0
   381  00FE31  01                 	db	1
   382  00FE32                     __end_of_LCD_RIGHT:
   383                           	opt stack 0
   384  00FE32                     _LCD_SIZE_VERT:
   385                           	opt stack 0
   386  00FE32  02                 	db	2
   387  00FE33                     __end_of_LCD_SIZE_VERT:
   388                           	opt stack 0
   389  00FE33                     _LCD_SIZE_HORZ:
   390                           	opt stack 0
   391  00FE33  10                 	db	16
   392  00FE34                     __end_of_LCD_SIZE_HORZ:
   393                           	opt stack 0
   394  00FE34                     _LCD_VERT_LIMIT:
   395                           	opt stack 0
   396  00FE34  02                 	db	2
   397  00FE35                     __end_of_LCD_VERT_LIMIT:
   398                           	opt stack 0
   399  00FE35                     _LCD_HORZ_LIMIT:
   400                           	opt stack 0
   401  00FE35  28                 	db	40
   402  00FE36                     __end_of_LCD_HORZ_LIMIT:
   403                           	opt stack 0
   404  00FE36                     _errMsgs:
   405                           	opt stack 0
   406  00FE36  49                 	db	73
   407  00FE37  6E                 	db	110
   408  00FE38  76                 	db	118
   409  00FE39  61                 	db	97
   410  00FE3A  6C                 	db	108
   411  00FE3B  69                 	db	105
   412  00FE3C  64                 	db	100
   413  00FE3D  20                 	db	32
   414  00FE3E  65                 	db	101
   415  00FE3F  6E                 	db	110
   416  00FE40  74                 	db	116
   417  00FE41  72                 	db	114
   418  00FE42  79                 	db	121
   419  00FE43  0A                 	db	10
   420  00FE44  50                 	db	80
   421  00FE45  6C                 	db	108
   422  00FE46  65                 	db	101
   423  00FE47  61                 	db	97
   424  00FE48  73                 	db	115
   425  00FE49  65                 	db	101
   426  00FE4A  20                 	db	32
   427  00FE4B  74                 	db	116
   428  00FE4C  72                 	db	114
   429  00FE4D  79                 	db	121
   430  00FE4E  20                 	db	32
   431  00FE4F  61                 	db	97
   432  00FE50  67                 	db	103
   433  00FE51  61                 	db	97
   434  00FE52  69                 	db	105
   435  00FE53  6E                 	db	110
   436  00FE54  00                 	db	0
   437  00FE55  00                 	db	0
   438  00FE56  54                 	db	84
   439  00FE57  6F                 	db	111
   440  00FE58  6F                 	db	111
   441  00FE59  20                 	db	32
   442  00FE5A  6D                 	db	109
   443  00FE5B  61                 	db	97
   444  00FE5C  6E                 	db	110
   445  00FE5D  79                 	db	121
   446  00FE5E  20                 	db	32
   447  00FE5F  66                 	db	102
   448  00FE60  61                 	db	97
   449  00FE61  73                 	db	115
   450  00FE62  74                 	db	116
   451  00FE63  65                 	db	101
   452  00FE64  6E                 	db	110
   453  00FE65  65                 	db	101
   454  00FE66  72                 	db	114
   455  00FE67  73                 	db	115
   456  00FE68  00                 	db	0
   457  00FE69  00                 	db	0
   458  00FE6A  00                 	db	0
   459  00FE6B  00                 	db	0
   460  00FE6C  00                 	db	0
   461  00FE6D  00                 	db	0
   462  00FE6E  00                 	db	0
   463  00FE6F  00                 	db	0
   464  00FE70  00                 	db	0
   465  00FE71  00                 	db	0
   466  00FE72  00                 	db	0
   467  00FE73  00                 	db	0
   468  00FE74  00                 	db	0
   469  00FE75  00                 	db	0
   470  00FE76  54                 	db	84
   471  00FE77  6F                 	db	111
   472  00FE78  6F                 	db	111
   473  00FE79  20                 	db	32
   474  00FE7A  6D                 	db	109
   475  00FE7B  61                 	db	97
   476  00FE7C  6E                 	db	110
   477  00FE7D  79                 	db	121
   478  00FE7E  20                 	db	32
   479  00FE7F  62                 	db	98
   480  00FE80  6F                 	db	111
   481  00FE81  6C                 	db	108
   482  00FE82  74                 	db	116
   483  00FE83  73                 	db	115
   484  00FE84  00                 	db	0
   485  00FE85  00                 	db	0
   486  00FE86  00                 	db	0
   487  00FE87  00                 	db	0
   488  00FE88  00                 	db	0
   489  00FE89  00                 	db	0
   490  00FE8A  00                 	db	0
   491  00FE8B  00                 	db	0
   492  00FE8C  00                 	db	0
   493  00FE8D  00                 	db	0
   494  00FE8E  00                 	db	0
   495  00FE8F  00                 	db	0
   496  00FE90  00                 	db	0
   497  00FE91  00                 	db	0
   498  00FE92  00                 	db	0
   499  00FE93  00                 	db	0
   500  00FE94  00                 	db	0
   501  00FE95  00                 	db	0
   502  00FE96  54                 	db	84
   503  00FE97  6F                 	db	111
   504  00FE98  6F                 	db	111
   505  00FE99  20                 	db	32
   506  00FE9A  6D                 	db	109
   507  00FE9B  61                 	db	97
   508  00FE9C  6E                 	db	110
   509  00FE9D  79                 	db	121
   510  00FE9E  20                 	db	32
   511  00FE9F  6E                 	db	110
   512  00FEA0  75                 	db	117
   513  00FEA1  74                 	db	116
   514  00FEA2  73                 	db	115
   515  00FEA3  00                 	db	0
   516  00FEA4  00                 	db	0
   517  00FEA5  00                 	db	0
   518  00FEA6  00                 	db	0
   519  00FEA7  00                 	db	0
   520  00FEA8  00                 	db	0
   521  00FEA9  00                 	db	0
   522  00FEAA  00                 	db	0
   523  00FEAB  00                 	db	0
   524  00FEAC  00                 	db	0
   525  00FEAD  00                 	db	0
   526  00FEAE  00                 	db	0
   527  00FEAF  00                 	db	0
   528  00FEB0  00                 	db	0
   529  00FEB1  00                 	db	0
   530  00FEB2  00                 	db	0
   531  00FEB3  00                 	db	0
   532  00FEB4  00                 	db	0
   533  00FEB5  00                 	db	0
   534  00FEB6  54                 	db	84
   535  00FEB7  6F                 	db	111
   536  00FEB8  6F                 	db	111
   537  00FEB9  20                 	db	32
   538  00FEBA  6D                 	db	109
   539  00FEBB  61                 	db	97
   540  00FEBC  6E                 	db	110
   541  00FEBD  79                 	db	121
   542  00FEBE  20                 	db	32
   543  00FEBF  77                 	db	119
   544  00FEC0  61                 	db	97
   545  00FEC1  73                 	db	115
   546  00FEC2  68                 	db	104
   547  00FEC3  65                 	db	101
   548  00FEC4  72                 	db	114
   549  00FEC5  73                 	db	115
   550  00FEC6  00                 	db	0
   551  00FEC7  00                 	db	0
   552  00FEC8  00                 	db	0
   553  00FEC9  00                 	db	0
   554  00FECA  00                 	db	0
   555  00FECB  00                 	db	0
   556  00FECC  00                 	db	0
   557  00FECD  00                 	db	0
   558  00FECE  00                 	db	0
   559  00FECF  00                 	db	0
   560  00FED0  00                 	db	0
   561  00FED1  00                 	db	0
   562  00FED2  00                 	db	0
   563  00FED3  00                 	db	0
   564  00FED4  00                 	db	0
   565  00FED5  00                 	db	0
   566  00FED6  54                 	db	84
   567  00FED7  6F                 	db	111
   568  00FED8  6F                 	db	111
   569  00FED9  20                 	db	32
   570  00FEDA  6D                 	db	109
   571  00FEDB  61                 	db	97
   572  00FEDC  6E                 	db	110
   573  00FEDD  79                 	db	121
   574  00FEDE  20                 	db	32
   575  00FEDF  73                 	db	115
   576  00FEE0  70                 	db	112
   577  00FEE1  61                 	db	97
   578  00FEE2  63                 	db	99
   579  00FEE3  65                 	db	101
   580  00FEE4  72                 	db	114
   581  00FEE5  73                 	db	115
   582  00FEE6  00                 	db	0
   583  00FEE7  00                 	db	0
   584  00FEE8  00                 	db	0
   585  00FEE9  00                 	db	0
   586  00FEEA  00                 	db	0
   587  00FEEB  00                 	db	0
   588  00FEEC  00                 	db	0
   589  00FEED  00                 	db	0
   590  00FEEE  00                 	db	0
   591  00FEEF  00                 	db	0
   592  00FEF0  00                 	db	0
   593  00FEF1  00                 	db	0
   594  00FEF2  00                 	db	0
   595  00FEF3  00                 	db	0
   596  00FEF4  00                 	db	0
   597  00FEF5  00                 	db	0
   598  00FEF6  4E                 	db	78
   599  00FEF7  6F                 	db	111
   600  00FEF8  20                 	db	32
   601  00FEF9  66                 	db	102
   602  00FEFA  61                 	db	97
   603  00FEFB  73                 	db	115
   604  00FEFC  74                 	db	116
   605  00FEFD  65                 	db	101
   606  00FEFE  6E                 	db	110
   607  00FEFF  65                 	db	101
   608  00FF00  72                 	db	114
   609  00FF01  73                 	db	115
   610  00FF02  20                 	db	32
   611  00FF03  73                 	db	115
   612  00FF04  65                 	db	101
   613  00FF05  6C                 	db	108
   614  00FF06  65                 	db	101
   615  00FF07  63                 	db	99
   616  00FF08  74                 	db	116
   617  00FF09  65                 	db	101
   618  00FF0A  64                 	db	100
   619  00FF0B  00                 	db	0
   620  00FF0C  00                 	db	0
   621  00FF0D  00                 	db	0
   622  00FF0E  00                 	db	0
   623  00FF0F  00                 	db	0
   624  00FF10  00                 	db	0
   625  00FF11  00                 	db	0
   626  00FF12  00                 	db	0
   627  00FF13  00                 	db	0
   628  00FF14  00                 	db	0
   629  00FF15  00                 	db	0
   630  00FF16                     __end_of_errMsgs:
   631                           	opt stack 0
   632  00FF16                     _inputEntryQuestions:
   633                           	opt stack 0
   634  00FF16  41                 	db	65
   635  00FF17  73                 	db	115
   636  00FF18  73                 	db	115
   637  00FF19  65                 	db	101
   638  00FF1A  6D                 	db	109
   639  00FF1B  62                 	db	98
   640  00FF1C  6C                 	db	108
   641  00FF1D  79                 	db	121
   642  00FF1E  20                 	db	32
   643  00FF1F  73                 	db	115
   644  00FF20  74                 	db	116
   645  00FF21  65                 	db	101
   646  00FF22  70                 	db	112
   647  00FF23  73                 	db	115
   648  00FF24  0A                 	db	10
   649  00FF25  2A                 	db	42
   650  00FF26  3C                 	db	60
   651  00FF27  2D                 	db	45
   652  00FF28  20                 	db	32
   653  00FF29  20                 	db	32
   654  00FF2A  28                 	db	40
   655  00FF2B  34                 	db	52
   656  00FF2C  2D                 	db	45
   657  00FF2D  38                 	db	56
   658  00FF2E  29                 	db	41
   659  00FF2F  20                 	db	32
   660  00FF30  20                 	db	32
   661  00FF31  20                 	db	32
   662  00FF32  20                 	db	32
   663  00FF33  20                 	db	32
   664  00FF34  00                 	db	0
   665  00FF35  00                 	db	0
   666  00FF36  00                 	db	0
   667  00FF37  46                 	db	70
   668  00FF38  61                 	db	97
   669  00FF39  73                 	db	115
   670  00FF3A  74                 	db	116
   671  00FF3B  65                 	db	101
   672  00FF3C  6E                 	db	110
   673  00FF3D  65                 	db	101
   674  00FF3E  72                 	db	114
   675  00FF3F  73                 	db	115
   676  00FF40  20                 	db	32
   677  00FF41  69                 	db	105
   678  00FF42  6E                 	db	110
   679  00FF43  20                 	db	32
   680  00FF44  43                 	db	67
   681  00FF45  78                 	db	120
   682  00FF46  0A                 	db	10
   683  00FF47  2A                 	db	42
   684  00FF48  3C                 	db	60
   685  00FF49  2D                 	db	45
   686  00FF4A  28                 	db	40
   687  00FF4B  42                 	db	66
   688  00FF4C  4E                 	db	78
   689  00FF4D  53                 	db	83
   690  00FF4E  57                 	db	87
   691  00FF4F  29                 	db	41
   692  00FF50  20                 	db	32
   693  00FF51  20                 	db	32
   694  00FF52  20                 	db	32
   695  00FF53  20                 	db	32
   696  00FF54  2D                 	db	45
   697  00FF55  3E                 	db	62
   698  00FF56  23                 	db	35
   699  00FF57  00                 	db	0
   700  00FF58  48                 	db	72
   701  00FF59  6F                 	db	111
   702  00FF5A  77                 	db	119
   703  00FF5B  20                 	db	32
   704  00FF5C  6D                 	db	109
   705  00FF5D  61                 	db	97
   706  00FF5E  6E                 	db	110
   707  00FF5F  79                 	db	121
   708  00FF60  20                 	db	32
   709  00FF61  73                 	db	115
   710  00FF62  65                 	db	101
   711  00FF63  74                 	db	116
   712  00FF64  73                 	db	115
   713  00FF65  3F                 	db	63
   714  00FF66  0A                 	db	10
   715  00FF67  2A                 	db	42
   716  00FF68  3C                 	db	60
   717  00FF69  2D                 	db	45
   718  00FF6A  20                 	db	32
   719  00FF6B  20                 	db	32
   720  00FF6C  28                 	db	40
   721  00FF6D  31                 	db	49
   722  00FF6E  2D                 	db	45
   723  00FF6F  34                 	db	52
   724  00FF70  29                 	db	41
   725  00FF71  20                 	db	32
   726  00FF72  20                 	db	32
   727  00FF73  20                 	db	32
   728  00FF74  20                 	db	32
   729  00FF75  20                 	db	32
   730  00FF76  00                 	db	0
   731  00FF77  00                 	db	0
   732  00FF78  00                 	db	0
   733  00FF79  43                 	db	67
   734  00FF7A  6F                 	db	111
   735  00FF7B  6E                 	db	110
   736  00FF7C  66                 	db	102
   737  00FF7D  69                 	db	105
   738  00FF7E  72                 	db	114
   739  00FF7F  6D                 	db	109
   740  00FF80  3F                 	db	63
   741  00FF81  0A                 	db	10
   742  00FF82  2A                 	db	42
   743  00FF83  3C                 	db	60
   744  00FF84  2D                 	db	45
   745  00FF85  20                 	db	32
   746  00FF86  20                 	db	32
   747  00FF87  28                 	db	40
   748  00FF88  41                 	db	65
   749  00FF89  3A                 	db	58
   750  00FF8A  59                 	db	89
   751  00FF8B  2F                 	db	47
   752  00FF8C  42                 	db	66
   753  00FF8D  3A                 	db	58
   754  00FF8E  4E                 	db	78
   755  00FF8F  29                 	db	41
   756  00FF90  20                 	db	32
   757  00FF91  00                 	db	0
   758  00FF92  00                 	db	0
   759  00FF93  00                 	db	0
   760  00FF94  00                 	db	0
   761  00FF95  00                 	db	0
   762  00FF96  00                 	db	0
   763  00FF97  00                 	db	0
   764  00FF98  00                 	db	0
   765  00FF99  00                 	db	0
   766  00FF9A                     __end_of_inputEntryQuestions:
   767                           	opt stack 0
   768  0000                     _PORTB	set	3969
   769  0000                     _PORTBbits	set	3969
   770  0000                     _INTCONbits	set	4082
   771  0000                     _LATDbits	set	3980
   772  0000                     _SSPBUF	set	4041
   773  0000                     _SSPCON2bits	set	4037
   774  0000                     _SSPADD	set	4040
   775  0000                     _SSPCON2	set	4037
   776  0000                     _SSPCON1	set	4038
   777  0000                     _SSPSTAT	set	4039
   778  0000                     _TRISCbits	set	3988
   779  0000                     _SSPCON1bits	set	4038
   780  0000                     _TRISE	set	3990
   781  0000                     _TRISD	set	3989
   782  0000                     _TRISC	set	3988
   783  0000                     _TRISB	set	3987
   784  0000                     _TRISA	set	3986
   785  0000                     _LATE	set	3981
   786  0000                     _LATD	set	3980
   787  0000                     _LATC	set	3979
   788  0000                     _LATB	set	3978
   789  0000                     _LATA	set	3977
   790  00FF9A                     STR_3:
   791  00FF9A  30                 	db	48	;'0'
   792  00FF9B  3A                 	db	58	;':'
   793  00FF9C  53                 	db	83	;'S'
   794  00FF9D  6C                 	db	108	;'l'
   795  00FF9E  65                 	db	101	;'e'
   796  00FF9F  65                 	db	101	;'e'
   797  00FFA0  70                 	db	112	;'p'
   798  00FFA1  20                 	db	32
   799  00FFA2  31                 	db	49	;'1'
   800  00FFA3  3A                 	db	58	;':'
   801  00FFA4  42                 	db	66	;'B'
   802  00FFA5  65                 	db	101	;'e'
   803  00FFA6  67                 	db	103	;'g'
   804  00FFA7  69                 	db	105	;'i'
   805  00FFA8  6E                 	db	110	;'n'
   806  00FFA9  20                 	db	32
   807  00FFAA  0A                 	db	10
   808  00FFAB  32                 	db	50	;'2'
   809  00FFAC  3A                 	db	58	;':'
   810  00FFAD  20                 	db	32
   811  00FFAE  56                 	db	86	;'V'
   812  00FFAF  69                 	db	105	;'i'
   813  00FFB0  65                 	db	101	;'e'
   814  00FFB1  77                 	db	119	;'w'
   815  00FFB2  20                 	db	32
   816  00FFB3  4C                 	db	76	;'L'
   817  00FFB4  6F                 	db	111	;'o'
   818  00FFB5  67                 	db	103	;'g'
   819  00FFB6  73                 	db	115	;'s'
   820  00FFB7  00                 	db	0
   821  00FFB8                     STR_2:
   822  00FFB8  4E                 	db	78	;'N'
   823  00FFB9  6F                 	db	111	;'o'
   824  00FFBA  74                 	db	116	;'t'
   825  00FFBB  20                 	db	32
   826  00FFBC  74                 	db	116	;'t'
   827  00FFBD  68                 	db	104	;'h'
   828  00FFBE  65                 	db	101	;'e'
   829  00FFBF  72                 	db	114	;'r'
   830  00FFC0  65                 	db	101	;'e'
   831  00FFC1  20                 	db	32
   832  00FFC2  79                 	db	121	;'y'
   833  00FFC3  65                 	db	101	;'e'
   834  00FFC4  74                 	db	116	;'t'
   835  00FFC5  0A                 	db	10
   836  00FFC6  2A                 	db	42
   837  00FFC7  20                 	db	32
   838  00FFC8  74                 	db	116	;'t'
   839  00FFC9  6F                 	db	111	;'o'
   840  00FFCA  20                 	db	32
   841  00FFCB  72                 	db	114	;'r'
   842  00FFCC  65                 	db	101	;'e'
   843  00FFCD  74                 	db	116	;'t'
   844  00FFCE  75                 	db	117	;'u'
   845  00FFCF  72                 	db	114	;'r'
   846  00FFD0  6E                 	db	110	;'n'
   847  00FFD1  00                 	db	0
   848  00FFD2                     STR_1:
   849  00FFD2  50                 	db	80	;'P'
   850  00FFD3  72                 	db	114	;'r'
   851  00FFD4  65                 	db	101	;'e'
   852  00FFD5  73                 	db	115	;'s'
   853  00FFD6  73                 	db	115	;'s'
   854  00FFD7  20                 	db	32
   855  00FFD8  31                 	db	49	;'1'
   856  00FFD9  20                 	db	32
   857  00FFDA  74                 	db	116	;'t'
   858  00FFDB  6F                 	db	111	;'o'
   859  00FFDC  20                 	db	32
   860  00FFDD  62                 	db	98	;'b'
   861  00FFDE  65                 	db	101	;'e'
   862  00FFDF  67                 	db	103	;'g'
   863  00FFE0  69                 	db	105	;'i'
   864  00FFE1  6E                 	db	110	;'n'
   865  00FFE2  00                 	db	0
   866  00FFE3                     STR_5:
   867  00FFE3  43                 	db	67	;'C'
   868  00FFE4  25                 	db	37
   869  00FFE5  64                 	db	100	;'d'
   870  00FFE6  3A                 	db	58	;':'
   871  00FFE7  20                 	db	32
   872  00FFE8  25                 	db	37
   873  00FFE9  73                 	db	115	;'s'
   874  00FFEA  20                 	db	32
   875  00FFEB  78                 	db	120	;'x'
   876  00FFEC  25                 	db	37
   877  00FFED  64                 	db	100	;'d'
   878  00FFEE  00                 	db	0
   879  00FFEF                     STR_4:
   880  00FFEF  53                 	db	83	;'S'
   881  00FFF0  75                 	db	117	;'u'
   882  00FFF1  6D                 	db	109	;'m'
   883  00FFF2  6D                 	db	109	;'m'
   884  00FFF3  61                 	db	97	;'a'
   885  00FFF4  72                 	db	114	;'r'
   886  00FFF5  79                 	db	121	;'y'
   887  00FFF6  3A                 	db	58	;':'
   888  00FFF7  00                 	db	0
   889  00FFF8                     STR_6:
   890  00FFF8  28                 	db	40
   891  00FFF9  6E                 	db	110	;'n'
   892  00FFFA  75                 	db	117	;'u'
   893  00FFFB  6C                 	db	108	;'l'
   894  00FFFC  6C                 	db	108	;'l'
   895  00FFFD  29                 	db	41
   896  00FFFE  00                 	db	0
   897                           
   898                           ; #config settings
   899  00FFFF  00                 	db	0	; dummy byte at the end
   900  0000                     
   901                           	psect	cinit
   902  00F07E                     __pcinit:
   903                           	opt stack 0
   904  00F07E                     start_initialization:
   905                           	opt stack 0
   906  00F07E                     __initialization:
   907                           	opt stack 0
   908                           
   909                           ; Initialize objects allocated to BANK1 (105 bytes)
   910                           ; load TBLPTR registers with __pidataBANK1
   911  00F07E  0E33               	movlw	low __pidataBANK1
   912  00F080  6EF6               	movwf	tblptrl,c
   913  00F082  0EF1               	movlw	high __pidataBANK1
   914  00F084  6EF7               	movwf	tblptrh,c
   915  00F086  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   916  00F088  6EF8               	movwf	tblptru,c
   917  00F08A  EE01  F000         	lfsr	0,__pdataBANK1
   918  00F08E  EE10 F069          	lfsr	1,105
   919  00F092                     copy_data0:
   920  00F092  0009               	tblrd		*+
   921  00F094  CFF5 FFEE          	movff	tablat,postinc0
   922  00F098  50E5               	movf	postdec1,w,c
   923  00F09A  50E1               	movf	fsr1l,w,c
   924  00F09C  E1FA               	bnz	copy_data0
   925                           
   926                           ; Initialize objects allocated to BANK0 (23 bytes)
   927                           ; load TBLPTR registers with __pidataBANK0
   928  00F09E  0ED1               	movlw	low __pidataBANK0
   929  00F0A0  6EF6               	movwf	tblptrl,c
   930  00F0A2  0EED               	movlw	high __pidataBANK0
   931  00F0A4  6EF7               	movwf	tblptrh,c
   932  00F0A6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   933  00F0A8  6EF8               	movwf	tblptru,c
   934  00F0AA  EE00  F09A         	lfsr	0,__pdataBANK0
   935  00F0AE  EE10 F017          	lfsr	1,23
   936  00F0B2                     copy_data1:
   937  00F0B2  0009               	tblrd		*+
   938  00F0B4  CFF5 FFEE          	movff	tablat,postinc0
   939  00F0B8  50E5               	movf	postdec1,w,c
   940  00F0BA  50E1               	movf	fsr1l,w,c
   941  00F0BC  E1FA               	bnz	copy_data1
   942                           
   943                           ; Clear objects allocated to BANK0 (26 bytes)
   944  00F0BE  EE00  F080         	lfsr	0,__pbssBANK0
   945  00F0C2  0E1A               	movlw	26
   946  00F0C4                     clear_0:
   947  00F0C4  6AEE               	clrf	postinc0,c
   948  00F0C6  06E8               	decf	wreg,f,c
   949  00F0C8  E1FD               	bnz	clear_0
   950                           
   951                           ; Clear objects allocated to COMRAM (1 bytes)
   952  00F0CA  6A7E               	clrf	__pbssCOMRAM& (0+255),c
   953  00F0CC                     end_of_initialization:
   954                           	opt stack 0
   955  00F0CC                     __end_of__initialization:
   956                           	opt stack 0
   957  00F0CC  0100               	movlb	0
   958  00F0CE  EF69  F078         	goto	_main	;jump to C main() function
   959                           tblptru	equ	0xFF8
   960                           tblptrh	equ	0xFF7
   961                           tblptrl	equ	0xFF6
   962                           tablat	equ	0xFF5
   963                           postinc0	equ	0xFEE
   964                           wreg	equ	0xFE8
   965                           postdec1	equ	0xFE5
   966                           fsr1l	equ	0xFE1
   967                           
   968                           	psect	bssCOMRAM
   969  00007E                     __pbssCOMRAM:
   970                           	opt stack 0
   971  00007E                     _LCDinterruptState:
   972                           	opt stack 0
   973  00007E                     	ds	1
   974                           tblptru	equ	0xFF8
   975                           tblptrh	equ	0xFF7
   976                           tblptrl	equ	0xFF6
   977                           tablat	equ	0xFF5
   978                           postinc0	equ	0xFEE
   979                           wreg	equ	0xFE8
   980                           postdec1	equ	0xFE5
   981                           fsr1l	equ	0xFE1
   982                           
   983                           	psect	bssBANK0
   984  000080                     __pbssBANK0:
   985                           	opt stack 0
   986  000080                     _params:
   987                           	opt stack 0
   988  000080                     	ds	26
   989                           tblptru	equ	0xFF8
   990                           tblptrh	equ	0xFF7
   991                           tblptrl	equ	0xFF6
   992                           tablat	equ	0xFF5
   993                           postinc0	equ	0xFEE
   994                           wreg	equ	0xFE8
   995                           postdec1	equ	0xFE5
   996                           fsr1l	equ	0xFE1
   997                           
   998                           	psect	dataBANK0
   999  00009A                     __pdataBANK0:
  1000                           	opt stack 0
  1001  00009A                     inputEntry@F3137:
  1002                           	opt stack 0
  1003  00009A                     	ds	21
  1004  0000AF                     inputEntry@F3140:
  1005                           	opt stack 0
  1006  0000AF                     	ds	2
  1007                           tblptru	equ	0xFF8
  1008                           tblptrh	equ	0xFF7
  1009                           tblptrl	equ	0xFF6
  1010                           tablat	equ	0xFF5
  1011                           postinc0	equ	0xFEE
  1012                           wreg	equ	0xFE8
  1013                           postdec1	equ	0xFE5
  1014                           fsr1l	equ	0xFE1
  1015                           
  1016                           	psect	dataBANK1
  1017  000100                     __pdataBANK1:
  1018                           	opt stack 0
  1019  000100                     _fSLookup:
  1020                           	opt stack 0
  1021  000100                     	ds	105
  1022                           tblptru	equ	0xFF8
  1023                           tblptrh	equ	0xFF7
  1024                           tblptrl	equ	0xFF6
  1025                           tablat	equ	0xFF5
  1026                           postinc0	equ	0xFEE
  1027                           wreg	equ	0xFE8
  1028                           postdec1	equ	0xFE5
  1029                           fsr1l	equ	0xFE1
  1030                           
  1031                           	psect	cstackCOMRAM
  1032  000001                     __pcstackCOMRAM:
  1033                           	opt stack 0
  1034  000001                     ??_I2C_Master_Wait:
  1035  000001                     ?___wmul:
  1036                           	opt stack 0
  1037  000001                     ?___lwdiv:
  1038                           	opt stack 0
  1039  000001                     lcdNibble@temp:
  1040                           	opt stack 0
  1041  000001                     pollKeypad@keypress:
  1042                           	opt stack 0
  1043  000001                     ___wmul@multiplier:
  1044                           	opt stack 0
  1045  000001                     ___lwdiv@dividend:
  1046                           	opt stack 0
  1047                           
  1048                           ; 2 bytes @ 0x0
  1049  000001                     	ds	1
  1050  000002                     lcdNibble@data:
  1051                           	opt stack 0
  1052  000002                     I2C_Master_Write@byteToWrite:
  1053                           	opt stack 0
  1054                           
  1055                           ; 2 bytes @ 0x1
  1056  000002                     	ds	1
  1057  000003                     lcdInst@data:
  1058                           	opt stack 0
  1059  000003                     putch@data:
  1060                           	opt stack 0
  1061  000003                     ___wmul@multiplicand:
  1062                           	opt stack 0
  1063  000003                     ___lwdiv@divisor:
  1064                           	opt stack 0
  1065                           
  1066                           ; 2 bytes @ 0x2
  1067  000003                     	ds	1
  1068  000004                     ??_initLCD:
  1069  000004                     lcd_shift_cursor@direction:
  1070                           	opt stack 0
  1071  000004                     I2C_Send@data:
  1072                           	opt stack 0
  1073                           
  1074                           ; 2 bytes @ 0x3
  1075  000004                     	ds	1
  1076  000005                     lcd_shift_cursor@numChars:
  1077                           	opt stack 0
  1078  000005                     ___wmul@product:
  1079                           	opt stack 0
  1080  000005                     ___lwdiv@quotient:
  1081                           	opt stack 0
  1082                           
  1083                           ; 2 bytes @ 0x4
  1084  000005                     	ds	1
  1085  000006                     ??_I2C_Send:
  1086  000006                     lcd_shift_cursor@n:
  1087                           	opt stack 0
  1088                           
  1089                           ; 1 bytes @ 0x5
  1090  000006                     	ds	1
  1091  000007                     lcd_set_cursor@y:
  1092                           	opt stack 0
  1093  000007                     I2C_Send@address:
  1094                           	opt stack 0
  1095  000007                     ___lwdiv@counter:
  1096                           	opt stack 0
  1097  000007                     printStringLCD@string:
  1098                           	opt stack 0
  1099  000007                     strcpy@to:
  1100                           	opt stack 0
  1101                           
  1102                           ; 2 bytes @ 0x6
  1103  000007                     	ds	1
  1104  000008                     ??_lcd_set_cursor:
  1105  000008                     ?___lwmod:
  1106                           	opt stack 0
  1107  000008                     I2C_Send@i:
  1108                           	opt stack 0
  1109  000008                     ___lwmod@dividend:
  1110                           	opt stack 0
  1111                           
  1112                           ; 2 bytes @ 0x7
  1113  000008                     	ds	1
  1114  000009                     ??_printStringLCD:
  1115  000009                     lcd_set_cursor@i:
  1116                           	opt stack 0
  1117  000009                     strcpy@from:
  1118                           	opt stack 0
  1119                           
  1120                           ; 2 bytes @ 0x8
  1121  000009                     	ds	1
  1122  00000A                     lcd_set_cursor@x:
  1123                           	opt stack 0
  1124  00000A                     ___lwmod@divisor:
  1125                           	opt stack 0
  1126                           
  1127                           ; 2 bytes @ 0x9
  1128  00000A                     	ds	1
  1129  00000B                     strcpy@cp:
  1130                           	opt stack 0
  1131                           
  1132                           ; 2 bytes @ 0xA
  1133  00000B                     	ds	1
  1134  00000C                     ___lwmod@counter:
  1135                           	opt stack 0
  1136  00000C                     printStringLCD@j:
  1137                           	opt stack 0
  1138                           
  1139                           ; 2 bytes @ 0xB
  1140  00000C                     	ds	1
  1141  00000D                     ?_printf:
  1142                           	opt stack 0
  1143  00000D                     printf@f:
  1144                           	opt stack 0
  1145                           
  1146                           ; 2 bytes @ 0xC
  1147  00000D                     	ds	1
  1148  00000E                     printStringLCD@spaceIndex:
  1149                           	opt stack 0
  1150                           
  1151                           ; 2 bytes @ 0xD
  1152  00000E                     	ds	2
  1153  000010                     printStringLCD@newlineIndex:
  1154                           	opt stack 0
  1155                           
  1156                           ; 2 bytes @ 0xF
  1157  000010                     	ds	2
  1158  000012                     printStringLCD@newlineCharIndex:
  1159                           	opt stack 0
  1160                           
  1161                           ; 2 bytes @ 0x11
  1162  000012                     	ds	2
  1163  000014                     printStringLCD@i:
  1164                           	opt stack 0
  1165                           
  1166                           ; 2 bytes @ 0x13
  1167  000014                     	ds	1
  1168  000015                     ??_printf:
  1169                           
  1170                           ; 1 bytes @ 0x14
  1171  000015                     	ds	1
  1172  000016                     ??_hibernate:
  1173  000016                     ??_viewLogs:
  1174  000016                     printf@flag:
  1175                           	opt stack 0
  1176  000016                     printErrorLCD@string:
  1177                           	opt stack 0
  1178                           
  1179                           ; 2 bytes @ 0x15
  1180  000016                     	ds	1
  1181  000017                     printf@prec:
  1182                           	opt stack 0
  1183  000017                     viewLogs@pressed:
  1184                           	opt stack 0
  1185                           
  1186                           ; 2 bytes @ 0x16
  1187  000017                     	ds	1
  1188  000018                     ??_printErrorLCD:
  1189  000018                     printf@ap:
  1190                           	opt stack 0
  1191                           
  1192                           ; 2 bytes @ 0x17
  1193  000018                     	ds	2
  1194  00001A                     ??_inputEntry:
  1195  00001A                     hibernate@pressed:
  1196                           	opt stack 0
  1197  00001A                     printf@cp:
  1198                           	opt stack 0
  1199                           
  1200                           ; 2 bytes @ 0x19
  1201  00001A                     	ds	2
  1202  00001C                     printf@val:
  1203                           	opt stack 0
  1204                           
  1205                           ; 2 bytes @ 0x1B
  1206  00001C                     	ds	2
  1207  00001E                     printf@c:
  1208                           	opt stack 0
  1209  00001E                     inputEntry@message:
  1210                           	opt stack 0
  1211                           
  1212                           ; 21 bytes @ 0x1D
  1213  00001E                     	ds	21
  1214  000033                     inputEntry@fastenerString:
  1215                           	opt stack 0
  1216                           
  1217                           ; 32 bytes @ 0x32
  1218  000033                     	ds	32
  1219  000053                     inputEntry@compartmentLabel:
  1220                           	opt stack 0
  1221                           
  1222                           ; 2 bytes @ 0x52
  1223  000053                     	ds	2
  1224  000055                     inputEntry@done:
  1225                           	opt stack 0
  1226                           
  1227                           ; 2 bytes @ 0x54
  1228  000055                     	ds	2
  1229  000057                     inputEntry@found:
  1230                           	opt stack 0
  1231                           
  1232                           ; 2 bytes @ 0x56
  1233  000057                     	ds	2
  1234  000059                     inputEntry@setIsGood:
  1235                           	opt stack 0
  1236                           
  1237                           ; 2 bytes @ 0x58
  1238  000059                     	ds	2
  1239  00005B                     inputEntry@doneMultiples:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x5A
  1243  00005B                     	ds	2
  1244  00005D                     inputEntry@compartmentsToFill:
  1245                           	opt stack 0
  1246                           
  1247                           ; 1 bytes @ 0x5C
  1248  00005D                     	ds	1
  1249  00005E                     inputEntry@doneCompartment:
  1250                           	opt stack 0
  1251                           
  1252                           ; 2 bytes @ 0x5D
  1253  00005E                     	ds	2
  1254  000060                     inputEntry@numB:
  1255                           	opt stack 0
  1256                           
  1257                           ; 2 bytes @ 0x5F
  1258  000060                     	ds	2
  1259  000062                     inputEntry@numN:
  1260                           	opt stack 0
  1261                           
  1262                           ; 2 bytes @ 0x61
  1263  000062                     	ds	2
  1264  000064                     inputEntry@numS:
  1265                           	opt stack 0
  1266                           
  1267                           ; 2 bytes @ 0x63
  1268  000064                     	ds	2
  1269  000066                     inputEntry@numW:
  1270                           	opt stack 0
  1271                           
  1272                           ; 2 bytes @ 0x65
  1273  000066                     	ds	2
  1274  000068                     inputEntry@sum:
  1275                           	opt stack 0
  1276                           
  1277                           ; 2 bytes @ 0x67
  1278  000068                     	ds	2
  1279  00006A                     inputEntry@inputEntryStep:
  1280                           	opt stack 0
  1281                           
  1282                           ; 2 bytes @ 0x69
  1283  00006A                     	ds	2
  1284  00006C                     inputEntry@numPressed:
  1285                           	opt stack 0
  1286                           
  1287                           ; 2 bytes @ 0x6B
  1288  00006C                     	ds	2
  1289  00006E                     inputEntry@compartmentNum:
  1290                           	opt stack 0
  1291                           
  1292                           ; 2 bytes @ 0x6D
  1293  00006E                     	ds	2
  1294  000070                     inputEntry@i:
  1295                           	opt stack 0
  1296                           
  1297                           ; 2 bytes @ 0x6F
  1298  000070                     	ds	2
  1299  000072                     inputEntry@pressed:
  1300                           	opt stack 0
  1301                           
  1302                           ; 1 bytes @ 0x71
  1303  000072                     	ds	1
  1304  000073                     ??_mainMenu:
  1305                           
  1306                           ; 1 bytes @ 0x72
  1307  000073                     	ds	4
  1308  000077                     mainMenu@needToPrint:
  1309                           	opt stack 0
  1310                           
  1311                           ; 2 bytes @ 0x76
  1312  000077                     	ds	2
  1313  000079                     mainMenu@pressed:
  1314                           	opt stack 0
  1315                           
  1316                           ; 2 bytes @ 0x78
  1317  000079                     	ds	2
  1318  00007B                     mainMenu@i:
  1319                           	opt stack 0
  1320                           
  1321                           ; 2 bytes @ 0x7A
  1322  00007B                     	ds	2
  1323  00007D                     ??_main:
  1324                           
  1325                           ; 1 bytes @ 0x7C
  1326  00007D                     	ds	1
  1327                           tblptru	equ	0xFF8
  1328                           tblptrh	equ	0xFF7
  1329                           tblptrl	equ	0xFF6
  1330                           tablat	equ	0xFF5
  1331                           postinc0	equ	0xFEE
  1332                           wreg	equ	0xFE8
  1333                           postdec1	equ	0xFE5
  1334                           fsr1l	equ	0xFE1
  1335                           
  1336 ;;
  1337 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1338 ;;
  1339 ;; *************** function _main *****************
  1340 ;; Defined at:
  1341 ;;		line 212 in file "main.c"
  1342 ;; Parameters:    Size  Location     Type
  1343 ;;		None
  1344 ;; Auto vars:     Size  Location     Type
  1345 ;;		None
  1346 ;; Return value:  Size  Location     Type
  1347 ;;                  1    wreg      void 
  1348 ;; Registers used:
  1349 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1350 ;; Tracked objects:
  1351 ;;		On entry : 0/0
  1352 ;;		On exit  : 0/0
  1353 ;;		Unchanged: 0/0
  1354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1357 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1358 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1359 ;;Total ram usage:        1 bytes
  1360 ;; Hardware stack levels required when called:    6
  1361 ;; This function calls:
  1362 ;;		_hibernate
  1363 ;;		_initLCD
  1364 ;;		_lcdInst
  1365 ;;		_mainMenu
  1366 ;; This function is called by:
  1367 ;;		Startup code after reset
  1368 ;; This function uses a non-reentrant model
  1369 ;;
  1370                           
  1371                           	psect	text0
  1372  00F0D2                     __ptext0:
  1373                           	opt stack 0
  1374  00F0D2                     _main:
  1375                           	opt stack 25
  1376                           
  1377                           ;main.c: 217: LATA = 0x00;
  1378                           
  1379                           ;incstack = 0
  1380  00F0D2  0E00               	movlw	0
  1381  00F0D4  6E89               	movwf	3977,c	;volatile
  1382                           
  1383                           ;main.c: 218: LATB = 0x00;
  1384  00F0D6  0E00               	movlw	0
  1385  00F0D8  6E8A               	movwf	3978,c	;volatile
  1386                           
  1387                           ;main.c: 219: LATC = 0x00;
  1388  00F0DA  0E00               	movlw	0
  1389  00F0DC  6E8B               	movwf	3979,c	;volatile
  1390                           
  1391                           ;main.c: 220: LATD = 0x00;
  1392  00F0DE  0E00               	movlw	0
  1393  00F0E0  6E8C               	movwf	3980,c	;volatile
  1394                           
  1395                           ;main.c: 221: LATE = 0x00;
  1396  00F0E2  0E00               	movlw	0
  1397  00F0E4  6E8D               	movwf	3981,c	;volatile
  1398                           
  1399                           ;main.c: 224: TRISA = 0xFF;
  1400  00F0E6  6892               	setf	3986,c	;volatile
  1401                           
  1402                           ;main.c: 225: TRISB = 0xFF;
  1403  00F0E8  6893               	setf	3987,c	;volatile
  1404                           
  1405                           ;main.c: 226: TRISC = 0x00;
  1406  00F0EA  0E00               	movlw	0
  1407  00F0EC  6E94               	movwf	3988,c	;volatile
  1408                           
  1409                           ;main.c: 227: TRISD = 0x00;
  1410  00F0EE  0E00               	movlw	0
  1411  00F0F0  6E95               	movwf	3989,c	;volatile
  1412                           
  1413                           ;main.c: 228: TRISE = 0x00;
  1414  00F0F2  0E00               	movlw	0
  1415  00F0F4  6E96               	movwf	3990,c	;volatile
  1416                           
  1417                           ;main.c: 231: initLCD();
  1418  00F0F6  ECC8  F077         	call	_initLCD	;wreg free
  1419                           
  1420                           ;main.c: 233: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1421  00F0FA  0E01               	movlw	1
  1422  00F0FC  ECD4  F076         	call	_lcdInst
  1423  00F100  0EC3               	movlw	195
  1424  00F102  6E7D               	movwf	??_main& (0+255),c
  1425  00F104  0ECD               	movlw	205
  1426  00F106                     u2087:
  1427  00F106  2EE8               	decfsz	wreg,f,c
  1428  00F108  D7FE               	bra	u2087
  1429  00F10A  2E7D               	decfsz	??_main& (0+255),f,c
  1430  00F10C  D7FC               	bra	u2087
  1431  00F10E  F000               	nop	
  1432                           
  1433                           ;main.c: 234: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1434  00F110  0E80               	movlw	128
  1435  00F112  ECD4  F076         	call	_lcdInst
  1436  00F116  0E41               	movlw	65
  1437  00F118  6E7D               	movwf	??_main& (0+255),c
  1438  00F11A  0EEE               	movlw	238
  1439  00F11C                     u2097:
  1440  00F11C  2EE8               	decfsz	wreg,f,c
  1441  00F11E  D7FE               	bra	u2097
  1442  00F120  2E7D               	decfsz	??_main& (0+255),f,c
  1443  00F122  D7FC               	bra	u2097
  1444  00F124  D000               	nop2	
  1445                           
  1446                           ;main.c: 236: hibernate();
  1447  00F126  EC6A  F077         	call	_hibernate	;wreg free
  1448                           
  1449                           ;main.c: 237: mainMenu();
  1450  00F12A  EC0D  F079         	call	_mainMenu	;wreg free
  1451  00F12E  EF00  F000         	goto	start
  1452  00F132                     __end_of_main:
  1453                           	opt stack 0
  1454                           tblptru	equ	0xFF8
  1455                           tblptrh	equ	0xFF7
  1456                           tblptrl	equ	0xFF6
  1457                           tablat	equ	0xFF5
  1458                           postinc0	equ	0xFEE
  1459                           wreg	equ	0xFE8
  1460                           postdec1	equ	0xFE5
  1461                           fsr1l	equ	0xFE1
  1462                           
  1463 ;; *************** function _mainMenu *****************
  1464 ;; Defined at:
  1465 ;;		line 25 in file "menu.c"
  1466 ;; Parameters:    Size  Location     Type
  1467 ;;		None
  1468 ;; Auto vars:     Size  Location     Type
  1469 ;;  i               2  122[COMRAM] int 
  1470 ;;  pressed         2  120[COMRAM] int 
  1471 ;;  needToPrint     2  118[COMRAM] int 
  1472 ;; Return value:  Size  Location     Type
  1473 ;;                  1    wreg      void 
  1474 ;; Registers used:
  1475 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1476 ;; Tracked objects:
  1477 ;;		On entry : 0/0
  1478 ;;		On exit  : 0/0
  1479 ;;		Unchanged: 0/0
  1480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1482 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1483 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1484 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1485 ;;Total ram usage:       10 bytes
  1486 ;; Hardware stack levels used:    1
  1487 ;; Hardware stack levels required when called:    5
  1488 ;; This function calls:
  1489 ;;		_hibernate
  1490 ;;		_inputEntry
  1491 ;;		_lcdInst
  1492 ;;		_pollKeypad
  1493 ;;		_printStringLCD
  1494 ;;		_printf
  1495 ;;		_putch
  1496 ;;		_viewLogs
  1497 ;; This function is called by:
  1498 ;;		_main
  1499 ;; This function uses a non-reentrant model
  1500 ;;
  1501                           
  1502                           	psect	text1
  1503  00F21A                     __ptext1:
  1504                           	opt stack 0
  1505  00F21A                     _mainMenu:
  1506                           	opt stack 25
  1507                           
  1508                           ;menu.c: 26: int pressed;
  1509                           ;menu.c: 27: int needToPrint = 1;
  1510                           
  1511                           ;incstack = 0
  1512  00F21A  0E00               	movlw	0
  1513  00F21C  6E78               	movwf	mainMenu@needToPrint+1,c
  1514  00F21E  0E01               	movlw	1
  1515  00F220  6E77               	movwf	mainMenu@needToPrint,c
  1516  00F222                     
  1517                           ;menu.c: 30: if (needToPrint) {
  1518  00F222  5077               	movf	mainMenu@needToPrint,w,c
  1519  00F224  1078               	iorwf	mainMenu@needToPrint+1,w,c
  1520  00F226  B4D8               	btfsc	status,2,c
  1521  00F228  D00A               	goto	l283
  1522                           
  1523                           ;menu.c: 31: printStringLCD("0:Sleep 1:Begin \n2: View Logs");
  1524  00F22A  0E9A               	movlw	low STR_3
  1525  00F22C  6E07               	movwf	printStringLCD@string,c
  1526  00F22E  0EFF               	movlw	high STR_3
  1527  00F230  6E08               	movwf	printStringLCD@string+1,c
  1528  00F232  ECA7  F07A         	call	_printStringLCD	;wreg free
  1529                           
  1530                           ;menu.c: 32: needToPrint = 0;
  1531  00F236  0E00               	movlw	0
  1532  00F238  6E78               	movwf	mainMenu@needToPrint+1,c
  1533  00F23A  0E00               	movlw	0
  1534  00F23C  6E77               	movwf	mainMenu@needToPrint,c
  1535  00F23E                     l283:
  1536                           
  1537                           ;menu.c: 33: }
  1538                           ;menu.c: 34: pressed = pollKeypad();
  1539  00F23E  EC3A  F077         	call	_pollKeypad	;wreg free
  1540  00F242  6E73               	movwf	??_mainMenu& (0+255),c
  1541  00F244  5073               	movf	??_mainMenu,w,c
  1542  00F246  6E79               	movwf	mainMenu@pressed,c
  1543  00F248  6A7A               	clrf	mainMenu@pressed+1,c
  1544                           
  1545                           ;menu.c: 35: putch(pressed);
  1546  00F24A  5079               	movf	mainMenu@pressed,w,c
  1547  00F24C  ECDE  F076         	call	_putch
  1548                           
  1549                           ;menu.c: 36: if (pressed - 48 == 0) {
  1550  00F250  0ED0               	movlw	208
  1551  00F252  6E73               	movwf	??_mainMenu& (0+255),c
  1552  00F254  0EFF               	movlw	255
  1553  00F256  6E74               	movwf	(??_mainMenu+1)& (0+255),c
  1554  00F258  C079  F075         	movff	mainMenu@pressed,??_mainMenu+2
  1555  00F25C  C07A  F076         	movff	mainMenu@pressed+1,??_mainMenu+3
  1556  00F260  5073               	movf	??_mainMenu,w,c
  1557  00F262  2675               	addwf	??_mainMenu+2,f,c
  1558  00F264  5074               	movf	??_mainMenu+1,w,c
  1559  00F266  2276               	addwfc	??_mainMenu+3,f,c
  1560  00F268  5075               	movf	??_mainMenu+2,w,c
  1561  00F26A  1076               	iorwf	??_mainMenu+3,w,c
  1562  00F26C  A4D8               	btfss	status,2,c
  1563  00F26E  D003               	goto	l284
  1564                           
  1565                           ;menu.c: 37: hibernate();
  1566  00F270  EC6A  F077         	call	_hibernate	;wreg free
  1567  00F274  D7D2               	goto	_mainMenu
  1568  00F276                     l284:
  1569  00F276  0ED0               	movlw	208
  1570  00F278  6E73               	movwf	??_mainMenu& (0+255),c
  1571  00F27A  0EFF               	movlw	255
  1572  00F27C  6E74               	movwf	(??_mainMenu+1)& (0+255),c
  1573  00F27E  C079  F075         	movff	mainMenu@pressed,??_mainMenu+2
  1574  00F282  C07A  F076         	movff	mainMenu@pressed+1,??_mainMenu+3
  1575  00F286  5073               	movf	??_mainMenu,w,c
  1576  00F288  2675               	addwf	??_mainMenu+2,f,c
  1577  00F28A  5074               	movf	??_mainMenu+1,w,c
  1578  00F28C  2276               	addwfc	??_mainMenu+3,f,c
  1579  00F28E  0475               	decf	??_mainMenu+2,w,c
  1580  00F290  1076               	iorwf	??_mainMenu+3,w,c
  1581  00F292  A4D8               	btfss	status,2,c
  1582  00F294  D06D               	goto	l286
  1583                           
  1584                           ;menu.c: 40: inputEntry();
  1585  00F296  ECFB  F07B         	call	_inputEntry	;wreg free
  1586                           
  1587                           ;menu.c: 41: printf("Summary:");
  1588  00F29A  0EEF               	movlw	low STR_4
  1589  00F29C  6E0D               	movwf	printf@f,c
  1590  00F29E  0EFF               	movlw	high STR_4
  1591  00F2A0  6E0E               	movwf	printf@f+1,c
  1592  00F2A2  ECCC  F079         	call	_printf	;wreg free
  1593                           
  1594                           ;menu.c: 42: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1595  00F2A6  0E33               	movlw	51
  1596  00F2A8  6E74               	movwf	(??_mainMenu+1)& (0+255),c
  1597  00F2AA  0EBB               	movlw	187
  1598  00F2AC  6E73               	movwf	??_mainMenu& (0+255),c
  1599  00F2AE  0EE0               	movlw	224
  1600  00F2B0                     u2107:
  1601  00F2B0  2EE8               	decfsz	wreg,f,c
  1602  00F2B2  D7FE               	bra	u2107
  1603  00F2B4  2E73               	decfsz	??_mainMenu& (0+255),f,c
  1604  00F2B6  D7FC               	bra	u2107
  1605  00F2B8  2E74               	decfsz	(??_mainMenu+1)& (0+255),f,c
  1606  00F2BA  D7FA               	bra	u2107
  1607  00F2BC                     l2226:
  1608                           
  1609                           ;menu.c: 45: for (i = 0; i < 8; i++) {
  1610  00F2BC  0E00               	movlw	0
  1611  00F2BE  6E7C               	movwf	mainMenu@i+1,c
  1612  00F2C0  0E00               	movlw	0
  1613  00F2C2  6E7B               	movwf	mainMenu@i,c
  1614  00F2C4                     l2228:
  1615  00F2C4  BE7C               	btfsc	mainMenu@i+1,7,c
  1616  00F2C6  D006               	goto	l288
  1617  00F2C8  507C               	movf	mainMenu@i+1,w,c
  1618  00F2CA  E1F8               	bnz	l2226
  1619  00F2CC  0E08               	movlw	8
  1620  00F2CE  5C7B               	subwf	mainMenu@i,w,c
  1621  00F2D0  B0D8               	btfsc	status,0,c
  1622  00F2D2  D7F4               	goto	l287
  1623  00F2D4                     l288:
  1624                           
  1625                           ;menu.c: 46: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1626  00F2D4  0E01               	movlw	1
  1627  00F2D6  ECD4  F076         	call	_lcdInst
  1628  00F2DA  0EC3               	movlw	195
  1629  00F2DC  6E73               	movwf	??_mainMenu& (0+255),c
  1630  00F2DE  0ECD               	movlw	205
  1631  00F2E0                     u2117:
  1632  00F2E0  2EE8               	decfsz	wreg,f,c
  1633  00F2E2  D7FE               	bra	u2117
  1634  00F2E4  2E73               	decfsz	??_mainMenu& (0+255),f,c
  1635  00F2E6  D7FC               	bra	u2117
  1636  00F2E8  F000               	nop	
  1637                           
  1638                           ;menu.c: 47: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1639  00F2EA  0E80               	movlw	128
  1640  00F2EC  ECD4  F076         	call	_lcdInst
  1641  00F2F0  0E41               	movlw	65
  1642  00F2F2  6E73               	movwf	??_mainMenu& (0+255),c
  1643  00F2F4  0EEE               	movlw	238
  1644  00F2F6                     u2127:
  1645  00F2F6  2EE8               	decfsz	wreg,f,c
  1646  00F2F8  D7FE               	bra	u2127
  1647  00F2FA  2E73               	decfsz	??_mainMenu& (0+255),f,c
  1648  00F2FC  D7FC               	bra	u2127
  1649  00F2FE  D000               	nop2	
  1650                           
  1651                           ;menu.c: 48: printf("C%d: %s x%d", i+1, fSLookup[params.toFill[i]], params.setMultiple[i
      +                          ]);
  1652  00F300  0EE3               	movlw	low STR_5
  1653  00F302  6E0D               	movwf	printf@f,c
  1654  00F304  0EFF               	movlw	high STR_5
  1655  00F306  6E0E               	movwf	printf@f+1,c
  1656  00F308  0E01               	movlw	1
  1657  00F30A  247B               	addwf	mainMenu@i,w,c
  1658  00F30C  6E0F               	movwf	?_printf+2,c
  1659  00F30E  0E00               	movlw	0
  1660  00F310  207C               	addwfc	mainMenu@i+1,w,c
  1661  00F312  6E10               	movwf	?_printf+3,c
  1662  00F314  0E82               	movlw	low (_params+2)
  1663  00F316  247B               	addwf	mainMenu@i,w,c
  1664  00F318  6ED9               	movwf	fsr2l,c
  1665  00F31A  0E00               	movlw	high (_params+2)
  1666  00F31C  207C               	addwfc	mainMenu@i+1,w,c
  1667  00F31E  6EDA               	movwf	fsr2h,c
  1668  00F320  50DF               	movf	indf2,w,c
  1669  00F322  6E73               	movwf	??_mainMenu& (0+255),c
  1670  00F324  5073               	movf	??_mainMenu,w,c
  1671  00F326  0D05               	mullw	5
  1672  00F328  0E00               	movlw	low _fSLookup
  1673  00F32A  24F3               	addwf	prodl,w,c
  1674  00F32C  6E11               	movwf	?_printf+4,c
  1675  00F32E  0E01               	movlw	high _fSLookup
  1676  00F330  20F4               	addwfc	prodh,w,c
  1677  00F332  6E12               	movwf	?_printf+5,c
  1678  00F334  90D8               	bcf	status,0,c
  1679  00F336  347B               	rlcf	mainMenu@i,w,c
  1680  00F338  6ED9               	movwf	fsr2l,c
  1681  00F33A  347C               	rlcf	mainMenu@i+1,w,c
  1682  00F33C  6EDA               	movwf	fsr2h,c
  1683  00F33E  0E8A               	movlw	low (_params+10)
  1684  00F340  26D9               	addwf	fsr2l,f,c
  1685  00F342  0E00               	movlw	high (_params+10)
  1686  00F344  22DA               	addwfc	fsr2h,f,c
  1687  00F346  CFDE F013          	movff	postinc2,?_printf+6
  1688  00F34A  CFDD F014          	movff	postdec2,?_printf+7
  1689  00F34E  ECCC  F079         	call	_printf	;wreg free
  1690                           
  1691                           ;menu.c: 49: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1692  00F352  0E66               	movlw	102
  1693  00F354  6E74               	movwf	(??_mainMenu+1)& (0+255),c
  1694  00F356  0E76               	movlw	118
  1695  00F358  6E73               	movwf	??_mainMenu& (0+255),c
  1696  00F35A  0EC1               	movlw	193
  1697  00F35C                     u2137:
  1698  00F35C  2EE8               	decfsz	wreg,f,c
  1699  00F35E  D7FE               	bra	u2137
  1700  00F360  2E73               	decfsz	??_mainMenu& (0+255),f,c
  1701  00F362  D7FC               	bra	u2137
  1702  00F364  2E74               	decfsz	(??_mainMenu+1)& (0+255),f,c
  1703  00F366  D7FA               	bra	u2137
  1704  00F368  F000               	nop	
  1705  00F36A  4A7B               	infsnz	mainMenu@i,f,c
  1706  00F36C  2A7C               	incf	mainMenu@i+1,f,c
  1707  00F36E  D7AA               	goto	l2228
  1708  00F370                     l286:
  1709  00F370  0ED0               	movlw	208
  1710  00F372  6E73               	movwf	??_mainMenu& (0+255),c
  1711  00F374  0EFF               	movlw	255
  1712  00F376  6E74               	movwf	(??_mainMenu+1)& (0+255),c
  1713  00F378  C079  F075         	movff	mainMenu@pressed,??_mainMenu+2
  1714  00F37C  C07A  F076         	movff	mainMenu@pressed+1,??_mainMenu+3
  1715  00F380  5073               	movf	??_mainMenu,w,c
  1716  00F382  2675               	addwf	??_mainMenu+2,f,c
  1717  00F384  5074               	movf	??_mainMenu+1,w,c
  1718  00F386  2276               	addwfc	??_mainMenu+3,f,c
  1719  00F388  0E02               	movlw	2
  1720  00F38A  1875               	xorwf	??_mainMenu+2,w,c
  1721  00F38C  1076               	iorwf	??_mainMenu+3,w,c
  1722  00F38E  A4D8               	btfss	status,2,c
  1723  00F390  D748               	goto	l282
  1724                           
  1725                           ;menu.c: 53: viewLogs();
  1726  00F392  EC02  F077         	call	_viewLogs	;wreg free
  1727  00F396  D741               	goto	_mainMenu
  1728  00F398                     __end_of_mainMenu:
  1729                           	opt stack 0
  1730                           tblptru	equ	0xFF8
  1731                           tblptrh	equ	0xFF7
  1732                           tblptrl	equ	0xFF6
  1733                           tablat	equ	0xFF5
  1734                           prodh	equ	0xFF4
  1735                           prodl	equ	0xFF3
  1736                           postinc0	equ	0xFEE
  1737                           wreg	equ	0xFE8
  1738                           postdec1	equ	0xFE5
  1739                           fsr1l	equ	0xFE1
  1740                           indf2	equ	0xFDF
  1741                           postinc2	equ	0xFDE
  1742                           postdec2	equ	0xFDD
  1743                           fsr2h	equ	0xFDA
  1744                           fsr2l	equ	0xFD9
  1745                           status	equ	0xFD8
  1746                           
  1747 ;; *************** function _viewLogs *****************
  1748 ;; Defined at:
  1749 ;;		line 17 in file "menu.c"
  1750 ;; Parameters:    Size  Location     Type
  1751 ;;		None
  1752 ;; Auto vars:     Size  Location     Type
  1753 ;;  pressed         2   22[COMRAM] int 
  1754 ;; Return value:  Size  Location     Type
  1755 ;;                  1    wreg      void 
  1756 ;; Registers used:
  1757 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1758 ;; Tracked objects:
  1759 ;;		On entry : 0/0
  1760 ;;		On exit  : 0/0
  1761 ;;		Unchanged: 0/0
  1762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1764 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1765 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1766 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1767 ;;Total ram usage:        3 bytes
  1768 ;; Hardware stack levels used:    1
  1769 ;; Hardware stack levels required when called:    3
  1770 ;; This function calls:
  1771 ;;		_pollKeypad
  1772 ;;		_printStringLCD
  1773 ;; This function is called by:
  1774 ;;		_mainMenu
  1775 ;; This function uses a non-reentrant model
  1776 ;;
  1777                           
  1778                           	psect	text2
  1779  00EE04                     __ptext2:
  1780                           	opt stack 0
  1781  00EE04                     _viewLogs:
  1782                           	opt stack 26
  1783                           
  1784                           ;menu.c: 18: printStringLCD("Not there yet\n* to return");
  1785                           
  1786                           ;incstack = 0
  1787  00EE04  0EB8               	movlw	low STR_2
  1788  00EE06  6E07               	movwf	printStringLCD@string,c
  1789  00EE08  0EFF               	movlw	high STR_2
  1790  00EE0A  6E08               	movwf	printStringLCD@string+1,c
  1791  00EE0C  ECA7  F07A         	call	_printStringLCD	;wreg free
  1792  00EE10                     
  1793                           ;menu.c: 20: int pressed = pollKeypad();
  1794  00EE10  EC3A  F077         	call	_pollKeypad	;wreg free
  1795  00EE14  6E16               	movwf	??_viewLogs& (0+255),c
  1796  00EE16  5016               	movf	??_viewLogs,w,c
  1797  00EE18  6E17               	movwf	viewLogs@pressed,c
  1798  00EE1A  6A18               	clrf	viewLogs@pressed+1,c
  1799                           
  1800                           ;menu.c: 21: if (pressed == 42) return;
  1801  00EE1C  0E2A               	movlw	42
  1802  00EE1E  1817               	xorwf	viewLogs@pressed,w,c
  1803  00EE20  1018               	iorwf	viewLogs@pressed+1,w,c
  1804  00EE22  B4D8               	btfsc	status,2,c
  1805  00EE24  0012               	return	
  1806  00EE26  D7F4               	goto	l275
  1807  00EE28                     __end_of_viewLogs:
  1808                           	opt stack 0
  1809                           tblptru	equ	0xFF8
  1810                           tblptrh	equ	0xFF7
  1811                           tblptrl	equ	0xFF6
  1812                           tablat	equ	0xFF5
  1813                           prodh	equ	0xFF4
  1814                           prodl	equ	0xFF3
  1815                           postinc0	equ	0xFEE
  1816                           wreg	equ	0xFE8
  1817                           postdec1	equ	0xFE5
  1818                           fsr1l	equ	0xFE1
  1819                           indf2	equ	0xFDF
  1820                           postinc2	equ	0xFDE
  1821                           postdec2	equ	0xFDD
  1822                           fsr2h	equ	0xFDA
  1823                           fsr2l	equ	0xFD9
  1824                           status	equ	0xFD8
  1825                           
  1826 ;; *************** function _printf *****************
  1827 ;; Defined at:
  1828 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1829 ;; Parameters:    Size  Location     Type
  1830 ;;  f               2   12[COMRAM] PTR const unsigned char 
  1831 ;;		 -> STR_5(12), STR_4(9), 
  1832 ;; Auto vars:     Size  Location     Type
  1833 ;;  tmpval          4    0        struct .
  1834 ;;  val             2   27[COMRAM] unsigned int 
  1835 ;;  cp              2   25[COMRAM] PTR const unsigned char 
  1836 ;;		 -> STR_6(7), fSLookup(105), 
  1837 ;;  ap              2   23[COMRAM] PTR void [1]
  1838 ;;		 -> ?_printf(2), 
  1839 ;;  len             2    0        unsigned int 
  1840 ;;  c               1   29[COMRAM] char 
  1841 ;;  prec            1   22[COMRAM] char 
  1842 ;;  flag            1   21[COMRAM] unsigned char 
  1843 ;; Return value:  Size  Location     Type
  1844 ;;                  2   12[COMRAM] int 
  1845 ;; Registers used:
  1846 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1847 ;; Tracked objects:
  1848 ;;		On entry : 0/0
  1849 ;;		On exit  : 0/0
  1850 ;;		Unchanged: 0/0
  1851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1852 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1853 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1854 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1855 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1856 ;;Total ram usage:       18 bytes
  1857 ;; Hardware stack levels used:    1
  1858 ;; Hardware stack levels required when called:    2
  1859 ;; This function calls:
  1860 ;;		___lwdiv
  1861 ;;		___lwmod
  1862 ;;		_putch
  1863 ;; This function is called by:
  1864 ;;		_mainMenu
  1865 ;; This function uses a non-reentrant model
  1866 ;;
  1867                           
  1868                           	psect	text3
  1869  00F398                     __ptext3:
  1870                           	opt stack 0
  1871  00F398                     _printf:
  1872                           	opt stack 27
  1873                           
  1874                           ;doprnt.c: 466: va_list ap;
  1875                           ;doprnt.c: 499: signed char c;
  1876                           ;doprnt.c: 506: signed char prec;
  1877                           ;doprnt.c: 508: unsigned char flag;
  1878                           ;doprnt.c: 523: union {
  1879                           ;doprnt.c: 524: unsigned long vd;
  1880                           ;doprnt.c: 525: double integ;
  1881                           ;doprnt.c: 526: } tmpval;
  1882                           ;doprnt.c: 528: unsigned int val;
  1883                           ;doprnt.c: 529: unsigned len;
  1884                           ;doprnt.c: 530: const char * cp;
  1885                           ;doprnt.c: 533: *ap = __va_start();
  1886                           
  1887                           ;incstack = 0
  1888  00F398  0E0F               	movlw	low (?_printf+2)
  1889  00F39A  6E18               	movwf	printf@ap,c
  1890  00F39C  0E00               	movlw	high (?_printf+2)
  1891  00F39E  6E19               	movwf	printf@ap+1,c
  1892                           
  1893                           ;doprnt.c: 536: while(c = *f++) {
  1894  00F3A0  D0C8               	goto	u1970
  1895  00F3A2                     
  1896                           ;doprnt.c: 538: if(c != '%')
  1897  00F3A2  0E25               	movlw	37
  1898  00F3A4  181E               	xorwf	printf@c,w,c
  1899  00F3A6  B4D8               	btfsc	status,2,c
  1900  00F3A8  D004               	goto	l376
  1901                           
  1902                           ;doprnt.c: 540: {
  1903                           ;doprnt.c: 541: (putch(c) );
  1904  00F3AA  501E               	movf	printf@c,w,c
  1905  00F3AC  ECDE  F076         	call	_putch
  1906                           
  1907                           ;doprnt.c: 542: continue;
  1908  00F3B0  D0C0               	goto	u1970
  1909  00F3B2                     l376:
  1910                           
  1911                           ;doprnt.c: 543: }
  1912                           ;doprnt.c: 548: flag = 0;
  1913  00F3B2  0E00               	movlw	0
  1914  00F3B4  6E16               	movwf	printf@flag,c
  1915                           
  1916                           ;doprnt.c: 635: switch(c = *f++) {
  1917  00F3B6  D03F               	goto	l377
  1918  00F3B8                     
  1919                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  1920  00F3B8  C018  FFD9         	movff	printf@ap,fsr2l
  1921  00F3BC  C019  FFDA         	movff	printf@ap+1,fsr2h
  1922  00F3C0  CFDE F01A          	movff	postinc2,printf@cp
  1923  00F3C4  CFDD F01B          	movff	postdec2,printf@cp+1
  1924  00F3C8  0E02               	movlw	2
  1925  00F3CA  2618               	addwf	printf@ap,f,c
  1926  00F3CC  0E00               	movlw	0
  1927  00F3CE  2219               	addwfc	printf@ap+1,f,c
  1928                           
  1929                           ;doprnt.c: 740: if(!cp)
  1930  00F3D0  501A               	movf	printf@cp,w,c
  1931  00F3D2  101B               	iorwf	printf@cp+1,w,c
  1932  00F3D4  A4D8               	btfss	status,2,c
  1933  00F3D6  D01A               	goto	l385
  1934                           
  1935                           ;doprnt.c: 741: cp = "(null)";
  1936  00F3D8  0EF8               	movlw	low STR_6
  1937  00F3DA  6E1A               	movwf	printf@cp,c
  1938  00F3DC  0EFF               	movlw	high STR_6
  1939  00F3DE  6E1B               	movwf	printf@cp+1,c
  1940                           
  1941                           ;doprnt.c: 777: while(*cp)
  1942  00F3E0  D015               	goto	l385
  1943  00F3E2                     
  1944                           ;doprnt.c: 778: (putch(*cp++) );
  1945  00F3E2  C01A  FFF6         	movff	printf@cp,tblptrl
  1946  00F3E6  C01B  FFF7         	movff	printf@cp+1,tblptrh
  1947  00F3EA  0E00               	movlw	low (__mediumconst shr (0+16))
  1948  00F3EC  6EF8               	movwf	tblptru,c
  1949  00F3EE  0E0F               	movlw	(high __ramtop+-1)
  1950  00F3F0  64F7               	cpfsgt	tblptrh,c
  1951  00F3F2  D003               	bra	u1897
  1952  00F3F4  0008               	tblrd		*
  1953  00F3F6  50F5               	movf	tablat,w,c
  1954  00F3F8  D005               	bra	u1890
  1955  00F3FA                     u1897:
  1956  00F3FA  CFF6 FFE9          	movff	tblptrl,fsr0l
  1957  00F3FE  CFF7 FFEA          	movff	tblptrh,fsr0h
  1958  00F402  50EF               	movf	indf0,w,c
  1959  00F404                     u1890:
  1960  00F404  ECDE  F076         	call	_putch
  1961  00F408  4A1A               	infsnz	printf@cp,f,c
  1962  00F40A  2A1B               	incf	printf@cp+1,f,c
  1963  00F40C                     l385:
  1964  00F40C  C01A  FFF6         	movff	printf@cp,tblptrl
  1965  00F410  C01B  FFF7         	movff	printf@cp+1,tblptrh
  1966  00F414  0E00               	movlw	low (__mediumconst shr (0+16))
  1967  00F416  6EF8               	movwf	tblptru,c
  1968  00F418  0E0F               	movlw	(high __ramtop+-1)
  1969  00F41A  64F7               	cpfsgt	tblptrh,c
  1970  00F41C  D003               	bra	u1907
  1971  00F41E  0008               	tblrd		*
  1972  00F420  50F5               	movf	tablat,w,c
  1973  00F422  D005               	bra	u1900
  1974  00F424                     u1907:
  1975  00F424  CFF6 FFE9          	movff	tblptrl,fsr0l
  1976  00F428  CFF7 FFEA          	movff	tblptrh,fsr0h
  1977  00F42C  50EF               	movf	indf0,w,c
  1978  00F42E                     u1900:
  1979  00F42E  0900               	iorlw	0
  1980  00F430  B4D8               	btfsc	status,2,c
  1981  00F432  D07F               	goto	u1970
  1982  00F434  D7D6               	goto	l386
  1983  00F436                     l377:
  1984  00F436  C00D  FFF6         	movff	printf@f,tblptrl
  1985  00F43A  C00E  FFF7         	movff	printf@f+1,tblptrh
  1986  00F43E  4A0D               	infsnz	printf@f,f,c
  1987  00F440  2A0E               	incf	printf@f+1,f,c
  1988  00F442                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1989  00F442  6AF8               	clrf	tblptru,c
  1990  00F444                     	endif
  1991  00F444                     	if	0	;tblptru may be non-zero
  1992  00F444                     	endif
  1993  00F444  0008               	tblrd		*
  1994  00F446  CFF5 F01E          	movff	tablat,printf@c
  1995  00F44A  501E               	movf	printf@c,w,c
  1996                           
  1997                           ; Switch size 1, requested type "space"
  1998                           ; Number of cases is 4, Range of values is 0 to 115
  1999                           ; switch strategies available:
  2000                           ; Name         Instructions Cycles
  2001                           ; simple_byte           13     7 (average)
  2002                           ;	Chosen strategy is simple_byte
  2003  00F44C  0A00               	xorlw	0	; case 0
  2004  00F44E  B4D8               	btfsc	status,2,c
  2005  00F450  0012               	return	
  2006  00F452  0A64               	xorlw	100	; case 100
  2007  00F454  B4D8               	btfsc	status,2,c
  2008  00F456  D007               	goto	l382
  2009  00F458  0A0D               	xorlw	13	; case 105
  2010  00F45A  B4D8               	btfsc	status,2,c
  2011  00F45C  D004               	goto	l382
  2012  00F45E  0A1A               	xorlw	26	; case 115
  2013  00F460  B4D8               	btfsc	status,2,c
  2014  00F462  D7AA               	goto	l383
  2015  00F464  D066               	goto	u1970
  2016  00F466                     l382:
  2017                           
  2018                           ;doprnt.c: 1253: {
  2019                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2020  00F466  C018  FFD9         	movff	printf@ap,fsr2l
  2021  00F46A  C019  FFDA         	movff	printf@ap+1,fsr2h
  2022  00F46E  CFDE F01C          	movff	postinc2,printf@val
  2023  00F472  CFDD F01D          	movff	postdec2,printf@val+1
  2024  00F476  0E02               	movlw	2
  2025  00F478  2618               	addwf	printf@ap,f,c
  2026  00F47A  0E00               	movlw	0
  2027  00F47C  2219               	addwfc	printf@ap+1,f,c
  2028                           
  2029                           ;doprnt.c: 1261: if((int)val < 0) {
  2030  00F47E  AE1D               	btfss	printf@val+1,7,c
  2031  00F480  D006               	goto	l389
  2032                           
  2033                           ;doprnt.c: 1262: flag |= 0x03;
  2034  00F482  0E03               	movlw	3
  2035  00F484  1216               	iorwf	printf@flag,f,c
  2036                           
  2037                           ;doprnt.c: 1263: val = -val;
  2038  00F486  6C1C               	negf	printf@val,c
  2039  00F488  1E1D               	comf	printf@val+1,f,c
  2040  00F48A  B0D8               	btfsc	status,0,c
  2041  00F48C  2A1D               	incf	printf@val+1,f,c
  2042  00F48E                     l389:
  2043                           
  2044                           ;doprnt.c: 1264: }
  2045                           ;doprnt.c: 1266: }
  2046                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2047  00F48E  0E01               	movlw	1
  2048  00F490  6E1E               	movwf	printf@c,c
  2049  00F492                     l2158:
  2050  00F492  0E05               	movlw	5
  2051  00F494  181E               	xorwf	printf@c,w,c
  2052  00F496  B4D8               	btfsc	status,2,c
  2053  00F498  D015               	goto	u1950
  2054                           
  2055                           ;doprnt.c: 1306: if(val < dpowers[c])
  2056  00F49A  501E               	movf	printf@c,w,c
  2057  00F49C  0D02               	mullw	2
  2058  00F49E  0E20               	movlw	low _dpowers
  2059  00F4A0  24F3               	addwf	prodl,w,c
  2060  00F4A2  6EF6               	movwf	tblptrl,c
  2061  00F4A4  0EFE               	movlw	high _dpowers
  2062  00F4A6  20F4               	addwfc	prodh,w,c
  2063  00F4A8  6EF7               	movwf	tblptrh,c
  2064  00F4AA                     	if	1	;There are 3 active tblptr bytes
  2065  00F4AA  6AF8               	clrf	tblptru,c
  2066  00F4AC  0E00               	movlw	low (__mediumconst shr (0+16))
  2067  00F4AE  22F8               	addwfc	tblptru,f,c
  2068  00F4B0                     	endif
  2069  00F4B0  0009               	tblrd		*+
  2070  00F4B2  50F5               	movf	tablat,w,c
  2071  00F4B4  5C1C               	subwf	printf@val,w,c
  2072  00F4B6  0009               	tblrd		*+
  2073  00F4B8  50F5               	movf	tablat,w,c
  2074  00F4BA  581D               	subwfb	printf@val+1,w,c
  2075  00F4BC  A0D8               	btfss	status,0,c
  2076  00F4BE  D002               	goto	u1950
  2077                           
  2078                           ;doprnt.c: 1307: break;
  2079  00F4C0  2A1E               	incf	printf@c,f,c
  2080  00F4C2  D7E7               	goto	l2158
  2081  00F4C4                     u1950:
  2082                           
  2083                           ;doprnt.c: 1422: {
  2084                           ;doprnt.c: 1438: if(flag & 0x03)
  2085  00F4C4  C016  F015         	movff	printf@flag,??_printf
  2086  00F4C8  0E03               	movlw	3
  2087  00F4CA  1615               	andwf	??_printf,f,c
  2088  00F4CC  B4D8               	btfsc	status,2,c
  2089  00F4CE  D003               	goto	l393
  2090                           
  2091                           ;doprnt.c: 1439: (putch('-') );
  2092  00F4D0  0E2D               	movlw	45
  2093  00F4D2  ECDE  F076         	call	_putch
  2094  00F4D6                     l393:
  2095                           
  2096                           ;doprnt.c: 1469: }
  2097                           ;doprnt.c: 1472: prec = c;
  2098  00F4D6  C01E  F017         	movff	printf@c,printf@prec
  2099                           
  2100                           ;doprnt.c: 1474: while(prec--) {
  2101  00F4DA  D027               	goto	l394
  2102  00F4DC                     
  2103                           ;doprnt.c: 1478: {
  2104                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2105  00F4DC  5017               	movf	printf@prec,w,c
  2106  00F4DE  0D02               	mullw	2
  2107  00F4E0  0E20               	movlw	low _dpowers
  2108  00F4E2  24F3               	addwf	prodl,w,c
  2109  00F4E4  6EF6               	movwf	tblptrl,c
  2110  00F4E6  0EFE               	movlw	high _dpowers
  2111  00F4E8  20F4               	addwfc	prodh,w,c
  2112  00F4EA  6EF7               	movwf	tblptrh,c
  2113  00F4EC                     	if	1	;There are 3 active tblptr bytes
  2114  00F4EC  6AF8               	clrf	tblptru,c
  2115  00F4EE  0E00               	movlw	low (__mediumconst shr (0+16))
  2116  00F4F0  22F8               	addwfc	tblptru,f,c
  2117  00F4F2                     	endif
  2118  00F4F2  0009               	tblrd		*+
  2119  00F4F4  CFF5 F003          	movff	tablat,___lwdiv@divisor
  2120  00F4F8  000A               	tblrd		*-
  2121  00F4FA  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  2122  00F4FE  C01C  F001         	movff	printf@val,___lwdiv@dividend
  2123  00F502  C01D  F002         	movff	printf@val+1,___lwdiv@dividend+1
  2124  00F506  EC16  F078         	call	___lwdiv	;wreg free
  2125  00F50A  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  2126  00F50E  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  2127  00F512  0E00               	movlw	0
  2128  00F514  6E0B               	movwf	___lwmod@divisor+1,c
  2129  00F516  0E0A               	movlw	10
  2130  00F518  6E0A               	movwf	___lwmod@divisor,c
  2131  00F51A  ECA7  F077         	call	___lwmod	;wreg free
  2132  00F51E  5008               	movf	?___lwmod,w,c
  2133  00F520  0F30               	addlw	48
  2134  00F522  6E1E               	movwf	printf@c,c
  2135                           
  2136                           ;doprnt.c: 1523: }
  2137                           ;doprnt.c: 1524: (putch(c) );
  2138  00F524  501E               	movf	printf@c,w,c
  2139  00F526  ECDE  F076         	call	_putch
  2140  00F52A                     l394:
  2141  00F52A  0617               	decf	printf@prec,f,c
  2142  00F52C  2817               	incf	printf@prec,w,c
  2143  00F52E  A4D8               	btfss	status,2,c
  2144  00F530  D7D5               	goto	l395
  2145  00F532                     u1970:
  2146  00F532  C00D  FFF6         	movff	printf@f,tblptrl
  2147  00F536  C00E  FFF7         	movff	printf@f+1,tblptrh
  2148  00F53A  4A0D               	infsnz	printf@f,f,c
  2149  00F53C  2A0E               	incf	printf@f+1,f,c
  2150  00F53E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2151  00F53E  6AF8               	clrf	tblptru,c
  2152  00F540                     	endif
  2153  00F540                     	if	0	;tblptru may be non-zero
  2154  00F540                     	endif
  2155  00F540  0008               	tblrd		*
  2156  00F542  CFF5 F01E          	movff	tablat,printf@c
  2157  00F546  501E               	movf	printf@c,w,c
  2158  00F548  B4D8               	btfsc	status,2,c
  2159  00F54A  0012               	return	
  2160  00F54C  D72A               	goto	l375
  2161  00F54E                     __end_of_printf:
  2162                           	opt stack 0
  2163                           tblptru	equ	0xFF8
  2164                           tblptrh	equ	0xFF7
  2165                           tblptrl	equ	0xFF6
  2166                           tablat	equ	0xFF5
  2167                           prodh	equ	0xFF4
  2168                           prodl	equ	0xFF3
  2169                           indf0	equ	0xFEF
  2170                           postinc0	equ	0xFEE
  2171                           fsr0h	equ	0xFEA
  2172                           fsr0l	equ	0xFE9
  2173                           wreg	equ	0xFE8
  2174                           postdec1	equ	0xFE5
  2175                           fsr1l	equ	0xFE1
  2176                           indf2	equ	0xFDF
  2177                           postinc2	equ	0xFDE
  2178                           postdec2	equ	0xFDD
  2179                           fsr2h	equ	0xFDA
  2180                           fsr2l	equ	0xFD9
  2181                           status	equ	0xFD8
  2182                           
  2183 ;; *************** function ___lwmod *****************
  2184 ;; Defined at:
  2185 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  2186 ;; Parameters:    Size  Location     Type
  2187 ;;  dividend        2    7[COMRAM] unsigned int 
  2188 ;;  divisor         2    9[COMRAM] unsigned int 
  2189 ;; Auto vars:     Size  Location     Type
  2190 ;;  counter         1   11[COMRAM] unsigned char 
  2191 ;; Return value:  Size  Location     Type
  2192 ;;                  2    7[COMRAM] unsigned int 
  2193 ;; Registers used:
  2194 ;;		wreg, status,2, status,0
  2195 ;; Tracked objects:
  2196 ;;		On entry : 0/0
  2197 ;;		On exit  : 0/0
  2198 ;;		Unchanged: 0/0
  2199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2200 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2201 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2203 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2204 ;;Total ram usage:        5 bytes
  2205 ;; Hardware stack levels used:    1
  2206 ;; This function calls:
  2207 ;;		Nothing
  2208 ;; This function is called by:
  2209 ;;		_printf
  2210 ;; This function uses a non-reentrant model
  2211 ;;
  2212                           
  2213                           	psect	text4
  2214  00EF4E                     __ptext4:
  2215                           	opt stack 0
  2216  00EF4E                     ___lwmod:
  2217                           	opt stack 28
  2218                           
  2219                           ;incstack = 0
  2220  00EF4E  500A               	movf	___lwmod@divisor,w,c
  2221  00EF50  100B               	iorwf	___lwmod@divisor+1,w,c
  2222  00EF52  B4D8               	btfsc	status,2,c
  2223  00EF54  D018               	goto	l817
  2224  00EF56  0E01               	movlw	1
  2225  00EF58  6E0C               	movwf	___lwmod@counter,c
  2226  00EF5A  D004               	goto	l812
  2227  00EF5C  90D8               	bcf	status,0,c
  2228  00EF5E  360A               	rlcf	___lwmod@divisor,f,c
  2229  00EF60  360B               	rlcf	___lwmod@divisor+1,f,c
  2230  00EF62  2A0C               	incf	___lwmod@counter,f,c
  2231  00EF64                     l812:
  2232  00EF64  AE0B               	btfss	___lwmod@divisor+1,7,c
  2233  00EF66  D7FA               	goto	l813
  2234  00EF68                     u1440:
  2235  00EF68  500A               	movf	___lwmod@divisor,w,c
  2236  00EF6A  5C08               	subwf	___lwmod@dividend,w,c
  2237  00EF6C  500B               	movf	___lwmod@divisor+1,w,c
  2238  00EF6E  5809               	subwfb	___lwmod@dividend+1,w,c
  2239  00EF70  A0D8               	btfss	status,0,c
  2240  00EF72  D004               	goto	l816
  2241  00EF74  500A               	movf	___lwmod@divisor,w,c
  2242  00EF76  5E08               	subwf	___lwmod@dividend,f,c
  2243  00EF78  500B               	movf	___lwmod@divisor+1,w,c
  2244  00EF7A  5A09               	subwfb	___lwmod@dividend+1,f,c
  2245  00EF7C                     l816:
  2246  00EF7C  90D8               	bcf	status,0,c
  2247  00EF7E  320B               	rrcf	___lwmod@divisor+1,f,c
  2248  00EF80  320A               	rrcf	___lwmod@divisor,f,c
  2249  00EF82  2E0C               	decfsz	___lwmod@counter,f,c
  2250  00EF84  D7F1               	goto	u1440
  2251  00EF86                     l817:
  2252  00EF86  C008  F008         	movff	___lwmod@dividend,?___lwmod
  2253  00EF8A  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  2254  00EF8E  0012               	return		;funcret
  2255  00EF90                     __end_of___lwmod:
  2256                           	opt stack 0
  2257                           tblptru	equ	0xFF8
  2258                           tblptrh	equ	0xFF7
  2259                           tblptrl	equ	0xFF6
  2260                           tablat	equ	0xFF5
  2261                           prodh	equ	0xFF4
  2262                           prodl	equ	0xFF3
  2263                           indf0	equ	0xFEF
  2264                           postinc0	equ	0xFEE
  2265                           fsr0h	equ	0xFEA
  2266                           fsr0l	equ	0xFE9
  2267                           wreg	equ	0xFE8
  2268                           postdec1	equ	0xFE5
  2269                           fsr1l	equ	0xFE1
  2270                           indf2	equ	0xFDF
  2271                           postinc2	equ	0xFDE
  2272                           postdec2	equ	0xFDD
  2273                           fsr2h	equ	0xFDA
  2274                           fsr2l	equ	0xFD9
  2275                           status	equ	0xFD8
  2276                           
  2277 ;; *************** function ___lwdiv *****************
  2278 ;; Defined at:
  2279 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  2280 ;; Parameters:    Size  Location     Type
  2281 ;;  dividend        2    0[COMRAM] unsigned int 
  2282 ;;  divisor         2    2[COMRAM] unsigned int 
  2283 ;; Auto vars:     Size  Location     Type
  2284 ;;  quotient        2    4[COMRAM] unsigned int 
  2285 ;;  counter         1    6[COMRAM] unsigned char 
  2286 ;; Return value:  Size  Location     Type
  2287 ;;                  2    0[COMRAM] unsigned int 
  2288 ;; Registers used:
  2289 ;;		wreg, status,2, status,0
  2290 ;; Tracked objects:
  2291 ;;		On entry : 0/0
  2292 ;;		On exit  : 0/0
  2293 ;;		Unchanged: 0/0
  2294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2295 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2296 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2298 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2299 ;;Total ram usage:        7 bytes
  2300 ;; Hardware stack levels used:    1
  2301 ;; This function calls:
  2302 ;;		Nothing
  2303 ;; This function is called by:
  2304 ;;		_printf
  2305 ;; This function uses a non-reentrant model
  2306 ;;
  2307                           
  2308                           	psect	text5
  2309  00F02C                     __ptext5:
  2310                           	opt stack 0
  2311  00F02C                     ___lwdiv:
  2312                           	opt stack 28
  2313                           
  2314                           ;incstack = 0
  2315  00F02C  0E00               	movlw	0
  2316  00F02E  6E06               	movwf	___lwdiv@quotient+1,c
  2317  00F030  0E00               	movlw	0
  2318  00F032  6E05               	movwf	___lwdiv@quotient,c
  2319  00F034  5003               	movf	___lwdiv@divisor,w,c
  2320  00F036  1004               	iorwf	___lwdiv@divisor+1,w,c
  2321  00F038  B4D8               	btfsc	status,2,c
  2322  00F03A  D01C               	goto	l807
  2323  00F03C  0E01               	movlw	1
  2324  00F03E  6E07               	movwf	___lwdiv@counter,c
  2325  00F040  D004               	goto	l802
  2326  00F042  90D8               	bcf	status,0,c
  2327  00F044  3603               	rlcf	___lwdiv@divisor,f,c
  2328  00F046  3604               	rlcf	___lwdiv@divisor+1,f,c
  2329  00F048  2A07               	incf	___lwdiv@counter,f,c
  2330  00F04A                     l802:
  2331  00F04A  AE04               	btfss	___lwdiv@divisor+1,7,c
  2332  00F04C  D7FA               	goto	l803
  2333  00F04E                     u1410:
  2334  00F04E  90D8               	bcf	status,0,c
  2335  00F050  3605               	rlcf	___lwdiv@quotient,f,c
  2336  00F052  3606               	rlcf	___lwdiv@quotient+1,f,c
  2337  00F054  5003               	movf	___lwdiv@divisor,w,c
  2338  00F056  5C01               	subwf	___lwdiv@dividend,w,c
  2339  00F058  5004               	movf	___lwdiv@divisor+1,w,c
  2340  00F05A  5802               	subwfb	___lwdiv@dividend+1,w,c
  2341  00F05C  A0D8               	btfss	status,0,c
  2342  00F05E  D005               	goto	l806
  2343  00F060  5003               	movf	___lwdiv@divisor,w,c
  2344  00F062  5E01               	subwf	___lwdiv@dividend,f,c
  2345  00F064  5004               	movf	___lwdiv@divisor+1,w,c
  2346  00F066  5A02               	subwfb	___lwdiv@dividend+1,f,c
  2347  00F068  8005               	bsf	___lwdiv@quotient,0,c
  2348  00F06A                     l806:
  2349  00F06A  90D8               	bcf	status,0,c
  2350  00F06C  3204               	rrcf	___lwdiv@divisor+1,f,c
  2351  00F06E  3203               	rrcf	___lwdiv@divisor,f,c
  2352  00F070  2E07               	decfsz	___lwdiv@counter,f,c
  2353  00F072  D7ED               	goto	u1410
  2354  00F074                     l807:
  2355  00F074  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  2356  00F078  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2357  00F07C  0012               	return		;funcret
  2358  00F07E                     __end_of___lwdiv:
  2359                           	opt stack 0
  2360                           tblptru	equ	0xFF8
  2361                           tblptrh	equ	0xFF7
  2362                           tblptrl	equ	0xFF6
  2363                           tablat	equ	0xFF5
  2364                           prodh	equ	0xFF4
  2365                           prodl	equ	0xFF3
  2366                           indf0	equ	0xFEF
  2367                           postinc0	equ	0xFEE
  2368                           fsr0h	equ	0xFEA
  2369                           fsr0l	equ	0xFE9
  2370                           wreg	equ	0xFE8
  2371                           postdec1	equ	0xFE5
  2372                           fsr1l	equ	0xFE1
  2373                           indf2	equ	0xFDF
  2374                           postinc2	equ	0xFDE
  2375                           postdec2	equ	0xFDD
  2376                           fsr2h	equ	0xFDA
  2377                           fsr2l	equ	0xFD9
  2378                           status	equ	0xFD8
  2379                           
  2380 ;; *************** function _inputEntry *****************
  2381 ;; Defined at:
  2382 ;;		line 82 in file "main.c"
  2383 ;; Parameters:    Size  Location     Type
  2384 ;;		None
  2385 ;; Auto vars:     Size  Location     Type
  2386 ;;  sum             2  103[COMRAM] int 
  2387 ;;  fastenerStri   32   50[COMRAM] unsigned char [32]
  2388 ;;  compartments    1   92[COMRAM] unsigned char 
  2389 ;;  message        21   29[COMRAM] unsigned char [21]
  2390 ;;  i               2  111[COMRAM] int 
  2391 ;;  compartmentN    2  109[COMRAM] int 
  2392 ;;  numPressed      2  107[COMRAM] int 
  2393 ;;  inputEntrySt    2  105[COMRAM] int 
  2394 ;;  numW            2  101[COMRAM] int 
  2395 ;;  numS            2   99[COMRAM] int 
  2396 ;;  numN            2   97[COMRAM] int 
  2397 ;;  numB            2   95[COMRAM] int 
  2398 ;;  doneCompartm    2   93[COMRAM] int 
  2399 ;;  doneMultiple    2   90[COMRAM] int 
  2400 ;;  setIsGood       2   88[COMRAM] int 
  2401 ;;  found           2   86[COMRAM] int 
  2402 ;;  done            2   84[COMRAM] int 
  2403 ;;  compartmentL    2   82[COMRAM] unsigned char [2]
  2404 ;;  numFasteners    2    0        int 
  2405 ;;  pressed         1  113[COMRAM] unsigned char 
  2406 ;; Return value:  Size  Location     Type
  2407 ;;                  2   76[None  ] int 
  2408 ;; Registers used:
  2409 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2410 ;; Tracked objects:
  2411 ;;		On entry : 0/0
  2412 ;;		On exit  : 0/0
  2413 ;;		Unchanged: 0/0
  2414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2416 ;;      Locals:        85       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2417 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2418 ;;      Totals:        89       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2419 ;;Total ram usage:       89 bytes
  2420 ;; Hardware stack levels used:    1
  2421 ;; Hardware stack levels required when called:    4
  2422 ;; This function calls:
  2423 ;;		_I2C_Send
  2424 ;;		___wmul
  2425 ;;		_lcdInst
  2426 ;;		_lcd_set_cursor
  2427 ;;		_pollKeypad
  2428 ;;		_printErrorLCD
  2429 ;;		_printStringLCD
  2430 ;;		_putch
  2431 ;;		_strcpy
  2432 ;; This function is called by:
  2433 ;;		_mainMenu
  2434 ;; This function uses a non-reentrant model
  2435 ;;
  2436                           
  2437                           	psect	text6
  2438  00F7F6                     __ptext6:
  2439                           	opt stack 0
  2440  00F7F6                     _inputEntry:
  2441                           	opt stack 25
  2442                           
  2443                           ;main.c: 83: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2444                           
  2445                           ;incstack = 0
  2446  00F7F6  0E01               	movlw	1
  2447  00F7F8  ECD4  F076         	call	_lcdInst
  2448  00F7FC  0EC3               	movlw	195
  2449  00F7FE  6E1A               	movwf	??_inputEntry& (0+255),c
  2450  00F800  0ECD               	movlw	205
  2451  00F802                     u2147:
  2452  00F802  2EE8               	decfsz	wreg,f,c
  2453  00F804  D7FE               	bra	u2147
  2454  00F806  2E1A               	decfsz	??_inputEntry& (0+255),f,c
  2455  00F808  D7FC               	bra	u2147
  2456  00F80A  F000               	nop	
  2457                           
  2458                           ;main.c: 84: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2459  00F80C  0E80               	movlw	128
  2460  00F80E  ECD4  F076         	call	_lcdInst
  2461  00F812  0E41               	movlw	65
  2462  00F814  6E1A               	movwf	??_inputEntry& (0+255),c
  2463  00F816  0EEE               	movlw	238
  2464  00F818                     u2157:
  2465  00F818  2EE8               	decfsz	wreg,f,c
  2466  00F81A  D7FE               	bra	u2157
  2467  00F81C  2E1A               	decfsz	??_inputEntry& (0+255),f,c
  2468  00F81E  D7FC               	bra	u2157
  2469  00F820  D000               	nop2	
  2470                           
  2471                           ;main.c: 86: char message[] = "Started input entry\0";
  2472  00F822  EE20  F09A         	lfsr	2,inputEntry@F3137
  2473  00F826  EE10  F01E         	lfsr	1,inputEntry@message
  2474  00F82A  0E14               	movlw	20
  2475  00F82C                     u1461:
  2476  00F82C  CFDB FFE3          	movff	plusw2,plusw1
  2477  00F830  06E8               	decf	wreg,f,c
  2478  00F832  E2FC               	bc	u1461
  2479                           
  2480                           ;main.c: 87: I2C_Send(nanoAddr, message);
  2481  00F834  0E1E               	movlw	low inputEntry@message
  2482  00F836  6E04               	movwf	I2C_Send@data,c
  2483  00F838  0E00               	movlw	high inputEntry@message
  2484  00F83A  6E05               	movwf	I2C_Send@data+1,c
  2485  00F83C  0E2F               	movlw	low _nanoAddr
  2486  00F83E  6EF6               	movwf	tblptrl,c
  2487  00F840                     	if	1	;There is more than 1 active tblptr byte
  2488  00F840  0EFE               	movlw	high _nanoAddr
  2489  00F842  6EF7               	movwf	tblptrh,c
  2490  00F844                     	endif
  2491  00F844                     	if	1	;There are 3 active tblptr bytes
  2492  00F844  0E00               	movlw	low (_nanoAddr shr (0+16))
  2493  00F846  6EF8               	movwf	tblptru,c
  2494  00F848                     	endif
  2495  00F848  0008               	tblrd		*
  2496  00F84A  50F5               	movf	tablat,w,c
  2497  00F84C  ECEE  F077         	call	_I2C_Send
  2498                           
  2499                           ;main.c: 89: int compartmentNum = 0;
  2500  00F850  0E00               	movlw	0
  2501  00F852  6E6F               	movwf	inputEntry@compartmentNum+1,c
  2502  00F854  0E00               	movlw	0
  2503  00F856  6E6E               	movwf	inputEntry@compartmentNum,c
  2504                           
  2505                           ;main.c: 90: char compartmentLabel[2] = "C0";
  2506  00F858  C0AF  F053         	movff	inputEntry@F3140,inputEntry@compartmentLabel
  2507  00F85C  C0B0  F054         	movff	inputEntry@F3140+1,inputEntry@compartmentLabel+1
  2508                           
  2509                           ;main.c: 91: int inputEntryStep = 0;
  2510  00F860  0E00               	movlw	0
  2511  00F862  6E6B               	movwf	inputEntry@inputEntryStep+1,c
  2512  00F864  0E00               	movlw	0
  2513  00F866  6E6A               	movwf	inputEntry@inputEntryStep,c
  2514                           
  2515                           ;main.c: 92: int done = 0;
  2516  00F868  0E00               	movlw	0
  2517  00F86A  6E56               	movwf	inputEntry@done+1,c
  2518  00F86C  0E00               	movlw	0
  2519  00F86E  D297               	goto	L1
  2520  00F870                     
  2521                           ;main.c: 100: if (inputEntryStep == 0) {
  2522  00F870  506A               	movf	inputEntry@inputEntryStep,w,c
  2523  00F872  106B               	iorwf	inputEntry@inputEntryStep+1,w,c
  2524  00F874  A4D8               	btfss	status,2,c
  2525  00F876  D048               	goto	l83
  2526                           
  2527                           ;main.c: 101: printStringLCD(inputEntryQuestions[inputEntryStep]);
  2528  00F878  C06A  F001         	movff	inputEntry@inputEntryStep,___wmul@multiplier
  2529  00F87C  C06B  F002         	movff	inputEntry@inputEntryStep+1,___wmul@multiplier+1
  2530  00F880  0E00               	movlw	0
  2531  00F882  6E04               	movwf	___wmul@multiplicand+1,c
  2532  00F884  0E21               	movlw	33
  2533  00F886  6E03               	movwf	___wmul@multiplicand,c
  2534  00F888  EC14  F077         	call	___wmul	;wreg free
  2535  00F88C  0E16               	movlw	low _inputEntryQuestions
  2536  00F88E  2401               	addwf	?___wmul,w,c
  2537  00F890  6E07               	movwf	printStringLCD@string,c
  2538  00F892  0EFF               	movlw	high _inputEntryQuestions
  2539  00F894  2002               	addwfc	?___wmul+1,w,c
  2540  00F896  6E08               	movwf	printStringLCD@string+1,c
  2541  00F898  ECA7  F07A         	call	_printStringLCD	;wreg free
  2542                           
  2543                           ;main.c: 103: pressed = pollKeypad();
  2544  00F89C  EC3A  F077         	call	_pollKeypad	;wreg free
  2545  00F8A0  6E72               	movwf	inputEntry@pressed,c
  2546                           
  2547                           ;main.c: 104: numPressed = pressed - 48;
  2548  00F8A2  0ED0               	movlw	208
  2549  00F8A4  2472               	addwf	inputEntry@pressed,w,c
  2550  00F8A6  6E6C               	movwf	inputEntry@numPressed,c
  2551  00F8A8  6A6D               	clrf	inputEntry@numPressed+1,c
  2552  00F8AA  0EFF               	movlw	255
  2553  00F8AC  226D               	addwfc	inputEntry@numPressed+1,f,c
  2554                           
  2555                           ;main.c: 106: putch(pressed);
  2556  00F8AE  5072               	movf	inputEntry@pressed,w,c
  2557  00F8B0  ECDE  F076         	call	_putch
  2558                           
  2559                           ;main.c: 107: _delay((unsigned long)((500)*(40000000/4000.0)));
  2560  00F8B4  0E1A               	movlw	26
  2561  00F8B6  6E1B               	movwf	(??_inputEntry+1)& (0+255),c
  2562  00F8B8  0E5E               	movlw	94
  2563  00F8BA  6E1A               	movwf	??_inputEntry& (0+255),c
  2564  00F8BC  0E6E               	movlw	110
  2565  00F8BE                     u2167:
  2566  00F8BE  2EE8               	decfsz	wreg,f,c
  2567  00F8C0  D7FE               	bra	u2167
  2568  00F8C2  2E1A               	decfsz	??_inputEntry& (0+255),f,c
  2569  00F8C4  D7FC               	bra	u2167
  2570  00F8C6  2E1B               	decfsz	(??_inputEntry+1)& (0+255),f,c
  2571  00F8C8  D7FA               	bra	u2167
  2572  00F8CA  D000               	nop2	
  2573                           
  2574                           ;main.c: 109: if (numPressed >= 4 && numPressed <= 8) {
  2575  00F8CC  BE6D               	btfsc	inputEntry@numPressed+1,7,c
  2576  00F8CE  D015               	goto	l84
  2577  00F8D0  506D               	movf	inputEntry@numPressed+1,w,c
  2578  00F8D2  E104               	bnz	u1480
  2579  00F8D4  0E04               	movlw	4
  2580  00F8D6  5C6C               	subwf	inputEntry@numPressed,w,c
  2581  00F8D8  A0D8               	btfss	status,0,c
  2582  00F8DA  D00F               	goto	l84
  2583  00F8DC                     u1480:
  2584  00F8DC  BE6D               	btfsc	inputEntry@numPressed+1,7,c
  2585  00F8DE  D006               	goto	u1490
  2586  00F8E0  506D               	movf	inputEntry@numPressed+1,w,c
  2587  00F8E2  E10B               	bnz	l1944
  2588  00F8E4  0E09               	movlw	9
  2589  00F8E6  5C6C               	subwf	inputEntry@numPressed,w,c
  2590  00F8E8  B0D8               	btfsc	status,0,c
  2591  00F8EA  D007               	goto	l84
  2592  00F8EC                     u1490:
  2593                           
  2594                           ;main.c: 110: params.steps = numPressed;
  2595  00F8EC  C06C  F080         	movff	inputEntry@numPressed,_params
  2596  00F8F0  C06D  F081         	movff	inputEntry@numPressed+1,_params+1
  2597                           
  2598                           ;main.c: 111: inputEntryStep++;
  2599  00F8F4  4A6A               	infsnz	inputEntry@inputEntryStep,f,c
  2600  00F8F6  2A6B               	incf	inputEntry@inputEntryStep+1,f,c
  2601                           
  2602                           ;main.c: 112: } else printErrorLCD(errMsgs.badEntry);
  2603  00F8F8  D253               	goto	l87
  2604  00F8FA                     l84:
  2605  00F8FA                     l1944:
  2606  00F8FA  0E36               	movlw	low _errMsgs
  2607  00F8FC  6E16               	movwf	printErrorLCD@string,c
  2608  00F8FE  0EFE               	movlw	high _errMsgs
  2609  00F900  6E17               	movwf	printErrorLCD@string+1,c
  2610  00F902  EC27  F077         	call	_printErrorLCD	;wreg free
  2611                           
  2612                           ;main.c: 113: } else if (inputEntryStep == 1) {
  2613  00F906  D24C               	goto	l87
  2614  00F908                     l83:
  2615  00F908  046A               	decf	inputEntry@inputEntryStep,w,c
  2616  00F90A  106B               	iorwf	inputEntry@inputEntryStep+1,w,c
  2617  00F90C  A4D8               	btfss	status,2,c
  2618  00F90E  D248               	goto	l87
  2619                           
  2620                           ;main.c: 115: char compartmentsToFill = assemblyStepEncoding[params.steps - 4];
  2621  00F910  0EFC               	movlw	252
  2622  00F912  6E1A               	movwf	??_inputEntry& (0+255),c
  2623  00F914  0EFF               	movlw	255
  2624  00F916  6E1B               	movwf	(??_inputEntry+1)& (0+255),c
  2625  00F918  C080  F01C         	movff	_params,??_inputEntry+2
  2626  00F91C  C081  F01D         	movff	_params+1,??_inputEntry+3
  2627  00F920  501A               	movf	??_inputEntry,w,c
  2628  00F922  261C               	addwf	??_inputEntry+2,f,c
  2629  00F924  501B               	movf	??_inputEntry+1,w,c
  2630  00F926  221D               	addwfc	??_inputEntry+3,f,c
  2631  00F928  0E2A               	movlw	low _assemblyStepEncoding
  2632  00F92A  241C               	addwf	??_inputEntry+2,w,c
  2633  00F92C  6EF6               	movwf	tblptrl,c
  2634  00F92E  0EFE               	movlw	high _assemblyStepEncoding
  2635  00F930  201D               	addwfc	??_inputEntry+3,w,c
  2636  00F932  6EF7               	movwf	tblptrh,c
  2637  00F934                     	if	1	;There are 3 active tblptr bytes
  2638  00F934  6AF8               	clrf	tblptru,c
  2639  00F936  0E00               	movlw	low (__mediumconst shr (0+16))
  2640  00F938  22F8               	addwfc	tblptru,f,c
  2641  00F93A                     	endif
  2642  00F93A  0008               	tblrd		*
  2643  00F93C  CFF5 F05D          	movff	tablat,inputEntry@compartmentsToFill
  2644                           
  2645                           ;main.c: 116: for (compartmentNum = 0; compartmentNum < 8; compartmentNum++) {
  2646  00F940  0E00               	movlw	0
  2647  00F942  6E6F               	movwf	inputEntry@compartmentNum+1,c
  2648  00F944  0E00               	movlw	0
  2649  00F946  6E6E               	movwf	inputEntry@compartmentNum,c
  2650  00F948  BE6F               	btfsc	inputEntry@compartmentNum+1,7,c
  2651  00F94A  D008               	goto	l88
  2652  00F94C  506F               	movf	inputEntry@compartmentNum+1,w,c
  2653  00F94E  E105               	bnz	u1510
  2654  00F950  0E08               	movlw	8
  2655  00F952  5C6E               	subwf	inputEntry@compartmentNum,w,c
  2656  00F954  B0D8               	btfsc	status,0,c
  2657  00F956  D220               	goto	u1830
  2658  00F958  D001               	goto	l88
  2659  00F95A                     u1510:
  2660  00F95A  D21E               	goto	u1830
  2661  00F95C                     l88:
  2662                           
  2663                           ;main.c: 118: if ((compartmentsToFill >> compartmentNum) & 0b1) {
  2664                           
  2665                           ;main.c: 117: STARTCOMPARTMENT:
  2666  00F95C  C06E  F01A         	movff	inputEntry@compartmentNum,??_inputEntry
  2667  00F960  C05D  F01B         	movff	inputEntry@compartmentsToFill,??_inputEntry+1
  2668  00F964  2A1A               	incf	??_inputEntry,f,c
  2669  00F966  D002               	goto	u1524
  2670  00F968                     u1525:
  2671  00F968  90D8               	bcf	status,0,c
  2672  00F96A  321B               	rrcf	??_inputEntry+1,f,c
  2673  00F96C                     u1524:
  2674  00F96C  2E1A               	decfsz	??_inputEntry,f,c
  2675  00F96E  D7FC               	goto	u1525
  2676  00F970  A01B               	btfss	??_inputEntry+1,0,c
  2677  00F972  D1F3               	goto	l91
  2678                           
  2679                           ;main.c: 120: setIsGood = 0;
  2680  00F974  0E00               	movlw	0
  2681  00F976  6E5A               	movwf	inputEntry@setIsGood+1,c
  2682  00F978  0E00               	movlw	0
  2683  00F97A  D14C               	goto	L2
  2684  00F97C                     
  2685                           ;main.c: 122: numB = 0;
  2686  00F97C  0E00               	movlw	0
  2687  00F97E  6E61               	movwf	inputEntry@numB+1,c
  2688  00F980  0E00               	movlw	0
  2689  00F982  6E60               	movwf	inputEntry@numB,c
  2690                           
  2691                           ;main.c: 123: numN = 0;
  2692  00F984  0E00               	movlw	0
  2693  00F986  6E63               	movwf	inputEntry@numN+1,c
  2694  00F988  0E00               	movlw	0
  2695  00F98A  6E62               	movwf	inputEntry@numN,c
  2696                           
  2697                           ;main.c: 124: numS = 0;
  2698  00F98C  0E00               	movlw	0
  2699  00F98E  6E65               	movwf	inputEntry@numS+1,c
  2700  00F990  0E00               	movlw	0
  2701  00F992  6E64               	movwf	inputEntry@numS,c
  2702                           
  2703                           ;main.c: 125: numW = 0;
  2704  00F994  0E00               	movlw	0
  2705  00F996  6E67               	movwf	inputEntry@numW+1,c
  2706  00F998  0E00               	movlw	0
  2707  00F99A  6E66               	movwf	inputEntry@numW,c
  2708                           
  2709                           ;main.c: 126: char fastenerString[32];
  2710                           ;main.c: 127: strcpy(fastenerString, inputEntryQuestions[inputEntryStep]);
  2711  00F99C  0E33               	movlw	low inputEntry@fastenerString
  2712  00F99E  6E07               	movwf	strcpy@to,c
  2713  00F9A0  0E00               	movlw	high inputEntry@fastenerString
  2714  00F9A2  6E08               	movwf	strcpy@to+1,c
  2715  00F9A4  C06A  F001         	movff	inputEntry@inputEntryStep,___wmul@multiplier
  2716  00F9A8  C06B  F002         	movff	inputEntry@inputEntryStep+1,___wmul@multiplier+1
  2717  00F9AC  0E00               	movlw	0
  2718  00F9AE  6E04               	movwf	___wmul@multiplicand+1,c
  2719  00F9B0  0E21               	movlw	33
  2720  00F9B2  6E03               	movwf	___wmul@multiplicand,c
  2721  00F9B4  EC14  F077         	call	___wmul	;wreg free
  2722  00F9B8  0E16               	movlw	low _inputEntryQuestions
  2723  00F9BA  2401               	addwf	?___wmul,w,c
  2724  00F9BC  6E09               	movwf	strcpy@from,c
  2725  00F9BE  0EFF               	movlw	high _inputEntryQuestions
  2726  00F9C0  2002               	addwfc	?___wmul+1,w,c
  2727  00F9C2  6E0A               	movwf	strcpy@from+1,c
  2728  00F9C4  EC51  F077         	call	_strcpy	;wreg free
  2729                           
  2730                           ;main.c: 128: fastenerString[14] = compartmentNum + 1 + 48;
  2731  00F9C8  506E               	movf	inputEntry@compartmentNum,w,c
  2732  00F9CA  0F31               	addlw	49
  2733  00F9CC  6E41               	movwf	inputEntry@fastenerString+14,c
  2734                           
  2735                           ;main.c: 130: printStringLCD(fastenerString);
  2736  00F9CE  0E33               	movlw	low inputEntry@fastenerString
  2737  00F9D0  6E07               	movwf	printStringLCD@string,c
  2738  00F9D2  0E00               	movlw	high inputEntry@fastenerString
  2739  00F9D4  6E08               	movwf	printStringLCD@string+1,c
  2740  00F9D6  ECA7  F07A         	call	_printStringLCD	;wreg free
  2741                           
  2742                           ;main.c: 131: lcd_set_cursor(9, 1);
  2743  00F9DA  0E01               	movlw	1
  2744  00F9DC  6E07               	movwf	lcd_set_cursor@y,c
  2745  00F9DE  0E09               	movlw	9
  2746  00F9E0  EC87  F077         	call	_lcd_set_cursor
  2747                           
  2748                           ;main.c: 132: doneCompartment = 0;
  2749  00F9E4  0E00               	movlw	0
  2750  00F9E6  6E5F               	movwf	inputEntry@doneCompartment+1,c
  2751  00F9E8  0E00               	movlw	0
  2752  00F9EA  D04B               	goto	L3
  2753  00F9EC                     
  2754                           ;main.c: 135: pressed = pollKeypad();
  2755  00F9EC  EC3A  F077         	call	_pollKeypad	;wreg free
  2756  00F9F0  6E72               	movwf	inputEntry@pressed,c
  2757                           
  2758                           ;main.c: 136: if (pressed == 66 || pressed == 78 || pressed == 83 || pressed == 87) {
  2759  00F9F2  0E42               	movlw	66
  2760  00F9F4  1872               	xorwf	inputEntry@pressed,w,c
  2761  00F9F6  B4D8               	btfsc	status,2,c
  2762  00F9F8  D00C               	goto	u1570
  2763  00F9FA  0E4E               	movlw	78
  2764  00F9FC  1872               	xorwf	inputEntry@pressed,w,c
  2765  00F9FE  B4D8               	btfsc	status,2,c
  2766  00FA00  D008               	goto	u1570
  2767  00FA02  0E53               	movlw	83
  2768  00FA04  1872               	xorwf	inputEntry@pressed,w,c
  2769  00FA06  B4D8               	btfsc	status,2,c
  2770  00FA08  D004               	goto	u1570
  2771  00FA0A  0E57               	movlw	87
  2772  00FA0C  1872               	xorwf	inputEntry@pressed,w,c
  2773  00FA0E  A4D8               	btfss	status,2,c
  2774  00FA10  D021               	goto	l96
  2775  00FA12                     u1570:
  2776                           
  2777                           ;main.c: 137: putch(pressed);
  2778  00FA12  5072               	movf	inputEntry@pressed,w,c
  2779  00FA14  ECDE  F076         	call	_putch
  2780                           
  2781                           ;main.c: 138: if (pressed == 66) numB++;
  2782  00FA18  0E42               	movlw	66
  2783  00FA1A  1872               	xorwf	inputEntry@pressed,w,c
  2784  00FA1C  A4D8               	btfss	status,2,c
  2785  00FA1E  D003               	goto	l99
  2786  00FA20  4A60               	infsnz	inputEntry@numB,f,c
  2787  00FA22  2A61               	incf	inputEntry@numB+1,f,c
  2788  00FA24  D014               	goto	l105
  2789  00FA26                     l99:
  2790                           
  2791                           ;main.c: 139: else if (pressed == 78) numN++;
  2792  00FA26  0E4E               	movlw	78
  2793  00FA28  1872               	xorwf	inputEntry@pressed,w,c
  2794  00FA2A  A4D8               	btfss	status,2,c
  2795  00FA2C  D003               	goto	l101
  2796  00FA2E  4A62               	infsnz	inputEntry@numN,f,c
  2797  00FA30  2A63               	incf	inputEntry@numN+1,f,c
  2798  00FA32  D00D               	goto	l105
  2799  00FA34                     l101:
  2800                           
  2801                           ;main.c: 140: else if (pressed == 83) numS ++;
  2802  00FA34  0E53               	movlw	83
  2803  00FA36  1872               	xorwf	inputEntry@pressed,w,c
  2804  00FA38  A4D8               	btfss	status,2,c
  2805  00FA3A  D003               	goto	l103
  2806  00FA3C  4A64               	infsnz	inputEntry@numS,f,c
  2807  00FA3E  2A65               	incf	inputEntry@numS+1,f,c
  2808  00FA40  D006               	goto	l105
  2809  00FA42                     l103:
  2810                           
  2811                           ;main.c: 141: else if (pressed == 87) numW++;
  2812  00FA42  0E57               	movlw	87
  2813  00FA44  1872               	xorwf	inputEntry@pressed,w,c
  2814  00FA46  A4D8               	btfss	status,2,c
  2815  00FA48  D002               	goto	l105
  2816  00FA4A  4A66               	infsnz	inputEntry@numW,f,c
  2817  00FA4C  2A67               	incf	inputEntry@numW+1,f,c
  2818  00FA4E                     l105:
  2819                           
  2820                           ;main.c: 142: doneCompartment++;
  2821  00FA4E  4A5E               	infsnz	inputEntry@doneCompartment,f,c
  2822  00FA50  2A5F               	incf	inputEntry@doneCompartment+1,f,c
  2823                           
  2824                           ;main.c: 143: } else if (pressed == 35) {
  2825  00FA52  D021               	goto	l112
  2826  00FA54                     l96:
  2827  00FA54  0E23               	movlw	35
  2828  00FA56  1872               	xorwf	inputEntry@pressed,w,c
  2829  00FA58  A4D8               	btfss	status,2,c
  2830  00FA5A  D015               	goto	l107
  2831                           
  2832                           ;main.c: 144: if (numB != 0 || numN != 0 || numS != 0 || numW != 0) doneCompartment = 4;
  2833  00FA5C  5060               	movf	inputEntry@numB,w,c
  2834  00FA5E  1061               	iorwf	inputEntry@numB+1,w,c
  2835  00FA60  A4D8               	btfss	status,2,c
  2836  00FA62  D00C               	goto	u1660
  2837  00FA64  5062               	movf	inputEntry@numN,w,c
  2838  00FA66  1063               	iorwf	inputEntry@numN+1,w,c
  2839  00FA68  A4D8               	btfss	status,2,c
  2840  00FA6A  D008               	goto	u1660
  2841  00FA6C  5064               	movf	inputEntry@numS,w,c
  2842  00FA6E  1065               	iorwf	inputEntry@numS+1,w,c
  2843  00FA70  A4D8               	btfss	status,2,c
  2844  00FA72  D004               	goto	u1660
  2845  00FA74  5066               	movf	inputEntry@numW,w,c
  2846  00FA76  1067               	iorwf	inputEntry@numW+1,w,c
  2847  00FA78  B4D8               	btfsc	status,2,c
  2848  00FA7A  D00D               	goto	l112
  2849  00FA7C                     u1660:
  2850  00FA7C  0E00               	movlw	0
  2851  00FA7E  6E5F               	movwf	inputEntry@doneCompartment+1,c
  2852  00FA80  0E04               	movlw	4
  2853  00FA82                     L3:
  2854  00FA82  6E5E               	movwf	inputEntry@doneCompartment,c
  2855                           
  2856                           ;main.c: 145: } else if (pressed == 42) {
  2857  00FA84  D008               	goto	l112
  2858  00FA86                     l107:
  2859  00FA86  0E2A               	movlw	42
  2860  00FA88  1872               	xorwf	inputEntry@pressed,w,c
  2861  00FA8A  A4D8               	btfss	status,2,c
  2862  00FA8C  D004               	goto	l112
  2863                           
  2864                           ;main.c: 146: compartmentNum--;
  2865  00FA8E  066E               	decf	inputEntry@compartmentNum,f,c
  2866  00FA90  A0D8               	btfss	status,0,c
  2867  00FA92  066F               	decf	inputEntry@compartmentNum+1,f,c
  2868                           
  2869                           ;main.c: 147: goto STARTMULTIPLES;
  2870  00FA94  D0C4               	goto	u1760
  2871  00FA96                     l112:
  2872  00FA96  BE5F               	btfsc	inputEntry@doneCompartment+1,7,c
  2873  00FA98  D7A9               	goto	l95
  2874  00FA9A  505F               	movf	inputEntry@doneCompartment+1,w,c
  2875  00FA9C  E104               	bnz	l2018
  2876  00FA9E  0E04               	movlw	4
  2877  00FAA0  5C5E               	subwf	inputEntry@doneCompartment,w,c
  2878  00FAA2  A0D8               	btfss	status,0,c
  2879  00FAA4  D7A3               	goto	l95
  2880  00FAA6                     l2018:
  2881                           
  2882                           ;main.c: 148: }
  2883                           ;main.c: 149: }
  2884                           ;main.c: 152: found = 0;
  2885  00FAA6  0E00               	movlw	0
  2886  00FAA8  6E58               	movwf	inputEntry@found+1,c
  2887  00FAAA  0E00               	movlw	0
  2888  00FAAC  6E57               	movwf	inputEntry@found,c
  2889                           
  2890                           ;main.c: 153: for (i = 0; i < 21; i++) {
  2891  00FAAE  0E00               	movlw	0
  2892  00FAB0  6E71               	movwf	inputEntry@i+1,c
  2893  00FAB2  0E00               	movlw	0
  2894  00FAB4  6E70               	movwf	inputEntry@i,c
  2895  00FAB6  BE71               	btfsc	inputEntry@i+1,7,c
  2896  00FAB8  D008               	goto	l115
  2897  00FABA  5071               	movf	inputEntry@i+1,w,c
  2898  00FABC  E105               	bnz	u1690
  2899  00FABE  0E15               	movlw	21
  2900  00FAC0  5C70               	subwf	inputEntry@i,w,c
  2901  00FAC2  B0D8               	btfsc	status,0,c
  2902  00FAC4  D099               	goto	u1740
  2903  00FAC6  D001               	goto	l115
  2904  00FAC8                     u1690:
  2905  00FAC8  D097               	goto	u1740
  2906  00FACA                     l115:
  2907                           
  2908                           ;main.c: 154: if (fastenerMatrix[i][0] == numB &&
  2909                           ;main.c: 155: fastenerMatrix[i][1] == numN &&
  2910                           ;main.c: 156: fastenerMatrix[i][2] == numS &&
  2911                           ;main.c: 157: fastenerMatrix[i][3] == numW)
  2912  00FACA  C070  F01A         	movff	inputEntry@i,??_inputEntry
  2913  00FACE  C071  F01B         	movff	inputEntry@i+1,??_inputEntry+1
  2914  00FAD2  90D8               	bcf	status,0,c
  2915  00FAD4  361A               	rlcf	??_inputEntry,f,c
  2916  00FAD6  361B               	rlcf	??_inputEntry+1,f,c
  2917  00FAD8  90D8               	bcf	status,0,c
  2918  00FADA  361A               	rlcf	??_inputEntry,f,c
  2919  00FADC  361B               	rlcf	??_inputEntry+1,f,c
  2920  00FADE  0EAB               	movlw	low _fastenerMatrix
  2921  00FAE0  241A               	addwf	??_inputEntry,w,c
  2922  00FAE2  6EF6               	movwf	tblptrl,c
  2923  00FAE4  0EFD               	movlw	high _fastenerMatrix
  2924  00FAE6  201B               	addwfc	??_inputEntry+1,w,c
  2925  00FAE8  6EF7               	movwf	tblptrh,c
  2926  00FAEA                     	if	1	;There are 3 active tblptr bytes
  2927  00FAEA  6AF8               	clrf	tblptru,c
  2928  00FAEC  0E00               	movlw	low (__mediumconst shr (0+16))
  2929  00FAEE  22F8               	addwfc	tblptru,f,c
  2930  00FAF0                     	endif
  2931  00FAF0  0008               	tblrd		*
  2932  00FAF2  50F5               	movf	tablat,w,c
  2933  00FAF4  6E1C               	movwf	(??_inputEntry+2)& (0+255),c
  2934  00FAF6  6A1D               	clrf	(??_inputEntry+3)& (0+255),c
  2935  00FAF8  5060               	movf	inputEntry@numB,w,c
  2936  00FAFA  181C               	xorwf	??_inputEntry+2,w,c
  2937  00FAFC  E176               	bnz	l2036
  2938  00FAFE  5061               	movf	inputEntry@numB+1,w,c
  2939  00FB00  181D               	xorwf	??_inputEntry+3,w,c
  2940  00FB02  A4D8               	btfss	status,2,c
  2941  00FB04  D072               	goto	l117
  2942  00FB06  C070  F01A         	movff	inputEntry@i,??_inputEntry
  2943  00FB0A  C071  F01B         	movff	inputEntry@i+1,??_inputEntry+1
  2944  00FB0E  90D8               	bcf	status,0,c
  2945  00FB10  361A               	rlcf	??_inputEntry,f,c
  2946  00FB12  361B               	rlcf	??_inputEntry+1,f,c
  2947  00FB14  90D8               	bcf	status,0,c
  2948  00FB16  361A               	rlcf	??_inputEntry,f,c
  2949  00FB18  361B               	rlcf	??_inputEntry+1,f,c
  2950  00FB1A  0E01               	movlw	1
  2951  00FB1C  261A               	addwf	??_inputEntry,f,c
  2952  00FB1E  0E00               	movlw	0
  2953  00FB20  221B               	addwfc	??_inputEntry+1,f,c
  2954  00FB22  0EAB               	movlw	low _fastenerMatrix
  2955  00FB24  241A               	addwf	??_inputEntry,w,c
  2956  00FB26  6EF6               	movwf	tblptrl,c
  2957  00FB28  0EFD               	movlw	high _fastenerMatrix
  2958  00FB2A  201B               	addwfc	??_inputEntry+1,w,c
  2959  00FB2C  6EF7               	movwf	tblptrh,c
  2960  00FB2E                     	if	1	;There are 3 active tblptr bytes
  2961  00FB2E  6AF8               	clrf	tblptru,c
  2962  00FB30  0E00               	movlw	low (__mediumconst shr (0+16))
  2963  00FB32  22F8               	addwfc	tblptru,f,c
  2964  00FB34                     	endif
  2965  00FB34  0008               	tblrd		*
  2966  00FB36  50F5               	movf	tablat,w,c
  2967  00FB38  6E1C               	movwf	(??_inputEntry+2)& (0+255),c
  2968  00FB3A  6A1D               	clrf	(??_inputEntry+3)& (0+255),c
  2969  00FB3C  5062               	movf	inputEntry@numN,w,c
  2970  00FB3E  181C               	xorwf	??_inputEntry+2,w,c
  2971  00FB40  E154               	bnz	l2036
  2972  00FB42  5063               	movf	inputEntry@numN+1,w,c
  2973  00FB44  181D               	xorwf	??_inputEntry+3,w,c
  2974  00FB46  A4D8               	btfss	status,2,c
  2975  00FB48  D050               	goto	l117
  2976  00FB4A  C070  F01A         	movff	inputEntry@i,??_inputEntry
  2977  00FB4E  C071  F01B         	movff	inputEntry@i+1,??_inputEntry+1
  2978  00FB52  90D8               	bcf	status,0,c
  2979  00FB54  361A               	rlcf	??_inputEntry,f,c
  2980  00FB56  361B               	rlcf	??_inputEntry+1,f,c
  2981  00FB58  90D8               	bcf	status,0,c
  2982  00FB5A  361A               	rlcf	??_inputEntry,f,c
  2983  00FB5C  361B               	rlcf	??_inputEntry+1,f,c
  2984  00FB5E  0E02               	movlw	2
  2985  00FB60  261A               	addwf	??_inputEntry,f,c
  2986  00FB62  0E00               	movlw	0
  2987  00FB64  221B               	addwfc	??_inputEntry+1,f,c
  2988  00FB66  0EAB               	movlw	low _fastenerMatrix
  2989  00FB68  241A               	addwf	??_inputEntry,w,c
  2990  00FB6A  6EF6               	movwf	tblptrl,c
  2991  00FB6C  0EFD               	movlw	high _fastenerMatrix
  2992  00FB6E  201B               	addwfc	??_inputEntry+1,w,c
  2993  00FB70  6EF7               	movwf	tblptrh,c
  2994  00FB72                     	if	1	;There are 3 active tblptr bytes
  2995  00FB72  6AF8               	clrf	tblptru,c
  2996  00FB74  0E00               	movlw	low (__mediumconst shr (0+16))
  2997  00FB76  22F8               	addwfc	tblptru,f,c
  2998  00FB78                     	endif
  2999  00FB78  0008               	tblrd		*
  3000  00FB7A  50F5               	movf	tablat,w,c
  3001  00FB7C  6E1C               	movwf	(??_inputEntry+2)& (0+255),c
  3002  00FB7E  6A1D               	clrf	(??_inputEntry+3)& (0+255),c
  3003  00FB80  5064               	movf	inputEntry@numS,w,c
  3004  00FB82  181C               	xorwf	??_inputEntry+2,w,c
  3005  00FB84  E132               	bnz	l2036
  3006  00FB86  5065               	movf	inputEntry@numS+1,w,c
  3007  00FB88  181D               	xorwf	??_inputEntry+3,w,c
  3008  00FB8A  A4D8               	btfss	status,2,c
  3009  00FB8C  D02E               	goto	l117
  3010  00FB8E  C070  F01A         	movff	inputEntry@i,??_inputEntry
  3011  00FB92  C071  F01B         	movff	inputEntry@i+1,??_inputEntry+1
  3012  00FB96  90D8               	bcf	status,0,c
  3013  00FB98  361A               	rlcf	??_inputEntry,f,c
  3014  00FB9A  361B               	rlcf	??_inputEntry+1,f,c
  3015  00FB9C  90D8               	bcf	status,0,c
  3016  00FB9E  361A               	rlcf	??_inputEntry,f,c
  3017  00FBA0  361B               	rlcf	??_inputEntry+1,f,c
  3018  00FBA2  0E03               	movlw	3
  3019  00FBA4  261A               	addwf	??_inputEntry,f,c
  3020  00FBA6  0E00               	movlw	0
  3021  00FBA8  221B               	addwfc	??_inputEntry+1,f,c
  3022  00FBAA  0EAB               	movlw	low _fastenerMatrix
  3023  00FBAC  241A               	addwf	??_inputEntry,w,c
  3024  00FBAE  6EF6               	movwf	tblptrl,c
  3025  00FBB0  0EFD               	movlw	high _fastenerMatrix
  3026  00FBB2  201B               	addwfc	??_inputEntry+1,w,c
  3027  00FBB4  6EF7               	movwf	tblptrh,c
  3028  00FBB6                     	if	1	;There are 3 active tblptr bytes
  3029  00FBB6  6AF8               	clrf	tblptru,c
  3030  00FBB8  0E00               	movlw	low (__mediumconst shr (0+16))
  3031  00FBBA  22F8               	addwfc	tblptru,f,c
  3032  00FBBC                     	endif
  3033  00FBBC  0008               	tblrd		*
  3034  00FBBE  50F5               	movf	tablat,w,c
  3035  00FBC0  6E1C               	movwf	(??_inputEntry+2)& (0+255),c
  3036  00FBC2  6A1D               	clrf	(??_inputEntry+3)& (0+255),c
  3037  00FBC4  5066               	movf	inputEntry@numW,w,c
  3038  00FBC6  181C               	xorwf	??_inputEntry+2,w,c
  3039  00FBC8  E110               	bnz	l2036
  3040  00FBCA  5067               	movf	inputEntry@numW+1,w,c
  3041  00FBCC  181D               	xorwf	??_inputEntry+3,w,c
  3042  00FBCE  A4D8               	btfss	status,2,c
  3043  00FBD0  D00C               	goto	l117
  3044                           
  3045                           ;main.c: 158: {
  3046                           ;main.c: 159: params.toFill[compartmentNum] = i;
  3047  00FBD2  0E82               	movlw	low (_params+2)
  3048  00FBD4  246E               	addwf	inputEntry@compartmentNum,w,c
  3049  00FBD6  6ED9               	movwf	fsr2l,c
  3050  00FBD8  0E00               	movlw	high (_params+2)
  3051  00FBDA  206F               	addwfc	inputEntry@compartmentNum+1,w,c
  3052  00FBDC  6EDA               	movwf	fsr2h,c
  3053  00FBDE  C070  FFDF         	movff	inputEntry@i,indf2
  3054                           
  3055                           ;main.c: 160: found = 1;
  3056  00FBE2  0E00               	movlw	0
  3057  00FBE4  6E58               	movwf	inputEntry@found+1,c
  3058  00FBE6  0E01               	movlw	1
  3059  00FBE8  6E57               	movwf	inputEntry@found,c
  3060  00FBEA                     l117:
  3061  00FBEA                     l2036:
  3062  00FBEA  4A70               	infsnz	inputEntry@i,f,c
  3063  00FBEC  2A71               	incf	inputEntry@i+1,f,c
  3064  00FBEE  BE71               	btfsc	inputEntry@i+1,7,c
  3065  00FBF0  D76C               	goto	l115
  3066  00FBF2  5071               	movf	inputEntry@i+1,w,c
  3067  00FBF4  E101               	bnz	l2040
  3068  00FBF6  D763               	goto	L4
  3069  00FBF8                     u1740:
  3070  00FBF8                     l2040:
  3071                           
  3072                           ;main.c: 161: }
  3073                           ;main.c: 162: }
  3074                           ;main.c: 163: if (!found) {
  3075  00FBF8  5057               	movf	inputEntry@found,w,c
  3076  00FBFA  1058               	iorwf	inputEntry@found+1,w,c
  3077  00FBFC  A4D8               	btfss	status,2,c
  3078  00FBFE  D007               	goto	l118
  3079                           
  3080                           ;main.c: 164: printErrorLCD(errMsgs.badEntry);
  3081  00FC00  0E36               	movlw	low _errMsgs
  3082  00FC02  6E16               	movwf	printErrorLCD@string,c
  3083  00FC04  0EFE               	movlw	high _errMsgs
  3084  00FC06  6E17               	movwf	printErrorLCD@string+1,c
  3085  00FC08  EC27  F077         	call	_printErrorLCD	;wreg free
  3086                           
  3087                           ;main.c: 168: } else {
  3088                           
  3089                           ;main.c: 167: continue;
  3090  00FC0C  D004               	goto	l119
  3091  00FC0E                     l118:
  3092                           
  3093                           ;main.c: 169: setIsGood = 1;
  3094  00FC0E  0E00               	movlw	0
  3095  00FC10  6E5A               	movwf	inputEntry@setIsGood+1,c
  3096  00FC12  0E01               	movlw	1
  3097  00FC14                     L2:
  3098  00FC14  6E59               	movwf	inputEntry@setIsGood,c
  3099  00FC16                     l119:
  3100  00FC16  5059               	movf	inputEntry@setIsGood,w,c
  3101  00FC18  105A               	iorwf	inputEntry@setIsGood+1,w,c
  3102  00FC1A  B4D8               	btfsc	status,2,c
  3103  00FC1C  D6AF               	goto	l93
  3104  00FC1E                     u1760:
  3105                           
  3106                           ;main.c: 175: doneMultiples = 0;
  3107                           
  3108                           ;main.c: 170: }
  3109                           ;main.c: 171: }
  3110                           ;main.c: 174: STARTMULTIPLES:
  3111  00FC1E  0E00               	movlw	0
  3112  00FC20  6E5C               	movwf	inputEntry@doneMultiples+1,c
  3113  00FC22  0E00               	movlw	0
  3114  00FC24  D094               	goto	L5
  3115  00FC26                     
  3116                           ;main.c: 177: printStringLCD(inputEntryQuestions[2]);
  3117  00FC26  0E58               	movlw	low (_inputEntryQuestions+66)
  3118  00FC28  6E07               	movwf	printStringLCD@string,c
  3119  00FC2A  0EFF               	movlw	high (_inputEntryQuestions+66)
  3120  00FC2C  6E08               	movwf	printStringLCD@string+1,c
  3121  00FC2E  ECA7  F07A         	call	_printStringLCD	;wreg free
  3122                           
  3123                           ;main.c: 178: lcd_set_cursor(14, 1);
  3124  00FC32  0E01               	movlw	1
  3125  00FC34  6E07               	movwf	lcd_set_cursor@y,c
  3126  00FC36  0E0E               	movlw	14
  3127  00FC38  EC87  F077         	call	_lcd_set_cursor
  3128                           
  3129                           ;main.c: 180: pressed = pollKeypad();
  3130  00FC3C  EC3A  F077         	call	_pollKeypad	;wreg free
  3131  00FC40  6E72               	movwf	inputEntry@pressed,c
  3132                           
  3133                           ;main.c: 181: numPressed = pressed - 48;
  3134  00FC42  0ED0               	movlw	208
  3135  00FC44  2472               	addwf	inputEntry@pressed,w,c
  3136  00FC46  6E6C               	movwf	inputEntry@numPressed,c
  3137  00FC48  6A6D               	clrf	inputEntry@numPressed+1,c
  3138  00FC4A  0EFF               	movlw	255
  3139  00FC4C  226D               	addwfc	inputEntry@numPressed+1,f,c
  3140                           
  3141                           ;main.c: 183: if (pressed == 42) goto STARTCOMPARTMENT;
  3142  00FC4E  0E2A               	movlw	42
  3143  00FC50  1872               	xorwf	inputEntry@pressed,w,c
  3144  00FC52  B4D8               	btfsc	status,2,c
  3145  00FC54  D683               	goto	l88
  3146                           
  3147                           ;main.c: 186: putch(pressed);
  3148  00FC56  5072               	movf	inputEntry@pressed,w,c
  3149  00FC58  ECDE  F076         	call	_putch
  3150                           
  3151                           ;main.c: 187: _delay((unsigned long)((500)*(40000000/4000.0)));
  3152  00FC5C  0E1A               	movlw	26
  3153  00FC5E  6E1B               	movwf	(??_inputEntry+1)& (0+255),c
  3154  00FC60  0E5E               	movlw	94
  3155  00FC62  6E1A               	movwf	??_inputEntry& (0+255),c
  3156  00FC64  0E6E               	movlw	110
  3157  00FC66                     u2177:
  3158  00FC66  2EE8               	decfsz	wreg,f,c
  3159  00FC68  D7FE               	bra	u2177
  3160  00FC6A  2E1A               	decfsz	??_inputEntry& (0+255),f,c
  3161  00FC6C  D7FC               	bra	u2177
  3162  00FC6E  2E1B               	decfsz	(??_inputEntry+1)& (0+255),f,c
  3163  00FC70  D7FA               	bra	u2177
  3164  00FC72  D000               	nop2	
  3165                           
  3166                           ;main.c: 189: int sum = 0;
  3167  00FC74  0E00               	movlw	0
  3168  00FC76  6E69               	movwf	inputEntry@sum+1,c
  3169  00FC78  0E00               	movlw	0
  3170  00FC7A  6E68               	movwf	inputEntry@sum,c
  3171                           
  3172                           ;main.c: 190: for (i = 0; i < 4; i++) {
  3173  00FC7C  0E00               	movlw	0
  3174  00FC7E  6E71               	movwf	inputEntry@i+1,c
  3175  00FC80  0E00               	movlw	0
  3176  00FC82  6E70               	movwf	inputEntry@i,c
  3177  00FC84                     l2072:
  3178  00FC84  BE71               	btfsc	inputEntry@i+1,7,c
  3179  00FC86  D006               	goto	l124
  3180  00FC88  5071               	movf	inputEntry@i+1,w,c
  3181  00FC8A  E127               	bnz	l2082
  3182  00FC8C  0E04               	movlw	4
  3183  00FC8E  5C70               	subwf	inputEntry@i,w,c
  3184  00FC90  B0D8               	btfsc	status,0,c
  3185  00FC92  D023               	goto	u1790
  3186  00FC94                     l124:
  3187                           
  3188                           ;main.c: 191: sum += fastenerMatrix[params.toFill[compartmentNum]][i];
  3189  00FC94  0E82               	movlw	low (_params+2)
  3190  00FC96  246E               	addwf	inputEntry@compartmentNum,w,c
  3191  00FC98  6ED9               	movwf	fsr2l,c
  3192  00FC9A  0E00               	movlw	high (_params+2)
  3193  00FC9C  206F               	addwfc	inputEntry@compartmentNum+1,w,c
  3194  00FC9E  6EDA               	movwf	fsr2h,c
  3195  00FCA0  50DF               	movf	indf2,w,c
  3196  00FCA2  6E1A               	movwf	??_inputEntry& (0+255),c
  3197  00FCA4  501A               	movf	??_inputEntry,w,c
  3198  00FCA6  0D04               	mullw	4
  3199  00FCA8  0EAB               	movlw	low _fastenerMatrix
  3200  00FCAA  6E1B               	movwf	(??_inputEntry+1)& (0+255),c
  3201  00FCAC  0EFD               	movlw	high _fastenerMatrix
  3202  00FCAE  6E1C               	movwf	(??_inputEntry+2)& (0+255),c
  3203  00FCB0  50F3               	movf	prodl,w,c
  3204  00FCB2  261B               	addwf	??_inputEntry+1,f,c
  3205  00FCB4  50F4               	movf	prodh,w,c
  3206  00FCB6  221C               	addwfc	??_inputEntry+2,f,c
  3207  00FCB8  5070               	movf	inputEntry@i,w,c
  3208  00FCBA  261B               	addwf	??_inputEntry+1,f,c
  3209  00FCBC  5071               	movf	inputEntry@i+1,w,c
  3210  00FCBE  221C               	addwfc	??_inputEntry+2,f,c
  3211  00FCC0  C01B  FFF6         	movff	??_inputEntry+1,tblptrl
  3212  00FCC4  C01C  FFF7         	movff	??_inputEntry+2,tblptrh
  3213  00FCC8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3214  00FCC8  6AF8               	clrf	tblptru,c
  3215  00FCCA                     	endif
  3216  00FCCA                     	if	0	;tblptru may be non-zero
  3217  00FCCA                     	endif
  3218  00FCCA  0008               	tblrd		*
  3219  00FCCC  50F5               	movf	tablat,w,c
  3220  00FCCE  2668               	addwf	inputEntry@sum,f,c
  3221  00FCD0  0E00               	movlw	0
  3222  00FCD2  2269               	addwfc	inputEntry@sum+1,f,c
  3223  00FCD4  4A70               	infsnz	inputEntry@i,f,c
  3224  00FCD6  2A71               	incf	inputEntry@i+1,f,c
  3225  00FCD8  D7D5               	goto	l2072
  3226  00FCDA                     u1790:
  3227  00FCDA                     l2082:
  3228                           
  3229                           ;main.c: 192: };
  3230                           ;main.c: 193: if (numPressed * sum > 4 || numPressed * sum <= 0) {
  3231  00FCDA  C06C  F001         	movff	inputEntry@numPressed,___wmul@multiplier
  3232  00FCDE  C06D  F002         	movff	inputEntry@numPressed+1,___wmul@multiplier+1
  3233  00FCE2  C068  F003         	movff	inputEntry@sum,___wmul@multiplicand
  3234  00FCE6  C069  F004         	movff	inputEntry@sum+1,___wmul@multiplicand+1
  3235  00FCEA  EC14  F077         	call	___wmul	;wreg free
  3236  00FCEE  BE02               	btfsc	?___wmul+1,7,c
  3237  00FCF0  D006               	goto	u1800
  3238  00FCF2  5002               	movf	?___wmul+1,w,c
  3239  00FCF4  E115               	bnz	l2086
  3240  00FCF6  0E05               	movlw	5
  3241  00FCF8  5C01               	subwf	?___wmul,w,c
  3242  00FCFA  B0D8               	btfsc	status,0,c
  3243  00FCFC  D011               	goto	u1810
  3244  00FCFE                     u1800:
  3245  00FCFE  C06C  F001         	movff	inputEntry@numPressed,___wmul@multiplier
  3246  00FD02  C06D  F002         	movff	inputEntry@numPressed+1,___wmul@multiplier+1
  3247  00FD06  C068  F003         	movff	inputEntry@sum,___wmul@multiplicand
  3248  00FD0A  C069  F004         	movff	inputEntry@sum+1,___wmul@multiplicand+1
  3249  00FD0E  EC14  F077         	call	___wmul	;wreg free
  3250  00FD12  BE02               	btfsc	?___wmul+1,7,c
  3251  00FD14  D005               	goto	u1810
  3252  00FD16  5002               	movf	?___wmul+1,w,c
  3253  00FD18  E10A               	bnz	l2088
  3254  00FD1A  0401               	decf	?___wmul,w,c
  3255  00FD1C  B0D8               	btfsc	status,0,c
  3256  00FD1E  D007               	goto	l126
  3257  00FD20                     u1810:
  3258  00FD20                     l2086:
  3259                           
  3260                           ;main.c: 194: printErrorLCD(errMsgs.tooManyFasteners);
  3261  00FD20  0E56               	movlw	low (_errMsgs+32)
  3262  00FD22  6E16               	movwf	printErrorLCD@string,c
  3263  00FD24  0EFE               	movlw	high (_errMsgs+32)
  3264  00FD26  6E17               	movwf	printErrorLCD@string+1,c
  3265  00FD28  EC27  F077         	call	_printErrorLCD	;wreg free
  3266                           
  3267                           ;main.c: 195: } else {
  3268  00FD2C  D011               	goto	l129
  3269  00FD2E                     l126:
  3270  00FD2E                     l2088:
  3271                           
  3272                           ;main.c: 196: params.setMultiple[compartmentNum] = numPressed;
  3273  00FD2E  90D8               	bcf	status,0,c
  3274  00FD30  346E               	rlcf	inputEntry@compartmentNum,w,c
  3275  00FD32  6ED9               	movwf	fsr2l,c
  3276  00FD34  346F               	rlcf	inputEntry@compartmentNum+1,w,c
  3277  00FD36  6EDA               	movwf	fsr2h,c
  3278  00FD38  0E8A               	movlw	low (_params+10)
  3279  00FD3A  26D9               	addwf	fsr2l,f,c
  3280  00FD3C  0E00               	movlw	high (_params+10)
  3281  00FD3E  22DA               	addwfc	fsr2h,f,c
  3282  00FD40  C06C  FFDE         	movff	inputEntry@numPressed,postinc2
  3283  00FD44  C06D  FFDD         	movff	inputEntry@numPressed+1,postdec2
  3284                           
  3285                           ;main.c: 197: doneMultiples = 1;
  3286  00FD48  0E00               	movlw	0
  3287  00FD4A  6E5C               	movwf	inputEntry@doneMultiples+1,c
  3288  00FD4C  0E01               	movlw	1
  3289  00FD4E                     L5:
  3290  00FD4E  6E5B               	movwf	inputEntry@doneMultiples,c
  3291  00FD50                     l129:
  3292  00FD50  505B               	movf	inputEntry@doneMultiples,w,c
  3293  00FD52  105C               	iorwf	inputEntry@doneMultiples+1,w,c
  3294  00FD54  A4D8               	btfss	status,2,c
  3295  00FD56  D016               	goto	l131
  3296  00FD58  D766               	goto	l122
  3297  00FD5A                     l91:
  3298                           
  3299                           ;main.c: 201: params.toFill[compartmentNum] = NONE;
  3300  00FD5A  0E82               	movlw	low (_params+2)
  3301  00FD5C  246E               	addwf	inputEntry@compartmentNum,w,c
  3302  00FD5E  6ED9               	movwf	fsr2l,c
  3303  00FD60  0E00               	movlw	high (_params+2)
  3304  00FD62  206F               	addwfc	inputEntry@compartmentNum+1,w,c
  3305  00FD64  6EDA               	movwf	fsr2h,c
  3306  00FD66  0E00               	movlw	0
  3307  00FD68  6EDF               	movwf	indf2,c
  3308                           
  3309                           ;main.c: 202: params.setMultiple[compartmentNum] = 0;
  3310  00FD6A  90D8               	bcf	status,0,c
  3311  00FD6C  346E               	rlcf	inputEntry@compartmentNum,w,c
  3312  00FD6E  6ED9               	movwf	fsr2l,c
  3313  00FD70  346F               	rlcf	inputEntry@compartmentNum+1,w,c
  3314  00FD72  6EDA               	movwf	fsr2h,c
  3315  00FD74  0E8A               	movlw	low (_params+10)
  3316  00FD76  26D9               	addwf	fsr2l,f,c
  3317  00FD78  0E00               	movlw	high (_params+10)
  3318  00FD7A  22DA               	addwfc	fsr2h,f,c
  3319  00FD7C  0E00               	movlw	0
  3320  00FD7E  6EDE               	movwf	postinc2,c
  3321  00FD80  0E00               	movlw	0
  3322  00FD82  6EDD               	movwf	postdec2,c
  3323  00FD84                     l131:
  3324  00FD84  4A6E               	infsnz	inputEntry@compartmentNum,f,c
  3325  00FD86  2A6F               	incf	inputEntry@compartmentNum+1,f,c
  3326  00FD88  BE6F               	btfsc	inputEntry@compartmentNum+1,7,c
  3327  00FD8A  D5E8               	goto	l88
  3328  00FD8C  506F               	movf	inputEntry@compartmentNum+1,w,c
  3329  00FD8E  E104               	bnz	l2100
  3330  00FD90  0E08               	movlw	8
  3331  00FD92  5C6E               	subwf	inputEntry@compartmentNum,w,c
  3332  00FD94  A0D8               	btfss	status,0,c
  3333  00FD96  D5E2               	goto	l88
  3334  00FD98                     u1830:
  3335  00FD98                     l2100:
  3336                           
  3337                           ;main.c: 203: }
  3338                           ;main.c: 204: }
  3339                           ;main.c: 205: done = 1;
  3340  00FD98  0E00               	movlw	0
  3341  00FD9A  6E56               	movwf	inputEntry@done+1,c
  3342  00FD9C  0E01               	movlw	1
  3343  00FD9E                     L1:
  3344  00FD9E  6E55               	movwf	inputEntry@done,c
  3345  00FDA0                     l87:
  3346  00FDA0  5055               	movf	inputEntry@done,w,c
  3347  00FDA2  1056               	iorwf	inputEntry@done+1,w,c
  3348  00FDA4  A4D8               	btfss	status,2,c
  3349  00FDA6  0012               	return	
  3350  00FDA8  D563               	goto	l82
  3351  00FDAA                     __end_of_inputEntry:
  3352                           	opt stack 0
  3353                           tblptru	equ	0xFF8
  3354                           tblptrh	equ	0xFF7
  3355                           tblptrl	equ	0xFF6
  3356                           tablat	equ	0xFF5
  3357                           prodh	equ	0xFF4
  3358                           prodl	equ	0xFF3
  3359                           indf0	equ	0xFEF
  3360                           postinc0	equ	0xFEE
  3361                           fsr0h	equ	0xFEA
  3362                           fsr0l	equ	0xFE9
  3363                           wreg	equ	0xFE8
  3364                           postdec1	equ	0xFE5
  3365                           plusw1	equ	0xFE3
  3366                           fsr1l	equ	0xFE1
  3367                           indf2	equ	0xFDF
  3368                           postinc2	equ	0xFDE
  3369                           postdec2	equ	0xFDD
  3370                           plusw2	equ	0xFDB
  3371                           fsr2h	equ	0xFDA
  3372                           fsr2l	equ	0xFD9
  3373                           status	equ	0xFD8
  3374                           
  3375 ;; *************** function _strcpy *****************
  3376 ;; Defined at:
  3377 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
  3378 ;; Parameters:    Size  Location     Type
  3379 ;;  to              2    6[COMRAM] PTR unsigned char 
  3380 ;;		 -> inputEntry@fastenerString(32), 
  3381 ;;  from            2    8[COMRAM] PTR const unsigned char 
  3382 ;;		 -> inputEntryQuestions(132), 
  3383 ;; Auto vars:     Size  Location     Type
  3384 ;;  cp              2   10[COMRAM] PTR unsigned char 
  3385 ;;		 -> inputEntry@fastenerString(32), 
  3386 ;; Return value:  Size  Location     Type
  3387 ;;                  2    6[COMRAM] PTR unsigned char 
  3388 ;; Registers used:
  3389 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  3390 ;; Tracked objects:
  3391 ;;		On entry : 0/0
  3392 ;;		On exit  : 0/0
  3393 ;;		Unchanged: 0/0
  3394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3395 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3396 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3398 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3399 ;;Total ram usage:        6 bytes
  3400 ;; Hardware stack levels used:    1
  3401 ;; This function calls:
  3402 ;;		Nothing
  3403 ;; This function is called by:
  3404 ;;		_inputEntry
  3405 ;; This function uses a non-reentrant model
  3406 ;;
  3407                           
  3408                           	psect	text7
  3409  00EEA2                     __ptext7:
  3410                           	opt stack 0
  3411  00EEA2                     _strcpy:
  3412                           	opt stack 28
  3413                           
  3414                           ;incstack = 0
  3415  00EEA2  C007  F00B         	movff	strcpy@to,strcpy@cp
  3416  00EEA6  C008  F00C         	movff	strcpy@to+1,strcpy@cp+1
  3417  00EEAA  D004               	goto	l946
  3418  00EEAC  4A0B               	infsnz	strcpy@cp,f,c
  3419  00EEAE  2A0C               	incf	strcpy@cp+1,f,c
  3420  00EEB0  4A09               	infsnz	strcpy@from,f,c
  3421  00EEB2  2A0A               	incf	strcpy@from+1,f,c
  3422  00EEB4                     l946:
  3423  00EEB4  C009  FFF6         	movff	strcpy@from,tblptrl
  3424  00EEB8  C00A  FFF7         	movff	strcpy@from+1,tblptrh
  3425  00EEBC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3426  00EEBC  6AF8               	clrf	tblptru,c
  3427  00EEBE                     	endif
  3428  00EEBE                     	if	0	;tblptru may be non-zero
  3429  00EEBE                     	endif
  3430  00EEBE  C00B  FFD9         	movff	strcpy@cp,fsr2l
  3431  00EEC2  C00C  FFDA         	movff	strcpy@cp+1,fsr2h
  3432  00EEC6  0008               	tblrd		*
  3433  00EEC8  CFF5 FFDF          	movff	tablat,indf2
  3434  00EECC  50DF               	movf	indf2,w,c
  3435  00EECE  B4D8               	btfsc	status,2,c
  3436  00EED0  0012               	return	
  3437  00EED2  D7EC               	goto	l947
  3438  00EED4                     __end_of_strcpy:
  3439                           	opt stack 0
  3440                           tblptru	equ	0xFF8
  3441                           tblptrh	equ	0xFF7
  3442                           tblptrl	equ	0xFF6
  3443                           tablat	equ	0xFF5
  3444                           prodh	equ	0xFF4
  3445                           prodl	equ	0xFF3
  3446                           indf0	equ	0xFEF
  3447                           postinc0	equ	0xFEE
  3448                           fsr0h	equ	0xFEA
  3449                           fsr0l	equ	0xFE9
  3450                           wreg	equ	0xFE8
  3451                           postdec1	equ	0xFE5
  3452                           plusw1	equ	0xFE3
  3453                           fsr1l	equ	0xFE1
  3454                           indf2	equ	0xFDF
  3455                           postinc2	equ	0xFDE
  3456                           postdec2	equ	0xFDD
  3457                           plusw2	equ	0xFDB
  3458                           fsr2h	equ	0xFDA
  3459                           fsr2l	equ	0xFD9
  3460                           status	equ	0xFD8
  3461                           
  3462 ;; *************** function _printErrorLCD *****************
  3463 ;; Defined at:
  3464 ;;		line 62 in file "helpers.c"
  3465 ;; Parameters:    Size  Location     Type
  3466 ;;  string          2   21[COMRAM] PTR unsigned char 
  3467 ;;		 -> errMsgs.tooManyFasteners(32), errMsgs.badEntry(32), errMsgs(224), 
  3468 ;; Auto vars:     Size  Location     Type
  3469 ;;		None
  3470 ;; Return value:  Size  Location     Type
  3471 ;;                  1    wreg      void 
  3472 ;; Registers used:
  3473 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3474 ;; Tracked objects:
  3475 ;;		On entry : 0/0
  3476 ;;		On exit  : 0/0
  3477 ;;		Unchanged: 0/0
  3478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3479 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3481 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3482 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3483 ;;Total ram usage:        4 bytes
  3484 ;; Hardware stack levels used:    1
  3485 ;; Hardware stack levels required when called:    3
  3486 ;; This function calls:
  3487 ;;		_printStringLCD
  3488 ;; This function is called by:
  3489 ;;		_inputEntry
  3490 ;; This function uses a non-reentrant model
  3491 ;;
  3492                           
  3493                           	psect	text8
  3494  00EE4E                     __ptext8:
  3495                           	opt stack 0
  3496  00EE4E                     _printErrorLCD:
  3497                           	opt stack 25
  3498                           
  3499                           ;helpers.c: 63: printStringLCD(string);
  3500                           
  3501                           ;incstack = 0
  3502  00EE4E  C016  F007         	movff	printErrorLCD@string,printStringLCD@string
  3503  00EE52  C017  F008         	movff	printErrorLCD@string+1,printStringLCD@string+1
  3504  00EE56  ECA7  F07A         	call	_printStringLCD	;wreg free
  3505                           
  3506                           ;helpers.c: 64: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3507  00EE5A  0E66               	movlw	102
  3508  00EE5C  6E19               	movwf	(??_printErrorLCD+1)& (0+255),c
  3509  00EE5E  0E76               	movlw	118
  3510  00EE60  6E18               	movwf	??_printErrorLCD& (0+255),c
  3511  00EE62  0EC1               	movlw	193
  3512  00EE64                     u2187:
  3513  00EE64  2EE8               	decfsz	wreg,f,c
  3514  00EE66  D7FE               	bra	u2187
  3515  00EE68  2E18               	decfsz	??_printErrorLCD& (0+255),f,c
  3516  00EE6A  D7FC               	bra	u2187
  3517  00EE6C  2E19               	decfsz	(??_printErrorLCD+1)& (0+255),f,c
  3518  00EE6E  D7FA               	bra	u2187
  3519  00EE70  F000               	nop	
  3520  00EE72  0012               	return		;funcret
  3521  00EE74                     __end_of_printErrorLCD:
  3522                           	opt stack 0
  3523                           tblptru	equ	0xFF8
  3524                           tblptrh	equ	0xFF7
  3525                           tblptrl	equ	0xFF6
  3526                           tablat	equ	0xFF5
  3527                           prodh	equ	0xFF4
  3528                           prodl	equ	0xFF3
  3529                           indf0	equ	0xFEF
  3530                           postinc0	equ	0xFEE
  3531                           fsr0h	equ	0xFEA
  3532                           fsr0l	equ	0xFE9
  3533                           wreg	equ	0xFE8
  3534                           postdec1	equ	0xFE5
  3535                           plusw1	equ	0xFE3
  3536                           fsr1l	equ	0xFE1
  3537                           indf2	equ	0xFDF
  3538                           postinc2	equ	0xFDE
  3539                           postdec2	equ	0xFDD
  3540                           plusw2	equ	0xFDB
  3541                           fsr2h	equ	0xFDA
  3542                           fsr2l	equ	0xFD9
  3543                           status	equ	0xFD8
  3544                           
  3545 ;; *************** function _lcd_set_cursor *****************
  3546 ;; Defined at:
  3547 ;;		line 81 in file "lcd.c"
  3548 ;; Parameters:    Size  Location     Type
  3549 ;;  x               1    wreg     unsigned char 
  3550 ;;  y               1    6[COMRAM] unsigned char 
  3551 ;; Auto vars:     Size  Location     Type
  3552 ;;  x               1    9[COMRAM] unsigned char 
  3553 ;;  i               1    8[COMRAM] unsigned char 
  3554 ;; Return value:  Size  Location     Type
  3555 ;;                  1    wreg      void 
  3556 ;; Registers used:
  3557 ;;		wreg, status,2, status,0, cstack
  3558 ;; Tracked objects:
  3559 ;;		On entry : 0/0
  3560 ;;		On exit  : 0/0
  3561 ;;		Unchanged: 0/0
  3562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3563 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3564 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3565 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3566 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3567 ;;Total ram usage:        4 bytes
  3568 ;; Hardware stack levels used:    1
  3569 ;; Hardware stack levels required when called:    3
  3570 ;; This function calls:
  3571 ;;		_lcdInst
  3572 ;;		_lcd_shift_cursor
  3573 ;; This function is called by:
  3574 ;;		_inputEntry
  3575 ;; This function uses a non-reentrant model
  3576 ;;
  3577                           
  3578                           	psect	text9
  3579  00EF0E                     __ptext9:
  3580                           	opt stack 0
  3581  00EF0E                     _lcd_set_cursor:
  3582                           	opt stack 25
  3583                           
  3584                           ;incstack = 0
  3585                           ;lcd_set_cursor@x stored from wreg
  3586  00EF0E  6E0A               	movwf	lcd_set_cursor@x,c
  3587                           
  3588                           ;lcd.c: 91: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3589  00EF10  0E80               	movlw	128
  3590  00EF12  ECD4  F076         	call	_lcdInst
  3591  00EF16  0E41               	movlw	65
  3592  00EF18  6E08               	movwf	??_lcd_set_cursor& (0+255),c
  3593  00EF1A  0EEE               	movlw	238
  3594  00EF1C                     u2197:
  3595  00EF1C  2EE8               	decfsz	wreg,f,c
  3596  00EF1E  D7FE               	bra	u2197
  3597  00EF20  2E08               	decfsz	??_lcd_set_cursor& (0+255),f,c
  3598  00EF22  D7FC               	bra	u2197
  3599  00EF24  D000               	nop2	
  3600                           
  3601                           ;lcd.c: 92: for(unsigned char i = 0; i < y; i++){lcdInst(0xC0);;}
  3602  00EF26  0E00               	movlw	0
  3603  00EF28  6E09               	movwf	lcd_set_cursor@i,c
  3604  00EF2A  D004               	goto	l219
  3605  00EF2C  0EC0               	movlw	192
  3606  00EF2E  ECD4  F076         	call	_lcdInst
  3607  00EF32  2A09               	incf	lcd_set_cursor@i,f,c
  3608  00EF34                     l219:
  3609  00EF34  5007               	movf	lcd_set_cursor@y,w,c
  3610  00EF36  5C09               	subwf	lcd_set_cursor@i,w,c
  3611  00EF38  A0D8               	btfss	status,0,c
  3612  00EF3A  D7F8               	goto	l220
  3613                           
  3614                           ;lcd.c: 93: if(x > 0){
  3615  00EF3C  500A               	movf	lcd_set_cursor@x,w,c
  3616  00EF3E  B4D8               	btfsc	status,2,c
  3617  00EF40  0012               	return	
  3618                           
  3619                           ;lcd.c: 94: lcd_shift_cursor(x, 1);
  3620  00EF42  0E01               	movlw	1
  3621  00EF44  6E04               	movwf	lcd_shift_cursor@direction,c
  3622  00EF46  500A               	movf	lcd_set_cursor@x,w,c
  3623  00EF48  ECF4  F076         	call	_lcd_shift_cursor
  3624  00EF4C  0012               	return	
  3625  00EF4E                     __end_of_lcd_set_cursor:
  3626                           	opt stack 0
  3627                           tblptru	equ	0xFF8
  3628                           tblptrh	equ	0xFF7
  3629                           tblptrl	equ	0xFF6
  3630                           tablat	equ	0xFF5
  3631                           prodh	equ	0xFF4
  3632                           prodl	equ	0xFF3
  3633                           indf0	equ	0xFEF
  3634                           postinc0	equ	0xFEE
  3635                           fsr0h	equ	0xFEA
  3636                           fsr0l	equ	0xFE9
  3637                           wreg	equ	0xFE8
  3638                           postdec1	equ	0xFE5
  3639                           plusw1	equ	0xFE3
  3640                           fsr1l	equ	0xFE1
  3641                           indf2	equ	0xFDF
  3642                           postinc2	equ	0xFDE
  3643                           postdec2	equ	0xFDD
  3644                           plusw2	equ	0xFDB
  3645                           fsr2h	equ	0xFDA
  3646                           fsr2l	equ	0xFD9
  3647                           status	equ	0xFD8
  3648                           
  3649 ;; *************** function _lcd_shift_cursor *****************
  3650 ;; Defined at:
  3651 ;;		line 98 in file "lcd.c"
  3652 ;; Parameters:    Size  Location     Type
  3653 ;;  numChars        1    wreg     unsigned char 
  3654 ;;  direction       1    3[COMRAM] unsigned char 
  3655 ;; Auto vars:     Size  Location     Type
  3656 ;;  numChars        1    4[COMRAM] unsigned char 
  3657 ;;  n               1    5[COMRAM] unsigned char 
  3658 ;; Return value:  Size  Location     Type
  3659 ;;                  1    wreg      void 
  3660 ;; Registers used:
  3661 ;;		wreg, status,2, status,0, cstack
  3662 ;; Tracked objects:
  3663 ;;		On entry : 0/0
  3664 ;;		On exit  : 0/0
  3665 ;;		Unchanged: 0/0
  3666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3667 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3668 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3670 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3671 ;;Total ram usage:        3 bytes
  3672 ;; Hardware stack levels used:    1
  3673 ;; Hardware stack levels required when called:    2
  3674 ;; This function calls:
  3675 ;;		_lcdInst
  3676 ;; This function is called by:
  3677 ;;		_lcd_set_cursor
  3678 ;; This function uses a non-reentrant model
  3679 ;;
  3680                           
  3681                           	psect	text10
  3682  00EDE8                     __ptext10:
  3683                           	opt stack 0
  3684  00EDE8                     _lcd_shift_cursor:
  3685                           	opt stack 25
  3686                           
  3687                           ;incstack = 0
  3688                           ;lcd_shift_cursor@numChars stored from wreg
  3689  00EDE8  6E05               	movwf	lcd_shift_cursor@numChars,c
  3690                           
  3691                           ;lcd.c: 110: for(unsigned char n = numChars; n > 0; n--){
  3692  00EDEA  C005  F006         	movff	lcd_shift_cursor@numChars,lcd_shift_cursor@n
  3693  00EDEE                     l1802:
  3694  00EDEE  5006               	movf	lcd_shift_cursor@n,w,c
  3695  00EDF0  B4D8               	btfsc	status,2,c
  3696  00EDF2  0012               	return	
  3697                           
  3698                           ;lcd.c: 111: lcdInst((unsigned char)(0x10 | (direction << 2)));
  3699  00EDF4  4404               	rlncf	lcd_shift_cursor@direction,w,c
  3700  00EDF6  46E8               	rlncf	wreg,f,c
  3701  00EDF8  0BFC               	andlw	252
  3702  00EDFA  0910               	iorlw	16
  3703  00EDFC  ECD4  F076         	call	_lcdInst
  3704  00EE00  0606               	decf	lcd_shift_cursor@n,f,c
  3705  00EE02  D7F5               	goto	l1802
  3706  00EE04                     __end_of_lcd_shift_cursor:
  3707                           	opt stack 0
  3708                           tblptru	equ	0xFF8
  3709                           tblptrh	equ	0xFF7
  3710                           tblptrl	equ	0xFF6
  3711                           tablat	equ	0xFF5
  3712                           prodh	equ	0xFF4
  3713                           prodl	equ	0xFF3
  3714                           indf0	equ	0xFEF
  3715                           postinc0	equ	0xFEE
  3716                           fsr0h	equ	0xFEA
  3717                           fsr0l	equ	0xFE9
  3718                           wreg	equ	0xFE8
  3719                           postdec1	equ	0xFE5
  3720                           plusw1	equ	0xFE3
  3721                           fsr1l	equ	0xFE1
  3722                           indf2	equ	0xFDF
  3723                           postinc2	equ	0xFDE
  3724                           postdec2	equ	0xFDD
  3725                           plusw2	equ	0xFDB
  3726                           fsr2h	equ	0xFDA
  3727                           fsr2l	equ	0xFD9
  3728                           status	equ	0xFD8
  3729                           
  3730 ;; *************** function ___wmul *****************
  3731 ;; Defined at:
  3732 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3733 ;; Parameters:    Size  Location     Type
  3734 ;;  multiplier      2    0[COMRAM] unsigned int 
  3735 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3736 ;; Auto vars:     Size  Location     Type
  3737 ;;  product         2    4[COMRAM] unsigned int 
  3738 ;; Return value:  Size  Location     Type
  3739 ;;                  2    0[COMRAM] unsigned int 
  3740 ;; Registers used:
  3741 ;;		wreg, status,2, status,0, prodl, prodh
  3742 ;; Tracked objects:
  3743 ;;		On entry : 0/0
  3744 ;;		On exit  : 0/0
  3745 ;;		Unchanged: 0/0
  3746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3747 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3748 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3750 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3751 ;;Total ram usage:        6 bytes
  3752 ;; Hardware stack levels used:    1
  3753 ;; This function calls:
  3754 ;;		Nothing
  3755 ;; This function is called by:
  3756 ;;		_inputEntry
  3757 ;; This function uses a non-reentrant model
  3758 ;;
  3759                           
  3760                           	psect	text11
  3761  00EE28                     __ptext11:
  3762                           	opt stack 0
  3763  00EE28                     ___wmul:
  3764                           	opt stack 28
  3765                           
  3766                           ;incstack = 0
  3767  00EE28  5001               	movf	___wmul@multiplier,w,c
  3768  00EE2A  0203               	mulwf	___wmul@multiplicand,c
  3769  00EE2C  CFF3 F005          	movff	prodl,___wmul@product
  3770  00EE30  CFF4 F006          	movff	prodh,___wmul@product+1
  3771  00EE34  5001               	movf	___wmul@multiplier,w,c
  3772  00EE36  0204               	mulwf	___wmul@multiplicand+1,c
  3773  00EE38  50F3               	movf	prodl,w,c
  3774  00EE3A  2606               	addwf	___wmul@product+1,f,c
  3775  00EE3C  5002               	movf	___wmul@multiplier+1,w,c
  3776  00EE3E  0203               	mulwf	___wmul@multiplicand,c
  3777  00EE40  50F3               	movf	prodl,w,c
  3778  00EE42  2606               	addwf	___wmul@product+1,f,c
  3779  00EE44  C005  F001         	movff	___wmul@product,?___wmul
  3780  00EE48  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3781  00EE4C  0012               	return	
  3782  00EE4E                     __end_of___wmul:
  3783                           	opt stack 0
  3784                           tblptru	equ	0xFF8
  3785                           tblptrh	equ	0xFF7
  3786                           tblptrl	equ	0xFF6
  3787                           tablat	equ	0xFF5
  3788                           prodh	equ	0xFF4
  3789                           prodl	equ	0xFF3
  3790                           indf0	equ	0xFEF
  3791                           postinc0	equ	0xFEE
  3792                           fsr0h	equ	0xFEA
  3793                           fsr0l	equ	0xFE9
  3794                           wreg	equ	0xFE8
  3795                           postdec1	equ	0xFE5
  3796                           plusw1	equ	0xFE3
  3797                           fsr1l	equ	0xFE1
  3798                           indf2	equ	0xFDF
  3799                           postinc2	equ	0xFDE
  3800                           postdec2	equ	0xFDD
  3801                           plusw2	equ	0xFDB
  3802                           fsr2h	equ	0xFDA
  3803                           fsr2l	equ	0xFD9
  3804                           status	equ	0xFD8
  3805                           
  3806 ;; *************** function _I2C_Send *****************
  3807 ;; Defined at:
  3808 ;;		line 83 in file "helpers.c"
  3809 ;; Parameters:    Size  Location     Type
  3810 ;;  address         1    wreg     unsigned char 
  3811 ;;  data            2    3[COMRAM] PTR unsigned char 
  3812 ;;		 -> inputEntry@message(21), 
  3813 ;; Auto vars:     Size  Location     Type
  3814 ;;  address         1    6[COMRAM] unsigned char 
  3815 ;;  i               2    7[COMRAM] int 
  3816 ;; Return value:  Size  Location     Type
  3817 ;;                  1    wreg      void 
  3818 ;; Registers used:
  3819 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3820 ;; Tracked objects:
  3821 ;;		On entry : 0/0
  3822 ;;		On exit  : 0/0
  3823 ;;		Unchanged: 0/0
  3824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3825 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3826 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3827 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3828 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3829 ;;Total ram usage:        6 bytes
  3830 ;; Hardware stack levels used:    1
  3831 ;; Hardware stack levels required when called:    2
  3832 ;; This function calls:
  3833 ;;		_I2C_Master_Start
  3834 ;;		_I2C_Master_Stop
  3835 ;;		_I2C_Master_Write
  3836 ;; This function is called by:
  3837 ;;		_inputEntry
  3838 ;; This function uses a non-reentrant model
  3839 ;;
  3840                           
  3841                           	psect	text12
  3842  00EFDC                     __ptext12:
  3843                           	opt stack 0
  3844  00EFDC                     _I2C_Send:
  3845                           	opt stack 26
  3846                           
  3847                           ;incstack = 0
  3848                           ;I2C_Send@address stored from wreg
  3849  00EFDC  6E07               	movwf	I2C_Send@address,c
  3850                           
  3851                           ;helpers.c: 88: int i=0;
  3852  00EFDE  0E00               	movlw	0
  3853  00EFE0  6E09               	movwf	I2C_Send@i+1,c
  3854  00EFE2  0E00               	movlw	0
  3855  00EFE4  6E08               	movwf	I2C_Send@i,c
  3856                           
  3857                           ;helpers.c: 90: I2C_Master_Start();
  3858  00EFE6  ECBE  F076         	call	_I2C_Master_Start	;wreg free
  3859                           
  3860                           ;helpers.c: 91: I2C_Master_Write(address);
  3861  00EFEA  C007  F002         	movff	I2C_Send@address,I2C_Master_Write@byteToWrite
  3862  00EFEE  6A03               	clrf	I2C_Master_Write@byteToWrite+1,c
  3863  00EFF0  ECC6  F076         	call	_I2C_Master_Write	;wreg free
  3864                           
  3865                           ;helpers.c: 93: while (data[i] != 0) {
  3866  00EFF4  D00F               	goto	l360
  3867  00EFF6                     
  3868                           ;helpers.c: 94: I2C_Master_Write(data[i]);
  3869  00EFF6  5008               	movf	I2C_Send@i,w,c
  3870  00EFF8  2404               	addwf	I2C_Send@data,w,c
  3871  00EFFA  6ED9               	movwf	fsr2l,c
  3872  00EFFC  5009               	movf	I2C_Send@i+1,w,c
  3873  00EFFE  2005               	addwfc	I2C_Send@data+1,w,c
  3874  00F000  6EDA               	movwf	fsr2h,c
  3875  00F002  50DF               	movf	indf2,w,c
  3876  00F004  6E06               	movwf	??_I2C_Send& (0+255),c
  3877  00F006  5006               	movf	??_I2C_Send,w,c
  3878  00F008  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  3879  00F00A  6A03               	clrf	I2C_Master_Write@byteToWrite+1,c
  3880  00F00C  ECC6  F076         	call	_I2C_Master_Write	;wreg free
  3881                           
  3882                           ;helpers.c: 95: i++;
  3883  00F010  4A08               	infsnz	I2C_Send@i,f,c
  3884  00F012  2A09               	incf	I2C_Send@i+1,f,c
  3885  00F014                     l360:
  3886  00F014  5008               	movf	I2C_Send@i,w,c
  3887  00F016  2404               	addwf	I2C_Send@data,w,c
  3888  00F018  6ED9               	movwf	fsr2l,c
  3889  00F01A  5009               	movf	I2C_Send@i+1,w,c
  3890  00F01C  2005               	addwfc	I2C_Send@data+1,w,c
  3891  00F01E  6EDA               	movwf	fsr2h,c
  3892  00F020  50DF               	movf	indf2,w,c
  3893  00F022  A4D8               	btfss	status,2,c
  3894  00F024  D7E8               	goto	l361
  3895                           
  3896                           ;helpers.c: 96: }
  3897                           ;helpers.c: 98: I2C_Master_Stop();
  3898  00F026  ECC2  F076         	call	_I2C_Master_Stop	;wreg free
  3899  00F02A  0012               	return	
  3900  00F02C                     __end_of_I2C_Send:
  3901                           	opt stack 0
  3902                           tblptru	equ	0xFF8
  3903                           tblptrh	equ	0xFF7
  3904                           tblptrl	equ	0xFF6
  3905                           tablat	equ	0xFF5
  3906                           prodh	equ	0xFF4
  3907                           prodl	equ	0xFF3
  3908                           indf0	equ	0xFEF
  3909                           postinc0	equ	0xFEE
  3910                           fsr0h	equ	0xFEA
  3911                           fsr0l	equ	0xFE9
  3912                           wreg	equ	0xFE8
  3913                           postdec1	equ	0xFE5
  3914                           plusw1	equ	0xFE3
  3915                           fsr1l	equ	0xFE1
  3916                           indf2	equ	0xFDF
  3917                           postinc2	equ	0xFDE
  3918                           postdec2	equ	0xFDD
  3919                           plusw2	equ	0xFDB
  3920                           fsr2h	equ	0xFDA
  3921                           fsr2l	equ	0xFD9
  3922                           status	equ	0xFD8
  3923                           
  3924 ;; *************** function _I2C_Master_Write *****************
  3925 ;; Defined at:
  3926 ;;		line 108 in file "I2C.c"
  3927 ;; Parameters:    Size  Location     Type
  3928 ;;  byteToWrite     2    1[COMRAM] unsigned int 
  3929 ;; Auto vars:     Size  Location     Type
  3930 ;;		None
  3931 ;; Return value:  Size  Location     Type
  3932 ;;                  1    wreg      void 
  3933 ;; Registers used:
  3934 ;;		wreg, status,2, status,0, cstack
  3935 ;; Tracked objects:
  3936 ;;		On entry : 0/0
  3937 ;;		On exit  : 0/0
  3938 ;;		Unchanged: 0/0
  3939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3940 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3943 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3944 ;;Total ram usage:        2 bytes
  3945 ;; Hardware stack levels used:    1
  3946 ;; Hardware stack levels required when called:    1
  3947 ;; This function calls:
  3948 ;;		_I2C_Master_Wait
  3949 ;; This function is called by:
  3950 ;;		_I2C_Send
  3951 ;; This function uses a non-reentrant model
  3952 ;;
  3953                           
  3954                           	psect	text13
  3955  00ED8C                     __ptext13:
  3956                           	opt stack 0
  3957  00ED8C                     _I2C_Master_Write:
  3958                           	opt stack 26
  3959                           
  3960                           ;I2C.c: 116: I2C_Master_Wait();
  3961                           
  3962                           ;incstack = 0
  3963  00ED8C  ECCB  F076         	call	_I2C_Master_Wait	;wreg free
  3964                           
  3965                           ;I2C.c: 117: SSPBUF = byteToWrite;
  3966  00ED90  C002  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  3967  00ED94  0012               	return		;funcret
  3968  00ED96                     __end_of_I2C_Master_Write:
  3969                           	opt stack 0
  3970                           tblptru	equ	0xFF8
  3971                           tblptrh	equ	0xFF7
  3972                           tblptrl	equ	0xFF6
  3973                           tablat	equ	0xFF5
  3974                           prodh	equ	0xFF4
  3975                           prodl	equ	0xFF3
  3976                           indf0	equ	0xFEF
  3977                           postinc0	equ	0xFEE
  3978                           fsr0h	equ	0xFEA
  3979                           fsr0l	equ	0xFE9
  3980                           wreg	equ	0xFE8
  3981                           postdec1	equ	0xFE5
  3982                           plusw1	equ	0xFE3
  3983                           fsr1l	equ	0xFE1
  3984                           indf2	equ	0xFDF
  3985                           postinc2	equ	0xFDE
  3986                           postdec2	equ	0xFDD
  3987                           plusw2	equ	0xFDB
  3988                           fsr2h	equ	0xFDA
  3989                           fsr2l	equ	0xFD9
  3990                           status	equ	0xFD8
  3991                           
  3992 ;; *************** function _I2C_Master_Stop *****************
  3993 ;; Defined at:
  3994 ;;		line 95 in file "I2C.c"
  3995 ;; Parameters:    Size  Location     Type
  3996 ;;		None
  3997 ;; Auto vars:     Size  Location     Type
  3998 ;;		None
  3999 ;; Return value:  Size  Location     Type
  4000 ;;                  1    wreg      void 
  4001 ;; Registers used:
  4002 ;;		wreg, status,2, status,0, cstack
  4003 ;; Tracked objects:
  4004 ;;		On entry : 0/0
  4005 ;;		On exit  : 0/0
  4006 ;;		Unchanged: 0/0
  4007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4011 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4012 ;;Total ram usage:        0 bytes
  4013 ;; Hardware stack levels used:    1
  4014 ;; Hardware stack levels required when called:    1
  4015 ;; This function calls:
  4016 ;;		_I2C_Master_Wait
  4017 ;; This function is called by:
  4018 ;;		_I2C_Send
  4019 ;; This function uses a non-reentrant model
  4020 ;;
  4021                           
  4022                           	psect	text14
  4023  00ED84                     __ptext14:
  4024                           	opt stack 0
  4025  00ED84                     _I2C_Master_Stop:
  4026                           	opt stack 26
  4027                           
  4028                           ;I2C.c: 104: I2C_Master_Wait();
  4029                           
  4030                           ;incstack = 0
  4031  00ED84  ECCB  F076         	call	_I2C_Master_Wait	;wreg free
  4032                           
  4033                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  4034  00ED88  84C5               	bsf	4037,2,c	;volatile
  4035  00ED8A  0012               	return		;funcret
  4036  00ED8C                     __end_of_I2C_Master_Stop:
  4037                           	opt stack 0
  4038                           tblptru	equ	0xFF8
  4039                           tblptrh	equ	0xFF7
  4040                           tblptrl	equ	0xFF6
  4041                           tablat	equ	0xFF5
  4042                           prodh	equ	0xFF4
  4043                           prodl	equ	0xFF3
  4044                           indf0	equ	0xFEF
  4045                           postinc0	equ	0xFEE
  4046                           fsr0h	equ	0xFEA
  4047                           fsr0l	equ	0xFE9
  4048                           wreg	equ	0xFE8
  4049                           postdec1	equ	0xFE5
  4050                           plusw1	equ	0xFE3
  4051                           fsr1l	equ	0xFE1
  4052                           indf2	equ	0xFDF
  4053                           postinc2	equ	0xFDE
  4054                           postdec2	equ	0xFDD
  4055                           plusw2	equ	0xFDB
  4056                           fsr2h	equ	0xFDA
  4057                           fsr2l	equ	0xFD9
  4058                           status	equ	0xFD8
  4059                           
  4060 ;; *************** function _I2C_Master_Start *****************
  4061 ;; Defined at:
  4062 ;;		line 69 in file "I2C.c"
  4063 ;; Parameters:    Size  Location     Type
  4064 ;;		None
  4065 ;; Auto vars:     Size  Location     Type
  4066 ;;		None
  4067 ;; Return value:  Size  Location     Type
  4068 ;;                  1    wreg      void 
  4069 ;; Registers used:
  4070 ;;		wreg, status,2, status,0, cstack
  4071 ;; Tracked objects:
  4072 ;;		On entry : 0/0
  4073 ;;		On exit  : 0/0
  4074 ;;		Unchanged: 0/0
  4075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4080 ;;Total ram usage:        0 bytes
  4081 ;; Hardware stack levels used:    1
  4082 ;; Hardware stack levels required when called:    1
  4083 ;; This function calls:
  4084 ;;		_I2C_Master_Wait
  4085 ;; This function is called by:
  4086 ;;		_I2C_Send
  4087 ;; This function uses a non-reentrant model
  4088 ;;
  4089                           
  4090                           	psect	text15
  4091  00ED7C                     __ptext15:
  4092                           	opt stack 0
  4093  00ED7C                     _I2C_Master_Start:
  4094                           	opt stack 26
  4095                           
  4096                           ;I2C.c: 78: I2C_Master_Wait();
  4097                           
  4098                           ;incstack = 0
  4099  00ED7C  ECCB  F076         	call	_I2C_Master_Wait	;wreg free
  4100                           
  4101                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  4102  00ED80  80C5               	bsf	4037,0,c	;volatile
  4103  00ED82  0012               	return		;funcret
  4104  00ED84                     __end_of_I2C_Master_Start:
  4105                           	opt stack 0
  4106                           tblptru	equ	0xFF8
  4107                           tblptrh	equ	0xFF7
  4108                           tblptrl	equ	0xFF6
  4109                           tablat	equ	0xFF5
  4110                           prodh	equ	0xFF4
  4111                           prodl	equ	0xFF3
  4112                           indf0	equ	0xFEF
  4113                           postinc0	equ	0xFEE
  4114                           fsr0h	equ	0xFEA
  4115                           fsr0l	equ	0xFE9
  4116                           wreg	equ	0xFE8
  4117                           postdec1	equ	0xFE5
  4118                           plusw1	equ	0xFE3
  4119                           fsr1l	equ	0xFE1
  4120                           indf2	equ	0xFDF
  4121                           postinc2	equ	0xFDE
  4122                           postdec2	equ	0xFDD
  4123                           plusw2	equ	0xFDB
  4124                           fsr2h	equ	0xFDA
  4125                           fsr2l	equ	0xFD9
  4126                           status	equ	0xFD8
  4127                           
  4128 ;; *************** function _I2C_Master_Wait *****************
  4129 ;; Defined at:
  4130 ;;		line 51 in file "I2C.c"
  4131 ;; Parameters:    Size  Location     Type
  4132 ;;		None
  4133 ;; Auto vars:     Size  Location     Type
  4134 ;;		None
  4135 ;; Return value:  Size  Location     Type
  4136 ;;                  1    wreg      void 
  4137 ;; Registers used:
  4138 ;;		wreg, status,2, status,0
  4139 ;; Tracked objects:
  4140 ;;		On entry : 0/0
  4141 ;;		On exit  : 0/0
  4142 ;;		Unchanged: 0/0
  4143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4146 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4147 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4148 ;;Total ram usage:        1 bytes
  4149 ;; Hardware stack levels used:    1
  4150 ;; This function calls:
  4151 ;;		Nothing
  4152 ;; This function is called by:
  4153 ;;		_I2C_Master_Start
  4154 ;;		_I2C_Master_Stop
  4155 ;;		_I2C_Master_Write
  4156 ;;		_I2C_Master_RepeatedStart
  4157 ;;		_I2C_Master_Read
  4158 ;; This function uses a non-reentrant model
  4159 ;;
  4160                           
  4161                           	psect	text16
  4162  00ED96                     __ptext16:
  4163                           	opt stack 0
  4164  00ED96                     _I2C_Master_Wait:
  4165                           	opt stack 26
  4166                           
  4167                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  4168                           
  4169                           ;incstack = 0
  4170  00ED96  B4C7               	btfsc	4039,2,c	;volatile
  4171  00ED98  D7FE               	goto	_I2C_Master_Wait
  4172  00ED9A  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  4173  00ED9E  0E1F               	movlw	31
  4174  00EDA0  1601               	andwf	??_I2C_Master_Wait,f,c
  4175  00EDA2  B4D8               	btfsc	status,2,c
  4176  00EDA4  0012               	return	
  4177  00EDA6  D7F7               	goto	_I2C_Master_Wait
  4178  00EDA8                     __end_of_I2C_Master_Wait:
  4179                           	opt stack 0
  4180                           tblptru	equ	0xFF8
  4181                           tblptrh	equ	0xFF7
  4182                           tblptrl	equ	0xFF6
  4183                           tablat	equ	0xFF5
  4184                           prodh	equ	0xFF4
  4185                           prodl	equ	0xFF3
  4186                           indf0	equ	0xFEF
  4187                           postinc0	equ	0xFEE
  4188                           fsr0h	equ	0xFEA
  4189                           fsr0l	equ	0xFE9
  4190                           wreg	equ	0xFE8
  4191                           postdec1	equ	0xFE5
  4192                           plusw1	equ	0xFE3
  4193                           fsr1l	equ	0xFE1
  4194                           indf2	equ	0xFDF
  4195                           postinc2	equ	0xFDE
  4196                           postdec2	equ	0xFDD
  4197                           plusw2	equ	0xFDB
  4198                           fsr2h	equ	0xFDA
  4199                           fsr2l	equ	0xFD9
  4200                           status	equ	0xFD8
  4201                           
  4202 ;; *************** function _hibernate *****************
  4203 ;; Defined at:
  4204 ;;		line 6 in file "menu.c"
  4205 ;; Parameters:    Size  Location     Type
  4206 ;;		None
  4207 ;; Auto vars:     Size  Location     Type
  4208 ;;  pressed         2   25[COMRAM] int 
  4209 ;; Return value:  Size  Location     Type
  4210 ;;                  1    wreg      void 
  4211 ;; Registers used:
  4212 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4213 ;; Tracked objects:
  4214 ;;		On entry : 0/0
  4215 ;;		On exit  : 0/0
  4216 ;;		Unchanged: 0/0
  4217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4219 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4220 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4221 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4222 ;;Total ram usage:        6 bytes
  4223 ;; Hardware stack levels used:    1
  4224 ;; Hardware stack levels required when called:    3
  4225 ;; This function calls:
  4226 ;;		_pollKeypad
  4227 ;;		_printStringLCD
  4228 ;; This function is called by:
  4229 ;;		_main
  4230 ;;		_mainMenu
  4231 ;; This function uses a non-reentrant model
  4232 ;;
  4233                           
  4234                           	psect	text17
  4235  00EED4                     __ptext17:
  4236                           	opt stack 0
  4237  00EED4                     _hibernate:
  4238                           	opt stack 26
  4239                           
  4240                           ;menu.c: 7: printStringLCD("Press 1 to begin");
  4241                           
  4242                           ;incstack = 0
  4243  00EED4  0ED2               	movlw	low STR_1
  4244  00EED6  6E07               	movwf	printStringLCD@string,c
  4245  00EED8  0EFF               	movlw	high STR_1
  4246  00EEDA  6E08               	movwf	printStringLCD@string+1,c
  4247  00EEDC  ECA7  F07A         	call	_printStringLCD	;wreg free
  4248  00EEE0                     
  4249                           ;menu.c: 10: pressed = pollKeypad();
  4250  00EEE0  EC3A  F077         	call	_pollKeypad	;wreg free
  4251  00EEE4  6E16               	movwf	??_hibernate& (0+255),c
  4252  00EEE6  5016               	movf	??_hibernate,w,c
  4253  00EEE8  6E1A               	movwf	hibernate@pressed,c
  4254  00EEEA  6A1B               	clrf	hibernate@pressed+1,c
  4255                           
  4256                           ;menu.c: 11: if (pressed - 48 == 1) {
  4257  00EEEC  0ED0               	movlw	208
  4258  00EEEE  6E16               	movwf	??_hibernate& (0+255),c
  4259  00EEF0  0EFF               	movlw	255
  4260  00EEF2  6E17               	movwf	(??_hibernate+1)& (0+255),c
  4261  00EEF4  C01A  F018         	movff	hibernate@pressed,??_hibernate+2
  4262  00EEF8  C01B  F019         	movff	hibernate@pressed+1,??_hibernate+3
  4263  00EEFC  5016               	movf	??_hibernate,w,c
  4264  00EEFE  2618               	addwf	??_hibernate+2,f,c
  4265  00EF00  5017               	movf	??_hibernate+1,w,c
  4266  00EF02  2219               	addwfc	??_hibernate+3,f,c
  4267  00EF04  0418               	decf	??_hibernate+2,w,c
  4268  00EF06  1019               	iorwf	??_hibernate+3,w,c
  4269  00EF08  B4D8               	btfsc	status,2,c
  4270  00EF0A  0012               	return	
  4271  00EF0C  D7E9               	goto	l268
  4272  00EF0E                     __end_of_hibernate:
  4273                           	opt stack 0
  4274                           tblptru	equ	0xFF8
  4275                           tblptrh	equ	0xFF7
  4276                           tblptrl	equ	0xFF6
  4277                           tablat	equ	0xFF5
  4278                           prodh	equ	0xFF4
  4279                           prodl	equ	0xFF3
  4280                           indf0	equ	0xFEF
  4281                           postinc0	equ	0xFEE
  4282                           fsr0h	equ	0xFEA
  4283                           fsr0l	equ	0xFE9
  4284                           wreg	equ	0xFE8
  4285                           postdec1	equ	0xFE5
  4286                           plusw1	equ	0xFE3
  4287                           fsr1l	equ	0xFE1
  4288                           indf2	equ	0xFDF
  4289                           postinc2	equ	0xFDE
  4290                           postdec2	equ	0xFDD
  4291                           plusw2	equ	0xFDB
  4292                           fsr2h	equ	0xFDA
  4293                           fsr2l	equ	0xFD9
  4294                           status	equ	0xFD8
  4295                           
  4296 ;; *************** function _printStringLCD *****************
  4297 ;; Defined at:
  4298 ;;		line 7 in file "helpers.c"
  4299 ;; Parameters:    Size  Location     Type
  4300 ;;  string          2    6[COMRAM] PTR unsigned char 
  4301 ;;		 -> STR_3(30), STR_2(26), STR_1(17), inputEntry@fastenerString(32), 
  4302 ;;		 -> inputEntryQuestions(132), errMsgs.tooManyFasteners(32), errMsgs.badEntry(32), errMsgs(224), 
  4303 ;; Auto vars:     Size  Location     Type
  4304 ;;  i               2   19[COMRAM] int 
  4305 ;;  newlineCharI    2   17[COMRAM] int 
  4306 ;;  newlineIndex    2   15[COMRAM] int 
  4307 ;;  spaceIndex      2   13[COMRAM] int 
  4308 ;;  j               2   11[COMRAM] int 
  4309 ;; Return value:  Size  Location     Type
  4310 ;;                  1    wreg      void 
  4311 ;; Registers used:
  4312 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4313 ;; Tracked objects:
  4314 ;;		On entry : 0/0
  4315 ;;		On exit  : 0/0
  4316 ;;		Unchanged: 0/0
  4317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4318 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4319 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4320 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4321 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4322 ;;Total ram usage:       15 bytes
  4323 ;; Hardware stack levels used:    1
  4324 ;; Hardware stack levels required when called:    2
  4325 ;; This function calls:
  4326 ;;		_lcdInst
  4327 ;;		_putch
  4328 ;; This function is called by:
  4329 ;;		_inputEntry
  4330 ;;		_hibernate
  4331 ;;		_viewLogs
  4332 ;;		_mainMenu
  4333 ;;		_printErrorLCD
  4334 ;; This function uses a non-reentrant model
  4335 ;;
  4336                           
  4337                           	psect	text18
  4338  00F54E                     __ptext18:
  4339                           	opt stack 0
  4340  00F54E                     _printStringLCD:
  4341                           	opt stack 26
  4342                           
  4343                           ;helpers.c: 12: int i;
  4344                           ;helpers.c: 13: int j = 1;
  4345                           
  4346                           ;incstack = 0
  4347  00F54E  0E00               	movlw	0
  4348  00F550  6E0D               	movwf	printStringLCD@j+1,c
  4349  00F552  0E01               	movlw	1
  4350  00F554  6E0C               	movwf	printStringLCD@j,c
  4351                           
  4352                           ;helpers.c: 14: int newlineIndex = 16;
  4353  00F556  0E00               	movlw	0
  4354  00F558  6E11               	movwf	printStringLCD@newlineIndex+1,c
  4355  00F55A  0E10               	movlw	16
  4356  00F55C  6E10               	movwf	printStringLCD@newlineIndex,c
  4357                           
  4358                           ;helpers.c: 15: int newlineCharIndex = -1;
  4359  00F55E  6812               	setf	printStringLCD@newlineCharIndex,c
  4360  00F560  6813               	setf	printStringLCD@newlineCharIndex+1,c
  4361                           
  4362                           ;helpers.c: 16: int spaceIndex = 0;
  4363  00F562  0E00               	movlw	0
  4364  00F564  6E0F               	movwf	printStringLCD@spaceIndex+1,c
  4365  00F566  0E00               	movlw	0
  4366  00F568  6E0E               	movwf	printStringLCD@spaceIndex,c
  4367                           
  4368                           ;helpers.c: 18: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4369  00F56A  0E01               	movlw	1
  4370  00F56C  ECD4  F076         	call	_lcdInst
  4371  00F570  0EC3               	movlw	195
  4372  00F572  6E09               	movwf	??_printStringLCD& (0+255),c
  4373  00F574  0ECD               	movlw	205
  4374  00F576                     u2207:
  4375  00F576  2EE8               	decfsz	wreg,f,c
  4376  00F578  D7FE               	bra	u2207
  4377  00F57A  2E09               	decfsz	??_printStringLCD& (0+255),f,c
  4378  00F57C  D7FC               	bra	u2207
  4379  00F57E  F000               	nop	
  4380                           
  4381                           ;helpers.c: 19: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  4382  00F580  0E80               	movlw	128
  4383  00F582  ECD4  F076         	call	_lcdInst
  4384  00F586  0E41               	movlw	65
  4385  00F588  6E09               	movwf	??_printStringLCD& (0+255),c
  4386  00F58A  0EEE               	movlw	238
  4387  00F58C                     u2217:
  4388  00F58C  2EE8               	decfsz	wreg,f,c
  4389  00F58E  D7FE               	bra	u2217
  4390  00F590  2E09               	decfsz	??_printStringLCD& (0+255),f,c
  4391  00F592  D7FC               	bra	u2217
  4392  00F594  D000               	nop2	
  4393                           
  4394                           ;helpers.c: 22: for (i = 0; i < 17; i++) {
  4395  00F596  0E00               	movlw	0
  4396  00F598  6E15               	movwf	printStringLCD@i+1,c
  4397  00F59A  0E00               	movlw	0
  4398  00F59C  6E14               	movwf	printStringLCD@i,c
  4399  00F59E  BE15               	btfsc	printStringLCD@i+1,7,c
  4400  00F5A0  D008               	goto	l331
  4401  00F5A2  5015               	movf	printStringLCD@i+1,w,c
  4402  00F5A4  E105               	bnz	u1090
  4403  00F5A6  0E11               	movlw	17
  4404  00F5A8  5C14               	subwf	printStringLCD@i,w,c
  4405  00F5AA  B0D8               	btfsc	status,0,c
  4406  00F5AC  D087               	goto	u1200
  4407  00F5AE  D001               	goto	l331
  4408  00F5B0                     u1090:
  4409  00F5B0  D085               	goto	u1200
  4410  00F5B2                     l331:
  4411                           
  4412                           ;helpers.c: 23: if (string[i] == 0) break;
  4413  00F5B2  5014               	movf	printStringLCD@i,w,c
  4414  00F5B4  2407               	addwf	printStringLCD@string,w,c
  4415  00F5B6  6E09               	movwf	??_printStringLCD& (0+255),c
  4416  00F5B8  5015               	movf	printStringLCD@i+1,w,c
  4417  00F5BA  2008               	addwfc	printStringLCD@string+1,w,c
  4418  00F5BC  6E0A               	movwf	(??_printStringLCD+1)& (0+255),c
  4419  00F5BE  C009  FFF6         	movff	??_printStringLCD,tblptrl
  4420  00F5C2  C00A  FFF7         	movff	??_printStringLCD+1,tblptrh
  4421  00F5C6  0E00               	movlw	low (__mediumconst shr (0+16))
  4422  00F5C8  6EF8               	movwf	tblptru,c
  4423  00F5CA  0E0F               	movlw	(high __ramtop+-1)
  4424  00F5CC  64F7               	cpfsgt	tblptrh,c
  4425  00F5CE  D003               	bra	u1107
  4426  00F5D0  0008               	tblrd		*
  4427  00F5D2  50F5               	movf	tablat,w,c
  4428  00F5D4  D005               	bra	u1100
  4429  00F5D6                     u1107:
  4430  00F5D6  CFF6 FFE9          	movff	tblptrl,fsr0l
  4431  00F5DA  CFF7 FFEA          	movff	tblptrh,fsr0h
  4432  00F5DE  50EF               	movf	indf0,w,c
  4433  00F5E0                     u1100:
  4434  00F5E0  0900               	iorlw	0
  4435  00F5E2  B4D8               	btfsc	status,2,c
  4436  00F5E4  D06B               	goto	u1200
  4437                           
  4438                           ;helpers.c: 24: if (string[i] == 32) {
  4439  00F5E6  5014               	movf	printStringLCD@i,w,c
  4440  00F5E8  2407               	addwf	printStringLCD@string,w,c
  4441  00F5EA  6E09               	movwf	??_printStringLCD& (0+255),c
  4442  00F5EC  5015               	movf	printStringLCD@i+1,w,c
  4443  00F5EE  2008               	addwfc	printStringLCD@string+1,w,c
  4444  00F5F0  6E0A               	movwf	(??_printStringLCD+1)& (0+255),c
  4445  00F5F2  C009  FFF6         	movff	??_printStringLCD,tblptrl
  4446  00F5F6  C00A  FFF7         	movff	??_printStringLCD+1,tblptrh
  4447  00F5FA  0E00               	movlw	low (__mediumconst shr (0+16))
  4448  00F5FC  6EF8               	movwf	tblptru,c
  4449  00F5FE  0E0F               	movlw	(high __ramtop+-1)
  4450  00F600  64F7               	cpfsgt	tblptrh,c
  4451  00F602  D003               	bra	u1127
  4452  00F604  0008               	tblrd		*
  4453  00F606  50F5               	movf	tablat,w,c
  4454  00F608  D005               	bra	u1120
  4455  00F60A                     u1127:
  4456  00F60A  CFF6 FFE9          	movff	tblptrl,fsr0l
  4457  00F60E  CFF7 FFEA          	movff	tblptrh,fsr0h
  4458  00F612  50EF               	movf	indf0,w,c
  4459  00F614                     u1120:
  4460  00F614  0A20               	xorlw	32
  4461  00F616  A4D8               	btfss	status,2,c
  4462  00F618  D004               	goto	l334
  4463                           
  4464                           ;helpers.c: 25: spaceIndex = i;
  4465  00F61A  C014  F00E         	movff	printStringLCD@i,printStringLCD@spaceIndex
  4466  00F61E  C015  F00F         	movff	printStringLCD@i+1,printStringLCD@spaceIndex+1
  4467  00F622                     l334:
  4468                           
  4469                           ;helpers.c: 26: }
  4470                           ;helpers.c: 28: if (string[i] == 10) {
  4471  00F622  5014               	movf	printStringLCD@i,w,c
  4472  00F624  2407               	addwf	printStringLCD@string,w,c
  4473  00F626  6E09               	movwf	??_printStringLCD& (0+255),c
  4474  00F628  5015               	movf	printStringLCD@i+1,w,c
  4475  00F62A  2008               	addwfc	printStringLCD@string+1,w,c
  4476  00F62C  6E0A               	movwf	(??_printStringLCD+1)& (0+255),c
  4477  00F62E  C009  FFF6         	movff	??_printStringLCD,tblptrl
  4478  00F632  C00A  FFF7         	movff	??_printStringLCD+1,tblptrh
  4479  00F636  0E00               	movlw	low (__mediumconst shr (0+16))
  4480  00F638  6EF8               	movwf	tblptru,c
  4481  00F63A  0E0F               	movlw	(high __ramtop+-1)
  4482  00F63C  64F7               	cpfsgt	tblptrh,c
  4483  00F63E  D003               	bra	u1147
  4484  00F640  0008               	tblrd		*
  4485  00F642  50F5               	movf	tablat,w,c
  4486  00F644  D005               	bra	u1140
  4487  00F646                     u1147:
  4488  00F646  CFF6 FFE9          	movff	tblptrl,fsr0l
  4489  00F64A  CFF7 FFEA          	movff	tblptrh,fsr0h
  4490  00F64E  50EF               	movf	indf0,w,c
  4491  00F650                     u1140:
  4492  00F650  0A0A               	xorlw	10
  4493  00F652  A4D8               	btfss	status,2,c
  4494  00F654  D008               	goto	l335
  4495                           
  4496                           ;helpers.c: 29: newlineCharIndex = i;
  4497  00F656  C014  F012         	movff	printStringLCD@i,printStringLCD@newlineCharIndex
  4498  00F65A  C015  F013         	movff	printStringLCD@i+1,printStringLCD@newlineCharIndex+1
  4499                           
  4500                           ;helpers.c: 30: newlineIndex = newlineCharIndex;
  4501  00F65E  C012  F010         	movff	printStringLCD@newlineCharIndex,printStringLCD@newlineIndex
  4502  00F662  C013  F011         	movff	printStringLCD@newlineCharIndex+1,printStringLCD@newlineIndex+1
  4503  00F666                     l335:
  4504                           
  4505                           ;helpers.c: 31: }
  4506                           ;helpers.c: 34: if (i == 16 && string[i] != 32 && newlineCharIndex < 0) {
  4507  00F666  0E10               	movlw	16
  4508  00F668  1814               	xorwf	printStringLCD@i,w,c
  4509  00F66A  1015               	iorwf	printStringLCD@i+1,w,c
  4510  00F66C  A4D8               	btfss	status,2,c
  4511  00F66E  D01F               	goto	l336
  4512  00F670  5014               	movf	printStringLCD@i,w,c
  4513  00F672  2407               	addwf	printStringLCD@string,w,c
  4514  00F674  6E09               	movwf	??_printStringLCD& (0+255),c
  4515  00F676  5015               	movf	printStringLCD@i+1,w,c
  4516  00F678  2008               	addwfc	printStringLCD@string+1,w,c
  4517  00F67A  6E0A               	movwf	(??_printStringLCD+1)& (0+255),c
  4518  00F67C  C009  FFF6         	movff	??_printStringLCD,tblptrl
  4519  00F680  C00A  FFF7         	movff	??_printStringLCD+1,tblptrh
  4520  00F684  0E00               	movlw	low (__mediumconst shr (0+16))
  4521  00F686  6EF8               	movwf	tblptru,c
  4522  00F688  0E0F               	movlw	(high __ramtop+-1)
  4523  00F68A  64F7               	cpfsgt	tblptrh,c
  4524  00F68C  D003               	bra	u1177
  4525  00F68E  0008               	tblrd		*
  4526  00F690  50F5               	movf	tablat,w,c
  4527  00F692  D005               	bra	u1170
  4528  00F694                     u1177:
  4529  00F694  CFF6 FFE9          	movff	tblptrl,fsr0l
  4530  00F698  CFF7 FFEA          	movff	tblptrh,fsr0h
  4531  00F69C  50EF               	movf	indf0,w,c
  4532  00F69E                     u1170:
  4533  00F69E  0A20               	xorlw	32
  4534  00F6A0  A4D8               	btfss	status,2,c
  4535  00F6A2  AE13               	btfss	printStringLCD@newlineCharIndex+1,7,c
  4536  00F6A4  D004               	goto	l336
  4537                           
  4538                           ;helpers.c: 35: newlineIndex = spaceIndex;
  4539  00F6A6  C00E  F010         	movff	printStringLCD@spaceIndex,printStringLCD@newlineIndex
  4540  00F6AA  C00F  F011         	movff	printStringLCD@spaceIndex+1,printStringLCD@newlineIndex+1
  4541  00F6AE                     l336:
  4542  00F6AE  4A14               	infsnz	printStringLCD@i,f,c
  4543  00F6B0  2A15               	incf	printStringLCD@i+1,f,c
  4544  00F6B2  BE15               	btfsc	printStringLCD@i+1,7,c
  4545  00F6B4  D77E               	goto	l331
  4546  00F6B6  5015               	movf	printStringLCD@i+1,w,c
  4547  00F6B8  E101               	bnz	l1760
  4548  00F6BA  D775               	goto	L6
  4549  00F6BC                     u1200:
  4550  00F6BC                     l1760:
  4551                           
  4552                           ;helpers.c: 36: }
  4553                           ;helpers.c: 37: }
  4554                           ;helpers.c: 40: for (i = 0; i < 32; i++) {
  4555  00F6BC  0E00               	movlw	0
  4556  00F6BE  6E15               	movwf	printStringLCD@i+1,c
  4557  00F6C0  0E00               	movlw	0
  4558  00F6C2  6E14               	movwf	printStringLCD@i,c
  4559  00F6C4  BE15               	btfsc	printStringLCD@i+1,7,c
  4560  00F6C6  D008               	goto	l337
  4561  00F6C8  5015               	movf	printStringLCD@i+1,w,c
  4562  00F6CA  E105               	bnz	u1210
  4563  00F6CC  0E20               	movlw	32
  4564  00F6CE  5C14               	subwf	printStringLCD@i,w,c
  4565  00F6D0  B0D8               	btfsc	status,0,c
  4566  00F6D2  0012               	return	
  4567  00F6D4  D001               	goto	l337
  4568  00F6D6                     u1210:
  4569  00F6D6  0012               	return	
  4570  00F6D8                     l337:
  4571                           
  4572                           ;helpers.c: 41: if (string[i] == 0) break;
  4573  00F6D8  5014               	movf	printStringLCD@i,w,c
  4574  00F6DA  2407               	addwf	printStringLCD@string,w,c
  4575  00F6DC  6E09               	movwf	??_printStringLCD& (0+255),c
  4576  00F6DE  5015               	movf	printStringLCD@i+1,w,c
  4577  00F6E0  2008               	addwfc	printStringLCD@string+1,w,c
  4578  00F6E2  6E0A               	movwf	(??_printStringLCD+1)& (0+255),c
  4579  00F6E4  C009  FFF6         	movff	??_printStringLCD,tblptrl
  4580  00F6E8  C00A  FFF7         	movff	??_printStringLCD+1,tblptrh
  4581  00F6EC  0E00               	movlw	low (__mediumconst shr (0+16))
  4582  00F6EE  6EF8               	movwf	tblptru,c
  4583  00F6F0  0E0F               	movlw	(high __ramtop+-1)
  4584  00F6F2  64F7               	cpfsgt	tblptrh,c
  4585  00F6F4  D003               	bra	u1227
  4586  00F6F6  0008               	tblrd		*
  4587  00F6F8  50F5               	movf	tablat,w,c
  4588  00F6FA  D005               	bra	u1220
  4589  00F6FC                     u1227:
  4590  00F6FC  CFF6 FFE9          	movff	tblptrl,fsr0l
  4591  00F700  CFF7 FFEA          	movff	tblptrh,fsr0h
  4592  00F704  50EF               	movf	indf0,w,c
  4593  00F706                     u1220:
  4594  00F706  0900               	iorlw	0
  4595  00F708  B4D8               	btfsc	status,2,c
  4596  00F70A  0012               	return	
  4597                           
  4598                           ;helpers.c: 52: if (i == newlineIndex && j < LCD_SIZE_VERT) {
  4599  00F70C  5010               	movf	printStringLCD@newlineIndex,w,c
  4600  00F70E  1814               	xorwf	printStringLCD@i,w,c
  4601  00F710  E151               	bnz	l1782
  4602  00F712  5011               	movf	printStringLCD@newlineIndex+1,w,c
  4603  00F714  1815               	xorwf	printStringLCD@i+1,w,c
  4604  00F716  A4D8               	btfss	status,2,c
  4605  00F718  D04D               	goto	l341
  4606  00F71A  0E32               	movlw	low _LCD_SIZE_VERT
  4607  00F71C  6EF6               	movwf	tblptrl,c
  4608  00F71E                     	if	1	;There is more than 1 active tblptr byte
  4609  00F71E  0EFE               	movlw	high _LCD_SIZE_VERT
  4610  00F720  6EF7               	movwf	tblptrh,c
  4611  00F722                     	endif
  4612  00F722                     	if	1	;There are 3 active tblptr bytes
  4613  00F722  0E00               	movlw	low (_LCD_SIZE_VERT shr (0+16))
  4614  00F724  6EF8               	movwf	tblptru,c
  4615  00F726                     	endif
  4616  00F726  0008               	tblrd		*
  4617  00F728  50F5               	movf	tablat,w,c
  4618  00F72A  6E09               	movwf	??_printStringLCD& (0+255),c
  4619  00F72C  6A0A               	clrf	(??_printStringLCD+1)& (0+255),c
  4620  00F72E  5009               	movf	??_printStringLCD,w,c
  4621  00F730  5C0C               	subwf	printStringLCD@j,w,c
  4622  00F732  500D               	movf	printStringLCD@j+1,w,c
  4623  00F734  0A80               	xorlw	128
  4624  00F736  6E0B               	movwf	(??_printStringLCD+2)& (0+255),c
  4625  00F738  500A               	movf	??_printStringLCD+1,w,c
  4626  00F73A  0A80               	xorlw	128
  4627  00F73C  580B               	subwfb	(??_printStringLCD+2)& (0+255),w,c
  4628  00F73E  B0D8               	btfsc	status,0,c
  4629  00F740  D039               	goto	l341
  4630                           
  4631                           ;helpers.c: 53: j++;
  4632  00F742  4A0C               	infsnz	printStringLCD@j,f,c
  4633  00F744  2A0D               	incf	printStringLCD@j+1,f,c
  4634                           
  4635                           ;helpers.c: 54: lcdInst(0xC0);;
  4636  00F746  0EC0               	movlw	192
  4637  00F748  ECD4  F076         	call	_lcdInst
  4638                           
  4639                           ;helpers.c: 55: if (string[i] == 32 || string[i] == 10) continue;
  4640  00F74C  5014               	movf	printStringLCD@i,w,c
  4641  00F74E  2407               	addwf	printStringLCD@string,w,c
  4642  00F750  6E09               	movwf	??_printStringLCD& (0+255),c
  4643  00F752  5015               	movf	printStringLCD@i+1,w,c
  4644  00F754  2008               	addwfc	printStringLCD@string+1,w,c
  4645  00F756  6E0A               	movwf	(??_printStringLCD+1)& (0+255),c
  4646  00F758  C009  FFF6         	movff	??_printStringLCD,tblptrl
  4647  00F75C  C00A  FFF7         	movff	??_printStringLCD+1,tblptrh
  4648  00F760  0E00               	movlw	low (__mediumconst shr (0+16))
  4649  00F762  6EF8               	movwf	tblptru,c
  4650  00F764  0E0F               	movlw	(high __ramtop+-1)
  4651  00F766  64F7               	cpfsgt	tblptrh,c
  4652  00F768  D003               	bra	u1267
  4653  00F76A  0008               	tblrd		*
  4654  00F76C  50F5               	movf	tablat,w,c
  4655  00F76E  D005               	bra	u1260
  4656  00F770                     u1267:
  4657  00F770  CFF6 FFE9          	movff	tblptrl,fsr0l
  4658  00F774  CFF7 FFEA          	movff	tblptrh,fsr0h
  4659  00F778  50EF               	movf	indf0,w,c
  4660  00F77A                     u1260:
  4661  00F77A  0A20               	xorlw	32
  4662  00F77C  B4D8               	btfsc	status,2,c
  4663  00F77E  D033               	goto	l344
  4664  00F780  5014               	movf	printStringLCD@i,w,c
  4665  00F782  2407               	addwf	printStringLCD@string,w,c
  4666  00F784  6E09               	movwf	??_printStringLCD& (0+255),c
  4667  00F786  5015               	movf	printStringLCD@i+1,w,c
  4668  00F788  2008               	addwfc	printStringLCD@string+1,w,c
  4669  00F78A  6E0A               	movwf	(??_printStringLCD+1)& (0+255),c
  4670  00F78C  C009  FFF6         	movff	??_printStringLCD,tblptrl
  4671  00F790  C00A  FFF7         	movff	??_printStringLCD+1,tblptrh
  4672  00F794  0E00               	movlw	low (__mediumconst shr (0+16))
  4673  00F796  6EF8               	movwf	tblptru,c
  4674  00F798  0E0F               	movlw	(high __ramtop+-1)
  4675  00F79A  64F7               	cpfsgt	tblptrh,c
  4676  00F79C  D003               	bra	u1287
  4677  00F79E  0008               	tblrd		*
  4678  00F7A0  50F5               	movf	tablat,w,c
  4679  00F7A2  D005               	bra	u1280
  4680  00F7A4                     u1287:
  4681  00F7A4  CFF6 FFE9          	movff	tblptrl,fsr0l
  4682  00F7A8  CFF7 FFEA          	movff	tblptrh,fsr0h
  4683  00F7AC  50EF               	movf	indf0,w,c
  4684  00F7AE                     u1280:
  4685  00F7AE  0A0A               	xorlw	10
  4686  00F7B0  B4D8               	btfsc	status,2,c
  4687  00F7B2  D019               	goto	l344
  4688  00F7B4                     l341:
  4689  00F7B4                     l1782:
  4690                           
  4691                           ;helpers.c: 56: }
  4692                           ;helpers.c: 58: putch(string[i]);
  4693  00F7B4  5014               	movf	printStringLCD@i,w,c
  4694  00F7B6  2407               	addwf	printStringLCD@string,w,c
  4695  00F7B8  6E09               	movwf	??_printStringLCD& (0+255),c
  4696  00F7BA  5015               	movf	printStringLCD@i+1,w,c
  4697  00F7BC  2008               	addwfc	printStringLCD@string+1,w,c
  4698  00F7BE  6E0A               	movwf	(??_printStringLCD+1)& (0+255),c
  4699  00F7C0  C009  FFF6         	movff	??_printStringLCD,tblptrl
  4700  00F7C4  C00A  FFF7         	movff	??_printStringLCD+1,tblptrh
  4701  00F7C8  0E00               	movlw	low (__mediumconst shr (0+16))
  4702  00F7CA  6EF8               	movwf	tblptru,c
  4703  00F7CC  0E0F               	movlw	(high __ramtop+-1)
  4704  00F7CE  64F7               	cpfsgt	tblptrh,c
  4705  00F7D0  D003               	bra	u1307
  4706  00F7D2  0008               	tblrd		*
  4707  00F7D4  50F5               	movf	tablat,w,c
  4708  00F7D6  D005               	bra	u1300
  4709  00F7D8                     u1307:
  4710  00F7D8  CFF6 FFE9          	movff	tblptrl,fsr0l
  4711  00F7DC  CFF7 FFEA          	movff	tblptrh,fsr0h
  4712  00F7E0  50EF               	movf	indf0,w,c
  4713  00F7E2                     u1300:
  4714  00F7E2  ECDE  F076         	call	_putch
  4715  00F7E6                     l344:
  4716  00F7E6  4A14               	infsnz	printStringLCD@i,f,c
  4717  00F7E8  2A15               	incf	printStringLCD@i+1,f,c
  4718  00F7EA  BE15               	btfsc	printStringLCD@i+1,7,c
  4719  00F7EC  D775               	goto	l337
  4720  00F7EE  5015               	movf	printStringLCD@i+1,w,c
  4721  00F7F0  E101               	bnz	l345
  4722  00F7F2  D76C               	goto	L7
  4723  00F7F4                     l345:
  4724  00F7F4  0012               	return		;funcret
  4725  00F7F6                     __end_of_printStringLCD:
  4726                           	opt stack 0
  4727                           tblptru	equ	0xFF8
  4728                           tblptrh	equ	0xFF7
  4729                           tblptrl	equ	0xFF6
  4730                           tablat	equ	0xFF5
  4731                           prodh	equ	0xFF4
  4732                           prodl	equ	0xFF3
  4733                           indf0	equ	0xFEF
  4734                           postinc0	equ	0xFEE
  4735                           fsr0h	equ	0xFEA
  4736                           fsr0l	equ	0xFE9
  4737                           wreg	equ	0xFE8
  4738                           postdec1	equ	0xFE5
  4739                           plusw1	equ	0xFE3
  4740                           fsr1l	equ	0xFE1
  4741                           indf2	equ	0xFDF
  4742                           postinc2	equ	0xFDE
  4743                           postdec2	equ	0xFDD
  4744                           plusw2	equ	0xFDB
  4745                           fsr2h	equ	0xFDA
  4746                           fsr2l	equ	0xFD9
  4747                           status	equ	0xFD8
  4748                           
  4749 ;; *************** function _putch *****************
  4750 ;; Defined at:
  4751 ;;		line 25 in file "lcd.c"
  4752 ;; Parameters:    Size  Location     Type
  4753 ;;  data            1    wreg     unsigned char 
  4754 ;; Auto vars:     Size  Location     Type
  4755 ;;  data            1    2[COMRAM] unsigned char 
  4756 ;; Return value:  Size  Location     Type
  4757 ;;                  1    wreg      void 
  4758 ;; Registers used:
  4759 ;;		wreg, status,2, status,0, cstack
  4760 ;; Tracked objects:
  4761 ;;		On entry : 0/0
  4762 ;;		On exit  : 0/0
  4763 ;;		Unchanged: 0/0
  4764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4766 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4768 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4769 ;;Total ram usage:        1 bytes
  4770 ;; Hardware stack levels used:    1
  4771 ;; Hardware stack levels required when called:    1
  4772 ;; This function calls:
  4773 ;;		_lcdNibble
  4774 ;; This function is called by:
  4775 ;;		_inputEntry
  4776 ;;		_mainMenu
  4777 ;;		_printStringLCD
  4778 ;;		_printf
  4779 ;; This function uses a non-reentrant model
  4780 ;;
  4781                           
  4782                           	psect	text19
  4783  00EDBC                     __ptext19:
  4784                           	opt stack 0
  4785  00EDBC                     _putch:
  4786                           	opt stack 26
  4787                           
  4788                           ;incstack = 0
  4789                           ;putch@data stored from wreg
  4790  00EDBC  6E03               	movwf	putch@data,c
  4791                           
  4792                           ;lcd.c: 33: LATDbits.LATD2 = 1;
  4793  00EDBE  848C               	bsf	3980,2,c	;volatile
  4794                           
  4795                           ;lcd.c: 34: lcdNibble(data);
  4796  00EDC0  5003               	movf	putch@data,w,c
  4797  00EDC2  ECCE  F078         	call	_lcdNibble
  4798                           
  4799                           ;lcd.c: 35: _delay((unsigned long)((100)*(40000000/4000000.0)));
  4800  00EDC6  0EC8               	movlw	200
  4801  00EDC8                     u2227:
  4802  00EDC8  D000               	nop2	
  4803  00EDCA  2EE8               	decfsz	wreg,f,c
  4804  00EDCC  D7FD               	bra	u2227
  4805  00EDCE  0012               	return		;funcret
  4806  00EDD0                     __end_of_putch:
  4807                           	opt stack 0
  4808                           tblptru	equ	0xFF8
  4809                           tblptrh	equ	0xFF7
  4810                           tblptrl	equ	0xFF6
  4811                           tablat	equ	0xFF5
  4812                           prodh	equ	0xFF4
  4813                           prodl	equ	0xFF3
  4814                           indf0	equ	0xFEF
  4815                           postinc0	equ	0xFEE
  4816                           fsr0h	equ	0xFEA
  4817                           fsr0l	equ	0xFE9
  4818                           wreg	equ	0xFE8
  4819                           postdec1	equ	0xFE5
  4820                           plusw1	equ	0xFE3
  4821                           fsr1l	equ	0xFE1
  4822                           indf2	equ	0xFDF
  4823                           postinc2	equ	0xFDE
  4824                           postdec2	equ	0xFDD
  4825                           plusw2	equ	0xFDB
  4826                           fsr2h	equ	0xFDA
  4827                           fsr2l	equ	0xFD9
  4828                           status	equ	0xFD8
  4829                           
  4830 ;; *************** function _pollKeypad *****************
  4831 ;; Defined at:
  4832 ;;		line 68 in file "helpers.c"
  4833 ;; Parameters:    Size  Location     Type
  4834 ;;		None
  4835 ;; Auto vars:     Size  Location     Type
  4836 ;;  keypress        1    0[COMRAM] unsigned char 
  4837 ;; Return value:  Size  Location     Type
  4838 ;;                  1    wreg      unsigned char 
  4839 ;; Registers used:
  4840 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4841 ;; Tracked objects:
  4842 ;;		On entry : 0/0
  4843 ;;		On exit  : 0/0
  4844 ;;		Unchanged: 0/0
  4845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4847 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4849 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4850 ;;Total ram usage:        1 bytes
  4851 ;; Hardware stack levels used:    1
  4852 ;; This function calls:
  4853 ;;		Nothing
  4854 ;; This function is called by:
  4855 ;;		_inputEntry
  4856 ;;		_hibernate
  4857 ;;		_viewLogs
  4858 ;;		_mainMenu
  4859 ;; This function uses a non-reentrant model
  4860 ;;
  4861                           
  4862                           	psect	text20
  4863  00EE74                     __ptext20:
  4864                           	opt stack 0
  4865  00EE74                     _pollKeypad:
  4866                           	opt stack 28
  4867                           
  4868                           ;helpers.c: 70: while (PORTBbits.RB1 == 0) {continue;}
  4869                           
  4870                           ;incstack = 0
  4871  00EE74  A281               	btfss	3969,1,c	;volatile
  4872  00EE76  D7FE               	goto	_pollKeypad
  4873                           
  4874                           ;helpers.c: 73: unsigned char keypress = (unsigned char)(PORTB & 0xF0) >> 4;
  4875  00EE78  3881               	swapf	3969,w,c	;volatile
  4876  00EE7A  0B0F               	andlw	15
  4877  00EE7C  0B0F               	andlw	15
  4878  00EE7E  6E01               	movwf	pollKeypad@keypress,c
  4879  00EE80  B281               	btfsc	3969,1,c	;volatile
  4880  00EE82  D7FE               	goto	l355
  4881                           
  4882                           ;helpers.c: 78: __nop();
  4883  00EE84  F000               	nop	
  4884                           
  4885                           ;helpers.c: 80: return keypadChars[keypress];
  4886  00EE86  5001               	movf	pollKeypad@keypress,w,c
  4887  00EE88  0D01               	mullw	1
  4888  00EE8A  0EFF               	movlw	low _keypadChars
  4889  00EE8C  24F3               	addwf	prodl,w,c
  4890  00EE8E  6EF6               	movwf	tblptrl,c
  4891  00EE90  0EFD               	movlw	high _keypadChars
  4892  00EE92  20F4               	addwfc	prodh,w,c
  4893  00EE94  6EF7               	movwf	tblptrh,c
  4894  00EE96                     	if	1	;There are 3 active tblptr bytes
  4895  00EE96  6AF8               	clrf	tblptru,c
  4896  00EE98  0E00               	movlw	low (__mediumconst shr (0+16))
  4897  00EE9A  22F8               	addwfc	tblptru,f,c
  4898  00EE9C                     	endif
  4899  00EE9C  0008               	tblrd		*
  4900  00EE9E  50F5               	movf	tablat,w,c
  4901  00EEA0  0012               	return	
  4902  00EEA2                     __end_of_pollKeypad:
  4903                           	opt stack 0
  4904                           tblptru	equ	0xFF8
  4905                           tblptrh	equ	0xFF7
  4906                           tblptrl	equ	0xFF6
  4907                           tablat	equ	0xFF5
  4908                           prodh	equ	0xFF4
  4909                           prodl	equ	0xFF3
  4910                           indf0	equ	0xFEF
  4911                           postinc0	equ	0xFEE
  4912                           fsr0h	equ	0xFEA
  4913                           fsr0l	equ	0xFE9
  4914                           wreg	equ	0xFE8
  4915                           postdec1	equ	0xFE5
  4916                           plusw1	equ	0xFE3
  4917                           fsr1l	equ	0xFE1
  4918                           indf2	equ	0xFDF
  4919                           postinc2	equ	0xFDE
  4920                           postdec2	equ	0xFDD
  4921                           plusw2	equ	0xFDB
  4922                           fsr2h	equ	0xFDA
  4923                           fsr2l	equ	0xFD9
  4924                           status	equ	0xFD8
  4925                           
  4926 ;; *************** function _initLCD *****************
  4927 ;; Defined at:
  4928 ;;		line 61 in file "lcd.c"
  4929 ;; Parameters:    Size  Location     Type
  4930 ;;		None
  4931 ;; Auto vars:     Size  Location     Type
  4932 ;;		None
  4933 ;; Return value:  Size  Location     Type
  4934 ;;                  1    wreg      void 
  4935 ;; Registers used:
  4936 ;;		wreg, status,2, status,0, cstack
  4937 ;; Tracked objects:
  4938 ;;		On entry : 0/0
  4939 ;;		On exit  : 0/0
  4940 ;;		Unchanged: 0/0
  4941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4944 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4945 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4946 ;;Total ram usage:        1 bytes
  4947 ;; Hardware stack levels used:    1
  4948 ;; Hardware stack levels required when called:    2
  4949 ;; This function calls:
  4950 ;;		_lcdInst
  4951 ;; This function is called by:
  4952 ;;		_main
  4953 ;; This function uses a non-reentrant model
  4954 ;;
  4955                           
  4956                           	psect	text21
  4957  00EF90                     __ptext21:
  4958                           	opt stack 0
  4959  00EF90                     _initLCD:
  4960                           	opt stack 28
  4961                           
  4962                           ;lcd.c: 69: _delay((unsigned long)((15)*(40000000/4000.0)));
  4963                           
  4964                           ;incstack = 0
  4965  00EF90  0EC3               	movlw	195
  4966  00EF92  6E04               	movwf	??_initLCD& (0+255),c
  4967  00EF94  0ECD               	movlw	205
  4968  00EF96                     u2237:
  4969  00EF96  2EE8               	decfsz	wreg,f,c
  4970  00EF98  D7FE               	bra	u2237
  4971  00EF9A  2E04               	decfsz	??_initLCD& (0+255),f,c
  4972  00EF9C  D7FC               	bra	u2237
  4973  00EF9E  F000               	nop	
  4974                           
  4975                           ;lcd.c: 70: lcdInst(0b00110011);
  4976  00EFA0  0E33               	movlw	51
  4977  00EFA2  ECD4  F076         	call	_lcdInst
  4978                           
  4979                           ;lcd.c: 71: lcdInst(0b00110010);
  4980  00EFA6  0E32               	movlw	50
  4981  00EFA8  ECD4  F076         	call	_lcdInst
  4982                           
  4983                           ;lcd.c: 72: lcdInst(0b00101000);
  4984  00EFAC  0E28               	movlw	40
  4985  00EFAE  ECD4  F076         	call	_lcdInst
  4986                           
  4987                           ;lcd.c: 73: lcdInst(0b00001111);
  4988  00EFB2  0E0F               	movlw	15
  4989  00EFB4  ECD4  F076         	call	_lcdInst
  4990                           
  4991                           ;lcd.c: 74: lcdInst(0b00000110);
  4992  00EFB8  0E06               	movlw	6
  4993  00EFBA  ECD4  F076         	call	_lcdInst
  4994                           
  4995                           ;lcd.c: 75: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4996  00EFBE  0E01               	movlw	1
  4997  00EFC0  ECD4  F076         	call	_lcdInst
  4998  00EFC4  0EC3               	movlw	195
  4999  00EFC6  6E04               	movwf	??_initLCD& (0+255),c
  5000  00EFC8  0ECD               	movlw	205
  5001  00EFCA                     u2247:
  5002  00EFCA  2EE8               	decfsz	wreg,f,c
  5003  00EFCC  D7FE               	bra	u2247
  5004  00EFCE  2E04               	decfsz	??_initLCD& (0+255),f,c
  5005  00EFD0  D7FC               	bra	u2247
  5006  00EFD2  F000               	nop	
  5007                           
  5008                           ;lcd.c: 78: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  5009  00EFD4  0E0F               	movlw	15
  5010  00EFD6  ECD4  F076         	call	_lcdInst
  5011  00EFDA  0012               	return		;funcret
  5012  00EFDC                     __end_of_initLCD:
  5013                           	opt stack 0
  5014                           tblptru	equ	0xFF8
  5015                           tblptrh	equ	0xFF7
  5016                           tblptrl	equ	0xFF6
  5017                           tablat	equ	0xFF5
  5018                           prodh	equ	0xFF4
  5019                           prodl	equ	0xFF3
  5020                           indf0	equ	0xFEF
  5021                           postinc0	equ	0xFEE
  5022                           fsr0h	equ	0xFEA
  5023                           fsr0l	equ	0xFE9
  5024                           wreg	equ	0xFE8
  5025                           postdec1	equ	0xFE5
  5026                           plusw1	equ	0xFE3
  5027                           fsr1l	equ	0xFE1
  5028                           indf2	equ	0xFDF
  5029                           postinc2	equ	0xFDE
  5030                           postdec2	equ	0xFDD
  5031                           plusw2	equ	0xFDB
  5032                           fsr2h	equ	0xFDA
  5033                           fsr2l	equ	0xFD9
  5034                           status	equ	0xFD8
  5035                           
  5036 ;; *************** function _lcdInst *****************
  5037 ;; Defined at:
  5038 ;;		line 12 in file "lcd.c"
  5039 ;; Parameters:    Size  Location     Type
  5040 ;;  data            1    wreg     unsigned char 
  5041 ;; Auto vars:     Size  Location     Type
  5042 ;;  data            1    2[COMRAM] unsigned char 
  5043 ;; Return value:  Size  Location     Type
  5044 ;;                  1    wreg      void 
  5045 ;; Registers used:
  5046 ;;		wreg, status,2, status,0, cstack
  5047 ;; Tracked objects:
  5048 ;;		On entry : 0/0
  5049 ;;		On exit  : 0/0
  5050 ;;		Unchanged: 0/0
  5051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5053 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5055 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5056 ;;Total ram usage:        1 bytes
  5057 ;; Hardware stack levels used:    1
  5058 ;; Hardware stack levels required when called:    1
  5059 ;; This function calls:
  5060 ;;		_lcdNibble
  5061 ;; This function is called by:
  5062 ;;		_inputEntry
  5063 ;;		_main
  5064 ;;		_initLCD
  5065 ;;		_lcd_set_cursor
  5066 ;;		_lcd_shift_cursor
  5067 ;;		_mainMenu
  5068 ;;		_printStringLCD
  5069 ;;		_lcd_shift_display
  5070 ;; This function uses a non-reentrant model
  5071 ;;
  5072                           
  5073                           	psect	text22
  5074  00EDA8                     __ptext22:
  5075                           	opt stack 0
  5076  00EDA8                     _lcdInst:
  5077                           	opt stack 26
  5078                           
  5079                           ;incstack = 0
  5080                           ;lcdInst@data stored from wreg
  5081  00EDA8  6E03               	movwf	lcdInst@data,c
  5082                           
  5083                           ;lcd.c: 20: LATDbits.LATD2 = 0;
  5084  00EDAA  948C               	bcf	3980,2,c	;volatile
  5085                           
  5086                           ;lcd.c: 21: lcdNibble(data);
  5087  00EDAC  5003               	movf	lcdInst@data,w,c
  5088  00EDAE  ECCE  F078         	call	_lcdNibble
  5089                           
  5090                           ;lcd.c: 22: _delay((unsigned long)((100)*(40000000/4000000.0)));
  5091  00EDB2  0EC8               	movlw	200
  5092  00EDB4                     u2257:
  5093  00EDB4  D000               	nop2	
  5094  00EDB6  2EE8               	decfsz	wreg,f,c
  5095  00EDB8  D7FD               	bra	u2257
  5096  00EDBA  0012               	return		;funcret
  5097  00EDBC                     __end_of_lcdInst:
  5098                           	opt stack 0
  5099                           tblptru	equ	0xFF8
  5100                           tblptrh	equ	0xFF7
  5101                           tblptrl	equ	0xFF6
  5102                           tablat	equ	0xFF5
  5103                           prodh	equ	0xFF4
  5104                           prodl	equ	0xFF3
  5105                           indf0	equ	0xFEF
  5106                           postinc0	equ	0xFEE
  5107                           fsr0h	equ	0xFEA
  5108                           fsr0l	equ	0xFE9
  5109                           wreg	equ	0xFE8
  5110                           postdec1	equ	0xFE5
  5111                           plusw1	equ	0xFE3
  5112                           fsr1l	equ	0xFE1
  5113                           indf2	equ	0xFDF
  5114                           postinc2	equ	0xFDE
  5115                           postdec2	equ	0xFDD
  5116                           plusw2	equ	0xFDB
  5117                           fsr2h	equ	0xFDA
  5118                           fsr2l	equ	0xFD9
  5119                           status	equ	0xFD8
  5120                           
  5121 ;; *************** function _lcdNibble *****************
  5122 ;; Defined at:
  5123 ;;		line 38 in file "lcd.c"
  5124 ;; Parameters:    Size  Location     Type
  5125 ;;  data            1    wreg     unsigned char 
  5126 ;; Auto vars:     Size  Location     Type
  5127 ;;  data            1    1[COMRAM] unsigned char 
  5128 ;;  temp            1    0[COMRAM] unsigned char 
  5129 ;; Return value:  Size  Location     Type
  5130 ;;                  1    wreg      void 
  5131 ;; Registers used:
  5132 ;;		wreg, status,2, status,0
  5133 ;; Tracked objects:
  5134 ;;		On entry : 0/0
  5135 ;;		On exit  : 0/0
  5136 ;;		Unchanged: 0/0
  5137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5139 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5141 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5142 ;;Total ram usage:        2 bytes
  5143 ;; Hardware stack levels used:    1
  5144 ;; This function calls:
  5145 ;;		Nothing
  5146 ;; This function is called by:
  5147 ;;		_lcdInst
  5148 ;;		_putch
  5149 ;; This function uses a non-reentrant model
  5150 ;;
  5151                           
  5152                           	psect	text23
  5153  00F19C                     __ptext23:
  5154                           	opt stack 0
  5155  00F19C                     _lcdNibble:
  5156                           	opt stack 26
  5157                           
  5158                           ;incstack = 0
  5159                           ;lcdNibble@data stored from wreg
  5160  00F19C  6E02               	movwf	lcdNibble@data,c
  5161                           
  5162                           ;lcd.c: 46: char temp = (unsigned char) (data & 0xF0);
  5163  00F19E  5002               	movf	lcdNibble@data,w,c
  5164  00F1A0  0BF0               	andlw	240
  5165  00F1A2  6E01               	movwf	lcdNibble@temp,c
  5166                           
  5167                           ;lcd.c: 47: LATD = (unsigned char) (LATD & 0x0F);
  5168  00F1A4  508C               	movf	3980,w,c	;volatile
  5169  00F1A6  0B0F               	andlw	15
  5170  00F1A8  6E8C               	movwf	3980,c	;volatile
  5171                           
  5172                           ;lcd.c: 48: LATD = (unsigned char) (temp | LATD);
  5173  00F1AA  5001               	movf	lcdNibble@temp,w,c
  5174  00F1AC  108C               	iorwf	3980,w,c	;volatile
  5175  00F1AE  6E8C               	movwf	3980,c	;volatile
  5176                           
  5177                           ;lcd.c: 50: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  5178  00F1B0  0E00               	movlw	0
  5179  00F1B2  BEF2               	btfsc	intcon,7,c	;volatile
  5180  00F1B4  0E01               	movlw	1
  5181  00F1B6  6E7E               	movwf	_LCDinterruptState,c
  5182  00F1B8  9EF2               	bcf	intcon,7,c	;volatile
  5183  00F1BA  868C               	bsf	3980,3,c	;volatile
  5184  00F1BC  0E53               	movlw	83
  5185  00F1BE                     u2267:
  5186  00F1BE  2EE8               	decfsz	wreg,f,c
  5187  00F1C0  D7FE               	bra	u2267
  5188  00F1C2  F000               	nop	
  5189  00F1C4  968C               	bcf	3980,3,c	;volatile
  5190  00F1C6  0EC8               	movlw	200
  5191  00F1C8                     u2277:
  5192  00F1C8  D000               	nop2	
  5193  00F1CA  2EE8               	decfsz	wreg,f,c
  5194  00F1CC  D7FD               	bra	u2277
  5195  00F1CE  B07E               	btfsc	_LCDinterruptState,0,c
  5196  00F1D0  D002               	bra	u1055
  5197  00F1D2  9EF2               	bcf	intcon,7,c	;volatile
  5198  00F1D4  D001               	bra	u1056
  5199  00F1D6                     u1055:
  5200  00F1D6  8EF2               	bsf	intcon,7,c	;volatile
  5201  00F1D8                     u1056:
  5202                           
  5203                           ;lcd.c: 53: data = (unsigned char) (data << 4);
  5204  00F1D8  3802               	swapf	lcdNibble@data,w,c
  5205  00F1DA  0BF0               	andlw	240
  5206  00F1DC  6E02               	movwf	lcdNibble@data,c
  5207                           
  5208                           ;lcd.c: 54: temp = (unsigned char) (data & 0xF0);
  5209  00F1DE  5002               	movf	lcdNibble@data,w,c
  5210  00F1E0  0BF0               	andlw	240
  5211  00F1E2  6E01               	movwf	lcdNibble@temp,c
  5212                           
  5213                           ;lcd.c: 55: LATD = (unsigned char) (LATD & 0x0F);
  5214  00F1E4  508C               	movf	3980,w,c	;volatile
  5215  00F1E6  0B0F               	andlw	15
  5216  00F1E8  6E8C               	movwf	3980,c	;volatile
  5217                           
  5218                           ;lcd.c: 56: LATD = (unsigned char) (temp | LATD);
  5219  00F1EA  5001               	movf	lcdNibble@temp,w,c
  5220  00F1EC  108C               	iorwf	3980,w,c	;volatile
  5221  00F1EE  6E8C               	movwf	3980,c	;volatile
  5222                           
  5223                           ;lcd.c: 58: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  5224  00F1F0  0E00               	movlw	0
  5225  00F1F2  BEF2               	btfsc	intcon,7,c	;volatile
  5226  00F1F4  0E01               	movlw	1
  5227  00F1F6  6E7E               	movwf	_LCDinterruptState,c
  5228  00F1F8  9EF2               	bcf	intcon,7,c	;volatile
  5229  00F1FA  868C               	bsf	3980,3,c	;volatile
  5230  00F1FC  0E53               	movlw	83
  5231  00F1FE                     u2287:
  5232  00F1FE  2EE8               	decfsz	wreg,f,c
  5233  00F200  D7FE               	bra	u2287
  5234  00F202  F000               	nop	
  5235  00F204  968C               	bcf	3980,3,c	;volatile
  5236  00F206  0EC8               	movlw	200
  5237  00F208                     u2297:
  5238  00F208  D000               	nop2	
  5239  00F20A  2EE8               	decfsz	wreg,f,c
  5240  00F20C  D7FD               	bra	u2297
  5241  00F20E  B07E               	btfsc	_LCDinterruptState,0,c
  5242  00F210  D002               	bra	u1065
  5243  00F212  9EF2               	bcf	intcon,7,c	;volatile
  5244  00F214  D001               	bra	u1066
  5245  00F216                     u1065:
  5246  00F216  8EF2               	bsf	intcon,7,c	;volatile
  5247  00F218                     u1066:
  5248  00F218  0012               	return		;funcret
  5249  00F21A                     __end_of_lcdNibble:
  5250                           	opt stack 0
  5251                           tblptru	equ	0xFF8
  5252                           tblptrh	equ	0xFF7
  5253                           tblptrl	equ	0xFF6
  5254                           tablat	equ	0xFF5
  5255                           prodh	equ	0xFF4
  5256                           prodl	equ	0xFF3
  5257                           intcon	equ	0xFF2
  5258                           indf0	equ	0xFEF
  5259                           postinc0	equ	0xFEE
  5260                           fsr0h	equ	0xFEA
  5261                           fsr0l	equ	0xFE9
  5262                           wreg	equ	0xFE8
  5263                           postdec1	equ	0xFE5
  5264                           plusw1	equ	0xFE3
  5265                           fsr1l	equ	0xFE1
  5266                           indf2	equ	0xFDF
  5267                           postinc2	equ	0xFDE
  5268                           postdec2	equ	0xFDD
  5269                           plusw2	equ	0xFDB
  5270                           fsr2h	equ	0xFDA
  5271                           fsr2l	equ	0xFD9
  5272                           status	equ	0xFD8
  5273                           tblptru	equ	0xFF8
  5274                           tblptrh	equ	0xFF7
  5275                           tblptrl	equ	0xFF6
  5276                           tablat	equ	0xFF5
  5277                           prodh	equ	0xFF4
  5278                           prodl	equ	0xFF3
  5279                           intcon	equ	0xFF2
  5280                           indf0	equ	0xFEF
  5281                           postinc0	equ	0xFEE
  5282                           fsr0h	equ	0xFEA
  5283                           fsr0l	equ	0xFE9
  5284                           wreg	equ	0xFE8
  5285                           postdec1	equ	0xFE5
  5286                           plusw1	equ	0xFE3
  5287                           fsr1l	equ	0xFE1
  5288                           indf2	equ	0xFDF
  5289                           postinc2	equ	0xFDE
  5290                           postdec2	equ	0xFDD
  5291                           plusw2	equ	0xFDB
  5292                           fsr2h	equ	0xFDA
  5293                           fsr2l	equ	0xFD9
  5294                           status	equ	0xFD8
  5295                           
  5296                           	psect	rparam
  5297  0000                     tblptru	equ	0xFF8
  5298                           tblptrh	equ	0xFF7
  5299                           tblptrl	equ	0xFF6
  5300                           tablat	equ	0xFF5
  5301                           prodh	equ	0xFF4
  5302                           prodl	equ	0xFF3
  5303                           intcon	equ	0xFF2
  5304                           indf0	equ	0xFEF
  5305                           postinc0	equ	0xFEE
  5306                           fsr0h	equ	0xFEA
  5307                           fsr0l	equ	0xFE9
  5308                           wreg	equ	0xFE8
  5309                           postdec1	equ	0xFE5
  5310                           plusw1	equ	0xFE3
  5311                           fsr1l	equ	0xFE1
  5312                           indf2	equ	0xFDF
  5313                           postinc2	equ	0xFDE
  5314                           postdec2	equ	0xFDD
  5315                           plusw2	equ	0xFDB
  5316                           fsr2h	equ	0xFDA
  5317                           fsr2l	equ	0xFD9
  5318                           status	equ	0xFD8


Data Sizes:
    Strings     101
    Constant    495
    Data        128
    BSS         27
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    125     126
    BANK0           128      0      49
    BANK1           256      0     105
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 132
		 -> inputEntryQuestions(CODE[132]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 32
		 -> inputEntry@fastenerString(COMRAM[32]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 32
		 -> inputEntry@fastenerString(COMRAM[32]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_5(CODE[12]), STR_4(CODE[9]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 105
		 -> STR_6(CODE[7]), fSLookup(BANK1[105]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    I2C_Send@data	PTR unsigned char  size(2) Largest target is 21
		 -> inputEntry@message(COMRAM[21]), 

    printErrorLCD@string	PTR unsigned char  size(2) Largest target is 224
		 -> errMsgs.tooManyFasteners(CODE[32]), errMsgs.badEntry(CODE[32]), errMsgs(CODE[224]), 

    printStringLCD@string	PTR unsigned char  size(2) Largest target is 224
		 -> STR_3(CODE[30]), STR_2(CODE[26]), STR_1(CODE[17]), inputEntry@fastenerString(COMRAM[32]), 
		 -> inputEntryQuestions(CODE[132]), errMsgs.tooManyFasteners(CODE[32]), errMsgs.badEntry(CODE[32]), errMsgs(CODE[224]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 32
		 -> inputEntry@fastenerString(COMRAM[32]), 


Critical Paths under _main in COMRAM

    _main->_mainMenu
    _mainMenu->_inputEntry
    _viewLogs->_printStringLCD
    _printf->___lwmod
    ___lwmod->___lwdiv
    _inputEntry->_printErrorLCD
    _strcpy->___wmul
    _printErrorLCD->_printStringLCD
    _lcd_set_cursor->_lcd_shift_cursor
    _lcd_shift_cursor->_lcdInst
    _I2C_Send->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _hibernate->_printStringLCD
    _printStringLCD->___wmul
    _putch->_lcdNibble
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   15096
                                            124 COMRAM     1     1      0
                          _hibernate
                            _initLCD
                            _lcdInst
                           _mainMenu
 ---------------------------------------------------------------------------------
 (1) _mainMenu                                            10    10      0   13327
                                            114 COMRAM    10    10      0
                          _hibernate
                         _inputEntry
                            _lcdInst
                         _pollKeypad
                     _printStringLCD
                             _printf
                              _putch
                           _viewLogs
 ---------------------------------------------------------------------------------
 (2) _viewLogs                                             3     3      0    1499
                                             21 COMRAM     3     3      0
                         _pollKeypad
                     _printStringLCD
 ---------------------------------------------------------------------------------
 (2) _printf                                              24    16      8    1390
                                             12 COMRAM    18    10      8
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _inputEntry                                          91    91      0    6966
                                             25 COMRAM    89    89      0
                           _I2C_Send
                             ___wmul
                            _lcdInst
                     _lcd_set_cursor
                         _pollKeypad
                      _printErrorLCD
                     _printStringLCD
                              _putch
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _strcpy                                               6     2      4     227
                                              6 COMRAM     6     2      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _printErrorLCD                                        4     2      2    1703
                                             21 COMRAM     4     2      2
                     _printStringLCD
 ---------------------------------------------------------------------------------
 (3) _lcd_set_cursor                                       4     3      1     678
                                              6 COMRAM     4     3      1
                            _lcdInst
                   _lcd_shift_cursor
 ---------------------------------------------------------------------------------
 (4) _lcd_shift_cursor                                     3     2      1     301
                                              3 COMRAM     3     2      1
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     767
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _I2C_Send                                             6     4      2     362
                                              3 COMRAM     6     4      2
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Write                                     2     0      2     174
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _hibernate                                            6     6      0    1499
                                             21 COMRAM     6     6      0
                         _pollKeypad
                     _printStringLCD
 ---------------------------------------------------------------------------------
 (3) _printStringLCD                                      15    13      2    1453
                                              6 COMRAM    15    13      2
                             ___wmul (ARG)
                            _lcdInst
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _pollKeypad                                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (4) _lcdInst                                              1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNibble                                            2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _hibernate
     _pollKeypad
     _printStringLCD
       ___wmul (ARG)
       _lcdInst (ARG)
         _lcdNibble
       _putch (ARG)
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _mainMenu
     _hibernate
       _pollKeypad
       _printStringLCD
         ___wmul (ARG)
         _lcdInst (ARG)
           _lcdNibble
         _putch (ARG)
           _lcdNibble
     _inputEntry
       _I2C_Send
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       ___wmul
       _lcdInst
         _lcdNibble
       _lcd_set_cursor
         _lcdInst
           _lcdNibble
         _lcd_shift_cursor
           _lcdInst
             _lcdNibble
       _pollKeypad
       _printErrorLCD
         _printStringLCD
           ___wmul (ARG)
           _lcdInst (ARG)
             _lcdNibble
           _putch (ARG)
             _lcdNibble
       _printStringLCD
         ___wmul (ARG)
         _lcdInst (ARG)
           _lcdNibble
         _putch (ARG)
           _lcdNibble
       _putch
         _lcdNibble
       _strcpy
         ___wmul (ARG)
     _lcdInst
       _lcdNibble
     _pollKeypad
     _printStringLCD
       ___wmul (ARG)
       _lcdInst (ARG)
         _lcdNibble
       _putch (ARG)
         _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _lcdNibble
     _putch
       _lcdNibble
     _viewLogs
       _pollKeypad
       _printStringLCD
         ___wmul (ARG)
         _lcdInst (ARG)
           _lcdNibble
         _putch (ARG)
           _lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      69       7       41.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      31       5       38.3%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     7D      7E       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     118      34        0.0%
DATA                 0      0     118       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Feb 22 16:53:40 2018

                            l82 F870                              l91 FD5A                              l83 F908  
                            l84 F8FA                              l93 F97C                              l87 FDA0  
                            l95 F9EC                              l96 FA54                              l88 F95C  
                            l99 FA26             printErrorLCD@string 0016             ___wmul@multiplicand 0003  
                   __CFG_BORV$3 000000                    __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000  
                  __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000                             l101 FA34  
                           l103 FA42                             l112 FA96                             l105 FA4E  
                           l122 FC26                             l131 FD84                             l115 FACA  
                           l107 FA86                             l220 EF2C                             l124 FC94  
                           l117 FBEA                             l126 FD2E                             l118 FC0E  
                           l119 FC16                             l129 FD50                             l331 F5B2  
                           l219 EF34                             l341 F7B4                             l334 F622  
                           l335 F666                             l344 F7E6                             l336 F6AE  
                           l360 F014                             l337 F6D8                             l345 F7F4  
                           l361 EFF6                             l282 F222                             l355 EE80  
                           l275 EE10                             l283 F23E                             l268 EEE0  
                           l284 F276                             l382 F466                             l286 F370  
                           l383 F3B8                             l375 F3A2                             l287 F2BC  
                           l376 F3B2                             l288 F2D4                             l393 F4D6  
                           l377 F436                             l385 F40C                             l802 F04A  
                           l394 F52A                             l386 F3E2                             l803 F042  
                           l395 F4DC                             l812 EF64                             l813 EF5C  
                           l389 F48E                             l806 F06A                             l807 F074  
                           l816 EF7C                             l817 EF86                             l946 EEB4  
                           l947 EEAC                    __CFG_CPB$OFF 000000                    __CFG_CPD$OFF 000000  
                           prod 000FF3                             wreg 000FE8                 ?_lcd_set_cursor 0007  
                  __CFG_LVP$OFF 000000                    __CFG_WDT$OFF 000000                            l2100 FD98  
                          l2040 FBF8                            l2018 FAA6                            l2036 FBEA  
                          l2072 FC84                            l2082 FCDA                            l2226 F2BC  
                          l2228 F2C4                            l2086 FD20                            l2158 F492  
                          l2088 FD2E                            l1802 EDEE                            l1760 F6BC  
                          l1782 F7B4                            l1944 F8FA                            STR_1 FFD2  
                          STR_2 FFB8                            STR_3 FF9A                            STR_4 FFEF  
                          STR_5 FFE3                            STR_6 FFF8                            u1100 F5E0  
                          u1200 F6BC                            u1120 F614                            u1210 F6D6  
                          u1107 F5D6                            u1300 F7E2                            u1220 F706  
                          u1140 F650                            u1055 F1D6                            u1127 F60A  
                          u1056 F1D8                            u1065 F216                            u1066 F218  
                          u1170 F69E                            u1090 F5B0                            u1410 F04E  
                          u1307 F7D8                            u1227 F6FC                            u1147 F646  
                          u2107 F2B0                            u1260 F77A                            u2117 F2E0  
                          _LATA 000F89                            u1510 F95A                            _LATB 000F8A  
                          u2207 F576                            u2127 F2F6                            _LATC 000F8B  
                          u1280 F7AE                            u1440 EF68                            _LATD 000F8C  
                          u1177 F694                            u2217 F58C                            u2137 F35C  
                          _LATE 000F8D                            u2227 EDC8                            u1267 F770  
                          u2147 F802                            u1524 F96C                            u2237 EF96  
                          u1525 F968                            u1461 F82C                            u2157 F818  
                          u2247 EFCA                            u1287 F7A4                            u2167 F8BE  
                          u2087 F106                            u1800 FCFE                            u1480 F8DC  
                          u2257 EDB4                            u2177 FC66                            u2097 F11C  
                          u1810 FD20                            u1570 FA12                            u1490 F8EC  
                          u2267 F1BE                            u2187 EE64                            u1740 FBF8  
                          u1660 FA7C                            u1900 F42E                            u2277 F1C8  
                          u2197 EF1C                            u1830 FD98                            u2287 F1FE  
                          u1760 FC1E                            u2297 F208                            u1690 FAC8  
                          u1907 F424                            u1790 FCDA                            u1950 F4C4  
                          u1970 F532                            u1890 F404                            u1897 F3FA  
                          _main F0D2    __end_of_assemblyStepEncoding FE2F                            fsr0h 000FEA  
                          indf0 000FEF                            fsr2h 000FDA                            fsr0l 000FE9  
                          indf2 000FDF                            fsr1l 000FE1                            fsr2l 000FD9  
              __end_of_I2C_Send F02C                            prodh 000FF4                            prodl 000FF3  
                          start 0000                   __CFG_IESO$OFF 000000                   __CFG_MCLRE$ON 000000  
                  ___param_bank 000000                __end_of_LCD_LEFT FE31                 ??_printErrorLCD 0018  
              ?_I2C_Master_Wait 0001                ?_I2C_Master_Stop 0001                           ?_main 0001  
               __end_of___lwdiv F07E                 __end_of___lwmod EF90                           _PORTB 000F81  
                         _TRISA 000F92                           _TRISB 000F93                           _TRISC 000F94  
                         _TRISD 000F95                           _TRISE 000F96            printStringLCD@string 0007  
               mainMenu@pressed 0079                   __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000  
                 __CFG_WRT1$OFF 000000                   __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000  
               __end_of_lcdInst EDBC                  __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000  
                __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000  
                 __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000  
               __end_of_errMsgs FF16                 __end_of_initLCD EFDC                  __CFG_EBTRB$OFF 000000  
               __end_of_dpowers FE2A                           _putch EDBC                           tablat 000FF5  
             _LCDinterruptState 007E                           plusw1 000FE3                           plusw2 000FDB  
                         status 000FD8                 __initialization F07E                    __end_of_main F132  
             ?_lcd_shift_cursor 0004                  __CFG_OSC$HSPLL 000000               __end_of_LCD_RIGHT FE32  
                        ??_main 007D              ??_lcd_shift_cursor 0005                   __activetblptr 000003  
             ?_I2C_Master_Start 0001               ?_I2C_Master_Write 0002                       I2C_Send@i 0008  
            ??_I2C_Master_Start 0002              ??_I2C_Master_Write 0004                          ?_putch 0001  
                 inputEntry@sum 0068                          _SSPADD 000FC8                          _SSPBUF 000FC9  
                __CFG_XINST$OFF 000000                __end_of_mainMenu F398                          ___wmul EE28  
                __CFG_STVREN$ON 000000                __end_of_nanoAddr FE30                       ??___lwdiv 0005  
                     ??___lwmod 000C                          _params 0080                          clear_0 F0C4  
              ??_printStringLCD 0009                       ??_lcdInst 0003                          _printf F398  
                        _strcpy EEA2                       ??_initLCD 0004            _assemblyStepEncoding FE2A  
                     ?_I2C_Send 0004                    __mediumconst FDAA                __end_of_viewLogs EE28  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
          __end_of_LCDMenuIcons FE20                      __accesstop 0080         __end_of__initialization F0CC  
               __CFG_PBADEN$OFF 000000                   ___rparam_used 000001                  __pcstackCOMRAM 0001  
                  __pidataBANK0 EDD1                    __pidataBANK1 F133                 viewLogs@pressed 0017  
                 __end_of_putch EDD0                ??_lcd_set_cursor 0008              __size_of_lcdNibble 007E  
                    ??_I2C_Send 0006                     inputEntry@i 0070              __size_of_hibernate 003A  
                       ??_putch 0003                      __pbssBANK0 0080             mainMenu@needToPrint 0077  
           _inputEntryQuestions FF16                         ?___wmul 0001                         ?_printf 000D  
                  I2C_Send@data 0004                         ?_strcpy 0007                  inputEntry@done 0055  
                inputEntry@numB 0060                  inputEntry@numN 0062                  inputEntry@numS 0064  
                inputEntry@numW 0066                         _SSPCON1 000FC6                         _SSPCON2 000FC5  
                       _SSPSTAT 000FC7                       ?_mainMenu 0001               __end_of_lcdNibble F21A  
                       __Hparam 0000                         __Lparam 0000               __end_of_hibernate EF0E  
                     ?_viewLogs 0001                 __size_of___wmul 0026                         ___lwdiv F02C  
                       ___lwmod EF4E                         __pcinit F07E                         __ramtop 1000  
         __end_of_printErrorLCD EE74                         _lcdInst EDA8                         __ptext0 F0D2  
                       __ptext1 F21A                         __ptext2 EE04                         __ptext3 F398  
                       __ptext4 EF4E                         __ptext5 F02C                         __ptext6 F7F6  
                       __ptext7 EEA2                         __ptext8 EE4E                         __ptext9 EF0E  
               __size_of_printf 01B6                         _errMsgs FE36                 __size_of_strcpy 0032  
                       _initLCD EF90                         _dpowers FE20      printStringLCD@newlineIndex 0010  
                     _LCD_RIGHT FE31                      _inputEntry F7F6        __size_of_I2C_Master_Wait 0012  
      __size_of_I2C_Master_Stop 0008        printStringLCD@spaceIndex 000E                 printStringLCD@i 0014  
               printStringLCD@j 000C       __size_of_lcd_shift_cursor 001C            end_of_initialization F0CC  
                    ??_mainMenu 0073           __end_of_LCD_SIZE_HORZ FE34           __end_of_LCD_SIZE_VERT FE33  
      inputEntry@fastenerString 0033       __size_of_I2C_Master_Start 0008       __size_of_I2C_Master_Write 000A  
                    _pollKeypad EE74                         printf@c 001E                         printf@f 000D  
                       postdec1 000FE5                         postdec2 000FDD                      ??_viewLogs 0016  
                       postinc0 000FEE                         postinc2 000FDE       inputEntry@doneCompartment 005E  
                  _LCDMenuIcons FE10                       _PORTBbits 000F81                       _TRISCbits 000F94  
             __size_of_I2C_Send 0050    inputEntry@compartmentsToFill 005D       lcd_shift_cursor@direction 0004  
                __end_of___wmul EE4E              pollKeypad@keypress 0001                  __end_of_printf F54E  
                __end_of_strcpy EED4             start_initialization F07E                     ?_inputEntry 0001  
          inputEntry@numPressed 006C               ??_I2C_Master_Wait 0001               ??_I2C_Master_Stop 0002  
                   ?_pollKeypad 0001                        ??___wmul 0005                     __pdataBANK0 009A  
                   __pdataBANK1 0100                __CFG_LPT1OSC$OFF 000000                        ??_printf 0015  
                      ??_strcpy 000B                     __pbssCOMRAM 007E                hibernate@pressed 001A  
      inputEntry@inputEntryStep 006A                _lcd_shift_cursor EDE8         __size_of_printStringLCD 02A8  
             __size_of_mainMenu 017E                _I2C_Master_Start ED7C                _I2C_Master_Write ED8C  
              ___lwdiv@dividend 0001               __CFG_CCP2MX$PORTC 000000             __size_of_inputEntry 05B4  
                 __pmediumconst FDAA                       _lcdNibble F19C                        ?___lwdiv 0001  
                      ?___lwmod 0008               __size_of_viewLogs 0024                       _hibernate EED4  
                      ?_lcdInst 0001                        ?_initLCD 0001                        _I2C_Send EFDC  
           __size_of_pollKeypad 002E                ___lwdiv@quotient 0005                  __size_of_putch 0014  
               inputEntry@F3140 00AF                 inputEntry@F3137 009A             __end_of_keypadChars FE10  
                      _LCD_LEFT FE30         __size_of_lcd_set_cursor 0040                  _fastenerMatrix FDAB  
                ___wmul@product 0005      inputEntry@compartmentLabel 0053                        _LATDbits 000F8C  
               lcd_set_cursor@i 0009                 lcd_set_cursor@x 000A                 lcd_set_cursor@y 0007  
               inputEntry@found 0057                __CFG_WDTPS$32768 000000                      ?_lcdNibble 0001  
      inputEntry@compartmentNum 006E     __end_of_inputEntryQuestions FF9A                      ?_hibernate 0001  
             ___wmul@multiplier 0001                   lcdNibble@data 0002                      printf@flag 0016  
                 lcdNibble@temp 0001                      printf@prec 0017                       mainMenu@i 007B  
                _LCD_HORZ_LIMIT FE35             inputEntry@setIsGood 0059                       copy_data0 F092  
                     copy_data1 F0B2          __end_of_fastenerMatrix FDFF         inputEntry@doneMultiples 005B  
        __size_of_printErrorLCD 0026                        __Hrparam 0000                        __Lrparam 0000  
            __CFG_BOREN$SBORDIS 000000                        _fSLookup 0100                 I2C_Send@address 0007  
              __size_of___lwdiv 0052                __size_of___lwmod 0042                __size_of_lcdInst 0014  
              __size_of_initLCD 004C                 _I2C_Master_Wait ED96                 _I2C_Master_Stop ED84  
        __end_of_LCD_HORZ_LIMIT FE36                    ??_inputEntry 001A                     _keypadChars FDFF  
               ___lwdiv@divisor 0003                 ___lwdiv@counter 0007                        __ptext10 EDE8  
                      __ptext11 EE28                        __ptext20 EE74                        __ptext12 EFDC  
                      __ptext21 EF90                        __ptext13 ED8C                        __ptext22 EDA8  
                      __ptext14 ED84                        __ptext23 F19C                        __ptext15 ED7C  
                      __ptext16 ED96                        __ptext17 EED4                        __ptext18 F54E  
                      __ptext19 EDBC                  _printStringLCD F54E                  _LCD_VERT_LIMIT FE34  
                      _mainMenu F21A                        _nanoAddr FE2F                      strcpy@from 0009  
                 __size_of_main 0060                    ??_pollKeypad 0001                     ??_lcdNibble 0001  
                      _viewLogs EE04              __end_of_inputEntry FDAA        __end_of_lcd_shift_cursor EE04  
                     printf@val 001C                     ??_hibernate 0016     I2C_Master_Write@byteToWrite 0002  
                 _printErrorLCD EE4E               lcd_shift_cursor@n 0006                       putch@data 0003  
      __end_of_I2C_Master_Start ED84        __end_of_I2C_Master_Write ED96                      _INTCONbits 000FF2  
        __end_of_printStringLCD F7F6          __end_of_LCD_VERT_LIMIT FE35  printStringLCD@newlineCharIndex 0012  
            __end_of_pollKeypad EEA2                  _lcd_set_cursor EF0E                   _LCD_SIZE_HORZ FE33  
              ___lwmod@dividend 0008                   _LCD_SIZE_VERT FE32                        printf@ap 0018  
                      printf@cp 001A               inputEntry@message 001E         __end_of_I2C_Master_Wait EDA8  
       __end_of_I2C_Master_Stop ED8C                     lcdInst@data 0003               inputEntry@pressed 0072  
                ?_printErrorLCD 0016                 ___lwmod@divisor 000A                        strcpy@cp 000B  
                      strcpy@to 0007                 ___lwmod@counter 000C                 ?_printStringLCD 0007  
                   _SSPCON1bits 000FC6                     _SSPCON2bits 000FC5          __end_of_lcd_set_cursor EF4E  
      lcd_shift_cursor@numChars 0005  
