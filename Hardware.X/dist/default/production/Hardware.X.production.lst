

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar 27 16:29:42 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    69                           	psect	text48,global,reloc=2,class=CODE,delta=1
    70                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    71                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    72  0000                     
    73                           ; Version 1.45
    74                           ; Generated 16/11/2017 GMT
    75                           ; 
    76                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    77                           ; All rights reserved.
    78                           ; 
    79                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    80                           ; 
    81                           ; Redistribution and use in source and binary forms, with or without modification, are
    82                           ; permitted provided that the following conditions are met:
    83                           ; 
    84                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    85                           ;        conditions and the following disclaimer.
    86                           ; 
    87                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    88                           ;        of conditions and the following disclaimer in the documentation and/or other
    89                           ;        materials provided with the distribution.
    90                           ; 
    91                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    92                           ;        software without specific prior written permission.
    93                           ; 
    94                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    95                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    96                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    97                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    98                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    99                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   100                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   101                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   102                           ; 
   103                           ; 
   104                           ; Code-generator required, PIC18F4620 Definitions
   105                           ; 
   106                           ; SFR Addresses
   107  0000                     
   108                           	psect	idataCOMRAM
   109  0032D6                     __pidataCOMRAM:
   110                           	opt stack 0
   111                           
   112                           ;initializer for _shortTolerance
   113  0032D6  0012               	dw	18
   114  0032D8  0000               	dw	0
   115                           
   116                           ;initializer for _longTolerance
   117  0032DA  003C               	dw	60
   118  0032DC  0000               	dw	0
   119                           
   120                           ;initializer for _currentMotorDir
   121  0032DE  02                 	db	2
   122  0032DF  02                 	db	2
   123  0032E0  02                 	db	2
   124  0032E1  02                 	db	2
   125                           
   126                           ;initializer for _timeSinceLastTic
   127  0032E2  00                 	db	0
   128  0032E3  80                 	db	128
   129  0032E4  BF                 	db	191
   130                           
   131                           ;initializer for timer@operatingTime
   132  0032E5  00                 	db	0
   133  0032E6  80                 	db	128
   134  0032E7  BF                 	db	191
   135                           
   136                           ;initializer for inputEntry@F3189
   137  0032E8  43                 	db	67
   138  0032E9  30                 	db	48
   139                           
   140                           ;initializer for clearing@F3240
   141  0032EA  03                 	db	3
   142  0032EB  00                 	db	0
   143                           
   144                           ;initializer for packageCompartment@F3222
   145  0032EC  02                 	db	2
   146  0032ED  00                 	db	0
   147                           
   148                           	psect	idataBANK1
   149  0030D8                     __pidataBANK1:
   150                           	opt stack 0
   151                           
   152                           ;initializer for packaging@F3228
   153  0030D8  01                 	db	1
   154  0030D9  53                 	db	83
   155  0030DA  74                 	db	116
   156  0030DB  61                 	db	97
   157  0030DC  72                 	db	114
   158  0030DD  74                 	db	116
   159  0030DE  65                 	db	101
   160  0030DF  64                 	db	100
   161  0030E0  20                 	db	32
   162  0030E1  70                 	db	112
   163  0030E2  61                 	db	97
   164  0030E3  63                 	db	99
   165  0030E4  6B                 	db	107
   166  0030E5  61                 	db	97
   167  0030E6  67                 	db	103
   168  0030E7  69                 	db	105
   169  0030E8  6E                 	db	110
   170  0030E9  67                 	db	103
   171  0030EA  20                 	db	32
   172  0030EB  63                 	db	99
   173  0030EC  6F                 	db	111
   174  0030ED  6D                 	db	109
   175  0030EE  70                 	db	112
   176  0030EF  61                 	db	97
   177  0030F0  72                 	db	114
   178  0030F1  74                 	db	116
   179  0030F2  6D                 	db	109
   180  0030F3  65                 	db	101
   181  0030F4  6E                 	db	110
   182  0030F5  74                 	db	116
   183  0030F6  20                 	db	32
   184  0030F7  78                 	db	120
   185  0030F8  00                 	db	0
   186  0030F9  00                 	db	0
   187                           
   188                           ;initializer for inputEntry@F3210
   189  0030FA  01                 	db	1
   190  0030FB  53                 	db	83
   191  0030FC  74                 	db	116
   192  0030FD  61                 	db	97
   193  0030FE  72                 	db	114
   194  0030FF  74                 	db	116
   195  003100  65                 	db	101
   196  003101  64                 	db	100
   197  003102  20                 	db	32
   198  003103  63                 	db	99
   199  003104  6F                 	db	111
   200  003105  6D                 	db	109
   201  003106  70                 	db	112
   202  003107  61                 	db	97
   203  003108  72                 	db	114
   204  003109  74                 	db	116
   205  00310A  6D                 	db	109
   206  00310B  65                 	db	101
   207  00310C  6E                 	db	110
   208  00310D  74                 	db	116
   209  00310E  20                 	db	32
   210  00310F  78                 	db	120
   211  003110  00                 	db	0
   212  003111  00                 	db	0
   213                           
   214                           ;initializer for packaging@F3230
   215  003112  02                 	db	2
   216  003113  00                 	db	0
   217                           
   218                           ;initializer for packaging@F3226
   219  003114  08                 	db	8
   220  003115  00                 	db	0
   221                           
   222                           	psect	idataBANK2
   223  002ECE                     __pidataBANK2:
   224                           	opt stack 0
   225                           
   226                           ;initializer for _fSLookup
   227  002ECE  4E                 	db	78
   228  002ECF  4F                 	db	79
   229  002ED0  4E                 	db	78
   230  002ED1  45                 	db	69
   231  002ED2  00                 	db	0
   232  002ED3  42                 	db	66
   233  002ED4  00                 	db	0
   234  002ED5  00                 	db	0
   235  002ED6  00                 	db	0
   236  002ED7  00                 	db	0
   237  002ED8  4E                 	db	78
   238  002ED9  00                 	db	0
   239  002EDA  00                 	db	0
   240  002EDB  00                 	db	0
   241  002EDC  00                 	db	0
   242  002EDD  53                 	db	83
   243  002EDE  00                 	db	0
   244  002EDF  00                 	db	0
   245  002EE0  00                 	db	0
   246  002EE1  00                 	db	0
   247  002EE2  57                 	db	87
   248  002EE3  00                 	db	0
   249  002EE4  00                 	db	0
   250  002EE5  00                 	db	0
   251  002EE6  00                 	db	0
   252  002EE7  42                 	db	66
   253  002EE8  4E                 	db	78
   254  002EE9  00                 	db	0
   255  002EEA  00                 	db	0
   256  002EEB  00                 	db	0
   257  002EEC  42                 	db	66
   258  002EED  53                 	db	83
   259  002EEE  00                 	db	0
   260  002EEF  00                 	db	0
   261  002EF0  00                 	db	0
   262  002EF1  42                 	db	66
   263  002EF2  57                 	db	87
   264  002EF3  00                 	db	0
   265  002EF4  00                 	db	0
   266  002EF5  00                 	db	0
   267  002EF6  42                 	db	66
   268  002EF7  42                 	db	66
   269  002EF8  4E                 	db	78
   270  002EF9  00                 	db	0
   271  002EFA  00                 	db	0
   272  002EFB  42                 	db	66
   273  002EFC  42                 	db	66
   274  002EFD  53                 	db	83
   275  002EFE  00                 	db	0
   276  002EFF  00                 	db	0
   277  002F00  42                 	db	66
   278  002F01  42                 	db	66
   279  002F02  57                 	db	87
   280  002F03  00                 	db	0
   281  002F04  00                 	db	0
   282  002F05  42                 	db	66
   283  002F06  4E                 	db	78
   284  002F07  57                 	db	87
   285  002F08  00                 	db	0
   286  002F09  00                 	db	0
   287  002F0A  42                 	db	66
   288  002F0B  53                 	db	83
   289  002F0C  57                 	db	87
   290  002F0D  00                 	db	0
   291  002F0E  00                 	db	0
   292  002F0F  42                 	db	66
   293  002F10  57                 	db	87
   294  002F11  57                 	db	87
   295  002F12  00                 	db	0
   296  002F13  00                 	db	0
   297  002F14  42                 	db	66
   298  002F15  4E                 	db	78
   299  002F16  4E                 	db	78
   300  002F17  57                 	db	87
   301  002F18  00                 	db	0
   302  002F19  42                 	db	66
   303  002F1A  53                 	db	83
   304  002F1B  57                 	db	87
   305  002F1C  57                 	db	87
   306  002F1D  00                 	db	0
   307  002F1E  42                 	db	66
   308  002F1F  42                 	db	66
   309  002F20  53                 	db	83
   310  002F21  57                 	db	87
   311  002F22  00                 	db	0
   312  002F23  42                 	db	66
   313  002F24  42                 	db	66
   314  002F25  4E                 	db	78
   315  002F26  57                 	db	87
   316  002F27  00                 	db	0
   317  002F28  42                 	db	66
   318  002F29  4E                 	db	78
   319  002F2A  4E                 	db	78
   320  002F2B  57                 	db	87
   321  002F2C  00                 	db	0
   322  002F2D  42                 	db	66
   323  002F2E  4E                 	db	78
   324  002F2F  4E                 	db	78
   325  002F30  4E                 	db	78
   326  002F31  00                 	db	0
   327  002F32  42                 	db	66
   328  002F33  57                 	db	87
   329  002F34  57                 	db	87
   330  002F35  57                 	db	87
   331  002F36  00                 	db	0
   332                           
   333                           	psect	mediumconst
   334  00FBF0                     __pmediumconst:
   335                           	opt stack 0
   336  00FBF0  00                 	db	0
   337  00FBF1                     _dpowers:
   338                           	opt stack 0
   339  00FBF1  0001               	dw	1
   340  00FBF3  0000               	dw	0
   341  00FBF5  000A               	dw	10
   342  00FBF7  0000               	dw	0
   343  00FBF9  0064               	dw	100
   344  00FBFB  0000               	dw	0
   345  00FBFD  03E8               	dw	1000
   346  00FBFF  0000               	dw	0
   347  00FC01  2710               	dw	10000
   348  00FC03  0000               	dw	0
   349  00FC05  86A0               	dw	34464
   350  00FC07  0001               	dw	1
   351  00FC09  4240               	dw	16960
   352  00FC0B  000F               	dw	15
   353  00FC0D  9680               	dw	38528
   354  00FC0F  0098               	dw	152
   355  00FC11  E100               	dw	57600
   356  00FC13  05F5               	dw	1525
   357  00FC15  CA00               	dw	51712
   358  00FC17  3B9A               	dw	15258
   359  00FC19                     __end_of_dpowers:
   360                           	opt stack 0
   361  00FC19                     _keypadChars:
   362                           	opt stack 0
   363  00FC19  31                 	db	49
   364  00FC1A  32                 	db	50
   365  00FC1B  33                 	db	51
   366  00FC1C  42                 	db	66
   367  00FC1D  34                 	db	52
   368  00FC1E  35                 	db	53
   369  00FC1F  36                 	db	54
   370  00FC20  4E                 	db	78
   371  00FC21  37                 	db	55
   372  00FC22  38                 	db	56
   373  00FC23  39                 	db	57
   374  00FC24  53                 	db	83
   375  00FC25  2A                 	db	42
   376  00FC26  30                 	db	48
   377  00FC27  23                 	db	35
   378  00FC28  57                 	db	87
   379  00FC29  00                 	db	0
   380  00FC2A                     __end_of_keypadChars:
   381                           	opt stack 0
   382  00FC2A                     _LCDMenuIcons:
   383                           	opt stack 0
   384  00FC2A  2A                 	db	42
   385  00FC2B  3C                 	db	60
   386  00FC2C  2D                 	db	45
   387  00FC2D  20                 	db	32
   388  00FC2E  20                 	db	32
   389  00FC2F  20                 	db	32
   390  00FC30  28                 	db	40
   391  00FC31  20                 	db	32
   392  00FC32  2D                 	db	45
   393  00FC33  20                 	db	32
   394  00FC34  29                 	db	41
   395  00FC35  20                 	db	32
   396  00FC36  20                 	db	32
   397  00FC37  20                 	db	32
   398  00FC38  20                 	db	32
   399  00FC39  00                 	db	0
   400  00FC3A                     __end_of_LCDMenuIcons:
   401                           	opt stack 0
   402  00FC3A                     _assemblyStepEncoding:
   403                           	opt stack 0
   404  00FC3A  55                 	db	85
   405  00FC3B  5B                 	db	91
   406  00FC3C  77                 	db	119
   407  00FC3D  7F                 	db	127
   408  00FC3E  FF                 	db	255
   409  00FC3F                     __end_of_assemblyStepEncoding:
   410                           	opt stack 0
   411  00FC3F                     _nanoAddr:
   412                           	opt stack 0
   413  00FC3F  10                 	db	16
   414  00FC40                     __end_of_nanoAddr:
   415                           	opt stack 0
   416  00FC40                     _LCD_LEFT:
   417                           	opt stack 0
   418  00FC40  00                 	db	0
   419  00FC41                     __end_of_LCD_LEFT:
   420                           	opt stack 0
   421  00FC41                     _LCD_RIGHT:
   422                           	opt stack 0
   423  00FC41  01                 	db	1
   424  00FC42                     __end_of_LCD_RIGHT:
   425                           	opt stack 0
   426  00FC42                     _LCD_SIZE_VERT:
   427                           	opt stack 0
   428  00FC42  02                 	db	2
   429  00FC43                     __end_of_LCD_SIZE_VERT:
   430                           	opt stack 0
   431  00FC43                     _LCD_SIZE_HORZ:
   432                           	opt stack 0
   433  00FC43  10                 	db	16
   434  00FC44                     __end_of_LCD_SIZE_HORZ:
   435                           	opt stack 0
   436  00FC44                     _LCD_VERT_LIMIT:
   437                           	opt stack 0
   438  00FC44  02                 	db	2
   439  00FC45                     __end_of_LCD_VERT_LIMIT:
   440                           	opt stack 0
   441  00FC45                     _LCD_HORZ_LIMIT:
   442                           	opt stack 0
   443  00FC45  28                 	db	40
   444  00FC46                     __end_of_LCD_HORZ_LIMIT:
   445                           	opt stack 0
   446  00FC46                     _errMsgs:
   447                           	opt stack 0
   448  00FC46  49                 	db	73
   449  00FC47  6E                 	db	110
   450  00FC48  76                 	db	118
   451  00FC49  61                 	db	97
   452  00FC4A  6C                 	db	108
   453  00FC4B  69                 	db	105
   454  00FC4C  64                 	db	100
   455  00FC4D  20                 	db	32
   456  00FC4E  65                 	db	101
   457  00FC4F  6E                 	db	110
   458  00FC50  74                 	db	116
   459  00FC51  72                 	db	114
   460  00FC52  79                 	db	121
   461  00FC53  0A                 	db	10
   462  00FC54  50                 	db	80
   463  00FC55  6C                 	db	108
   464  00FC56  65                 	db	101
   465  00FC57  61                 	db	97
   466  00FC58  73                 	db	115
   467  00FC59  65                 	db	101
   468  00FC5A  20                 	db	32
   469  00FC5B  74                 	db	116
   470  00FC5C  72                 	db	114
   471  00FC5D  79                 	db	121
   472  00FC5E  20                 	db	32
   473  00FC5F  61                 	db	97
   474  00FC60  67                 	db	103
   475  00FC61  61                 	db	97
   476  00FC62  69                 	db	105
   477  00FC63  6E                 	db	110
   478  00FC64  00                 	db	0
   479  00FC65  00                 	db	0
   480  00FC66  54                 	db	84
   481  00FC67  6F                 	db	111
   482  00FC68  6F                 	db	111
   483  00FC69  20                 	db	32
   484  00FC6A  6D                 	db	109
   485  00FC6B  61                 	db	97
   486  00FC6C  6E                 	db	110
   487  00FC6D  79                 	db	121
   488  00FC6E  20                 	db	32
   489  00FC6F  66                 	db	102
   490  00FC70  61                 	db	97
   491  00FC71  73                 	db	115
   492  00FC72  74                 	db	116
   493  00FC73  65                 	db	101
   494  00FC74  6E                 	db	110
   495  00FC75  65                 	db	101
   496  00FC76  72                 	db	114
   497  00FC77  73                 	db	115
   498  00FC78  00                 	db	0
   499  00FC79  00                 	db	0
   500  00FC7A  00                 	db	0
   501  00FC7B  00                 	db	0
   502  00FC7C  00                 	db	0
   503  00FC7D  00                 	db	0
   504  00FC7E  00                 	db	0
   505  00FC7F  00                 	db	0
   506  00FC80  00                 	db	0
   507  00FC81  00                 	db	0
   508  00FC82  00                 	db	0
   509  00FC83  00                 	db	0
   510  00FC84  00                 	db	0
   511  00FC85  00                 	db	0
   512  00FC86  54                 	db	84
   513  00FC87  6F                 	db	111
   514  00FC88  6F                 	db	111
   515  00FC89  20                 	db	32
   516  00FC8A  6D                 	db	109
   517  00FC8B  61                 	db	97
   518  00FC8C  6E                 	db	110
   519  00FC8D  79                 	db	121
   520  00FC8E  20                 	db	32
   521  00FC8F  62                 	db	98
   522  00FC90  6F                 	db	111
   523  00FC91  6C                 	db	108
   524  00FC92  74                 	db	116
   525  00FC93  73                 	db	115
   526  00FC94  00                 	db	0
   527  00FC95  00                 	db	0
   528  00FC96  00                 	db	0
   529  00FC97  00                 	db	0
   530  00FC98  00                 	db	0
   531  00FC99  00                 	db	0
   532  00FC9A  00                 	db	0
   533  00FC9B  00                 	db	0
   534  00FC9C  00                 	db	0
   535  00FC9D  00                 	db	0
   536  00FC9E  00                 	db	0
   537  00FC9F  00                 	db	0
   538  00FCA0  00                 	db	0
   539  00FCA1  00                 	db	0
   540  00FCA2  00                 	db	0
   541  00FCA3  00                 	db	0
   542  00FCA4  00                 	db	0
   543  00FCA5  00                 	db	0
   544  00FCA6  54                 	db	84
   545  00FCA7  6F                 	db	111
   546  00FCA8  6F                 	db	111
   547  00FCA9  20                 	db	32
   548  00FCAA  6D                 	db	109
   549  00FCAB  61                 	db	97
   550  00FCAC  6E                 	db	110
   551  00FCAD  79                 	db	121
   552  00FCAE  20                 	db	32
   553  00FCAF  6E                 	db	110
   554  00FCB0  75                 	db	117
   555  00FCB1  74                 	db	116
   556  00FCB2  73                 	db	115
   557  00FCB3  00                 	db	0
   558  00FCB4  00                 	db	0
   559  00FCB5  00                 	db	0
   560  00FCB6  00                 	db	0
   561  00FCB7  00                 	db	0
   562  00FCB8  00                 	db	0
   563  00FCB9  00                 	db	0
   564  00FCBA  00                 	db	0
   565  00FCBB  00                 	db	0
   566  00FCBC  00                 	db	0
   567  00FCBD  00                 	db	0
   568  00FCBE  00                 	db	0
   569  00FCBF  00                 	db	0
   570  00FCC0  00                 	db	0
   571  00FCC1  00                 	db	0
   572  00FCC2  00                 	db	0
   573  00FCC3  00                 	db	0
   574  00FCC4  00                 	db	0
   575  00FCC5  00                 	db	0
   576  00FCC6  54                 	db	84
   577  00FCC7  6F                 	db	111
   578  00FCC8  6F                 	db	111
   579  00FCC9  20                 	db	32
   580  00FCCA  6D                 	db	109
   581  00FCCB  61                 	db	97
   582  00FCCC  6E                 	db	110
   583  00FCCD  79                 	db	121
   584  00FCCE  20                 	db	32
   585  00FCCF  77                 	db	119
   586  00FCD0  61                 	db	97
   587  00FCD1  73                 	db	115
   588  00FCD2  68                 	db	104
   589  00FCD3  65                 	db	101
   590  00FCD4  72                 	db	114
   591  00FCD5  73                 	db	115
   592  00FCD6  00                 	db	0
   593  00FCD7  00                 	db	0
   594  00FCD8  00                 	db	0
   595  00FCD9  00                 	db	0
   596  00FCDA  00                 	db	0
   597  00FCDB  00                 	db	0
   598  00FCDC  00                 	db	0
   599  00FCDD  00                 	db	0
   600  00FCDE  00                 	db	0
   601  00FCDF  00                 	db	0
   602  00FCE0  00                 	db	0
   603  00FCE1  00                 	db	0
   604  00FCE2  00                 	db	0
   605  00FCE3  00                 	db	0
   606  00FCE4  00                 	db	0
   607  00FCE5  00                 	db	0
   608  00FCE6  54                 	db	84
   609  00FCE7  6F                 	db	111
   610  00FCE8  6F                 	db	111
   611  00FCE9  20                 	db	32
   612  00FCEA  6D                 	db	109
   613  00FCEB  61                 	db	97
   614  00FCEC  6E                 	db	110
   615  00FCED  79                 	db	121
   616  00FCEE  20                 	db	32
   617  00FCEF  73                 	db	115
   618  00FCF0  70                 	db	112
   619  00FCF1  61                 	db	97
   620  00FCF2  63                 	db	99
   621  00FCF3  65                 	db	101
   622  00FCF4  72                 	db	114
   623  00FCF5  73                 	db	115
   624  00FCF6  00                 	db	0
   625  00FCF7  00                 	db	0
   626  00FCF8  00                 	db	0
   627  00FCF9  00                 	db	0
   628  00FCFA  00                 	db	0
   629  00FCFB  00                 	db	0
   630  00FCFC  00                 	db	0
   631  00FCFD  00                 	db	0
   632  00FCFE  00                 	db	0
   633  00FCFF  00                 	db	0
   634  00FD00  00                 	db	0
   635  00FD01  00                 	db	0
   636  00FD02  00                 	db	0
   637  00FD03  00                 	db	0
   638  00FD04  00                 	db	0
   639  00FD05  00                 	db	0
   640  00FD06  4E                 	db	78
   641  00FD07  6F                 	db	111
   642  00FD08  20                 	db	32
   643  00FD09  66                 	db	102
   644  00FD0A  61                 	db	97
   645  00FD0B  73                 	db	115
   646  00FD0C  74                 	db	116
   647  00FD0D  65                 	db	101
   648  00FD0E  6E                 	db	110
   649  00FD0F  65                 	db	101
   650  00FD10  72                 	db	114
   651  00FD11  73                 	db	115
   652  00FD12  20                 	db	32
   653  00FD13  73                 	db	115
   654  00FD14  65                 	db	101
   655  00FD15  6C                 	db	108
   656  00FD16  65                 	db	101
   657  00FD17  63                 	db	99
   658  00FD18  74                 	db	116
   659  00FD19  65                 	db	101
   660  00FD1A  64                 	db	100
   661  00FD1B  00                 	db	0
   662  00FD1C  00                 	db	0
   663  00FD1D  00                 	db	0
   664  00FD1E  00                 	db	0
   665  00FD1F  00                 	db	0
   666  00FD20  00                 	db	0
   667  00FD21  00                 	db	0
   668  00FD22  00                 	db	0
   669  00FD23  00                 	db	0
   670  00FD24  00                 	db	0
   671  00FD25  00                 	db	0
   672  00FD26                     __end_of_errMsgs:
   673                           	opt stack 0
   674  00FD26                     _inputEntryQuestions:
   675                           	opt stack 0
   676  00FD26  41                 	db	65
   677  00FD27  73                 	db	115
   678  00FD28  73                 	db	115
   679  00FD29  65                 	db	101
   680  00FD2A  6D                 	db	109
   681  00FD2B  62                 	db	98
   682  00FD2C  6C                 	db	108
   683  00FD2D  79                 	db	121
   684  00FD2E  20                 	db	32
   685  00FD2F  73                 	db	115
   686  00FD30  74                 	db	116
   687  00FD31  65                 	db	101
   688  00FD32  70                 	db	112
   689  00FD33  73                 	db	115
   690  00FD34  0A                 	db	10
   691  00FD35  2A                 	db	42
   692  00FD36  3C                 	db	60
   693  00FD37  2D                 	db	45
   694  00FD38  20                 	db	32
   695  00FD39  20                 	db	32
   696  00FD3A  28                 	db	40
   697  00FD3B  34                 	db	52
   698  00FD3C  2D                 	db	45
   699  00FD3D  38                 	db	56
   700  00FD3E  29                 	db	41
   701  00FD3F  20                 	db	32
   702  00FD40  20                 	db	32
   703  00FD41  20                 	db	32
   704  00FD42  20                 	db	32
   705  00FD43  20                 	db	32
   706  00FD44  00                 	db	0
   707  00FD45  00                 	db	0
   708  00FD46  00                 	db	0
   709  00FD47  46                 	db	70
   710  00FD48  61                 	db	97
   711  00FD49  73                 	db	115
   712  00FD4A  74                 	db	116
   713  00FD4B  65                 	db	101
   714  00FD4C  6E                 	db	110
   715  00FD4D  65                 	db	101
   716  00FD4E  72                 	db	114
   717  00FD4F  73                 	db	115
   718  00FD50  20                 	db	32
   719  00FD51  69                 	db	105
   720  00FD52  6E                 	db	110
   721  00FD53  20                 	db	32
   722  00FD54  43                 	db	67
   723  00FD55  78                 	db	120
   724  00FD56  0A                 	db	10
   725  00FD57  2A                 	db	42
   726  00FD58  3C                 	db	60
   727  00FD59  2D                 	db	45
   728  00FD5A  28                 	db	40
   729  00FD5B  42                 	db	66
   730  00FD5C  4E                 	db	78
   731  00FD5D  53                 	db	83
   732  00FD5E  57                 	db	87
   733  00FD5F  29                 	db	41
   734  00FD60  20                 	db	32
   735  00FD61  20                 	db	32
   736  00FD62  20                 	db	32
   737  00FD63  20                 	db	32
   738  00FD64  2D                 	db	45
   739  00FD65  3E                 	db	62
   740  00FD66  23                 	db	35
   741  00FD67  00                 	db	0
   742  00FD68  48                 	db	72
   743  00FD69  6F                 	db	111
   744  00FD6A  77                 	db	119
   745  00FD6B  20                 	db	32
   746  00FD6C  6D                 	db	109
   747  00FD6D  61                 	db	97
   748  00FD6E  6E                 	db	110
   749  00FD6F  79                 	db	121
   750  00FD70  20                 	db	32
   751  00FD71  73                 	db	115
   752  00FD72  65                 	db	101
   753  00FD73  74                 	db	116
   754  00FD74  73                 	db	115
   755  00FD75  3F                 	db	63
   756  00FD76  0A                 	db	10
   757  00FD77  2A                 	db	42
   758  00FD78  3C                 	db	60
   759  00FD79  2D                 	db	45
   760  00FD7A  20                 	db	32
   761  00FD7B  20                 	db	32
   762  00FD7C  28                 	db	40
   763  00FD7D  31                 	db	49
   764  00FD7E  2D                 	db	45
   765  00FD7F  34                 	db	52
   766  00FD80  29                 	db	41
   767  00FD81  20                 	db	32
   768  00FD82  20                 	db	32
   769  00FD83  20                 	db	32
   770  00FD84  20                 	db	32
   771  00FD85  20                 	db	32
   772  00FD86  00                 	db	0
   773  00FD87  00                 	db	0
   774  00FD88  00                 	db	0
   775  00FD89  43                 	db	67
   776  00FD8A  6F                 	db	111
   777  00FD8B  6E                 	db	110
   778  00FD8C  66                 	db	102
   779  00FD8D  69                 	db	105
   780  00FD8E  72                 	db	114
   781  00FD8F  6D                 	db	109
   782  00FD90  3F                 	db	63
   783  00FD91  0A                 	db	10
   784  00FD92  2A                 	db	42
   785  00FD93  3C                 	db	60
   786  00FD94  2D                 	db	45
   787  00FD95  20                 	db	32
   788  00FD96  20                 	db	32
   789  00FD97  28                 	db	40
   790  00FD98  41                 	db	65
   791  00FD99  3A                 	db	58
   792  00FD9A  59                 	db	89
   793  00FD9B  2F                 	db	47
   794  00FD9C  42                 	db	66
   795  00FD9D  3A                 	db	58
   796  00FD9E  4E                 	db	78
   797  00FD9F  29                 	db	41
   798  00FDA0  20                 	db	32
   799  00FDA1  00                 	db	0
   800  00FDA2  00                 	db	0
   801  00FDA3  00                 	db	0
   802  00FDA4  00                 	db	0
   803  00FDA5  00                 	db	0
   804  00FDA6  00                 	db	0
   805  00FDA7  00                 	db	0
   806  00FDA8  00                 	db	0
   807  00FDA9  00                 	db	0
   808  00FDAA                     __end_of_inputEntryQuestions:
   809                           	opt stack 0
   810  00FDAA                     _fastenerMatrix:
   811                           	opt stack 0
   812  00FDAA  00                 	db	0
   813  00FDAB  00                 	db	0
   814  00FDAC  00                 	db	0
   815  00FDAD  00                 	db	0
   816  00FDAE  01                 	db	1
   817  00FDAF  00                 	db	0
   818  00FDB0  00                 	db	0
   819  00FDB1  00                 	db	0
   820  00FDB2  00                 	db	0
   821  00FDB3  01                 	db	1
   822  00FDB4  00                 	db	0
   823  00FDB5  00                 	db	0
   824  00FDB6  00                 	db	0
   825  00FDB7  00                 	db	0
   826  00FDB8  01                 	db	1
   827  00FDB9  00                 	db	0
   828  00FDBA  00                 	db	0
   829  00FDBB  00                 	db	0
   830  00FDBC  00                 	db	0
   831  00FDBD  01                 	db	1
   832  00FDBE  01                 	db	1
   833  00FDBF  01                 	db	1
   834  00FDC0  00                 	db	0
   835  00FDC1  00                 	db	0
   836  00FDC2  01                 	db	1
   837  00FDC3  00                 	db	0
   838  00FDC4  01                 	db	1
   839  00FDC5  00                 	db	0
   840  00FDC6  01                 	db	1
   841  00FDC7  00                 	db	0
   842  00FDC8  00                 	db	0
   843  00FDC9  01                 	db	1
   844  00FDCA  02                 	db	2
   845  00FDCB  01                 	db	1
   846  00FDCC  00                 	db	0
   847  00FDCD  00                 	db	0
   848  00FDCE  02                 	db	2
   849  00FDCF  00                 	db	0
   850  00FDD0  01                 	db	1
   851  00FDD1  00                 	db	0
   852  00FDD2  02                 	db	2
   853  00FDD3  00                 	db	0
   854  00FDD4  00                 	db	0
   855  00FDD5  01                 	db	1
   856  00FDD6  01                 	db	1
   857  00FDD7  01                 	db	1
   858  00FDD8  00                 	db	0
   859  00FDD9  01                 	db	1
   860  00FDDA  01                 	db	1
   861  00FDDB  00                 	db	0
   862  00FDDC  01                 	db	1
   863  00FDDD  01                 	db	1
   864  00FDDE  01                 	db	1
   865  00FDDF  00                 	db	0
   866  00FDE0  00                 	db	0
   867  00FDE1  02                 	db	2
   868  00FDE2  01                 	db	1
   869  00FDE3  01                 	db	1
   870  00FDE4  00                 	db	0
   871  00FDE5  02                 	db	2
   872  00FDE6  01                 	db	1
   873  00FDE7  00                 	db	0
   874  00FDE8  01                 	db	1
   875  00FDE9  02                 	db	2
   876  00FDEA  02                 	db	2
   877  00FDEB  00                 	db	0
   878  00FDEC  01                 	db	1
   879  00FDED  01                 	db	1
   880  00FDEE  02                 	db	2
   881  00FDEF  01                 	db	1
   882  00FDF0  00                 	db	0
   883  00FDF1  01                 	db	1
   884  00FDF2  01                 	db	1
   885  00FDF3  02                 	db	2
   886  00FDF4  00                 	db	0
   887  00FDF5  01                 	db	1
   888  00FDF6  01                 	db	1
   889  00FDF7  03                 	db	3
   890  00FDF8  00                 	db	0
   891  00FDF9  00                 	db	0
   892  00FDFA  01                 	db	1
   893  00FDFB  00                 	db	0
   894  00FDFC  00                 	db	0
   895  00FDFD  03                 	db	3
   896  00FDFE                     __end_of_fastenerMatrix:
   897                           	opt stack 0
   898  0000                     _LATEbits	set	3981
   899  0000                     _LATCbits	set	3979
   900  0000                     _LATBbits	set	3978
   901  0000                     _TMR0L	set	4054
   902  0000                     _TMR0H	set	4055
   903  0000                     _T0CONbits	set	4053
   904  0000                     _PORTB	set	3969
   905  0000                     _PORTBbits	set	3969
   906  0000                     _INTCONbits	set	4082
   907  0000                     _LATDbits	set	3980
   908  0000                     _SSPBUF	set	4041
   909  0000                     _SSPCON2bits	set	4037
   910  0000                     _SSPADD	set	4040
   911  0000                     _SSPCON2	set	4037
   912  0000                     _SSPCON1	set	4038
   913  0000                     _SSPSTAT	set	4039
   914  0000                     _TRISCbits	set	3988
   915  0000                     _SSPCON1bits	set	4038
   916  0000                     _ADCON1	set	4033
   917  0000                     _ADCON0	set	4034
   918  0000                     _TRISE	set	3990
   919  0000                     _TRISD	set	3989
   920  0000                     _TRISC	set	3988
   921  0000                     _TRISB	set	3987
   922  0000                     _LATE	set	3981
   923  0000                     _LATD	set	3980
   924  0000                     _LATC	set	3979
   925  0000                     _LATB	set	3978
   926  0000                     _LATA	set	3977
   927  0000                     _PORTAbits	set	3968
   928  0000                     _TRISA	set	3986
   929  0000                     _TMR0IE	set	32661
   930  0000                     _T0IF	set	32658
   931  0000                     _T0IE	set	32661
   932  00FDFE                     STR_10:
   933  00FDFE  01                 	db	1
   934  00FDFF  46                 	db	70	;'F'
   935  00FE00  69                 	db	105	;'i'
   936  00FE01  6E                 	db	110	;'n'
   937  00FE02  69                 	db	105	;'i'
   938  00FE03  73                 	db	115	;'s'
   939  00FE04  68                 	db	104	;'h'
   940  00FE05  65                 	db	101	;'e'
   941  00FE06  64                 	db	100	;'d'
   942  00FE07  20                 	db	32
   943  00FE08  70                 	db	112	;'p'
   944  00FE09  61                 	db	97	;'a'
   945  00FE0A  63                 	db	99	;'c'
   946  00FE0B  6B                 	db	107	;'k'
   947  00FE0C  61                 	db	97	;'a'
   948  00FE0D  67                 	db	103	;'g'
   949  00FE0E  69                 	db	105	;'i'
   950  00FE0F  6E                 	db	110	;'n'
   951  00FE10  67                 	db	103	;'g'
   952  00FE11  20                 	db	32
   953  00FE12  63                 	db	99	;'c'
   954  00FE13  6F                 	db	111	;'o'
   955  00FE14  6D                 	db	109	;'m'
   956  00FE15  70                 	db	112	;'p'
   957  00FE16  61                 	db	97	;'a'
   958  00FE17  72                 	db	114	;'r'
   959  00FE18  74                 	db	116	;'t'
   960  00FE19  6D                 	db	109	;'m'
   961  00FE1A  65                 	db	101	;'e'
   962  00FE1B  6E                 	db	110	;'n'
   963  00FE1C  74                 	db	116	;'t'
   964  00FE1D  20                 	db	32
   965  00FE1E  25                 	db	37
   966  00FE1F  64                 	db	100	;'d'
   967  00FE20  00                 	db	0
   968  00FE21  00                 	db	0
   969  00FE22                     STR_7:
   970  00FE22  01                 	db	1
   971  00FE23  45                 	db	69	;'E'
   972  00FE24  6E                 	db	110	;'n'
   973  00FE25  74                 	db	116	;'t'
   974  00FE26  65                 	db	101	;'e'
   975  00FE27  72                 	db	114	;'r'
   976  00FE28  65                 	db	101	;'e'
   977  00FE29  64                 	db	100	;'d'
   978  00FE2A  20                 	db	32
   979  00FE2B  74                 	db	116	;'t'
   980  00FE2C  68                 	db	104	;'h'
   981  00FE2D  65                 	db	101	;'e'
   982  00FE2E  20                 	db	32
   983  00FE2F  70                 	db	112	;'p'
   984  00FE30  61                 	db	97	;'a'
   985  00FE31  63                 	db	99	;'c'
   986  00FE32  6B                 	db	107	;'k'
   987  00FE33  61                 	db	97	;'a'
   988  00FE34  67                 	db	103	;'g'
   989  00FE35  69                 	db	105	;'i'
   990  00FE36  6E                 	db	110	;'n'
   991  00FE37  67                 	db	103	;'g'
   992  00FE38  20                 	db	32
   993  00FE39  66                 	db	102	;'f'
   994  00FE3A  75                 	db	117	;'u'
   995  00FE3B  6E                 	db	110	;'n'
   996  00FE3C  63                 	db	99	;'c'
   997  00FE3D  74                 	db	116	;'t'
   998  00FE3E  69                 	db	105	;'i'
   999  00FE3F  6F                 	db	111	;'o'
  1000  00FE40  6E                 	db	110	;'n'
  1001  00FE41  00                 	db	0
  1002  00FE42  00                 	db	0
  1003  00FE43                     STR_19:
  1004  00FE43  30                 	db	48	;'0'
  1005  00FE44  3A                 	db	58	;':'
  1006  00FE45  53                 	db	83	;'S'
  1007  00FE46  6C                 	db	108	;'l'
  1008  00FE47  65                 	db	101	;'e'
  1009  00FE48  65                 	db	101	;'e'
  1010  00FE49  70                 	db	112	;'p'
  1011  00FE4A  20                 	db	32
  1012  00FE4B  31                 	db	49	;'1'
  1013  00FE4C  3A                 	db	58	;':'
  1014  00FE4D  42                 	db	66	;'B'
  1015  00FE4E  65                 	db	101	;'e'
  1016  00FE4F  67                 	db	103	;'g'
  1017  00FE50  69                 	db	105	;'i'
  1018  00FE51  6E                 	db	110	;'n'
  1019  00FE52  20                 	db	32
  1020  00FE53  0A                 	db	10
  1021  00FE54  32                 	db	50	;'2'
  1022  00FE55  3A                 	db	58	;':'
  1023  00FE56  20                 	db	32
  1024  00FE57  56                 	db	86	;'V'
  1025  00FE58  69                 	db	105	;'i'
  1026  00FE59  65                 	db	101	;'e'
  1027  00FE5A  77                 	db	119	;'w'
  1028  00FE5B  20                 	db	32
  1029  00FE5C  4C                 	db	76	;'L'
  1030  00FE5D  6F                 	db	111	;'o'
  1031  00FE5E  67                 	db	103	;'g'
  1032  00FE5F  73                 	db	115	;'s'
  1033  00FE60  00                 	db	0
  1034  00FE61                     STR_6:
  1035  00FE61  01                 	db	1
  1036  00FE62  4F                 	db	79	;'O'
  1037  00FE63  75                 	db	117	;'u'
  1038  00FE64  74                 	db	116	;'t'
  1039  00FE65  20                 	db	32
  1040  00FE66  6F                 	db	111	;'o'
  1041  00FE67  66                 	db	102	;'f'
  1042  00FE68  20                 	db	32
  1043  00FE69  74                 	db	116	;'t'
  1044  00FE6A  68                 	db	104	;'h'
  1045  00FE6B  65                 	db	101	;'e'
  1046  00FE6C  20                 	db	32
  1047  00FE6D  70                 	db	112	;'p'
  1048  00FE6E  61                 	db	97	;'a'
  1049  00FE6F  63                 	db	99	;'c'
  1050  00FE70  6B                 	db	107	;'k'
  1051  00FE71  61                 	db	97	;'a'
  1052  00FE72  67                 	db	103	;'g'
  1053  00FE73  69                 	db	105	;'i'
  1054  00FE74  6E                 	db	110	;'n'
  1055  00FE75  67                 	db	103	;'g'
  1056  00FE76  20                 	db	32
  1057  00FE77  6C                 	db	108	;'l'
  1058  00FE78  6F                 	db	111	;'o'
  1059  00FE79  6F                 	db	111	;'o'
  1060  00FE7A  70                 	db	112	;'p'
  1061  00FE7B  00                 	db	0
  1062  00FE7C  00                 	db	0
  1063  00FE7D                     STR_16:
  1064  00FE7D  4E                 	db	78	;'N'
  1065  00FE7E  6F                 	db	111	;'o'
  1066  00FE7F  74                 	db	116	;'t'
  1067  00FE80  20                 	db	32
  1068  00FE81  74                 	db	116	;'t'
  1069  00FE82  68                 	db	104	;'h'
  1070  00FE83  65                 	db	101	;'e'
  1071  00FE84  72                 	db	114	;'r'
  1072  00FE85  65                 	db	101	;'e'
  1073  00FE86  20                 	db	32
  1074  00FE87  79                 	db	121	;'y'
  1075  00FE88  65                 	db	101	;'e'
  1076  00FE89  74                 	db	116	;'t'
  1077  00FE8A  0A                 	db	10
  1078  00FE8B  2A                 	db	42
  1079  00FE8C  20                 	db	32
  1080  00FE8D  74                 	db	116	;'t'
  1081  00FE8E  6F                 	db	111	;'o'
  1082  00FE8F  20                 	db	32
  1083  00FE90  72                 	db	114	;'r'
  1084  00FE91  65                 	db	101	;'e'
  1085  00FE92  74                 	db	116	;'t'
  1086  00FE93  75                 	db	117	;'u'
  1087  00FE94  72                 	db	114	;'r'
  1088  00FE95  6E                 	db	110	;'n'
  1089  00FE96  00                 	db	0
  1090  00FE97                     STR_17:
  1091  00FE97  53                 	db	83	;'S'
  1092  00FE98  74                 	db	116	;'t'
  1093  00FE99  61                 	db	97	;'a'
  1094  00FE9A  72                 	db	114	;'r'
  1095  00FE9B  74                 	db	116	;'t'
  1096  00FE9C  65                 	db	101	;'e'
  1097  00FE9D  64                 	db	100	;'d'
  1098  00FE9E  20                 	db	32
  1099  00FE9F  69                 	db	105	;'i'
  1100  00FEA0  6E                 	db	110	;'n'
  1101  00FEA1  70                 	db	112	;'p'
  1102  00FEA2  75                 	db	117	;'u'
  1103  00FEA3  74                 	db	116	;'t'
  1104  00FEA4  20                 	db	32
  1105  00FEA5  65                 	db	101	;'e'
  1106  00FEA6  6E                 	db	110	;'n'
  1107  00FEA7  74                 	db	116	;'t'
  1108  00FEA8  72                 	db	114	;'r'
  1109  00FEA9  79                 	db	121	;'y'
  1110  00FEAA  2C                 	db	44
  1111  00FEAB  20                 	db	32
  1112  00FEAC  68                 	db	104	;'h'
  1113  00FEAD  69                 	db	105	;'i'
  1114  00FEAE  00                 	db	0
  1115  00FEAF  00                 	db	0
  1116  00FEB0                     STR_8:
  1117  00FEB0  01                 	db	1
  1118  00FEB1  42                 	db	66	;'B'
  1119  00FEB2  3A                 	db	58	;':'
  1120  00FEB3  25                 	db	37
  1121  00FEB4  64                 	db	100	;'d'
  1122  00FEB5  20                 	db	32
  1123  00FEB6  4E                 	db	78	;'N'
  1124  00FEB7  3A                 	db	58	;':'
  1125  00FEB8  25                 	db	37
  1126  00FEB9  64                 	db	100	;'d'
  1127  00FEBA  20                 	db	32
  1128  00FEBB  53                 	db	83	;'S'
  1129  00FEBC  3A                 	db	58	;':'
  1130  00FEBD  25                 	db	37
  1131  00FEBE  64                 	db	100	;'d'
  1132  00FEBF  20                 	db	32
  1133  00FEC0  57                 	db	87	;'W'
  1134  00FEC1  3A                 	db	58	;':'
  1135  00FEC2  25                 	db	37
  1136  00FEC3  64                 	db	100	;'d'
  1137  00FEC4  00                 	db	0
  1138  00FEC5  00                 	db	0
  1139  00FEC6                     STR_23:
  1140  00FEC6  01                 	db	1
  1141  00FEC7  53                 	db	83	;'S'
  1142  00FEC8  74                 	db	116	;'t'
  1143  00FEC9  61                 	db	97	;'a'
  1144  00FECA  72                 	db	114	;'r'
  1145  00FECB  74                 	db	116	;'t'
  1146  00FECC  69                 	db	105	;'i'
  1147  00FECD  6E                 	db	110	;'n'
  1148  00FECE  67                 	db	103	;'g'
  1149  00FECF  20                 	db	32
  1150  00FED0  70                 	db	112	;'p'
  1151  00FED1  61                 	db	97	;'a'
  1152  00FED2  63                 	db	99	;'c'
  1153  00FED3  6B                 	db	107	;'k'
  1154  00FED4  61                 	db	97	;'a'
  1155  00FED5  67                 	db	103	;'g'
  1156  00FED6  69                 	db	105	;'i'
  1157  00FED7  6E                 	db	110	;'n'
  1158  00FED8  67                 	db	103	;'g'
  1159  00FED9  00                 	db	0
  1160  00FEDA  00                 	db	0
  1161  00FEDB                     STR_22:
  1162  00FEDB  53                 	db	83	;'S'
  1163  00FEDC  74                 	db	116	;'t'
  1164  00FEDD  61                 	db	97	;'a'
  1165  00FEDE  72                 	db	114	;'r'
  1166  00FEDF  74                 	db	116	;'t'
  1167  00FEE0  69                 	db	105	;'i'
  1168  00FEE1  6E                 	db	110	;'n'
  1169  00FEE2  67                 	db	103	;'g'
  1170  00FEE3  20                 	db	32
  1171  00FEE4  70                 	db	112	;'p'
  1172  00FEE5  61                 	db	97	;'a'
  1173  00FEE6  63                 	db	99	;'c'
  1174  00FEE7  6B                 	db	107	;'k'
  1175  00FEE8  61                 	db	97	;'a'
  1176  00FEE9  67                 	db	103	;'g'
  1177  00FEEA  69                 	db	105	;'i'
  1178  00FEEB  6E                 	db	110	;'n'
  1179  00FEEC  67                 	db	103	;'g'
  1180  00FEED  00                 	db	0
  1181  00FEEE                     STR_5:
  1182  00FEEE  01                 	db	1
  1183  00FEEF  44                 	db	68	;'D'
  1184  00FEF0  6F                 	db	111	;'o'
  1185  00FEF1  6E                 	db	110	;'n'
  1186  00FEF2  65                 	db	101	;'e'
  1187  00FEF3  20                 	db	32
  1188  00FEF4  63                 	db	99	;'c'
  1189  00FEF5  6F                 	db	111	;'o'
  1190  00FEF6  6D                 	db	109	;'m'
  1191  00FEF7  70                 	db	112	;'p'
  1192  00FEF8  61                 	db	97	;'a'
  1193  00FEF9  72                 	db	114	;'r'
  1194  00FEFA  74                 	db	116	;'t'
  1195  00FEFB  6D                 	db	109	;'m'
  1196  00FEFC  65                 	db	101	;'e'
  1197  00FEFD  6E                 	db	110	;'n'
  1198  00FEFE  74                 	db	116	;'t'
  1199  00FEFF  00                 	db	0
  1200  00FF00  00                 	db	0
  1201  00FF01                     STR_15:
  1202  00FF01  50                 	db	80	;'P'
  1203  00FF02  72                 	db	114	;'r'
  1204  00FF03  65                 	db	101	;'e'
  1205  00FF04  73                 	db	115	;'s'
  1206  00FF05  73                 	db	115	;'s'
  1207  00FF06  20                 	db	32
  1208  00FF07  31                 	db	49	;'1'
  1209  00FF08  20                 	db	32
  1210  00FF09  74                 	db	116	;'t'
  1211  00FF0A  6F                 	db	111	;'o'
  1212  00FF0B  20                 	db	32
  1213  00FF0C  62                 	db	98	;'b'
  1214  00FF0D  65                 	db	101	;'e'
  1215  00FF0E  67                 	db	103	;'g'
  1216  00FF0F  69                 	db	105	;'i'
  1217  00FF10  6E                 	db	110	;'n'
  1218  00FF11  00                 	db	0
  1219  00FF12                     STR_20:
  1220  00FF12  50                 	db	80	;'P'
  1221  00FF13  72                 	db	114	;'r'
  1222  00FF14  65                 	db	101	;'e'
  1223  00FF15  73                 	db	115	;'s'
  1224  00FF16  73                 	db	115	;'s'
  1225  00FF17  20                 	db	32
  1226  00FF18  31                 	db	49	;'1'
  1227  00FF19  20                 	db	32
  1228  00FF1A  74                 	db	116	;'t'
  1229  00FF1B  6F                 	db	111	;'o'
  1230  00FF1C  20                 	db	32
  1231  00FF1D  73                 	db	115	;'s'
  1232  00FF1E  74                 	db	116	;'t'
  1233  00FF1F  61                 	db	97	;'a'
  1234  00FF20  72                 	db	114	;'r'
  1235  00FF21  74                 	db	116	;'t'
  1236  00FF22  00                 	db	0
  1237  00FF23                     STR_3:
  1238  00FF23  01                 	db	1
  1239  00FF24  53                 	db	83	;'S'
  1240  00FF25  70                 	db	112	;'p'
  1241  00FF26  61                 	db	97	;'a'
  1242  00FF27  63                 	db	99	;'c'
  1243  00FF28  65                 	db	101	;'e'
  1244  00FF29  72                 	db	114	;'r'
  1245  00FF2A  20                 	db	32
  1246  00FF2B  43                 	db	67	;'C'
  1247  00FF2C  6F                 	db	111	;'o'
  1248  00FF2D  75                 	db	117	;'u'
  1249  00FF2E  6E                 	db	110	;'n'
  1250  00FF2F  74                 	db	116	;'t'
  1251  00FF30  65                 	db	101	;'e'
  1252  00FF31  64                 	db	100	;'d'
  1253  00FF32  00                 	db	0
  1254  00FF33  00                 	db	0
  1255  00FF34                     STR_4:
  1256  00FF34  01                 	db	1
  1257  00FF35  57                 	db	87	;'W'
  1258  00FF36  61                 	db	97	;'a'
  1259  00FF37  73                 	db	115	;'s'
  1260  00FF38  68                 	db	104	;'h'
  1261  00FF39  65                 	db	101	;'e'
  1262  00FF3A  72                 	db	114	;'r'
  1263  00FF3B  20                 	db	32
  1264  00FF3C  43                 	db	67	;'C'
  1265  00FF3D  6F                 	db	111	;'o'
  1266  00FF3E  75                 	db	117	;'u'
  1267  00FF3F  6E                 	db	110	;'n'
  1268  00FF40  74                 	db	116	;'t'
  1269  00FF41  65                 	db	101	;'e'
  1270  00FF42  64                 	db	100	;'d'
  1271  00FF43  00                 	db	0
  1272  00FF44  00                 	db	0
  1273  00FF45                     STR_13:
  1274  00FF45  01                 	db	1
  1275  00FF46  53                 	db	83	;'S'
  1276  00FF47  70                 	db	112	;'p'
  1277  00FF48  61                 	db	97	;'a'
  1278  00FF49  63                 	db	99	;'c'
  1279  00FF4A  65                 	db	101	;'e'
  1280  00FF4B  72                 	db	114	;'r'
  1281  00FF4C  20                 	db	32
  1282  00FF4D  63                 	db	99	;'c'
  1283  00FF4E  6F                 	db	111	;'o'
  1284  00FF4F  75                 	db	117	;'u'
  1285  00FF50  6E                 	db	110	;'n'
  1286  00FF51  74                 	db	116	;'t'
  1287  00FF52  65                 	db	101	;'e'
  1288  00FF53  64                 	db	100	;'d'
  1289  00FF54  00                 	db	0
  1290  00FF55  00                 	db	0
  1291  00FF56                     STR_14:
  1292  00FF56  01                 	db	1
  1293  00FF57  57                 	db	87	;'W'
  1294  00FF58  61                 	db	97	;'a'
  1295  00FF59  73                 	db	115	;'s'
  1296  00FF5A  68                 	db	104	;'h'
  1297  00FF5B  65                 	db	101	;'e'
  1298  00FF5C  72                 	db	114	;'r'
  1299  00FF5D  20                 	db	32
  1300  00FF5E  63                 	db	99	;'c'
  1301  00FF5F  6F                 	db	111	;'o'
  1302  00FF60  75                 	db	117	;'u'
  1303  00FF61  6E                 	db	110	;'n'
  1304  00FF62  74                 	db	116	;'t'
  1305  00FF63  65                 	db	101	;'e'
  1306  00FF64  64                 	db	100	;'d'
  1307  00FF65  00                 	db	0
  1308  00FF66  00                 	db	0
  1309  00FF67                     STR_27:
  1310  00FF67  42                 	db	66	;'B'
  1311  00FF68  25                 	db	37
  1312  00FF69  64                 	db	100	;'d'
  1313  00FF6A  20                 	db	32
  1314  00FF6B  4E                 	db	78	;'N'
  1315  00FF6C  25                 	db	37
  1316  00FF6D  64                 	db	100	;'d'
  1317  00FF6E  20                 	db	32
  1318  00FF6F  53                 	db	83	;'S'
  1319  00FF70  25                 	db	37
  1320  00FF71  64                 	db	100	;'d'
  1321  00FF72  20                 	db	32
  1322  00FF73  57                 	db	87	;'W'
  1323  00FF74  25                 	db	37
  1324  00FF75  64                 	db	100	;'d'
  1325  00FF76  00                 	db	0
  1326  00FF77                     STR_1:
  1327  00FF77  01                 	db	1
  1328  00FF78  42                 	db	66	;'B'
  1329  00FF79  6F                 	db	111	;'o'
  1330  00FF7A  6C                 	db	108	;'l'
  1331  00FF7B  74                 	db	116	;'t'
  1332  00FF7C  20                 	db	32
  1333  00FF7D  43                 	db	67	;'C'
  1334  00FF7E  6F                 	db	111	;'o'
  1335  00FF7F  75                 	db	117	;'u'
  1336  00FF80  6E                 	db	110	;'n'
  1337  00FF81  74                 	db	116	;'t'
  1338  00FF82  65                 	db	101	;'e'
  1339  00FF83  64                 	db	100	;'d'
  1340  00FF84  00                 	db	0
  1341  00FF85  00                 	db	0
  1342  00FF86                     STR_11:
  1343  00FF86  01                 	db	1
  1344  00FF87  42                 	db	66	;'B'
  1345  00FF88  6F                 	db	111	;'o'
  1346  00FF89  6C                 	db	108	;'l'
  1347  00FF8A  74                 	db	116	;'t'
  1348  00FF8B  20                 	db	32
  1349  00FF8C  63                 	db	99	;'c'
  1350  00FF8D  6F                 	db	111	;'o'
  1351  00FF8E  75                 	db	117	;'u'
  1352  00FF8F  6E                 	db	110	;'n'
  1353  00FF90  74                 	db	116	;'t'
  1354  00FF91  65                 	db	101	;'e'
  1355  00FF92  64                 	db	100	;'d'
  1356  00FF93  00                 	db	0
  1357  00FF94  00                 	db	0
  1358  00FF95                     STR_9:
  1359  00FF95  43                 	db	67	;'C'
  1360  00FF96  6F                 	db	111	;'o'
  1361  00FF97  6D                 	db	109	;'m'
  1362  00FF98  70                 	db	112	;'p'
  1363  00FF99  61                 	db	97	;'a'
  1364  00FF9A  72                 	db	114	;'r'
  1365  00FF9B  74                 	db	116	;'t'
  1366  00FF9C  6D                 	db	109	;'m'
  1367  00FF9D  65                 	db	101	;'e'
  1368  00FF9E  6E                 	db	110	;'n'
  1369  00FF9F  74                 	db	116	;'t'
  1370  00FFA0  20                 	db	32
  1371  00FFA1  25                 	db	37
  1372  00FFA2  64                 	db	100	;'d'
  1373  00FFA3  00                 	db	0
  1374  00FFA4                     STR_18:
  1375  00FFA4  01                 	db	1
  1376  00FFA5  44                 	db	68	;'D'
  1377  00FFA6  6F                 	db	111	;'o'
  1378  00FFA7  6E                 	db	110	;'n'
  1379  00FFA8  65                 	db	101	;'e'
  1380  00FFA9  20                 	db	32
  1381  00FFAA  69                 	db	105	;'i'
  1382  00FFAB  6E                 	db	110	;'n'
  1383  00FFAC  70                 	db	112	;'p'
  1384  00FFAD  75                 	db	117	;'u'
  1385  00FFAE  74                 	db	116	;'t'
  1386  00FFAF  73                 	db	115	;'s'
  1387  00FFB0  00                 	db	0
  1388  00FFB1  00                 	db	0
  1389  00FFB2                     STR_2:
  1390  00FFB2  01                 	db	1
  1391  00FFB3  4E                 	db	78	;'N'
  1392  00FFB4  75                 	db	117	;'u'
  1393  00FFB5  74                 	db	116	;'t'
  1394  00FFB6  20                 	db	32
  1395  00FFB7  43                 	db	67	;'C'
  1396  00FFB8  6F                 	db	111	;'o'
  1397  00FFB9  75                 	db	117	;'u'
  1398  00FFBA  6E                 	db	110	;'n'
  1399  00FFBB  74                 	db	116	;'t'
  1400  00FFBC  65                 	db	101	;'e'
  1401  00FFBD  64                 	db	100	;'d'
  1402  00FFBE  00                 	db	0
  1403  00FFBF  00                 	db	0
  1404  00FFC0                     STR_12:
  1405  00FFC0  01                 	db	1
  1406  00FFC1  4E                 	db	78	;'N'
  1407  00FFC2  75                 	db	117	;'u'
  1408  00FFC3  74                 	db	116	;'t'
  1409  00FFC4  20                 	db	32
  1410  00FFC5  63                 	db	99	;'c'
  1411  00FFC6  6F                 	db	111	;'o'
  1412  00FFC7  75                 	db	117	;'u'
  1413  00FFC8  6E                 	db	110	;'n'
  1414  00FFC9  74                 	db	116	;'t'
  1415  00FFCA  65                 	db	101	;'e'
  1416  00FFCB  64                 	db	100	;'d'
  1417  00FFCC  00                 	db	0
  1418  00FFCD  00                 	db	0
  1419  00FFCE                     STR_25:
  1420  00FFCE  43                 	db	67	;'C'
  1421  00FFCF  25                 	db	37
  1422  00FFD0  64                 	db	100	;'d'
  1423  00FFD1  3A                 	db	58	;':'
  1424  00FFD2  20                 	db	32
  1425  00FFD3  25                 	db	37
  1426  00FFD4  73                 	db	115	;'s'
  1427  00FFD5  20                 	db	32
  1428  00FFD6  78                 	db	120	;'x'
  1429  00FFD7  25                 	db	37
  1430  00FFD8  64                 	db	100	;'d'
  1431  00FFD9  00                 	db	0
  1432  00FFDA                     STR_26:
  1433  00FFDA  52                 	db	82	;'R'
  1434  00FFDB  65                 	db	101	;'e'
  1435  00FFDC  6D                 	db	109	;'m'
  1436  00FFDD  61                 	db	97	;'a'
  1437  00FFDE  69                 	db	105	;'i'
  1438  00FFDF  6E                 	db	110	;'n'
  1439  00FFE0  69                 	db	105	;'i'
  1440  00FFE1  6E                 	db	110	;'n'
  1441  00FFE2  67                 	db	103	;'g'
  1442  00FFE3  3A                 	db	58	;':'
  1443  00FFE4  00                 	db	0
  1444  00FFE5                     STR_24:
  1445  00FFE5  53                 	db	83	;'S'
  1446  00FFE6  75                 	db	117	;'u'
  1447  00FFE7  6D                 	db	109	;'m'
  1448  00FFE8  6D                 	db	109	;'m'
  1449  00FFE9  61                 	db	97	;'a'
  1450  00FFEA  72                 	db	114	;'r'
  1451  00FFEB  79                 	db	121	;'y'
  1452  00FFEC  3A                 	db	58	;':'
  1453  00FFED  00                 	db	0
  1454  00FFEE                     STR_30:
  1455  00FFEE  28                 	db	40
  1456  00FFEF  6E                 	db	110	;'n'
  1457  00FFF0  75                 	db	117	;'u'
  1458  00FFF1  6C                 	db	108	;'l'
  1459  00FFF2  6C                 	db	108	;'l'
  1460  00FFF3  29                 	db	41
  1461  00FFF4  00                 	db	0
  1462  00FFF5                     STR_28:
  1463  00FFF5  54                 	db	84	;'T'
  1464  00FFF6  69                 	db	105	;'i'
  1465  00FFF7  6D                 	db	109	;'m'
  1466  00FFF8  65                 	db	101	;'e'
  1467  00FFF9  3A                 	db	58	;':'
  1468  00FFFA  00                 	db	0
  1469  00FFFB                     STR_29:
  1470  00FFFB  25                 	db	37
  1471  00FFFC  6C                 	db	108	;'l'
  1472  00FFFD  64                 	db	100	;'d'
  1473  00FFFE  00                 	db	0
  1474  0000                     
  1475                           ; #config settings
  1476  00FFFF  00                 	db	0	; dummy byte at the end
  1477  0000                     
  1478                           	psect	cinit
  1479  002C38                     __pcinit:
  1480                           	opt stack 0
  1481  002C38                     start_initialization:
  1482                           	opt stack 0
  1483  002C38                     __initialization:
  1484                           	opt stack 0
  1485                           
  1486                           ; Initialize objects allocated to BANK2 (105 bytes)
  1487                           ; load TBLPTR registers with __pidataBANK2
  1488  002C38  0ECE               	movlw	low __pidataBANK2
  1489  002C3A  6EF6               	movwf	tblptrl,c
  1490  002C3C  0E2E               	movlw	high __pidataBANK2
  1491  002C3E  6EF7               	movwf	tblptrh,c
  1492  002C40  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  1493  002C42  6EF8               	movwf	tblptru,c
  1494  002C44  EE02  F000         	lfsr	0,__pdataBANK2
  1495  002C48  EE10 F069          	lfsr	1,105
  1496  002C4C                     copy_data0:
  1497  002C4C  0009               	tblrd		*+
  1498  002C4E  CFF5 FFEE          	movff	tablat,postinc0
  1499  002C52  50E5               	movf	postdec1,w,c
  1500  002C54  50E1               	movf	fsr1l,w,c
  1501  002C56  E1FA               	bnz	copy_data0
  1502                           
  1503                           ; Initialize objects allocated to BANK1 (62 bytes)
  1504                           ; load TBLPTR registers with __pidataBANK1
  1505  002C58  0ED8               	movlw	low __pidataBANK1
  1506  002C5A  6EF6               	movwf	tblptrl,c
  1507  002C5C  0E30               	movlw	high __pidataBANK1
  1508  002C5E  6EF7               	movwf	tblptrh,c
  1509  002C60  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1510  002C62  6EF8               	movwf	tblptru,c
  1511  002C64  EE01  F07E         	lfsr	0,__pdataBANK1
  1512  002C68  EE10 F03E          	lfsr	1,62
  1513  002C6C                     copy_data1:
  1514  002C6C  0009               	tblrd		*+
  1515  002C6E  CFF5 FFEE          	movff	tablat,postinc0
  1516  002C72  50E5               	movf	postdec1,w,c
  1517  002C74  50E1               	movf	fsr1l,w,c
  1518  002C76  E1FA               	bnz	copy_data1
  1519                           
  1520                           ; Initialize objects allocated to COMRAM (24 bytes)
  1521                           ; load TBLPTR registers with __pidataCOMRAM
  1522  002C78  0ED6               	movlw	low __pidataCOMRAM
  1523  002C7A  6EF6               	movwf	tblptrl,c
  1524  002C7C  0E32               	movlw	high __pidataCOMRAM
  1525  002C7E  6EF7               	movwf	tblptrh,c
  1526  002C80  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1527  002C82  6EF8               	movwf	tblptru,c
  1528  002C84  EE00  F04D         	lfsr	0,__pdataCOMRAM
  1529  002C88  EE10 F018          	lfsr	1,24
  1530  002C8C                     copy_data2:
  1531  002C8C  0009               	tblrd		*+
  1532  002C8E  CFF5 FFEE          	movff	tablat,postinc0
  1533  002C92  50E5               	movf	postdec1,w,c
  1534  002C94  50E1               	movf	fsr1l,w,c
  1535  002C96  E1FA               	bnz	copy_data2
  1536                           
  1537                           ; Clear objects allocated to BANK1 (34 bytes)
  1538  002C98  EE01  F0BC         	lfsr	0,__pbssBANK1
  1539  002C9C  0E22               	movlw	34
  1540  002C9E                     clear_0:
  1541  002C9E  6AEE               	clrf	postinc0,c
  1542  002CA0  06E8               	decf	wreg,f,c
  1543  002CA2  E1FD               	bnz	clear_0
  1544                           
  1545                           ; Clear objects allocated to BANK0 (16 bytes)
  1546  002CA4  EE00  F0DC         	lfsr	0,__pbssBANK0
  1547  002CA8  0E10               	movlw	16
  1548  002CAA                     clear_1:
  1549  002CAA  6AEE               	clrf	postinc0,c
  1550  002CAC  06E8               	decf	wreg,f,c
  1551  002CAE  E1FD               	bnz	clear_1
  1552                           
  1553                           ; Clear objects allocated to COMRAM (25 bytes)
  1554  002CB0  EE00  F034         	lfsr	0,__pbssCOMRAM
  1555  002CB4  0E19               	movlw	25
  1556  002CB6                     clear_2:
  1557  002CB6  6AEE               	clrf	postinc0,c
  1558  002CB8  06E8               	decf	wreg,f,c
  1559  002CBA  E1FD               	bnz	clear_2
  1560  002CBC                     end_of_initialization:
  1561                           	opt stack 0
  1562  002CBC                     __end_of__initialization:
  1563                           	opt stack 0
  1564  002CBC  9065               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1565  002CBE  9265               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1566  002CC0  0100               	movlb	0
  1567  002CC2  EF29  F014         	goto	_main	;jump to C main() function
  1568                           tblptru	equ	0xFF8
  1569                           tblptrh	equ	0xFF7
  1570                           tblptrl	equ	0xFF6
  1571                           tablat	equ	0xFF5
  1572                           postinc0	equ	0xFEE
  1573                           wreg	equ	0xFE8
  1574                           postdec1	equ	0xFE5
  1575                           fsr1l	equ	0xFE1
  1576                           
  1577                           	psect	bssCOMRAM
  1578  000034                     __pbssCOMRAM:
  1579                           	opt stack 0
  1580  000034                     _endTime:
  1581                           	opt stack 0
  1582  000034                     	ds	6
  1583  00003A                     _startTime:
  1584                           	opt stack 0
  1585  00003A                     	ds	6
  1586  000040                     _motorGoingBackwards:
  1587                           	opt stack 0
  1588  000040                     	ds	4
  1589  000044                     	ds	4
  1590  000048                     _currentMode:
  1591                           	opt stack 0
  1592  000048                     	ds	2
  1593  00004A                     _timerInit:
  1594                           	opt stack 0
  1595  00004A                     	ds	1
  1596  00004B                     _operating:
  1597                           	opt stack 0
  1598  00004B                     	ds	1
  1599  00004C                     _LCDinterruptState:
  1600                           	opt stack 0
  1601  00004C                     	ds	1
  1602                           tblptru	equ	0xFF8
  1603                           tblptrh	equ	0xFF7
  1604                           tblptrl	equ	0xFF6
  1605                           tablat	equ	0xFF5
  1606                           postinc0	equ	0xFEE
  1607                           wreg	equ	0xFE8
  1608                           postdec1	equ	0xFE5
  1609                           fsr1l	equ	0xFE1
  1610                           
  1611                           	psect	dataCOMRAM
  1612  00004D                     __pdataCOMRAM:
  1613                           	opt stack 0
  1614  00004D                     _shortTolerance:
  1615                           	opt stack 0
  1616  00004D                     	ds	4
  1617  000051                     _longTolerance:
  1618                           	opt stack 0
  1619  000051                     	ds	4
  1620  000055                     _currentMotorDir:
  1621                           	opt stack 0
  1622  000055                     	ds	4
  1623  000059                     _timeSinceLastTic:
  1624                           	opt stack 0
  1625  000059                     	ds	3
  1626  00005C                     timer@operatingTime:
  1627                           	opt stack 0
  1628  00005C                     	ds	3
  1629  00005F                     inputEntry@F3189:
  1630                           	opt stack 0
  1631  00005F                     	ds	2
  1632  000061                     clearing@F3240:
  1633                           	opt stack 0
  1634  000061                     	ds	2
  1635  000063                     packageCompartment@F3222:
  1636                           	opt stack 0
  1637  000063                     	ds	2
  1638                           tblptru	equ	0xFF8
  1639                           tblptrh	equ	0xFF7
  1640                           tblptrl	equ	0xFF6
  1641                           tablat	equ	0xFF5
  1642                           postinc0	equ	0xFEE
  1643                           wreg	equ	0xFE8
  1644                           postdec1	equ	0xFE5
  1645                           fsr1l	equ	0xFE1
  1646                           
  1647                           	psect	bssBANK0
  1648  0000DC                     __pbssBANK0:
  1649                           	opt stack 0
  1650  0000DC                     _dispensed:
  1651                           	opt stack 0
  1652  0000DC                     	ds	8
  1653  0000E4                     _extras:
  1654                           	opt stack 0
  1655  0000E4                     	ds	8
  1656                           tblptru	equ	0xFF8
  1657                           tblptrh	equ	0xFF7
  1658                           tblptrl	equ	0xFF6
  1659                           tablat	equ	0xFF5
  1660                           postinc0	equ	0xFEE
  1661                           wreg	equ	0xFE8
  1662                           postdec1	equ	0xFE5
  1663                           fsr1l	equ	0xFE1
  1664                           
  1665                           	psect	bssBANK1
  1666  0001BC                     __pbssBANK1:
  1667                           	opt stack 0
  1668  0001BC                     _params:
  1669                           	opt stack 0
  1670  0001BC                     	ds	26
  1671  0001D6                     _motorControlTimer:
  1672                           	opt stack 0
  1673  0001D6                     	ds	4
  1674  0001DA                     _test:
  1675                           	opt stack 0
  1676  0001DA                     	ds	4
  1677                           tblptru	equ	0xFF8
  1678                           tblptrh	equ	0xFF7
  1679                           tblptrl	equ	0xFF6
  1680                           tablat	equ	0xFF5
  1681                           postinc0	equ	0xFEE
  1682                           wreg	equ	0xFE8
  1683                           postdec1	equ	0xFE5
  1684                           fsr1l	equ	0xFE1
  1685                           
  1686                           	psect	dataBANK1
  1687  00017E                     __pdataBANK1:
  1688                           	opt stack 0
  1689  00017E                     packaging@F3228:
  1690                           	opt stack 0
  1691  00017E                     	ds	34
  1692  0001A0                     inputEntry@F3210:
  1693                           	opt stack 0
  1694  0001A0                     	ds	24
  1695  0001B8                     packaging@F3230:
  1696                           	opt stack 0
  1697  0001B8                     	ds	2
  1698  0001BA                     packaging@F3226:
  1699                           	opt stack 0
  1700  0001BA                     	ds	2
  1701                           tblptru	equ	0xFF8
  1702                           tblptrh	equ	0xFF7
  1703                           tblptrl	equ	0xFF6
  1704                           tablat	equ	0xFF5
  1705                           postinc0	equ	0xFEE
  1706                           wreg	equ	0xFE8
  1707                           postdec1	equ	0xFE5
  1708                           fsr1l	equ	0xFE1
  1709                           
  1710                           	psect	dataBANK2
  1711  000200                     __pdataBANK2:
  1712                           	opt stack 0
  1713  000200                     _fSLookup:
  1714                           	opt stack 0
  1715  000200                     	ds	105
  1716                           tblptru	equ	0xFF8
  1717                           tblptrh	equ	0xFF7
  1718                           tblptrl	equ	0xFF6
  1719                           tablat	equ	0xFF5
  1720                           postinc0	equ	0xFEE
  1721                           wreg	equ	0xFE8
  1722                           postdec1	equ	0xFE5
  1723                           fsr1l	equ	0xFE1
  1724                           
  1725                           	psect	cstackBANK1
  1726  000100                     __pcstackBANK1:
  1727                           	opt stack 0
  1728  000100                     inputEntry@msg:
  1729                           	opt stack 0
  1730  000100                     packaging@msg:
  1731                           	opt stack 0
  1732                           
  1733                           ; 34 bytes @ 0x0
  1734  000100                     	ds	24
  1735  000118                     inputEntry@fastenerString:
  1736                           	opt stack 0
  1737                           
  1738                           ; 32 bytes @ 0x18
  1739  000118                     	ds	10
  1740  000122                     packaging@msg3:
  1741                           	opt stack 0
  1742                           
  1743                           ; 50 bytes @ 0x22
  1744  000122                     	ds	22
  1745  000138                     inputEntry@compartmentLabel:
  1746                           	opt stack 0
  1747                           
  1748                           ; 2 bytes @ 0x38
  1749  000138                     	ds	2
  1750  00013A                     inputEntry@compartmentsToFill:
  1751                           	opt stack 0
  1752                           
  1753                           ; 1 bytes @ 0x3A
  1754  00013A                     	ds	1
  1755  00013B                     inputEntry@done:
  1756                           	opt stack 0
  1757                           
  1758                           ; 2 bytes @ 0x3B
  1759  00013B                     	ds	2
  1760  00013D                     inputEntry@found:
  1761                           	opt stack 0
  1762                           
  1763                           ; 2 bytes @ 0x3D
  1764  00013D                     	ds	2
  1765  00013F                     inputEntry@setIsGood:
  1766                           	opt stack 0
  1767                           
  1768                           ; 2 bytes @ 0x3F
  1769  00013F                     	ds	2
  1770  000141                     inputEntry@doneMultiples:
  1771                           	opt stack 0
  1772                           
  1773                           ; 2 bytes @ 0x41
  1774  000141                     	ds	2
  1775  000143                     inputEntry@doneCompartment:
  1776                           	opt stack 0
  1777                           
  1778                           ; 2 bytes @ 0x43
  1779  000143                     	ds	2
  1780  000145                     inputEntry@sum:
  1781                           	opt stack 0
  1782                           
  1783                           ; 2 bytes @ 0x45
  1784  000145                     	ds	2
  1785  000147                     inputEntry@numB:
  1786                           	opt stack 0
  1787                           
  1788                           ; 2 bytes @ 0x47
  1789  000147                     	ds	2
  1790  000149                     inputEntry@numN:
  1791                           	opt stack 0
  1792                           
  1793                           ; 2 bytes @ 0x49
  1794  000149                     	ds	2
  1795  00014B                     inputEntry@numS:
  1796                           	opt stack 0
  1797                           
  1798                           ; 2 bytes @ 0x4B
  1799  00014B                     	ds	2
  1800  00014D                     inputEntry@numW:
  1801                           	opt stack 0
  1802                           
  1803                           ; 2 bytes @ 0x4D
  1804  00014D                     	ds	2
  1805  00014F                     inputEntry@inputEntryStep:
  1806                           	opt stack 0
  1807                           
  1808                           ; 2 bytes @ 0x4F
  1809  00014F                     	ds	2
  1810  000151                     inputEntry@numPressed:
  1811                           	opt stack 0
  1812                           
  1813                           ; 2 bytes @ 0x51
  1814  000151                     	ds	2
  1815  000153                     inputEntry@compartmentNum:
  1816                           	opt stack 0
  1817                           
  1818                           ; 2 bytes @ 0x53
  1819  000153                     	ds	1
  1820  000154                     packaging@msg2:
  1821                           	opt stack 0
  1822                           
  1823                           ; 32 bytes @ 0x54
  1824  000154                     	ds	1
  1825  000155                     inputEntry@i:
  1826                           	opt stack 0
  1827                           
  1828                           ; 2 bytes @ 0x55
  1829  000155                     	ds	2
  1830  000157                     inputEntry@pressed:
  1831                           	opt stack 0
  1832                           
  1833                           ; 1 bytes @ 0x57
  1834  000157                     	ds	29
  1835  000174                     packaging@instr:
  1836                           	opt stack 0
  1837                           
  1838                           ; 2 bytes @ 0x74
  1839  000174                     	ds	2
  1840  000176                     packaging@instr_321:
  1841                           	opt stack 0
  1842                           
  1843                           ; 2 bytes @ 0x76
  1844  000176                     	ds	2
  1845  000178                     packaging@set:
  1846                           	opt stack 0
  1847                           
  1848                           ; 2 bytes @ 0x78
  1849  000178                     	ds	2
  1850  00017A                     packaging@mult:
  1851                           	opt stack 0
  1852                           
  1853                           ; 2 bytes @ 0x7A
  1854  00017A                     	ds	2
  1855  00017C                     packaging@compartmentNum:
  1856                           	opt stack 0
  1857                           
  1858                           ; 2 bytes @ 0x7C
  1859  00017C                     	ds	2
  1860                           tblptru	equ	0xFF8
  1861                           tblptrh	equ	0xFF7
  1862                           tblptrl	equ	0xFF6
  1863                           tablat	equ	0xFF5
  1864                           postinc0	equ	0xFEE
  1865                           wreg	equ	0xFE8
  1866                           postdec1	equ	0xFE5
  1867                           fsr1l	equ	0xFE1
  1868                           
  1869                           	psect	cstackBANK0
  1870  000080                     __pcstackBANK0:
  1871                           	opt stack 0
  1872  000080                     ??_I2C_Master_Wait:
  1873  000080                     ?___wmul:
  1874                           	opt stack 0
  1875  000080                     ?_tock:
  1876                           	opt stack 0
  1877  000080                     ?___ftpack:
  1878                           	opt stack 0
  1879  000080                     ?___lldiv:
  1880                           	opt stack 0
  1881  000080                     lcdNibble@temp:
  1882                           	opt stack 0
  1883  000080                     pollKeypad@keypress:
  1884                           	opt stack 0
  1885  000080                     motorControl@dir:
  1886                           	opt stack 0
  1887  000080                     ___wmul@multiplier:
  1888                           	opt stack 0
  1889  000080                     ___ftpack@arg:
  1890                           	opt stack 0
  1891  000080                     ___lldiv@dividend:
  1892                           	opt stack 0
  1893                           
  1894                           ; 4 bytes @ 0x0
  1895  000080                     	ds	1
  1896  000081                     I2C_Master_Read@ackBit:
  1897                           	opt stack 0
  1898  000081                     lcdNibble@data:
  1899                           	opt stack 0
  1900  000081                     motorControl@motor:
  1901                           	opt stack 0
  1902  000081                     I2C_Master_Write@byteToWrite:
  1903                           	opt stack 0
  1904                           
  1905                           ; 2 bytes @ 0x1
  1906  000081                     	ds	1
  1907  000082                     I2C_Master_Read@receivedByte:
  1908                           	opt stack 0
  1909  000082                     lcdInst@data:
  1910                           	opt stack 0
  1911  000082                     putch@data:
  1912                           	opt stack 0
  1913  000082                     ___wmul@multiplicand:
  1914                           	opt stack 0
  1915                           
  1916                           ; 2 bytes @ 0x2
  1917  000082                     	ds	1
  1918  000083                     ??_initLCD:
  1919  000083                     lcd_shift_cursor@direction:
  1920                           	opt stack 0
  1921  000083                     ___ftpack@exp:
  1922                           	opt stack 0
  1923  000083                     I2C_Send@data:
  1924                           	opt stack 0
  1925  000083                     RTC_getTime@time:
  1926                           	opt stack 0
  1927                           
  1928                           ; 2 bytes @ 0x3
  1929  000083                     	ds	1
  1930  000084                     lcd_shift_cursor@numChars:
  1931                           	opt stack 0
  1932  000084                     ___ftpack@sign:
  1933                           	opt stack 0
  1934  000084                     ___wmul@product:
  1935                           	opt stack 0
  1936  000084                     ___lldiv@divisor:
  1937                           	opt stack 0
  1938                           
  1939                           ; 4 bytes @ 0x4
  1940  000084                     	ds	1
  1941  000085                     ??_I2C_Send:
  1942  000085                     ??___ftpack:
  1943  000085                     lcd_shift_cursor@n:
  1944                           	opt stack 0
  1945  000085                     RTC_getTime@i:
  1946                           	opt stack 0
  1947                           
  1948                           ; 1 bytes @ 0x5
  1949  000085                     	ds	1
  1950  000086                     ??_RTC_startOperation:
  1951  000086                     ?_RTC_getOperatingTime:
  1952                           	opt stack 0
  1953  000086                     lcd_set_cursor@y:
  1954                           	opt stack 0
  1955  000086                     printStringLCD@string:
  1956                           	opt stack 0
  1957  000086                     strcpy@to:
  1958                           	opt stack 0
  1959                           
  1960                           ; 2 bytes @ 0x6
  1961  000086                     	ds	1
  1962  000087                     ??_lcd_set_cursor:
  1963                           
  1964                           ; 1 bytes @ 0x7
  1965  000087                     	ds	1
  1966  000088                     ??_printStringLCD:
  1967  000088                     ??_RTC_getOperatingTime:
  1968  000088                     ?___ftadd:
  1969                           	opt stack 0
  1970  000088                     lcd_set_cursor@i:
  1971                           	opt stack 0
  1972  000088                     I2C_Send@address:
  1973                           	opt stack 0
  1974  000088                     strcpy@from:
  1975                           	opt stack 0
  1976  000088                     ___ftadd@f1:
  1977                           	opt stack 0
  1978  000088                     ___lldiv@quotient:
  1979                           	opt stack 0
  1980  000088                     RTC_startOperation@time:
  1981                           	opt stack 0
  1982                           
  1983                           ; 7 bytes @ 0x8
  1984  000088                     	ds	1
  1985  000089                     lcd_set_cursor@x:
  1986                           	opt stack 0
  1987  000089                     I2C_Send@i:
  1988                           	opt stack 0
  1989                           
  1990                           ; 2 bytes @ 0x9
  1991  000089                     	ds	1
  1992  00008A                     strcpy@cp:
  1993                           	opt stack 0
  1994  00008A                     RTC_getOperatingTime@time:
  1995                           	opt stack 0
  1996                           
  1997                           ; 7 bytes @ 0xA
  1998  00008A                     	ds	1
  1999  00008B                     printStringLCD@j:
  2000                           	opt stack 0
  2001  00008B                     ___ftadd@f2:
  2002                           	opt stack 0
  2003                           
  2004                           ; 3 bytes @ 0xB
  2005  00008B                     	ds	1
  2006  00008C                     ___lldiv@counter:
  2007                           	opt stack 0
  2008                           
  2009                           ; 1 bytes @ 0xC
  2010  00008C                     	ds	1
  2011  00008D                     ?___llmod:
  2012                           	opt stack 0
  2013  00008D                     printStringLCD@spaceIndex:
  2014                           	opt stack 0
  2015  00008D                     I2C_Master_Init@clockFreq:
  2016                           	opt stack 0
  2017  00008D                     ___llmod@dividend:
  2018                           	opt stack 0
  2019                           
  2020                           ; 4 bytes @ 0xD
  2021  00008D                     	ds	1
  2022  00008E                     ??___ftadd:
  2023                           
  2024                           ; 1 bytes @ 0xE
  2025  00008E                     	ds	1
  2026  00008F                     printStringLCD@newlineIndex:
  2027                           	opt stack 0
  2028                           
  2029                           ; 2 bytes @ 0xF
  2030  00008F                     	ds	2
  2031  000091                     ??_I2C_Master_Init:
  2032  000091                     ___ftadd@sign:
  2033                           	opt stack 0
  2034  000091                     printStringLCD@newlineCharIndex:
  2035                           	opt stack 0
  2036  000091                     RTC_getOperatingTime@res:
  2037                           	opt stack 0
  2038  000091                     ___llmod@divisor:
  2039                           	opt stack 0
  2040                           
  2041                           ; 4 bytes @ 0x11
  2042  000091                     	ds	1
  2043  000092                     ___ftadd@exp2:
  2044                           	opt stack 0
  2045                           
  2046                           ; 1 bytes @ 0x12
  2047  000092                     	ds	1
  2048  000093                     ___ftadd@exp1:
  2049                           	opt stack 0
  2050  000093                     printStringLCD@i:
  2051                           	opt stack 0
  2052  000093                     RTC_getOperatingTime@operatingTime:
  2053                           	opt stack 0
  2054                           
  2055                           ; 6 bytes @ 0x13
  2056  000093                     	ds	1
  2057  000094                     ___ftge@ff1:
  2058                           	opt stack 0
  2059                           
  2060                           ; 3 bytes @ 0x14
  2061  000094                     	ds	1
  2062  000095                     ??_hibernate:
  2063  000095                     ??_viewLogs:
  2064  000095                     ___llmod@counter:
  2065                           	opt stack 0
  2066  000095                     printErrorLCD@string:
  2067                           	opt stack 0
  2068                           
  2069                           ; 2 bytes @ 0x15
  2070  000095                     	ds	1
  2071  000096                     ?__doprnt:
  2072                           	opt stack 0
  2073  000096                     viewLogs@pressed:
  2074                           	opt stack 0
  2075  000096                     __doprnt@pb:
  2076                           	opt stack 0
  2077                           
  2078                           ; 2 bytes @ 0x16
  2079  000096                     	ds	1
  2080  000097                     ??_printErrorLCD:
  2081  000097                     ___ftge@ff2:
  2082                           	opt stack 0
  2083                           
  2084                           ; 3 bytes @ 0x17
  2085  000097                     	ds	1
  2086  000098                     __doprnt@f:
  2087                           	opt stack 0
  2088                           
  2089                           ; 2 bytes @ 0x18
  2090  000098                     	ds	1
  2091  000099                     ??_inputEntry:
  2092  000099                     hibernate@pressed:
  2093                           	opt stack 0
  2094                           
  2095                           ; 2 bytes @ 0x19
  2096  000099                     	ds	1
  2097  00009A                     ??___ftge:
  2098  00009A                     __doprnt@ap:
  2099                           	opt stack 0
  2100                           
  2101                           ; 2 bytes @ 0x1A
  2102  00009A                     	ds	2
  2103  00009C                     ??__doprnt:
  2104                           
  2105                           ; 1 bytes @ 0x1C
  2106  00009C                     	ds	1
  2107  00009D                     ??_clearing:
  2108  00009D                     packageCompartment@n:
  2109                           	opt stack 0
  2110                           
  2111                           ; 1 bytes @ 0x1D
  2112  00009D                     	ds	1
  2113  00009E                     packageCompartment@s:
  2114                           	opt stack 0
  2115  00009E                     __doprnt@prec:
  2116                           	opt stack 0
  2117                           
  2118                           ; 2 bytes @ 0x1E
  2119  00009E                     	ds	1
  2120  00009F                     packageCompartment@w:
  2121                           	opt stack 0
  2122  00009F                     clearing@instr:
  2123                           	opt stack 0
  2124                           
  2125                           ; 2 bytes @ 0x1F
  2126  00009F                     	ds	1
  2127  0000A0                     ??_packageCompartment:
  2128  0000A0                     __doprnt@flag:
  2129                           	opt stack 0
  2130                           
  2131                           ; 1 bytes @ 0x20
  2132  0000A0                     	ds	1
  2133  0000A1                     clearing@spinTime:
  2134                           	opt stack 0
  2135  0000A1                     __doprnt@val:
  2136                           	opt stack 0
  2137                           
  2138                           ; 4 bytes @ 0x21
  2139  0000A1                     	ds	2
  2140  0000A3                     packageCompartment@instr:
  2141                           	opt stack 0
  2142                           
  2143                           ; 2 bytes @ 0x23
  2144  0000A3                     	ds	1
  2145  0000A4                     clearing@debounceTime:
  2146                           	opt stack 0
  2147                           
  2148                           ; 3 bytes @ 0x24
  2149  0000A4                     	ds	1
  2150  0000A5                     packageCompartment@b:
  2151                           	opt stack 0
  2152  0000A5                     __doprnt@cp:
  2153                           	opt stack 0
  2154                           
  2155                           ; 2 bytes @ 0x25
  2156  0000A5                     	ds	1
  2157  0000A6                     packageCompartment@timeB:
  2158                           	opt stack 0
  2159                           
  2160                           ; 3 bytes @ 0x26
  2161  0000A6                     	ds	1
  2162  0000A7                     __doprnt@c:
  2163                           	opt stack 0
  2164  0000A7                     clearing@currTime:
  2165                           	opt stack 0
  2166                           
  2167                           ; 3 bytes @ 0x27
  2168  0000A7                     	ds	1
  2169  0000A8                     ?_sprintf:
  2170                           	opt stack 0
  2171  0000A8                     ?_printf:
  2172                           	opt stack 0
  2173  0000A8                     printf@f:
  2174                           	opt stack 0
  2175  0000A8                     sprintf@wh:
  2176                           	opt stack 0
  2177                           
  2178                           ; 2 bytes @ 0x28
  2179  0000A8                     	ds	1
  2180  0000A9                     packageCompartment@timeN:
  2181                           	opt stack 0
  2182                           
  2183                           ; 3 bytes @ 0x29
  2184  0000A9                     	ds	1
  2185  0000AA                     sprintf@f:
  2186                           	opt stack 0
  2187                           
  2188                           ; 2 bytes @ 0x2A
  2189  0000AA                     	ds	2
  2190  0000AC                     packageCompartment@timeS:
  2191                           	opt stack 0
  2192                           
  2193                           ; 3 bytes @ 0x2C
  2194  0000AC                     	ds	3
  2195  0000AF                     packageCompartment@timeW:
  2196                           	opt stack 0
  2197                           
  2198                           ; 3 bytes @ 0x2F
  2199  0000AF                     	ds	3
  2200  0000B2                     packageCompartment@numB:
  2201                           	opt stack 0
  2202  0000B2                     printf@ap:
  2203                           	opt stack 0
  2204                           
  2205                           ; 2 bytes @ 0x32
  2206  0000B2                     	ds	2
  2207  0000B4                     packageCompartment@numN:
  2208                           	opt stack 0
  2209  0000B4                     sprintf@ap:
  2210                           	opt stack 0
  2211  0000B4                     printf@pb:
  2212                           	opt stack 0
  2213                           
  2214                           ; 4 bytes @ 0x34
  2215  0000B4                     	ds	2
  2216  0000B6                     packageCompartment@numS:
  2217                           	opt stack 0
  2218  0000B6                     sprintf@pb:
  2219                           	opt stack 0
  2220                           
  2221                           ; 4 bytes @ 0x36
  2222  0000B6                     	ds	2
  2223  0000B8                     packageCompartment@numW:
  2224                           	opt stack 0
  2225                           
  2226                           ; 2 bytes @ 0x38
  2227  0000B8                     	ds	2
  2228  0000BA                     packageCompartment@doneB:
  2229                           	opt stack 0
  2230                           
  2231                           ; 2 bytes @ 0x3A
  2232  0000BA                     	ds	2
  2233  0000BC                     packageCompartment@doneN:
  2234                           	opt stack 0
  2235                           
  2236                           ; 2 bytes @ 0x3C
  2237  0000BC                     	ds	2
  2238  0000BE                     packageCompartment@doneS:
  2239                           	opt stack 0
  2240                           
  2241                           ; 2 bytes @ 0x3E
  2242  0000BE                     	ds	2
  2243  0000C0                     packageCompartment@doneW:
  2244                           	opt stack 0
  2245                           
  2246                           ; 2 bytes @ 0x40
  2247  0000C0                     	ds	2
  2248  0000C2                     packageCompartment@currTime:
  2249                           	opt stack 0
  2250                           
  2251                           ; 3 bytes @ 0x42
  2252  0000C2                     	ds	3
  2253  0000C5                     ??_packaging:
  2254                           
  2255                           ; 1 bytes @ 0x45
  2256  0000C5                     	ds	6
  2257  0000CB                     ??_mainMenu:
  2258                           
  2259                           ; 1 bytes @ 0x4B
  2260  0000CB                     	ds	4
  2261  0000CF                     mainMenu@operationTime:
  2262                           	opt stack 0
  2263                           
  2264                           ; 4 bytes @ 0x4F
  2265  0000CF                     	ds	4
  2266  0000D3                     mainMenu@startPress:
  2267                           	opt stack 0
  2268                           
  2269                           ; 2 bytes @ 0x53
  2270  0000D3                     	ds	2
  2271  0000D5                     mainMenu@needToPrint:
  2272                           	opt stack 0
  2273                           
  2274                           ; 2 bytes @ 0x55
  2275  0000D5                     	ds	2
  2276  0000D7                     mainMenu@pressed:
  2277                           	opt stack 0
  2278                           
  2279                           ; 2 bytes @ 0x57
  2280  0000D7                     	ds	2
  2281  0000D9                     mainMenu@i:
  2282                           	opt stack 0
  2283                           
  2284                           ; 2 bytes @ 0x59
  2285  0000D9                     	ds	2
  2286  0000DB                     ??_main:
  2287                           
  2288                           ; 1 bytes @ 0x5B
  2289  0000DB                     	ds	1
  2290                           tblptru	equ	0xFF8
  2291                           tblptrh	equ	0xFF7
  2292                           tblptrl	equ	0xFF6
  2293                           tablat	equ	0xFF5
  2294                           postinc0	equ	0xFEE
  2295                           wreg	equ	0xFE8
  2296                           postdec1	equ	0xFE5
  2297                           fsr1l	equ	0xFE1
  2298                           
  2299                           	psect	cstackCOMRAM
  2300  000001                     __pcstackCOMRAM:
  2301                           	opt stack 0
  2302  000001                     ?i2___ftpack:
  2303                           	opt stack 0
  2304  000001                     inverseDir@dir:
  2305                           	opt stack 0
  2306  000001                     i2___ftpack@arg:
  2307                           	opt stack 0
  2308                           
  2309                           ; 3 bytes @ 0x0
  2310  000001                     	ds	1
  2311  000002                     i2motorControl@dir:
  2312                           	opt stack 0
  2313                           
  2314                           ; 1 bytes @ 0x1
  2315  000002                     	ds	1
  2316  000003                     i2motorControl@motor:
  2317                           	opt stack 0
  2318                           
  2319                           ; 1 bytes @ 0x2
  2320  000003                     	ds	1
  2321  000004                     i2___ftpack@exp:
  2322                           	opt stack 0
  2323                           
  2324                           ; 1 bytes @ 0x3
  2325  000004                     	ds	1
  2326  000005                     i2___ftpack@sign:
  2327                           	opt stack 0
  2328                           
  2329                           ; 1 bytes @ 0x4
  2330  000005                     	ds	1
  2331  000006                     ??i2___ftpack:
  2332                           
  2333                           ; 1 bytes @ 0x5
  2334  000006                     	ds	3
  2335  000009                     ?i2___ftadd:
  2336                           	opt stack 0
  2337  000009                     i2___ftadd@f1:
  2338                           	opt stack 0
  2339                           
  2340                           ; 3 bytes @ 0x8
  2341  000009                     	ds	3
  2342  00000C                     i2___ftadd@f2:
  2343                           	opt stack 0
  2344                           
  2345                           ; 3 bytes @ 0xB
  2346  00000C                     	ds	3
  2347  00000F                     ??i2___ftadd:
  2348                           
  2349                           ; 1 bytes @ 0xE
  2350  00000F                     	ds	3
  2351  000012                     i2___ftadd@sign:
  2352                           	opt stack 0
  2353                           
  2354                           ; 1 bytes @ 0x11
  2355  000012                     	ds	1
  2356  000013                     i2___ftadd@exp2:
  2357                           	opt stack 0
  2358                           
  2359                           ; 1 bytes @ 0x12
  2360  000013                     	ds	1
  2361  000014                     i2___ftadd@exp1:
  2362                           	opt stack 0
  2363                           
  2364                           ; 1 bytes @ 0x13
  2365  000014                     	ds	1
  2366  000015                     ??_tmr0_ISR:
  2367                           
  2368                           ; 1 bytes @ 0x14
  2369  000015                     	ds	5
  2370  00001A                     tmr0_ISR@motorControlTimerB:
  2371                           	opt stack 0
  2372                           
  2373                           ; 2 bytes @ 0x19
  2374  00001A                     	ds	2
  2375  00001C                     tmr0_ISR@motorControlTimerN:
  2376                           	opt stack 0
  2377                           
  2378                           ; 2 bytes @ 0x1B
  2379  00001C                     	ds	2
  2380  00001E                     tmr0_ISR@motorControlTimerS:
  2381                           	opt stack 0
  2382                           
  2383                           ; 2 bytes @ 0x1D
  2384  00001E                     	ds	2
  2385  000020                     tmr0_ISR@motorControlTimerW:
  2386                           	opt stack 0
  2387                           
  2388                           ; 2 bytes @ 0x1F
  2389  000020                     	ds	2
  2390  000022                     ??_interruptHandler:
  2391                           
  2392                           ; 1 bytes @ 0x21
  2393  000022                     	ds	18
  2394                           tblptru	equ	0xFF8
  2395                           tblptrh	equ	0xFF7
  2396                           tblptrl	equ	0xFF6
  2397                           tablat	equ	0xFF5
  2398                           postinc0	equ	0xFEE
  2399                           wreg	equ	0xFE8
  2400                           postdec1	equ	0xFE5
  2401                           fsr1l	equ	0xFE1
  2402                           
  2403 ;;
  2404 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2405 ;;
  2406 ;; *************** function _main *****************
  2407 ;; Defined at:
  2408 ;;		line 279 in file "main.c"
  2409 ;; Parameters:    Size  Location     Type
  2410 ;;		None
  2411 ;; Auto vars:     Size  Location     Type
  2412 ;;		None
  2413 ;; Return value:  Size  Location     Type
  2414 ;;                  1    wreg      void 
  2415 ;; Registers used:
  2416 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2417 ;; Tracked objects:
  2418 ;;		On entry : 0/0
  2419 ;;		On exit  : 0/0
  2420 ;;		Unchanged: 0/0
  2421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2424 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2425 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2426 ;;Total ram usage:        1 bytes
  2427 ;; Hardware stack levels required when called:   10
  2428 ;; This function calls:
  2429 ;;		_I2C_Master_Init
  2430 ;;		_hibernate
  2431 ;;		_initLCD
  2432 ;;		_lcdInst
  2433 ;;		_mainMenu
  2434 ;;		_motorControl
  2435 ;;		_tmr0Init
  2436 ;; This function is called by:
  2437 ;;		Startup code after reset
  2438 ;; This function uses a non-reentrant model
  2439 ;;
  2440                           
  2441                           	psect	text0
  2442  002852                     __ptext0:
  2443                           	opt stack 0
  2444  002852                     _main:
  2445                           	opt stack 21
  2446                           
  2447                           ;main.c: 284: LATA = 0x00;
  2448                           
  2449                           ;incstack = 0
  2450  002852  0E00               	movlw	0
  2451  002854  6E89               	movwf	3977,c	;volatile
  2452                           
  2453                           ;main.c: 285: LATB = 0x00;
  2454  002856  0E00               	movlw	0
  2455  002858  6E8A               	movwf	3978,c	;volatile
  2456                           
  2457                           ;main.c: 286: LATC = 0x00;
  2458  00285A  0E00               	movlw	0
  2459  00285C  6E8B               	movwf	3979,c	;volatile
  2460                           
  2461                           ;main.c: 287: LATD = 0x00;
  2462  00285E  0E00               	movlw	0
  2463  002860  6E8C               	movwf	3980,c	;volatile
  2464                           
  2465                           ;main.c: 288: LATE = 0x00;
  2466  002862  0E00               	movlw	0
  2467  002864  6E8D               	movwf	3981,c	;volatile
  2468                           
  2469                           ;main.c: 291: TRISA = 0xFF;
  2470  002866  6892               	setf	3986,c	;volatile
  2471                           
  2472                           ;main.c: 292: TRISB = 0b11110111;
  2473  002868  0EF7               	movlw	247
  2474  00286A  6E93               	movwf	3987,c	;volatile
  2475                           
  2476                           ;main.c: 293: TRISC = 0x00;
  2477  00286C  0E00               	movlw	0
  2478  00286E  6E94               	movwf	3988,c	;volatile
  2479                           
  2480                           ;main.c: 294: TRISD = 0x00;
  2481  002870  0E00               	movlw	0
  2482  002872  6E95               	movwf	3989,c	;volatile
  2483                           
  2484                           ;main.c: 295: TRISE = 0x00;
  2485  002874  0E00               	movlw	0
  2486  002876  6E96               	movwf	3990,c	;volatile
  2487                           
  2488                           ;main.c: 297: ADCON0 = 0x00;
  2489  002878  0E00               	movlw	0
  2490  00287A  6EC2               	movwf	4034,c	;volatile
  2491                           
  2492                           ;main.c: 298: ADCON1 = 0x0F;
  2493  00287C  0E0F               	movlw	15
  2494  00287E  6EC1               	movwf	4033,c	;volatile
  2495                           
  2496                           ;main.c: 301: I2C_Master_Init(100000);
  2497  002880  0EA0               	movlw	160
  2498  002882  0100               	movlb	0	; () banked
  2499  002884  6F8D               	movwf	I2C_Master_Init@clockFreq& (0+255),b
  2500  002886  0E86               	movlw	134
  2501  002888  6F8E               	movwf	(I2C_Master_Init@clockFreq+1)& (0+255),b
  2502  00288A  0E01               	movlw	1
  2503  00288C  6F8F               	movwf	(I2C_Master_Init@clockFreq+2)& (0+255),b
  2504  00288E  0E00               	movlw	0
  2505  002890  6F90               	movwf	(I2C_Master_Init@clockFreq+3)& (0+255),b
  2506  002892  ECD0  F017         	call	_I2C_Master_Init	;wreg free
  2507                           
  2508                           ;main.c: 302: tmr0Init();
  2509  002896  EC49  F019         	call	_tmr0Init	;wreg free
  2510                           
  2511                           ;main.c: 303: initLCD();
  2512  00289A  EC00  F018         	call	_initLCD	;wreg free
  2513                           
  2514                           ;main.c: 305: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2515  00289E  0E01               	movlw	1
  2516  0028A0  EC83  F019         	call	_lcdInst
  2517  0028A4  0EC3               	movlw	195
  2518  0028A6  0100               	movlb	0	; () banked
  2519  0028A8  6FDB               	movwf	??_main& (0+255),b
  2520  0028AA  0ECD               	movlw	205
  2521  0028AC                     u7687:
  2522  0028AC  2EE8               	decfsz	wreg,f,c
  2523  0028AE  D7FE               	bra	u7687
  2524  0028B0  2FDB               	decfsz	??_main& (0+255),f,b
  2525  0028B2  D7FC               	bra	u7687
  2526                           
  2527                           ;main.c: 306: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2528  0028B4  0E80               	movlw	128
  2529  0028B6  EC83  F019         	call	_lcdInst
  2530  0028BA  0E41               	movlw	65
  2531  0028BC  0100               	movlb	0	; () banked
  2532  0028BE  6FDB               	movwf	??_main& (0+255),b
  2533  0028C0  0EEE               	movlw	238
  2534  0028C2                     u7697:
  2535  0028C2  2EE8               	decfsz	wreg,f,c
  2536  0028C4  D7FE               	bra	u7697
  2537  0028C6  2FDB               	decfsz	??_main& (0+255),f,b
  2538  0028C8  D7FC               	bra	u7697
  2539  0028CA  F000               	nop	
  2540                           
  2541                           ;main.c: 309: motorControl(BOLT, STOPMOTOR);
  2542  0028CC  0E02               	movlw	2
  2543  0028CE  0100               	movlb	0	; () banked
  2544  0028D0  6F80               	movwf	motorControl@dir& (0+255),b
  2545  0028D2  0E00               	movlw	0
  2546  0028D4  EC66  F013         	call	_motorControl
  2547                           
  2548                           ;main.c: 310: motorControl(NUT, STOPMOTOR);
  2549  0028D8  0E02               	movlw	2
  2550  0028DA  0100               	movlb	0	; () banked
  2551  0028DC  6F80               	movwf	motorControl@dir& (0+255),b
  2552  0028DE  0E01               	movlw	1
  2553  0028E0  EC66  F013         	call	_motorControl
  2554                           
  2555                           ;main.c: 311: motorControl(SPACER, STOPMOTOR);
  2556  0028E4  0E02               	movlw	2
  2557  0028E6  0100               	movlb	0	; () banked
  2558  0028E8  6F80               	movwf	motorControl@dir& (0+255),b
  2559  0028EA  0E02               	movlw	2
  2560  0028EC  EC66  F013         	call	_motorControl
  2561                           
  2562                           ;main.c: 312: motorControl(WASHER, STOPMOTOR);
  2563  0028F0  0E02               	movlw	2
  2564  0028F2  0100               	movlb	0	; () banked
  2565  0028F4  6F80               	movwf	motorControl@dir& (0+255),b
  2566  0028F6  0E03               	movlw	3
  2567  0028F8  EC66  F013         	call	_motorControl
  2568                           
  2569                           ;main.c: 321: hibernate();
  2570  0028FC  EC8B  F018         	call	_hibernate	;wreg free
  2571                           
  2572                           ;main.c: 322: mainMenu();
  2573  002900  ECF1  F00D         	call	_mainMenu	;wreg free
  2574  002904                     l186:
  2575  002904  D7FF               	goto	l186
  2576  002906                     __end_of_main:
  2577                           	opt stack 0
  2578                           tblptru	equ	0xFF8
  2579                           tblptrh	equ	0xFF7
  2580                           tblptrl	equ	0xFF6
  2581                           tablat	equ	0xFF5
  2582                           postinc0	equ	0xFEE
  2583                           wreg	equ	0xFE8
  2584                           postdec1	equ	0xFE5
  2585                           fsr1l	equ	0xFE1
  2586                           
  2587 ;; *************** function _tmr0Init *****************
  2588 ;; Defined at:
  2589 ;;		line 32 in file "timer.c"
  2590 ;; Parameters:    Size  Location     Type
  2591 ;;		None
  2592 ;; Auto vars:     Size  Location     Type
  2593 ;;		None
  2594 ;; Return value:  Size  Location     Type
  2595 ;;                  1    wreg      void 
  2596 ;; Registers used:
  2597 ;;		wreg, status,2
  2598 ;; Tracked objects:
  2599 ;;		On entry : 0/0
  2600 ;;		On exit  : 0/0
  2601 ;;		Unchanged: 0/0
  2602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2606 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2607 ;;Total ram usage:        0 bytes
  2608 ;; Hardware stack levels used:    1
  2609 ;; Hardware stack levels required when called:    4
  2610 ;; This function calls:
  2611 ;;		Nothing
  2612 ;; This function is called by:
  2613 ;;		_main
  2614 ;;		_Timer_startOperation
  2615 ;; This function uses a non-reentrant model
  2616 ;;
  2617                           
  2618                           	psect	text1
  2619  003292                     __ptext1:
  2620                           	opt stack 0
  2621  003292                     _tmr0Init:
  2622                           	opt stack 26
  2623                           
  2624                           ;timer.c: 41: if (!timerInit) {
  2625                           
  2626                           ;incstack = 0
  2627  003292  504A               	movf	_timerInit,w,c
  2628  003294  A4D8               	btfss	status,2,c
  2629  003296  0012               	return	
  2630                           
  2631                           ;timer.c: 42: T0CONbits.T08BIT = 0;
  2632  003298  9CD5               	bcf	4053,6,c	;volatile
  2633                           
  2634                           ;timer.c: 43: T0CONbits.T0CS = 0;
  2635  00329A  9AD5               	bcf	4053,5,c	;volatile
  2636                           
  2637                           ;timer.c: 44: T0CONbits.PSA = 0;
  2638  00329C  96D5               	bcf	4053,3,c	;volatile
  2639                           
  2640                           ;timer.c: 47: T0CONbits.T0PS2 = 1;
  2641  00329E  84D5               	bsf	4053,2,c	;volatile
  2642                           
  2643                           ;timer.c: 48: T0CONbits.T0PS1 = 1;
  2644  0032A0  82D5               	bsf	4053,1,c	;volatile
  2645                           
  2646                           ;timer.c: 49: T0CONbits.T0PS0 = 1;
  2647  0032A2  80D5               	bsf	4053,0,c	;volatile
  2648                           
  2649                           ;timer.c: 52: TMR0H = 0xF9;
  2650  0032A4  0EF9               	movlw	249
  2651  0032A6  6ED7               	movwf	4055,c	;volatile
  2652                           
  2653                           ;timer.c: 53: TMR0L = 0x5F;
  2654  0032A8  0E5F               	movlw	95
  2655  0032AA  6ED6               	movwf	4054,c	;volatile
  2656                           
  2657                           ;timer.c: 54: T0CONbits.TMR0ON = 1;
  2658  0032AC  8ED5               	bsf	4053,7,c	;volatile
  2659                           
  2660                           ;timer.c: 55: TMR0IE = 1;
  2661  0032AE  8AF2               	bsf	intcon,5,c	;volatile
  2662                           
  2663                           ;timer.c: 58: (INTCONbits.GIE = 1);
  2664  0032B0  8EF2               	bsf	intcon,7,c	;volatile
  2665  0032B2  0012               	return	
  2666  0032B4                     __end_of_tmr0Init:
  2667                           	opt stack 0
  2668                           tblptru	equ	0xFF8
  2669                           tblptrh	equ	0xFF7
  2670                           tblptrl	equ	0xFF6
  2671                           tablat	equ	0xFF5
  2672                           intcon	equ	0xFF2
  2673                           postinc0	equ	0xFEE
  2674                           wreg	equ	0xFE8
  2675                           postdec1	equ	0xFE5
  2676                           fsr1l	equ	0xFE1
  2677                           status	equ	0xFD8
  2678                           
  2679 ;; *************** function _mainMenu *****************
  2680 ;; Defined at:
  2681 ;;		line 174 in file "menu.c"
  2682 ;; Parameters:    Size  Location     Type
  2683 ;;		None
  2684 ;; Auto vars:     Size  Location     Type
  2685 ;;  operationTim    4   79[BANK0 ] long 
  2686 ;;  i               2   89[BANK0 ] int 
  2687 ;;  startPress      2   83[BANK0 ] int 
  2688 ;;  pressed         2   87[BANK0 ] int 
  2689 ;;  needToPrint     2   85[BANK0 ] int 
  2690 ;; Return value:  Size  Location     Type
  2691 ;;                  1    wreg      void 
  2692 ;; Registers used:
  2693 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2694 ;; Tracked objects:
  2695 ;;		On entry : 0/0
  2696 ;;		On exit  : 0/0
  2697 ;;		Unchanged: 0/0
  2698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2700 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2701 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2702 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2703 ;;Total ram usage:       16 bytes
  2704 ;; Hardware stack levels used:    1
  2705 ;; Hardware stack levels required when called:    9
  2706 ;; This function calls:
  2707 ;;		_I2C_Send
  2708 ;;		_RTC_getOperatingTime
  2709 ;;		_RTC_startOperation
  2710 ;;		_clearing
  2711 ;;		_hibernate
  2712 ;;		_inputEntry
  2713 ;;		_lcdInst
  2714 ;;		_packaging
  2715 ;;		_pollKeypad
  2716 ;;		_printStringLCD
  2717 ;;		_printf
  2718 ;;		_putch
  2719 ;;		_viewLogs
  2720 ;; This function is called by:
  2721 ;;		_main
  2722 ;; This function uses a non-reentrant model
  2723 ;;
  2724                           
  2725                           	psect	text2
  2726  001BE2                     __ptext2:
  2727                           	opt stack 0
  2728  001BE2                     _mainMenu:
  2729                           	opt stack 21
  2730                           
  2731                           ;menu.c: 175: int pressed;
  2732                           ;menu.c: 176: int needToPrint = 1;
  2733                           
  2734                           ;incstack = 0
  2735  001BE2  0E00               	movlw	0
  2736  001BE4  0100               	movlb	0	; () banked
  2737  001BE6  6FD6               	movwf	(mainMenu@needToPrint+1)& (0+255),b
  2738  001BE8  0E01               	movlw	1
  2739  001BEA  6FD5               	movwf	mainMenu@needToPrint& (0+255),b
  2740  001BEC                     
  2741                           ;menu.c: 179: if (needToPrint) {
  2742                           
  2743                           ; BSR set to: 0
  2744  001BEC  0100               	movlb	0	; () banked
  2745  001BEE  51D5               	movf	mainMenu@needToPrint& (0+255),w,b
  2746  001BF0  11D6               	iorwf	(mainMenu@needToPrint+1)& (0+255),w,b
  2747  001BF2  B4D8               	btfsc	status,2,c
  2748  001BF4  D00B               	goto	l435
  2749                           
  2750                           ; BSR set to: 0
  2751                           ;menu.c: 180: printStringLCD("0:Sleep 1:Begin \n2: View Logs");
  2752  001BF6  0E43               	movlw	low STR_19
  2753  001BF8  6F86               	movwf	printStringLCD@string& (0+255),b
  2754  001BFA  0EFE               	movlw	high STR_19
  2755  001BFC  6F87               	movwf	(printStringLCD@string+1)& (0+255),b
  2756  001BFE  ECBE  F00F         	call	_printStringLCD	;wreg free
  2757                           
  2758                           ;menu.c: 181: needToPrint = 0;
  2759  001C02  0E00               	movlw	0
  2760  001C04  0100               	movlb	0	; () banked
  2761  001C06  6FD6               	movwf	(mainMenu@needToPrint+1)& (0+255),b
  2762  001C08  0E00               	movlw	0
  2763  001C0A  6FD5               	movwf	mainMenu@needToPrint& (0+255),b
  2764  001C0C                     l435:
  2765                           
  2766                           ; BSR set to: 0
  2767                           ;menu.c: 182: }
  2768                           ;menu.c: 183: pressed = pollKeypad();
  2769                           
  2770                           ; BSR set to: 0
  2771  001C0C  ECE0  F018         	call	_pollKeypad	;wreg free
  2772  001C10  0100               	movlb	0	; () banked
  2773  001C12  6FCB               	movwf	??_mainMenu& (0+255),b
  2774  001C14  51CB               	movf	??_mainMenu& (0+255),w,b
  2775  001C16  6FD7               	movwf	mainMenu@pressed& (0+255),b
  2776  001C18  6BD8               	clrf	(mainMenu@pressed+1)& (0+255),b
  2777                           
  2778                           ; BSR set to: 0
  2779                           ;menu.c: 184: putch(pressed);
  2780  001C1A  51D7               	movf	mainMenu@pressed& (0+255),w,b
  2781  001C1C  EC77  F019         	call	_putch
  2782                           
  2783                           ;menu.c: 185: if (pressed - 48 == 0) {
  2784  001C20  0ED0               	movlw	208
  2785  001C22  0100               	movlb	0	; () banked
  2786  001C24  6FCB               	movwf	??_mainMenu& (0+255),b
  2787  001C26  0EFF               	movlw	255
  2788  001C28  6FCC               	movwf	(??_mainMenu+1)& (0+255),b
  2789  001C2A  C0D7  F0CD         	movff	mainMenu@pressed,??_mainMenu+2
  2790  001C2E  C0D8  F0CE         	movff	mainMenu@pressed+1,??_mainMenu+3
  2791  001C32  51CB               	movf	??_mainMenu& (0+255),w,b
  2792  001C34  27CD               	addwf	(??_mainMenu+2)& (0+255),f,b
  2793  001C36  51CC               	movf	(??_mainMenu+1)& (0+255),w,b
  2794  001C38  23CE               	addwfc	(??_mainMenu+3)& (0+255),f,b
  2795  001C3A  51CD               	movf	(??_mainMenu+2)& (0+255),w,b
  2796  001C3C  11CE               	iorwf	(??_mainMenu+3)& (0+255),w,b
  2797  001C3E  A4D8               	btfss	status,2,c
  2798  001C40  D003               	goto	l436
  2799                           
  2800                           ; BSR set to: 0
  2801                           ;menu.c: 186: hibernate();
  2802  001C42  EC8B  F018         	call	_hibernate	;wreg free
  2803  001C46  D7CD               	goto	_mainMenu
  2804  001C48                     l436:
  2805                           
  2806                           ; BSR set to: 0
  2807                           
  2808                           ; BSR set to: 0
  2809  001C48  0ED0               	movlw	208
  2810  001C4A  6FCB               	movwf	??_mainMenu& (0+255),b
  2811  001C4C  0EFF               	movlw	255
  2812  001C4E  6FCC               	movwf	(??_mainMenu+1)& (0+255),b
  2813  001C50  C0D7  F0CD         	movff	mainMenu@pressed,??_mainMenu+2
  2814  001C54  C0D8  F0CE         	movff	mainMenu@pressed+1,??_mainMenu+3
  2815  001C58  51CB               	movf	??_mainMenu& (0+255),w,b
  2816  001C5A  27CD               	addwf	(??_mainMenu+2)& (0+255),f,b
  2817  001C5C  51CC               	movf	(??_mainMenu+1)& (0+255),w,b
  2818  001C5E  23CE               	addwfc	(??_mainMenu+3)& (0+255),f,b
  2819  001C60  05CD               	decf	(??_mainMenu+2)& (0+255),w,b
  2820  001C62  11CE               	iorwf	(??_mainMenu+3)& (0+255),w,b
  2821  001C64  A4D8               	btfss	status,2,c
  2822  001C66  D175               	goto	l438
  2823                           
  2824                           ; BSR set to: 0
  2825                           ;menu.c: 189: inputEntry();
  2826  001C68  EC09  F000         	call	_inputEntry	;wreg free
  2827                           
  2828                           ;menu.c: 190: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2829  001C6C  0E01               	movlw	1
  2830  001C6E  EC83  F019         	call	_lcdInst
  2831  001C72  0EC3               	movlw	195
  2832  001C74  0100               	movlb	0	; () banked
  2833  001C76  6FCB               	movwf	??_mainMenu& (0+255),b
  2834  001C78  0ECD               	movlw	205
  2835  001C7A                     u7707:
  2836  001C7A  2EE8               	decfsz	wreg,f,c
  2837  001C7C  D7FE               	bra	u7707
  2838  001C7E  2FCB               	decfsz	??_mainMenu& (0+255),f,b
  2839  001C80  D7FC               	bra	u7707
  2840                           
  2841                           ;menu.c: 191: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2842  001C82  0E80               	movlw	128
  2843  001C84  EC83  F019         	call	_lcdInst
  2844  001C88  0E41               	movlw	65
  2845  001C8A  0100               	movlb	0	; () banked
  2846  001C8C  6FCB               	movwf	??_mainMenu& (0+255),b
  2847  001C8E  0EEE               	movlw	238
  2848  001C90                     u7717:
  2849  001C90  2EE8               	decfsz	wreg,f,c
  2850  001C92  D7FE               	bra	u7717
  2851  001C94  2FCB               	decfsz	??_mainMenu& (0+255),f,b
  2852  001C96  D7FC               	bra	u7717
  2853  001C98  F000               	nop	
  2854                           
  2855                           ;menu.c: 192: printf("Press 1 to start");
  2856  001C9A  0E12               	movlw	low STR_20
  2857  001C9C  0100               	movlb	0	; () banked
  2858  001C9E  6FA8               	movwf	printf@f& (0+255),b
  2859  001CA0  0EFF               	movlw	high STR_20
  2860  001CA2  6FA9               	movwf	(printf@f+1)& (0+255),b
  2861  001CA4  ECAA  F018         	call	_printf	;wreg free
  2862                           
  2863                           ;menu.c: 193: lcdInst(0xC0);;
  2864  001CA8  0EC0               	movlw	192
  2865  001CAA  EC83  F019         	call	_lcdInst
  2866                           
  2867                           ;menu.c: 194: printf("packaging");
  2868  001CAE  0EE4               	movlw	low (STR_22+9)
  2869  001CB0  0100               	movlb	0	; () banked
  2870  001CB2  6FA8               	movwf	printf@f& (0+255),b
  2871  001CB4  0EFE               	movlw	high (STR_22+9)
  2872  001CB6  6FA9               	movwf	(printf@f+1)& (0+255),b
  2873  001CB8  ECAA  F018         	call	_printf	;wreg free
  2874                           
  2875                           ;menu.c: 195: int startPress = pollKeypad();
  2876  001CBC  ECE0  F018         	call	_pollKeypad	;wreg free
  2877  001CC0  D002               	goto	L1
  2878  001CC2                     
  2879                           ; BSR set to: 0
  2880                           ;menu.c: 197: startPress = pollKeypad();
  2881                           
  2882                           ; BSR set to: 0
  2883  001CC2  ECE0  F018         	call	_pollKeypad	;wreg free
  2884  001CC6                     L1:
  2885  001CC6  0100               	movlb	0	; () banked
  2886  001CC8  6FCB               	movwf	??_mainMenu& (0+255),b
  2887  001CCA  51CB               	movf	??_mainMenu& (0+255),w,b
  2888  001CCC  6FD3               	movwf	mainMenu@startPress& (0+255),b
  2889  001CCE  6BD4               	clrf	(mainMenu@startPress+1)& (0+255),b
  2890                           
  2891                           ; BSR set to: 0
  2892                           
  2893                           ; BSR set to: 0
  2894  001CD0  0ED0               	movlw	208
  2895  001CD2  6FCB               	movwf	??_mainMenu& (0+255),b
  2896  001CD4  0EFF               	movlw	255
  2897  001CD6  6FCC               	movwf	(??_mainMenu+1)& (0+255),b
  2898  001CD8  C0D3  F0CD         	movff	mainMenu@startPress,??_mainMenu+2
  2899  001CDC  C0D4  F0CE         	movff	mainMenu@startPress+1,??_mainMenu+3
  2900  001CE0  51CB               	movf	??_mainMenu& (0+255),w,b
  2901  001CE2  27CD               	addwf	(??_mainMenu+2)& (0+255),f,b
  2902  001CE4  51CC               	movf	(??_mainMenu+1)& (0+255),w,b
  2903  001CE6  23CE               	addwfc	(??_mainMenu+3)& (0+255),f,b
  2904  001CE8  05CD               	decf	(??_mainMenu+2)& (0+255),w,b
  2905  001CEA  11CE               	iorwf	(??_mainMenu+3)& (0+255),w,b
  2906  001CEC  A4D8               	btfss	status,2,c
  2907  001CEE  D7E9               	goto	l440
  2908                           
  2909                           ; BSR set to: 0
  2910                           ;menu.c: 198: }
  2911                           ;menu.c: 199: RTC_startOperation();
  2912                           
  2913                           ; BSR set to: 0
  2914  001CF0  EC63  F016         	call	_RTC_startOperation	;wreg free
  2915                           
  2916                           ;menu.c: 200: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2917  001CF4  0E01               	movlw	1
  2918  001CF6  EC83  F019         	call	_lcdInst
  2919  001CFA  0EC3               	movlw	195
  2920  001CFC  0100               	movlb	0	; () banked
  2921  001CFE  6FCB               	movwf	??_mainMenu& (0+255),b
  2922  001D00  0ECD               	movlw	205
  2923  001D02                     u7727:
  2924  001D02  2EE8               	decfsz	wreg,f,c
  2925  001D04  D7FE               	bra	u7727
  2926  001D06  2FCB               	decfsz	??_mainMenu& (0+255),f,b
  2927  001D08  D7FC               	bra	u7727
  2928                           
  2929                           ;menu.c: 201: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2930  001D0A  0E80               	movlw	128
  2931  001D0C  EC83  F019         	call	_lcdInst
  2932  001D10  0E41               	movlw	65
  2933  001D12  0100               	movlb	0	; () banked
  2934  001D14  6FCB               	movwf	??_mainMenu& (0+255),b
  2935  001D16  0EEE               	movlw	238
  2936  001D18                     u7737:
  2937  001D18  2EE8               	decfsz	wreg,f,c
  2938  001D1A  D7FE               	bra	u7737
  2939  001D1C  2FCB               	decfsz	??_mainMenu& (0+255),f,b
  2940  001D1E  D7FC               	bra	u7737
  2941  001D20  F000               	nop	
  2942                           
  2943                           ;menu.c: 202: printf("Starting packaging");
  2944  001D22  0EDB               	movlw	low STR_22
  2945  001D24  0100               	movlb	0	; () banked
  2946  001D26  6FA8               	movwf	printf@f& (0+255),b
  2947  001D28  0EFE               	movlw	high STR_22
  2948  001D2A  6FA9               	movwf	(printf@f+1)& (0+255),b
  2949  001D2C  ECAA  F018         	call	_printf	;wreg free
  2950                           
  2951                           ;menu.c: 203: I2C_Send(nanoAddr, "\1Starting packaging\0");
  2952  001D30  0EC6               	movlw	low STR_23
  2953  001D32  0100               	movlb	0	; () banked
  2954  001D34  6F83               	movwf	I2C_Send@data& (0+255),b
  2955  001D36  0EFE               	movlw	high STR_23
  2956  001D38  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  2957  001D3A  0E3F               	movlw	low _nanoAddr
  2958  001D3C  6EF6               	movwf	tblptrl,c
  2959  001D3E                     	if	1	;There is more than 1 active tblptr byte
  2960  001D3E  0EFC               	movlw	high _nanoAddr
  2961  001D40  6EF7               	movwf	tblptrh,c
  2962  001D42                     	endif
  2963  001D42                     	if	1	;There are 3 active tblptr bytes
  2964  001D42  0E00               	movlw	low (_nanoAddr shr (0+16))
  2965  001D44  6EF8               	movwf	tblptru,c
  2966  001D46                     	endif
  2967  001D46  0008               	tblrd		*
  2968  001D48  50F5               	movf	tablat,w,c
  2969  001D4A  EC83  F015         	call	_I2C_Send
  2970                           
  2971                           ;menu.c: 204: packaging();
  2972  001D4E  EC38  F00A         	call	_packaging	;wreg free
  2973                           
  2974                           ;menu.c: 205: clearing();
  2975  001D52  ECB3  F003         	call	_clearing	;wreg free
  2976                           
  2977                           ;menu.c: 206: long operationTime = RTC_getOperatingTime();
  2978  001D56  ECCE  F012         	call	_RTC_getOperatingTime	;wreg free
  2979  001D5A  0100               	movlb	0	; () banked
  2980  001D5C  C086  F0CF         	movff	?_RTC_getOperatingTime,mainMenu@operationTime
  2981  001D60  C087  F0D0         	movff	?_RTC_getOperatingTime+1,mainMenu@operationTime+1
  2982  001D64  0E00               	movlw	0
  2983  001D66  BFD0               	btfsc	(mainMenu@operationTime+1)& (0+255),7,b
  2984  001D68  0EFF               	movlw	-1
  2985  001D6A  6FD1               	movwf	(mainMenu@operationTime+2)& (0+255),b
  2986  001D6C  6FD2               	movwf	(mainMenu@operationTime+3)& (0+255),b
  2987                           
  2988                           ; BSR set to: 0
  2989                           ;menu.c: 208: printf("Summary:");
  2990  001D6E  0EE5               	movlw	low STR_24
  2991  001D70  6FA8               	movwf	printf@f& (0+255),b
  2992  001D72  0EFF               	movlw	high STR_24
  2993  001D74  6FA9               	movwf	(printf@f+1)& (0+255),b
  2994  001D76  ECAA  F018         	call	_printf	;wreg free
  2995                           
  2996                           ;menu.c: 209: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2997  001D7A  0E33               	movlw	51
  2998  001D7C  0100               	movlb	0	; () banked
  2999  001D7E  6FCC               	movwf	(??_mainMenu+1)& (0+255),b
  3000  001D80  0EBB               	movlw	187
  3001  001D82  6FCB               	movwf	??_mainMenu& (0+255),b
  3002  001D84  0EDF               	movlw	223
  3003  001D86                     u7747:
  3004  001D86  2EE8               	decfsz	wreg,f,c
  3005  001D88  D7FE               	bra	u7747
  3006  001D8A  2FCB               	decfsz	??_mainMenu& (0+255),f,b
  3007  001D8C  D7FC               	bra	u7747
  3008  001D8E  2FCC               	decfsz	(??_mainMenu+1)& (0+255),f,b
  3009  001D90  D7FA               	bra	u7747
  3010  001D92  D000               	nop2	
  3011  001D94                     
  3012                           ;menu.c: 212: for (i = 0; i < 8; i++) {
  3013  001D94  0E00               	movlw	0
  3014  001D96  0100               	movlb	0	; () banked
  3015  001D98  6FDA               	movwf	(mainMenu@i+1)& (0+255),b
  3016  001D9A  0E00               	movlw	0
  3017  001D9C  6FD9               	movwf	mainMenu@i& (0+255),b
  3018  001D9E                     l6057:
  3019                           
  3020                           ; BSR set to: 0
  3021  001D9E  BFDA               	btfsc	(mainMenu@i+1)& (0+255),7,b
  3022  001DA0  D006               	goto	l443
  3023  001DA2  51DA               	movf	(mainMenu@i+1)& (0+255),w,b
  3024  001DA4  E155               	bnz	l6075
  3025  001DA6  0E08               	movlw	8
  3026  001DA8  5DD9               	subwf	mainMenu@i& (0+255),w,b
  3027  001DAA  B0D8               	btfsc	status,0,c
  3028  001DAC  D051               	goto	u7640
  3029  001DAE                     l443:
  3030                           
  3031                           ; BSR set to: 0
  3032                           ;menu.c: 213: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3033                           
  3034                           ; BSR set to: 0
  3035  001DAE  0E01               	movlw	1
  3036  001DB0  EC83  F019         	call	_lcdInst
  3037  001DB4  0EC3               	movlw	195
  3038  001DB6  0100               	movlb	0	; () banked
  3039  001DB8  6FCB               	movwf	??_mainMenu& (0+255),b
  3040  001DBA  0ECD               	movlw	205
  3041  001DBC                     u7757:
  3042  001DBC  2EE8               	decfsz	wreg,f,c
  3043  001DBE  D7FE               	bra	u7757
  3044  001DC0  2FCB               	decfsz	??_mainMenu& (0+255),f,b
  3045  001DC2  D7FC               	bra	u7757
  3046                           
  3047                           ;menu.c: 214: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3048  001DC4  0E80               	movlw	128
  3049  001DC6  EC83  F019         	call	_lcdInst
  3050  001DCA  0E41               	movlw	65
  3051  001DCC  0100               	movlb	0	; () banked
  3052  001DCE  6FCB               	movwf	??_mainMenu& (0+255),b
  3053  001DD0  0EEE               	movlw	238
  3054  001DD2                     u7767:
  3055  001DD2  2EE8               	decfsz	wreg,f,c
  3056  001DD4  D7FE               	bra	u7767
  3057  001DD6  2FCB               	decfsz	??_mainMenu& (0+255),f,b
  3058  001DD8  D7FC               	bra	u7767
  3059  001DDA  F000               	nop	
  3060                           
  3061                           ;menu.c: 215: printf("C%d: %s x%d", i+1, fSLookup[params.toFill[i]], params.setMultiple[
      +                          i]);
  3062  001DDC  0ECE               	movlw	low STR_25
  3063  001DDE  0100               	movlb	0	; () banked
  3064  001DE0  6FA8               	movwf	printf@f& (0+255),b
  3065  001DE2  0EFF               	movlw	high STR_25
  3066  001DE4  6FA9               	movwf	(printf@f+1)& (0+255),b
  3067  001DE6  0E01               	movlw	1
  3068  001DE8  25D9               	addwf	mainMenu@i& (0+255),w,b
  3069  001DEA  6FAA               	movwf	(?_printf+2)& (0+255),b
  3070  001DEC  0E00               	movlw	0
  3071  001DEE  21DA               	addwfc	(mainMenu@i+1)& (0+255),w,b
  3072  001DF0  6FAB               	movwf	(?_printf+3)& (0+255),b
  3073  001DF2  0EBE               	movlw	low (_params+2)
  3074  001DF4  25D9               	addwf	mainMenu@i& (0+255),w,b
  3075  001DF6  6ED9               	movwf	fsr2l,c
  3076  001DF8  0E01               	movlw	high (_params+2)
  3077  001DFA  21DA               	addwfc	(mainMenu@i+1)& (0+255),w,b
  3078  001DFC  6EDA               	movwf	fsr2h,c
  3079  001DFE  50DF               	movf	indf2,w,c
  3080  001E00  6FCB               	movwf	??_mainMenu& (0+255),b
  3081  001E02  51CB               	movf	??_mainMenu& (0+255),w,b
  3082  001E04  0D05               	mullw	5
  3083  001E06  0E00               	movlw	low _fSLookup
  3084  001E08  24F3               	addwf	prodl,w,c
  3085  001E0A  6FAC               	movwf	(?_printf+4)& (0+255),b
  3086  001E0C  0E02               	movlw	high _fSLookup
  3087  001E0E  20F4               	addwfc	prodh,w,c
  3088  001E10  6FAD               	movwf	(?_printf+5)& (0+255),b
  3089  001E12  90D8               	bcf	status,0,c
  3090  001E14  35D9               	rlcf	mainMenu@i& (0+255),w,b
  3091  001E16  6ED9               	movwf	fsr2l,c
  3092  001E18  35DA               	rlcf	(mainMenu@i+1)& (0+255),w,b
  3093  001E1A  6EDA               	movwf	fsr2h,c
  3094  001E1C  0EC6               	movlw	low (_params+10)
  3095  001E1E  26D9               	addwf	fsr2l,f,c
  3096  001E20  0E01               	movlw	high (_params+10)
  3097  001E22  22DA               	addwfc	fsr2h,f,c
  3098  001E24  CFDE F0AE          	movff	postinc2,?_printf+6
  3099  001E28  CFDD F0AF          	movff	postdec2,?_printf+7
  3100  001E2C  ECAA  F018         	call	_printf	;wreg free
  3101                           
  3102                           ;menu.c: 216: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3103  001E30  0E66               	movlw	102
  3104  001E32  0100               	movlb	0	; () banked
  3105  001E34  6FCC               	movwf	(??_mainMenu+1)& (0+255),b
  3106  001E36  0E76               	movlw	118
  3107  001E38  6FCB               	movwf	??_mainMenu& (0+255),b
  3108  001E3A  0EC1               	movlw	193
  3109  001E3C                     u7777:
  3110  001E3C  2EE8               	decfsz	wreg,f,c
  3111  001E3E  D7FE               	bra	u7777
  3112  001E40  2FCB               	decfsz	??_mainMenu& (0+255),f,b
  3113  001E42  D7FC               	bra	u7777
  3114  001E44  2FCC               	decfsz	(??_mainMenu+1)& (0+255),f,b
  3115  001E46  D7FA               	bra	u7777
  3116  001E48  0100               	movlb	0	; () banked
  3117  001E4A  4BD9               	infsnz	mainMenu@i& (0+255),f,b
  3118  001E4C  2BDA               	incf	(mainMenu@i+1)& (0+255),f,b
  3119  001E4E  D7A7               	goto	l6057
  3120  001E50                     u7640:
  3121  001E50                     l6075:
  3122                           
  3123                           ; BSR set to: 0
  3124                           ;menu.c: 217: }
  3125                           ;menu.c: 219: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3126  001E50  0E01               	movlw	1
  3127  001E52  EC83  F019         	call	_lcdInst
  3128  001E56  0EC3               	movlw	195
  3129  001E58  0100               	movlb	0	; () banked
  3130  001E5A  6FCB               	movwf	??_mainMenu& (0+255),b
  3131  001E5C  0ECD               	movlw	205
  3132  001E5E                     u7787:
  3133  001E5E  2EE8               	decfsz	wreg,f,c
  3134  001E60  D7FE               	bra	u7787
  3135  001E62  2FCB               	decfsz	??_mainMenu& (0+255),f,b
  3136  001E64  D7FC               	bra	u7787
  3137                           
  3138                           ;menu.c: 220: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3139  001E66  0E80               	movlw	128
  3140  001E68  EC83  F019         	call	_lcdInst
  3141  001E6C  0E41               	movlw	65
  3142  001E6E  0100               	movlb	0	; () banked
  3143  001E70  6FCB               	movwf	??_mainMenu& (0+255),b
  3144  001E72  0EEE               	movlw	238
  3145  001E74                     u7797:
  3146  001E74  2EE8               	decfsz	wreg,f,c
  3147  001E76  D7FE               	bra	u7797
  3148  001E78  2FCB               	decfsz	??_mainMenu& (0+255),f,b
  3149  001E7A  D7FC               	bra	u7797
  3150  001E7C  F000               	nop	
  3151                           
  3152                           ;menu.c: 221: printf("Remaining:");
  3153  001E7E  0EDA               	movlw	low STR_26
  3154  001E80  0100               	movlb	0	; () banked
  3155  001E82  6FA8               	movwf	printf@f& (0+255),b
  3156  001E84  0EFF               	movlw	high STR_26
  3157  001E86  6FA9               	movwf	(printf@f+1)& (0+255),b
  3158  001E88  ECAA  F018         	call	_printf	;wreg free
  3159                           
  3160                           ;menu.c: 222: lcdInst(0xC0);;
  3161  001E8C  0EC0               	movlw	192
  3162  001E8E  EC83  F019         	call	_lcdInst
  3163                           
  3164                           ;menu.c: 223: printf("B%d N%d S%d W%d", extras.b, extras.n, extras.s, extras.w);
  3165  001E92  0E67               	movlw	low STR_27
  3166  001E94  0100               	movlb	0	; () banked
  3167  001E96  6FA8               	movwf	printf@f& (0+255),b
  3168  001E98  0EFF               	movlw	high STR_27
  3169  001E9A  6FA9               	movwf	(printf@f+1)& (0+255),b
  3170  001E9C  C0E4  F0AA         	movff	_extras,?_printf+2
  3171  001EA0  C0E5  F0AB         	movff	_extras+1,?_printf+3
  3172  001EA4  C0E6  F0AC         	movff	_extras+2,?_printf+4
  3173  001EA8  C0E7  F0AD         	movff	_extras+3,?_printf+5
  3174  001EAC  C0E8  F0AE         	movff	_extras+4,?_printf+6
  3175  001EB0  C0E9  F0AF         	movff	_extras+5,?_printf+7
  3176  001EB4  C0EA  F0B0         	movff	_extras+6,?_printf+8
  3177  001EB8  C0EB  F0B1         	movff	_extras+7,?_printf+9
  3178  001EBC  ECAA  F018         	call	_printf	;wreg free
  3179                           
  3180                           ;menu.c: 224: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3181  001EC0  0E66               	movlw	102
  3182  001EC2  0100               	movlb	0	; () banked
  3183  001EC4  6FCC               	movwf	(??_mainMenu+1)& (0+255),b
  3184  001EC6  0E76               	movlw	118
  3185  001EC8  6FCB               	movwf	??_mainMenu& (0+255),b
  3186  001ECA  0EC1               	movlw	193
  3187  001ECC                     u7807:
  3188  001ECC  2EE8               	decfsz	wreg,f,c
  3189  001ECE  D7FE               	bra	u7807
  3190  001ED0  2FCB               	decfsz	??_mainMenu& (0+255),f,b
  3191  001ED2  D7FC               	bra	u7807
  3192  001ED4  2FCC               	decfsz	(??_mainMenu+1)& (0+255),f,b
  3193  001ED6  D7FA               	bra	u7807
  3194                           
  3195                           ;menu.c: 225: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3196  001ED8  0E01               	movlw	1
  3197  001EDA  EC83  F019         	call	_lcdInst
  3198  001EDE  0EC3               	movlw	195
  3199  001EE0  0100               	movlb	0	; () banked
  3200  001EE2  6FCB               	movwf	??_mainMenu& (0+255),b
  3201  001EE4  0ECD               	movlw	205
  3202  001EE6                     u7817:
  3203  001EE6  2EE8               	decfsz	wreg,f,c
  3204  001EE8  D7FE               	bra	u7817
  3205  001EEA  2FCB               	decfsz	??_mainMenu& (0+255),f,b
  3206  001EEC  D7FC               	bra	u7817
  3207                           
  3208                           ;menu.c: 226: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3209  001EEE  0E80               	movlw	128
  3210  001EF0  EC83  F019         	call	_lcdInst
  3211  001EF4  0E41               	movlw	65
  3212  001EF6  0100               	movlb	0	; () banked
  3213  001EF8  6FCB               	movwf	??_mainMenu& (0+255),b
  3214  001EFA  0EEE               	movlw	238
  3215  001EFC                     u7827:
  3216  001EFC  2EE8               	decfsz	wreg,f,c
  3217  001EFE  D7FE               	bra	u7827
  3218  001F00  2FCB               	decfsz	??_mainMenu& (0+255),f,b
  3219  001F02  D7FC               	bra	u7827
  3220  001F04  F000               	nop	
  3221                           
  3222                           ;menu.c: 227: printf("Time:");
  3223  001F06  0EF5               	movlw	low STR_28
  3224  001F08  0100               	movlb	0	; () banked
  3225  001F0A  6FA8               	movwf	printf@f& (0+255),b
  3226  001F0C  0EFF               	movlw	high STR_28
  3227  001F0E  6FA9               	movwf	(printf@f+1)& (0+255),b
  3228  001F10  ECAA  F018         	call	_printf	;wreg free
  3229                           
  3230                           ;menu.c: 228: lcdInst(0xC0);;
  3231  001F14  0EC0               	movlw	192
  3232  001F16  EC83  F019         	call	_lcdInst
  3233                           
  3234                           ;menu.c: 229: printf("%ld", operationTime);
  3235  001F1A  0EFB               	movlw	low STR_29
  3236  001F1C  0100               	movlb	0	; () banked
  3237  001F1E  6FA8               	movwf	printf@f& (0+255),b
  3238  001F20  0EFF               	movlw	high STR_29
  3239  001F22  6FA9               	movwf	(printf@f+1)& (0+255),b
  3240  001F24  C0CF  F0AA         	movff	mainMenu@operationTime,?_printf+2
  3241  001F28  C0D0  F0AB         	movff	mainMenu@operationTime+1,?_printf+3
  3242  001F2C  C0D1  F0AC         	movff	mainMenu@operationTime+2,?_printf+4
  3243  001F30  C0D2  F0AD         	movff	mainMenu@operationTime+3,?_printf+5
  3244  001F34  ECAA  F018         	call	_printf	;wreg free
  3245                           
  3246                           ;menu.c: 230: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3247  001F38  0E66               	movlw	102
  3248  001F3A  0100               	movlb	0	; () banked
  3249  001F3C  6FCC               	movwf	(??_mainMenu+1)& (0+255),b
  3250  001F3E  0E76               	movlw	118
  3251  001F40  6FCB               	movwf	??_mainMenu& (0+255),b
  3252  001F42  0EC1               	movlw	193
  3253  001F44                     u7837:
  3254  001F44  2EE8               	decfsz	wreg,f,c
  3255  001F46  D7FE               	bra	u7837
  3256  001F48  2FCB               	decfsz	??_mainMenu& (0+255),f,b
  3257  001F4A  D7FC               	bra	u7837
  3258  001F4C  2FCC               	decfsz	(??_mainMenu+1)& (0+255),f,b
  3259  001F4E  D7FA               	bra	u7837
  3260  001F50  D721               	goto	l442
  3261  001F52                     l438:
  3262  001F52  0ED0               	movlw	208
  3263  001F54  0100               	movlb	0	; () banked
  3264  001F56  6FCB               	movwf	??_mainMenu& (0+255),b
  3265  001F58  0EFF               	movlw	255
  3266  001F5A  6FCC               	movwf	(??_mainMenu+1)& (0+255),b
  3267  001F5C  C0D7  F0CD         	movff	mainMenu@pressed,??_mainMenu+2
  3268  001F60  C0D8  F0CE         	movff	mainMenu@pressed+1,??_mainMenu+3
  3269  001F64  51CB               	movf	??_mainMenu& (0+255),w,b
  3270  001F66  27CD               	addwf	(??_mainMenu+2)& (0+255),f,b
  3271  001F68  51CC               	movf	(??_mainMenu+1)& (0+255),w,b
  3272  001F6A  23CE               	addwfc	(??_mainMenu+3)& (0+255),f,b
  3273  001F6C  0E02               	movlw	2
  3274  001F6E  19CD               	xorwf	(??_mainMenu+2)& (0+255),w,b
  3275  001F70  11CE               	iorwf	(??_mainMenu+3)& (0+255),w,b
  3276  001F72  A4D8               	btfss	status,2,c
  3277  001F74  D63B               	goto	l434
  3278                           
  3279                           ; BSR set to: 0
  3280                           ;menu.c: 234: viewLogs();
  3281  001F76  EC0E  F019         	call	_viewLogs	;wreg free
  3282  001F7A  D633               	goto	_mainMenu
  3283  001F7C                     __end_of_mainMenu:
  3284                           	opt stack 0
  3285                           tblptru	equ	0xFF8
  3286                           tblptrh	equ	0xFF7
  3287                           tblptrl	equ	0xFF6
  3288                           tablat	equ	0xFF5
  3289                           prodh	equ	0xFF4
  3290                           prodl	equ	0xFF3
  3291                           intcon	equ	0xFF2
  3292                           postinc0	equ	0xFEE
  3293                           wreg	equ	0xFE8
  3294                           postdec1	equ	0xFE5
  3295                           fsr1l	equ	0xFE1
  3296                           indf2	equ	0xFDF
  3297                           postinc2	equ	0xFDE
  3298                           postdec2	equ	0xFDD
  3299                           fsr2h	equ	0xFDA
  3300                           fsr2l	equ	0xFD9
  3301                           status	equ	0xFD8
  3302                           
  3303 ;; *************** function _viewLogs *****************
  3304 ;; Defined at:
  3305 ;;		line 22 in file "menu.c"
  3306 ;; Parameters:    Size  Location     Type
  3307 ;;		None
  3308 ;; Auto vars:     Size  Location     Type
  3309 ;;  pressed         2   22[BANK0 ] int 
  3310 ;; Return value:  Size  Location     Type
  3311 ;;                  1    wreg      void 
  3312 ;; Registers used:
  3313 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3314 ;; Tracked objects:
  3315 ;;		On entry : 0/0
  3316 ;;		On exit  : 0/0
  3317 ;;		Unchanged: 0/0
  3318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3320 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3321 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3322 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3323 ;;Total ram usage:        3 bytes
  3324 ;; Hardware stack levels used:    1
  3325 ;; Hardware stack levels required when called:    7
  3326 ;; This function calls:
  3327 ;;		_pollKeypad
  3328 ;;		_printStringLCD
  3329 ;; This function is called by:
  3330 ;;		_mainMenu
  3331 ;; This function uses a non-reentrant model
  3332 ;;
  3333                           
  3334                           	psect	text3
  3335  00321C                     __ptext3:
  3336                           	opt stack 0
  3337  00321C                     _viewLogs:
  3338                           	opt stack 22
  3339                           
  3340                           ;menu.c: 23: printStringLCD("Not there yet\n* to return");
  3341                           
  3342                           ; BSR set to: 0
  3343                           ;incstack = 0
  3344  00321C  0E7D               	movlw	low STR_16
  3345  00321E  0100               	movlb	0	; () banked
  3346  003220  6F86               	movwf	printStringLCD@string& (0+255),b
  3347  003222  0EFE               	movlw	high STR_16
  3348  003224  6F87               	movwf	(printStringLCD@string+1)& (0+255),b
  3349  003226  ECBE  F00F         	call	_printStringLCD	;wreg free
  3350  00322A                     
  3351                           ;menu.c: 25: int pressed = pollKeypad();
  3352  00322A  ECE0  F018         	call	_pollKeypad	;wreg free
  3353  00322E  0100               	movlb	0	; () banked
  3354  003230  6F95               	movwf	??_viewLogs& (0+255),b
  3355  003232  5195               	movf	??_viewLogs& (0+255),w,b
  3356  003234  6F96               	movwf	viewLogs@pressed& (0+255),b
  3357  003236  6B97               	clrf	(viewLogs@pressed+1)& (0+255),b
  3358                           
  3359                           ; BSR set to: 0
  3360                           ;menu.c: 26: if (pressed == 42) return;
  3361  003238  0E2A               	movlw	42
  3362  00323A  1996               	xorwf	viewLogs@pressed& (0+255),w,b
  3363  00323C  1197               	iorwf	(viewLogs@pressed+1)& (0+255),w,b
  3364  00323E  B4D8               	btfsc	status,2,c
  3365  003240  0012               	return	
  3366  003242  D7F3               	goto	l360
  3367  003244                     __end_of_viewLogs:
  3368                           	opt stack 0
  3369                           tblptru	equ	0xFF8
  3370                           tblptrh	equ	0xFF7
  3371                           tblptrl	equ	0xFF6
  3372                           tablat	equ	0xFF5
  3373                           prodh	equ	0xFF4
  3374                           prodl	equ	0xFF3
  3375                           intcon	equ	0xFF2
  3376                           postinc0	equ	0xFEE
  3377                           wreg	equ	0xFE8
  3378                           postdec1	equ	0xFE5
  3379                           fsr1l	equ	0xFE1
  3380                           indf2	equ	0xFDF
  3381                           postinc2	equ	0xFDE
  3382                           postdec2	equ	0xFDD
  3383                           fsr2h	equ	0xFDA
  3384                           fsr2l	equ	0xFD9
  3385                           status	equ	0xFD8
  3386                           
  3387 ;; *************** function _packaging *****************
  3388 ;; Defined at:
  3389 ;;		line 116 in file "main.c"
  3390 ;; Parameters:    Size  Location     Type
  3391 ;;		None
  3392 ;; Auto vars:     Size  Location     Type
  3393 ;;  instr           2  118[BANK1 ] unsigned char [2]
  3394 ;;  msg3           50   34[BANK1 ] unsigned char [50]
  3395 ;;  msg            34    0[BANK1 ] unsigned char [34]
  3396 ;;  msg2           32   84[BANK1 ] unsigned char [32]
  3397 ;;  mult            2  122[BANK1 ] int 
  3398 ;;  set             2  120[BANK1 ] PTR unsigned char 
  3399 ;;		 -> fastenerMatrix(84), 
  3400 ;;  compartmentN    2  124[BANK1 ] int 
  3401 ;;  instr           2  116[BANK1 ] unsigned char [2]
  3402 ;; Return value:  Size  Location     Type
  3403 ;;                  1    wreg      void 
  3404 ;; Registers used:
  3405 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3406 ;; Tracked objects:
  3407 ;;		On entry : 0/0
  3408 ;;		On exit  : 0/0
  3409 ;;		Unchanged: 0/0
  3410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3412 ;;      Locals:         0       0     126       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3413 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3414 ;;      Totals:         0       6     126       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3415 ;;Total ram usage:      132 bytes
  3416 ;; Hardware stack levels used:    1
  3417 ;; Hardware stack levels required when called:    8
  3418 ;; This function calls:
  3419 ;;		_I2C_Send
  3420 ;;		___wmul
  3421 ;;		_lcdInst
  3422 ;;		_packageCompartment
  3423 ;;		_printf
  3424 ;;		_sprintf
  3425 ;; This function is called by:
  3426 ;;		_mainMenu
  3427 ;; This function uses a non-reentrant model
  3428 ;;
  3429                           
  3430                           	psect	text4
  3431  001470                     __ptext4:
  3432                           	opt stack 0
  3433  001470                     _packaging:
  3434                           	opt stack 21
  3435                           
  3436                           ;main.c: 117: int compartmentNum;
  3437                           ;main.c: 122: dispensed.b = 0;
  3438                           
  3439                           ; BSR set to: 0
  3440                           ;incstack = 0
  3441  001470  0E00               	movlw	0
  3442  001472  0100               	movlb	0	; () banked
  3443  001474  6FDD               	movwf	(_dispensed+1)& (0+255),b
  3444  001476  0E00               	movlw	0
  3445  001478  6FDC               	movwf	_dispensed& (0+255),b
  3446                           
  3447                           ;main.c: 123: dispensed.n = 0;
  3448  00147A  0E00               	movlw	0
  3449  00147C  6FDF               	movwf	(_dispensed+3)& (0+255),b
  3450  00147E  0E00               	movlw	0
  3451  001480  6FDE               	movwf	(_dispensed+2)& (0+255),b
  3452                           
  3453                           ;main.c: 124: dispensed.s = 0;
  3454  001482  0E00               	movlw	0
  3455  001484  6FE1               	movwf	(_dispensed+5)& (0+255),b
  3456  001486  0E00               	movlw	0
  3457  001488  6FE0               	movwf	(_dispensed+4)& (0+255),b
  3458                           
  3459                           ;main.c: 125: dispensed.w = 0;
  3460  00148A  0E00               	movlw	0
  3461  00148C  6FE3               	movwf	(_dispensed+7)& (0+255),b
  3462  00148E  0E00               	movlw	0
  3463  001490  6FE2               	movwf	(_dispensed+6)& (0+255),b
  3464                           
  3465                           ; BSR set to: 0
  3466                           ;main.c: 127: I2C_Send(nanoAddr, "\1Entered the packaging function\0");
  3467  001492  0E22               	movlw	low STR_7
  3468  001494  6F83               	movwf	I2C_Send@data& (0+255),b
  3469  001496  0EFE               	movlw	high STR_7
  3470  001498  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  3471  00149A  0E3F               	movlw	low _nanoAddr
  3472  00149C  6EF6               	movwf	tblptrl,c
  3473  00149E                     	if	1	;There is more than 1 active tblptr byte
  3474  00149E  0EFC               	movlw	high _nanoAddr
  3475  0014A0  6EF7               	movwf	tblptrh,c
  3476  0014A2                     	endif
  3477  0014A2                     	if	1	;There are 3 active tblptr bytes
  3478  0014A2  0E00               	movlw	low (_nanoAddr shr (0+16))
  3479  0014A4  6EF8               	movwf	tblptru,c
  3480  0014A6                     	endif
  3481  0014A6  0008               	tblrd		*
  3482  0014A8  50F5               	movf	tablat,w,c
  3483  0014AA  EC83  F015         	call	_I2C_Send
  3484                           
  3485                           ;main.c: 128: char instr[2] = {8, 0};
  3486  0014AE  C1BA  F174         	movff	packaging@F3226,packaging@instr
  3487  0014B2  C1BB  F175         	movff	packaging@F3226+1,packaging@instr+1
  3488                           
  3489                           ;main.c: 129: I2C_Send(nanoAddr, &instr);
  3490  0014B6  0E74               	movlw	low packaging@instr
  3491  0014B8  0100               	movlb	0	; () banked
  3492  0014BA  6F83               	movwf	I2C_Send@data& (0+255),b
  3493  0014BC  0E01               	movlw	high packaging@instr
  3494  0014BE  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  3495  0014C0  0E3F               	movlw	low _nanoAddr
  3496  0014C2  6EF6               	movwf	tblptrl,c
  3497  0014C4                     	if	1	;There is more than 1 active tblptr byte
  3498  0014C4  0EFC               	movlw	high _nanoAddr
  3499  0014C6  6EF7               	movwf	tblptrh,c
  3500  0014C8                     	endif
  3501  0014C8                     	if	1	;There are 3 active tblptr bytes
  3502  0014C8  0E00               	movlw	low (_nanoAddr shr (0+16))
  3503  0014CA  6EF8               	movwf	tblptru,c
  3504  0014CC                     	endif
  3505  0014CC  0008               	tblrd		*
  3506  0014CE  50F5               	movf	tablat,w,c
  3507  0014D0  EC83  F015         	call	_I2C_Send
  3508  0014D4  BA80               	btfsc	3968,5,c	;volatile
  3509  0014D6  D7FE               	goto	l122
  3510                           
  3511                           ;main.c: 133: for (compartmentNum = 8; compartmentNum > 0; compartmentNum--) {
  3512  0014D8  0E00               	movlw	0
  3513  0014DA  0101               	movlb	1	; () banked
  3514  0014DC  6F7D               	movwf	(packaging@compartmentNum+1)& (0+255),b
  3515  0014DE  0E08               	movlw	8
  3516  0014E0  6F7C               	movwf	packaging@compartmentNum& (0+255),b
  3517                           
  3518                           ; BSR set to: 1
  3519  0014E2  BF7D               	btfsc	(packaging@compartmentNum+1)& (0+255),7,b
  3520  0014E4  0012               	return	
  3521  0014E6  517D               	movf	(packaging@compartmentNum+1)& (0+255),w,b
  3522  0014E8  E103               	bnz	l5505
  3523  0014EA  057C               	decf	packaging@compartmentNum& (0+255),w,b
  3524  0014EC  A0D8               	btfss	status,0,c
  3525  0014EE  0012               	return	
  3526  0014F0                     l5505:
  3527                           
  3528                           ; BSR set to: 1
  3529                           ;main.c: 134: char msg[] = "\1Started packaging compartment x\0";
  3530  0014F0  EE21  F07E         	lfsr	2,packaging@F3228
  3531  0014F4  EE11  F000         	lfsr	1,packaging@msg
  3532  0014F8  0E21               	movlw	33
  3533  0014FA                     u6871:
  3534  0014FA  CFDB FFE3          	movff	plusw2,plusw1
  3535  0014FE  06E8               	decf	wreg,f,c
  3536  001500  E2FC               	bc	u6871
  3537                           
  3538                           ; BSR set to: 1
  3539                           ;main.c: 135: msg[31] = compartmentNum + 48;
  3540  001502  517C               	movf	packaging@compartmentNum& (0+255),w,b
  3541  001504  0F30               	addlw	48
  3542  001506  6F1F               	movwf	(packaging@msg+31)& (0+255),b
  3543                           
  3544                           ; BSR set to: 1
  3545                           ;main.c: 136: I2C_Send(nanoAddr, msg);
  3546  001508  0E00               	movlw	low packaging@msg
  3547  00150A  0100               	movlb	0	; () banked
  3548  00150C  6F83               	movwf	I2C_Send@data& (0+255),b
  3549  00150E  0E01               	movlw	high packaging@msg
  3550  001510  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  3551  001512  0E3F               	movlw	low _nanoAddr
  3552  001514  6EF6               	movwf	tblptrl,c
  3553  001516                     	if	1	;There is more than 1 active tblptr byte
  3554  001516  0EFC               	movlw	high _nanoAddr
  3555  001518  6EF7               	movwf	tblptrh,c
  3556  00151A                     	endif
  3557  00151A                     	if	1	;There are 3 active tblptr bytes
  3558  00151A  0E00               	movlw	low (_nanoAddr shr (0+16))
  3559  00151C  6EF8               	movwf	tblptru,c
  3560  00151E                     	endif
  3561  00151E  0008               	tblrd		*
  3562  001520  50F5               	movf	tablat,w,c
  3563  001522  EC83  F015         	call	_I2C_Send
  3564                           
  3565                           ;main.c: 138: if (params.toFill[compartmentNum-1] == 0) {
  3566  001526  0EFF               	movlw	255
  3567  001528  0100               	movlb	0	; () banked
  3568  00152A  6FC5               	movwf	??_packaging& (0+255),b
  3569  00152C  0EFF               	movlw	255
  3570  00152E  6FC6               	movwf	(??_packaging+1)& (0+255),b
  3571  001530  C17C  F0C7         	movff	packaging@compartmentNum,??_packaging+2
  3572  001534  C17D  F0C8         	movff	packaging@compartmentNum+1,??_packaging+3
  3573  001538  51C5               	movf	??_packaging& (0+255),w,b
  3574  00153A  27C7               	addwf	(??_packaging+2)& (0+255),f,b
  3575  00153C  51C6               	movf	(??_packaging+1)& (0+255),w,b
  3576  00153E  23C8               	addwfc	(??_packaging+3)& (0+255),f,b
  3577  001540  0EBE               	movlw	low (_params+2)
  3578  001542  25C7               	addwf	(??_packaging+2)& (0+255),w,b
  3579  001544  6ED9               	movwf	fsr2l,c
  3580  001546  0E01               	movlw	high (_params+2)
  3581  001548  21C8               	addwfc	(??_packaging+3)& (0+255),w,b
  3582  00154A  6EDA               	movwf	fsr2h,c
  3583  00154C  50DF               	movf	indf2,w,c
  3584  00154E  A4D8               	btfss	status,2,c
  3585  001550  D015               	goto	l128
  3586                           
  3587                           ; BSR set to: 0
  3588                           ;main.c: 141: char instr[] = {2, 0};
  3589  001552  C1B8  F176         	movff	packaging@F3230,packaging@instr_321
  3590  001556  C1B9  F177         	movff	packaging@F3230+1,packaging@instr_321+1
  3591                           
  3592                           ; BSR set to: 0
  3593                           ;main.c: 142: I2C_Send(nanoAddr, instr);
  3594  00155A  0E76               	movlw	low packaging@instr_321
  3595  00155C  6F83               	movwf	I2C_Send@data& (0+255),b
  3596  00155E  0E01               	movlw	high packaging@instr_321
  3597  001560  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  3598  001562  0E3F               	movlw	low _nanoAddr
  3599  001564  6EF6               	movwf	tblptrl,c
  3600  001566                     	if	1	;There is more than 1 active tblptr byte
  3601  001566  0EFC               	movlw	high _nanoAddr
  3602  001568  6EF7               	movwf	tblptrh,c
  3603  00156A                     	endif
  3604  00156A                     	if	1	;There are 3 active tblptr bytes
  3605  00156A  0E00               	movlw	low (_nanoAddr shr (0+16))
  3606  00156C  6EF8               	movwf	tblptru,c
  3607  00156E                     	endif
  3608  00156E  0008               	tblrd		*
  3609  001570  50F5               	movf	tablat,w,c
  3610  001572  EC83  F015         	call	_I2C_Send
  3611  001576  AA80               	btfss	3968,5,c	;volatile
  3612  001578  D151               	goto	l134
  3613  00157A  D7FD               	goto	l132
  3614  00157C                     l128:
  3615                           
  3616                           ;main.c: 145: };
  3617                           ;main.c: 146: char * set = fastenerMatrix[params.toFill[compartmentNum-1]];
  3618  00157C  0EFF               	movlw	255
  3619  00157E  0100               	movlb	0	; () banked
  3620  001580  6FC5               	movwf	??_packaging& (0+255),b
  3621  001582  0EFF               	movlw	255
  3622  001584  6FC6               	movwf	(??_packaging+1)& (0+255),b
  3623  001586  C17C  F0C7         	movff	packaging@compartmentNum,??_packaging+2
  3624  00158A  C17D  F0C8         	movff	packaging@compartmentNum+1,??_packaging+3
  3625  00158E  51C5               	movf	??_packaging& (0+255),w,b
  3626  001590  27C7               	addwf	(??_packaging+2)& (0+255),f,b
  3627  001592  51C6               	movf	(??_packaging+1)& (0+255),w,b
  3628  001594  23C8               	addwfc	(??_packaging+3)& (0+255),f,b
  3629  001596  0EBE               	movlw	low (_params+2)
  3630  001598  25C7               	addwf	(??_packaging+2)& (0+255),w,b
  3631  00159A  6ED9               	movwf	fsr2l,c
  3632  00159C  0E01               	movlw	high (_params+2)
  3633  00159E  21C8               	addwfc	(??_packaging+3)& (0+255),w,b
  3634  0015A0  6EDA               	movwf	fsr2h,c
  3635  0015A2  50DF               	movf	indf2,w,c
  3636  0015A4  6FC9               	movwf	(??_packaging+4)& (0+255),b
  3637  0015A6  51C9               	movf	(??_packaging+4)& (0+255),w,b
  3638  0015A8  0D04               	mullw	4
  3639  0015AA  0EAA               	movlw	low _fastenerMatrix
  3640  0015AC  24F3               	addwf	prodl,w,c
  3641  0015AE  0101               	movlb	1	; () banked
  3642  0015B0  6F78               	movwf	packaging@set& (0+255),b
  3643  0015B2  0EFD               	movlw	high _fastenerMatrix
  3644  0015B4  20F4               	addwfc	prodh,w,c
  3645  0015B6  6F79               	movwf	(packaging@set+1)& (0+255),b
  3646                           
  3647                           ; BSR set to: 1
  3648                           ;main.c: 147: char msg2[32];
  3649                           ;main.c: 148: int mult = params.setMultiple[compartmentNum - 1];
  3650  0015B8  0EFE               	movlw	254
  3651  0015BA  0100               	movlb	0	; () banked
  3652  0015BC  6FC5               	movwf	??_packaging& (0+255),b
  3653  0015BE  0EFF               	movlw	255
  3654  0015C0  6FC6               	movwf	(??_packaging+1)& (0+255),b
  3655  0015C2  C17C  F0C7         	movff	packaging@compartmentNum,??_packaging+2
  3656  0015C6  C17D  F0C8         	movff	packaging@compartmentNum+1,??_packaging+3
  3657  0015CA  90D8               	bcf	status,0,c
  3658  0015CC  37C7               	rlcf	(??_packaging+2)& (0+255),f,b
  3659  0015CE  37C8               	rlcf	(??_packaging+3)& (0+255),f,b
  3660  0015D0  51C5               	movf	??_packaging& (0+255),w,b
  3661  0015D2  27C7               	addwf	(??_packaging+2)& (0+255),f,b
  3662  0015D4  51C6               	movf	(??_packaging+1)& (0+255),w,b
  3663  0015D6  23C8               	addwfc	(??_packaging+3)& (0+255),f,b
  3664  0015D8  0EC6               	movlw	low (_params+10)
  3665  0015DA  25C7               	addwf	(??_packaging+2)& (0+255),w,b
  3666  0015DC  6ED9               	movwf	fsr2l,c
  3667  0015DE  0E01               	movlw	high (_params+10)
  3668  0015E0  21C8               	addwfc	(??_packaging+3)& (0+255),w,b
  3669  0015E2  6EDA               	movwf	fsr2h,c
  3670  0015E4  CFDE F17A          	movff	postinc2,packaging@mult
  3671  0015E8  CFDD F17B          	movff	postdec2,packaging@mult+1
  3672                           
  3673                           ; BSR set to: 0
  3674                           ;main.c: 149: sprintf(msg2, "\1B:%d N:%d S:%d W:%d\0", set[0]*mult, set[1]*mult, set[2]*
      +                          mult, set[3]*mult);
  3675  0015EC  0E54               	movlw	low packaging@msg2
  3676  0015EE  6FA8               	movwf	sprintf@wh& (0+255),b
  3677  0015F0  0E01               	movlw	high packaging@msg2
  3678  0015F2  6FA9               	movwf	(sprintf@wh+1)& (0+255),b
  3679  0015F4  0EB0               	movlw	low STR_8
  3680  0015F6  6FAA               	movwf	sprintf@f& (0+255),b
  3681  0015F8  0EFE               	movlw	high STR_8
  3682  0015FA  6FAB               	movwf	(sprintf@f+1)& (0+255),b
  3683  0015FC  C178  FFF6         	movff	packaging@set,tblptrl
  3684  001600  C179  FFF7         	movff	packaging@set+1,tblptrh
  3685  001604                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3686  001604  6AF8               	clrf	tblptru,c
  3687  001606                     	endif
  3688  001606                     	if	0	;tblptru may be non-zero
  3689  001606                     	endif
  3690  001606  0008               	tblrd		*
  3691  001608  50F5               	movf	tablat,w,c
  3692  00160A  6F80               	movwf	___wmul@multiplier& (0+255),b
  3693  00160C  6B81               	clrf	(___wmul@multiplier+1)& (0+255),b
  3694  00160E  C17A  F082         	movff	packaging@mult,___wmul@multiplicand
  3695  001612  C17B  F083         	movff	packaging@mult+1,___wmul@multiplicand+1
  3696  001616  EC22  F019         	call	___wmul	;wreg free
  3697  00161A  C080  F0AC         	movff	?___wmul,?_sprintf+4
  3698  00161E  C081  F0AD         	movff	?___wmul+1,?_sprintf+5
  3699  001622  0E01               	movlw	1
  3700  001624  0101               	movlb	1	; () banked
  3701  001626  2578               	addwf	packaging@set& (0+255),w,b
  3702  001628  0100               	movlb	0	; () banked
  3703  00162A  6FC5               	movwf	??_packaging& (0+255),b
  3704  00162C  0E00               	movlw	0
  3705  00162E  0101               	movlb	1	; () banked
  3706  001630  2179               	addwfc	(packaging@set+1)& (0+255),w,b
  3707  001632  0100               	movlb	0	; () banked
  3708  001634  6FC6               	movwf	(??_packaging+1)& (0+255),b
  3709  001636  C0C5  FFF6         	movff	??_packaging,tblptrl
  3710  00163A  C0C6  FFF7         	movff	??_packaging+1,tblptrh
  3711  00163E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3712  00163E  6AF8               	clrf	tblptru,c
  3713  001640                     	endif
  3714  001640                     	if	0	;tblptru may be non-zero
  3715  001640                     	endif
  3716  001640  0008               	tblrd		*
  3717  001642  50F5               	movf	tablat,w,c
  3718  001644  6F80               	movwf	___wmul@multiplier& (0+255),b
  3719  001646  6B81               	clrf	(___wmul@multiplier+1)& (0+255),b
  3720  001648  C17A  F082         	movff	packaging@mult,___wmul@multiplicand
  3721  00164C  C17B  F083         	movff	packaging@mult+1,___wmul@multiplicand+1
  3722  001650  EC22  F019         	call	___wmul	;wreg free
  3723  001654  C080  F0AE         	movff	?___wmul,?_sprintf+6
  3724  001658  C081  F0AF         	movff	?___wmul+1,?_sprintf+7
  3725  00165C  0E02               	movlw	2
  3726  00165E  0101               	movlb	1	; () banked
  3727  001660  2578               	addwf	packaging@set& (0+255),w,b
  3728  001662  0100               	movlb	0	; () banked
  3729  001664  6FC7               	movwf	(??_packaging+2)& (0+255),b
  3730  001666  0E00               	movlw	0
  3731  001668  0101               	movlb	1	; () banked
  3732  00166A  2179               	addwfc	(packaging@set+1)& (0+255),w,b
  3733  00166C  0100               	movlb	0	; () banked
  3734  00166E  6FC8               	movwf	(??_packaging+3)& (0+255),b
  3735  001670  C0C7  FFF6         	movff	??_packaging+2,tblptrl
  3736  001674  C0C8  FFF7         	movff	??_packaging+3,tblptrh
  3737  001678                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3738  001678  6AF8               	clrf	tblptru,c
  3739  00167A                     	endif
  3740  00167A                     	if	0	;tblptru may be non-zero
  3741  00167A                     	endif
  3742  00167A  0008               	tblrd		*
  3743  00167C  50F5               	movf	tablat,w,c
  3744  00167E  6F80               	movwf	___wmul@multiplier& (0+255),b
  3745  001680  6B81               	clrf	(___wmul@multiplier+1)& (0+255),b
  3746  001682  C17A  F082         	movff	packaging@mult,___wmul@multiplicand
  3747  001686  C17B  F083         	movff	packaging@mult+1,___wmul@multiplicand+1
  3748  00168A  EC22  F019         	call	___wmul	;wreg free
  3749  00168E  C080  F0B0         	movff	?___wmul,?_sprintf+8
  3750  001692  C081  F0B1         	movff	?___wmul+1,?_sprintf+9
  3751  001696  0E03               	movlw	3
  3752  001698  0101               	movlb	1	; () banked
  3753  00169A  2578               	addwf	packaging@set& (0+255),w,b
  3754  00169C  0100               	movlb	0	; () banked
  3755  00169E  6FC9               	movwf	(??_packaging+4)& (0+255),b
  3756  0016A0  0E00               	movlw	0
  3757  0016A2  0101               	movlb	1	; () banked
  3758  0016A4  2179               	addwfc	(packaging@set+1)& (0+255),w,b
  3759  0016A6  0100               	movlb	0	; () banked
  3760  0016A8  6FCA               	movwf	(??_packaging+5)& (0+255),b
  3761  0016AA  C0C9  FFF6         	movff	??_packaging+4,tblptrl
  3762  0016AE  C0CA  FFF7         	movff	??_packaging+5,tblptrh
  3763  0016B2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3764  0016B2  6AF8               	clrf	tblptru,c
  3765  0016B4                     	endif
  3766  0016B4                     	if	0	;tblptru may be non-zero
  3767  0016B4                     	endif
  3768  0016B4  0008               	tblrd		*
  3769  0016B6  50F5               	movf	tablat,w,c
  3770  0016B8  6F80               	movwf	___wmul@multiplier& (0+255),b
  3771  0016BA  6B81               	clrf	(___wmul@multiplier+1)& (0+255),b
  3772  0016BC  C17A  F082         	movff	packaging@mult,___wmul@multiplicand
  3773  0016C0  C17B  F083         	movff	packaging@mult+1,___wmul@multiplicand+1
  3774  0016C4  EC22  F019         	call	___wmul	;wreg free
  3775  0016C8  C080  F0B2         	movff	?___wmul,?_sprintf+10
  3776  0016CC  C081  F0B3         	movff	?___wmul+1,?_sprintf+11
  3777  0016D0  EC4A  F018         	call	_sprintf	;wreg free
  3778                           
  3779                           ;main.c: 150: I2C_Send(nanoAddr, msg2);
  3780  0016D4  0E54               	movlw	low packaging@msg2
  3781  0016D6  0100               	movlb	0	; () banked
  3782  0016D8  6F83               	movwf	I2C_Send@data& (0+255),b
  3783  0016DA  0E01               	movlw	high packaging@msg2
  3784  0016DC  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  3785  0016DE  0E3F               	movlw	low _nanoAddr
  3786  0016E0  6EF6               	movwf	tblptrl,c
  3787  0016E2                     	if	1	;There is more than 1 active tblptr byte
  3788  0016E2  0EFC               	movlw	high _nanoAddr
  3789  0016E4  6EF7               	movwf	tblptrh,c
  3790  0016E6                     	endif
  3791  0016E6                     	if	1	;There are 3 active tblptr bytes
  3792  0016E6  0E00               	movlw	low (_nanoAddr shr (0+16))
  3793  0016E8  6EF8               	movwf	tblptru,c
  3794  0016EA                     	endif
  3795  0016EA  0008               	tblrd		*
  3796  0016EC  50F5               	movf	tablat,w,c
  3797  0016EE  EC83  F015         	call	_I2C_Send
  3798                           
  3799                           ;main.c: 151: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3800  0016F2  0E01               	movlw	1
  3801  0016F4  EC83  F019         	call	_lcdInst
  3802  0016F8  0EC3               	movlw	195
  3803  0016FA  0100               	movlb	0	; () banked
  3804  0016FC  6FC5               	movwf	??_packaging& (0+255),b
  3805  0016FE  0ECD               	movlw	205
  3806  001700                     u7847:
  3807  001700  2EE8               	decfsz	wreg,f,c
  3808  001702  D7FE               	bra	u7847
  3809  001704  2FC5               	decfsz	??_packaging& (0+255),f,b
  3810  001706  D7FC               	bra	u7847
  3811                           
  3812                           ;main.c: 152: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3813  001708  0E80               	movlw	128
  3814  00170A  EC83  F019         	call	_lcdInst
  3815  00170E  0E41               	movlw	65
  3816  001710  0100               	movlb	0	; () banked
  3817  001712  6FC5               	movwf	??_packaging& (0+255),b
  3818  001714  0EEE               	movlw	238
  3819  001716                     u7857:
  3820  001716  2EE8               	decfsz	wreg,f,c
  3821  001718  D7FE               	bra	u7857
  3822  00171A  2FC5               	decfsz	??_packaging& (0+255),f,b
  3823  00171C  D7FC               	bra	u7857
  3824  00171E  F000               	nop	
  3825                           
  3826                           ;main.c: 153: printf("Compartment %d", compartmentNum);
  3827  001720  0E95               	movlw	low STR_9
  3828  001722  0100               	movlb	0	; () banked
  3829  001724  6FA8               	movwf	printf@f& (0+255),b
  3830  001726  0EFF               	movlw	high STR_9
  3831  001728  6FA9               	movwf	(printf@f+1)& (0+255),b
  3832  00172A  C17C  F0AA         	movff	packaging@compartmentNum,?_printf+2
  3833  00172E  C17D  F0AB         	movff	packaging@compartmentNum+1,?_printf+3
  3834  001732  ECAA  F018         	call	_printf	;wreg free
  3835                           
  3836                           ;main.c: 154: packageCompartment(set[0]*mult, set[1]*mult, set[2]*mult, set[3]*mult);
  3837  001736  0E01               	movlw	1
  3838  001738  0101               	movlb	1	; () banked
  3839  00173A  2578               	addwf	packaging@set& (0+255),w,b
  3840  00173C  0100               	movlb	0	; () banked
  3841  00173E  6FC5               	movwf	??_packaging& (0+255),b
  3842  001740  0E00               	movlw	0
  3843  001742  0101               	movlb	1	; () banked
  3844  001744  2179               	addwfc	(packaging@set+1)& (0+255),w,b
  3845  001746  0100               	movlb	0	; () banked
  3846  001748  6FC6               	movwf	(??_packaging+1)& (0+255),b
  3847  00174A  C0C5  FFF6         	movff	??_packaging,tblptrl
  3848  00174E  C0C6  FFF7         	movff	??_packaging+1,tblptrh
  3849  001752                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3850  001752  6AF8               	clrf	tblptru,c
  3851  001754                     	endif
  3852  001754                     	if	0	;tblptru may be non-zero
  3853  001754                     	endif
  3854  001754  0008               	tblrd		*
  3855  001756  50F5               	movf	tablat,w,c
  3856  001758  0101               	movlb	1	; () banked
  3857  00175A  037A               	mulwf	packaging@mult& (0+255),b
  3858  00175C  CFF3 F09D          	movff	prodl,packageCompartment@n
  3859  001760  0E02               	movlw	2
  3860  001762  2578               	addwf	packaging@set& (0+255),w,b
  3861  001764  0100               	movlb	0	; () banked
  3862  001766  6FC7               	movwf	(??_packaging+2)& (0+255),b
  3863  001768  0E00               	movlw	0
  3864  00176A  0101               	movlb	1	; () banked
  3865  00176C  2179               	addwfc	(packaging@set+1)& (0+255),w,b
  3866  00176E  0100               	movlb	0	; () banked
  3867  001770  6FC8               	movwf	(??_packaging+3)& (0+255),b
  3868  001772  C0C7  FFF6         	movff	??_packaging+2,tblptrl
  3869  001776  C0C8  FFF7         	movff	??_packaging+3,tblptrh
  3870  00177A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3871  00177A  6AF8               	clrf	tblptru,c
  3872  00177C                     	endif
  3873  00177C                     	if	0	;tblptru may be non-zero
  3874  00177C                     	endif
  3875  00177C  0008               	tblrd		*
  3876  00177E  50F5               	movf	tablat,w,c
  3877  001780  0101               	movlb	1	; () banked
  3878  001782  037A               	mulwf	packaging@mult& (0+255),b
  3879  001784  CFF3 F09E          	movff	prodl,packageCompartment@s
  3880  001788  0E03               	movlw	3
  3881  00178A  2578               	addwf	packaging@set& (0+255),w,b
  3882  00178C  0100               	movlb	0	; () banked
  3883  00178E  6FC9               	movwf	(??_packaging+4)& (0+255),b
  3884  001790  0E00               	movlw	0
  3885  001792  0101               	movlb	1	; () banked
  3886  001794  2179               	addwfc	(packaging@set+1)& (0+255),w,b
  3887  001796  0100               	movlb	0	; () banked
  3888  001798  6FCA               	movwf	(??_packaging+5)& (0+255),b
  3889  00179A  C0C9  FFF6         	movff	??_packaging+4,tblptrl
  3890  00179E  C0CA  FFF7         	movff	??_packaging+5,tblptrh
  3891  0017A2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3892  0017A2  6AF8               	clrf	tblptru,c
  3893  0017A4                     	endif
  3894  0017A4                     	if	0	;tblptru may be non-zero
  3895  0017A4                     	endif
  3896  0017A4  0008               	tblrd		*
  3897  0017A6  50F5               	movf	tablat,w,c
  3898  0017A8  0101               	movlb	1	; () banked
  3899  0017AA  037A               	mulwf	packaging@mult& (0+255),b
  3900  0017AC  CFF3 F09F          	movff	prodl,packageCompartment@w
  3901  0017B0  C178  FFF6         	movff	packaging@set,tblptrl
  3902  0017B4  C179  FFF7         	movff	packaging@set+1,tblptrh
  3903  0017B8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3904  0017B8  6AF8               	clrf	tblptru,c
  3905  0017BA                     	endif
  3906  0017BA                     	if	0	;tblptru may be non-zero
  3907  0017BA                     	endif
  3908  0017BA  0008               	tblrd		*
  3909  0017BC  50F5               	movf	tablat,w,c
  3910  0017BE  037A               	mulwf	packaging@mult& (0+255),b
  3911  0017C0  50F3               	movf	prodl,w,c
  3912  0017C2  EC42  F008         	call	_packageCompartment
  3913                           
  3914                           ;main.c: 155: char msg3[50];
  3915                           ;main.c: 156: sprintf(msg3, "\1Finished packaging compartment %d\0", compartmentNum);
  3916  0017C6  0E22               	movlw	low packaging@msg3
  3917  0017C8  0100               	movlb	0	; () banked
  3918  0017CA  6FA8               	movwf	sprintf@wh& (0+255),b
  3919  0017CC  0E01               	movlw	high packaging@msg3
  3920  0017CE  6FA9               	movwf	(sprintf@wh+1)& (0+255),b
  3921  0017D0  0EFE               	movlw	low STR_10
  3922  0017D2  6FAA               	movwf	sprintf@f& (0+255),b
  3923  0017D4  0EFD               	movlw	high STR_10
  3924  0017D6  6FAB               	movwf	(sprintf@f+1)& (0+255),b
  3925  0017D8  C17C  F0AC         	movff	packaging@compartmentNum,?_sprintf+4
  3926  0017DC  C17D  F0AD         	movff	packaging@compartmentNum+1,?_sprintf+5
  3927  0017E0  EC4A  F018         	call	_sprintf	;wreg free
  3928                           
  3929                           ;main.c: 157: I2C_Send(nanoAddr, msg3);
  3930  0017E4  0E22               	movlw	low packaging@msg3
  3931  0017E6  0100               	movlb	0	; () banked
  3932  0017E8  6F83               	movwf	I2C_Send@data& (0+255),b
  3933  0017EA  0E01               	movlw	high packaging@msg3
  3934  0017EC  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  3935  0017EE  0E3F               	movlw	low _nanoAddr
  3936  0017F0  6EF6               	movwf	tblptrl,c
  3937  0017F2                     	if	1	;There is more than 1 active tblptr byte
  3938  0017F2  0EFC               	movlw	high _nanoAddr
  3939  0017F4  6EF7               	movwf	tblptrh,c
  3940  0017F6                     	endif
  3941  0017F6                     	if	1	;There are 3 active tblptr bytes
  3942  0017F6  0E00               	movlw	low (_nanoAddr shr (0+16))
  3943  0017F8  6EF8               	movwf	tblptru,c
  3944  0017FA                     	endif
  3945  0017FA  0008               	tblrd		*
  3946  0017FC  50F5               	movf	tablat,w,c
  3947  0017FE  EC83  F015         	call	_I2C_Send
  3948                           
  3949                           ;main.c: 158: currentMode = WAITING;
  3950  001802  0E00               	movlw	0
  3951  001804  6E49               	movwf	_currentMode+1,c
  3952  001806  0E04               	movlw	4
  3953  001808  6E48               	movwf	_currentMode,c
  3954                           
  3955                           ;main.c: 159: _delay((unsigned long)((10)*(40000000/4000.0)));
  3956  00180A  0E82               	movlw	130
  3957  00180C  0100               	movlb	0	; () banked
  3958  00180E  6FC5               	movwf	??_packaging& (0+255),b
  3959  001810  0EDD               	movlw	221
  3960  001812                     u7867:
  3961  001812  2EE8               	decfsz	wreg,f,c
  3962  001814  D7FE               	bra	u7867
  3963  001816  2FC5               	decfsz	??_packaging& (0+255),f,b
  3964  001818  D7FC               	bra	u7867
  3965  00181A  D000               	nop2	
  3966  00181C                     l134:
  3967  00181C  0101               	movlb	1	; () banked
  3968  00181E  077C               	decf	packaging@compartmentNum& (0+255),f,b
  3969  001820  A0D8               	btfss	status,0,c
  3970  001822  077D               	decf	(packaging@compartmentNum+1)& (0+255),f,b
  3971                           
  3972                           ; BSR set to: 1
  3973  001824  BF7D               	btfsc	(packaging@compartmentNum+1)& (0+255),7,b
  3974  001826  0012               	return	
  3975  001828  517D               	movf	(packaging@compartmentNum+1)& (0+255),w,b
  3976  00182A  E101               	bnz	u6901
  3977  00182C  D65E               	goto	L2
  3978  00182E                     u6901:
  3979  00182E  D660               	goto	l124
  3980  001830                     __end_of_packaging:
  3981                           	opt stack 0
  3982                           tblptru	equ	0xFF8
  3983                           tblptrh	equ	0xFF7
  3984                           tblptrl	equ	0xFF6
  3985                           tablat	equ	0xFF5
  3986                           prodh	equ	0xFF4
  3987                           prodl	equ	0xFF3
  3988                           intcon	equ	0xFF2
  3989                           postinc0	equ	0xFEE
  3990                           wreg	equ	0xFE8
  3991                           postdec1	equ	0xFE5
  3992                           plusw1	equ	0xFE3
  3993                           fsr1l	equ	0xFE1
  3994                           indf2	equ	0xFDF
  3995                           postinc2	equ	0xFDE
  3996                           postdec2	equ	0xFDD
  3997                           plusw2	equ	0xFDB
  3998                           fsr2h	equ	0xFDA
  3999                           fsr2l	equ	0xFD9
  4000                           status	equ	0xFD8
  4001                           
  4002 ;; *************** function _sprintf *****************
  4003 ;; Defined at:
  4004 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprintf.c"
  4005 ;; Parameters:    Size  Location     Type
  4006 ;;  wh              2   40[BANK0 ] PTR unsigned char 
  4007 ;;		 -> packaging@msg3(50), packaging@msg2(32), 
  4008 ;;  f               2   42[BANK0 ] PTR const unsigned char 
  4009 ;;		 -> STR_10(36), STR_8(22), 
  4010 ;; Auto vars:     Size  Location     Type
  4011 ;;  pb              4   54[BANK0 ] struct __prbuf
  4012 ;;  ap              2   52[BANK0 ] PTR void [1]
  4013 ;;		 -> ?_sprintf(2), ?_printf(2), 
  4014 ;; Return value:  Size  Location     Type
  4015 ;;                  2   40[BANK0 ] int 
  4016 ;; Registers used:
  4017 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4018 ;; Tracked objects:
  4019 ;;		On entry : 0/0
  4020 ;;		On exit  : 0/0
  4021 ;;		Unchanged: 0/0
  4022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4023 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4024 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4026 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4027 ;;Total ram usage:       18 bytes
  4028 ;; Hardware stack levels used:    1
  4029 ;; Hardware stack levels required when called:    7
  4030 ;; This function calls:
  4031 ;;		__doprnt
  4032 ;; This function is called by:
  4033 ;;		_packaging
  4034 ;; This function uses a non-reentrant model
  4035 ;;
  4036                           
  4037                           	psect	text5
  4038  003094                     __ptext5:
  4039                           	opt stack 0
  4040  003094                     _sprintf:
  4041                           	opt stack 21
  4042                           
  4043                           ; BSR set to: 1
  4044                           ;incstack = 0
  4045  003094  C0A8  F0B6         	movff	sprintf@wh,sprintf@pb
  4046  003098  C0A9  F0B7         	movff	sprintf@wh+1,sprintf@pb+1
  4047  00309C  0E00               	movlw	0
  4048  00309E  0100               	movlb	0	; () banked
  4049  0030A0  6FB8               	movwf	(sprintf@pb+2)& (0+255),b
  4050  0030A2  0E00               	movlw	0
  4051  0030A4  6FB9               	movwf	(sprintf@pb+3)& (0+255),b
  4052  0030A6  0EAC               	movlw	low (?_sprintf+4)
  4053  0030A8  6FB4               	movwf	sprintf@ap& (0+255),b
  4054  0030AA  0E00               	movlw	high (?_sprintf+4)
  4055  0030AC  6FB5               	movwf	(sprintf@ap+1)& (0+255),b
  4056                           
  4057                           ; BSR set to: 0
  4058  0030AE  0EB6               	movlw	low sprintf@pb
  4059  0030B0  6F96               	movwf	__doprnt@pb& (0+255),b
  4060  0030B2  0E00               	movlw	high sprintf@pb
  4061  0030B4  6F97               	movwf	(__doprnt@pb+1)& (0+255),b
  4062  0030B6  C0AA  F098         	movff	sprintf@f,__doprnt@f
  4063  0030BA  C0AB  F099         	movff	sprintf@f+1,__doprnt@f+1
  4064  0030BE  0EB4               	movlw	low sprintf@ap
  4065  0030C0  6F9A               	movwf	__doprnt@ap& (0+255),b
  4066  0030C2  0E00               	movlw	high sprintf@ap
  4067  0030C4  6F9B               	movwf	(__doprnt@ap+1)& (0+255),b
  4068  0030C6  EC20  F006         	call	__doprnt	;wreg free
  4069  0030CA  C0B6  FFD9         	movff	sprintf@pb,fsr2l
  4070  0030CE  C0B7  FFDA         	movff	sprintf@pb+1,fsr2h
  4071  0030D2  0E00               	movlw	0
  4072  0030D4  6EDF               	movwf	indf2,c
  4073  0030D6  0012               	return	
  4074  0030D8                     __end_of_sprintf:
  4075                           	opt stack 0
  4076                           tblptru	equ	0xFF8
  4077                           tblptrh	equ	0xFF7
  4078                           tblptrl	equ	0xFF6
  4079                           tablat	equ	0xFF5
  4080                           prodh	equ	0xFF4
  4081                           prodl	equ	0xFF3
  4082                           intcon	equ	0xFF2
  4083                           postinc0	equ	0xFEE
  4084                           wreg	equ	0xFE8
  4085                           postdec1	equ	0xFE5
  4086                           plusw1	equ	0xFE3
  4087                           fsr1l	equ	0xFE1
  4088                           indf2	equ	0xFDF
  4089                           postinc2	equ	0xFDE
  4090                           postdec2	equ	0xFDD
  4091                           plusw2	equ	0xFDB
  4092                           fsr2h	equ	0xFDA
  4093                           fsr2l	equ	0xFD9
  4094                           status	equ	0xFD8
  4095                           
  4096 ;; *************** function _printf *****************
  4097 ;; Defined at:
  4098 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\printf.c"
  4099 ;; Parameters:    Size  Location     Type
  4100 ;;  f               2   40[BANK0 ] PTR const unsigned char 
  4101 ;;		 -> STR_29(4), STR_28(6), STR_27(16), STR_26(11), 
  4102 ;;		 -> STR_25(12), STR_24(9), STR_22(19), STR_21(10), 
  4103 ;;		 -> STR_20(17), STR_9(15), 
  4104 ;; Auto vars:     Size  Location     Type
  4105 ;;  pb              4   52[BANK0 ] struct __prbuf
  4106 ;;  ap              2   50[BANK0 ] PTR void [1]
  4107 ;;		 -> ?_sprintf(2), ?_printf(2), 
  4108 ;; Return value:  Size  Location     Type
  4109 ;;                  2   40[BANK0 ] int 
  4110 ;; Registers used:
  4111 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4112 ;; Tracked objects:
  4113 ;;		On entry : 0/0
  4114 ;;		On exit  : 0/0
  4115 ;;		Unchanged: 0/0
  4116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4117 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4118 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4120 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4121 ;;Total ram usage:       16 bytes
  4122 ;; Hardware stack levels used:    1
  4123 ;; Hardware stack levels required when called:    7
  4124 ;; This function calls:
  4125 ;;		__doprnt
  4126 ;; This function is called by:
  4127 ;;		_packaging
  4128 ;;		_mainMenu
  4129 ;; This function uses a non-reentrant model
  4130 ;;
  4131                           
  4132                           	psect	text6
  4133  003154                     __ptext6:
  4134                           	opt stack 0
  4135  003154                     _printf:
  4136                           	opt stack 22
  4137                           
  4138                           ;incstack = 0
  4139  003154  0E00               	movlw	0
  4140  003156  0100               	movlb	0	; () banked
  4141  003158  6FB4               	movwf	printf@pb& (0+255),b
  4142  00315A  0E00               	movlw	0
  4143  00315C  6FB5               	movwf	(printf@pb+1)& (0+255),b
  4144  00315E  0EEE               	movlw	low _putch
  4145  003160  6FB6               	movwf	(printf@pb+2)& (0+255),b
  4146  003162  0E32               	movlw	high _putch
  4147  003164  6FB7               	movwf	(printf@pb+3)& (0+255),b
  4148  003166  0EAA               	movlw	low (?_printf+2)
  4149  003168  6FB2               	movwf	printf@ap& (0+255),b
  4150  00316A  0E00               	movlw	high (?_printf+2)
  4151  00316C  6FB3               	movwf	(printf@ap+1)& (0+255),b
  4152                           
  4153                           ; BSR set to: 0
  4154                           ;	Return value of _printf is never used
  4155  00316E  0EB4               	movlw	low printf@pb
  4156  003170  6F96               	movwf	__doprnt@pb& (0+255),b
  4157  003172  0E00               	movlw	high printf@pb
  4158  003174  6F97               	movwf	(__doprnt@pb+1)& (0+255),b
  4159  003176  C0A8  F098         	movff	printf@f,__doprnt@f
  4160  00317A  C0A9  F099         	movff	printf@f+1,__doprnt@f+1
  4161  00317E  0EB2               	movlw	low printf@ap
  4162  003180  6F9A               	movwf	__doprnt@ap& (0+255),b
  4163  003182  0E00               	movlw	high printf@ap
  4164  003184  6F9B               	movwf	(__doprnt@ap+1)& (0+255),b
  4165  003186  EC20  F006         	call	__doprnt	;wreg free
  4166  00318A  0012               	return	
  4167  00318C                     __end_of_printf:
  4168                           	opt stack 0
  4169                           tblptru	equ	0xFF8
  4170                           tblptrh	equ	0xFF7
  4171                           tblptrl	equ	0xFF6
  4172                           tablat	equ	0xFF5
  4173                           prodh	equ	0xFF4
  4174                           prodl	equ	0xFF3
  4175                           intcon	equ	0xFF2
  4176                           postinc0	equ	0xFEE
  4177                           wreg	equ	0xFE8
  4178                           postdec1	equ	0xFE5
  4179                           plusw1	equ	0xFE3
  4180                           fsr1l	equ	0xFE1
  4181                           indf2	equ	0xFDF
  4182                           postinc2	equ	0xFDE
  4183                           postdec2	equ	0xFDD
  4184                           plusw2	equ	0xFDB
  4185                           fsr2h	equ	0xFDA
  4186                           fsr2l	equ	0xFD9
  4187                           status	equ	0xFD8
  4188                           
  4189 ;; *************** function __doprnt *****************
  4190 ;; Defined at:
  4191 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  4192 ;; Parameters:    Size  Location     Type
  4193 ;;  pb              2   22[BANK0 ] PTR struct __prbuf
  4194 ;;		 -> sprintf@pb(4), printf@pb(4), 
  4195 ;;  f               2   24[BANK0 ] PTR const unsigned char 
  4196 ;;		 -> STR_29(4), STR_28(6), STR_27(16), STR_26(11), 
  4197 ;;		 -> STR_25(12), STR_24(9), STR_22(19), STR_21(10), 
  4198 ;;		 -> STR_20(17), STR_10(36), STR_9(15), STR_8(22), 
  4199 ;;  ap              2   26[BANK0 ] PTR PTR void 
  4200 ;;		 -> sprintf@ap(2), printf@ap(2), 
  4201 ;; Auto vars:     Size  Location     Type
  4202 ;;  val             4   33[BANK0 ] unsigned long 
  4203 ;;  tmpval          4    0        struct .
  4204 ;;  cp              2   37[BANK0 ] PTR const unsigned char 
  4205 ;;		 -> ?_sprintf(2), ?_printf(2), NULL(0), STR_30(7), 
  4206 ;;		 -> fSLookup(105), packaging@msg3(50), packaging@msg2(32), 
  4207 ;;  prec            2   30[BANK0 ] int 
  4208 ;;  len             2    0        unsigned int 
  4209 ;;  c               1   39[BANK0 ] char 
  4210 ;;  flag            1   32[BANK0 ] unsigned char 
  4211 ;; Return value:  Size  Location     Type
  4212 ;;                  2   22[BANK0 ] int 
  4213 ;; Registers used:
  4214 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4215 ;; Tracked objects:
  4216 ;;		On entry : 0/0
  4217 ;;		On exit  : 0/0
  4218 ;;		Unchanged: 0/0
  4219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4220 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4221 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4222 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4223 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4224 ;;Total ram usage:       18 bytes
  4225 ;; Hardware stack levels used:    1
  4226 ;; Hardware stack levels required when called:    6
  4227 ;; This function calls:
  4228 ;;		Absolute function
  4229 ;;		___lldiv
  4230 ;;		___llmod
  4231 ;;		_putch
  4232 ;; This function is called by:
  4233 ;;		_printf
  4234 ;;		_sprintf
  4235 ;; This function uses a non-reentrant model
  4236 ;;
  4237                           
  4238                           	psect	text7
  4239  000C40                     __ptext7:
  4240                           	opt stack 0
  4241  000C40                     __doprnt:
  4242                           	opt stack 22
  4243                           
  4244                           ;doprnt.c: 499: signed char c;
  4245                           ;doprnt.c: 504: int prec;
  4246                           ;doprnt.c: 508: unsigned char flag;
  4247                           ;doprnt.c: 523: union {
  4248                           ;doprnt.c: 524: unsigned long vd;
  4249                           ;doprnt.c: 525: double integ;
  4250                           ;doprnt.c: 526: } tmpval;
  4251                           ;doprnt.c: 528: unsigned long val;
  4252                           ;doprnt.c: 529: unsigned len;
  4253                           ;doprnt.c: 530: const char * cp;
  4254                           ;doprnt.c: 536: while(c = *f++) {
  4255                           
  4256                           ;incstack = 0
  4257  000C40  D20E               	goto	u6350
  4258  000C42                     
  4259                           ;doprnt.c: 538: if(c != '%')
  4260  000C42  0E25               	movlw	37
  4261  000C44  0100               	movlb	0	; () banked
  4262  000C46  19A7               	xorwf	__doprnt@c& (0+255),w,b
  4263  000C48  B4D8               	btfsc	status,2,c
  4264  000C4A  D036               	goto	l767
  4265                           
  4266                           ; BSR set to: 0
  4267                           ;doprnt.c: 540: {
  4268                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  4269  000C4C  EE20 F002          	lfsr	2,2
  4270  000C50  5196               	movf	__doprnt@pb& (0+255),w,b
  4271  000C52  26D9               	addwf	fsr2l,f,c
  4272  000C54  5197               	movf	(__doprnt@pb+1)& (0+255),w,b
  4273  000C56  22DA               	addwfc	fsr2h,f,c
  4274  000C58  50DE               	movf	postinc2,w,c
  4275  000C5A  10DE               	iorwf	postinc2,w,c
  4276  000C5C  B4D8               	btfsc	status,2,c
  4277  000C5E  D016               	goto	l768
  4278                           
  4279                           ; BSR set to: 0
  4280  000C60  EE20 F002          	lfsr	2,2
  4281  000C64  5196               	movf	__doprnt@pb& (0+255),w,b
  4282  000C66  26D9               	addwf	fsr2l,f,c
  4283  000C68  5197               	movf	(__doprnt@pb+1)& (0+255),w,b
  4284  000C6A  22DA               	addwfc	fsr2h,f,c
  4285  000C6C  CFDE F09C          	movff	postinc2,??__doprnt
  4286  000C70  CFDD F09D          	movff	postdec2,??__doprnt+1
  4287  000C74  D801               	call	u6178
  4288  000C76  D1F3               	goto	u6350
  4289  000C78                     u6178:
  4290  000C78  0005               	push	
  4291  000C7A  6EFA               	movwf	pclath,c
  4292  000C7C  519C               	movf	??__doprnt& (0+255),w,b
  4293  000C7E  6EFD               	movwf	tosl,c
  4294  000C80  519D               	movf	(??__doprnt+1)& (0+255),w,b
  4295  000C82  6EFE               	movwf	tosh,c
  4296  000C84  6AFF               	clrf	tosu,c
  4297  000C86  50FA               	movf	pclath,w,c
  4298  000C88  51A7               	movf	__doprnt@c& (0+255),w,b
  4299  000C8A  0012               	return		;indir
  4300  000C8C                     l768:
  4301  000C8C  C096  FFD9         	movff	__doprnt@pb,fsr2l
  4302  000C90  C097  FFDA         	movff	__doprnt@pb+1,fsr2h
  4303  000C94  CFDE F09C          	movff	postinc2,??__doprnt
  4304  000C98  CFDD F09D          	movff	postdec2,??__doprnt+1
  4305  000C9C  C09C  FFD9         	movff	??__doprnt,fsr2l
  4306  000CA0  C09D  FFDA         	movff	??__doprnt+1,fsr2h
  4307  000CA4  C0A7  FFDF         	movff	__doprnt@c,indf2
  4308  000CA8  C096  FFD9         	movff	__doprnt@pb,fsr2l
  4309  000CAC  C097  FFDA         	movff	__doprnt@pb+1,fsr2h
  4310  000CB0  2ADE               	incf	postinc2,f,c
  4311  000CB2  0E00               	movlw	0
  4312  000CB4  22DD               	addwfc	postdec2,f,c
  4313                           
  4314                           ;doprnt.c: 542: continue;
  4315  000CB6  D1D3               	goto	u6350
  4316  000CB8                     l767:
  4317                           
  4318                           ;doprnt.c: 543: }
  4319                           ;doprnt.c: 548: flag = 0;
  4320  000CB8  0E00               	movlw	0
  4321  000CBA  0100               	movlb	0	; () banked
  4322  000CBC  6FA0               	movwf	__doprnt@flag& (0+255),b
  4323                           
  4324                           ; BSR set to: 0
  4325                           ;doprnt.c: 635: switch(c = *f++) {
  4326                           
  4327                           ;doprnt.c: 633: loop:
  4328  000CBE  D091               	goto	l771
  4329  000CC0                     
  4330                           ; BSR set to: 0
  4331                           ;doprnt.c: 643: flag |= 0x10;
  4332                           
  4333                           ; BSR set to: 0
  4334  000CC0  89A0               	bsf	__doprnt@flag& (0+255),4,b
  4335                           
  4336                           ;doprnt.c: 644: goto loop;
  4337  000CC2  D08F               	goto	l771
  4338  000CC4                     
  4339                           ; BSR set to: 0
  4340                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4341                           
  4342                           ; BSR set to: 0
  4343  000CC4  C09A  FFD9         	movff	__doprnt@ap,fsr2l
  4344  000CC8  C09B  FFDA         	movff	__doprnt@ap+1,fsr2h
  4345  000CCC  CFDF F09C          	movff	indf2,??__doprnt
  4346  000CD0  0E02               	movlw	2
  4347  000CD2  26DE               	addwf	postinc2,f,c
  4348  000CD4  CFDF F09D          	movff	indf2,??__doprnt+1
  4349  000CD8  0E00               	movlw	0
  4350  000CDA  22DD               	addwfc	postdec2,f,c
  4351  000CDC  C09C  FFD9         	movff	??__doprnt,fsr2l
  4352  000CE0  C09D  FFDA         	movff	??__doprnt+1,fsr2h
  4353  000CE4  CFDE F0A5          	movff	postinc2,__doprnt@cp
  4354  000CE8  CFDD F0A6          	movff	postdec2,__doprnt@cp+1
  4355                           
  4356                           ; BSR set to: 0
  4357                           ;doprnt.c: 740: if(!cp)
  4358  000CEC  51A5               	movf	__doprnt@cp& (0+255),w,b
  4359  000CEE  11A6               	iorwf	(__doprnt@cp+1)& (0+255),w,b
  4360  000CF0  A4D8               	btfss	status,2,c
  4361  000CF2  D062               	goto	l783
  4362                           
  4363                           ; BSR set to: 0
  4364                           ;doprnt.c: 741: cp = "(null)";
  4365  000CF4  0EEE               	movlw	low STR_30
  4366  000CF6  6FA5               	movwf	__doprnt@cp& (0+255),b
  4367  000CF8  0EFF               	movlw	high STR_30
  4368  000CFA  6FA6               	movwf	(__doprnt@cp+1)& (0+255),b
  4369                           
  4370                           ; BSR set to: 0
  4371                           ;doprnt.c: 777: while(*cp)
  4372  000CFC  D05D               	goto	l783
  4373  000CFE                     
  4374                           ;doprnt.c: 778: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
  4375                           
  4376                           ; BSR set to: 0
  4377  000CFE  0100               	movlb	0	; () banked
  4378  000D00  EE20 F002          	lfsr	2,2
  4379  000D04  5196               	movf	__doprnt@pb& (0+255),w,b
  4380  000D06  26D9               	addwf	fsr2l,f,c
  4381  000D08  5197               	movf	(__doprnt@pb+1)& (0+255),w,b
  4382  000D0A  22DA               	addwfc	fsr2h,f,c
  4383  000D0C  50DE               	movf	postinc2,w,c
  4384  000D0E  10DE               	iorwf	postinc2,w,c
  4385  000D10  B4D8               	btfsc	status,2,c
  4386  000D12  D02A               	goto	l782
  4387                           
  4388                           ; BSR set to: 0
  4389  000D14  EE20 F002          	lfsr	2,2
  4390  000D18  5196               	movf	__doprnt@pb& (0+255),w,b
  4391  000D1A  26D9               	addwf	fsr2l,f,c
  4392  000D1C  5197               	movf	(__doprnt@pb+1)& (0+255),w,b
  4393  000D1E  22DA               	addwfc	fsr2h,f,c
  4394  000D20  CFDE F09C          	movff	postinc2,??__doprnt
  4395  000D24  CFDD F09D          	movff	postdec2,??__doprnt+1
  4396  000D28  D801               	call	u6208
  4397  000D2A  D01A               	goto	u6209
  4398  000D2C                     u6208:
  4399  000D2C  0005               	push	
  4400  000D2E  6EFA               	movwf	pclath,c
  4401  000D30  519C               	movf	??__doprnt& (0+255),w,b
  4402  000D32  6EFD               	movwf	tosl,c
  4403  000D34  519D               	movf	(??__doprnt+1)& (0+255),w,b
  4404  000D36  6EFE               	movwf	tosh,c
  4405  000D38  6AFF               	clrf	tosu,c
  4406  000D3A  50FA               	movf	pclath,w,c
  4407  000D3C  C0A5  FFF6         	movff	__doprnt@cp,tblptrl
  4408  000D40  C0A6  FFF7         	movff	__doprnt@cp+1,tblptrh
  4409  000D44  0E00               	movlw	low (__mediumconst shr (0+16))
  4410  000D46  6EF8               	movwf	tblptru,c
  4411  000D48  0E0F               	movlw	(high __ramtop+-1)
  4412  000D4A  64F7               	cpfsgt	tblptrh,c
  4413  000D4C  D003               	bra	u6217
  4414  000D4E  0008               	tblrd		*
  4415  000D50  50F5               	movf	tablat,w,c
  4416  000D52  D005               	bra	u6210
  4417  000D54                     u6217:
  4418  000D54  CFF6 FFE9          	movff	tblptrl,fsr0l
  4419  000D58  CFF7 FFEA          	movff	tblptrh,fsr0h
  4420  000D5C  50EF               	movf	indf0,w,c
  4421  000D5E                     u6210:
  4422  000D5E  0012               	return		;indir
  4423  000D60                     u6209:
  4424  000D60  0100               	movlb	0	; () banked
  4425  000D62  4BA5               	infsnz	__doprnt@cp& (0+255),f,b
  4426  000D64  2BA6               	incf	(__doprnt@cp+1)& (0+255),f,b
  4427  000D66  D028               	goto	l783
  4428  000D68                     l782:
  4429                           
  4430                           ; BSR set to: 0
  4431                           
  4432                           ; BSR set to: 0
  4433  000D68  C0A5  FFF6         	movff	__doprnt@cp,tblptrl
  4434  000D6C  C0A6  FFF7         	movff	__doprnt@cp+1,tblptrh
  4435  000D70  0E00               	movlw	low (__mediumconst shr (0+16))
  4436  000D72  6EF8               	movwf	tblptru,c
  4437  000D74  C096  FFD9         	movff	__doprnt@pb,fsr2l
  4438  000D78  C097  FFDA         	movff	__doprnt@pb+1,fsr2h
  4439  000D7C  CFDE F09C          	movff	postinc2,??__doprnt
  4440  000D80  CFDD F09D          	movff	postdec2,??__doprnt+1
  4441  000D84  C09C  FFD9         	movff	??__doprnt,fsr2l
  4442  000D88  C09D  FFDA         	movff	??__doprnt+1,fsr2h
  4443  000D8C  0E0F               	movlw	(high __ramtop+-1)
  4444  000D8E  64F7               	cpfsgt	tblptrh,c
  4445  000D90  D003               	bra	u6227
  4446  000D92  0008               	tblrd		*
  4447  000D94  50F5               	movf	tablat,w,c
  4448  000D96  D005               	bra	u6220
  4449  000D98                     u6227:
  4450  000D98  CFF6 FFE9          	movff	tblptrl,fsr0l
  4451  000D9C  CFF7 FFEA          	movff	tblptrh,fsr0h
  4452  000DA0  50EF               	movf	indf0,w,c
  4453  000DA2                     u6220:
  4454  000DA2  6EDF               	movwf	indf2,c
  4455  000DA4  0100               	movlb	0	; () banked
  4456  000DA6  4BA5               	infsnz	__doprnt@cp& (0+255),f,b
  4457  000DA8  2BA6               	incf	(__doprnt@cp+1)& (0+255),f,b
  4458                           
  4459                           ; BSR set to: 0
  4460  000DAA  C096  FFD9         	movff	__doprnt@pb,fsr2l
  4461  000DAE  C097  FFDA         	movff	__doprnt@pb+1,fsr2h
  4462  000DB2  2ADE               	incf	postinc2,f,c
  4463  000DB4  0E00               	movlw	0
  4464  000DB6  22DD               	addwfc	postdec2,f,c
  4465  000DB8                     l783:
  4466                           
  4467                           ; BSR set to: 0
  4468                           
  4469                           ; BSR set to: 0
  4470                           
  4471                           ; BSR set to: 0
  4472  000DB8  C0A5  FFF6         	movff	__doprnt@cp,tblptrl
  4473  000DBC  C0A6  FFF7         	movff	__doprnt@cp+1,tblptrh
  4474  000DC0  0E00               	movlw	low (__mediumconst shr (0+16))
  4475  000DC2  6EF8               	movwf	tblptru,c
  4476  000DC4  0E0F               	movlw	(high __ramtop+-1)
  4477  000DC6  64F7               	cpfsgt	tblptrh,c
  4478  000DC8  D003               	bra	u6237
  4479  000DCA  0008               	tblrd		*
  4480  000DCC  50F5               	movf	tablat,w,c
  4481  000DCE  D005               	bra	u6230
  4482  000DD0                     u6237:
  4483  000DD0  CFF6 FFE9          	movff	tblptrl,fsr0l
  4484  000DD4  CFF7 FFEA          	movff	tblptrh,fsr0h
  4485  000DD8  50EF               	movf	indf0,w,c
  4486  000DDA                     u6230:
  4487  000DDA  0900               	iorlw	0
  4488  000DDC  B4D8               	btfsc	status,2,c
  4489  000DDE  D13F               	goto	u6350
  4490  000DE0  D78E               	goto	l781
  4491  000DE2                     l771:
  4492  000DE2  C098  FFF6         	movff	__doprnt@f,tblptrl
  4493  000DE6  C099  FFF7         	movff	__doprnt@f+1,tblptrh
  4494  000DEA  0100               	movlb	0	; () banked
  4495  000DEC  4B98               	infsnz	__doprnt@f& (0+255),f,b
  4496  000DEE  2B99               	incf	(__doprnt@f+1)& (0+255),f,b
  4497  000DF0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4498  000DF0  6AF8               	clrf	tblptru,c
  4499  000DF2                     	endif
  4500  000DF2                     	if	0	;tblptru may be non-zero
  4501  000DF2                     	endif
  4502  000DF2  0008               	tblrd		*
  4503  000DF4  CFF5 F0A7          	movff	tablat,__doprnt@c
  4504  000DF8  51A7               	movf	__doprnt@c& (0+255),w,b
  4505                           
  4506                           ; Switch size 1, requested type "space"
  4507                           ; Number of cases is 5, Range of values is 0 to 115
  4508                           ; switch strategies available:
  4509                           ; Name         Instructions Cycles
  4510                           ; simple_byte           16     9 (average)
  4511                           ;	Chosen strategy is simple_byte
  4512  000DFA  0A00               	xorlw	0	; case 0
  4513  000DFC  B4D8               	btfsc	status,2,c
  4514  000DFE  D13D               	goto	u6360
  4515  000E00  0A64               	xorlw	100	; case 100
  4516  000E02  B4D8               	btfsc	status,2,c
  4517  000E04  D00A               	goto	l777
  4518  000E06  0A0D               	xorlw	13	; case 105
  4519  000E08  B4D8               	btfsc	status,2,c
  4520  000E0A  D007               	goto	l777
  4521  000E0C  0A05               	xorlw	5	; case 108
  4522  000E0E  B4D8               	btfsc	status,2,c
  4523  000E10  D757               	goto	l774
  4524  000E12  0A1F               	xorlw	31	; case 115
  4525  000E14  B4D8               	btfsc	status,2,c
  4526  000E16  D756               	goto	l778
  4527  000E18  D122               	goto	u6350
  4528  000E1A                     l777:
  4529                           
  4530                           ;doprnt.c: 1253: {
  4531                           ;doprnt.c: 1255: if(flag & 0x10)
  4532  000E1A  0100               	movlb	0	; () banked
  4533  000E1C  A9A0               	btfss	__doprnt@flag& (0+255),4,b
  4534  000E1E  D019               	goto	l786
  4535                           
  4536                           ; BSR set to: 0
  4537                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  4538  000E20  C09A  FFD9         	movff	__doprnt@ap,fsr2l
  4539  000E24  C09B  FFDA         	movff	__doprnt@ap+1,fsr2h
  4540  000E28  CFDF F09C          	movff	indf2,??__doprnt
  4541  000E2C  0E04               	movlw	4
  4542  000E2E  26DE               	addwf	postinc2,f,c
  4543  000E30  CFDF F09D          	movff	indf2,??__doprnt+1
  4544  000E34  0E00               	movlw	0
  4545  000E36  22DD               	addwfc	postdec2,f,c
  4546  000E38  C09C  FFD9         	movff	??__doprnt,fsr2l
  4547  000E3C  C09D  FFDA         	movff	??__doprnt+1,fsr2h
  4548  000E40  CFDE F0A1          	movff	postinc2,__doprnt@val
  4549  000E44  CFDE F0A2          	movff	postinc2,__doprnt@val+1
  4550  000E48  CFDE F0A3          	movff	postinc2,__doprnt@val+2
  4551  000E4C  CFDE F0A4          	movff	postinc2,__doprnt@val+3
  4552  000E50  D019               	goto	l787
  4553  000E52                     l786:
  4554                           
  4555                           ; BSR set to: 0
  4556                           ;doprnt.c: 1257: else
  4557                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4558                           
  4559                           ; BSR set to: 0
  4560  000E52  C09A  FFD9         	movff	__doprnt@ap,fsr2l
  4561  000E56  C09B  FFDA         	movff	__doprnt@ap+1,fsr2h
  4562  000E5A  CFDF F09C          	movff	indf2,??__doprnt
  4563  000E5E  0E02               	movlw	2
  4564  000E60  26DE               	addwf	postinc2,f,c
  4565  000E62  CFDF F09D          	movff	indf2,??__doprnt+1
  4566  000E66  0E00               	movlw	0
  4567  000E68  22DD               	addwfc	postdec2,f,c
  4568  000E6A  C09C  FFD9         	movff	??__doprnt,fsr2l
  4569  000E6E  C09D  FFDA         	movff	??__doprnt+1,fsr2h
  4570  000E72  CFDE F0A1          	movff	postinc2,__doprnt@val
  4571  000E76  CFDD F0A2          	movff	postdec2,__doprnt@val+1
  4572  000E7A  0E00               	movlw	0
  4573  000E7C  BFA2               	btfsc	(__doprnt@val+1)& (0+255),7,b
  4574  000E7E  0EFF               	movlw	-1
  4575  000E80  6FA3               	movwf	(__doprnt@val+2)& (0+255),b
  4576  000E82  6FA4               	movwf	(__doprnt@val+3)& (0+255),b
  4577  000E84                     l787:
  4578                           
  4579                           ; BSR set to: 0
  4580                           ;doprnt.c: 1261: if((long)val < 0) {
  4581                           
  4582                           ; BSR set to: 0
  4583  000E84  AFA4               	btfss	(__doprnt@val+3)& (0+255),7,b
  4584  000E86  D00A               	goto	l788
  4585                           
  4586                           ; BSR set to: 0
  4587                           ;doprnt.c: 1262: flag |= 0x03;
  4588  000E88  0E03               	movlw	3
  4589  000E8A  13A0               	iorwf	__doprnt@flag& (0+255),f,b
  4590                           
  4591                           ; BSR set to: 0
  4592                           ;doprnt.c: 1263: val = -val;
  4593  000E8C  1FA4               	comf	(__doprnt@val+3)& (0+255),f,b
  4594  000E8E  1FA3               	comf	(__doprnt@val+2)& (0+255),f,b
  4595  000E90  1FA2               	comf	(__doprnt@val+1)& (0+255),f,b
  4596  000E92  6DA1               	negf	__doprnt@val& (0+255),b
  4597  000E94  0E00               	movlw	0
  4598  000E96  23A2               	addwfc	(__doprnt@val+1)& (0+255),f,b
  4599  000E98  23A3               	addwfc	(__doprnt@val+2)& (0+255),f,b
  4600  000E9A  23A4               	addwfc	(__doprnt@val+3)& (0+255),f,b
  4601  000E9C                     l788:
  4602                           
  4603                           ; BSR set to: 0
  4604                           ;doprnt.c: 1264: }
  4605                           ;doprnt.c: 1266: }
  4606                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4607                           
  4608                           ; BSR set to: 0
  4609  000E9C  0E01               	movlw	1
  4610  000E9E  6FA7               	movwf	__doprnt@c& (0+255),b
  4611  000EA0                     l5167:
  4612                           
  4613                           ; BSR set to: 0
  4614  000EA0  0E0A               	movlw	10
  4615  000EA2  19A7               	xorwf	__doprnt@c& (0+255),w,b
  4616  000EA4  B4D8               	btfsc	status,2,c
  4617  000EA6  D01B               	goto	u6290
  4618                           
  4619                           ; BSR set to: 0
  4620                           ;doprnt.c: 1306: if(val < dpowers[c])
  4621                           
  4622                           ; BSR set to: 0
  4623                           
  4624                           ; BSR set to: 0
  4625  000EA8  51A7               	movf	__doprnt@c& (0+255),w,b
  4626  000EAA  0D04               	mullw	4
  4627  000EAC  0EF1               	movlw	low _dpowers
  4628  000EAE  24F3               	addwf	prodl,w,c
  4629  000EB0  6EF6               	movwf	tblptrl,c
  4630  000EB2  0EFB               	movlw	high _dpowers
  4631  000EB4  20F4               	addwfc	prodh,w,c
  4632  000EB6  6EF7               	movwf	tblptrh,c
  4633  000EB8                     	if	1	;There are 3 active tblptr bytes
  4634  000EB8  6AF8               	clrf	tblptru,c
  4635  000EBA  0E00               	movlw	low (__mediumconst shr (0+16))
  4636  000EBC  22F8               	addwfc	tblptru,f,c
  4637  000EBE                     	endif
  4638  000EBE  0009               	tblrd		*+
  4639  000EC0  50F5               	movf	tablat,w,c
  4640  000EC2  5DA1               	subwf	__doprnt@val& (0+255),w,b
  4641  000EC4  0009               	tblrd		*+
  4642  000EC6  50F5               	movf	tablat,w,c
  4643  000EC8  59A2               	subwfb	(__doprnt@val+1)& (0+255),w,b
  4644  000ECA  0009               	tblrd		*+
  4645  000ECC  50F5               	movf	tablat,w,c
  4646  000ECE  59A3               	subwfb	(__doprnt@val+2)& (0+255),w,b
  4647  000ED0  0009               	tblrd		*+
  4648  000ED2  50F5               	movf	tablat,w,c
  4649  000ED4  59A4               	subwfb	(__doprnt@val+3)& (0+255),w,b
  4650  000ED6  A0D8               	btfss	status,0,c
  4651  000ED8  D002               	goto	u6290
  4652                           
  4653                           ; BSR set to: 0
  4654                           
  4655                           ; BSR set to: 0
  4656                           
  4657                           ; BSR set to: 0
  4658                           ;doprnt.c: 1307: break;
  4659  000EDA  2BA7               	incf	__doprnt@c& (0+255),f,b
  4660  000EDC  D7E1               	goto	l5167
  4661  000EDE                     u6290:
  4662                           
  4663                           ; BSR set to: 0
  4664                           ;doprnt.c: 1422: {
  4665                           ;doprnt.c: 1438: if(flag & 0x03)
  4666                           
  4667                           ; BSR set to: 0
  4668  000EDE  C0A0  F09C         	movff	__doprnt@flag,??__doprnt
  4669  000EE2  0E03               	movlw	3
  4670  000EE4  179C               	andwf	??__doprnt& (0+255),f,b
  4671  000EE6  B4D8               	btfsc	status,2,c
  4672  000EE8  D035               	goto	l794
  4673                           
  4674                           ; BSR set to: 0
  4675                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  4676  000EEA  EE20 F002          	lfsr	2,2
  4677  000EEE  5196               	movf	__doprnt@pb& (0+255),w,b
  4678  000EF0  26D9               	addwf	fsr2l,f,c
  4679  000EF2  5197               	movf	(__doprnt@pb+1)& (0+255),w,b
  4680  000EF4  22DA               	addwfc	fsr2h,f,c
  4681  000EF6  50DE               	movf	postinc2,w,c
  4682  000EF8  10DE               	iorwf	postinc2,w,c
  4683  000EFA  B4D8               	btfsc	status,2,c
  4684  000EFC  D016               	goto	l793
  4685                           
  4686                           ; BSR set to: 0
  4687  000EFE  EE20 F002          	lfsr	2,2
  4688  000F02  5196               	movf	__doprnt@pb& (0+255),w,b
  4689  000F04  26D9               	addwf	fsr2l,f,c
  4690  000F06  5197               	movf	(__doprnt@pb+1)& (0+255),w,b
  4691  000F08  22DA               	addwfc	fsr2h,f,c
  4692  000F0A  CFDE F09C          	movff	postinc2,??__doprnt
  4693  000F0E  CFDD F09D          	movff	postdec2,??__doprnt+1
  4694  000F12  D801               	call	u6328
  4695  000F14  D01F               	goto	l794
  4696  000F16                     u6328:
  4697  000F16  0005               	push	
  4698  000F18  6EFA               	movwf	pclath,c
  4699  000F1A  519C               	movf	??__doprnt& (0+255),w,b
  4700  000F1C  6EFD               	movwf	tosl,c
  4701  000F1E  519D               	movf	(??__doprnt+1)& (0+255),w,b
  4702  000F20  6EFE               	movwf	tosh,c
  4703  000F22  6AFF               	clrf	tosu,c
  4704  000F24  50FA               	movf	pclath,w,c
  4705  000F26  0E2D               	movlw	45
  4706  000F28  0012               	return		;indir
  4707  000F2A                     l793:
  4708  000F2A  C096  FFD9         	movff	__doprnt@pb,fsr2l
  4709  000F2E  C097  FFDA         	movff	__doprnt@pb+1,fsr2h
  4710  000F32  CFDE F09C          	movff	postinc2,??__doprnt
  4711  000F36  CFDD F09D          	movff	postdec2,??__doprnt+1
  4712  000F3A  C09C  FFD9         	movff	??__doprnt,fsr2l
  4713  000F3E  C09D  FFDA         	movff	??__doprnt+1,fsr2h
  4714  000F42  0E2D               	movlw	45
  4715  000F44  6EDF               	movwf	indf2,c
  4716  000F46  C096  FFD9         	movff	__doprnt@pb,fsr2l
  4717  000F4A  C097  FFDA         	movff	__doprnt@pb+1,fsr2h
  4718  000F4E  2ADE               	incf	postinc2,f,c
  4719  000F50  0E00               	movlw	0
  4720  000F52  22DD               	addwfc	postdec2,f,c
  4721  000F54                     l794:
  4722                           
  4723                           ;doprnt.c: 1469: }
  4724                           ;doprnt.c: 1472: prec = c;
  4725  000F54  0100               	movlb	0	; () banked
  4726  000F56  51A7               	movf	__doprnt@c& (0+255),w,b
  4727  000F58  6F9E               	movwf	__doprnt@prec& (0+255),b
  4728  000F5A  6B9F               	clrf	(__doprnt@prec+1)& (0+255),b
  4729  000F5C  BF9E               	btfsc	__doprnt@prec& (0+255),7,b
  4730  000F5E  079F               	decf	(__doprnt@prec+1)& (0+255),f,b
  4731                           
  4732                           ;doprnt.c: 1474: while(prec--) {
  4733  000F60  D075               	goto	l798
  4734  000F62                     l5191:
  4735                           
  4736                           ; BSR set to: 0
  4737                           ;doprnt.c: 1478: {
  4738                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4739  000F62  C09E  F09C         	movff	__doprnt@prec,??__doprnt
  4740  000F66  C09F  F09D         	movff	__doprnt@prec+1,??__doprnt+1
  4741  000F6A  90D8               	bcf	status,0,c
  4742  000F6C  379C               	rlcf	??__doprnt& (0+255),f,b
  4743  000F6E  379D               	rlcf	(??__doprnt+1)& (0+255),f,b
  4744  000F70  90D8               	bcf	status,0,c
  4745  000F72  379C               	rlcf	??__doprnt& (0+255),f,b
  4746  000F74  379D               	rlcf	(??__doprnt+1)& (0+255),f,b
  4747  000F76  0EF1               	movlw	low _dpowers
  4748  000F78  259C               	addwf	??__doprnt& (0+255),w,b
  4749  000F7A  6EF6               	movwf	tblptrl,c
  4750  000F7C  0EFB               	movlw	high _dpowers
  4751  000F7E  219D               	addwfc	(??__doprnt+1)& (0+255),w,b
  4752  000F80  6EF7               	movwf	tblptrh,c
  4753  000F82                     	if	1	;There are 3 active tblptr bytes
  4754  000F82  6AF8               	clrf	tblptru,c
  4755  000F84  0E00               	movlw	low (__mediumconst shr (0+16))
  4756  000F86  22F8               	addwfc	tblptru,f,c
  4757  000F88                     	endif
  4758  000F88  0009               	tblrd		*+
  4759  000F8A  CFF5 F084          	movff	tablat,___lldiv@divisor
  4760  000F8E  0009               	tblrd		*+
  4761  000F90  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  4762  000F94  0009               	tblrd		*+
  4763  000F96  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  4764  000F9A  000A               	tblrd		*-
  4765  000F9C  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  4766  000FA0  C0A1  F080         	movff	__doprnt@val,___lldiv@dividend
  4767  000FA4  C0A2  F081         	movff	__doprnt@val+1,___lldiv@dividend+1
  4768  000FA8  C0A3  F082         	movff	__doprnt@val+2,___lldiv@dividend+2
  4769  000FAC  C0A4  F083         	movff	__doprnt@val+3,___lldiv@dividend+3
  4770  000FB0  ECE7  F016         	call	___lldiv
  4771  000FB4  C080  F08D         	movff	?___lldiv,___llmod@dividend
  4772  000FB8  C081  F08E         	movff	?___lldiv+1,___llmod@dividend+1
  4773  000FBC  C082  F08F         	movff	?___lldiv+2,___llmod@dividend+2
  4774  000FC0  C083  F090         	movff	?___lldiv+3,___llmod@dividend+3
  4775  000FC4  0E0A               	movlw	10
  4776  000FC6  0100               	movlb	0	; () banked
  4777  000FC8  6F91               	movwf	___llmod@divisor& (0+255),b
  4778  000FCA  0E00               	movlw	0
  4779  000FCC  6F92               	movwf	(___llmod@divisor+1)& (0+255),b
  4780  000FCE  0E00               	movlw	0
  4781  000FD0  6F93               	movwf	(___llmod@divisor+2)& (0+255),b
  4782  000FD2  0E00               	movlw	0
  4783  000FD4  6F94               	movwf	(___llmod@divisor+3)& (0+255),b
  4784  000FD6  EC9C  F017         	call	___llmod	;wreg free
  4785  000FDA  0100               	movlb	0	; () banked
  4786  000FDC  518D               	movf	?___llmod& (0+255),w,b
  4787  000FDE  0F30               	addlw	48
  4788  000FE0  6FA7               	movwf	__doprnt@c& (0+255),b
  4789                           
  4790                           ; BSR set to: 0
  4791                           ;doprnt.c: 1523: }
  4792                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  4793  000FE2  EE20 F002          	lfsr	2,2
  4794  000FE6  5196               	movf	__doprnt@pb& (0+255),w,b
  4795  000FE8  26D9               	addwf	fsr2l,f,c
  4796  000FEA  5197               	movf	(__doprnt@pb+1)& (0+255),w,b
  4797  000FEC  22DA               	addwfc	fsr2h,f,c
  4798  000FEE  50DE               	movf	postinc2,w,c
  4799  000FF0  10DE               	iorwf	postinc2,w,c
  4800  000FF2  B4D8               	btfsc	status,2,c
  4801  000FF4  D016               	goto	l797
  4802                           
  4803                           ; BSR set to: 0
  4804  000FF6  EE20 F002          	lfsr	2,2
  4805  000FFA  5196               	movf	__doprnt@pb& (0+255),w,b
  4806  000FFC  26D9               	addwf	fsr2l,f,c
  4807  000FFE  5197               	movf	(__doprnt@pb+1)& (0+255),w,b
  4808  001000  22DA               	addwfc	fsr2h,f,c
  4809  001002  CFDE F09C          	movff	postinc2,??__doprnt
  4810  001006  CFDD F09D          	movff	postdec2,??__doprnt+1
  4811  00100A  D801               	call	u6348
  4812  00100C  D01F               	goto	l798
  4813  00100E                     u6348:
  4814  00100E  0005               	push	
  4815  001010  6EFA               	movwf	pclath,c
  4816  001012  519C               	movf	??__doprnt& (0+255),w,b
  4817  001014  6EFD               	movwf	tosl,c
  4818  001016  519D               	movf	(??__doprnt+1)& (0+255),w,b
  4819  001018  6EFE               	movwf	tosh,c
  4820  00101A  6AFF               	clrf	tosu,c
  4821  00101C  50FA               	movf	pclath,w,c
  4822  00101E  51A7               	movf	__doprnt@c& (0+255),w,b
  4823  001020  0012               	return		;indir
  4824  001022                     l797:
  4825  001022  C096  FFD9         	movff	__doprnt@pb,fsr2l
  4826  001026  C097  FFDA         	movff	__doprnt@pb+1,fsr2h
  4827  00102A  CFDE F09C          	movff	postinc2,??__doprnt
  4828  00102E  CFDD F09D          	movff	postdec2,??__doprnt+1
  4829  001032  C09C  FFD9         	movff	??__doprnt,fsr2l
  4830  001036  C09D  FFDA         	movff	??__doprnt+1,fsr2h
  4831  00103A  C0A7  FFDF         	movff	__doprnt@c,indf2
  4832  00103E  C096  FFD9         	movff	__doprnt@pb,fsr2l
  4833  001042  C097  FFDA         	movff	__doprnt@pb+1,fsr2h
  4834  001046  2ADE               	incf	postinc2,f,c
  4835  001048  0E00               	movlw	0
  4836  00104A  22DD               	addwfc	postdec2,f,c
  4837  00104C                     l798:
  4838  00104C  0100               	movlb	0	; () banked
  4839  00104E  079E               	decf	__doprnt@prec& (0+255),f,b
  4840  001050  A0D8               	btfss	status,0,c
  4841  001052  079F               	decf	(__doprnt@prec+1)& (0+255),f,b
  4842  001054  299E               	incf	__doprnt@prec& (0+255),w,b
  4843  001056  E185               	bnz	l5191
  4844  001058  299F               	incf	(__doprnt@prec+1)& (0+255),w,b
  4845  00105A  A4D8               	btfss	status,2,c
  4846  00105C  D782               	goto	l796
  4847  00105E                     u6350:
  4848                           
  4849                           ; BSR set to: 0
  4850                           
  4851                           ; BSR set to: 0
  4852  00105E  C098  FFF6         	movff	__doprnt@f,tblptrl
  4853  001062  C099  FFF7         	movff	__doprnt@f+1,tblptrh
  4854  001066  0100               	movlb	0	; () banked
  4855  001068  4B98               	infsnz	__doprnt@f& (0+255),f,b
  4856  00106A  2B99               	incf	(__doprnt@f+1)& (0+255),f,b
  4857  00106C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4858  00106C  6AF8               	clrf	tblptru,c
  4859  00106E                     	endif
  4860  00106E                     	if	0	;tblptru may be non-zero
  4861  00106E                     	endif
  4862  00106E  0008               	tblrd		*
  4863  001070  CFF5 F0A7          	movff	tablat,__doprnt@c
  4864  001074  51A7               	movf	__doprnt@c& (0+255),w,b
  4865  001076  A4D8               	btfss	status,2,c
  4866  001078  D5E4               	goto	l766
  4867  00107A                     u6360:
  4868                           
  4869                           ; BSR set to: 0
  4870                           ;doprnt.c: 1540: return 0;
  4871                           
  4872                           ; BSR set to: 0
  4873                           
  4874                           ;doprnt.c: 1525: }
  4875                           ;doprnt.c: 1533: }
  4876                           ;doprnt.c: 1535: alldone:
  4877                           
  4878                           ; BSR set to: 0
  4879  00107A  0E00               	movlw	0
  4880  00107C  6F97               	movwf	(?__doprnt+1)& (0+255),b
  4881  00107E  0E00               	movlw	0
  4882  001080  6F96               	movwf	?__doprnt& (0+255),b
  4883  001082  0012               	return	
  4884  001084                     __end_of__doprnt:
  4885                           	opt stack 0
  4886                           tosu	equ	0xFFF
  4887                           tosh	equ	0xFFE
  4888                           tosl	equ	0xFFD
  4889                           pclath	equ	0xFFA
  4890                           tblptru	equ	0xFF8
  4891                           tblptrh	equ	0xFF7
  4892                           tblptrl	equ	0xFF6
  4893                           tablat	equ	0xFF5
  4894                           prodh	equ	0xFF4
  4895                           prodl	equ	0xFF3
  4896                           intcon	equ	0xFF2
  4897                           indf0	equ	0xFEF
  4898                           postinc0	equ	0xFEE
  4899                           fsr0h	equ	0xFEA
  4900                           fsr0l	equ	0xFE9
  4901                           wreg	equ	0xFE8
  4902                           postdec1	equ	0xFE5
  4903                           plusw1	equ	0xFE3
  4904                           fsr1l	equ	0xFE1
  4905                           indf2	equ	0xFDF
  4906                           postinc2	equ	0xFDE
  4907                           postdec2	equ	0xFDD
  4908                           plusw2	equ	0xFDB
  4909                           fsr2h	equ	0xFDA
  4910                           fsr2l	equ	0xFD9
  4911                           status	equ	0xFD8
  4912                           
  4913 ;; *************** function ___llmod *****************
  4914 ;; Defined at:
  4915 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  4916 ;; Parameters:    Size  Location     Type
  4917 ;;  dividend        4   13[BANK0 ] unsigned long 
  4918 ;;  divisor         4   17[BANK0 ] unsigned long 
  4919 ;; Auto vars:     Size  Location     Type
  4920 ;;  counter         1   21[BANK0 ] unsigned char 
  4921 ;; Return value:  Size  Location     Type
  4922 ;;                  4   13[BANK0 ] unsigned long 
  4923 ;; Registers used:
  4924 ;;		wreg, status,2, status,0
  4925 ;; Tracked objects:
  4926 ;;		On entry : 0/0
  4927 ;;		On exit  : 0/0
  4928 ;;		Unchanged: 0/0
  4929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4930 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4931 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4933 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4934 ;;Total ram usage:        9 bytes
  4935 ;; Hardware stack levels used:    1
  4936 ;; Hardware stack levels required when called:    4
  4937 ;; This function calls:
  4938 ;;		Nothing
  4939 ;; This function is called by:
  4940 ;;		__doprnt
  4941 ;; This function uses a non-reentrant model
  4942 ;;
  4943                           
  4944                           	psect	text8
  4945  002F38                     __ptext8:
  4946                           	opt stack 0
  4947  002F38                     ___llmod:
  4948                           	opt stack 23
  4949                           
  4950                           ; BSR set to: 0
  4951                           ;incstack = 0
  4952  002F38  0100               	movlb	0	; () banked
  4953  002F3A  5191               	movf	___llmod@divisor& (0+255),w,b
  4954  002F3C  1192               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  4955  002F3E  1193               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  4956  002F40  1194               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  4957  002F42  B4D8               	btfsc	status,2,c
  4958  002F44  D024               	goto	l1167
  4959                           
  4960                           ; BSR set to: 0
  4961  002F46  0E01               	movlw	1
  4962  002F48  6F95               	movwf	___llmod@counter& (0+255),b
  4963  002F4A  D006               	goto	l1162
  4964  002F4C                     
  4965                           ; BSR set to: 0
  4966                           
  4967                           ; BSR set to: 0
  4968  002F4C  90D8               	bcf	status,0,c
  4969  002F4E  3791               	rlcf	___llmod@divisor& (0+255),f,b
  4970  002F50  3792               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  4971  002F52  3793               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  4972  002F54  3794               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  4973  002F56  2B95               	incf	___llmod@counter& (0+255),f,b
  4974  002F58                     l1162:
  4975                           
  4976                           ; BSR set to: 0
  4977                           
  4978                           ; BSR set to: 0
  4979  002F58  AF94               	btfss	(___llmod@divisor+3)& (0+255),7,b
  4980  002F5A  D7F8               	goto	l1163
  4981  002F5C                     u5720:
  4982                           
  4983                           ; BSR set to: 0
  4984                           
  4985                           ; BSR set to: 0
  4986                           
  4987                           ; BSR set to: 0
  4988  002F5C  5191               	movf	___llmod@divisor& (0+255),w,b
  4989  002F5E  5D8D               	subwf	___llmod@dividend& (0+255),w,b
  4990  002F60  5192               	movf	(___llmod@divisor+1)& (0+255),w,b
  4991  002F62  598E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  4992  002F64  5193               	movf	(___llmod@divisor+2)& (0+255),w,b
  4993  002F66  598F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  4994  002F68  5194               	movf	(___llmod@divisor+3)& (0+255),w,b
  4995  002F6A  5990               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  4996  002F6C  A0D8               	btfss	status,0,c
  4997  002F6E  D008               	goto	l1166
  4998                           
  4999                           ; BSR set to: 0
  5000  002F70  5191               	movf	___llmod@divisor& (0+255),w,b
  5001  002F72  5F8D               	subwf	___llmod@dividend& (0+255),f,b
  5002  002F74  5192               	movf	(___llmod@divisor+1)& (0+255),w,b
  5003  002F76  5B8E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  5004  002F78  5193               	movf	(___llmod@divisor+2)& (0+255),w,b
  5005  002F7A  5B8F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  5006  002F7C  5194               	movf	(___llmod@divisor+3)& (0+255),w,b
  5007  002F7E  5B90               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  5008  002F80                     l1166:
  5009                           
  5010                           ; BSR set to: 0
  5011                           
  5012                           ; BSR set to: 0
  5013  002F80  90D8               	bcf	status,0,c
  5014  002F82  3394               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  5015  002F84  3393               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  5016  002F86  3392               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  5017  002F88  3391               	rrcf	___llmod@divisor& (0+255),f,b
  5018                           
  5019                           ; BSR set to: 0
  5020  002F8A  2F95               	decfsz	___llmod@counter& (0+255),f,b
  5021  002F8C  D7E7               	goto	u5720
  5022  002F8E                     l1167:
  5023                           
  5024                           ; BSR set to: 0
  5025                           
  5026                           ; BSR set to: 0
  5027  002F8E  C08D  F08D         	movff	___llmod@dividend,?___llmod
  5028  002F92  C08E  F08E         	movff	___llmod@dividend+1,?___llmod+1
  5029  002F96  C08F  F08F         	movff	___llmod@dividend+2,?___llmod+2
  5030  002F9A  C090  F090         	movff	___llmod@dividend+3,?___llmod+3
  5031                           
  5032                           ; BSR set to: 0
  5033  002F9E  0012               	return		;funcret
  5034  002FA0                     __end_of___llmod:
  5035                           	opt stack 0
  5036                           tosu	equ	0xFFF
  5037                           tosh	equ	0xFFE
  5038                           tosl	equ	0xFFD
  5039                           pclath	equ	0xFFA
  5040                           tblptru	equ	0xFF8
  5041                           tblptrh	equ	0xFF7
  5042                           tblptrl	equ	0xFF6
  5043                           tablat	equ	0xFF5
  5044                           prodh	equ	0xFF4
  5045                           prodl	equ	0xFF3
  5046                           intcon	equ	0xFF2
  5047                           indf0	equ	0xFEF
  5048                           postinc0	equ	0xFEE
  5049                           fsr0h	equ	0xFEA
  5050                           fsr0l	equ	0xFE9
  5051                           wreg	equ	0xFE8
  5052                           postdec1	equ	0xFE5
  5053                           plusw1	equ	0xFE3
  5054                           fsr1l	equ	0xFE1
  5055                           indf2	equ	0xFDF
  5056                           postinc2	equ	0xFDE
  5057                           postdec2	equ	0xFDD
  5058                           plusw2	equ	0xFDB
  5059                           fsr2h	equ	0xFDA
  5060                           fsr2l	equ	0xFD9
  5061                           status	equ	0xFD8
  5062                           
  5063 ;; *************** function _packageCompartment *****************
  5064 ;; Defined at:
  5065 ;;		line 25 in file "main.c"
  5066 ;; Parameters:    Size  Location     Type
  5067 ;;  b               1    wreg     unsigned char 
  5068 ;;  n               1   29[BANK0 ] unsigned char 
  5069 ;;  s               1   30[BANK0 ] unsigned char 
  5070 ;;  w               1   31[BANK0 ] unsigned char 
  5071 ;; Auto vars:     Size  Location     Type
  5072 ;;  b               1   37[BANK0 ] unsigned char 
  5073 ;;  currTime        3   66[BANK0 ] unsigned char 
  5074 ;;  timeW           3   47[BANK0 ] unsigned char 
  5075 ;;  timeS           3   44[BANK0 ] unsigned char 
  5076 ;;  timeN           3   41[BANK0 ] unsigned char 
  5077 ;;  timeB           3   38[BANK0 ] unsigned char 
  5078 ;;  instr           2   35[BANK0 ] unsigned char [2]
  5079 ;;  doneW           2   64[BANK0 ] int 
  5080 ;;  doneS           2   62[BANK0 ] int 
  5081 ;;  doneN           2   60[BANK0 ] int 
  5082 ;;  doneB           2   58[BANK0 ] int 
  5083 ;;  numW            2   56[BANK0 ] int 
  5084 ;;  numS            2   54[BANK0 ] int 
  5085 ;;  numN            2   52[BANK0 ] int 
  5086 ;;  numB            2   50[BANK0 ] int 
  5087 ;; Return value:  Size  Location     Type
  5088 ;;                  1    wreg      void 
  5089 ;; Registers used:
  5090 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5091 ;; Tracked objects:
  5092 ;;		On entry : 0/0
  5093 ;;		On exit  : 0/0
  5094 ;;		Unchanged: 0/0
  5095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5096 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5097 ;;      Locals:         0      34       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5098 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5099 ;;      Totals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5100 ;;Total ram usage:       40 bytes
  5101 ;; Hardware stack levels used:    1
  5102 ;; Hardware stack levels required when called:    7
  5103 ;; This function calls:
  5104 ;;		_I2C_Send
  5105 ;;		___ftadd
  5106 ;;		___ftge
  5107 ;;		_motorControl
  5108 ;;		_tic
  5109 ;;		_tock
  5110 ;; This function is called by:
  5111 ;;		_packaging
  5112 ;; This function uses a non-reentrant model
  5113 ;;
  5114                           
  5115                           	psect	text9
  5116  001084                     __ptext9:
  5117                           	opt stack 0
  5118  001084                     _packageCompartment:
  5119                           	opt stack 21
  5120                           
  5121                           ; BSR set to: 0
  5122                           ;incstack = 0
  5123                           ;packageCompartment@b stored from wreg
  5124  001084  0100               	movlb	0	; () banked
  5125  001086  6FA5               	movwf	packageCompartment@b& (0+255),b
  5126                           
  5127                           ;main.c: 26: currentMode = PACKAGING;
  5128  001088  0E00               	movlw	0
  5129  00108A  6E49               	movwf	_currentMode+1,c
  5130  00108C  0E02               	movlw	2
  5131  00108E  6E48               	movwf	_currentMode,c
  5132                           
  5133                           ;main.c: 27: TRISA = 0xFF;
  5134  001090  6892               	setf	3986,c	;volatile
  5135                           
  5136                           ;main.c: 30: motorControl(BOLT, FORWARD);
  5137  001092  0E00               	movlw	0
  5138  001094  0100               	movlb	0	; () banked
  5139  001096  6F80               	movwf	motorControl@dir& (0+255),b
  5140  001098  0E00               	movlw	0
  5141  00109A  EC66  F013         	call	_motorControl
  5142                           
  5143                           ;main.c: 31: motorControl(NUT, FORWARD);
  5144  00109E  0E00               	movlw	0
  5145  0010A0  0100               	movlb	0	; () banked
  5146  0010A2  6F80               	movwf	motorControl@dir& (0+255),b
  5147  0010A4  0E01               	movlw	1
  5148  0010A6  EC66  F013         	call	_motorControl
  5149                           
  5150                           ;main.c: 32: motorControl(SPACER, FORWARD);
  5151  0010AA  0E00               	movlw	0
  5152  0010AC  0100               	movlb	0	; () banked
  5153  0010AE  6F80               	movwf	motorControl@dir& (0+255),b
  5154  0010B0  0E02               	movlw	2
  5155  0010B2  EC66  F013         	call	_motorControl
  5156                           
  5157                           ;main.c: 33: motorControl(WASHER, FORWARD);
  5158  0010B6  0E00               	movlw	0
  5159  0010B8  0100               	movlb	0	; () banked
  5160  0010BA  6F80               	movwf	motorControl@dir& (0+255),b
  5161  0010BC  0E03               	movlw	3
  5162  0010BE  EC66  F013         	call	_motorControl
  5163                           
  5164                           ;main.c: 35: int numB=0, numN=0, numS=0, numW=0;
  5165  0010C2  0E00               	movlw	0
  5166  0010C4  0100               	movlb	0	; () banked
  5167  0010C6  6FB3               	movwf	(packageCompartment@numB+1)& (0+255),b
  5168  0010C8  0E00               	movlw	0
  5169  0010CA  6FB2               	movwf	packageCompartment@numB& (0+255),b
  5170                           
  5171                           ; BSR set to: 0
  5172  0010CC  0E00               	movlw	0
  5173  0010CE  6FB5               	movwf	(packageCompartment@numN+1)& (0+255),b
  5174  0010D0  0E00               	movlw	0
  5175  0010D2  6FB4               	movwf	packageCompartment@numN& (0+255),b
  5176                           
  5177                           ; BSR set to: 0
  5178  0010D4  0E00               	movlw	0
  5179  0010D6  6FB7               	movwf	(packageCompartment@numS+1)& (0+255),b
  5180  0010D8  0E00               	movlw	0
  5181  0010DA  6FB6               	movwf	packageCompartment@numS& (0+255),b
  5182                           
  5183                           ; BSR set to: 0
  5184  0010DC  0E00               	movlw	0
  5185  0010DE  6FB9               	movwf	(packageCompartment@numW+1)& (0+255),b
  5186  0010E0  0E00               	movlw	0
  5187  0010E2  6FB8               	movwf	packageCompartment@numW& (0+255),b
  5188                           
  5189                           ; BSR set to: 0
  5190                           ;main.c: 36: int doneB=0, doneN=0, doneS=0, doneW=0;
  5191  0010E4  0E00               	movlw	0
  5192  0010E6  6FBB               	movwf	(packageCompartment@doneB+1)& (0+255),b
  5193  0010E8  0E00               	movlw	0
  5194  0010EA  6FBA               	movwf	packageCompartment@doneB& (0+255),b
  5195                           
  5196                           ; BSR set to: 0
  5197  0010EC  0E00               	movlw	0
  5198  0010EE  6FBD               	movwf	(packageCompartment@doneN+1)& (0+255),b
  5199  0010F0  0E00               	movlw	0
  5200  0010F2  6FBC               	movwf	packageCompartment@doneN& (0+255),b
  5201                           
  5202                           ; BSR set to: 0
  5203  0010F4  0E00               	movlw	0
  5204  0010F6  6FBF               	movwf	(packageCompartment@doneS+1)& (0+255),b
  5205  0010F8  0E00               	movlw	0
  5206  0010FA  6FBE               	movwf	packageCompartment@doneS& (0+255),b
  5207                           
  5208                           ; BSR set to: 0
  5209  0010FC  0E00               	movlw	0
  5210  0010FE  6FC1               	movwf	(packageCompartment@doneW+1)& (0+255),b
  5211  001100  0E00               	movlw	0
  5212  001102  6FC0               	movwf	packageCompartment@doneW& (0+255),b
  5213                           
  5214                           ; BSR set to: 0
  5215                           ;main.c: 37: double currTime, timeB=0, timeN=0, timeS=0, timeW=0;
  5216  001104  0E00               	movlw	0
  5217  001106  6FA6               	movwf	packageCompartment@timeB& (0+255),b
  5218  001108  0E00               	movlw	0
  5219  00110A  6FA7               	movwf	(packageCompartment@timeB+1)& (0+255),b
  5220  00110C  0E00               	movlw	0
  5221  00110E  6FA8               	movwf	(packageCompartment@timeB+2)& (0+255),b
  5222                           
  5223                           ; BSR set to: 0
  5224  001110  0E00               	movlw	0
  5225  001112  6FA9               	movwf	packageCompartment@timeN& (0+255),b
  5226  001114  0E00               	movlw	0
  5227  001116  6FAA               	movwf	(packageCompartment@timeN+1)& (0+255),b
  5228  001118  0E00               	movlw	0
  5229  00111A  6FAB               	movwf	(packageCompartment@timeN+2)& (0+255),b
  5230                           
  5231                           ; BSR set to: 0
  5232  00111C  0E00               	movlw	0
  5233  00111E  6FAC               	movwf	packageCompartment@timeS& (0+255),b
  5234  001120  0E00               	movlw	0
  5235  001122  6FAD               	movwf	(packageCompartment@timeS+1)& (0+255),b
  5236  001124  0E00               	movlw	0
  5237  001126  6FAE               	movwf	(packageCompartment@timeS+2)& (0+255),b
  5238                           
  5239                           ; BSR set to: 0
  5240  001128  0E00               	movlw	0
  5241  00112A  6FAF               	movwf	packageCompartment@timeW& (0+255),b
  5242  00112C  0E00               	movlw	0
  5243  00112E  6FB0               	movwf	(packageCompartment@timeW+1)& (0+255),b
  5244  001130  0E00               	movlw	0
  5245  001132  6FB1               	movwf	(packageCompartment@timeW+2)& (0+255),b
  5246                           
  5247                           ; BSR set to: 0
  5248                           ;main.c: 39: tic();
  5249  001134  ECB2  F019         	call	_tic	;wreg free
  5250  001138                     
  5251                           ;main.c: 41: currTime = tock();
  5252  001138  ECAB  F019         	call	_tock	;wreg free
  5253  00113C  C080  F0C2         	movff	?_tock,packageCompartment@currTime
  5254  001140  C081  F0C3         	movff	?_tock+1,packageCompartment@currTime+1
  5255  001144  C082  F0C4         	movff	?_tock+2,packageCompartment@currTime+2
  5256                           
  5257                           ;main.c: 53: if (PORTAbits.RA3 == 0 && currTime > timeB + 1) {
  5258  001148  B680               	btfsc	3968,3,c	;volatile
  5259  00114A  D038               	goto	l100
  5260  00114C  0E00               	movlw	0
  5261  00114E  0100               	movlb	0	; () banked
  5262  001150  6F8B               	movwf	___ftadd@f2& (0+255),b
  5263  001152  0E80               	movlw	128
  5264  001154  6F8C               	movwf	(___ftadd@f2+1)& (0+255),b
  5265  001156  0E3F               	movlw	63
  5266  001158  6F8D               	movwf	(___ftadd@f2+2)& (0+255),b
  5267  00115A  C0A6  F088         	movff	packageCompartment@timeB,___ftadd@f1
  5268  00115E  C0A7  F089         	movff	packageCompartment@timeB+1,___ftadd@f1+1
  5269  001162  C0A8  F08A         	movff	packageCompartment@timeB+2,___ftadd@f1+2
  5270  001166  EC21  F011         	call	___ftadd	;wreg free
  5271  00116A  C088  F094         	movff	?___ftadd,___ftge@ff1
  5272  00116E  C089  F095         	movff	?___ftadd+1,___ftge@ff1+1
  5273  001172  C08A  F096         	movff	?___ftadd+2,___ftge@ff1+2
  5274  001176  C0C2  F097         	movff	packageCompartment@currTime,___ftge@ff2
  5275  00117A  C0C3  F098         	movff	packageCompartment@currTime+1,___ftge@ff2+1
  5276  00117E  C0C4  F099         	movff	packageCompartment@currTime+2,___ftge@ff2+2
  5277  001182  ECD3  F015         	call	___ftge	;wreg free
  5278  001186  0100               	movlb	0	; () banked
  5279  001188  B0D8               	btfsc	status,0,c
  5280  00118A  D018               	goto	l100
  5281                           
  5282                           ; BSR set to: 0
  5283                           ;main.c: 54: timeB = currTime;
  5284  00118C  C0C2  F0A6         	movff	packageCompartment@currTime,packageCompartment@timeB
  5285  001190  C0C3  F0A7         	movff	packageCompartment@currTime+1,packageCompartment@timeB+1
  5286  001194  C0C4  F0A8         	movff	packageCompartment@currTime+2,packageCompartment@timeB+2
  5287                           
  5288                           ; BSR set to: 0
  5289                           ;main.c: 55: numB++;
  5290  001198  4BB2               	infsnz	packageCompartment@numB& (0+255),f,b
  5291  00119A  2BB3               	incf	(packageCompartment@numB+1)& (0+255),f,b
  5292                           
  5293                           ;main.c: 56: dispensed.b++;
  5294  00119C  4BDC               	infsnz	_dispensed& (0+255),f,b
  5295  00119E  2BDD               	incf	(_dispensed+1)& (0+255),f,b
  5296                           
  5297                           ; BSR set to: 0
  5298                           ;main.c: 57: I2C_Send(nanoAddr, "\1Bolt Counted\0");
  5299  0011A0  0E77               	movlw	low STR_1
  5300  0011A2  6F83               	movwf	I2C_Send@data& (0+255),b
  5301  0011A4  0EFF               	movlw	high STR_1
  5302  0011A6  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  5303  0011A8  0E3F               	movlw	low _nanoAddr
  5304  0011AA  6EF6               	movwf	tblptrl,c
  5305  0011AC                     	if	1	;There is more than 1 active tblptr byte
  5306  0011AC  0EFC               	movlw	high _nanoAddr
  5307  0011AE  6EF7               	movwf	tblptrh,c
  5308  0011B0                     	endif
  5309  0011B0                     	if	1	;There are 3 active tblptr bytes
  5310  0011B0  0E00               	movlw	low (_nanoAddr shr (0+16))
  5311  0011B2  6EF8               	movwf	tblptru,c
  5312  0011B4                     	endif
  5313  0011B4  0008               	tblrd		*
  5314  0011B6  50F5               	movf	tablat,w,c
  5315  0011B8  EC83  F015         	call	_I2C_Send
  5316  0011BC                     l100:
  5317                           
  5318                           ;main.c: 58: }
  5319                           ;main.c: 61: if (PORTAbits.RA1 == 0 && currTime > timeN + 1) {
  5320  0011BC  B280               	btfsc	3968,1,c	;volatile
  5321  0011BE  D038               	goto	l101
  5322  0011C0  0E00               	movlw	0
  5323  0011C2  0100               	movlb	0	; () banked
  5324  0011C4  6F8B               	movwf	___ftadd@f2& (0+255),b
  5325  0011C6  0E80               	movlw	128
  5326  0011C8  6F8C               	movwf	(___ftadd@f2+1)& (0+255),b
  5327  0011CA  0E3F               	movlw	63
  5328  0011CC  6F8D               	movwf	(___ftadd@f2+2)& (0+255),b
  5329  0011CE  C0A9  F088         	movff	packageCompartment@timeN,___ftadd@f1
  5330  0011D2  C0AA  F089         	movff	packageCompartment@timeN+1,___ftadd@f1+1
  5331  0011D6  C0AB  F08A         	movff	packageCompartment@timeN+2,___ftadd@f1+2
  5332  0011DA  EC21  F011         	call	___ftadd	;wreg free
  5333  0011DE  C088  F094         	movff	?___ftadd,___ftge@ff1
  5334  0011E2  C089  F095         	movff	?___ftadd+1,___ftge@ff1+1
  5335  0011E6  C08A  F096         	movff	?___ftadd+2,___ftge@ff1+2
  5336  0011EA  C0C2  F097         	movff	packageCompartment@currTime,___ftge@ff2
  5337  0011EE  C0C3  F098         	movff	packageCompartment@currTime+1,___ftge@ff2+1
  5338  0011F2  C0C4  F099         	movff	packageCompartment@currTime+2,___ftge@ff2+2
  5339  0011F6  ECD3  F015         	call	___ftge	;wreg free
  5340  0011FA  0100               	movlb	0	; () banked
  5341  0011FC  B0D8               	btfsc	status,0,c
  5342  0011FE  D018               	goto	l101
  5343                           
  5344                           ; BSR set to: 0
  5345                           ;main.c: 62: timeN = currTime;
  5346  001200  C0C2  F0A9         	movff	packageCompartment@currTime,packageCompartment@timeN
  5347  001204  C0C3  F0AA         	movff	packageCompartment@currTime+1,packageCompartment@timeN+1
  5348  001208  C0C4  F0AB         	movff	packageCompartment@currTime+2,packageCompartment@timeN+2
  5349                           
  5350                           ; BSR set to: 0
  5351                           ;main.c: 63: numN++;
  5352  00120C  4BB4               	infsnz	packageCompartment@numN& (0+255),f,b
  5353  00120E  2BB5               	incf	(packageCompartment@numN+1)& (0+255),f,b
  5354                           
  5355                           ;main.c: 64: dispensed.n++;
  5356  001210  4BDE               	infsnz	(_dispensed+2)& (0+255),f,b
  5357  001212  2BDF               	incf	(_dispensed+3)& (0+255),f,b
  5358                           
  5359                           ; BSR set to: 0
  5360                           ;main.c: 65: I2C_Send(nanoAddr, "\1Nut Counted\0");
  5361  001214  0EB2               	movlw	low STR_2
  5362  001216  6F83               	movwf	I2C_Send@data& (0+255),b
  5363  001218  0EFF               	movlw	high STR_2
  5364  00121A  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  5365  00121C  0E3F               	movlw	low _nanoAddr
  5366  00121E  6EF6               	movwf	tblptrl,c
  5367  001220                     	if	1	;There is more than 1 active tblptr byte
  5368  001220  0EFC               	movlw	high _nanoAddr
  5369  001222  6EF7               	movwf	tblptrh,c
  5370  001224                     	endif
  5371  001224                     	if	1	;There are 3 active tblptr bytes
  5372  001224  0E00               	movlw	low (_nanoAddr shr (0+16))
  5373  001226  6EF8               	movwf	tblptru,c
  5374  001228                     	endif
  5375  001228  0008               	tblrd		*
  5376  00122A  50F5               	movf	tablat,w,c
  5377  00122C  EC83  F015         	call	_I2C_Send
  5378  001230                     l101:
  5379                           
  5380                           ;main.c: 66: }
  5381                           ;main.c: 69: if (PORTAbits.RA0 == 0 && currTime > timeS + 1) {
  5382  001230  B080               	btfsc	3968,0,c	;volatile
  5383  001232  D038               	goto	l102
  5384  001234  0E00               	movlw	0
  5385  001236  0100               	movlb	0	; () banked
  5386  001238  6F8B               	movwf	___ftadd@f2& (0+255),b
  5387  00123A  0E80               	movlw	128
  5388  00123C  6F8C               	movwf	(___ftadd@f2+1)& (0+255),b
  5389  00123E  0E3F               	movlw	63
  5390  001240  6F8D               	movwf	(___ftadd@f2+2)& (0+255),b
  5391  001242  C0AC  F088         	movff	packageCompartment@timeS,___ftadd@f1
  5392  001246  C0AD  F089         	movff	packageCompartment@timeS+1,___ftadd@f1+1
  5393  00124A  C0AE  F08A         	movff	packageCompartment@timeS+2,___ftadd@f1+2
  5394  00124E  EC21  F011         	call	___ftadd	;wreg free
  5395  001252  C088  F094         	movff	?___ftadd,___ftge@ff1
  5396  001256  C089  F095         	movff	?___ftadd+1,___ftge@ff1+1
  5397  00125A  C08A  F096         	movff	?___ftadd+2,___ftge@ff1+2
  5398  00125E  C0C2  F097         	movff	packageCompartment@currTime,___ftge@ff2
  5399  001262  C0C3  F098         	movff	packageCompartment@currTime+1,___ftge@ff2+1
  5400  001266  C0C4  F099         	movff	packageCompartment@currTime+2,___ftge@ff2+2
  5401  00126A  ECD3  F015         	call	___ftge	;wreg free
  5402  00126E  0100               	movlb	0	; () banked
  5403  001270  B0D8               	btfsc	status,0,c
  5404  001272  D018               	goto	l102
  5405                           
  5406                           ; BSR set to: 0
  5407                           ;main.c: 70: timeS = currTime;
  5408  001274  C0C2  F0AC         	movff	packageCompartment@currTime,packageCompartment@timeS
  5409  001278  C0C3  F0AD         	movff	packageCompartment@currTime+1,packageCompartment@timeS+1
  5410  00127C  C0C4  F0AE         	movff	packageCompartment@currTime+2,packageCompartment@timeS+2
  5411                           
  5412                           ; BSR set to: 0
  5413                           ;main.c: 71: numS++;
  5414  001280  4BB6               	infsnz	packageCompartment@numS& (0+255),f,b
  5415  001282  2BB7               	incf	(packageCompartment@numS+1)& (0+255),f,b
  5416                           
  5417                           ;main.c: 72: dispensed.s++;
  5418  001284  4BE0               	infsnz	(_dispensed+4)& (0+255),f,b
  5419  001286  2BE1               	incf	(_dispensed+5)& (0+255),f,b
  5420                           
  5421                           ; BSR set to: 0
  5422                           ;main.c: 73: I2C_Send(nanoAddr, "\1Spacer Counted\0");
  5423  001288  0E23               	movlw	low STR_3
  5424  00128A  6F83               	movwf	I2C_Send@data& (0+255),b
  5425  00128C  0EFF               	movlw	high STR_3
  5426  00128E  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  5427  001290  0E3F               	movlw	low _nanoAddr
  5428  001292  6EF6               	movwf	tblptrl,c
  5429  001294                     	if	1	;There is more than 1 active tblptr byte
  5430  001294  0EFC               	movlw	high _nanoAddr
  5431  001296  6EF7               	movwf	tblptrh,c
  5432  001298                     	endif
  5433  001298                     	if	1	;There are 3 active tblptr bytes
  5434  001298  0E00               	movlw	low (_nanoAddr shr (0+16))
  5435  00129A  6EF8               	movwf	tblptru,c
  5436  00129C                     	endif
  5437  00129C  0008               	tblrd		*
  5438  00129E  50F5               	movf	tablat,w,c
  5439  0012A0  EC83  F015         	call	_I2C_Send
  5440  0012A4                     l102:
  5441                           
  5442                           ;main.c: 74: }
  5443                           ;main.c: 77: if (PORTAbits.RA2 == 0 && currTime > timeW + 1) {
  5444  0012A4  B480               	btfsc	3968,2,c	;volatile
  5445  0012A6  D038               	goto	l103
  5446  0012A8  0E00               	movlw	0
  5447  0012AA  0100               	movlb	0	; () banked
  5448  0012AC  6F8B               	movwf	___ftadd@f2& (0+255),b
  5449  0012AE  0E80               	movlw	128
  5450  0012B0  6F8C               	movwf	(___ftadd@f2+1)& (0+255),b
  5451  0012B2  0E3F               	movlw	63
  5452  0012B4  6F8D               	movwf	(___ftadd@f2+2)& (0+255),b
  5453  0012B6  C0AF  F088         	movff	packageCompartment@timeW,___ftadd@f1
  5454  0012BA  C0B0  F089         	movff	packageCompartment@timeW+1,___ftadd@f1+1
  5455  0012BE  C0B1  F08A         	movff	packageCompartment@timeW+2,___ftadd@f1+2
  5456  0012C2  EC21  F011         	call	___ftadd	;wreg free
  5457  0012C6  C088  F094         	movff	?___ftadd,___ftge@ff1
  5458  0012CA  C089  F095         	movff	?___ftadd+1,___ftge@ff1+1
  5459  0012CE  C08A  F096         	movff	?___ftadd+2,___ftge@ff1+2
  5460  0012D2  C0C2  F097         	movff	packageCompartment@currTime,___ftge@ff2
  5461  0012D6  C0C3  F098         	movff	packageCompartment@currTime+1,___ftge@ff2+1
  5462  0012DA  C0C4  F099         	movff	packageCompartment@currTime+2,___ftge@ff2+2
  5463  0012DE  ECD3  F015         	call	___ftge	;wreg free
  5464  0012E2  0100               	movlb	0	; () banked
  5465  0012E4  B0D8               	btfsc	status,0,c
  5466  0012E6  D018               	goto	l103
  5467                           
  5468                           ; BSR set to: 0
  5469                           ;main.c: 78: timeW = currTime;
  5470  0012E8  C0C2  F0AF         	movff	packageCompartment@currTime,packageCompartment@timeW
  5471  0012EC  C0C3  F0B0         	movff	packageCompartment@currTime+1,packageCompartment@timeW+1
  5472  0012F0  C0C4  F0B1         	movff	packageCompartment@currTime+2,packageCompartment@timeW+2
  5473                           
  5474                           ; BSR set to: 0
  5475                           ;main.c: 79: numW++;
  5476  0012F4  4BB8               	infsnz	packageCompartment@numW& (0+255),f,b
  5477  0012F6  2BB9               	incf	(packageCompartment@numW+1)& (0+255),f,b
  5478                           
  5479                           ;main.c: 80: dispensed.w++;
  5480  0012F8  4BE2               	infsnz	(_dispensed+6)& (0+255),f,b
  5481  0012FA  2BE3               	incf	(_dispensed+7)& (0+255),f,b
  5482                           
  5483                           ; BSR set to: 0
  5484                           ;main.c: 81: I2C_Send(nanoAddr, "\1Washer Counted\0");
  5485  0012FC  0E34               	movlw	low STR_4
  5486  0012FE  6F83               	movwf	I2C_Send@data& (0+255),b
  5487  001300  0EFF               	movlw	high STR_4
  5488  001302  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  5489  001304  0E3F               	movlw	low _nanoAddr
  5490  001306  6EF6               	movwf	tblptrl,c
  5491  001308                     	if	1	;There is more than 1 active tblptr byte
  5492  001308  0EFC               	movlw	high _nanoAddr
  5493  00130A  6EF7               	movwf	tblptrh,c
  5494  00130C                     	endif
  5495  00130C                     	if	1	;There are 3 active tblptr bytes
  5496  00130C  0E00               	movlw	low (_nanoAddr shr (0+16))
  5497  00130E  6EF8               	movwf	tblptru,c
  5498  001310                     	endif
  5499  001310  0008               	tblrd		*
  5500  001312  50F5               	movf	tablat,w,c
  5501  001314  EC83  F015         	call	_I2C_Send
  5502  001318                     l103:
  5503                           
  5504                           ;main.c: 82: }
  5505                           ;main.c: 85: if (numB >= b) {
  5506  001318  0100               	movlb	0	; () banked
  5507  00131A  51A5               	movf	packageCompartment@b& (0+255),w,b
  5508  00131C  6FA0               	movwf	??_packageCompartment& (0+255),b
  5509  00131E  6BA1               	clrf	(??_packageCompartment+1)& (0+255),b
  5510  001320  51A0               	movf	??_packageCompartment& (0+255),w,b
  5511  001322  5DB2               	subwf	packageCompartment@numB& (0+255),w,b
  5512  001324  51B3               	movf	(packageCompartment@numB+1)& (0+255),w,b
  5513  001326  0A80               	xorlw	128
  5514  001328  6FA2               	movwf	(??_packageCompartment+2)& (0+255),b
  5515  00132A  51A1               	movf	(??_packageCompartment+1)& (0+255),w,b
  5516  00132C  0A80               	xorlw	128
  5517  00132E  59A2               	subwfb	(??_packageCompartment+2)& (0+255),w,b
  5518  001330  A0D8               	btfss	status,0,c
  5519  001332  D00A               	goto	l104
  5520                           
  5521                           ; BSR set to: 0
  5522                           ;main.c: 86: motorControl(BOLT, STOPMOTOR);
  5523  001334  0E02               	movlw	2
  5524  001336  6F80               	movwf	motorControl@dir& (0+255),b
  5525  001338  0E00               	movlw	0
  5526  00133A  EC66  F013         	call	_motorControl
  5527                           
  5528                           ;main.c: 87: doneB=1;
  5529  00133E  0E00               	movlw	0
  5530  001340  0100               	movlb	0	; () banked
  5531  001342  6FBB               	movwf	(packageCompartment@doneB+1)& (0+255),b
  5532  001344  0E01               	movlw	1
  5533  001346  6FBA               	movwf	packageCompartment@doneB& (0+255),b
  5534  001348                     l104:
  5535                           
  5536                           ; BSR set to: 0
  5537                           ;main.c: 88: }
  5538                           ;main.c: 89: if (numN >= n) {
  5539                           
  5540                           ; BSR set to: 0
  5541  001348  519D               	movf	packageCompartment@n& (0+255),w,b
  5542  00134A  6FA0               	movwf	??_packageCompartment& (0+255),b
  5543  00134C  6BA1               	clrf	(??_packageCompartment+1)& (0+255),b
  5544  00134E  51A0               	movf	??_packageCompartment& (0+255),w,b
  5545  001350  5DB4               	subwf	packageCompartment@numN& (0+255),w,b
  5546  001352  51B5               	movf	(packageCompartment@numN+1)& (0+255),w,b
  5547  001354  0A80               	xorlw	128
  5548  001356  6FA2               	movwf	(??_packageCompartment+2)& (0+255),b
  5549  001358  51A1               	movf	(??_packageCompartment+1)& (0+255),w,b
  5550  00135A  0A80               	xorlw	128
  5551  00135C  59A2               	subwfb	(??_packageCompartment+2)& (0+255),w,b
  5552  00135E  A0D8               	btfss	status,0,c
  5553  001360  D00A               	goto	l105
  5554                           
  5555                           ; BSR set to: 0
  5556                           ;main.c: 90: motorControl(NUT, STOPMOTOR);
  5557  001362  0E02               	movlw	2
  5558  001364  6F80               	movwf	motorControl@dir& (0+255),b
  5559  001366  0E01               	movlw	1
  5560  001368  EC66  F013         	call	_motorControl
  5561                           
  5562                           ;main.c: 91: doneN=1;
  5563  00136C  0E00               	movlw	0
  5564  00136E  0100               	movlb	0	; () banked
  5565  001370  6FBD               	movwf	(packageCompartment@doneN+1)& (0+255),b
  5566  001372  0E01               	movlw	1
  5567  001374  6FBC               	movwf	packageCompartment@doneN& (0+255),b
  5568  001376                     l105:
  5569                           
  5570                           ; BSR set to: 0
  5571                           ;main.c: 92: }
  5572                           ;main.c: 93: if (numS >= s) {
  5573                           
  5574                           ; BSR set to: 0
  5575  001376  519E               	movf	packageCompartment@s& (0+255),w,b
  5576  001378  6FA0               	movwf	??_packageCompartment& (0+255),b
  5577  00137A  6BA1               	clrf	(??_packageCompartment+1)& (0+255),b
  5578  00137C  51A0               	movf	??_packageCompartment& (0+255),w,b
  5579  00137E  5DB6               	subwf	packageCompartment@numS& (0+255),w,b
  5580  001380  51B7               	movf	(packageCompartment@numS+1)& (0+255),w,b
  5581  001382  0A80               	xorlw	128
  5582  001384  6FA2               	movwf	(??_packageCompartment+2)& (0+255),b
  5583  001386  51A1               	movf	(??_packageCompartment+1)& (0+255),w,b
  5584  001388  0A80               	xorlw	128
  5585  00138A  59A2               	subwfb	(??_packageCompartment+2)& (0+255),w,b
  5586  00138C  A0D8               	btfss	status,0,c
  5587  00138E  D00A               	goto	l106
  5588                           
  5589                           ; BSR set to: 0
  5590                           ;main.c: 94: motorControl(SPACER, STOPMOTOR);
  5591  001390  0E02               	movlw	2
  5592  001392  6F80               	movwf	motorControl@dir& (0+255),b
  5593  001394  0E02               	movlw	2
  5594  001396  EC66  F013         	call	_motorControl
  5595                           
  5596                           ;main.c: 95: doneS=1;
  5597  00139A  0E00               	movlw	0
  5598  00139C  0100               	movlb	0	; () banked
  5599  00139E  6FBF               	movwf	(packageCompartment@doneS+1)& (0+255),b
  5600  0013A0  0E01               	movlw	1
  5601  0013A2  6FBE               	movwf	packageCompartment@doneS& (0+255),b
  5602  0013A4                     l106:
  5603                           
  5604                           ; BSR set to: 0
  5605                           ;main.c: 96: }
  5606                           ;main.c: 97: if (numW >= w) {
  5607                           
  5608                           ; BSR set to: 0
  5609  0013A4  519F               	movf	packageCompartment@w& (0+255),w,b
  5610  0013A6  6FA0               	movwf	??_packageCompartment& (0+255),b
  5611  0013A8  6BA1               	clrf	(??_packageCompartment+1)& (0+255),b
  5612  0013AA  51A0               	movf	??_packageCompartment& (0+255),w,b
  5613  0013AC  5DB8               	subwf	packageCompartment@numW& (0+255),w,b
  5614  0013AE  51B9               	movf	(packageCompartment@numW+1)& (0+255),w,b
  5615  0013B0  0A80               	xorlw	128
  5616  0013B2  6FA2               	movwf	(??_packageCompartment+2)& (0+255),b
  5617  0013B4  51A1               	movf	(??_packageCompartment+1)& (0+255),w,b
  5618  0013B6  0A80               	xorlw	128
  5619  0013B8  59A2               	subwfb	(??_packageCompartment+2)& (0+255),w,b
  5620  0013BA  A0D8               	btfss	status,0,c
  5621  0013BC  D00A               	goto	l107
  5622                           
  5623                           ; BSR set to: 0
  5624                           ;main.c: 98: motorControl(WASHER, STOPMOTOR);
  5625  0013BE  0E02               	movlw	2
  5626  0013C0  6F80               	movwf	motorControl@dir& (0+255),b
  5627  0013C2  0E03               	movlw	3
  5628  0013C4  EC66  F013         	call	_motorControl
  5629                           
  5630                           ;main.c: 99: doneW=1;
  5631  0013C8  0E00               	movlw	0
  5632  0013CA  0100               	movlb	0	; () banked
  5633  0013CC  6FC1               	movwf	(packageCompartment@doneW+1)& (0+255),b
  5634  0013CE  0E01               	movlw	1
  5635  0013D0  6FC0               	movwf	packageCompartment@doneW& (0+255),b
  5636  0013D2                     l107:
  5637                           
  5638                           ; BSR set to: 0
  5639                           ;main.c: 100: }
  5640                           ;main.c: 102: if (doneB && doneN && doneS && doneW) {
  5641                           
  5642                           ; BSR set to: 0
  5643  0013D2  51BA               	movf	packageCompartment@doneB& (0+255),w,b
  5644  0013D4  11BB               	iorwf	(packageCompartment@doneB+1)& (0+255),w,b
  5645  0013D6  B4D8               	btfsc	status,2,c
  5646  0013D8  D6AF               	goto	l99
  5647                           
  5648                           ; BSR set to: 0
  5649  0013DA  51BC               	movf	packageCompartment@doneN& (0+255),w,b
  5650  0013DC  11BD               	iorwf	(packageCompartment@doneN+1)& (0+255),w,b
  5651  0013DE  B4D8               	btfsc	status,2,c
  5652  0013E0  D6AB               	goto	l99
  5653                           
  5654                           ; BSR set to: 0
  5655  0013E2  51BE               	movf	packageCompartment@doneS& (0+255),w,b
  5656  0013E4  11BF               	iorwf	(packageCompartment@doneS+1)& (0+255),w,b
  5657  0013E6  B4D8               	btfsc	status,2,c
  5658  0013E8  D6A7               	goto	l99
  5659                           
  5660                           ; BSR set to: 0
  5661  0013EA  51C0               	movf	packageCompartment@doneW& (0+255),w,b
  5662  0013EC  11C1               	iorwf	(packageCompartment@doneW+1)& (0+255),w,b
  5663  0013EE  B4D8               	btfsc	status,2,c
  5664  0013F0  D6A3               	goto	l99
  5665                           
  5666                           ; BSR set to: 0
  5667                           ;main.c: 103: I2C_Send(nanoAddr, "\1Done compartment\0");
  5668  0013F2  0EEE               	movlw	low STR_5
  5669  0013F4  6F83               	movwf	I2C_Send@data& (0+255),b
  5670  0013F6  0EFE               	movlw	high STR_5
  5671  0013F8  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  5672  0013FA  0E3F               	movlw	low _nanoAddr
  5673  0013FC  6EF6               	movwf	tblptrl,c
  5674  0013FE                     	if	1	;There is more than 1 active tblptr byte
  5675  0013FE  0EFC               	movlw	high _nanoAddr
  5676  001400  6EF7               	movwf	tblptrh,c
  5677  001402                     	endif
  5678  001402                     	if	1	;There are 3 active tblptr bytes
  5679  001402  0E00               	movlw	low (_nanoAddr shr (0+16))
  5680  001404  6EF8               	movwf	tblptru,c
  5681  001406                     	endif
  5682  001406  0008               	tblrd		*
  5683  001408  50F5               	movf	tablat,w,c
  5684  00140A  EC83  F015         	call	_I2C_Send
  5685                           
  5686                           ;main.c: 105: }
  5687                           ;main.c: 106: }
  5688                           ;main.c: 107: I2C_Send(nanoAddr, "\1Out of the packaging loop\0");
  5689                           
  5690                           ;main.c: 104: break;
  5691  00140E  0E61               	movlw	low STR_6
  5692  001410  0100               	movlb	0	; () banked
  5693  001412  6F83               	movwf	I2C_Send@data& (0+255),b
  5694  001414  0EFE               	movlw	high STR_6
  5695  001416  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  5696  001418  0E3F               	movlw	low _nanoAddr
  5697  00141A  6EF6               	movwf	tblptrl,c
  5698  00141C                     	if	1	;There is more than 1 active tblptr byte
  5699  00141C  0EFC               	movlw	high _nanoAddr
  5700  00141E  6EF7               	movwf	tblptrh,c
  5701  001420                     	endif
  5702  001420                     	if	1	;There are 3 active tblptr bytes
  5703  001420  0E00               	movlw	low (_nanoAddr shr (0+16))
  5704  001422  6EF8               	movwf	tblptru,c
  5705  001424                     	endif
  5706  001424  0008               	tblrd		*
  5707  001426  50F5               	movf	tablat,w,c
  5708  001428  EC83  F015         	call	_I2C_Send
  5709                           
  5710                           ;main.c: 108: _delay((unsigned long)((2000)*(40000000/4000.0)));
  5711  00142C  0E66               	movlw	102
  5712  00142E  0100               	movlb	0	; () banked
  5713  001430  6FA1               	movwf	(??_packageCompartment+1)& (0+255),b
  5714  001432  0E76               	movlw	118
  5715  001434  6FA0               	movwf	??_packageCompartment& (0+255),b
  5716  001436  0EC1               	movlw	193
  5717  001438                     u7877:
  5718  001438  2EE8               	decfsz	wreg,f,c
  5719  00143A  D7FE               	bra	u7877
  5720  00143C  2FA0               	decfsz	??_packageCompartment& (0+255),f,b
  5721  00143E  D7FC               	bra	u7877
  5722  001440  2FA1               	decfsz	(??_packageCompartment+1)& (0+255),f,b
  5723  001442  D7FA               	bra	u7877
  5724                           
  5725                           ;main.c: 111: char instr[] = {2, 0};
  5726  001444  C063  F0A3         	movff	packageCompartment@F3222,packageCompartment@instr
  5727  001448  C064  F0A4         	movff	packageCompartment@F3222+1,packageCompartment@instr+1
  5728                           
  5729                           ;main.c: 112: I2C_Send(nanoAddr, instr);
  5730  00144C  0EA3               	movlw	low packageCompartment@instr
  5731  00144E  0100               	movlb	0	; () banked
  5732  001450  6F83               	movwf	I2C_Send@data& (0+255),b
  5733  001452  0E00               	movlw	high packageCompartment@instr
  5734  001454  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  5735  001456  0E3F               	movlw	low _nanoAddr
  5736  001458  6EF6               	movwf	tblptrl,c
  5737  00145A                     	if	1	;There is more than 1 active tblptr byte
  5738  00145A  0EFC               	movlw	high _nanoAddr
  5739  00145C  6EF7               	movwf	tblptrh,c
  5740  00145E                     	endif
  5741  00145E                     	if	1	;There are 3 active tblptr bytes
  5742  00145E  0E00               	movlw	low (_nanoAddr shr (0+16))
  5743  001460  6EF8               	movwf	tblptru,c
  5744  001462                     	endif
  5745  001462  0008               	tblrd		*
  5746  001464  50F5               	movf	tablat,w,c
  5747  001466  EC83  F015         	call	_I2C_Send
  5748  00146A  AA80               	btfss	3968,5,c	;volatile
  5749  00146C  0012               	return	
  5750  00146E  D7FD               	goto	l114
  5751  001470                     __end_of_packageCompartment:
  5752                           	opt stack 0
  5753                           tosu	equ	0xFFF
  5754                           tosh	equ	0xFFE
  5755                           tosl	equ	0xFFD
  5756                           pclath	equ	0xFFA
  5757                           tblptru	equ	0xFF8
  5758                           tblptrh	equ	0xFF7
  5759                           tblptrl	equ	0xFF6
  5760                           tablat	equ	0xFF5
  5761                           prodh	equ	0xFF4
  5762                           prodl	equ	0xFF3
  5763                           intcon	equ	0xFF2
  5764                           indf0	equ	0xFEF
  5765                           postinc0	equ	0xFEE
  5766                           fsr0h	equ	0xFEA
  5767                           fsr0l	equ	0xFE9
  5768                           wreg	equ	0xFE8
  5769                           postdec1	equ	0xFE5
  5770                           plusw1	equ	0xFE3
  5771                           fsr1l	equ	0xFE1
  5772                           indf2	equ	0xFDF
  5773                           postinc2	equ	0xFDE
  5774                           postdec2	equ	0xFDD
  5775                           plusw2	equ	0xFDB
  5776                           fsr2h	equ	0xFDA
  5777                           fsr2l	equ	0xFD9
  5778                           status	equ	0xFD8
  5779                           
  5780 ;; *************** function _inputEntry *****************
  5781 ;; Defined at:
  5782 ;;		line 30 in file "menu.c"
  5783 ;; Parameters:    Size  Location     Type
  5784 ;;		None
  5785 ;; Auto vars:     Size  Location     Type
  5786 ;;  sum             2   69[BANK1 ] int 
  5787 ;;  fastenerStri   32   24[BANK1 ] unsigned char [32]
  5788 ;;  msg            24    0[BANK1 ] unsigned char [24]
  5789 ;;  compartments    1   58[BANK1 ] unsigned char 
  5790 ;;  i               2   85[BANK1 ] int 
  5791 ;;  compartmentN    2   83[BANK1 ] int 
  5792 ;;  numPressed      2   81[BANK1 ] int 
  5793 ;;  inputEntrySt    2   79[BANK1 ] int 
  5794 ;;  numW            2   77[BANK1 ] int 
  5795 ;;  numS            2   75[BANK1 ] int 
  5796 ;;  numN            2   73[BANK1 ] int 
  5797 ;;  numB            2   71[BANK1 ] int 
  5798 ;;  doneCompartm    2   67[BANK1 ] int 
  5799 ;;  doneMultiple    2   65[BANK1 ] int 
  5800 ;;  setIsGood       2   63[BANK1 ] int 
  5801 ;;  found           2   61[BANK1 ] int 
  5802 ;;  done            2   59[BANK1 ] int 
  5803 ;;  compartmentL    2   56[BANK1 ] unsigned char [2]
  5804 ;;  numFasteners    2    0        int 
  5805 ;;  pressed         1   87[BANK1 ] unsigned char 
  5806 ;; Return value:  Size  Location     Type
  5807 ;;                  1    wreg      void 
  5808 ;; Registers used:
  5809 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5810 ;; Tracked objects:
  5811 ;;		On entry : 0/0
  5812 ;;		On exit  : 0/0
  5813 ;;		Unchanged: 0/0
  5814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5816 ;;      Locals:         0       0      88       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5817 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5818 ;;      Totals:         0       4      88       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5819 ;;Total ram usage:       92 bytes
  5820 ;; Hardware stack levels used:    1
  5821 ;; Hardware stack levels required when called:    8
  5822 ;; This function calls:
  5823 ;;		_I2C_Send
  5824 ;;		___wmul
  5825 ;;		_lcdInst
  5826 ;;		_lcd_set_cursor
  5827 ;;		_pollKeypad
  5828 ;;		_printErrorLCD
  5829 ;;		_printStringLCD
  5830 ;;		_putch
  5831 ;;		_strcpy
  5832 ;; This function is called by:
  5833 ;;		_mainMenu
  5834 ;; This function uses a non-reentrant model
  5835 ;;
  5836                           
  5837                           	psect	text10
  5838  000012                     __ptext10:
  5839                           	opt stack 0
  5840  000012                     _inputEntry:
  5841                           	opt stack 21
  5842                           
  5843                           ;menu.c: 31: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5844                           
  5845                           ;incstack = 0
  5846  000012  0E01               	movlw	1
  5847  000014  EC83  F019         	call	_lcdInst
  5848  000018  0EC3               	movlw	195
  5849  00001A  0100               	movlb	0	; () banked
  5850  00001C  6F99               	movwf	??_inputEntry& (0+255),b
  5851  00001E  0ECD               	movlw	205
  5852  000020                     u7887:
  5853  000020  2EE8               	decfsz	wreg,f,c
  5854  000022  D7FE               	bra	u7887
  5855  000024  2F99               	decfsz	??_inputEntry& (0+255),f,b
  5856  000026  D7FC               	bra	u7887
  5857                           
  5858                           ;menu.c: 32: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  5859  000028  0E80               	movlw	128
  5860  00002A  EC83  F019         	call	_lcdInst
  5861  00002E  0E41               	movlw	65
  5862  000030  0100               	movlb	0	; () banked
  5863  000032  6F99               	movwf	??_inputEntry& (0+255),b
  5864  000034  0EEE               	movlw	238
  5865  000036                     u7897:
  5866  000036  2EE8               	decfsz	wreg,f,c
  5867  000038  D7FE               	bra	u7897
  5868  00003A  2F99               	decfsz	??_inputEntry& (0+255),f,b
  5869  00003C  D7FC               	bra	u7897
  5870  00003E  F000               	nop	
  5871                           
  5872                           ;menu.c: 34: I2C_Send(nanoAddr, "Started input entry, hi\0");
  5873  000040  0E97               	movlw	low STR_17
  5874  000042  0100               	movlb	0	; () banked
  5875  000044  6F83               	movwf	I2C_Send@data& (0+255),b
  5876  000046  0EFE               	movlw	high STR_17
  5877  000048  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  5878  00004A  0E3F               	movlw	low _nanoAddr
  5879  00004C  6EF6               	movwf	tblptrl,c
  5880  00004E                     	if	1	;There is more than 1 active tblptr byte
  5881  00004E  0EFC               	movlw	high _nanoAddr
  5882  000050  6EF7               	movwf	tblptrh,c
  5883  000052                     	endif
  5884  000052                     	if	1	;There are 3 active tblptr bytes
  5885  000052  0E00               	movlw	low (_nanoAddr shr (0+16))
  5886  000054  6EF8               	movwf	tblptru,c
  5887  000056                     	endif
  5888  000056  0008               	tblrd		*
  5889  000058  50F5               	movf	tablat,w,c
  5890  00005A  EC83  F015         	call	_I2C_Send
  5891                           
  5892                           ;menu.c: 36: int compartmentNum = 0;
  5893  00005E  0E00               	movlw	0
  5894  000060  0101               	movlb	1	; () banked
  5895  000062  6F54               	movwf	(inputEntry@compartmentNum+1)& (0+255),b
  5896  000064  0E00               	movlw	0
  5897  000066  6F53               	movwf	inputEntry@compartmentNum& (0+255),b
  5898                           
  5899                           ; BSR set to: 1
  5900                           ;menu.c: 37: char compartmentLabel[2] = "C0";
  5901  000068  C05F  F138         	movff	inputEntry@F3189,inputEntry@compartmentLabel
  5902  00006C  C060  F139         	movff	inputEntry@F3189+1,inputEntry@compartmentLabel+1
  5903                           
  5904                           ; BSR set to: 1
  5905                           ;menu.c: 38: int inputEntryStep = 0;
  5906  000070  0E00               	movlw	0
  5907  000072  6F50               	movwf	(inputEntry@inputEntryStep+1)& (0+255),b
  5908  000074  0E00               	movlw	0
  5909  000076  6F4F               	movwf	inputEntry@inputEntryStep& (0+255),b
  5910                           
  5911                           ; BSR set to: 1
  5912                           ;menu.c: 39: int done = 0;
  5913  000078  0E00               	movlw	0
  5914  00007A  6F3C               	movwf	(inputEntry@done+1)& (0+255),b
  5915  00007C  0E00               	movlw	0
  5916  00007E  6F3B               	movwf	inputEntry@done& (0+255),b
  5917                           
  5918                           ;menu.c: 41: int i, numPressed, doneCompartment, numB, numN, numS, numW, found, numFaste
      +                          ners;
  5919                           ;menu.c: 42: int setIsGood, doneMultiples;
  5920                           ;menu.c: 43: unsigned char pressed;
  5921                           ;menu.c: 45: while (!done) {
  5922  000080  D36C               	goto	l375
  5923  000082                     
  5924                           ; BSR set to: 1
  5925                           ;menu.c: 47: if (inputEntryStep == 0) {
  5926                           
  5927                           ; BSR set to: 1
  5928  000082  514F               	movf	inputEntry@inputEntryStep& (0+255),w,b
  5929  000084  1150               	iorwf	(inputEntry@inputEntryStep+1)& (0+255),w,b
  5930  000086  A4D8               	btfss	status,2,c
  5931  000088  D04E               	goto	l371
  5932                           
  5933                           ; BSR set to: 1
  5934                           ;menu.c: 48: printStringLCD(inputEntryQuestions[inputEntryStep]);
  5935  00008A  C14F  F080         	movff	inputEntry@inputEntryStep,___wmul@multiplier
  5936  00008E  C150  F081         	movff	inputEntry@inputEntryStep+1,___wmul@multiplier+1
  5937  000092  0E00               	movlw	0
  5938  000094  0100               	movlb	0	; () banked
  5939  000096  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5940  000098  0E21               	movlw	33
  5941  00009A  6F82               	movwf	___wmul@multiplicand& (0+255),b
  5942  00009C  EC22  F019         	call	___wmul	;wreg free
  5943  0000A0  0E26               	movlw	low _inputEntryQuestions
  5944  0000A2  0100               	movlb	0	; () banked
  5945  0000A4  2580               	addwf	?___wmul& (0+255),w,b
  5946  0000A6  6F86               	movwf	printStringLCD@string& (0+255),b
  5947  0000A8  0EFD               	movlw	high _inputEntryQuestions
  5948  0000AA  2181               	addwfc	(?___wmul+1)& (0+255),w,b
  5949  0000AC  6F87               	movwf	(printStringLCD@string+1)& (0+255),b
  5950  0000AE  ECBE  F00F         	call	_printStringLCD	;wreg free
  5951                           
  5952                           ;menu.c: 50: pressed = pollKeypad();
  5953  0000B2  ECE0  F018         	call	_pollKeypad	;wreg free
  5954  0000B6  0101               	movlb	1	; () banked
  5955  0000B8  6F57               	movwf	inputEntry@pressed& (0+255),b
  5956                           
  5957                           ; BSR set to: 1
  5958                           ;menu.c: 51: numPressed = pressed - 48;
  5959  0000BA  0ED0               	movlw	208
  5960  0000BC  2557               	addwf	inputEntry@pressed& (0+255),w,b
  5961  0000BE  6F51               	movwf	inputEntry@numPressed& (0+255),b
  5962  0000C0  6B52               	clrf	(inputEntry@numPressed+1)& (0+255),b
  5963  0000C2  0EFF               	movlw	255
  5964  0000C4  2352               	addwfc	(inputEntry@numPressed+1)& (0+255),f,b
  5965                           
  5966                           ; BSR set to: 1
  5967                           ;menu.c: 53: putch(pressed);
  5968  0000C6  5157               	movf	inputEntry@pressed& (0+255),w,b
  5969  0000C8  EC77  F019         	call	_putch
  5970                           
  5971                           ;menu.c: 54: _delay((unsigned long)((500)*(40000000/4000.0)));
  5972  0000CC  0E1A               	movlw	26
  5973  0000CE  0100               	movlb	0	; () banked
  5974  0000D0  6F9A               	movwf	(??_inputEntry+1)& (0+255),b
  5975  0000D2  0E5E               	movlw	94
  5976  0000D4  6F99               	movwf	??_inputEntry& (0+255),b
  5977  0000D6  0E6E               	movlw	110
  5978  0000D8                     u7907:
  5979  0000D8  2EE8               	decfsz	wreg,f,c
  5980  0000DA  D7FE               	bra	u7907
  5981  0000DC  2F99               	decfsz	??_inputEntry& (0+255),f,b
  5982  0000DE  D7FC               	bra	u7907
  5983  0000E0  2F9A               	decfsz	(??_inputEntry+1)& (0+255),f,b
  5984  0000E2  D7FA               	bra	u7907
  5985  0000E4  F000               	nop	
  5986                           
  5987                           ;menu.c: 56: if (numPressed >= 4 && numPressed <= 8) {
  5988  0000E6  0101               	movlb	1	; () banked
  5989  0000E8  BF52               	btfsc	(inputEntry@numPressed+1)& (0+255),7,b
  5990  0000EA  D015               	goto	l372
  5991  0000EC  5152               	movf	(inputEntry@numPressed+1)& (0+255),w,b
  5992  0000EE  E104               	bnz	u7150
  5993  0000F0  0E04               	movlw	4
  5994  0000F2  5D51               	subwf	inputEntry@numPressed& (0+255),w,b
  5995  0000F4  A0D8               	btfss	status,0,c
  5996  0000F6  D00F               	goto	l372
  5997  0000F8                     u7150:
  5998                           
  5999                           ; BSR set to: 1
  6000  0000F8  BF52               	btfsc	(inputEntry@numPressed+1)& (0+255),7,b
  6001  0000FA  D006               	goto	u7160
  6002  0000FC  5152               	movf	(inputEntry@numPressed+1)& (0+255),w,b
  6003  0000FE  E10B               	bnz	l5741
  6004  000100  0E09               	movlw	9
  6005  000102  5D51               	subwf	inputEntry@numPressed& (0+255),w,b
  6006  000104  B0D8               	btfsc	status,0,c
  6007  000106  D007               	goto	l372
  6008  000108                     u7160:
  6009                           
  6010                           ; BSR set to: 1
  6011                           ;menu.c: 57: params.steps = numPressed;
  6012  000108  C151  F1BC         	movff	inputEntry@numPressed,_params
  6013  00010C  C152  F1BD         	movff	inputEntry@numPressed+1,_params+1
  6014                           
  6015                           ; BSR set to: 1
  6016                           ;menu.c: 58: inputEntryStep++;
  6017  000110  4B4F               	infsnz	inputEntry@inputEntryStep& (0+255),f,b
  6018  000112  2B50               	incf	(inputEntry@inputEntryStep+1)& (0+255),f,b
  6019                           
  6020                           ;menu.c: 59: } else printErrorLCD(errMsgs.badEntry);
  6021  000114  D322               	goto	l375
  6022  000116                     l372:
  6023  000116                     l5741:
  6024                           
  6025                           ; BSR set to: 1
  6026  000116  0E46               	movlw	low _errMsgs
  6027  000118  0100               	movlb	0	; () banked
  6028  00011A  6F95               	movwf	printErrorLCD@string& (0+255),b
  6029  00011C  0EFC               	movlw	high _errMsgs
  6030  00011E  6F96               	movwf	(printErrorLCD@string+1)& (0+255),b
  6031  000120  EC36  F019         	call	_printErrorLCD	;wreg free
  6032                           
  6033                           ;menu.c: 60: } else if (inputEntryStep == 1) {
  6034  000124  D31A               	goto	l375
  6035  000126                     l371:
  6036  000126  0101               	movlb	1	; () banked
  6037  000128  054F               	decf	inputEntry@inputEntryStep& (0+255),w,b
  6038  00012A  1150               	iorwf	(inputEntry@inputEntryStep+1)& (0+255),w,b
  6039  00012C  A4D8               	btfss	status,2,c
  6040  00012E  D315               	goto	l375
  6041                           
  6042                           ; BSR set to: 1
  6043                           ;menu.c: 62: char compartmentsToFill = assemblyStepEncoding[params.steps - 4];
  6044  000130  0EFC               	movlw	252
  6045  000132  0100               	movlb	0	; () banked
  6046  000134  6F99               	movwf	??_inputEntry& (0+255),b
  6047  000136  0EFF               	movlw	255
  6048  000138  6F9A               	movwf	(??_inputEntry+1)& (0+255),b
  6049  00013A  C1BC  F09B         	movff	_params,??_inputEntry+2
  6050  00013E  C1BD  F09C         	movff	_params+1,??_inputEntry+3
  6051  000142  5199               	movf	??_inputEntry& (0+255),w,b
  6052  000144  279B               	addwf	(??_inputEntry+2)& (0+255),f,b
  6053  000146  519A               	movf	(??_inputEntry+1)& (0+255),w,b
  6054  000148  239C               	addwfc	(??_inputEntry+3)& (0+255),f,b
  6055  00014A  0E3A               	movlw	low _assemblyStepEncoding
  6056  00014C  259B               	addwf	(??_inputEntry+2)& (0+255),w,b
  6057  00014E  6EF6               	movwf	tblptrl,c
  6058  000150  0EFC               	movlw	high _assemblyStepEncoding
  6059  000152  219C               	addwfc	(??_inputEntry+3)& (0+255),w,b
  6060  000154  6EF7               	movwf	tblptrh,c
  6061  000156                     	if	1	;There are 3 active tblptr bytes
  6062  000156  6AF8               	clrf	tblptru,c
  6063  000158  0E00               	movlw	low (__mediumconst shr (0+16))
  6064  00015A  22F8               	addwfc	tblptru,f,c
  6065  00015C                     	endif
  6066  00015C  0008               	tblrd		*
  6067  00015E  CFF5 F13A          	movff	tablat,inputEntry@compartmentsToFill
  6068                           
  6069                           ; BSR set to: 0
  6070                           ;menu.c: 63: for (compartmentNum = 0; compartmentNum < 8; compartmentNum++) {
  6071  000162  0E00               	movlw	0
  6072  000164  0101               	movlb	1	; () banked
  6073  000166  6F54               	movwf	(inputEntry@compartmentNum+1)& (0+255),b
  6074  000168  0E00               	movlw	0
  6075  00016A  6F53               	movwf	inputEntry@compartmentNum& (0+255),b
  6076                           
  6077                           ; BSR set to: 1
  6078  00016C  BF54               	btfsc	(inputEntry@compartmentNum+1)& (0+255),7,b
  6079  00016E  D008               	goto	l376
  6080  000170  5154               	movf	(inputEntry@compartmentNum+1)& (0+255),w,b
  6081  000172  E105               	bnz	u7180
  6082  000174  0E08               	movlw	8
  6083  000176  5D53               	subwf	inputEntry@compartmentNum& (0+255),w,b
  6084  000178  B0D8               	btfsc	status,0,c
  6085  00017A  D2DC               	goto	u7550
  6086  00017C  D001               	goto	l376
  6087  00017E                     u7180:
  6088                           
  6089                           ; BSR set to: 1
  6090  00017E  D2DA               	goto	u7550
  6091  000180                     l376:
  6092                           
  6093                           ; BSR set to: 1
  6094                           ;menu.c: 65: if ((compartmentsToFill >> compartmentNum) & 0b1) {
  6095                           
  6096                           ; BSR set to: 1
  6097                           
  6098                           ;menu.c: 64: STARTCOMPARTMENT:
  6099                           
  6100                           ; BSR set to: 1
  6101  000180  C153  F099         	movff	inputEntry@compartmentNum,??_inputEntry
  6102  000184  C13A  F09A         	movff	inputEntry@compartmentsToFill,??_inputEntry+1
  6103  000188  0100               	movlb	0	; () banked
  6104  00018A  2B99               	incf	??_inputEntry& (0+255),f,b
  6105  00018C  D002               	goto	u7194
  6106  00018E                     u7195:
  6107  00018E  90D8               	bcf	status,0,c
  6108  000190  339A               	rrcf	(??_inputEntry+1)& (0+255),f,b
  6109  000192                     u7194:
  6110  000192  2F99               	decfsz	??_inputEntry& (0+255),f,b
  6111  000194  D7FC               	goto	u7195
  6112  000196  0100               	movlb	0	; () banked
  6113  000198  A19A               	btfss	(??_inputEntry+1)& (0+255),0,b
  6114  00019A  D2AC               	goto	l379
  6115                           
  6116                           ; BSR set to: 0
  6117                           ;menu.c: 66: char msg[] = "\1Started compartment x\0";
  6118  00019C  EE21  F0A0         	lfsr	2,inputEntry@F3210
  6119  0001A0  EE11  F000         	lfsr	1,inputEntry@msg
  6120  0001A4  0E17               	movlw	23
  6121  0001A6                     u7211:
  6122  0001A6  CFDB FFE3          	movff	plusw2,plusw1
  6123  0001AA  06E8               	decf	wreg,f,c
  6124  0001AC  E2FC               	bc	u7211
  6125                           
  6126                           ; BSR set to: 0
  6127                           ;menu.c: 67: msg[21] = compartmentNum + 1 + 48;
  6128  0001AE  0101               	movlb	1	; () banked
  6129  0001B0  5153               	movf	inputEntry@compartmentNum& (0+255),w,b
  6130  0001B2  0F31               	addlw	49
  6131  0001B4  6F15               	movwf	(inputEntry@msg+21)& (0+255),b
  6132                           
  6133                           ; BSR set to: 1
  6134                           ;menu.c: 68: I2C_Send(nanoAddr, msg);
  6135  0001B6  0E00               	movlw	low inputEntry@msg
  6136  0001B8  0100               	movlb	0	; () banked
  6137  0001BA  6F83               	movwf	I2C_Send@data& (0+255),b
  6138  0001BC  0E01               	movlw	high inputEntry@msg
  6139  0001BE  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  6140  0001C0  0E3F               	movlw	low _nanoAddr
  6141  0001C2  6EF6               	movwf	tblptrl,c
  6142  0001C4                     	if	1	;There is more than 1 active tblptr byte
  6143  0001C4  0EFC               	movlw	high _nanoAddr
  6144  0001C6  6EF7               	movwf	tblptrh,c
  6145  0001C8                     	endif
  6146  0001C8                     	if	1	;There are 3 active tblptr bytes
  6147  0001C8  0E00               	movlw	low (_nanoAddr shr (0+16))
  6148  0001CA  6EF8               	movwf	tblptru,c
  6149  0001CC                     	endif
  6150  0001CC  0008               	tblrd		*
  6151  0001CE  50F5               	movf	tablat,w,c
  6152  0001D0  EC83  F015         	call	_I2C_Send
  6153                           
  6154                           ;menu.c: 70: setIsGood = 0;
  6155  0001D4  0E00               	movlw	0
  6156  0001D6  0101               	movlb	1	; () banked
  6157  0001D8  6F40               	movwf	(inputEntry@setIsGood+1)& (0+255),b
  6158  0001DA  0E00               	movlw	0
  6159  0001DC  D169               	goto	L3
  6160  0001DE                     
  6161                           ; BSR set to: 1
  6162                           ;menu.c: 72: numB = 0;
  6163                           
  6164                           ; BSR set to: 1
  6165  0001DE  0E00               	movlw	0
  6166  0001E0  6F48               	movwf	(inputEntry@numB+1)& (0+255),b
  6167  0001E2  0E00               	movlw	0
  6168  0001E4  6F47               	movwf	inputEntry@numB& (0+255),b
  6169                           
  6170                           ;menu.c: 73: numN = 0;
  6171  0001E6  0E00               	movlw	0
  6172  0001E8  6F4A               	movwf	(inputEntry@numN+1)& (0+255),b
  6173  0001EA  0E00               	movlw	0
  6174  0001EC  6F49               	movwf	inputEntry@numN& (0+255),b
  6175                           
  6176                           ;menu.c: 74: numS = 0;
  6177  0001EE  0E00               	movlw	0
  6178  0001F0  6F4C               	movwf	(inputEntry@numS+1)& (0+255),b
  6179  0001F2  0E00               	movlw	0
  6180  0001F4  6F4B               	movwf	inputEntry@numS& (0+255),b
  6181                           
  6182                           ;menu.c: 75: numW = 0;
  6183  0001F6  0E00               	movlw	0
  6184  0001F8  6F4E               	movwf	(inputEntry@numW+1)& (0+255),b
  6185  0001FA  0E00               	movlw	0
  6186  0001FC  6F4D               	movwf	inputEntry@numW& (0+255),b
  6187                           
  6188                           ; BSR set to: 1
  6189                           ;menu.c: 76: char fastenerString[32];
  6190                           ;menu.c: 77: strcpy(fastenerString, inputEntryQuestions[inputEntryStep]);
  6191  0001FE  0E18               	movlw	low inputEntry@fastenerString
  6192  000200  0100               	movlb	0	; () banked
  6193  000202  6F86               	movwf	strcpy@to& (0+255),b
  6194  000204  0E01               	movlw	high inputEntry@fastenerString
  6195  000206  6F87               	movwf	(strcpy@to+1)& (0+255),b
  6196  000208  C14F  F080         	movff	inputEntry@inputEntryStep,___wmul@multiplier
  6197  00020C  C150  F081         	movff	inputEntry@inputEntryStep+1,___wmul@multiplier+1
  6198  000210  0E00               	movlw	0
  6199  000212  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6200  000214  0E21               	movlw	33
  6201  000216  6F82               	movwf	___wmul@multiplicand& (0+255),b
  6202  000218  EC22  F019         	call	___wmul	;wreg free
  6203  00021C  0E26               	movlw	low _inputEntryQuestions
  6204  00021E  0100               	movlb	0	; () banked
  6205  000220  2580               	addwf	?___wmul& (0+255),w,b
  6206  000222  6F88               	movwf	strcpy@from& (0+255),b
  6207  000224  0EFD               	movlw	high _inputEntryQuestions
  6208  000226  2181               	addwfc	(?___wmul+1)& (0+255),w,b
  6209  000228  6F89               	movwf	(strcpy@from+1)& (0+255),b
  6210  00022A  ECC6  F018         	call	_strcpy	;wreg free
  6211                           
  6212                           ;menu.c: 78: fastenerString[14] = compartmentNum + 1 + 48;
  6213  00022E  0101               	movlb	1	; () banked
  6214  000230  5153               	movf	inputEntry@compartmentNum& (0+255),w,b
  6215  000232  0F31               	addlw	49
  6216  000234  6F26               	movwf	(inputEntry@fastenerString+14)& (0+255),b
  6217                           
  6218                           ; BSR set to: 1
  6219                           ;menu.c: 80: printStringLCD(fastenerString);
  6220  000236  0E18               	movlw	low inputEntry@fastenerString
  6221  000238  0100               	movlb	0	; () banked
  6222  00023A  6F86               	movwf	printStringLCD@string& (0+255),b
  6223  00023C  0E01               	movlw	high inputEntry@fastenerString
  6224  00023E  6F87               	movwf	(printStringLCD@string+1)& (0+255),b
  6225  000240  ECBE  F00F         	call	_printStringLCD	;wreg free
  6226                           
  6227                           ;menu.c: 81: lcd_set_cursor(9, 1);
  6228  000244  0E01               	movlw	1
  6229  000246  0100               	movlb	0	; () banked
  6230  000248  6F86               	movwf	lcd_set_cursor@y& (0+255),b
  6231  00024A  0E09               	movlw	9
  6232  00024C  EC26  F018         	call	_lcd_set_cursor
  6233                           
  6234                           ;menu.c: 82: doneCompartment = 0;
  6235  000250  0E00               	movlw	0
  6236  000252  0101               	movlb	1	; () banked
  6237  000254  6F44               	movwf	(inputEntry@doneCompartment+1)& (0+255),b
  6238  000256  0E00               	movlw	0
  6239  000258  D04D               	goto	L4
  6240  00025A                     
  6241                           ; BSR set to: 1
  6242                           ;menu.c: 85: pressed = pollKeypad();
  6243                           
  6244                           ; BSR set to: 1
  6245  00025A  ECE0  F018         	call	_pollKeypad	;wreg free
  6246  00025E  0101               	movlb	1	; () banked
  6247  000260  6F57               	movwf	inputEntry@pressed& (0+255),b
  6248                           
  6249                           ; BSR set to: 1
  6250                           ;menu.c: 86: if (pressed == 66 || pressed == 78 || pressed == 83 || pressed == 87) {
  6251  000262  0E42               	movlw	66
  6252  000264  1957               	xorwf	inputEntry@pressed& (0+255),w,b
  6253  000266  B4D8               	btfsc	status,2,c
  6254  000268  D00C               	goto	u7250
  6255                           
  6256                           ; BSR set to: 1
  6257  00026A  0E4E               	movlw	78
  6258  00026C  1957               	xorwf	inputEntry@pressed& (0+255),w,b
  6259  00026E  B4D8               	btfsc	status,2,c
  6260  000270  D008               	goto	u7250
  6261                           
  6262                           ; BSR set to: 1
  6263  000272  0E53               	movlw	83
  6264  000274  1957               	xorwf	inputEntry@pressed& (0+255),w,b
  6265  000276  B4D8               	btfsc	status,2,c
  6266  000278  D004               	goto	u7250
  6267                           
  6268                           ; BSR set to: 1
  6269  00027A  0E57               	movlw	87
  6270  00027C  1957               	xorwf	inputEntry@pressed& (0+255),w,b
  6271  00027E  A4D8               	btfss	status,2,c
  6272  000280  D022               	goto	l386
  6273  000282                     u7250:
  6274                           
  6275                           ; BSR set to: 1
  6276                           ;menu.c: 87: putch(pressed);
  6277                           
  6278                           ; BSR set to: 1
  6279  000282  5157               	movf	inputEntry@pressed& (0+255),w,b
  6280  000284  EC77  F019         	call	_putch
  6281                           
  6282                           ;menu.c: 88: if (pressed == 66) numB++;
  6283  000288  0E42               	movlw	66
  6284  00028A  0101               	movlb	1	; () banked
  6285  00028C  1957               	xorwf	inputEntry@pressed& (0+255),w,b
  6286  00028E  A4D8               	btfss	status,2,c
  6287  000290  D003               	goto	l389
  6288                           
  6289                           ; BSR set to: 1
  6290  000292  4B47               	infsnz	inputEntry@numB& (0+255),f,b
  6291  000294  2B48               	incf	(inputEntry@numB+1)& (0+255),f,b
  6292  000296  D014               	goto	l395
  6293  000298                     l389:
  6294                           
  6295                           ; BSR set to: 1
  6296                           ;menu.c: 89: else if (pressed == 78) numN++;
  6297                           
  6298                           ; BSR set to: 1
  6299  000298  0E4E               	movlw	78
  6300  00029A  1957               	xorwf	inputEntry@pressed& (0+255),w,b
  6301  00029C  A4D8               	btfss	status,2,c
  6302  00029E  D003               	goto	l391
  6303                           
  6304                           ; BSR set to: 1
  6305  0002A0  4B49               	infsnz	inputEntry@numN& (0+255),f,b
  6306  0002A2  2B4A               	incf	(inputEntry@numN+1)& (0+255),f,b
  6307  0002A4  D00D               	goto	l395
  6308  0002A6                     l391:
  6309                           
  6310                           ; BSR set to: 1
  6311                           ;menu.c: 90: else if (pressed == 83) numS ++;
  6312                           
  6313                           ; BSR set to: 1
  6314  0002A6  0E53               	movlw	83
  6315  0002A8  1957               	xorwf	inputEntry@pressed& (0+255),w,b
  6316  0002AA  A4D8               	btfss	status,2,c
  6317  0002AC  D003               	goto	l393
  6318                           
  6319                           ; BSR set to: 1
  6320  0002AE  4B4B               	infsnz	inputEntry@numS& (0+255),f,b
  6321  0002B0  2B4C               	incf	(inputEntry@numS+1)& (0+255),f,b
  6322  0002B2  D006               	goto	l395
  6323  0002B4                     l393:
  6324                           
  6325                           ; BSR set to: 1
  6326                           ;menu.c: 91: else if (pressed == 87) numW++;
  6327                           
  6328                           ; BSR set to: 1
  6329  0002B4  0E57               	movlw	87
  6330  0002B6  1957               	xorwf	inputEntry@pressed& (0+255),w,b
  6331  0002B8  A4D8               	btfss	status,2,c
  6332  0002BA  D002               	goto	l395
  6333                           
  6334                           ; BSR set to: 1
  6335  0002BC  4B4D               	infsnz	inputEntry@numW& (0+255),f,b
  6336  0002BE  2B4E               	incf	(inputEntry@numW+1)& (0+255),f,b
  6337  0002C0                     l395:
  6338                           
  6339                           ; BSR set to: 1
  6340                           ;menu.c: 92: doneCompartment++;
  6341                           
  6342                           ; BSR set to: 1
  6343                           
  6344                           ; BSR set to: 1
  6345                           
  6346                           ; BSR set to: 1
  6347  0002C0  4B43               	infsnz	inputEntry@doneCompartment& (0+255),f,b
  6348  0002C2  2B44               	incf	(inputEntry@doneCompartment+1)& (0+255),f,b
  6349                           
  6350                           ;menu.c: 93: } else if (pressed == 35) {
  6351  0002C4  D021               	goto	l402
  6352  0002C6                     l386:
  6353                           
  6354                           ; BSR set to: 1
  6355                           
  6356                           ; BSR set to: 1
  6357  0002C6  0E23               	movlw	35
  6358  0002C8  1957               	xorwf	inputEntry@pressed& (0+255),w,b
  6359  0002CA  A4D8               	btfss	status,2,c
  6360  0002CC  D015               	goto	l397
  6361                           
  6362                           ; BSR set to: 1
  6363                           ;menu.c: 94: if (numB != 0 || numN != 0 || numS != 0 || numW != 0) doneCompartment = 4;
  6364  0002CE  5147               	movf	inputEntry@numB& (0+255),w,b
  6365  0002D0  1148               	iorwf	(inputEntry@numB+1)& (0+255),w,b
  6366  0002D2  A4D8               	btfss	status,2,c
  6367  0002D4  D00C               	goto	u7340
  6368                           
  6369                           ; BSR set to: 1
  6370  0002D6  5149               	movf	inputEntry@numN& (0+255),w,b
  6371  0002D8  114A               	iorwf	(inputEntry@numN+1)& (0+255),w,b
  6372  0002DA  A4D8               	btfss	status,2,c
  6373  0002DC  D008               	goto	u7340
  6374                           
  6375                           ; BSR set to: 1
  6376  0002DE  514B               	movf	inputEntry@numS& (0+255),w,b
  6377  0002E0  114C               	iorwf	(inputEntry@numS+1)& (0+255),w,b
  6378  0002E2  A4D8               	btfss	status,2,c
  6379  0002E4  D004               	goto	u7340
  6380                           
  6381                           ; BSR set to: 1
  6382  0002E6  514D               	movf	inputEntry@numW& (0+255),w,b
  6383  0002E8  114E               	iorwf	(inputEntry@numW+1)& (0+255),w,b
  6384  0002EA  B4D8               	btfsc	status,2,c
  6385  0002EC  D00D               	goto	l402
  6386  0002EE                     u7340:
  6387                           
  6388                           ; BSR set to: 1
  6389                           
  6390                           ; BSR set to: 1
  6391  0002EE  0E00               	movlw	0
  6392  0002F0  6F44               	movwf	(inputEntry@doneCompartment+1)& (0+255),b
  6393  0002F2  0E04               	movlw	4
  6394  0002F4                     L4:
  6395  0002F4  6F43               	movwf	inputEntry@doneCompartment& (0+255),b
  6396                           
  6397                           ; BSR set to: 1
  6398                           ;menu.c: 95: } else if (pressed == 42) {
  6399  0002F6  D008               	goto	l402
  6400  0002F8                     l397:
  6401                           
  6402                           ; BSR set to: 1
  6403                           
  6404                           ; BSR set to: 1
  6405  0002F8  0E2A               	movlw	42
  6406  0002FA  1957               	xorwf	inputEntry@pressed& (0+255),w,b
  6407  0002FC  A4D8               	btfss	status,2,c
  6408  0002FE  D004               	goto	l402
  6409                           
  6410                           ; BSR set to: 1
  6411                           ;menu.c: 96: compartmentNum--;
  6412  000300  0753               	decf	inputEntry@compartmentNum& (0+255),f,b
  6413  000302  A0D8               	btfss	status,0,c
  6414  000304  0754               	decf	(inputEntry@compartmentNum+1)& (0+255),f,b
  6415                           
  6416                           ;menu.c: 97: goto STARTMULTIPLES;
  6417  000306  D0DA               	goto	u7440
  6418  000308                     l402:
  6419                           
  6420                           ; BSR set to: 1
  6421                           
  6422                           ; BSR set to: 1
  6423                           
  6424                           ; BSR set to: 1
  6425                           
  6426                           ; BSR set to: 1
  6427                           
  6428                           ; BSR set to: 1
  6429  000308  BF44               	btfsc	(inputEntry@doneCompartment+1)& (0+255),7,b
  6430  00030A  D7A7               	goto	l385
  6431  00030C  5144               	movf	(inputEntry@doneCompartment+1)& (0+255),w,b
  6432  00030E  E104               	bnz	l5821
  6433  000310  0E04               	movlw	4
  6434  000312  5D43               	subwf	inputEntry@doneCompartment& (0+255),w,b
  6435  000314  A0D8               	btfss	status,0,c
  6436  000316  D7A1               	goto	l385
  6437  000318                     l5821:
  6438                           
  6439                           ; BSR set to: 1
  6440                           ;menu.c: 98: }
  6441                           ;menu.c: 99: }
  6442                           ;menu.c: 102: found = 0;
  6443  000318  0E00               	movlw	0
  6444  00031A  6F3E               	movwf	(inputEntry@found+1)& (0+255),b
  6445  00031C  0E00               	movlw	0
  6446  00031E  6F3D               	movwf	inputEntry@found& (0+255),b
  6447                           
  6448                           ;menu.c: 103: for (i = 0; i < 21; i++) {
  6449  000320  0E00               	movlw	0
  6450  000322  6F56               	movwf	(inputEntry@i+1)& (0+255),b
  6451  000324  0E00               	movlw	0
  6452  000326  6F55               	movwf	inputEntry@i& (0+255),b
  6453                           
  6454                           ; BSR set to: 1
  6455  000328  BF56               	btfsc	(inputEntry@i+1)& (0+255),7,b
  6456  00032A  D008               	goto	l405
  6457  00032C  5156               	movf	(inputEntry@i+1)& (0+255),w,b
  6458  00032E  E105               	bnz	u7370
  6459  000330  0E15               	movlw	21
  6460  000332  5D55               	subwf	inputEntry@i& (0+255),w,b
  6461  000334  B0D8               	btfsc	status,0,c
  6462  000336  D0AC               	goto	u7420
  6463  000338  D001               	goto	l405
  6464  00033A                     u7370:
  6465                           
  6466                           ; BSR set to: 1
  6467  00033A  D0AA               	goto	u7420
  6468  00033C                     l405:
  6469                           
  6470                           ; BSR set to: 1
  6471                           ;menu.c: 104: if (fastenerMatrix[i][0] == numB &&
  6472                           ;menu.c: 105: fastenerMatrix[i][1] == numN &&
  6473                           ;menu.c: 106: fastenerMatrix[i][2] == numS &&
  6474                           ;menu.c: 107: fastenerMatrix[i][3] == numW)
  6475                           
  6476                           ; BSR set to: 1
  6477  00033C  C155  F099         	movff	inputEntry@i,??_inputEntry
  6478  000340  C156  F09A         	movff	inputEntry@i+1,??_inputEntry+1
  6479  000344  0100               	movlb	0	; () banked
  6480  000346  90D8               	bcf	status,0,c
  6481  000348  3799               	rlcf	??_inputEntry& (0+255),f,b
  6482  00034A  379A               	rlcf	(??_inputEntry+1)& (0+255),f,b
  6483  00034C  90D8               	bcf	status,0,c
  6484  00034E  3799               	rlcf	??_inputEntry& (0+255),f,b
  6485  000350  379A               	rlcf	(??_inputEntry+1)& (0+255),f,b
  6486  000352  0EAA               	movlw	low _fastenerMatrix
  6487  000354  2599               	addwf	??_inputEntry& (0+255),w,b
  6488  000356  6EF6               	movwf	tblptrl,c
  6489  000358  0EFD               	movlw	high _fastenerMatrix
  6490  00035A  219A               	addwfc	(??_inputEntry+1)& (0+255),w,b
  6491  00035C  6EF7               	movwf	tblptrh,c
  6492  00035E                     	if	1	;There are 3 active tblptr bytes
  6493  00035E  6AF8               	clrf	tblptru,c
  6494  000360  0E00               	movlw	low (__mediumconst shr (0+16))
  6495  000362  22F8               	addwfc	tblptru,f,c
  6496  000364                     	endif
  6497  000364  0008               	tblrd		*
  6498  000366  50F5               	movf	tablat,w,c
  6499  000368  6F9B               	movwf	(??_inputEntry+2)& (0+255),b
  6500  00036A  6B9C               	clrf	(??_inputEntry+3)& (0+255),b
  6501  00036C  0101               	movlb	1	; () banked
  6502  00036E  5147               	movf	inputEntry@numB& (0+255),w,b
  6503  000370  0100               	movlb	0	; () banked
  6504  000372  199B               	xorwf	(??_inputEntry+2)& (0+255),w,b
  6505  000374  E105               	bnz	u7381
  6506  000376  0101               	movlb	1	; () banked
  6507  000378  5148               	movf	(inputEntry@numB+1)& (0+255),w,b
  6508  00037A  0100               	movlb	0	; () banked
  6509  00037C  199C               	xorwf	(??_inputEntry+3)& (0+255),w,b
  6510  00037E  A4D8               	btfss	status,2,c
  6511  000380                     u7381:
  6512  000380  D07F               	goto	l407
  6513                           
  6514                           ; BSR set to: 0
  6515  000382  C155  F099         	movff	inputEntry@i,??_inputEntry
  6516  000386  C156  F09A         	movff	inputEntry@i+1,??_inputEntry+1
  6517  00038A  90D8               	bcf	status,0,c
  6518  00038C  3799               	rlcf	??_inputEntry& (0+255),f,b
  6519  00038E  379A               	rlcf	(??_inputEntry+1)& (0+255),f,b
  6520  000390  90D8               	bcf	status,0,c
  6521  000392  3799               	rlcf	??_inputEntry& (0+255),f,b
  6522  000394  379A               	rlcf	(??_inputEntry+1)& (0+255),f,b
  6523  000396  0E01               	movlw	1
  6524  000398  2799               	addwf	??_inputEntry& (0+255),f,b
  6525  00039A  0E00               	movlw	0
  6526  00039C  239A               	addwfc	(??_inputEntry+1)& (0+255),f,b
  6527  00039E  0EAA               	movlw	low _fastenerMatrix
  6528  0003A0  2599               	addwf	??_inputEntry& (0+255),w,b
  6529  0003A2  6EF6               	movwf	tblptrl,c
  6530  0003A4  0EFD               	movlw	high _fastenerMatrix
  6531  0003A6  219A               	addwfc	(??_inputEntry+1)& (0+255),w,b
  6532  0003A8  6EF7               	movwf	tblptrh,c
  6533  0003AA                     	if	1	;There are 3 active tblptr bytes
  6534  0003AA  6AF8               	clrf	tblptru,c
  6535  0003AC  0E00               	movlw	low (__mediumconst shr (0+16))
  6536  0003AE  22F8               	addwfc	tblptru,f,c
  6537  0003B0                     	endif
  6538  0003B0  0008               	tblrd		*
  6539  0003B2  50F5               	movf	tablat,w,c
  6540  0003B4  6F9B               	movwf	(??_inputEntry+2)& (0+255),b
  6541  0003B6  6B9C               	clrf	(??_inputEntry+3)& (0+255),b
  6542  0003B8  0101               	movlb	1	; () banked
  6543  0003BA  5149               	movf	inputEntry@numN& (0+255),w,b
  6544  0003BC  0100               	movlb	0	; () banked
  6545  0003BE  199B               	xorwf	(??_inputEntry+2)& (0+255),w,b
  6546  0003C0  E15F               	bnz	l5839
  6547  0003C2  0101               	movlb	1	; () banked
  6548  0003C4  514A               	movf	(inputEntry@numN+1)& (0+255),w,b
  6549  0003C6  0100               	movlb	0	; () banked
  6550  0003C8  199C               	xorwf	(??_inputEntry+3)& (0+255),w,b
  6551  0003CA  A4D8               	btfss	status,2,c
  6552  0003CC  D059               	goto	l407
  6553                           
  6554                           ; BSR set to: 0
  6555  0003CE  C155  F099         	movff	inputEntry@i,??_inputEntry
  6556  0003D2  C156  F09A         	movff	inputEntry@i+1,??_inputEntry+1
  6557  0003D6  90D8               	bcf	status,0,c
  6558  0003D8  3799               	rlcf	??_inputEntry& (0+255),f,b
  6559  0003DA  379A               	rlcf	(??_inputEntry+1)& (0+255),f,b
  6560  0003DC  90D8               	bcf	status,0,c
  6561  0003DE  3799               	rlcf	??_inputEntry& (0+255),f,b
  6562  0003E0  379A               	rlcf	(??_inputEntry+1)& (0+255),f,b
  6563  0003E2  0E02               	movlw	2
  6564  0003E4  2799               	addwf	??_inputEntry& (0+255),f,b
  6565  0003E6  0E00               	movlw	0
  6566  0003E8  239A               	addwfc	(??_inputEntry+1)& (0+255),f,b
  6567  0003EA  0EAA               	movlw	low _fastenerMatrix
  6568  0003EC  2599               	addwf	??_inputEntry& (0+255),w,b
  6569  0003EE  6EF6               	movwf	tblptrl,c
  6570  0003F0  0EFD               	movlw	high _fastenerMatrix
  6571  0003F2  219A               	addwfc	(??_inputEntry+1)& (0+255),w,b
  6572  0003F4  6EF7               	movwf	tblptrh,c
  6573  0003F6                     	if	1	;There are 3 active tblptr bytes
  6574  0003F6  6AF8               	clrf	tblptru,c
  6575  0003F8  0E00               	movlw	low (__mediumconst shr (0+16))
  6576  0003FA  22F8               	addwfc	tblptru,f,c
  6577  0003FC                     	endif
  6578  0003FC  0008               	tblrd		*
  6579  0003FE  50F5               	movf	tablat,w,c
  6580  000400  6F9B               	movwf	(??_inputEntry+2)& (0+255),b
  6581  000402  6B9C               	clrf	(??_inputEntry+3)& (0+255),b
  6582  000404  0101               	movlb	1	; () banked
  6583  000406  514B               	movf	inputEntry@numS& (0+255),w,b
  6584  000408  0100               	movlb	0	; () banked
  6585  00040A  199B               	xorwf	(??_inputEntry+2)& (0+255),w,b
  6586  00040C  E139               	bnz	l5839
  6587  00040E  0101               	movlb	1	; () banked
  6588  000410  514C               	movf	(inputEntry@numS+1)& (0+255),w,b
  6589  000412  0100               	movlb	0	; () banked
  6590  000414  199C               	xorwf	(??_inputEntry+3)& (0+255),w,b
  6591  000416  A4D8               	btfss	status,2,c
  6592  000418  D033               	goto	l407
  6593                           
  6594                           ; BSR set to: 0
  6595  00041A  C155  F099         	movff	inputEntry@i,??_inputEntry
  6596  00041E  C156  F09A         	movff	inputEntry@i+1,??_inputEntry+1
  6597  000422  90D8               	bcf	status,0,c
  6598  000424  3799               	rlcf	??_inputEntry& (0+255),f,b
  6599  000426  379A               	rlcf	(??_inputEntry+1)& (0+255),f,b
  6600  000428  90D8               	bcf	status,0,c
  6601  00042A  3799               	rlcf	??_inputEntry& (0+255),f,b
  6602  00042C  379A               	rlcf	(??_inputEntry+1)& (0+255),f,b
  6603  00042E  0E03               	movlw	3
  6604  000430  2799               	addwf	??_inputEntry& (0+255),f,b
  6605  000432  0E00               	movlw	0
  6606  000434  239A               	addwfc	(??_inputEntry+1)& (0+255),f,b
  6607  000436  0EAA               	movlw	low _fastenerMatrix
  6608  000438  2599               	addwf	??_inputEntry& (0+255),w,b
  6609  00043A  6EF6               	movwf	tblptrl,c
  6610  00043C  0EFD               	movlw	high _fastenerMatrix
  6611  00043E  219A               	addwfc	(??_inputEntry+1)& (0+255),w,b
  6612  000440  6EF7               	movwf	tblptrh,c
  6613  000442                     	if	1	;There are 3 active tblptr bytes
  6614  000442  6AF8               	clrf	tblptru,c
  6615  000444  0E00               	movlw	low (__mediumconst shr (0+16))
  6616  000446  22F8               	addwfc	tblptru,f,c
  6617  000448                     	endif
  6618  000448  0008               	tblrd		*
  6619  00044A  50F5               	movf	tablat,w,c
  6620  00044C  6F9B               	movwf	(??_inputEntry+2)& (0+255),b
  6621  00044E  6B9C               	clrf	(??_inputEntry+3)& (0+255),b
  6622  000450  0101               	movlb	1	; () banked
  6623  000452  514D               	movf	inputEntry@numW& (0+255),w,b
  6624  000454  0100               	movlb	0	; () banked
  6625  000456  199B               	xorwf	(??_inputEntry+2)& (0+255),w,b
  6626  000458  E113               	bnz	l5839
  6627  00045A  0101               	movlb	1	; () banked
  6628  00045C  514E               	movf	(inputEntry@numW+1)& (0+255),w,b
  6629  00045E  0100               	movlb	0	; () banked
  6630  000460  199C               	xorwf	(??_inputEntry+3)& (0+255),w,b
  6631  000462  A4D8               	btfss	status,2,c
  6632  000464  D00D               	goto	l407
  6633                           
  6634                           ; BSR set to: 0
  6635                           ;menu.c: 108: {
  6636                           ;menu.c: 109: params.toFill[compartmentNum] = i;
  6637  000466  0EBE               	movlw	low (_params+2)
  6638  000468  0101               	movlb	1	; () banked
  6639  00046A  2553               	addwf	inputEntry@compartmentNum& (0+255),w,b
  6640  00046C  6ED9               	movwf	fsr2l,c
  6641  00046E  0E01               	movlw	high (_params+2)
  6642  000470  2154               	addwfc	(inputEntry@compartmentNum+1)& (0+255),w,b
  6643  000472  6EDA               	movwf	fsr2h,c
  6644  000474  C155  FFDF         	movff	inputEntry@i,indf2
  6645                           
  6646                           ; BSR set to: 1
  6647                           ;menu.c: 110: found = 1;
  6648  000478  0E00               	movlw	0
  6649  00047A  6F3E               	movwf	(inputEntry@found+1)& (0+255),b
  6650  00047C  0E01               	movlw	1
  6651  00047E  6F3D               	movwf	inputEntry@found& (0+255),b
  6652  000480                     l407:
  6653  000480                     l5839:
  6654  000480  0101               	movlb	1	; () banked
  6655  000482  4B55               	infsnz	inputEntry@i& (0+255),f,b
  6656  000484  2B56               	incf	(inputEntry@i+1)& (0+255),f,b
  6657                           
  6658                           ; BSR set to: 1
  6659  000486  BF56               	btfsc	(inputEntry@i+1)& (0+255),7,b
  6660  000488  D759               	goto	l405
  6661  00048A  5156               	movf	(inputEntry@i+1)& (0+255),w,b
  6662  00048C  E101               	bnz	l5843
  6663  00048E  D750               	goto	L5
  6664  000490                     u7420:
  6665  000490                     l5843:
  6666                           
  6667                           ; BSR set to: 1
  6668                           ;menu.c: 111: }
  6669                           ;menu.c: 112: }
  6670                           ;menu.c: 113: if (!found) {
  6671  000490  513D               	movf	inputEntry@found& (0+255),w,b
  6672  000492  113E               	iorwf	(inputEntry@found+1)& (0+255),w,b
  6673  000494  A4D8               	btfss	status,2,c
  6674  000496  D008               	goto	l408
  6675                           
  6676                           ; BSR set to: 1
  6677                           ;menu.c: 114: printErrorLCD(errMsgs.badEntry);
  6678  000498  0E46               	movlw	low _errMsgs
  6679  00049A  0100               	movlb	0	; () banked
  6680  00049C  6F95               	movwf	printErrorLCD@string& (0+255),b
  6681  00049E  0EFC               	movlw	high _errMsgs
  6682  0004A0  6F96               	movwf	(printErrorLCD@string+1)& (0+255),b
  6683  0004A2  EC36  F019         	call	_printErrorLCD	;wreg free
  6684                           
  6685                           ;menu.c: 118: } else {
  6686                           
  6687                           ;menu.c: 117: continue;
  6688  0004A6  D005               	goto	l409
  6689  0004A8                     l408:
  6690                           
  6691                           ;menu.c: 119: setIsGood = 1;
  6692  0004A8  0E00               	movlw	0
  6693  0004AA  0101               	movlb	1	; () banked
  6694  0004AC  6F40               	movwf	(inputEntry@setIsGood+1)& (0+255),b
  6695  0004AE  0E01               	movlw	1
  6696  0004B0                     L3:
  6697  0004B0  6F3F               	movwf	inputEntry@setIsGood& (0+255),b
  6698  0004B2                     l409:
  6699                           
  6700                           ; BSR set to: 1
  6701                           
  6702                           ; BSR set to: 1
  6703  0004B2  0101               	movlb	1	; () banked
  6704  0004B4  513F               	movf	inputEntry@setIsGood& (0+255),w,b
  6705  0004B6  1140               	iorwf	(inputEntry@setIsGood+1)& (0+255),w,b
  6706  0004B8  B4D8               	btfsc	status,2,c
  6707  0004BA  D691               	goto	l383
  6708  0004BC                     u7440:
  6709                           
  6710                           ; BSR set to: 1
  6711                           ;menu.c: 125: doneMultiples = 0;
  6712                           
  6713                           ; BSR set to: 1
  6714                           
  6715                           ;menu.c: 120: }
  6716                           ;menu.c: 121: }
  6717                           ;menu.c: 124: STARTMULTIPLES:
  6718                           
  6719                           ; BSR set to: 1
  6720  0004BC  0E00               	movlw	0
  6721  0004BE  6F42               	movwf	(inputEntry@doneMultiples+1)& (0+255),b
  6722  0004C0  0E00               	movlw	0
  6723  0004C2  D111               	goto	L6
  6724  0004C4                     
  6725                           ; BSR set to: 1
  6726                           ;menu.c: 127: printStringLCD(inputEntryQuestions[2]);
  6727                           
  6728                           ; BSR set to: 1
  6729  0004C4  0E68               	movlw	low (_inputEntryQuestions+66)
  6730  0004C6  0100               	movlb	0	; () banked
  6731  0004C8  6F86               	movwf	printStringLCD@string& (0+255),b
  6732  0004CA  0EFD               	movlw	high (_inputEntryQuestions+66)
  6733  0004CC  6F87               	movwf	(printStringLCD@string+1)& (0+255),b
  6734  0004CE  ECBE  F00F         	call	_printStringLCD	;wreg free
  6735                           
  6736                           ;menu.c: 128: lcd_set_cursor(14, 1);
  6737  0004D2  0E01               	movlw	1
  6738  0004D4  0100               	movlb	0	; () banked
  6739  0004D6  6F86               	movwf	lcd_set_cursor@y& (0+255),b
  6740  0004D8  0E0E               	movlw	14
  6741  0004DA  EC26  F018         	call	_lcd_set_cursor
  6742                           
  6743                           ;menu.c: 130: pressed = pollKeypad();
  6744  0004DE  ECE0  F018         	call	_pollKeypad	;wreg free
  6745  0004E2  0101               	movlb	1	; () banked
  6746  0004E4  6F57               	movwf	inputEntry@pressed& (0+255),b
  6747                           
  6748                           ; BSR set to: 1
  6749                           ;menu.c: 131: numPressed = pressed - 48;
  6750  0004E6  0ED0               	movlw	208
  6751  0004E8  2557               	addwf	inputEntry@pressed& (0+255),w,b
  6752  0004EA  6F51               	movwf	inputEntry@numPressed& (0+255),b
  6753  0004EC  6B52               	clrf	(inputEntry@numPressed+1)& (0+255),b
  6754  0004EE  0EFF               	movlw	255
  6755  0004F0  2352               	addwfc	(inputEntry@numPressed+1)& (0+255),f,b
  6756                           
  6757                           ; BSR set to: 1
  6758                           ;menu.c: 133: if (pressed == 42) goto STARTCOMPARTMENT;
  6759  0004F2  0E2A               	movlw	42
  6760  0004F4  1957               	xorwf	inputEntry@pressed& (0+255),w,b
  6761  0004F6  B4D8               	btfsc	status,2,c
  6762  0004F8  D643               	goto	l376
  6763                           
  6764                           ; BSR set to: 1
  6765                           ;menu.c: 136: putch(pressed);
  6766                           
  6767                           ; BSR set to: 1
  6768                           
  6769                           ; BSR set to: 1
  6770  0004FA  5157               	movf	inputEntry@pressed& (0+255),w,b
  6771  0004FC  EC77  F019         	call	_putch
  6772                           
  6773                           ;menu.c: 137: _delay((unsigned long)((500)*(40000000/4000.0)));
  6774  000500  0E1A               	movlw	26
  6775  000502  0100               	movlb	0	; () banked
  6776  000504  6F9A               	movwf	(??_inputEntry+1)& (0+255),b
  6777  000506  0E5E               	movlw	94
  6778  000508  6F99               	movwf	??_inputEntry& (0+255),b
  6779  00050A  0E6E               	movlw	110
  6780  00050C                     u7917:
  6781  00050C  2EE8               	decfsz	wreg,f,c
  6782  00050E  D7FE               	bra	u7917
  6783  000510  2F99               	decfsz	??_inputEntry& (0+255),f,b
  6784  000512  D7FC               	bra	u7917
  6785  000514  2F9A               	decfsz	(??_inputEntry+1)& (0+255),f,b
  6786  000516  D7FA               	bra	u7917
  6787  000518  F000               	nop	
  6788                           
  6789                           ;menu.c: 139: int sum = 0;
  6790  00051A  0E00               	movlw	0
  6791  00051C  0101               	movlb	1	; () banked
  6792  00051E  6F46               	movwf	(inputEntry@sum+1)& (0+255),b
  6793  000520  0E00               	movlw	0
  6794  000522  6F45               	movwf	inputEntry@sum& (0+255),b
  6795                           
  6796                           ; BSR set to: 1
  6797                           ;menu.c: 140: for (i = 0; i < 4; i++) {
  6798  000524  0E00               	movlw	0
  6799  000526  6F56               	movwf	(inputEntry@i+1)& (0+255),b
  6800  000528  0E00               	movlw	0
  6801  00052A  6F55               	movwf	inputEntry@i& (0+255),b
  6802  00052C                     l5875:
  6803                           
  6804                           ; BSR set to: 1
  6805  00052C  BF56               	btfsc	(inputEntry@i+1)& (0+255),7,b
  6806  00052E  D006               	goto	l414
  6807  000530  5156               	movf	(inputEntry@i+1)& (0+255),w,b
  6808  000532  E12D               	bnz	l5885
  6809  000534  0E04               	movlw	4
  6810  000536  5D55               	subwf	inputEntry@i& (0+255),w,b
  6811  000538  B0D8               	btfsc	status,0,c
  6812  00053A  D029               	goto	u7470
  6813  00053C                     l414:
  6814                           
  6815                           ; BSR set to: 1
  6816                           ;menu.c: 141: sum += fastenerMatrix[params.toFill[compartmentNum]][i];
  6817                           
  6818                           ; BSR set to: 1
  6819  00053C  0EBE               	movlw	low (_params+2)
  6820  00053E  2553               	addwf	inputEntry@compartmentNum& (0+255),w,b
  6821  000540  6ED9               	movwf	fsr2l,c
  6822  000542  0E01               	movlw	high (_params+2)
  6823  000544  2154               	addwfc	(inputEntry@compartmentNum+1)& (0+255),w,b
  6824  000546  6EDA               	movwf	fsr2h,c
  6825  000548  50DF               	movf	indf2,w,c
  6826  00054A  0100               	movlb	0	; () banked
  6827  00054C  6F99               	movwf	??_inputEntry& (0+255),b
  6828  00054E  5199               	movf	??_inputEntry& (0+255),w,b
  6829  000550  0D04               	mullw	4
  6830  000552  0EAA               	movlw	low _fastenerMatrix
  6831  000554  6F9A               	movwf	(??_inputEntry+1)& (0+255),b
  6832  000556  0EFD               	movlw	high _fastenerMatrix
  6833  000558  6F9B               	movwf	(??_inputEntry+2)& (0+255),b
  6834  00055A  50F3               	movf	prodl,w,c
  6835  00055C  279A               	addwf	(??_inputEntry+1)& (0+255),f,b
  6836  00055E  50F4               	movf	prodh,w,c
  6837  000560  239B               	addwfc	(??_inputEntry+2)& (0+255),f,b
  6838  000562  0101               	movlb	1	; () banked
  6839  000564  5155               	movf	inputEntry@i& (0+255),w,b
  6840  000566  0100               	movlb	0	; () banked
  6841  000568  279A               	addwf	(??_inputEntry+1)& (0+255),f,b
  6842  00056A  0101               	movlb	1	; () banked
  6843  00056C  5156               	movf	(inputEntry@i+1)& (0+255),w,b
  6844  00056E  0100               	movlb	0	; () banked
  6845  000570  239B               	addwfc	(??_inputEntry+2)& (0+255),f,b
  6846  000572  C09A  FFF6         	movff	??_inputEntry+1,tblptrl
  6847  000576  C09B  FFF7         	movff	??_inputEntry+2,tblptrh
  6848  00057A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6849  00057A  6AF8               	clrf	tblptru,c
  6850  00057C                     	endif
  6851  00057C                     	if	0	;tblptru may be non-zero
  6852  00057C                     	endif
  6853  00057C  0008               	tblrd		*
  6854  00057E  50F5               	movf	tablat,w,c
  6855  000580  0101               	movlb	1	; () banked
  6856  000582  2745               	addwf	inputEntry@sum& (0+255),f,b
  6857  000584  0E00               	movlw	0
  6858  000586  2346               	addwfc	(inputEntry@sum+1)& (0+255),f,b
  6859                           
  6860                           ; BSR set to: 1
  6861  000588  4B55               	infsnz	inputEntry@i& (0+255),f,b
  6862  00058A  2B56               	incf	(inputEntry@i+1)& (0+255),f,b
  6863  00058C  D7CF               	goto	l5875
  6864  00058E                     u7470:
  6865  00058E                     l5885:
  6866                           
  6867                           ; BSR set to: 1
  6868                           ;menu.c: 142: };
  6869                           ;menu.c: 143: if (numPressed * sum > 4) {
  6870  00058E  C151  F080         	movff	inputEntry@numPressed,___wmul@multiplier
  6871  000592  C152  F081         	movff	inputEntry@numPressed+1,___wmul@multiplier+1
  6872  000596  C145  F082         	movff	inputEntry@sum,___wmul@multiplicand
  6873  00059A  C146  F083         	movff	inputEntry@sum+1,___wmul@multiplicand+1
  6874  00059E  EC22  F019         	call	___wmul	;wreg free
  6875  0005A2  0100               	movlb	0	; () banked
  6876  0005A4  BF81               	btfsc	(?___wmul+1)& (0+255),7,b
  6877  0005A6  D00D               	goto	l416
  6878  0005A8  5181               	movf	(?___wmul+1)& (0+255),w,b
  6879  0005AA  E104               	bnz	u7480
  6880  0005AC  0E05               	movlw	5
  6881  0005AE  5D80               	subwf	?___wmul& (0+255),w,b
  6882  0005B0  A0D8               	btfss	status,0,c
  6883  0005B2  D007               	goto	l416
  6884  0005B4                     u7480:
  6885                           
  6886                           ; BSR set to: 0
  6887                           ;menu.c: 144: printErrorLCD(errMsgs.tooManyFasteners);
  6888  0005B4  0E66               	movlw	low (_errMsgs+32)
  6889  0005B6  6F95               	movwf	printErrorLCD@string& (0+255),b
  6890  0005B8  0EFC               	movlw	high (_errMsgs+32)
  6891  0005BA  6F96               	movwf	(printErrorLCD@string+1)& (0+255),b
  6892  0005BC  EC36  F019         	call	_printErrorLCD	;wreg free
  6893                           
  6894                           ;menu.c: 145: } else if (numPressed * sum <= 0) {
  6895  0005C0  D093               	goto	l427
  6896  0005C2                     l416:
  6897  0005C2  C151  F080         	movff	inputEntry@numPressed,___wmul@multiplier
  6898  0005C6  C152  F081         	movff	inputEntry@numPressed+1,___wmul@multiplier+1
  6899  0005CA  C145  F082         	movff	inputEntry@sum,___wmul@multiplicand
  6900  0005CE  C146  F083         	movff	inputEntry@sum+1,___wmul@multiplicand+1
  6901  0005D2  EC22  F019         	call	___wmul	;wreg free
  6902  0005D6  0100               	movlb	0	; () banked
  6903  0005D8  BF81               	btfsc	(?___wmul+1)& (0+255),7,b
  6904  0005DA  D005               	goto	u7490
  6905  0005DC  5181               	movf	(?___wmul+1)& (0+255),w,b
  6906  0005DE  E10A               	bnz	l5893
  6907  0005E0  0580               	decf	?___wmul& (0+255),w,b
  6908  0005E2  B0D8               	btfsc	status,0,c
  6909  0005E4  D007               	goto	l418
  6910  0005E6                     u7490:
  6911                           
  6912                           ; BSR set to: 0
  6913                           ;menu.c: 146: printErrorLCD(errMsgs.noFasteners);
  6914  0005E6  0E06               	movlw	low (_errMsgs+192)
  6915  0005E8  6F95               	movwf	printErrorLCD@string& (0+255),b
  6916  0005EA  0EFD               	movlw	high (_errMsgs+192)
  6917  0005EC  6F96               	movwf	(printErrorLCD@string+1)& (0+255),b
  6918  0005EE  EC36  F019         	call	_printErrorLCD	;wreg free
  6919                           
  6920                           ;menu.c: 150: } else if (numB * numPressed > 2) {
  6921  0005F2  D07A               	goto	l427
  6922  0005F4                     l418:
  6923  0005F4                     l5893:
  6924  0005F4  C147  F080         	movff	inputEntry@numB,___wmul@multiplier
  6925  0005F8  C148  F081         	movff	inputEntry@numB+1,___wmul@multiplier+1
  6926  0005FC  C151  F082         	movff	inputEntry@numPressed,___wmul@multiplicand
  6927  000600  C152  F083         	movff	inputEntry@numPressed+1,___wmul@multiplicand+1
  6928  000604  EC22  F019         	call	___wmul	;wreg free
  6929  000608  0100               	movlb	0	; () banked
  6930  00060A  BF81               	btfsc	(?___wmul+1)& (0+255),7,b
  6931  00060C  D00D               	goto	l420
  6932  00060E  5181               	movf	(?___wmul+1)& (0+255),w,b
  6933  000610  E104               	bnz	u7500
  6934  000612  0E03               	movlw	3
  6935  000614  5D80               	subwf	?___wmul& (0+255),w,b
  6936  000616  A0D8               	btfss	status,0,c
  6937  000618  D007               	goto	l420
  6938  00061A                     u7500:
  6939                           
  6940                           ; BSR set to: 0
  6941                           ;menu.c: 151: printErrorLCD(errMsgs.tooManyBolts);
  6942  00061A  0E86               	movlw	low (_errMsgs+64)
  6943  00061C  6F95               	movwf	printErrorLCD@string& (0+255),b
  6944  00061E  0EFC               	movlw	high (_errMsgs+64)
  6945  000620  6F96               	movwf	(printErrorLCD@string+1)& (0+255),b
  6946  000622  EC36  F019         	call	_printErrorLCD	;wreg free
  6947                           
  6948                           ;menu.c: 152: } else if (numN * numPressed > 3) {
  6949  000626  D060               	goto	l427
  6950  000628                     l420:
  6951  000628  C149  F080         	movff	inputEntry@numN,___wmul@multiplier
  6952  00062C  C14A  F081         	movff	inputEntry@numN+1,___wmul@multiplier+1
  6953  000630  C151  F082         	movff	inputEntry@numPressed,___wmul@multiplicand
  6954  000634  C152  F083         	movff	inputEntry@numPressed+1,___wmul@multiplicand+1
  6955  000638  EC22  F019         	call	___wmul	;wreg free
  6956  00063C  0100               	movlb	0	; () banked
  6957  00063E  BF81               	btfsc	(?___wmul+1)& (0+255),7,b
  6958  000640  D00D               	goto	l422
  6959  000642  5181               	movf	(?___wmul+1)& (0+255),w,b
  6960  000644  E104               	bnz	u7510
  6961  000646  0E04               	movlw	4
  6962  000648  5D80               	subwf	?___wmul& (0+255),w,b
  6963  00064A  A0D8               	btfss	status,0,c
  6964  00064C  D007               	goto	l422
  6965  00064E                     u7510:
  6966                           
  6967                           ; BSR set to: 0
  6968                           ;menu.c: 153: printErrorLCD(errMsgs.tooManyNuts);
  6969  00064E  0EA6               	movlw	low (_errMsgs+96)
  6970  000650  6F95               	movwf	printErrorLCD@string& (0+255),b
  6971  000652  0EFC               	movlw	high (_errMsgs+96)
  6972  000654  6F96               	movwf	(printErrorLCD@string+1)& (0+255),b
  6973  000656  EC36  F019         	call	_printErrorLCD	;wreg free
  6974                           
  6975                           ;menu.c: 154: } else if (numS * numPressed > 2) {
  6976  00065A  D046               	goto	l427
  6977  00065C                     l422:
  6978  00065C  C14B  F080         	movff	inputEntry@numS,___wmul@multiplier
  6979  000660  C14C  F081         	movff	inputEntry@numS+1,___wmul@multiplier+1
  6980  000664  C151  F082         	movff	inputEntry@numPressed,___wmul@multiplicand
  6981  000668  C152  F083         	movff	inputEntry@numPressed+1,___wmul@multiplicand+1
  6982  00066C  EC22  F019         	call	___wmul	;wreg free
  6983  000670  0100               	movlb	0	; () banked
  6984  000672  BF81               	btfsc	(?___wmul+1)& (0+255),7,b
  6985  000674  D00D               	goto	l424
  6986  000676  5181               	movf	(?___wmul+1)& (0+255),w,b
  6987  000678  E104               	bnz	u7520
  6988  00067A  0E03               	movlw	3
  6989  00067C  5D80               	subwf	?___wmul& (0+255),w,b
  6990  00067E  A0D8               	btfss	status,0,c
  6991  000680  D007               	goto	l424
  6992  000682                     u7520:
  6993                           
  6994                           ; BSR set to: 0
  6995                           ;menu.c: 155: printErrorLCD(errMsgs.tooManySpacers);
  6996  000682  0EE6               	movlw	low (_errMsgs+160)
  6997  000684  6F95               	movwf	printErrorLCD@string& (0+255),b
  6998  000686  0EFC               	movlw	high (_errMsgs+160)
  6999  000688  6F96               	movwf	(printErrorLCD@string+1)& (0+255),b
  7000  00068A  EC36  F019         	call	_printErrorLCD	;wreg free
  7001                           
  7002                           ;menu.c: 156: } else if (numW * numPressed > 4) {
  7003  00068E  D02C               	goto	l427
  7004  000690                     l424:
  7005  000690  C14D  F080         	movff	inputEntry@numW,___wmul@multiplier
  7006  000694  C14E  F081         	movff	inputEntry@numW+1,___wmul@multiplier+1
  7007  000698  C151  F082         	movff	inputEntry@numPressed,___wmul@multiplicand
  7008  00069C  C152  F083         	movff	inputEntry@numPressed+1,___wmul@multiplicand+1
  7009  0006A0  EC22  F019         	call	___wmul	;wreg free
  7010  0006A4  0100               	movlb	0	; () banked
  7011  0006A6  BF81               	btfsc	(?___wmul+1)& (0+255),7,b
  7012  0006A8  D00D               	goto	l426
  7013  0006AA  5181               	movf	(?___wmul+1)& (0+255),w,b
  7014  0006AC  E104               	bnz	u7530
  7015  0006AE  0E05               	movlw	5
  7016  0006B0  5D80               	subwf	?___wmul& (0+255),w,b
  7017  0006B2  A0D8               	btfss	status,0,c
  7018  0006B4  D007               	goto	l426
  7019  0006B6                     u7530:
  7020                           
  7021                           ; BSR set to: 0
  7022                           ;menu.c: 157: printErrorLCD(errMsgs.tooManyWashers);
  7023  0006B6  0EC6               	movlw	low (_errMsgs+128)
  7024  0006B8  6F95               	movwf	printErrorLCD@string& (0+255),b
  7025  0006BA  0EFC               	movlw	high (_errMsgs+128)
  7026  0006BC  6F96               	movwf	(printErrorLCD@string+1)& (0+255),b
  7027  0006BE  EC36  F019         	call	_printErrorLCD	;wreg free
  7028                           
  7029                           ;menu.c: 158: } else {
  7030  0006C2  D012               	goto	l427
  7031  0006C4                     l426:
  7032                           
  7033                           ;menu.c: 159: params.setMultiple[compartmentNum] = numPressed;
  7034  0006C4  90D8               	bcf	status,0,c
  7035  0006C6  0101               	movlb	1	; () banked
  7036  0006C8  3553               	rlcf	inputEntry@compartmentNum& (0+255),w,b
  7037  0006CA  6ED9               	movwf	fsr2l,c
  7038  0006CC  3554               	rlcf	(inputEntry@compartmentNum+1)& (0+255),w,b
  7039  0006CE  6EDA               	movwf	fsr2h,c
  7040  0006D0  0EC6               	movlw	low (_params+10)
  7041  0006D2  26D9               	addwf	fsr2l,f,c
  7042  0006D4  0E01               	movlw	high (_params+10)
  7043  0006D6  22DA               	addwfc	fsr2h,f,c
  7044  0006D8  C151  FFDE         	movff	inputEntry@numPressed,postinc2
  7045  0006DC  C152  FFDD         	movff	inputEntry@numPressed+1,postdec2
  7046                           
  7047                           ; BSR set to: 1
  7048                           ;menu.c: 160: doneMultiples = 1;
  7049  0006E0  0E00               	movlw	0
  7050  0006E2  6F42               	movwf	(inputEntry@doneMultiples+1)& (0+255),b
  7051  0006E4  0E01               	movlw	1
  7052  0006E6                     L6:
  7053  0006E6  6F41               	movwf	inputEntry@doneMultiples& (0+255),b
  7054  0006E8                     l427:
  7055                           
  7056                           ; BSR set to: 1
  7057                           
  7058                           ; BSR set to: 1
  7059                           
  7060                           ; BSR set to: 1
  7061                           
  7062                           ; BSR set to: 1
  7063                           
  7064                           ; BSR set to: 1
  7065                           
  7066                           ; BSR set to: 1
  7067                           
  7068                           ; BSR set to: 1
  7069  0006E8  0101               	movlb	1	; () banked
  7070  0006EA  5141               	movf	inputEntry@doneMultiples& (0+255),w,b
  7071  0006EC  1142               	iorwf	(inputEntry@doneMultiples+1)& (0+255),w,b
  7072  0006EE  A4D8               	btfss	status,2,c
  7073  0006F0  D017               	goto	l429
  7074  0006F2  D6E8               	goto	l412
  7075  0006F4                     l379:
  7076                           
  7077                           ;menu.c: 164: params.toFill[compartmentNum] = NONE;
  7078                           
  7079                           ; BSR set to: 1
  7080  0006F4  0EBE               	movlw	low (_params+2)
  7081  0006F6  0101               	movlb	1	; () banked
  7082  0006F8  2553               	addwf	inputEntry@compartmentNum& (0+255),w,b
  7083  0006FA  6ED9               	movwf	fsr2l,c
  7084  0006FC  0E01               	movlw	high (_params+2)
  7085  0006FE  2154               	addwfc	(inputEntry@compartmentNum+1)& (0+255),w,b
  7086  000700  6EDA               	movwf	fsr2h,c
  7087  000702  0E00               	movlw	0
  7088  000704  6EDF               	movwf	indf2,c
  7089                           
  7090                           ;menu.c: 165: params.setMultiple[compartmentNum] = 0;
  7091  000706  90D8               	bcf	status,0,c
  7092  000708  3553               	rlcf	inputEntry@compartmentNum& (0+255),w,b
  7093  00070A  6ED9               	movwf	fsr2l,c
  7094  00070C  3554               	rlcf	(inputEntry@compartmentNum+1)& (0+255),w,b
  7095  00070E  6EDA               	movwf	fsr2h,c
  7096  000710  0EC6               	movlw	low (_params+10)
  7097  000712  26D9               	addwf	fsr2l,f,c
  7098  000714  0E01               	movlw	high (_params+10)
  7099  000716  22DA               	addwfc	fsr2h,f,c
  7100  000718  0E00               	movlw	0
  7101  00071A  6EDE               	movwf	postinc2,c
  7102  00071C  0E00               	movlw	0
  7103  00071E  6EDD               	movwf	postdec2,c
  7104  000720                     l429:
  7105                           
  7106                           ; BSR set to: 1
  7107                           
  7108                           ; BSR set to: 1
  7109  000720  4B53               	infsnz	inputEntry@compartmentNum& (0+255),f,b
  7110  000722  2B54               	incf	(inputEntry@compartmentNum+1)& (0+255),f,b
  7111                           
  7112                           ; BSR set to: 1
  7113  000724  BF54               	btfsc	(inputEntry@compartmentNum+1)& (0+255),7,b
  7114  000726  D52C               	goto	l376
  7115  000728  5154               	movf	(inputEntry@compartmentNum+1)& (0+255),w,b
  7116  00072A  E104               	bnz	l5921
  7117  00072C  0E08               	movlw	8
  7118  00072E  5D53               	subwf	inputEntry@compartmentNum& (0+255),w,b
  7119  000730  A0D8               	btfss	status,0,c
  7120  000732  D526               	goto	l376
  7121  000734                     u7550:
  7122  000734                     l5921:
  7123                           
  7124                           ; BSR set to: 1
  7125                           ;menu.c: 166: }
  7126                           ;menu.c: 167: }
  7127                           ;menu.c: 168: done = 1;
  7128  000734  0E00               	movlw	0
  7129  000736  6F3C               	movwf	(inputEntry@done+1)& (0+255),b
  7130  000738  0E01               	movlw	1
  7131  00073A  6F3B               	movwf	inputEntry@done& (0+255),b
  7132                           
  7133                           ; BSR set to: 1
  7134                           ;menu.c: 169: I2C_Send(nanoAddr, "\1Done inputs\0");
  7135  00073C  0EA4               	movlw	low STR_18
  7136  00073E  0100               	movlb	0	; () banked
  7137  000740  6F83               	movwf	I2C_Send@data& (0+255),b
  7138  000742  0EFF               	movlw	high STR_18
  7139  000744  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  7140  000746  0E3F               	movlw	low _nanoAddr
  7141  000748  6EF6               	movwf	tblptrl,c
  7142  00074A                     	if	1	;There is more than 1 active tblptr byte
  7143  00074A  0EFC               	movlw	high _nanoAddr
  7144  00074C  6EF7               	movwf	tblptrh,c
  7145  00074E                     	endif
  7146  00074E                     	if	1	;There are 3 active tblptr bytes
  7147  00074E  0E00               	movlw	low (_nanoAddr shr (0+16))
  7148  000750  6EF8               	movwf	tblptru,c
  7149  000752                     	endif
  7150  000752  0008               	tblrd		*
  7151  000754  50F5               	movf	tablat,w,c
  7152  000756  EC83  F015         	call	_I2C_Send
  7153  00075A                     l375:
  7154  00075A  0101               	movlb	1	; () banked
  7155  00075C  513B               	movf	inputEntry@done& (0+255),w,b
  7156  00075E  113C               	iorwf	(inputEntry@done+1)& (0+255),w,b
  7157  000760  A4D8               	btfss	status,2,c
  7158  000762  0012               	return	
  7159  000764  D48E               	goto	l370
  7160  000766                     __end_of_inputEntry:
  7161                           	opt stack 0
  7162                           tosu	equ	0xFFF
  7163                           tosh	equ	0xFFE
  7164                           tosl	equ	0xFFD
  7165                           pclath	equ	0xFFA
  7166                           tblptru	equ	0xFF8
  7167                           tblptrh	equ	0xFF7
  7168                           tblptrl	equ	0xFF6
  7169                           tablat	equ	0xFF5
  7170                           prodh	equ	0xFF4
  7171                           prodl	equ	0xFF3
  7172                           intcon	equ	0xFF2
  7173                           indf0	equ	0xFEF
  7174                           postinc0	equ	0xFEE
  7175                           fsr0h	equ	0xFEA
  7176                           fsr0l	equ	0xFE9
  7177                           wreg	equ	0xFE8
  7178                           postdec1	equ	0xFE5
  7179                           plusw1	equ	0xFE3
  7180                           fsr1l	equ	0xFE1
  7181                           indf2	equ	0xFDF
  7182                           postinc2	equ	0xFDE
  7183                           postdec2	equ	0xFDD
  7184                           plusw2	equ	0xFDB
  7185                           fsr2h	equ	0xFDA
  7186                           fsr2l	equ	0xFD9
  7187                           status	equ	0xFD8
  7188                           
  7189 ;; *************** function _strcpy *****************
  7190 ;; Defined at:
  7191 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
  7192 ;; Parameters:    Size  Location     Type
  7193 ;;  to              2    6[BANK0 ] PTR unsigned char 
  7194 ;;		 -> inputEntry@fastenerString(32), 
  7195 ;;  from            2    8[BANK0 ] PTR const unsigned char 
  7196 ;;		 -> inputEntryQuestions(132), 
  7197 ;; Auto vars:     Size  Location     Type
  7198 ;;  cp              2   10[BANK0 ] PTR unsigned char 
  7199 ;;		 -> inputEntry@fastenerString(32), 
  7200 ;; Return value:  Size  Location     Type
  7201 ;;                  2    6[BANK0 ] PTR unsigned char 
  7202 ;; Registers used:
  7203 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7204 ;; Tracked objects:
  7205 ;;		On entry : 0/0
  7206 ;;		On exit  : 0/0
  7207 ;;		Unchanged: 0/0
  7208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7209 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7210 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7212 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7213 ;;Total ram usage:        6 bytes
  7214 ;; Hardware stack levels used:    1
  7215 ;; Hardware stack levels required when called:    4
  7216 ;; This function calls:
  7217 ;;		Nothing
  7218 ;; This function is called by:
  7219 ;;		_inputEntry
  7220 ;; This function uses a non-reentrant model
  7221 ;;
  7222                           
  7223                           	psect	text11
  7224  00318C                     __ptext11:
  7225                           	opt stack 0
  7226  00318C                     _strcpy:
  7227                           	opt stack 24
  7228                           
  7229                           ; BSR set to: 1
  7230                           ;incstack = 0
  7231  00318C  C086  F08A         	movff	strcpy@to,strcpy@cp
  7232  003190  C087  F08B         	movff	strcpy@to+1,strcpy@cp+1
  7233  003194  D005               	goto	l1365
  7234  003196  0100               	movlb	0	; () banked
  7235  003198  4B8A               	infsnz	strcpy@cp& (0+255),f,b
  7236  00319A  2B8B               	incf	(strcpy@cp+1)& (0+255),f,b
  7237  00319C  4B88               	infsnz	strcpy@from& (0+255),f,b
  7238  00319E  2B89               	incf	(strcpy@from+1)& (0+255),f,b
  7239  0031A0                     l1365:
  7240                           
  7241                           ; BSR set to: 0
  7242  0031A0  C088  FFF6         	movff	strcpy@from,tblptrl
  7243  0031A4  C089  FFF7         	movff	strcpy@from+1,tblptrh
  7244  0031A8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7245  0031A8  6AF8               	clrf	tblptru,c
  7246  0031AA                     	endif
  7247  0031AA                     	if	0	;tblptru may be non-zero
  7248  0031AA                     	endif
  7249  0031AA  C08A  FFD9         	movff	strcpy@cp,fsr2l
  7250  0031AE  C08B  FFDA         	movff	strcpy@cp+1,fsr2h
  7251  0031B2  0008               	tblrd		*
  7252  0031B4  CFF5 FFDF          	movff	tablat,indf2
  7253  0031B8  50DF               	movf	indf2,w,c
  7254  0031BA  B4D8               	btfsc	status,2,c
  7255  0031BC  0012               	return	
  7256  0031BE  D7EB               	goto	l1366
  7257  0031C0                     __end_of_strcpy:
  7258                           	opt stack 0
  7259                           tosu	equ	0xFFF
  7260                           tosh	equ	0xFFE
  7261                           tosl	equ	0xFFD
  7262                           pclath	equ	0xFFA
  7263                           tblptru	equ	0xFF8
  7264                           tblptrh	equ	0xFF7
  7265                           tblptrl	equ	0xFF6
  7266                           tablat	equ	0xFF5
  7267                           prodh	equ	0xFF4
  7268                           prodl	equ	0xFF3
  7269                           intcon	equ	0xFF2
  7270                           indf0	equ	0xFEF
  7271                           postinc0	equ	0xFEE
  7272                           fsr0h	equ	0xFEA
  7273                           fsr0l	equ	0xFE9
  7274                           wreg	equ	0xFE8
  7275                           postdec1	equ	0xFE5
  7276                           plusw1	equ	0xFE3
  7277                           fsr1l	equ	0xFE1
  7278                           indf2	equ	0xFDF
  7279                           postinc2	equ	0xFDE
  7280                           postdec2	equ	0xFDD
  7281                           plusw2	equ	0xFDB
  7282                           fsr2h	equ	0xFDA
  7283                           fsr2l	equ	0xFD9
  7284                           status	equ	0xFD8
  7285                           
  7286 ;; *************** function _printErrorLCD *****************
  7287 ;; Defined at:
  7288 ;;		line 62 in file "helpers.c"
  7289 ;; Parameters:    Size  Location     Type
  7290 ;;  string          2   21[BANK0 ] PTR unsigned char 
  7291 ;;		 -> errMsgs.noFasteners(32), errMsgs.tooManySpacers(32), errMsgs.tooManyWashers(32), errMsgs.tooManyNuts(32), 
  7292 ;;		 -> errMsgs.tooManyBolts(32), errMsgs.tooManyFasteners(32), errMsgs.badEntry(32), errMsgs(224), 
  7293 ;; Auto vars:     Size  Location     Type
  7294 ;;		None
  7295 ;; Return value:  Size  Location     Type
  7296 ;;                  1    wreg      void 
  7297 ;; Registers used:
  7298 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7299 ;; Tracked objects:
  7300 ;;		On entry : 0/0
  7301 ;;		On exit  : 0/0
  7302 ;;		Unchanged: 0/0
  7303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7304 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7306 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7307 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7308 ;;Total ram usage:        4 bytes
  7309 ;; Hardware stack levels used:    1
  7310 ;; Hardware stack levels required when called:    7
  7311 ;; This function calls:
  7312 ;;		_printStringLCD
  7313 ;; This function is called by:
  7314 ;;		_inputEntry
  7315 ;; This function uses a non-reentrant model
  7316 ;;
  7317                           
  7318                           	psect	text12
  7319  00326C                     __ptext12:
  7320                           	opt stack 0
  7321  00326C                     _printErrorLCD:
  7322                           	opt stack 21
  7323                           
  7324                           ;helpers.c: 63: printStringLCD(string);
  7325                           
  7326                           ;incstack = 0
  7327  00326C  C095  F086         	movff	printErrorLCD@string,printStringLCD@string
  7328  003270  C096  F087         	movff	printErrorLCD@string+1,printStringLCD@string+1
  7329  003274  ECBE  F00F         	call	_printStringLCD	;wreg free
  7330                           
  7331                           ;helpers.c: 64: _delay((unsigned long)((2000)*(40000000/4000.0)));
  7332  003278  0E66               	movlw	102
  7333  00327A  0100               	movlb	0	; () banked
  7334  00327C  6F98               	movwf	(??_printErrorLCD+1)& (0+255),b
  7335  00327E  0E76               	movlw	118
  7336  003280  6F97               	movwf	??_printErrorLCD& (0+255),b
  7337  003282  0EC1               	movlw	193
  7338  003284                     u7927:
  7339  003284  2EE8               	decfsz	wreg,f,c
  7340  003286  D7FE               	bra	u7927
  7341  003288  2F97               	decfsz	??_printErrorLCD& (0+255),f,b
  7342  00328A  D7FC               	bra	u7927
  7343  00328C  2F98               	decfsz	(??_printErrorLCD+1)& (0+255),f,b
  7344  00328E  D7FA               	bra	u7927
  7345  003290  0012               	return		;funcret
  7346  003292                     __end_of_printErrorLCD:
  7347                           	opt stack 0
  7348                           tosu	equ	0xFFF
  7349                           tosh	equ	0xFFE
  7350                           tosl	equ	0xFFD
  7351                           pclath	equ	0xFFA
  7352                           tblptru	equ	0xFF8
  7353                           tblptrh	equ	0xFF7
  7354                           tblptrl	equ	0xFF6
  7355                           tablat	equ	0xFF5
  7356                           prodh	equ	0xFF4
  7357                           prodl	equ	0xFF3
  7358                           intcon	equ	0xFF2
  7359                           indf0	equ	0xFEF
  7360                           postinc0	equ	0xFEE
  7361                           fsr0h	equ	0xFEA
  7362                           fsr0l	equ	0xFE9
  7363                           wreg	equ	0xFE8
  7364                           postdec1	equ	0xFE5
  7365                           plusw1	equ	0xFE3
  7366                           fsr1l	equ	0xFE1
  7367                           indf2	equ	0xFDF
  7368                           postinc2	equ	0xFDE
  7369                           postdec2	equ	0xFDD
  7370                           plusw2	equ	0xFDB
  7371                           fsr2h	equ	0xFDA
  7372                           fsr2l	equ	0xFD9
  7373                           status	equ	0xFD8
  7374                           
  7375 ;; *************** function _lcd_set_cursor *****************
  7376 ;; Defined at:
  7377 ;;		line 81 in file "lcd.c"
  7378 ;; Parameters:    Size  Location     Type
  7379 ;;  x               1    wreg     unsigned char 
  7380 ;;  y               1    6[BANK0 ] unsigned char 
  7381 ;; Auto vars:     Size  Location     Type
  7382 ;;  x               1    9[BANK0 ] unsigned char 
  7383 ;;  i               1    8[BANK0 ] unsigned char 
  7384 ;; Return value:  Size  Location     Type
  7385 ;;                  1    wreg      void 
  7386 ;; Registers used:
  7387 ;;		wreg, status,2, status,0, cstack
  7388 ;; Tracked objects:
  7389 ;;		On entry : 0/0
  7390 ;;		On exit  : 0/0
  7391 ;;		Unchanged: 0/0
  7392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7393 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7394 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7395 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7396 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7397 ;;Total ram usage:        4 bytes
  7398 ;; Hardware stack levels used:    1
  7399 ;; Hardware stack levels required when called:    7
  7400 ;; This function calls:
  7401 ;;		_lcdInst
  7402 ;;		_lcd_shift_cursor
  7403 ;; This function is called by:
  7404 ;;		_inputEntry
  7405 ;; This function uses a non-reentrant model
  7406 ;;
  7407                           
  7408                           	psect	text13
  7409  00304C                     __ptext13:
  7410                           	opt stack 0
  7411  00304C                     _lcd_set_cursor:
  7412                           	opt stack 21
  7413                           
  7414                           ;incstack = 0
  7415                           ;lcd_set_cursor@x stored from wreg
  7416  00304C  0100               	movlb	0	; () banked
  7417  00304E  6F89               	movwf	lcd_set_cursor@x& (0+255),b
  7418                           
  7419                           ;lcd.c: 91: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  7420  003050  0E80               	movlw	128
  7421  003052  EC83  F019         	call	_lcdInst
  7422  003056  0E41               	movlw	65
  7423  003058  0100               	movlb	0	; () banked
  7424  00305A  6F87               	movwf	??_lcd_set_cursor& (0+255),b
  7425  00305C  0EEE               	movlw	238
  7426  00305E                     u7937:
  7427  00305E  2EE8               	decfsz	wreg,f,c
  7428  003060  D7FE               	bra	u7937
  7429  003062  2F87               	decfsz	??_lcd_set_cursor& (0+255),f,b
  7430  003064  D7FC               	bra	u7937
  7431  003066  F000               	nop	
  7432                           
  7433                           ;lcd.c: 92: for(unsigned char i = 0; i < y; i++){lcdInst(0xC0);;}
  7434  003068  0E00               	movlw	0
  7435  00306A  0100               	movlb	0	; () banked
  7436  00306C  6F88               	movwf	lcd_set_cursor@i& (0+255),b
  7437  00306E  D005               	goto	l272
  7438  003070                     
  7439                           ; BSR set to: 0
  7440                           
  7441                           ; BSR set to: 0
  7442  003070  0EC0               	movlw	192
  7443  003072  EC83  F019         	call	_lcdInst
  7444  003076  0100               	movlb	0	; () banked
  7445  003078  2B88               	incf	lcd_set_cursor@i& (0+255),f,b
  7446  00307A                     l272:
  7447                           
  7448                           ; BSR set to: 0
  7449                           
  7450                           ; BSR set to: 0
  7451  00307A  5186               	movf	lcd_set_cursor@y& (0+255),w,b
  7452  00307C  5D88               	subwf	lcd_set_cursor@i& (0+255),w,b
  7453  00307E  A0D8               	btfss	status,0,c
  7454  003080  D7F7               	goto	l273
  7455                           
  7456                           ; BSR set to: 0
  7457                           ;lcd.c: 93: if(x > 0){
  7458                           
  7459                           ; BSR set to: 0
  7460  003082  5189               	movf	lcd_set_cursor@x& (0+255),w,b
  7461  003084  B4D8               	btfsc	status,2,c
  7462  003086  0012               	return	
  7463                           
  7464                           ; BSR set to: 0
  7465                           ;lcd.c: 94: lcd_shift_cursor(x, 1);
  7466  003088  0E01               	movlw	1
  7467  00308A  6F83               	movwf	lcd_shift_cursor@direction& (0+255),b
  7468  00308C  5189               	movf	lcd_set_cursor@x& (0+255),w,b
  7469  00308E  EC5A  F019         	call	_lcd_shift_cursor
  7470  003092  0012               	return	
  7471  003094                     __end_of_lcd_set_cursor:
  7472                           	opt stack 0
  7473                           tosu	equ	0xFFF
  7474                           tosh	equ	0xFFE
  7475                           tosl	equ	0xFFD
  7476                           pclath	equ	0xFFA
  7477                           tblptru	equ	0xFF8
  7478                           tblptrh	equ	0xFF7
  7479                           tblptrl	equ	0xFF6
  7480                           tablat	equ	0xFF5
  7481                           prodh	equ	0xFF4
  7482                           prodl	equ	0xFF3
  7483                           intcon	equ	0xFF2
  7484                           indf0	equ	0xFEF
  7485                           postinc0	equ	0xFEE
  7486                           fsr0h	equ	0xFEA
  7487                           fsr0l	equ	0xFE9
  7488                           wreg	equ	0xFE8
  7489                           postdec1	equ	0xFE5
  7490                           plusw1	equ	0xFE3
  7491                           fsr1l	equ	0xFE1
  7492                           indf2	equ	0xFDF
  7493                           postinc2	equ	0xFDE
  7494                           postdec2	equ	0xFDD
  7495                           plusw2	equ	0xFDB
  7496                           fsr2h	equ	0xFDA
  7497                           fsr2l	equ	0xFD9
  7498                           status	equ	0xFD8
  7499                           
  7500 ;; *************** function _lcd_shift_cursor *****************
  7501 ;; Defined at:
  7502 ;;		line 98 in file "lcd.c"
  7503 ;; Parameters:    Size  Location     Type
  7504 ;;  numChars        1    wreg     unsigned char 
  7505 ;;  direction       1    3[BANK0 ] unsigned char 
  7506 ;; Auto vars:     Size  Location     Type
  7507 ;;  numChars        1    4[BANK0 ] unsigned char 
  7508 ;;  n               1    5[BANK0 ] unsigned char 
  7509 ;; Return value:  Size  Location     Type
  7510 ;;                  1    wreg      void 
  7511 ;; Registers used:
  7512 ;;		wreg, status,2, status,0, cstack
  7513 ;; Tracked objects:
  7514 ;;		On entry : 0/0
  7515 ;;		On exit  : 0/0
  7516 ;;		Unchanged: 0/0
  7517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7518 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7519 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7521 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7522 ;;Total ram usage:        3 bytes
  7523 ;; Hardware stack levels used:    1
  7524 ;; Hardware stack levels required when called:    6
  7525 ;; This function calls:
  7526 ;;		_lcdInst
  7527 ;; This function is called by:
  7528 ;;		_lcd_set_cursor
  7529 ;; This function uses a non-reentrant model
  7530 ;;
  7531                           
  7532                           	psect	text14
  7533  0032B4                     __ptext14:
  7534                           	opt stack 0
  7535  0032B4                     _lcd_shift_cursor:
  7536                           	opt stack 21
  7537                           
  7538                           ;incstack = 0
  7539                           ;lcd_shift_cursor@numChars stored from wreg
  7540  0032B4  0100               	movlb	0	; () banked
  7541  0032B6  6F84               	movwf	lcd_shift_cursor@numChars& (0+255),b
  7542                           
  7543                           ;lcd.c: 110: for(unsigned char n = numChars; n > 0; n--){
  7544  0032B8  C084  F085         	movff	lcd_shift_cursor@numChars,lcd_shift_cursor@n
  7545  0032BC  0100               	movlb	0	; () banked
  7546  0032BE  5185               	movf	lcd_shift_cursor@n& (0+255),w,b
  7547  0032C0  B4D8               	btfsc	status,2,c
  7548  0032C2  0012               	return	
  7549                           
  7550                           ; BSR set to: 0
  7551                           ;lcd.c: 111: lcdInst((unsigned char)(0x10 | (direction << 2)));
  7552                           
  7553                           ; BSR set to: 0
  7554                           
  7555                           ; BSR set to: 0
  7556  0032C4  4583               	rlncf	lcd_shift_cursor@direction& (0+255),w,b
  7557  0032C6  46E8               	rlncf	wreg,f,c
  7558  0032C8  0BFC               	andlw	252
  7559  0032CA  0910               	iorlw	16
  7560  0032CC  EC83  F019         	call	_lcdInst
  7561  0032D0  0100               	movlb	0	; () banked
  7562  0032D2  0785               	decf	lcd_shift_cursor@n& (0+255),f,b
  7563  0032D4  D7F4               	goto	L7
  7564  0032D6                     __end_of_lcd_shift_cursor:
  7565                           	opt stack 0
  7566                           tosu	equ	0xFFF
  7567                           tosh	equ	0xFFE
  7568                           tosl	equ	0xFFD
  7569                           pclath	equ	0xFFA
  7570                           tblptru	equ	0xFF8
  7571                           tblptrh	equ	0xFF7
  7572                           tblptrl	equ	0xFF6
  7573                           tablat	equ	0xFF5
  7574                           prodh	equ	0xFF4
  7575                           prodl	equ	0xFF3
  7576                           intcon	equ	0xFF2
  7577                           indf0	equ	0xFEF
  7578                           postinc0	equ	0xFEE
  7579                           fsr0h	equ	0xFEA
  7580                           fsr0l	equ	0xFE9
  7581                           wreg	equ	0xFE8
  7582                           postdec1	equ	0xFE5
  7583                           plusw1	equ	0xFE3
  7584                           fsr1l	equ	0xFE1
  7585                           indf2	equ	0xFDF
  7586                           postinc2	equ	0xFDE
  7587                           postdec2	equ	0xFDD
  7588                           plusw2	equ	0xFDB
  7589                           fsr2h	equ	0xFDA
  7590                           fsr2l	equ	0xFD9
  7591                           status	equ	0xFD8
  7592                           
  7593 ;; *************** function _hibernate *****************
  7594 ;; Defined at:
  7595 ;;		line 11 in file "menu.c"
  7596 ;; Parameters:    Size  Location     Type
  7597 ;;		None
  7598 ;; Auto vars:     Size  Location     Type
  7599 ;;  pressed         2   25[BANK0 ] int 
  7600 ;; Return value:  Size  Location     Type
  7601 ;;                  1    wreg      void 
  7602 ;; Registers used:
  7603 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7604 ;; Tracked objects:
  7605 ;;		On entry : 0/0
  7606 ;;		On exit  : 0/0
  7607 ;;		Unchanged: 0/0
  7608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7610 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7611 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7612 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7613 ;;Total ram usage:        6 bytes
  7614 ;; Hardware stack levels used:    1
  7615 ;; Hardware stack levels required when called:    7
  7616 ;; This function calls:
  7617 ;;		_pollKeypad
  7618 ;;		_printStringLCD
  7619 ;; This function is called by:
  7620 ;;		_main
  7621 ;;		_mainMenu
  7622 ;; This function uses a non-reentrant model
  7623 ;;
  7624                           
  7625                           	psect	text15
  7626  003116                     __ptext15:
  7627                           	opt stack 0
  7628  003116                     _hibernate:
  7629                           	opt stack 22
  7630                           
  7631                           ;menu.c: 12: printStringLCD("Press 1 to begin");
  7632                           
  7633                           ; BSR set to: 0
  7634                           ;incstack = 0
  7635  003116  0E01               	movlw	low STR_15
  7636  003118  0100               	movlb	0	; () banked
  7637  00311A  6F86               	movwf	printStringLCD@string& (0+255),b
  7638  00311C  0EFF               	movlw	high STR_15
  7639  00311E  6F87               	movwf	(printStringLCD@string+1)& (0+255),b
  7640  003120  ECBE  F00F         	call	_printStringLCD	;wreg free
  7641  003124                     
  7642                           ;menu.c: 15: pressed = pollKeypad();
  7643  003124  ECE0  F018         	call	_pollKeypad	;wreg free
  7644  003128  0100               	movlb	0	; () banked
  7645  00312A  6F95               	movwf	??_hibernate& (0+255),b
  7646  00312C  5195               	movf	??_hibernate& (0+255),w,b
  7647  00312E  6F99               	movwf	hibernate@pressed& (0+255),b
  7648  003130  6B9A               	clrf	(hibernate@pressed+1)& (0+255),b
  7649                           
  7650                           ; BSR set to: 0
  7651                           ;menu.c: 16: if (pressed - 48 == 1) {
  7652  003132  0ED0               	movlw	208
  7653  003134  6F95               	movwf	??_hibernate& (0+255),b
  7654  003136  0EFF               	movlw	255
  7655  003138  6F96               	movwf	(??_hibernate+1)& (0+255),b
  7656  00313A  C099  F097         	movff	hibernate@pressed,??_hibernate+2
  7657  00313E  C09A  F098         	movff	hibernate@pressed+1,??_hibernate+3
  7658  003142  5195               	movf	??_hibernate& (0+255),w,b
  7659  003144  2797               	addwf	(??_hibernate+2)& (0+255),f,b
  7660  003146  5196               	movf	(??_hibernate+1)& (0+255),w,b
  7661  003148  2398               	addwfc	(??_hibernate+3)& (0+255),f,b
  7662  00314A  0597               	decf	(??_hibernate+2)& (0+255),w,b
  7663  00314C  1198               	iorwf	(??_hibernate+3)& (0+255),w,b
  7664  00314E  B4D8               	btfsc	status,2,c
  7665  003150  0012               	return	
  7666  003152  D7E8               	goto	l353
  7667  003154                     __end_of_hibernate:
  7668                           	opt stack 0
  7669                           tosu	equ	0xFFF
  7670                           tosh	equ	0xFFE
  7671                           tosl	equ	0xFFD
  7672                           pclath	equ	0xFFA
  7673                           tblptru	equ	0xFF8
  7674                           tblptrh	equ	0xFF7
  7675                           tblptrl	equ	0xFF6
  7676                           tablat	equ	0xFF5
  7677                           prodh	equ	0xFF4
  7678                           prodl	equ	0xFF3
  7679                           intcon	equ	0xFF2
  7680                           indf0	equ	0xFEF
  7681                           postinc0	equ	0xFEE
  7682                           fsr0h	equ	0xFEA
  7683                           fsr0l	equ	0xFE9
  7684                           wreg	equ	0xFE8
  7685                           postdec1	equ	0xFE5
  7686                           plusw1	equ	0xFE3
  7687                           fsr1l	equ	0xFE1
  7688                           indf2	equ	0xFDF
  7689                           postinc2	equ	0xFDE
  7690                           postdec2	equ	0xFDD
  7691                           plusw2	equ	0xFDB
  7692                           fsr2h	equ	0xFDA
  7693                           fsr2l	equ	0xFD9
  7694                           status	equ	0xFD8
  7695                           
  7696 ;; *************** function _printStringLCD *****************
  7697 ;; Defined at:
  7698 ;;		line 7 in file "helpers.c"
  7699 ;; Parameters:    Size  Location     Type
  7700 ;;  string          2    6[BANK0 ] PTR unsigned char 
  7701 ;;		 -> STR_19(30), inputEntry@fastenerString(32), inputEntryQuestions(132), STR_16(26), 
  7702 ;;		 -> STR_15(17), errMsgs.noFasteners(32), errMsgs.tooManySpacers(32), errMsgs.tooManyWashers(32), 
  7703 ;;		 -> errMsgs.tooManyNuts(32), errMsgs.tooManyBolts(32), errMsgs.tooManyFasteners(32), errMsgs.badEntry(32), 
  7704 ;;		 -> errMsgs(224), 
  7705 ;; Auto vars:     Size  Location     Type
  7706 ;;  i               2   19[BANK0 ] int 
  7707 ;;  newlineCharI    2   17[BANK0 ] int 
  7708 ;;  newlineIndex    2   15[BANK0 ] int 
  7709 ;;  spaceIndex      2   13[BANK0 ] int 
  7710 ;;  j               2   11[BANK0 ] int 
  7711 ;; Return value:  Size  Location     Type
  7712 ;;                  1    wreg      void 
  7713 ;; Registers used:
  7714 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7715 ;; Tracked objects:
  7716 ;;		On entry : 0/0
  7717 ;;		On exit  : 0/0
  7718 ;;		Unchanged: 0/0
  7719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7720 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7721 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7722 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7723 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7724 ;;Total ram usage:       15 bytes
  7725 ;; Hardware stack levels used:    1
  7726 ;; Hardware stack levels required when called:    6
  7727 ;; This function calls:
  7728 ;;		_lcdInst
  7729 ;;		_putch
  7730 ;; This function is called by:
  7731 ;;		_hibernate
  7732 ;;		_viewLogs
  7733 ;;		_inputEntry
  7734 ;;		_mainMenu
  7735 ;;		_printErrorLCD
  7736 ;; This function uses a non-reentrant model
  7737 ;;
  7738                           
  7739                           	psect	text16
  7740  001F7C                     __ptext16:
  7741                           	opt stack 0
  7742  001F7C                     _printStringLCD:
  7743                           	opt stack 22
  7744                           
  7745                           ;helpers.c: 12: int i;
  7746                           ;helpers.c: 13: int j = 1;
  7747                           
  7748                           ; BSR set to: 0
  7749                           ;incstack = 0
  7750  001F7C  0E00               	movlw	0
  7751  001F7E  0100               	movlb	0	; () banked
  7752  001F80  6F8C               	movwf	(printStringLCD@j+1)& (0+255),b
  7753  001F82  0E01               	movlw	1
  7754  001F84  6F8B               	movwf	printStringLCD@j& (0+255),b
  7755                           
  7756                           ;helpers.c: 14: int newlineIndex = 16;
  7757  001F86  0E00               	movlw	0
  7758  001F88  6F90               	movwf	(printStringLCD@newlineIndex+1)& (0+255),b
  7759  001F8A  0E10               	movlw	16
  7760  001F8C  6F8F               	movwf	printStringLCD@newlineIndex& (0+255),b
  7761                           
  7762                           ; BSR set to: 0
  7763                           ;helpers.c: 15: int newlineCharIndex = -1;
  7764  001F8E  6991               	setf	printStringLCD@newlineCharIndex& (0+255),b
  7765  001F90  6992               	setf	(printStringLCD@newlineCharIndex+1)& (0+255),b
  7766                           
  7767                           ;helpers.c: 16: int spaceIndex = 0;
  7768  001F92  0E00               	movlw	0
  7769  001F94  6F8E               	movwf	(printStringLCD@spaceIndex+1)& (0+255),b
  7770  001F96  0E00               	movlw	0
  7771  001F98  6F8D               	movwf	printStringLCD@spaceIndex& (0+255),b
  7772                           
  7773                           ; BSR set to: 0
  7774                           ;helpers.c: 18: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  7775  001F9A  0E01               	movlw	1
  7776  001F9C  EC83  F019         	call	_lcdInst
  7777  001FA0  0EC3               	movlw	195
  7778  001FA2  0100               	movlb	0	; () banked
  7779  001FA4  6F88               	movwf	??_printStringLCD& (0+255),b
  7780  001FA6  0ECD               	movlw	205
  7781  001FA8                     u7947:
  7782  001FA8  2EE8               	decfsz	wreg,f,c
  7783  001FAA  D7FE               	bra	u7947
  7784  001FAC  2F88               	decfsz	??_printStringLCD& (0+255),f,b
  7785  001FAE  D7FC               	bra	u7947
  7786                           
  7787                           ;helpers.c: 19: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  7788  001FB0  0E80               	movlw	128
  7789  001FB2  EC83  F019         	call	_lcdInst
  7790  001FB6  0E41               	movlw	65
  7791  001FB8  0100               	movlb	0	; () banked
  7792  001FBA  6F88               	movwf	??_printStringLCD& (0+255),b
  7793  001FBC  0EEE               	movlw	238
  7794  001FBE                     u7957:
  7795  001FBE  2EE8               	decfsz	wreg,f,c
  7796  001FC0  D7FE               	bra	u7957
  7797  001FC2  2F88               	decfsz	??_printStringLCD& (0+255),f,b
  7798  001FC4  D7FC               	bra	u7957
  7799  001FC6  F000               	nop	
  7800                           
  7801                           ;helpers.c: 22: for (i = 0; i < 17; i++) {
  7802  001FC8  0E00               	movlw	0
  7803  001FCA  0100               	movlb	0	; () banked
  7804  001FCC  6F94               	movwf	(printStringLCD@i+1)& (0+255),b
  7805  001FCE  0E00               	movlw	0
  7806  001FD0  6F93               	movwf	printStringLCD@i& (0+255),b
  7807                           
  7808                           ; BSR set to: 0
  7809  001FD2  BF94               	btfsc	(printStringLCD@i+1)& (0+255),7,b
  7810  001FD4  D008               	goto	l488
  7811  001FD6  5194               	movf	(printStringLCD@i+1)& (0+255),w,b
  7812  001FD8  E105               	bnz	u5920
  7813  001FDA  0E11               	movlw	17
  7814  001FDC  5D93               	subwf	printStringLCD@i& (0+255),w,b
  7815  001FDE  B0D8               	btfsc	status,0,c
  7816  001FE0  D08D               	goto	u6030
  7817  001FE2  D001               	goto	l488
  7818  001FE4                     u5920:
  7819                           
  7820                           ; BSR set to: 0
  7821  001FE4  D08B               	goto	u6030
  7822  001FE6                     l488:
  7823                           
  7824                           ; BSR set to: 0
  7825                           ;helpers.c: 23: if (string[i] == 0) break;
  7826                           
  7827                           ; BSR set to: 0
  7828  001FE6  5193               	movf	printStringLCD@i& (0+255),w,b
  7829  001FE8  2586               	addwf	printStringLCD@string& (0+255),w,b
  7830  001FEA  6F88               	movwf	??_printStringLCD& (0+255),b
  7831  001FEC  5194               	movf	(printStringLCD@i+1)& (0+255),w,b
  7832  001FEE  2187               	addwfc	(printStringLCD@string+1)& (0+255),w,b
  7833  001FF0  6F89               	movwf	(??_printStringLCD+1)& (0+255),b
  7834  001FF2  C088  FFF6         	movff	??_printStringLCD,tblptrl
  7835  001FF6  C089  FFF7         	movff	??_printStringLCD+1,tblptrh
  7836  001FFA  0E00               	movlw	low (__mediumconst shr (0+16))
  7837  001FFC  6EF8               	movwf	tblptru,c
  7838  001FFE  0E0F               	movlw	(high __ramtop+-1)
  7839  002000  64F7               	cpfsgt	tblptrh,c
  7840  002002  D003               	bra	u5937
  7841  002004  0008               	tblrd		*
  7842  002006  50F5               	movf	tablat,w,c
  7843  002008  D005               	bra	u5930
  7844  00200A                     u5937:
  7845  00200A  CFF6 FFE9          	movff	tblptrl,fsr0l
  7846  00200E  CFF7 FFEA          	movff	tblptrh,fsr0h
  7847  002012  50EF               	movf	indf0,w,c
  7848  002014                     u5930:
  7849  002014  0900               	iorlw	0
  7850  002016  B4D8               	btfsc	status,2,c
  7851  002018  D071               	goto	u6030
  7852                           
  7853                           ;helpers.c: 24: if (string[i] == 32) {
  7854  00201A  0100               	movlb	0	; () banked
  7855  00201C  5193               	movf	printStringLCD@i& (0+255),w,b
  7856  00201E  2586               	addwf	printStringLCD@string& (0+255),w,b
  7857  002020  6F88               	movwf	??_printStringLCD& (0+255),b
  7858  002022  5194               	movf	(printStringLCD@i+1)& (0+255),w,b
  7859  002024  2187               	addwfc	(printStringLCD@string+1)& (0+255),w,b
  7860  002026  6F89               	movwf	(??_printStringLCD+1)& (0+255),b
  7861  002028  C088  FFF6         	movff	??_printStringLCD,tblptrl
  7862  00202C  C089  FFF7         	movff	??_printStringLCD+1,tblptrh
  7863  002030  0E00               	movlw	low (__mediumconst shr (0+16))
  7864  002032  6EF8               	movwf	tblptru,c
  7865  002034  0E0F               	movlw	(high __ramtop+-1)
  7866  002036  64F7               	cpfsgt	tblptrh,c
  7867  002038  D003               	bra	u5957
  7868  00203A  0008               	tblrd		*
  7869  00203C  50F5               	movf	tablat,w,c
  7870  00203E  D005               	bra	u5950
  7871  002040                     u5957:
  7872  002040  CFF6 FFE9          	movff	tblptrl,fsr0l
  7873  002044  CFF7 FFEA          	movff	tblptrh,fsr0h
  7874  002048  50EF               	movf	indf0,w,c
  7875  00204A                     u5950:
  7876  00204A  0A20               	xorlw	32
  7877  00204C  A4D8               	btfss	status,2,c
  7878  00204E  D004               	goto	l491
  7879                           
  7880                           ;helpers.c: 25: spaceIndex = i;
  7881  002050  C093  F08D         	movff	printStringLCD@i,printStringLCD@spaceIndex
  7882  002054  C094  F08E         	movff	printStringLCD@i+1,printStringLCD@spaceIndex+1
  7883  002058                     l491:
  7884                           
  7885                           ;helpers.c: 26: }
  7886                           ;helpers.c: 28: if (string[i] == 10) {
  7887  002058  0100               	movlb	0	; () banked
  7888  00205A  5193               	movf	printStringLCD@i& (0+255),w,b
  7889  00205C  2586               	addwf	printStringLCD@string& (0+255),w,b
  7890  00205E  6F88               	movwf	??_printStringLCD& (0+255),b
  7891  002060  5194               	movf	(printStringLCD@i+1)& (0+255),w,b
  7892  002062  2187               	addwfc	(printStringLCD@string+1)& (0+255),w,b
  7893  002064  6F89               	movwf	(??_printStringLCD+1)& (0+255),b
  7894  002066  C088  FFF6         	movff	??_printStringLCD,tblptrl
  7895  00206A  C089  FFF7         	movff	??_printStringLCD+1,tblptrh
  7896  00206E  0E00               	movlw	low (__mediumconst shr (0+16))
  7897  002070  6EF8               	movwf	tblptru,c
  7898  002072  0E0F               	movlw	(high __ramtop+-1)
  7899  002074  64F7               	cpfsgt	tblptrh,c
  7900  002076  D003               	bra	u5977
  7901  002078  0008               	tblrd		*
  7902  00207A  50F5               	movf	tablat,w,c
  7903  00207C  D005               	bra	u5970
  7904  00207E                     u5977:
  7905  00207E  CFF6 FFE9          	movff	tblptrl,fsr0l
  7906  002082  CFF7 FFEA          	movff	tblptrh,fsr0h
  7907  002086  50EF               	movf	indf0,w,c
  7908  002088                     u5970:
  7909  002088  0A0A               	xorlw	10
  7910  00208A  A4D8               	btfss	status,2,c
  7911  00208C  D008               	goto	l492
  7912                           
  7913                           ;helpers.c: 29: newlineCharIndex = i;
  7914  00208E  C093  F091         	movff	printStringLCD@i,printStringLCD@newlineCharIndex
  7915  002092  C094  F092         	movff	printStringLCD@i+1,printStringLCD@newlineCharIndex+1
  7916                           
  7917                           ;helpers.c: 30: newlineIndex = newlineCharIndex;
  7918  002096  C091  F08F         	movff	printStringLCD@newlineCharIndex,printStringLCD@newlineIndex
  7919  00209A  C092  F090         	movff	printStringLCD@newlineCharIndex+1,printStringLCD@newlineIndex+1
  7920  00209E                     l492:
  7921                           
  7922                           ;helpers.c: 31: }
  7923                           ;helpers.c: 34: if (i == 16 && string[i] != 32 && newlineCharIndex < 0) {
  7924  00209E  0E10               	movlw	16
  7925  0020A0  0100               	movlb	0	; () banked
  7926  0020A2  1993               	xorwf	printStringLCD@i& (0+255),w,b
  7927  0020A4  1194               	iorwf	(printStringLCD@i+1)& (0+255),w,b
  7928  0020A6  A4D8               	btfss	status,2,c
  7929  0020A8  D021               	goto	l493
  7930                           
  7931                           ; BSR set to: 0
  7932  0020AA  5193               	movf	printStringLCD@i& (0+255),w,b
  7933  0020AC  2586               	addwf	printStringLCD@string& (0+255),w,b
  7934  0020AE  6F88               	movwf	??_printStringLCD& (0+255),b
  7935  0020B0  5194               	movf	(printStringLCD@i+1)& (0+255),w,b
  7936  0020B2  2187               	addwfc	(printStringLCD@string+1)& (0+255),w,b
  7937  0020B4  6F89               	movwf	(??_printStringLCD+1)& (0+255),b
  7938  0020B6  C088  FFF6         	movff	??_printStringLCD,tblptrl
  7939  0020BA  C089  FFF7         	movff	??_printStringLCD+1,tblptrh
  7940  0020BE  0E00               	movlw	low (__mediumconst shr (0+16))
  7941  0020C0  6EF8               	movwf	tblptru,c
  7942  0020C2  0E0F               	movlw	(high __ramtop+-1)
  7943  0020C4  64F7               	cpfsgt	tblptrh,c
  7944  0020C6  D003               	bra	u6007
  7945  0020C8  0008               	tblrd		*
  7946  0020CA  50F5               	movf	tablat,w,c
  7947  0020CC  D005               	bra	u6000
  7948  0020CE                     u6007:
  7949  0020CE  CFF6 FFE9          	movff	tblptrl,fsr0l
  7950  0020D2  CFF7 FFEA          	movff	tblptrh,fsr0h
  7951  0020D6  50EF               	movf	indf0,w,c
  7952  0020D8                     u6000:
  7953  0020D8  0A20               	xorlw	32
  7954  0020DA  B4D8               	btfsc	status,2,c
  7955  0020DC  D007               	goto	l493
  7956  0020DE  0100               	movlb	0	; () banked
  7957  0020E0  AF92               	btfss	(printStringLCD@newlineCharIndex+1)& (0+255),7,b
  7958  0020E2  D004               	goto	l493
  7959                           
  7960                           ; BSR set to: 0
  7961                           ;helpers.c: 35: newlineIndex = spaceIndex;
  7962  0020E4  C08D  F08F         	movff	printStringLCD@spaceIndex,printStringLCD@newlineIndex
  7963  0020E8  C08E  F090         	movff	printStringLCD@spaceIndex+1,printStringLCD@newlineIndex+1
  7964  0020EC                     l493:
  7965                           
  7966                           ; BSR set to: 0
  7967  0020EC  0100               	movlb	0	; () banked
  7968  0020EE  4B93               	infsnz	printStringLCD@i& (0+255),f,b
  7969  0020F0  2B94               	incf	(printStringLCD@i+1)& (0+255),f,b
  7970                           
  7971                           ; BSR set to: 0
  7972  0020F2  BF94               	btfsc	(printStringLCD@i+1)& (0+255),7,b
  7973  0020F4  D778               	goto	l488
  7974  0020F6  5194               	movf	(printStringLCD@i+1)& (0+255),w,b
  7975  0020F8  E101               	bnz	l5087
  7976  0020FA  D76F               	goto	L8
  7977  0020FC                     u6030:
  7978  0020FC                     l5087:
  7979                           
  7980                           ;helpers.c: 36: }
  7981                           ;helpers.c: 37: }
  7982                           ;helpers.c: 40: for (i = 0; i < 32; i++) {
  7983  0020FC  0E00               	movlw	0
  7984  0020FE  0100               	movlb	0	; () banked
  7985  002100  6F94               	movwf	(printStringLCD@i+1)& (0+255),b
  7986  002102  0E00               	movlw	0
  7987  002104  6F93               	movwf	printStringLCD@i& (0+255),b
  7988                           
  7989                           ; BSR set to: 0
  7990  002106  BF94               	btfsc	(printStringLCD@i+1)& (0+255),7,b
  7991  002108  D008               	goto	l494
  7992  00210A  5194               	movf	(printStringLCD@i+1)& (0+255),w,b
  7993  00210C  E105               	bnz	u6040
  7994  00210E  0E20               	movlw	32
  7995  002110  5D93               	subwf	printStringLCD@i& (0+255),w,b
  7996  002112  B0D8               	btfsc	status,0,c
  7997  002114  0012               	return	
  7998  002116  D001               	goto	l494
  7999  002118                     u6040:
  8000                           
  8001                           ; BSR set to: 0
  8002  002118  0012               	return	
  8003  00211A                     l494:
  8004                           
  8005                           ; BSR set to: 0
  8006                           ;helpers.c: 41: if (string[i] == 0) break;
  8007                           
  8008                           ; BSR set to: 0
  8009  00211A  5193               	movf	printStringLCD@i& (0+255),w,b
  8010  00211C  2586               	addwf	printStringLCD@string& (0+255),w,b
  8011  00211E  6F88               	movwf	??_printStringLCD& (0+255),b
  8012  002120  5194               	movf	(printStringLCD@i+1)& (0+255),w,b
  8013  002122  2187               	addwfc	(printStringLCD@string+1)& (0+255),w,b
  8014  002124  6F89               	movwf	(??_printStringLCD+1)& (0+255),b
  8015  002126  C088  FFF6         	movff	??_printStringLCD,tblptrl
  8016  00212A  C089  FFF7         	movff	??_printStringLCD+1,tblptrh
  8017  00212E  0E00               	movlw	low (__mediumconst shr (0+16))
  8018  002130  6EF8               	movwf	tblptru,c
  8019  002132  0E0F               	movlw	(high __ramtop+-1)
  8020  002134  64F7               	cpfsgt	tblptrh,c
  8021  002136  D003               	bra	u6057
  8022  002138  0008               	tblrd		*
  8023  00213A  50F5               	movf	tablat,w,c
  8024  00213C  D005               	bra	u6050
  8025  00213E                     u6057:
  8026  00213E  CFF6 FFE9          	movff	tblptrl,fsr0l
  8027  002142  CFF7 FFEA          	movff	tblptrh,fsr0h
  8028  002146  50EF               	movf	indf0,w,c
  8029  002148                     u6050:
  8030  002148  0900               	iorlw	0
  8031  00214A  B4D8               	btfsc	status,2,c
  8032  00214C  0012               	return	
  8033                           
  8034                           ;helpers.c: 52: if (i == newlineIndex && j < LCD_SIZE_VERT) {
  8035  00214E  0100               	movlb	0	; () banked
  8036  002150  518F               	movf	printStringLCD@newlineIndex& (0+255),w,b
  8037  002152  1993               	xorwf	printStringLCD@i& (0+255),w,b
  8038  002154  E153               	bnz	l5109
  8039  002156  5190               	movf	(printStringLCD@newlineIndex+1)& (0+255),w,b
  8040  002158  1994               	xorwf	(printStringLCD@i+1)& (0+255),w,b
  8041  00215A  A4D8               	btfss	status,2,c
  8042  00215C  D04F               	goto	l498
  8043                           
  8044                           ; BSR set to: 0
  8045  00215E  0E42               	movlw	low _LCD_SIZE_VERT
  8046  002160  6EF6               	movwf	tblptrl,c
  8047  002162                     	if	1	;There is more than 1 active tblptr byte
  8048  002162  0EFC               	movlw	high _LCD_SIZE_VERT
  8049  002164  6EF7               	movwf	tblptrh,c
  8050  002166                     	endif
  8051  002166                     	if	1	;There are 3 active tblptr bytes
  8052  002166  0E00               	movlw	low (_LCD_SIZE_VERT shr (0+16))
  8053  002168  6EF8               	movwf	tblptru,c
  8054  00216A                     	endif
  8055  00216A  0008               	tblrd		*
  8056  00216C  50F5               	movf	tablat,w,c
  8057  00216E  6F88               	movwf	??_printStringLCD& (0+255),b
  8058  002170  6B89               	clrf	(??_printStringLCD+1)& (0+255),b
  8059  002172  5188               	movf	??_printStringLCD& (0+255),w,b
  8060  002174  5D8B               	subwf	printStringLCD@j& (0+255),w,b
  8061  002176  518C               	movf	(printStringLCD@j+1)& (0+255),w,b
  8062  002178  0A80               	xorlw	128
  8063  00217A  6F8A               	movwf	(??_printStringLCD+2)& (0+255),b
  8064  00217C  5189               	movf	(??_printStringLCD+1)& (0+255),w,b
  8065  00217E  0A80               	xorlw	128
  8066  002180  598A               	subwfb	(??_printStringLCD+2)& (0+255),w,b
  8067  002182  B0D8               	btfsc	status,0,c
  8068  002184  D03B               	goto	l498
  8069                           
  8070                           ; BSR set to: 0
  8071                           ;helpers.c: 53: j++;
  8072  002186  4B8B               	infsnz	printStringLCD@j& (0+255),f,b
  8073  002188  2B8C               	incf	(printStringLCD@j+1)& (0+255),f,b
  8074                           
  8075                           ; BSR set to: 0
  8076                           ;helpers.c: 54: lcdInst(0xC0);;
  8077  00218A  0EC0               	movlw	192
  8078  00218C  EC83  F019         	call	_lcdInst
  8079                           
  8080                           ;helpers.c: 55: if (string[i] == 32 || string[i] == 10) continue;
  8081  002190  0100               	movlb	0	; () banked
  8082  002192  5193               	movf	printStringLCD@i& (0+255),w,b
  8083  002194  2586               	addwf	printStringLCD@string& (0+255),w,b
  8084  002196  6F88               	movwf	??_printStringLCD& (0+255),b
  8085  002198  5194               	movf	(printStringLCD@i+1)& (0+255),w,b
  8086  00219A  2187               	addwfc	(printStringLCD@string+1)& (0+255),w,b
  8087  00219C  6F89               	movwf	(??_printStringLCD+1)& (0+255),b
  8088  00219E  C088  FFF6         	movff	??_printStringLCD,tblptrl
  8089  0021A2  C089  FFF7         	movff	??_printStringLCD+1,tblptrh
  8090  0021A6  0E00               	movlw	low (__mediumconst shr (0+16))
  8091  0021A8  6EF8               	movwf	tblptru,c
  8092  0021AA  0E0F               	movlw	(high __ramtop+-1)
  8093  0021AC  64F7               	cpfsgt	tblptrh,c
  8094  0021AE  D003               	bra	u6097
  8095  0021B0  0008               	tblrd		*
  8096  0021B2  50F5               	movf	tablat,w,c
  8097  0021B4  D005               	bra	u6090
  8098  0021B6                     u6097:
  8099  0021B6  CFF6 FFE9          	movff	tblptrl,fsr0l
  8100  0021BA  CFF7 FFEA          	movff	tblptrh,fsr0h
  8101  0021BE  50EF               	movf	indf0,w,c
  8102  0021C0                     u6090:
  8103  0021C0  0A20               	xorlw	32
  8104  0021C2  B4D8               	btfsc	status,2,c
  8105  0021C4  D035               	goto	l501
  8106  0021C6  0100               	movlb	0	; () banked
  8107  0021C8  5193               	movf	printStringLCD@i& (0+255),w,b
  8108  0021CA  2586               	addwf	printStringLCD@string& (0+255),w,b
  8109  0021CC  6F88               	movwf	??_printStringLCD& (0+255),b
  8110  0021CE  5194               	movf	(printStringLCD@i+1)& (0+255),w,b
  8111  0021D0  2187               	addwfc	(printStringLCD@string+1)& (0+255),w,b
  8112  0021D2  6F89               	movwf	(??_printStringLCD+1)& (0+255),b
  8113  0021D4  C088  FFF6         	movff	??_printStringLCD,tblptrl
  8114  0021D8  C089  FFF7         	movff	??_printStringLCD+1,tblptrh
  8115  0021DC  0E00               	movlw	low (__mediumconst shr (0+16))
  8116  0021DE  6EF8               	movwf	tblptru,c
  8117  0021E0  0E0F               	movlw	(high __ramtop+-1)
  8118  0021E2  64F7               	cpfsgt	tblptrh,c
  8119  0021E4  D003               	bra	u6117
  8120  0021E6  0008               	tblrd		*
  8121  0021E8  50F5               	movf	tablat,w,c
  8122  0021EA  D005               	bra	u6110
  8123  0021EC                     u6117:
  8124  0021EC  CFF6 FFE9          	movff	tblptrl,fsr0l
  8125  0021F0  CFF7 FFEA          	movff	tblptrh,fsr0h
  8126  0021F4  50EF               	movf	indf0,w,c
  8127  0021F6                     u6110:
  8128  0021F6  0A0A               	xorlw	10
  8129  0021F8  B4D8               	btfsc	status,2,c
  8130  0021FA  D01A               	goto	l501
  8131  0021FC                     l498:
  8132  0021FC                     l5109:
  8133                           
  8134                           ;helpers.c: 56: }
  8135                           ;helpers.c: 58: putch(string[i]);
  8136  0021FC  0100               	movlb	0	; () banked
  8137  0021FE  5193               	movf	printStringLCD@i& (0+255),w,b
  8138  002200  2586               	addwf	printStringLCD@string& (0+255),w,b
  8139  002202  6F88               	movwf	??_printStringLCD& (0+255),b
  8140  002204  5194               	movf	(printStringLCD@i+1)& (0+255),w,b
  8141  002206  2187               	addwfc	(printStringLCD@string+1)& (0+255),w,b
  8142  002208  6F89               	movwf	(??_printStringLCD+1)& (0+255),b
  8143  00220A  C088  FFF6         	movff	??_printStringLCD,tblptrl
  8144  00220E  C089  FFF7         	movff	??_printStringLCD+1,tblptrh
  8145  002212  0E00               	movlw	low (__mediumconst shr (0+16))
  8146  002214  6EF8               	movwf	tblptru,c
  8147  002216  0E0F               	movlw	(high __ramtop+-1)
  8148  002218  64F7               	cpfsgt	tblptrh,c
  8149  00221A  D003               	bra	u6137
  8150  00221C  0008               	tblrd		*
  8151  00221E  50F5               	movf	tablat,w,c
  8152  002220  D005               	bra	u6130
  8153  002222                     u6137:
  8154  002222  CFF6 FFE9          	movff	tblptrl,fsr0l
  8155  002226  CFF7 FFEA          	movff	tblptrh,fsr0h
  8156  00222A  50EF               	movf	indf0,w,c
  8157  00222C                     u6130:
  8158  00222C  EC77  F019         	call	_putch
  8159  002230                     l501:
  8160  002230  0100               	movlb	0	; () banked
  8161  002232  4B93               	infsnz	printStringLCD@i& (0+255),f,b
  8162  002234  2B94               	incf	(printStringLCD@i+1)& (0+255),f,b
  8163                           
  8164                           ; BSR set to: 0
  8165  002236  BF94               	btfsc	(printStringLCD@i+1)& (0+255),7,b
  8166  002238  D770               	goto	l494
  8167  00223A  5194               	movf	(printStringLCD@i+1)& (0+255),w,b
  8168  00223C  E101               	bnz	l502
  8169  00223E  D767               	goto	L9
  8170  002240                     l502:
  8171  002240  0012               	return		;funcret
  8172  002242                     __end_of_printStringLCD:
  8173                           	opt stack 0
  8174                           tosu	equ	0xFFF
  8175                           tosh	equ	0xFFE
  8176                           tosl	equ	0xFFD
  8177                           pclath	equ	0xFFA
  8178                           tblptru	equ	0xFF8
  8179                           tblptrh	equ	0xFF7
  8180                           tblptrl	equ	0xFF6
  8181                           tablat	equ	0xFF5
  8182                           prodh	equ	0xFF4
  8183                           prodl	equ	0xFF3
  8184                           intcon	equ	0xFF2
  8185                           indf0	equ	0xFEF
  8186                           postinc0	equ	0xFEE
  8187                           fsr0h	equ	0xFEA
  8188                           fsr0l	equ	0xFE9
  8189                           wreg	equ	0xFE8
  8190                           postdec1	equ	0xFE5
  8191                           plusw1	equ	0xFE3
  8192                           fsr1l	equ	0xFE1
  8193                           indf2	equ	0xFDF
  8194                           postinc2	equ	0xFDE
  8195                           postdec2	equ	0xFDD
  8196                           plusw2	equ	0xFDB
  8197                           fsr2h	equ	0xFDA
  8198                           fsr2l	equ	0xFD9
  8199                           status	equ	0xFD8
  8200                           
  8201 ;; *************** function _putch *****************
  8202 ;; Defined at:
  8203 ;;		line 25 in file "lcd.c"
  8204 ;; Parameters:    Size  Location     Type
  8205 ;;  data            1    wreg     unsigned char 
  8206 ;; Auto vars:     Size  Location     Type
  8207 ;;  data            1    2[BANK0 ] unsigned char 
  8208 ;; Return value:  Size  Location     Type
  8209 ;;                  1    wreg      void 
  8210 ;; Registers used:
  8211 ;;		wreg, status,2, status,0, cstack
  8212 ;; Tracked objects:
  8213 ;;		On entry : 0/0
  8214 ;;		On exit  : 0/0
  8215 ;;		Unchanged: 0/0
  8216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8218 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8220 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8221 ;;Total ram usage:        1 bytes
  8222 ;; Hardware stack levels used:    1
  8223 ;; Hardware stack levels required when called:    5
  8224 ;; This function calls:
  8225 ;;		_lcdNibble
  8226 ;; This function is called by:
  8227 ;;		_inputEntry
  8228 ;;		_mainMenu
  8229 ;;		_printStringLCD
  8230 ;;		_printf
  8231 ;;		__doprnt
  8232 ;; This function uses a non-reentrant model
  8233 ;;
  8234                           
  8235                           	psect	text17
  8236  0032EE                     __ptext17:
  8237                           	opt stack 0
  8238  0032EE                     _putch:
  8239                           	opt stack 22
  8240                           
  8241                           ;incstack = 0
  8242                           ;putch@data stored from wreg
  8243  0032EE  0100               	movlb	0	; () banked
  8244  0032F0  6F82               	movwf	putch@data& (0+255),b
  8245                           
  8246                           ;lcd.c: 33: LATDbits.LATD2 = 1;
  8247  0032F2  848C               	bsf	3980,2,c	;volatile
  8248                           
  8249                           ;lcd.c: 34: lcdNibble(data);
  8250  0032F4  0100               	movlb	0	; () banked
  8251  0032F6  5182               	movf	putch@data& (0+255),w,b
  8252  0032F8  ECA5  F016         	call	_lcdNibble
  8253                           
  8254                           ;lcd.c: 35: _delay((unsigned long)((100)*(40000000/4000000.0)));
  8255  0032FC  0EC8               	movlw	200
  8256  0032FE                     u7967:
  8257  0032FE  D000               	nop2	
  8258  003300  2EE8               	decfsz	wreg,f,c
  8259  003302  D7FD               	bra	u7967
  8260  003304  0012               	return		;funcret
  8261  003306                     __end_of_putch:
  8262                           	opt stack 0
  8263                           tosu	equ	0xFFF
  8264                           tosh	equ	0xFFE
  8265                           tosl	equ	0xFFD
  8266                           pclath	equ	0xFFA
  8267                           tblptru	equ	0xFF8
  8268                           tblptrh	equ	0xFF7
  8269                           tblptrl	equ	0xFF6
  8270                           tablat	equ	0xFF5
  8271                           prodh	equ	0xFF4
  8272                           prodl	equ	0xFF3
  8273                           intcon	equ	0xFF2
  8274                           indf0	equ	0xFEF
  8275                           postinc0	equ	0xFEE
  8276                           fsr0h	equ	0xFEA
  8277                           fsr0l	equ	0xFE9
  8278                           wreg	equ	0xFE8
  8279                           postdec1	equ	0xFE5
  8280                           plusw1	equ	0xFE3
  8281                           fsr1l	equ	0xFE1
  8282                           indf2	equ	0xFDF
  8283                           postinc2	equ	0xFDE
  8284                           postdec2	equ	0xFDD
  8285                           plusw2	equ	0xFDB
  8286                           fsr2h	equ	0xFDA
  8287                           fsr2l	equ	0xFD9
  8288                           status	equ	0xFD8
  8289                           
  8290 ;; *************** function _pollKeypad *****************
  8291 ;; Defined at:
  8292 ;;		line 68 in file "helpers.c"
  8293 ;; Parameters:    Size  Location     Type
  8294 ;;		None
  8295 ;; Auto vars:     Size  Location     Type
  8296 ;;  keypress        1    0[BANK0 ] unsigned char 
  8297 ;; Return value:  Size  Location     Type
  8298 ;;                  1    wreg      unsigned char 
  8299 ;; Registers used:
  8300 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  8301 ;; Tracked objects:
  8302 ;;		On entry : 0/0
  8303 ;;		On exit  : 0/0
  8304 ;;		Unchanged: 0/0
  8305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8307 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8309 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8310 ;;Total ram usage:        1 bytes
  8311 ;; Hardware stack levels used:    1
  8312 ;; Hardware stack levels required when called:    4
  8313 ;; This function calls:
  8314 ;;		Nothing
  8315 ;; This function is called by:
  8316 ;;		_hibernate
  8317 ;;		_viewLogs
  8318 ;;		_inputEntry
  8319 ;;		_mainMenu
  8320 ;; This function uses a non-reentrant model
  8321 ;;
  8322                           
  8323                           	psect	text18
  8324  0031C0                     __ptext18:
  8325                           	opt stack 0
  8326  0031C0                     _pollKeypad:
  8327                           	opt stack 24
  8328                           
  8329                           ;helpers.c: 70: while (PORTBbits.RB1 == 0) {continue;}
  8330                           
  8331                           ;incstack = 0
  8332  0031C0  A281               	btfss	3969,1,c	;volatile
  8333  0031C2  D7FE               	goto	_pollKeypad
  8334                           
  8335                           ;helpers.c: 73: unsigned char keypress = (unsigned char)(PORTB & 0xF0) >> 4;
  8336  0031C4  3881               	swapf	3969,w,c	;volatile
  8337  0031C6  0B0F               	andlw	15
  8338  0031C8  0B0F               	andlw	15
  8339  0031CA  0100               	movlb	0	; () banked
  8340  0031CC  6F80               	movwf	pollKeypad@keypress& (0+255),b
  8341  0031CE                     
  8342                           ; BSR set to: 0
  8343  0031CE  B281               	btfsc	3969,1,c	;volatile
  8344  0031D0  D7FE               	goto	l512
  8345                           
  8346                           ;helpers.c: 78: __nop();
  8347  0031D2  F000               	nop	
  8348                           
  8349                           ;helpers.c: 80: return keypadChars[keypress];
  8350  0031D4  0100               	movlb	0	; () banked
  8351  0031D6  5180               	movf	pollKeypad@keypress& (0+255),w,b
  8352  0031D8  0D01               	mullw	1
  8353  0031DA  0E19               	movlw	low _keypadChars
  8354  0031DC  24F3               	addwf	prodl,w,c
  8355  0031DE  6EF6               	movwf	tblptrl,c
  8356  0031E0  0EFC               	movlw	high _keypadChars
  8357  0031E2  20F4               	addwfc	prodh,w,c
  8358  0031E4  6EF7               	movwf	tblptrh,c
  8359  0031E6                     	if	1	;There are 3 active tblptr bytes
  8360  0031E6  6AF8               	clrf	tblptru,c
  8361  0031E8  0E00               	movlw	low (__mediumconst shr (0+16))
  8362  0031EA  22F8               	addwfc	tblptru,f,c
  8363  0031EC                     	endif
  8364  0031EC  0008               	tblrd		*
  8365  0031EE  50F5               	movf	tablat,w,c
  8366  0031F0  0012               	return	
  8367  0031F2                     __end_of_pollKeypad:
  8368                           	opt stack 0
  8369                           tosu	equ	0xFFF
  8370                           tosh	equ	0xFFE
  8371                           tosl	equ	0xFFD
  8372                           pclath	equ	0xFFA
  8373                           tblptru	equ	0xFF8
  8374                           tblptrh	equ	0xFF7
  8375                           tblptrl	equ	0xFF6
  8376                           tablat	equ	0xFF5
  8377                           prodh	equ	0xFF4
  8378                           prodl	equ	0xFF3
  8379                           intcon	equ	0xFF2
  8380                           indf0	equ	0xFEF
  8381                           postinc0	equ	0xFEE
  8382                           fsr0h	equ	0xFEA
  8383                           fsr0l	equ	0xFE9
  8384                           wreg	equ	0xFE8
  8385                           postdec1	equ	0xFE5
  8386                           plusw1	equ	0xFE3
  8387                           fsr1l	equ	0xFE1
  8388                           indf2	equ	0xFDF
  8389                           postinc2	equ	0xFDE
  8390                           postdec2	equ	0xFDD
  8391                           plusw2	equ	0xFDB
  8392                           fsr2h	equ	0xFDA
  8393                           fsr2l	equ	0xFD9
  8394                           status	equ	0xFD8
  8395                           
  8396 ;; *************** function _clearing *****************
  8397 ;; Defined at:
  8398 ;;		line 163 in file "main.c"
  8399 ;; Parameters:    Size  Location     Type
  8400 ;;		None
  8401 ;; Auto vars:     Size  Location     Type
  8402 ;;  startTime       4    0        long 
  8403 ;;  currTime        3   39[BANK0 ] long 
  8404 ;;  debounceTime    3   36[BANK0 ] long 
  8405 ;;  spinTime        3   33[BANK0 ] long 
  8406 ;;  instr           2   31[BANK0 ] unsigned char [2]
  8407 ;;  i               2    0        int 
  8408 ;; Return value:  Size  Location     Type
  8409 ;;                  1    wreg      void 
  8410 ;; Registers used:
  8411 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8412 ;; Tracked objects:
  8413 ;;		On entry : 0/0
  8414 ;;		On exit  : 0/0
  8415 ;;		Unchanged: 0/0
  8416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8418 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8419 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8420 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8421 ;;Total ram usage:       13 bytes
  8422 ;; Hardware stack levels used:    1
  8423 ;; Hardware stack levels required when called:    7
  8424 ;; This function calls:
  8425 ;;		_I2C_Send
  8426 ;;		___ftadd
  8427 ;;		___ftge
  8428 ;;		_motorControl
  8429 ;;		_tic
  8430 ;;		_tock
  8431 ;; This function is called by:
  8432 ;;		_mainMenu
  8433 ;; This function uses a non-reentrant model
  8434 ;;
  8435                           
  8436                           	psect	text19
  8437  000766                     __ptext19:
  8438                           	opt stack 0
  8439  000766                     _clearing:
  8440                           	opt stack 22
  8441                           
  8442                           ;main.c: 164: currentMode = WAITING;
  8443                           
  8444                           ; BSR set to: 0
  8445                           ;incstack = 0
  8446  000766  0E00               	movlw	0
  8447  000768  6E49               	movwf	_currentMode+1,c
  8448  00076A  0E04               	movlw	4
  8449  00076C  6E48               	movwf	_currentMode,c
  8450                           
  8451                           ;main.c: 169: char instr[] = {3, 0};
  8452  00076E  C061  F09F         	movff	clearing@F3240,clearing@instr
  8453  000772  C062  F0A0         	movff	clearing@F3240+1,clearing@instr+1
  8454                           
  8455                           ;main.c: 170: I2C_Send(nanoAddr, instr);
  8456  000776  0E9F               	movlw	low clearing@instr
  8457  000778  0100               	movlb	0	; () banked
  8458  00077A  6F83               	movwf	I2C_Send@data& (0+255),b
  8459  00077C  0E00               	movlw	high clearing@instr
  8460  00077E  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  8461  000780  0E3F               	movlw	low _nanoAddr
  8462  000782  6EF6               	movwf	tblptrl,c
  8463  000784                     	if	1	;There is more than 1 active tblptr byte
  8464  000784  0EFC               	movlw	high _nanoAddr
  8465  000786  6EF7               	movwf	tblptrh,c
  8466  000788                     	endif
  8467  000788                     	if	1	;There are 3 active tblptr bytes
  8468  000788  0E00               	movlw	low (_nanoAddr shr (0+16))
  8469  00078A  6EF8               	movwf	tblptru,c
  8470  00078C                     	endif
  8471  00078C  0008               	tblrd		*
  8472  00078E  50F5               	movf	tablat,w,c
  8473  000790  EC83  F015         	call	_I2C_Send
  8474  000794  BA80               	btfsc	3968,5,c	;volatile
  8475  000796  D7FE               	goto	l141
  8476                           
  8477                           ;main.c: 173: int i;
  8478                           ;main.c: 174: double spinTime=15.0;
  8479  000798  0E00               	movlw	0
  8480  00079A  0100               	movlb	0	; () banked
  8481  00079C  6FA1               	movwf	clearing@spinTime& (0+255),b
  8482  00079E  0E70               	movlw	112
  8483  0007A0  6FA2               	movwf	(clearing@spinTime+1)& (0+255),b
  8484  0007A2  0E41               	movlw	65
  8485  0007A4  6FA3               	movwf	(clearing@spinTime+2)& (0+255),b
  8486                           
  8487                           ;main.c: 175: long startTime;
  8488                           ;main.c: 176: double currTime, debounceTime=0;
  8489  0007A6  0E00               	movlw	0
  8490  0007A8  6FA4               	movwf	clearing@debounceTime& (0+255),b
  8491  0007AA  0E00               	movlw	0
  8492  0007AC  6FA5               	movwf	(clearing@debounceTime+1)& (0+255),b
  8493  0007AE  0E00               	movlw	0
  8494  0007B0  6FA6               	movwf	(clearing@debounceTime+2)& (0+255),b
  8495                           
  8496                           ;main.c: 178: extras.b = 0;
  8497  0007B2  0E00               	movlw	0
  8498  0007B4  6FE5               	movwf	(_extras+1)& (0+255),b
  8499  0007B6  0E00               	movlw	0
  8500  0007B8  6FE4               	movwf	_extras& (0+255),b
  8501                           
  8502                           ;main.c: 179: extras.n = 0;
  8503  0007BA  0E00               	movlw	0
  8504  0007BC  6FE7               	movwf	(_extras+3)& (0+255),b
  8505  0007BE  0E00               	movlw	0
  8506  0007C0  6FE6               	movwf	(_extras+2)& (0+255),b
  8507                           
  8508                           ;main.c: 180: extras.s = 0;
  8509  0007C2  0E00               	movlw	0
  8510  0007C4  6FE9               	movwf	(_extras+5)& (0+255),b
  8511  0007C6  0E00               	movlw	0
  8512  0007C8  6FE8               	movwf	(_extras+4)& (0+255),b
  8513                           
  8514                           ;main.c: 181: extras.w = 0;
  8515  0007CA  0E00               	movlw	0
  8516  0007CC  6FEB               	movwf	(_extras+7)& (0+255),b
  8517  0007CE  0E00               	movlw	0
  8518  0007D0  6FEA               	movwf	(_extras+6)& (0+255),b
  8519                           
  8520                           ; BSR set to: 0
  8521                           ;main.c: 183: tic();
  8522  0007D2  ECB2  F019         	call	_tic	;wreg free
  8523                           
  8524                           ;main.c: 185: currentMode = CLEARING;
  8525  0007D6  0E00               	movlw	0
  8526  0007D8  6E49               	movwf	_currentMode+1,c
  8527  0007DA  0E03               	movlw	3
  8528  0007DC  6E48               	movwf	_currentMode,c
  8529                           
  8530                           ;main.c: 186: motorControl(BOLT, FORWARD);
  8531  0007DE  0E00               	movlw	0
  8532  0007E0  0100               	movlb	0	; () banked
  8533  0007E2  6F80               	movwf	motorControl@dir& (0+255),b
  8534  0007E4  0E00               	movlw	0
  8535  0007E6  EC66  F013         	call	_motorControl
  8536                           
  8537                           ;main.c: 187: while (extras.b + dispensed.b < 20) {
  8538  0007EA  D051               	goto	l146
  8539  0007EC                     
  8540                           ;main.c: 188: currTime = tock();
  8541  0007EC  ECAB  F019         	call	_tock	;wreg free
  8542  0007F0  C080  F0A7         	movff	?_tock,clearing@currTime
  8543  0007F4  C081  F0A8         	movff	?_tock+1,clearing@currTime+1
  8544  0007F8  C082  F0A9         	movff	?_tock+2,clearing@currTime+2
  8545                           
  8546                           ;main.c: 189: if (PORTAbits.RA3 == 0 && currTime > debounceTime + 1) {
  8547  0007FC  B680               	btfsc	3968,3,c	;volatile
  8548  0007FE  D036               	goto	l145
  8549  000800  0E00               	movlw	0
  8550  000802  0100               	movlb	0	; () banked
  8551  000804  6F8B               	movwf	___ftadd@f2& (0+255),b
  8552  000806  0E80               	movlw	128
  8553  000808  6F8C               	movwf	(___ftadd@f2+1)& (0+255),b
  8554  00080A  0E3F               	movlw	63
  8555  00080C  6F8D               	movwf	(___ftadd@f2+2)& (0+255),b
  8556  00080E  C0A4  F088         	movff	clearing@debounceTime,___ftadd@f1
  8557  000812  C0A5  F089         	movff	clearing@debounceTime+1,___ftadd@f1+1
  8558  000816  C0A6  F08A         	movff	clearing@debounceTime+2,___ftadd@f1+2
  8559  00081A  EC21  F011         	call	___ftadd	;wreg free
  8560  00081E  C088  F094         	movff	?___ftadd,___ftge@ff1
  8561  000822  C089  F095         	movff	?___ftadd+1,___ftge@ff1+1
  8562  000826  C08A  F096         	movff	?___ftadd+2,___ftge@ff1+2
  8563  00082A  C0A7  F097         	movff	clearing@currTime,___ftge@ff2
  8564  00082E  C0A8  F098         	movff	clearing@currTime+1,___ftge@ff2+1
  8565  000832  C0A9  F099         	movff	clearing@currTime+2,___ftge@ff2+2
  8566  000836  ECD3  F015         	call	___ftge	;wreg free
  8567  00083A  0100               	movlb	0	; () banked
  8568  00083C  B0D8               	btfsc	status,0,c
  8569  00083E  D016               	goto	l145
  8570                           
  8571                           ; BSR set to: 0
  8572                           ;main.c: 190: debounceTime = currTime;
  8573  000840  C0A7  F0A4         	movff	clearing@currTime,clearing@debounceTime
  8574  000844  C0A8  F0A5         	movff	clearing@currTime+1,clearing@debounceTime+1
  8575  000848  C0A9  F0A6         	movff	clearing@currTime+2,clearing@debounceTime+2
  8576                           
  8577                           ; BSR set to: 0
  8578                           ;main.c: 191: extras.b++;
  8579  00084C  4BE4               	infsnz	_extras& (0+255),f,b
  8580  00084E  2BE5               	incf	(_extras+1)& (0+255),f,b
  8581                           
  8582                           ; BSR set to: 0
  8583                           ;main.c: 192: I2C_Send(nanoAddr, "\1Bolt counted\0");
  8584  000850  0E86               	movlw	low STR_11
  8585  000852  6F83               	movwf	I2C_Send@data& (0+255),b
  8586  000854  0EFF               	movlw	high STR_11
  8587  000856  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  8588  000858  0E3F               	movlw	low _nanoAddr
  8589  00085A  6EF6               	movwf	tblptrl,c
  8590  00085C                     	if	1	;There is more than 1 active tblptr byte
  8591  00085C  0EFC               	movlw	high _nanoAddr
  8592  00085E  6EF7               	movwf	tblptrh,c
  8593  000860                     	endif
  8594  000860                     	if	1	;There are 3 active tblptr bytes
  8595  000860  0E00               	movlw	low (_nanoAddr shr (0+16))
  8596  000862  6EF8               	movwf	tblptru,c
  8597  000864                     	endif
  8598  000864  0008               	tblrd		*
  8599  000866  50F5               	movf	tablat,w,c
  8600  000868  EC83  F015         	call	_I2C_Send
  8601  00086C                     l145:
  8602                           
  8603                           ;main.c: 193: }
  8604                           ;main.c: 195: if (currTime >= spinTime) break;
  8605  00086C  C0A7  F094         	movff	clearing@currTime,___ftge@ff1
  8606  000870  C0A8  F095         	movff	clearing@currTime+1,___ftge@ff1+1
  8607  000874  C0A9  F096         	movff	clearing@currTime+2,___ftge@ff1+2
  8608  000878  C0A1  F097         	movff	clearing@spinTime,___ftge@ff2
  8609  00087C  C0A2  F098         	movff	clearing@spinTime+1,___ftge@ff2+1
  8610  000880  C0A3  F099         	movff	clearing@spinTime+2,___ftge@ff2+2
  8611  000884  ECD3  F015         	call	___ftge	;wreg free
  8612  000888  0100               	movlb	0	; () banked
  8613  00088A  B0D8               	btfsc	status,0,c
  8614  00088C  D00F               	goto	u6950
  8615  00088E                     l146:
  8616                           
  8617                           ; BSR set to: 0
  8618                           
  8619                           ; BSR set to: 0
  8620  00088E  0100               	movlb	0	; () banked
  8621  000890  51DC               	movf	_dispensed& (0+255),w,b
  8622  000892  25E4               	addwf	_extras& (0+255),w,b
  8623  000894  6F9D               	movwf	??_clearing& (0+255),b
  8624  000896  51DD               	movf	(_dispensed+1)& (0+255),w,b
  8625  000898  21E5               	addwfc	(_extras+1)& (0+255),w,b
  8626  00089A  6F9E               	movwf	(??_clearing+1)& (0+255),b
  8627  00089C  BF9E               	btfsc	(??_clearing+1)& (0+255),7,b
  8628  00089E  D7A6               	goto	l144
  8629  0008A0  519E               	movf	(??_clearing+1)& (0+255),w,b
  8630  0008A2  E104               	bnz	l5579
  8631  0008A4  0E14               	movlw	20
  8632  0008A6  5D9D               	subwf	??_clearing& (0+255),w,b
  8633  0008A8  A0D8               	btfss	status,0,c
  8634  0008AA  D7A0               	goto	l144
  8635  0008AC                     u6950:
  8636  0008AC                     l5579:
  8637                           
  8638                           ; BSR set to: 0
  8639                           ;main.c: 196: }
  8640                           ;main.c: 197: motorControl(BOLT, STOPMOTOR);
  8641  0008AC  0E02               	movlw	2
  8642  0008AE  6F80               	movwf	motorControl@dir& (0+255),b
  8643  0008B0  0E00               	movlw	0
  8644  0008B2  EC66  F013         	call	_motorControl
  8645                           
  8646                           ;main.c: 198: currentMode = WAITING;
  8647  0008B6  0E00               	movlw	0
  8648  0008B8  6E49               	movwf	_currentMode+1,c
  8649  0008BA  0E04               	movlw	4
  8650  0008BC  6E48               	movwf	_currentMode,c
  8651                           
  8652                           ;main.c: 200: instr[0] = 4;
  8653  0008BE  0E04               	movlw	4
  8654  0008C0  0100               	movlb	0	; () banked
  8655  0008C2  6F9F               	movwf	clearing@instr& (0+255),b
  8656                           
  8657                           ; BSR set to: 0
  8658                           ;main.c: 201: I2C_Send(nanoAddr, instr);
  8659  0008C4  0E9F               	movlw	low clearing@instr
  8660  0008C6  6F83               	movwf	I2C_Send@data& (0+255),b
  8661  0008C8  0E00               	movlw	high clearing@instr
  8662  0008CA  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  8663  0008CC  0E3F               	movlw	low _nanoAddr
  8664  0008CE  6EF6               	movwf	tblptrl,c
  8665  0008D0                     	if	1	;There is more than 1 active tblptr byte
  8666  0008D0  0EFC               	movlw	high _nanoAddr
  8667  0008D2  6EF7               	movwf	tblptrh,c
  8668  0008D4                     	endif
  8669  0008D4                     	if	1	;There are 3 active tblptr bytes
  8670  0008D4  0E00               	movlw	low (_nanoAddr shr (0+16))
  8671  0008D6  6EF8               	movwf	tblptru,c
  8672  0008D8                     	endif
  8673  0008D8  0008               	tblrd		*
  8674  0008DA  50F5               	movf	tablat,w,c
  8675  0008DC  EC83  F015         	call	_I2C_Send
  8676  0008E0  BA80               	btfsc	3968,5,c	;volatile
  8677  0008E2  D7FE               	goto	l149
  8678                           
  8679                           ;main.c: 204: tic();
  8680  0008E4  ECB2  F019         	call	_tic	;wreg free
  8681                           
  8682                           ;main.c: 205: debounceTime = 0;
  8683  0008E8  0E00               	movlw	0
  8684  0008EA  0100               	movlb	0	; () banked
  8685  0008EC  6FA4               	movwf	clearing@debounceTime& (0+255),b
  8686  0008EE  0E00               	movlw	0
  8687  0008F0  6FA5               	movwf	(clearing@debounceTime+1)& (0+255),b
  8688  0008F2  0E00               	movlw	0
  8689  0008F4  6FA6               	movwf	(clearing@debounceTime+2)& (0+255),b
  8690                           
  8691                           ; BSR set to: 0
  8692                           ;main.c: 206: currentMode = CLEARING;
  8693  0008F6  0E00               	movlw	0
  8694  0008F8  6E49               	movwf	_currentMode+1,c
  8695  0008FA  0E03               	movlw	3
  8696  0008FC  6E48               	movwf	_currentMode,c
  8697                           
  8698                           ; BSR set to: 0
  8699                           ;main.c: 207: motorControl(NUT, FORWARD);
  8700  0008FE  0E00               	movlw	0
  8701  000900  6F80               	movwf	motorControl@dir& (0+255),b
  8702  000902  0E01               	movlw	1
  8703  000904  EC66  F013         	call	_motorControl
  8704                           
  8705                           ;main.c: 208: while (extras.n + dispensed.n < 25) {
  8706  000908  D051               	goto	l154
  8707  00090A                     
  8708                           ;main.c: 209: currTime = tock();
  8709  00090A  ECAB  F019         	call	_tock	;wreg free
  8710  00090E  C080  F0A7         	movff	?_tock,clearing@currTime
  8711  000912  C081  F0A8         	movff	?_tock+1,clearing@currTime+1
  8712  000916  C082  F0A9         	movff	?_tock+2,clearing@currTime+2
  8713                           
  8714                           ;main.c: 210: if (PORTAbits.RA1 == 0 && currTime > debounceTime + 1) {
  8715  00091A  B280               	btfsc	3968,1,c	;volatile
  8716  00091C  D036               	goto	l153
  8717  00091E  0E00               	movlw	0
  8718  000920  0100               	movlb	0	; () banked
  8719  000922  6F8B               	movwf	___ftadd@f2& (0+255),b
  8720  000924  0E80               	movlw	128
  8721  000926  6F8C               	movwf	(___ftadd@f2+1)& (0+255),b
  8722  000928  0E3F               	movlw	63
  8723  00092A  6F8D               	movwf	(___ftadd@f2+2)& (0+255),b
  8724  00092C  C0A4  F088         	movff	clearing@debounceTime,___ftadd@f1
  8725  000930  C0A5  F089         	movff	clearing@debounceTime+1,___ftadd@f1+1
  8726  000934  C0A6  F08A         	movff	clearing@debounceTime+2,___ftadd@f1+2
  8727  000938  EC21  F011         	call	___ftadd	;wreg free
  8728  00093C  C088  F094         	movff	?___ftadd,___ftge@ff1
  8729  000940  C089  F095         	movff	?___ftadd+1,___ftge@ff1+1
  8730  000944  C08A  F096         	movff	?___ftadd+2,___ftge@ff1+2
  8731  000948  C0A7  F097         	movff	clearing@currTime,___ftge@ff2
  8732  00094C  C0A8  F098         	movff	clearing@currTime+1,___ftge@ff2+1
  8733  000950  C0A9  F099         	movff	clearing@currTime+2,___ftge@ff2+2
  8734  000954  ECD3  F015         	call	___ftge	;wreg free
  8735  000958  0100               	movlb	0	; () banked
  8736  00095A  B0D8               	btfsc	status,0,c
  8737  00095C  D016               	goto	l153
  8738                           
  8739                           ; BSR set to: 0
  8740                           ;main.c: 211: debounceTime = currTime;
  8741  00095E  C0A7  F0A4         	movff	clearing@currTime,clearing@debounceTime
  8742  000962  C0A8  F0A5         	movff	clearing@currTime+1,clearing@debounceTime+1
  8743  000966  C0A9  F0A6         	movff	clearing@currTime+2,clearing@debounceTime+2
  8744                           
  8745                           ; BSR set to: 0
  8746                           ;main.c: 212: extras.n++;
  8747  00096A  4BE6               	infsnz	(_extras+2)& (0+255),f,b
  8748  00096C  2BE7               	incf	(_extras+3)& (0+255),f,b
  8749                           
  8750                           ; BSR set to: 0
  8751                           ;main.c: 213: I2C_Send(nanoAddr, "\1Nut counted\0");
  8752  00096E  0EC0               	movlw	low STR_12
  8753  000970  6F83               	movwf	I2C_Send@data& (0+255),b
  8754  000972  0EFF               	movlw	high STR_12
  8755  000974  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  8756  000976  0E3F               	movlw	low _nanoAddr
  8757  000978  6EF6               	movwf	tblptrl,c
  8758  00097A                     	if	1	;There is more than 1 active tblptr byte
  8759  00097A  0EFC               	movlw	high _nanoAddr
  8760  00097C  6EF7               	movwf	tblptrh,c
  8761  00097E                     	endif
  8762  00097E                     	if	1	;There are 3 active tblptr bytes
  8763  00097E  0E00               	movlw	low (_nanoAddr shr (0+16))
  8764  000980  6EF8               	movwf	tblptru,c
  8765  000982                     	endif
  8766  000982  0008               	tblrd		*
  8767  000984  50F5               	movf	tablat,w,c
  8768  000986  EC83  F015         	call	_I2C_Send
  8769  00098A                     l153:
  8770                           
  8771                           ;main.c: 214: }
  8772                           ;main.c: 216: if (currTime >= spinTime) break;
  8773  00098A  C0A7  F094         	movff	clearing@currTime,___ftge@ff1
  8774  00098E  C0A8  F095         	movff	clearing@currTime+1,___ftge@ff1+1
  8775  000992  C0A9  F096         	movff	clearing@currTime+2,___ftge@ff1+2
  8776  000996  C0A1  F097         	movff	clearing@spinTime,___ftge@ff2
  8777  00099A  C0A2  F098         	movff	clearing@spinTime+1,___ftge@ff2+1
  8778  00099E  C0A3  F099         	movff	clearing@spinTime+2,___ftge@ff2+2
  8779  0009A2  ECD3  F015         	call	___ftge	;wreg free
  8780  0009A6  0100               	movlb	0	; () banked
  8781  0009A8  B0D8               	btfsc	status,0,c
  8782  0009AA  D00F               	goto	u7000
  8783  0009AC                     l154:
  8784                           
  8785                           ; BSR set to: 0
  8786                           
  8787                           ; BSR set to: 0
  8788  0009AC  0100               	movlb	0	; () banked
  8789  0009AE  51DE               	movf	(_dispensed+2)& (0+255),w,b
  8790  0009B0  25E6               	addwf	(_extras+2)& (0+255),w,b
  8791  0009B2  6F9D               	movwf	??_clearing& (0+255),b
  8792  0009B4  51DF               	movf	(_dispensed+3)& (0+255),w,b
  8793  0009B6  21E7               	addwfc	(_extras+3)& (0+255),w,b
  8794  0009B8  6F9E               	movwf	(??_clearing+1)& (0+255),b
  8795  0009BA  BF9E               	btfsc	(??_clearing+1)& (0+255),7,b
  8796  0009BC  D7A6               	goto	l152
  8797  0009BE  519E               	movf	(??_clearing+1)& (0+255),w,b
  8798  0009C0  E104               	bnz	l5613
  8799  0009C2  0E19               	movlw	25
  8800  0009C4  5D9D               	subwf	??_clearing& (0+255),w,b
  8801  0009C6  A0D8               	btfss	status,0,c
  8802  0009C8  D7A0               	goto	l152
  8803  0009CA                     u7000:
  8804  0009CA                     l5613:
  8805                           
  8806                           ; BSR set to: 0
  8807                           ;main.c: 217: }
  8808                           ;main.c: 219: motorControl(NUT, STOPMOTOR);
  8809  0009CA  0E02               	movlw	2
  8810  0009CC  6F80               	movwf	motorControl@dir& (0+255),b
  8811  0009CE  0E01               	movlw	1
  8812  0009D0  EC66  F013         	call	_motorControl
  8813                           
  8814                           ;main.c: 220: currentMode = WAITING;
  8815  0009D4  0E00               	movlw	0
  8816  0009D6  6E49               	movwf	_currentMode+1,c
  8817  0009D8  0E04               	movlw	4
  8818  0009DA  6E48               	movwf	_currentMode,c
  8819                           
  8820                           ;main.c: 222: instr[0] = 5;
  8821  0009DC  0E05               	movlw	5
  8822  0009DE  0100               	movlb	0	; () banked
  8823  0009E0  6F9F               	movwf	clearing@instr& (0+255),b
  8824                           
  8825                           ; BSR set to: 0
  8826                           ;main.c: 223: I2C_Send(nanoAddr, instr);
  8827  0009E2  0E9F               	movlw	low clearing@instr
  8828  0009E4  6F83               	movwf	I2C_Send@data& (0+255),b
  8829  0009E6  0E00               	movlw	high clearing@instr
  8830  0009E8  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  8831  0009EA  0E3F               	movlw	low _nanoAddr
  8832  0009EC  6EF6               	movwf	tblptrl,c
  8833  0009EE                     	if	1	;There is more than 1 active tblptr byte
  8834  0009EE  0EFC               	movlw	high _nanoAddr
  8835  0009F0  6EF7               	movwf	tblptrh,c
  8836  0009F2                     	endif
  8837  0009F2                     	if	1	;There are 3 active tblptr bytes
  8838  0009F2  0E00               	movlw	low (_nanoAddr shr (0+16))
  8839  0009F4  6EF8               	movwf	tblptru,c
  8840  0009F6                     	endif
  8841  0009F6  0008               	tblrd		*
  8842  0009F8  50F5               	movf	tablat,w,c
  8843  0009FA  EC83  F015         	call	_I2C_Send
  8844  0009FE  BA80               	btfsc	3968,5,c	;volatile
  8845  000A00  D7FE               	goto	l157
  8846                           
  8847                           ;main.c: 226: tic();
  8848  000A02  ECB2  F019         	call	_tic	;wreg free
  8849                           
  8850                           ;main.c: 227: debounceTime = 0;
  8851  000A06  0E00               	movlw	0
  8852  000A08  0100               	movlb	0	; () banked
  8853  000A0A  6FA4               	movwf	clearing@debounceTime& (0+255),b
  8854  000A0C  0E00               	movlw	0
  8855  000A0E  6FA5               	movwf	(clearing@debounceTime+1)& (0+255),b
  8856  000A10  0E00               	movlw	0
  8857  000A12  6FA6               	movwf	(clearing@debounceTime+2)& (0+255),b
  8858                           
  8859                           ; BSR set to: 0
  8860                           ;main.c: 228: currentMode = CLEARING;
  8861  000A14  0E00               	movlw	0
  8862  000A16  6E49               	movwf	_currentMode+1,c
  8863  000A18  0E03               	movlw	3
  8864  000A1A  6E48               	movwf	_currentMode,c
  8865                           
  8866                           ; BSR set to: 0
  8867                           ;main.c: 229: motorControl(SPACER, FORWARD);
  8868  000A1C  0E00               	movlw	0
  8869  000A1E  6F80               	movwf	motorControl@dir& (0+255),b
  8870  000A20  0E02               	movlw	2
  8871  000A22  EC66  F013         	call	_motorControl
  8872                           
  8873                           ;main.c: 230: while (extras.s + dispensed.s < 20) {
  8874  000A26  D051               	goto	l162
  8875  000A28                     
  8876                           ;main.c: 231: currTime = tock();
  8877  000A28  ECAB  F019         	call	_tock	;wreg free
  8878  000A2C  C080  F0A7         	movff	?_tock,clearing@currTime
  8879  000A30  C081  F0A8         	movff	?_tock+1,clearing@currTime+1
  8880  000A34  C082  F0A9         	movff	?_tock+2,clearing@currTime+2
  8881                           
  8882                           ;main.c: 232: if (PORTAbits.RA0 == 0 && currTime > debounceTime + 1) {
  8883  000A38  B080               	btfsc	3968,0,c	;volatile
  8884  000A3A  D036               	goto	l161
  8885  000A3C  0E00               	movlw	0
  8886  000A3E  0100               	movlb	0	; () banked
  8887  000A40  6F8B               	movwf	___ftadd@f2& (0+255),b
  8888  000A42  0E80               	movlw	128
  8889  000A44  6F8C               	movwf	(___ftadd@f2+1)& (0+255),b
  8890  000A46  0E3F               	movlw	63
  8891  000A48  6F8D               	movwf	(___ftadd@f2+2)& (0+255),b
  8892  000A4A  C0A4  F088         	movff	clearing@debounceTime,___ftadd@f1
  8893  000A4E  C0A5  F089         	movff	clearing@debounceTime+1,___ftadd@f1+1
  8894  000A52  C0A6  F08A         	movff	clearing@debounceTime+2,___ftadd@f1+2
  8895  000A56  EC21  F011         	call	___ftadd	;wreg free
  8896  000A5A  C088  F094         	movff	?___ftadd,___ftge@ff1
  8897  000A5E  C089  F095         	movff	?___ftadd+1,___ftge@ff1+1
  8898  000A62  C08A  F096         	movff	?___ftadd+2,___ftge@ff1+2
  8899  000A66  C0A7  F097         	movff	clearing@currTime,___ftge@ff2
  8900  000A6A  C0A8  F098         	movff	clearing@currTime+1,___ftge@ff2+1
  8901  000A6E  C0A9  F099         	movff	clearing@currTime+2,___ftge@ff2+2
  8902  000A72  ECD3  F015         	call	___ftge	;wreg free
  8903  000A76  0100               	movlb	0	; () banked
  8904  000A78  B0D8               	btfsc	status,0,c
  8905  000A7A  D016               	goto	l161
  8906                           
  8907                           ; BSR set to: 0
  8908                           ;main.c: 233: debounceTime = currTime;
  8909  000A7C  C0A7  F0A4         	movff	clearing@currTime,clearing@debounceTime
  8910  000A80  C0A8  F0A5         	movff	clearing@currTime+1,clearing@debounceTime+1
  8911  000A84  C0A9  F0A6         	movff	clearing@currTime+2,clearing@debounceTime+2
  8912                           
  8913                           ; BSR set to: 0
  8914                           ;main.c: 234: extras.s++;
  8915  000A88  4BE8               	infsnz	(_extras+4)& (0+255),f,b
  8916  000A8A  2BE9               	incf	(_extras+5)& (0+255),f,b
  8917                           
  8918                           ; BSR set to: 0
  8919                           ;main.c: 235: I2C_Send(nanoAddr, "\1Spacer counted\0");
  8920  000A8C  0E45               	movlw	low STR_13
  8921  000A8E  6F83               	movwf	I2C_Send@data& (0+255),b
  8922  000A90  0EFF               	movlw	high STR_13
  8923  000A92  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  8924  000A94  0E3F               	movlw	low _nanoAddr
  8925  000A96  6EF6               	movwf	tblptrl,c
  8926  000A98                     	if	1	;There is more than 1 active tblptr byte
  8927  000A98  0EFC               	movlw	high _nanoAddr
  8928  000A9A  6EF7               	movwf	tblptrh,c
  8929  000A9C                     	endif
  8930  000A9C                     	if	1	;There are 3 active tblptr bytes
  8931  000A9C  0E00               	movlw	low (_nanoAddr shr (0+16))
  8932  000A9E  6EF8               	movwf	tblptru,c
  8933  000AA0                     	endif
  8934  000AA0  0008               	tblrd		*
  8935  000AA2  50F5               	movf	tablat,w,c
  8936  000AA4  EC83  F015         	call	_I2C_Send
  8937  000AA8                     l161:
  8938                           
  8939                           ;main.c: 236: }
  8940                           ;main.c: 238: if (currTime >= spinTime) break;
  8941  000AA8  C0A7  F094         	movff	clearing@currTime,___ftge@ff1
  8942  000AAC  C0A8  F095         	movff	clearing@currTime+1,___ftge@ff1+1
  8943  000AB0  C0A9  F096         	movff	clearing@currTime+2,___ftge@ff1+2
  8944  000AB4  C0A1  F097         	movff	clearing@spinTime,___ftge@ff2
  8945  000AB8  C0A2  F098         	movff	clearing@spinTime+1,___ftge@ff2+1
  8946  000ABC  C0A3  F099         	movff	clearing@spinTime+2,___ftge@ff2+2
  8947  000AC0  ECD3  F015         	call	___ftge	;wreg free
  8948  000AC4  0100               	movlb	0	; () banked
  8949  000AC6  B0D8               	btfsc	status,0,c
  8950  000AC8  D00F               	goto	u7050
  8951  000ACA                     l162:
  8952                           
  8953                           ; BSR set to: 0
  8954                           
  8955                           ; BSR set to: 0
  8956  000ACA  0100               	movlb	0	; () banked
  8957  000ACC  51E0               	movf	(_dispensed+4)& (0+255),w,b
  8958  000ACE  25E8               	addwf	(_extras+4)& (0+255),w,b
  8959  000AD0  6F9D               	movwf	??_clearing& (0+255),b
  8960  000AD2  51E1               	movf	(_dispensed+5)& (0+255),w,b
  8961  000AD4  21E9               	addwfc	(_extras+5)& (0+255),w,b
  8962  000AD6  6F9E               	movwf	(??_clearing+1)& (0+255),b
  8963  000AD8  BF9E               	btfsc	(??_clearing+1)& (0+255),7,b
  8964  000ADA  D7A6               	goto	l160
  8965  000ADC  519E               	movf	(??_clearing+1)& (0+255),w,b
  8966  000ADE  E104               	bnz	l5647
  8967  000AE0  0E14               	movlw	20
  8968  000AE2  5D9D               	subwf	??_clearing& (0+255),w,b
  8969  000AE4  A0D8               	btfss	status,0,c
  8970  000AE6  D7A0               	goto	l160
  8971  000AE8                     u7050:
  8972  000AE8                     l5647:
  8973                           
  8974                           ; BSR set to: 0
  8975                           ;main.c: 239: }
  8976                           ;main.c: 241: motorControl(SPACER, STOPMOTOR);
  8977  000AE8  0E02               	movlw	2
  8978  000AEA  6F80               	movwf	motorControl@dir& (0+255),b
  8979  000AEC  0E02               	movlw	2
  8980  000AEE  EC66  F013         	call	_motorControl
  8981                           
  8982                           ;main.c: 242: currentMode = WAITING;
  8983  000AF2  0E00               	movlw	0
  8984  000AF4  6E49               	movwf	_currentMode+1,c
  8985  000AF6  0E04               	movlw	4
  8986  000AF8  6E48               	movwf	_currentMode,c
  8987                           
  8988                           ;main.c: 244: instr[0] = 6;
  8989  000AFA  0E06               	movlw	6
  8990  000AFC  0100               	movlb	0	; () banked
  8991  000AFE  6F9F               	movwf	clearing@instr& (0+255),b
  8992                           
  8993                           ; BSR set to: 0
  8994                           ;main.c: 245: I2C_Send(nanoAddr, instr);
  8995  000B00  0E9F               	movlw	low clearing@instr
  8996  000B02  6F83               	movwf	I2C_Send@data& (0+255),b
  8997  000B04  0E00               	movlw	high clearing@instr
  8998  000B06  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  8999  000B08  0E3F               	movlw	low _nanoAddr
  9000  000B0A  6EF6               	movwf	tblptrl,c
  9001  000B0C                     	if	1	;There is more than 1 active tblptr byte
  9002  000B0C  0EFC               	movlw	high _nanoAddr
  9003  000B0E  6EF7               	movwf	tblptrh,c
  9004  000B10                     	endif
  9005  000B10                     	if	1	;There are 3 active tblptr bytes
  9006  000B10  0E00               	movlw	low (_nanoAddr shr (0+16))
  9007  000B12  6EF8               	movwf	tblptru,c
  9008  000B14                     	endif
  9009  000B14  0008               	tblrd		*
  9010  000B16  50F5               	movf	tablat,w,c
  9011  000B18  EC83  F015         	call	_I2C_Send
  9012  000B1C  BA80               	btfsc	3968,5,c	;volatile
  9013  000B1E  D7FE               	goto	l165
  9014                           
  9015                           ;main.c: 248: tic();
  9016  000B20  ECB2  F019         	call	_tic	;wreg free
  9017                           
  9018                           ;main.c: 249: debounceTime = 0;
  9019  000B24  0E00               	movlw	0
  9020  000B26  0100               	movlb	0	; () banked
  9021  000B28  6FA4               	movwf	clearing@debounceTime& (0+255),b
  9022  000B2A  0E00               	movlw	0
  9023  000B2C  6FA5               	movwf	(clearing@debounceTime+1)& (0+255),b
  9024  000B2E  0E00               	movlw	0
  9025  000B30  6FA6               	movwf	(clearing@debounceTime+2)& (0+255),b
  9026                           
  9027                           ; BSR set to: 0
  9028                           ;main.c: 250: currentMode = CLEARING;
  9029  000B32  0E00               	movlw	0
  9030  000B34  6E49               	movwf	_currentMode+1,c
  9031  000B36  0E03               	movlw	3
  9032  000B38  6E48               	movwf	_currentMode,c
  9033                           
  9034                           ; BSR set to: 0
  9035                           ;main.c: 251: motorControl(WASHER, FORWARD);
  9036  000B3A  0E00               	movlw	0
  9037  000B3C  6F80               	movwf	motorControl@dir& (0+255),b
  9038  000B3E  0E03               	movlw	3
  9039  000B40  EC66  F013         	call	_motorControl
  9040                           
  9041                           ;main.c: 252: while (extras.w + dispensed.w < 35) {
  9042  000B44  D051               	goto	l170
  9043  000B46                     
  9044                           ;main.c: 253: currTime = tock();
  9045  000B46  ECAB  F019         	call	_tock	;wreg free
  9046  000B4A  C080  F0A7         	movff	?_tock,clearing@currTime
  9047  000B4E  C081  F0A8         	movff	?_tock+1,clearing@currTime+1
  9048  000B52  C082  F0A9         	movff	?_tock+2,clearing@currTime+2
  9049                           
  9050                           ;main.c: 254: if (PORTAbits.RA2 == 0 && currTime > debounceTime + 1) {
  9051  000B56  B480               	btfsc	3968,2,c	;volatile
  9052  000B58  D036               	goto	l169
  9053  000B5A  0E00               	movlw	0
  9054  000B5C  0100               	movlb	0	; () banked
  9055  000B5E  6F8B               	movwf	___ftadd@f2& (0+255),b
  9056  000B60  0E80               	movlw	128
  9057  000B62  6F8C               	movwf	(___ftadd@f2+1)& (0+255),b
  9058  000B64  0E3F               	movlw	63
  9059  000B66  6F8D               	movwf	(___ftadd@f2+2)& (0+255),b
  9060  000B68  C0A4  F088         	movff	clearing@debounceTime,___ftadd@f1
  9061  000B6C  C0A5  F089         	movff	clearing@debounceTime+1,___ftadd@f1+1
  9062  000B70  C0A6  F08A         	movff	clearing@debounceTime+2,___ftadd@f1+2
  9063  000B74  EC21  F011         	call	___ftadd	;wreg free
  9064  000B78  C088  F094         	movff	?___ftadd,___ftge@ff1
  9065  000B7C  C089  F095         	movff	?___ftadd+1,___ftge@ff1+1
  9066  000B80  C08A  F096         	movff	?___ftadd+2,___ftge@ff1+2
  9067  000B84  C0A7  F097         	movff	clearing@currTime,___ftge@ff2
  9068  000B88  C0A8  F098         	movff	clearing@currTime+1,___ftge@ff2+1
  9069  000B8C  C0A9  F099         	movff	clearing@currTime+2,___ftge@ff2+2
  9070  000B90  ECD3  F015         	call	___ftge	;wreg free
  9071  000B94  0100               	movlb	0	; () banked
  9072  000B96  B0D8               	btfsc	status,0,c
  9073  000B98  D016               	goto	l169
  9074                           
  9075                           ; BSR set to: 0
  9076                           ;main.c: 255: debounceTime = currTime;
  9077  000B9A  C0A7  F0A4         	movff	clearing@currTime,clearing@debounceTime
  9078  000B9E  C0A8  F0A5         	movff	clearing@currTime+1,clearing@debounceTime+1
  9079  000BA2  C0A9  F0A6         	movff	clearing@currTime+2,clearing@debounceTime+2
  9080                           
  9081                           ; BSR set to: 0
  9082                           ;main.c: 256: extras.w++;
  9083  000BA6  4BEA               	infsnz	(_extras+6)& (0+255),f,b
  9084  000BA8  2BEB               	incf	(_extras+7)& (0+255),f,b
  9085                           
  9086                           ; BSR set to: 0
  9087                           ;main.c: 257: I2C_Send(nanoAddr, "\1Washer counted\0");
  9088  000BAA  0E56               	movlw	low STR_14
  9089  000BAC  6F83               	movwf	I2C_Send@data& (0+255),b
  9090  000BAE  0EFF               	movlw	high STR_14
  9091  000BB0  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  9092  000BB2  0E3F               	movlw	low _nanoAddr
  9093  000BB4  6EF6               	movwf	tblptrl,c
  9094  000BB6                     	if	1	;There is more than 1 active tblptr byte
  9095  000BB6  0EFC               	movlw	high _nanoAddr
  9096  000BB8  6EF7               	movwf	tblptrh,c
  9097  000BBA                     	endif
  9098  000BBA                     	if	1	;There are 3 active tblptr bytes
  9099  000BBA  0E00               	movlw	low (_nanoAddr shr (0+16))
  9100  000BBC  6EF8               	movwf	tblptru,c
  9101  000BBE                     	endif
  9102  000BBE  0008               	tblrd		*
  9103  000BC0  50F5               	movf	tablat,w,c
  9104  000BC2  EC83  F015         	call	_I2C_Send
  9105  000BC6                     l169:
  9106                           
  9107                           ;main.c: 258: }
  9108                           ;main.c: 260: if (currTime >= spinTime) break;
  9109  000BC6  C0A7  F094         	movff	clearing@currTime,___ftge@ff1
  9110  000BCA  C0A8  F095         	movff	clearing@currTime+1,___ftge@ff1+1
  9111  000BCE  C0A9  F096         	movff	clearing@currTime+2,___ftge@ff1+2
  9112  000BD2  C0A1  F097         	movff	clearing@spinTime,___ftge@ff2
  9113  000BD6  C0A2  F098         	movff	clearing@spinTime+1,___ftge@ff2+1
  9114  000BDA  C0A3  F099         	movff	clearing@spinTime+2,___ftge@ff2+2
  9115  000BDE  ECD3  F015         	call	___ftge	;wreg free
  9116  000BE2  0100               	movlb	0	; () banked
  9117  000BE4  B0D8               	btfsc	status,0,c
  9118  000BE6  D00F               	goto	u7100
  9119  000BE8                     l170:
  9120                           
  9121                           ; BSR set to: 0
  9122                           
  9123                           ; BSR set to: 0
  9124  000BE8  0100               	movlb	0	; () banked
  9125  000BEA  51E2               	movf	(_dispensed+6)& (0+255),w,b
  9126  000BEC  25EA               	addwf	(_extras+6)& (0+255),w,b
  9127  000BEE  6F9D               	movwf	??_clearing& (0+255),b
  9128  000BF0  51E3               	movf	(_dispensed+7)& (0+255),w,b
  9129  000BF2  21EB               	addwfc	(_extras+7)& (0+255),w,b
  9130  000BF4  6F9E               	movwf	(??_clearing+1)& (0+255),b
  9131  000BF6  BF9E               	btfsc	(??_clearing+1)& (0+255),7,b
  9132  000BF8  D7A6               	goto	l168
  9133  000BFA  519E               	movf	(??_clearing+1)& (0+255),w,b
  9134  000BFC  E104               	bnz	l5681
  9135  000BFE  0E23               	movlw	35
  9136  000C00  5D9D               	subwf	??_clearing& (0+255),w,b
  9137  000C02  A0D8               	btfss	status,0,c
  9138  000C04  D7A0               	goto	l168
  9139  000C06                     u7100:
  9140  000C06                     l5681:
  9141                           
  9142                           ; BSR set to: 0
  9143                           ;main.c: 261: }
  9144                           ;main.c: 263: motorControl(WASHER, STOPMOTOR);
  9145  000C06  0E02               	movlw	2
  9146  000C08  6F80               	movwf	motorControl@dir& (0+255),b
  9147  000C0A  0E03               	movlw	3
  9148  000C0C  EC66  F013         	call	_motorControl
  9149                           
  9150                           ;main.c: 264: currentMode = WAITING;
  9151  000C10  0E00               	movlw	0
  9152  000C12  6E49               	movwf	_currentMode+1,c
  9153  000C14  0E04               	movlw	4
  9154  000C16  6E48               	movwf	_currentMode,c
  9155                           
  9156                           ;main.c: 266: instr[0] = 7;
  9157  000C18  0E07               	movlw	7
  9158  000C1A  0100               	movlb	0	; () banked
  9159  000C1C  6F9F               	movwf	clearing@instr& (0+255),b
  9160                           
  9161                           ; BSR set to: 0
  9162                           ;main.c: 267: I2C_Send(nanoAddr, instr);
  9163  000C1E  0E9F               	movlw	low clearing@instr
  9164  000C20  6F83               	movwf	I2C_Send@data& (0+255),b
  9165  000C22  0E00               	movlw	high clearing@instr
  9166  000C24  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  9167  000C26  0E3F               	movlw	low _nanoAddr
  9168  000C28  6EF6               	movwf	tblptrl,c
  9169  000C2A                     	if	1	;There is more than 1 active tblptr byte
  9170  000C2A  0EFC               	movlw	high _nanoAddr
  9171  000C2C  6EF7               	movwf	tblptrh,c
  9172  000C2E                     	endif
  9173  000C2E                     	if	1	;There are 3 active tblptr bytes
  9174  000C2E  0E00               	movlw	low (_nanoAddr shr (0+16))
  9175  000C30  6EF8               	movwf	tblptru,c
  9176  000C32                     	endif
  9177  000C32  0008               	tblrd		*
  9178  000C34  50F5               	movf	tablat,w,c
  9179  000C36  EC83  F015         	call	_I2C_Send
  9180  000C3A  AA80               	btfss	3968,5,c	;volatile
  9181  000C3C  0012               	return	
  9182  000C3E  D7FD               	goto	l173
  9183  000C40                     __end_of_clearing:
  9184                           	opt stack 0
  9185                           tosu	equ	0xFFF
  9186                           tosh	equ	0xFFE
  9187                           tosl	equ	0xFFD
  9188                           pclath	equ	0xFFA
  9189                           tblptru	equ	0xFF8
  9190                           tblptrh	equ	0xFF7
  9191                           tblptrl	equ	0xFF6
  9192                           tablat	equ	0xFF5
  9193                           prodh	equ	0xFF4
  9194                           prodl	equ	0xFF3
  9195                           intcon	equ	0xFF2
  9196                           indf0	equ	0xFEF
  9197                           postinc0	equ	0xFEE
  9198                           fsr0h	equ	0xFEA
  9199                           fsr0l	equ	0xFE9
  9200                           wreg	equ	0xFE8
  9201                           postdec1	equ	0xFE5
  9202                           plusw1	equ	0xFE3
  9203                           fsr1l	equ	0xFE1
  9204                           indf2	equ	0xFDF
  9205                           postinc2	equ	0xFDE
  9206                           postdec2	equ	0xFDD
  9207                           plusw2	equ	0xFDB
  9208                           fsr2h	equ	0xFDA
  9209                           fsr2l	equ	0xFD9
  9210                           status	equ	0xFD8
  9211                           
  9212 ;; *************** function _tock *****************
  9213 ;; Defined at:
  9214 ;;		line 69 in file "timer.c"
  9215 ;; Parameters:    Size  Location     Type
  9216 ;;		None
  9217 ;; Auto vars:     Size  Location     Type
  9218 ;;		None
  9219 ;; Return value:  Size  Location     Type
  9220 ;;                  3    0[BANK0 ] void 
  9221 ;; Registers used:
  9222 ;;		None
  9223 ;; Tracked objects:
  9224 ;;		On entry : 0/0
  9225 ;;		On exit  : 0/0
  9226 ;;		Unchanged: 0/0
  9227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9228 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9231 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9232 ;;Total ram usage:        3 bytes
  9233 ;; Hardware stack levels used:    1
  9234 ;; Hardware stack levels required when called:    4
  9235 ;; This function calls:
  9236 ;;		Nothing
  9237 ;; This function is called by:
  9238 ;;		_packageCompartment
  9239 ;;		_clearing
  9240 ;; This function uses a non-reentrant model
  9241 ;;
  9242                           
  9243                           	psect	text20
  9244  003356                     __ptext20:
  9245                           	opt stack 0
  9246  003356                     _tock:
  9247                           	opt stack 23
  9248                           
  9249                           ;timer.c: 74: return timeSinceLastTic;
  9250                           
  9251                           ;incstack = 0
  9252  003356  C059  F080         	movff	_timeSinceLastTic,?_tock	;volatile
  9253  00335A  C05A  F081         	movff	_timeSinceLastTic+1,?_tock+1	;volatile
  9254  00335E  C05B  F082         	movff	_timeSinceLastTic+2,?_tock+2	;volatile
  9255  003362  0012               	return		;funcret
  9256  003364                     __end_of_tock:
  9257                           	opt stack 0
  9258                           tosu	equ	0xFFF
  9259                           tosh	equ	0xFFE
  9260                           tosl	equ	0xFFD
  9261                           pclath	equ	0xFFA
  9262                           tblptru	equ	0xFF8
  9263                           tblptrh	equ	0xFF7
  9264                           tblptrl	equ	0xFF6
  9265                           tablat	equ	0xFF5
  9266                           prodh	equ	0xFF4
  9267                           prodl	equ	0xFF3
  9268                           intcon	equ	0xFF2
  9269                           indf0	equ	0xFEF
  9270                           postinc0	equ	0xFEE
  9271                           fsr0h	equ	0xFEA
  9272                           fsr0l	equ	0xFE9
  9273                           wreg	equ	0xFE8
  9274                           postdec1	equ	0xFE5
  9275                           plusw1	equ	0xFE3
  9276                           fsr1l	equ	0xFE1
  9277                           indf2	equ	0xFDF
  9278                           postinc2	equ	0xFDE
  9279                           postdec2	equ	0xFDD
  9280                           plusw2	equ	0xFDB
  9281                           fsr2h	equ	0xFDA
  9282                           fsr2l	equ	0xFD9
  9283                           status	equ	0xFD8
  9284                           
  9285 ;; *************** function _tic *****************
  9286 ;; Defined at:
  9287 ;;		line 61 in file "timer.c"
  9288 ;; Parameters:    Size  Location     Type
  9289 ;;		None
  9290 ;; Auto vars:     Size  Location     Type
  9291 ;;		None
  9292 ;; Return value:  Size  Location     Type
  9293 ;;                  1    wreg      void 
  9294 ;; Registers used:
  9295 ;;		wreg, status,2
  9296 ;; Tracked objects:
  9297 ;;		On entry : 0/0
  9298 ;;		On exit  : 0/0
  9299 ;;		Unchanged: 0/0
  9300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9304 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9305 ;;Total ram usage:        0 bytes
  9306 ;; Hardware stack levels used:    1
  9307 ;; Hardware stack levels required when called:    4
  9308 ;; This function calls:
  9309 ;;		Nothing
  9310 ;; This function is called by:
  9311 ;;		_packageCompartment
  9312 ;;		_clearing
  9313 ;; This function uses a non-reentrant model
  9314 ;;
  9315                           
  9316                           	psect	text21
  9317  003364                     __ptext21:
  9318                           	opt stack 0
  9319  003364                     _tic:
  9320                           	opt stack 23
  9321                           
  9322                           ;timer.c: 66: timeSinceLastTic = 0;
  9323                           
  9324                           ;incstack = 0
  9325  003364  0E00               	movlw	0
  9326  003366  6E59               	movwf	_timeSinceLastTic,c	;volatile
  9327  003368  0E00               	movlw	0
  9328  00336A  6E5A               	movwf	_timeSinceLastTic+1,c	;volatile
  9329  00336C  0E00               	movlw	0
  9330  00336E  6E5B               	movwf	_timeSinceLastTic+2,c	;volatile
  9331  003370  0012               	return		;funcret
  9332  003372                     __end_of_tic:
  9333                           	opt stack 0
  9334                           tosu	equ	0xFFF
  9335                           tosh	equ	0xFFE
  9336                           tosl	equ	0xFFD
  9337                           pclath	equ	0xFFA
  9338                           tblptru	equ	0xFF8
  9339                           tblptrh	equ	0xFF7
  9340                           tblptrl	equ	0xFF6
  9341                           tablat	equ	0xFF5
  9342                           prodh	equ	0xFF4
  9343                           prodl	equ	0xFF3
  9344                           intcon	equ	0xFF2
  9345                           indf0	equ	0xFEF
  9346                           postinc0	equ	0xFEE
  9347                           fsr0h	equ	0xFEA
  9348                           fsr0l	equ	0xFE9
  9349                           wreg	equ	0xFE8
  9350                           postdec1	equ	0xFE5
  9351                           plusw1	equ	0xFE3
  9352                           fsr1l	equ	0xFE1
  9353                           indf2	equ	0xFDF
  9354                           postinc2	equ	0xFDE
  9355                           postdec2	equ	0xFDD
  9356                           plusw2	equ	0xFDB
  9357                           fsr2h	equ	0xFDA
  9358                           fsr2l	equ	0xFD9
  9359                           status	equ	0xFD8
  9360                           
  9361 ;; *************** function _motorControl *****************
  9362 ;; Defined at:
  9363 ;;		line 7 in file "motors.c"
  9364 ;; Parameters:    Size  Location     Type
  9365 ;;  motor           1    wreg     enum E2968
  9366 ;;  dir             1    0[BANK0 ] enum E2974
  9367 ;; Auto vars:     Size  Location     Type
  9368 ;;  motor           1    1[BANK0 ] enum E2968
  9369 ;; Return value:  Size  Location     Type
  9370 ;;                  1    wreg      void 
  9371 ;; Registers used:
  9372 ;;		wreg, status,2, status,0
  9373 ;; Tracked objects:
  9374 ;;		On entry : 0/0
  9375 ;;		On exit  : 0/0
  9376 ;;		Unchanged: 0/0
  9377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9378 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9379 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9381 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9382 ;;Total ram usage:        2 bytes
  9383 ;; Hardware stack levels used:    1
  9384 ;; Hardware stack levels required when called:    4
  9385 ;; This function calls:
  9386 ;;		Nothing
  9387 ;; This function is called by:
  9388 ;;		_packageCompartment
  9389 ;;		_clearing
  9390 ;;		_main
  9391 ;; This function uses a non-reentrant model
  9392 ;;
  9393                           
  9394                           	psect	text22
  9395  0026CC                     __ptext22:
  9396                           	opt stack 0
  9397  0026CC                     _motorControl:
  9398                           	opt stack 26
  9399                           
  9400                           ;incstack = 0
  9401                           ;motorControl@motor stored from wreg
  9402  0026CC  0100               	movlb	0	; () banked
  9403  0026CE  6F81               	movwf	motorControl@motor& (0+255),b
  9404                           
  9405                           ;motors.c: 8: switch(motor) {
  9406  0026D0  D051               	goto	l728
  9407  0026D2                     
  9408                           ;motors.c: 10: if (dir == FORWARD) {
  9409  0026D2  0100               	movlb	0	; () banked
  9410  0026D4  5180               	movf	motorControl@dir& (0+255),w,b
  9411  0026D6  A4D8               	btfss	status,2,c
  9412  0026D8  D003               	goto	l730
  9413                           
  9414                           ; BSR set to: 0
  9415                           ;motors.c: 11: LATBbits.LATB3 = 1;
  9416  0026DA  868A               	bsf	3978,3,c	;volatile
  9417                           
  9418                           ;motors.c: 12: LATCbits.LATC0 = 0;
  9419  0026DC  908B               	bcf	3979,0,c	;volatile
  9420                           
  9421                           ;motors.c: 13: } else if (dir == REVERSE) {
  9422  0026DE  D00B               	goto	l734
  9423  0026E0                     l730:
  9424                           
  9425                           ; BSR set to: 0
  9426                           
  9427                           ; BSR set to: 0
  9428  0026E0  0580               	decf	motorControl@dir& (0+255),w,b
  9429  0026E2  A4D8               	btfss	status,2,c
  9430  0026E4  D002               	goto	l732
  9431                           
  9432                           ; BSR set to: 0
  9433                           ;motors.c: 14: LATBbits.LATB3 = 0;
  9434  0026E6  968A               	bcf	3978,3,c	;volatile
  9435  0026E8  D005               	goto	L10
  9436  0026EA                     l732:
  9437                           
  9438                           ; BSR set to: 0
  9439                           
  9440                           ; BSR set to: 0
  9441  0026EA  0E02               	movlw	2
  9442  0026EC  1980               	xorwf	motorControl@dir& (0+255),w,b
  9443  0026EE  A4D8               	btfss	status,2,c
  9444  0026F0  D002               	goto	l734
  9445                           
  9446                           ; BSR set to: 0
  9447                           ;motors.c: 17: LATBbits.LATB3 = 1;
  9448  0026F2  868A               	bsf	3978,3,c	;volatile
  9449  0026F4                     L10:
  9450                           
  9451                           ;motors.c: 18: LATCbits.LATC0 = 1;
  9452  0026F4  808B               	bsf	3979,0,c	;volatile
  9453  0026F6                     l734:
  9454                           
  9455                           ; BSR set to: 0
  9456                           ;motors.c: 19: }
  9457                           ;motors.c: 20: currentMotorDir.s = dir;
  9458                           
  9459                           ; BSR set to: 0
  9460                           
  9461                           ; BSR set to: 0
  9462  0026F6  C080  F057         	movff	motorControl@dir,_currentMotorDir+2
  9463                           
  9464                           ;motors.c: 21: break;
  9465  0026FA  0012               	return	
  9466  0026FC                     
  9467                           ; BSR set to: 0
  9468                           ;motors.c: 23: if (dir == FORWARD) {
  9469                           
  9470                           ; BSR set to: 0
  9471  0026FC  5180               	movf	motorControl@dir& (0+255),w,b
  9472  0026FE  A4D8               	btfss	status,2,c
  9473  002700  D003               	goto	l737
  9474                           
  9475                           ; BSR set to: 0
  9476                           ;motors.c: 24: LATCbits.LATC1 = 1;
  9477  002702  828B               	bsf	3979,1,c	;volatile
  9478                           
  9479                           ;motors.c: 25: LATCbits.LATC2 = 0;
  9480  002704  948B               	bcf	3979,2,c	;volatile
  9481                           
  9482                           ;motors.c: 26: } else if (dir == REVERSE) {
  9483  002706  D00B               	goto	l741
  9484  002708                     l737:
  9485                           
  9486                           ; BSR set to: 0
  9487                           
  9488                           ; BSR set to: 0
  9489  002708  0580               	decf	motorControl@dir& (0+255),w,b
  9490  00270A  A4D8               	btfss	status,2,c
  9491  00270C  D002               	goto	l739
  9492                           
  9493                           ; BSR set to: 0
  9494                           ;motors.c: 27: LATCbits.LATC1 = 0;
  9495  00270E  928B               	bcf	3979,1,c	;volatile
  9496  002710  D005               	goto	L11
  9497  002712                     l739:
  9498                           
  9499                           ; BSR set to: 0
  9500                           
  9501                           ; BSR set to: 0
  9502  002712  0E02               	movlw	2
  9503  002714  1980               	xorwf	motorControl@dir& (0+255),w,b
  9504  002716  A4D8               	btfss	status,2,c
  9505  002718  D002               	goto	l741
  9506                           
  9507                           ; BSR set to: 0
  9508                           ;motors.c: 30: LATCbits.LATC1 = 1;
  9509  00271A  828B               	bsf	3979,1,c	;volatile
  9510  00271C                     L11:
  9511                           
  9512                           ;motors.c: 31: LATCbits.LATC2 = 1;
  9513  00271C  848B               	bsf	3979,2,c	;volatile
  9514  00271E                     l741:
  9515                           
  9516                           ; BSR set to: 0
  9517                           ;motors.c: 32: }
  9518                           ;motors.c: 33: currentMotorDir.n = dir;
  9519                           
  9520                           ; BSR set to: 0
  9521                           
  9522                           ; BSR set to: 0
  9523  00271E  C080  F056         	movff	motorControl@dir,_currentMotorDir+1
  9524                           
  9525                           ;motors.c: 34: break;
  9526  002722  0012               	return	
  9527  002724                     
  9528                           ; BSR set to: 0
  9529                           ;motors.c: 36: if (dir == FORWARD) {
  9530                           
  9531                           ; BSR set to: 0
  9532  002724  5180               	movf	motorControl@dir& (0+255),w,b
  9533  002726  A4D8               	btfss	status,2,c
  9534  002728  D003               	goto	l743
  9535                           
  9536                           ; BSR set to: 0
  9537                           ;motors.c: 37: LATCbits.LATC5 = 1;
  9538  00272A  8A8B               	bsf	3979,5,c	;volatile
  9539                           
  9540                           ;motors.c: 38: LATCbits.LATC6 = 0;
  9541  00272C  9C8B               	bcf	3979,6,c	;volatile
  9542                           
  9543                           ;motors.c: 39: } else if (dir == REVERSE) {
  9544  00272E  D00B               	goto	l747
  9545  002730                     l743:
  9546                           
  9547                           ; BSR set to: 0
  9548                           
  9549                           ; BSR set to: 0
  9550  002730  0580               	decf	motorControl@dir& (0+255),w,b
  9551  002732  A4D8               	btfss	status,2,c
  9552  002734  D002               	goto	l745
  9553                           
  9554                           ; BSR set to: 0
  9555                           ;motors.c: 40: LATCbits.LATC5 = 0;
  9556  002736  9A8B               	bcf	3979,5,c	;volatile
  9557  002738  D005               	goto	L12
  9558  00273A                     l745:
  9559                           
  9560                           ; BSR set to: 0
  9561                           
  9562                           ; BSR set to: 0
  9563  00273A  0E02               	movlw	2
  9564  00273C  1980               	xorwf	motorControl@dir& (0+255),w,b
  9565  00273E  A4D8               	btfss	status,2,c
  9566  002740  D002               	goto	l747
  9567                           
  9568                           ; BSR set to: 0
  9569                           ;motors.c: 43: LATCbits.LATC5 = 1;
  9570  002742  8A8B               	bsf	3979,5,c	;volatile
  9571  002744                     L12:
  9572                           
  9573                           ;motors.c: 44: LATCbits.LATC6 = 1;
  9574  002744  8C8B               	bsf	3979,6,c	;volatile
  9575  002746                     l747:
  9576                           
  9577                           ; BSR set to: 0
  9578                           ;motors.c: 45: }
  9579                           ;motors.c: 46: currentMotorDir.w = dir;
  9580                           
  9581                           ; BSR set to: 0
  9582                           
  9583                           ; BSR set to: 0
  9584  002746  C080  F058         	movff	motorControl@dir,_currentMotorDir+3
  9585                           
  9586                           ;motors.c: 47: break;
  9587  00274A  0012               	return	
  9588  00274C                     
  9589                           ; BSR set to: 0
  9590                           ;motors.c: 49: if (dir == FORWARD) {
  9591                           
  9592                           ; BSR set to: 0
  9593  00274C  5180               	movf	motorControl@dir& (0+255),w,b
  9594  00274E  A4D8               	btfss	status,2,c
  9595  002750  D003               	goto	l749
  9596                           
  9597                           ; BSR set to: 0
  9598                           ;motors.c: 50: LATCbits.LATC7 = 1;
  9599  002752  8E8B               	bsf	3979,7,c	;volatile
  9600                           
  9601                           ;motors.c: 51: LATEbits.LATE0 = 0;
  9602  002754  908D               	bcf	3981,0,c	;volatile
  9603                           
  9604                           ;motors.c: 52: } else if (dir == REVERSE) {
  9605  002756  D00B               	goto	l753
  9606  002758                     l749:
  9607                           
  9608                           ; BSR set to: 0
  9609                           
  9610                           ; BSR set to: 0
  9611  002758  0580               	decf	motorControl@dir& (0+255),w,b
  9612  00275A  A4D8               	btfss	status,2,c
  9613  00275C  D002               	goto	l751
  9614                           
  9615                           ; BSR set to: 0
  9616                           ;motors.c: 53: LATCbits.LATC7 = 0;
  9617  00275E  9E8B               	bcf	3979,7,c	;volatile
  9618  002760  D005               	goto	L13
  9619  002762                     l751:
  9620                           
  9621                           ; BSR set to: 0
  9622                           
  9623                           ; BSR set to: 0
  9624  002762  0E02               	movlw	2
  9625  002764  1980               	xorwf	motorControl@dir& (0+255),w,b
  9626  002766  A4D8               	btfss	status,2,c
  9627  002768  D002               	goto	l753
  9628                           
  9629                           ; BSR set to: 0
  9630                           ;motors.c: 56: LATCbits.LATC7 = 1;
  9631  00276A  8E8B               	bsf	3979,7,c	;volatile
  9632  00276C                     L13:
  9633                           
  9634                           ;motors.c: 57: LATEbits.LATE0 = 1;
  9635  00276C  808D               	bsf	3981,0,c	;volatile
  9636  00276E                     l753:
  9637                           
  9638                           ; BSR set to: 0
  9639                           ;motors.c: 58: }
  9640                           ;motors.c: 59: currentMotorDir.b = dir;
  9641                           
  9642                           ; BSR set to: 0
  9643                           
  9644                           ; BSR set to: 0
  9645  00276E  C080  F055         	movff	motorControl@dir,_currentMotorDir
  9646                           
  9647                           ; BSR set to: 0
  9648                           ;motors.c: 63: }
  9649                           
  9650                           ; BSR set to: 0
  9651                           ;motors.c: 62: break;
  9652                           
  9653                           ;motors.c: 61: default:
  9654                           
  9655                           ;motors.c: 60: break;
  9656  002772  0012               	return	
  9657  002774                     l728:
  9658                           
  9659                           ; BSR set to: 0
  9660  002774  0100               	movlb	0	; () banked
  9661  002776  5181               	movf	motorControl@motor& (0+255),w,b
  9662                           
  9663                           ; Switch size 1, requested type "space"
  9664                           ; Number of cases is 4, Range of values is 0 to 3
  9665                           ; switch strategies available:
  9666                           ; Name         Instructions Cycles
  9667                           ; simple_byte           13     7 (average)
  9668                           ;	Chosen strategy is simple_byte
  9669  002778  0A00               	xorlw	0	; case 0
  9670  00277A  B4D8               	btfsc	status,2,c
  9671  00277C  D7E7               	goto	l748
  9672  00277E  0A01               	xorlw	1	; case 1
  9673  002780  B4D8               	btfsc	status,2,c
  9674  002782  D7BC               	goto	l736
  9675  002784  0A03               	xorlw	3	; case 2
  9676  002786  B4D8               	btfsc	status,2,c
  9677  002788  D7A4               	goto	l729
  9678  00278A  0A01               	xorlw	1	; case 3
  9679  00278C  A4D8               	btfss	status,2,c
  9680  00278E  0012               	return	
  9681  002790  D7C9               	goto	l742
  9682  002792                     __end_of_motorControl:
  9683                           	opt stack 0
  9684                           tosu	equ	0xFFF
  9685                           tosh	equ	0xFFE
  9686                           tosl	equ	0xFFD
  9687                           pclath	equ	0xFFA
  9688                           tblptru	equ	0xFF8
  9689                           tblptrh	equ	0xFF7
  9690                           tblptrl	equ	0xFF6
  9691                           tablat	equ	0xFF5
  9692                           prodh	equ	0xFF4
  9693                           prodl	equ	0xFF3
  9694                           intcon	equ	0xFF2
  9695                           indf0	equ	0xFEF
  9696                           postinc0	equ	0xFEE
  9697                           fsr0h	equ	0xFEA
  9698                           fsr0l	equ	0xFE9
  9699                           wreg	equ	0xFE8
  9700                           postdec1	equ	0xFE5
  9701                           plusw1	equ	0xFE3
  9702                           fsr1l	equ	0xFE1
  9703                           indf2	equ	0xFDF
  9704                           postinc2	equ	0xFDE
  9705                           postdec2	equ	0xFDD
  9706                           plusw2	equ	0xFDB
  9707                           fsr2h	equ	0xFDA
  9708                           fsr2l	equ	0xFD9
  9709                           status	equ	0xFD8
  9710                           
  9711 ;; *************** function ___ftge *****************
  9712 ;; Defined at:
  9713 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  9714 ;; Parameters:    Size  Location     Type
  9715 ;;  ff1             3   20[BANK0 ] float 
  9716 ;;  ff2             3   23[BANK0 ] float 
  9717 ;; Auto vars:     Size  Location     Type
  9718 ;;		None
  9719 ;; Return value:  Size  Location     Type
  9720 ;;		None               void
  9721 ;; Registers used:
  9722 ;;		wreg, status,2, status,0
  9723 ;; Tracked objects:
  9724 ;;		On entry : 0/0
  9725 ;;		On exit  : 0/0
  9726 ;;		Unchanged: 0/0
  9727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9728 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9730 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9731 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9732 ;;Total ram usage:        9 bytes
  9733 ;; Hardware stack levels used:    1
  9734 ;; Hardware stack levels required when called:    4
  9735 ;; This function calls:
  9736 ;;		Nothing
  9737 ;; This function is called by:
  9738 ;;		_packageCompartment
  9739 ;;		_clearing
  9740 ;; This function uses a non-reentrant model
  9741 ;;
  9742                           
  9743                           	psect	text23
  9744  002BA6                     __ptext23:
  9745                           	opt stack 0
  9746  002BA6                     ___ftge:
  9747                           	opt stack 23
  9748                           
  9749                           ; BSR set to: 0
  9750                           ;incstack = 0
  9751  002BA6  0100               	movlb	0	; () banked
  9752  002BA8  AF96               	btfss	(___ftge@ff1+2)& (0+255),7,b
  9753  002BAA  D016               	goto	l1088
  9754                           
  9755                           ; BSR set to: 0
  9756  002BAC  C094  F09A         	movff	___ftge@ff1,??___ftge
  9757  002BB0  C095  F09B         	movff	___ftge@ff1+1,??___ftge+1
  9758  002BB4  C096  F09C         	movff	___ftge@ff1+2,??___ftge+2
  9759  002BB8  1F9A               	comf	??___ftge& (0+255),f,b
  9760  002BBA  1F9B               	comf	(??___ftge+1)& (0+255),f,b
  9761  002BBC  1F9C               	comf	(??___ftge+2)& (0+255),f,b
  9762  002BBE  2B9A               	incf	??___ftge& (0+255),f,b
  9763  002BC0  0E00               	movlw	0
  9764  002BC2  239B               	addwfc	(??___ftge+1)& (0+255),f,b
  9765  002BC4  239C               	addwfc	(??___ftge+2)& (0+255),f,b
  9766  002BC6  0E00               	movlw	0
  9767  002BC8  259A               	addwf	??___ftge& (0+255),w,b
  9768  002BCA  6F94               	movwf	___ftge@ff1& (0+255),b
  9769  002BCC  0E00               	movlw	0
  9770  002BCE  219B               	addwfc	(??___ftge+1)& (0+255),w,b
  9771  002BD0  6F95               	movwf	(___ftge@ff1+1)& (0+255),b
  9772  002BD2  0E80               	movlw	128
  9773  002BD4  219C               	addwfc	(??___ftge+2)& (0+255),w,b
  9774  002BD6  6F96               	movwf	(___ftge@ff1+2)& (0+255),b
  9775  002BD8                     l1088:
  9776                           
  9777                           ; BSR set to: 0
  9778                           
  9779                           ; BSR set to: 0
  9780  002BD8  AF99               	btfss	(___ftge@ff2+2)& (0+255),7,b
  9781  002BDA  D016               	goto	l1089
  9782                           
  9783                           ; BSR set to: 0
  9784  002BDC  C097  F09A         	movff	___ftge@ff2,??___ftge
  9785  002BE0  C098  F09B         	movff	___ftge@ff2+1,??___ftge+1
  9786  002BE4  C099  F09C         	movff	___ftge@ff2+2,??___ftge+2
  9787  002BE8  1F9A               	comf	??___ftge& (0+255),f,b
  9788  002BEA  1F9B               	comf	(??___ftge+1)& (0+255),f,b
  9789  002BEC  1F9C               	comf	(??___ftge+2)& (0+255),f,b
  9790  002BEE  2B9A               	incf	??___ftge& (0+255),f,b
  9791  002BF0  0E00               	movlw	0
  9792  002BF2  239B               	addwfc	(??___ftge+1)& (0+255),f,b
  9793  002BF4  239C               	addwfc	(??___ftge+2)& (0+255),f,b
  9794  002BF6  0E00               	movlw	0
  9795  002BF8  259A               	addwf	??___ftge& (0+255),w,b
  9796  002BFA  6F97               	movwf	___ftge@ff2& (0+255),b
  9797  002BFC  0E00               	movlw	0
  9798  002BFE  219B               	addwfc	(??___ftge+1)& (0+255),w,b
  9799  002C00  6F98               	movwf	(___ftge@ff2+1)& (0+255),b
  9800  002C02  0E80               	movlw	128
  9801  002C04  219C               	addwfc	(??___ftge+2)& (0+255),w,b
  9802  002C06  6F99               	movwf	(___ftge@ff2+2)& (0+255),b
  9803  002C08                     l1089:
  9804                           
  9805                           ; BSR set to: 0
  9806                           
  9807                           ; BSR set to: 0
  9808  002C08  0E00               	movlw	0
  9809  002C0A  1B94               	xorwf	___ftge@ff1& (0+255),f,b
  9810  002C0C  0E00               	movlw	0
  9811  002C0E  1B95               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  9812  002C10  0E80               	movlw	128
  9813  002C12  1B96               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  9814                           
  9815                           ; BSR set to: 0
  9816  002C14  0E00               	movlw	0
  9817  002C16  1B97               	xorwf	___ftge@ff2& (0+255),f,b
  9818  002C18  0E00               	movlw	0
  9819  002C1A  1B98               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  9820  002C1C  0E80               	movlw	128
  9821  002C1E  1B99               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  9822  002C20  5197               	movf	___ftge@ff2& (0+255),w,b
  9823  002C22  5D94               	subwf	___ftge@ff1& (0+255),w,b
  9824  002C24  5198               	movf	(___ftge@ff2+1)& (0+255),w,b
  9825  002C26  5995               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  9826  002C28  5199               	movf	(___ftge@ff2+2)& (0+255),w,b
  9827  002C2A  5996               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  9828  002C2C  B0D8               	btfsc	status,0,c
  9829  002C2E  D002               	goto	l4803
  9830                           
  9831                           ; BSR set to: 0
  9832  002C30  90D8               	bcf	status,0,c
  9833  002C32  0012               	return	
  9834  002C34                     l4803:
  9835                           
  9836                           ; BSR set to: 0
  9837                           
  9838                           ; BSR set to: 0
  9839  002C34  80D8               	bsf	status,0,c
  9840                           
  9841                           ; BSR set to: 0
  9842  002C36  0012               	return	
  9843  002C38                     __end_of___ftge:
  9844                           	opt stack 0
  9845                           tosu	equ	0xFFF
  9846                           tosh	equ	0xFFE
  9847                           tosl	equ	0xFFD
  9848                           pclath	equ	0xFFA
  9849                           tblptru	equ	0xFF8
  9850                           tblptrh	equ	0xFF7
  9851                           tblptrl	equ	0xFF6
  9852                           tablat	equ	0xFF5
  9853                           prodh	equ	0xFF4
  9854                           prodl	equ	0xFF3
  9855                           intcon	equ	0xFF2
  9856                           indf0	equ	0xFEF
  9857                           postinc0	equ	0xFEE
  9858                           fsr0h	equ	0xFEA
  9859                           fsr0l	equ	0xFE9
  9860                           wreg	equ	0xFE8
  9861                           postdec1	equ	0xFE5
  9862                           plusw1	equ	0xFE3
  9863                           fsr1l	equ	0xFE1
  9864                           indf2	equ	0xFDF
  9865                           postinc2	equ	0xFDE
  9866                           postdec2	equ	0xFDD
  9867                           plusw2	equ	0xFDB
  9868                           fsr2h	equ	0xFDA
  9869                           fsr2l	equ	0xFD9
  9870                           status	equ	0xFD8
  9871                           
  9872 ;; *************** function ___ftadd *****************
  9873 ;; Defined at:
  9874 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  9875 ;; Parameters:    Size  Location     Type
  9876 ;;  f1              3    8[BANK0 ] float 
  9877 ;;  f2              3   11[BANK0 ] float 
  9878 ;; Auto vars:     Size  Location     Type
  9879 ;;  exp1            1   19[BANK0 ] unsigned char 
  9880 ;;  exp2            1   18[BANK0 ] unsigned char 
  9881 ;;  sign            1   17[BANK0 ] unsigned char 
  9882 ;; Return value:  Size  Location     Type
  9883 ;;                  3    8[BANK0 ] float 
  9884 ;; Registers used:
  9885 ;;		wreg, status,2, status,0, cstack
  9886 ;; Tracked objects:
  9887 ;;		On entry : 0/0
  9888 ;;		On exit  : 0/0
  9889 ;;		Unchanged: 0/0
  9890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9891 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9892 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9893 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9894 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9895 ;;Total ram usage:       12 bytes
  9896 ;; Hardware stack levels used:    1
  9897 ;; Hardware stack levels required when called:    5
  9898 ;; This function calls:
  9899 ;;		___ftpack
  9900 ;; This function is called by:
  9901 ;;		_packageCompartment
  9902 ;;		_clearing
  9903 ;; This function uses a non-reentrant model
  9904 ;;
  9905                           
  9906                           	psect	text24
  9907  002242                     __ptext24:
  9908                           	opt stack 0
  9909  002242                     ___ftadd:
  9910                           	opt stack 22
  9911                           
  9912                           ; BSR set to: 0
  9913                           ;incstack = 0
  9914  002242  C08A  F08E         	movff	___ftadd@f1+2,??___ftadd
  9915  002246  0100               	movlb	0	; () banked
  9916  002248  6B8F               	clrf	(??___ftadd+1)& (0+255),b
  9917  00224A  6B90               	clrf	(??___ftadd+2)& (0+255),b
  9918  00224C  3589               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  9919  00224E  378E               	rlcf	??___ftadd& (0+255),f,b
  9920  002250  E301               	bnc	u6371
  9921  002252  818F               	bsf	(??___ftadd+1)& (0+255),0,b
  9922  002254                     u6371:
  9923  002254  518E               	movf	??___ftadd& (0+255),w,b
  9924  002256  6F93               	movwf	___ftadd@exp1& (0+255),b
  9925  002258  C08D  F08E         	movff	___ftadd@f2+2,??___ftadd
  9926  00225C  6B8F               	clrf	(??___ftadd+1)& (0+255),b
  9927  00225E  6B90               	clrf	(??___ftadd+2)& (0+255),b
  9928  002260  358C               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  9929  002262  378E               	rlcf	??___ftadd& (0+255),f,b
  9930  002264  E301               	bnc	u6381
  9931  002266  818F               	bsf	(??___ftadd+1)& (0+255),0,b
  9932  002268                     u6381:
  9933  002268  518E               	movf	??___ftadd& (0+255),w,b
  9934  00226A  6F92               	movwf	___ftadd@exp2& (0+255),b
  9935                           
  9936                           ; BSR set to: 0
  9937  00226C  5193               	movf	___ftadd@exp1& (0+255),w,b
  9938  00226E  B4D8               	btfsc	status,2,c
  9939  002270  D00B               	goto	u6410
  9940                           
  9941                           ; BSR set to: 0
  9942  002272  5192               	movf	___ftadd@exp2& (0+255),w,b
  9943  002274  5D93               	subwf	___ftadd@exp1& (0+255),w,b
  9944  002276  B0D8               	btfsc	status,0,c
  9945  002278  D00E               	goto	l1047
  9946                           
  9947                           ; BSR set to: 0
  9948  00227A  5193               	movf	___ftadd@exp1& (0+255),w,b
  9949  00227C  0800               	sublw	0
  9950  00227E  2592               	addwf	___ftadd@exp2& (0+255),w,b
  9951  002280  6F8E               	movwf	??___ftadd& (0+255),b
  9952  002282  0E18               	movlw	24
  9953  002284  658E               	cpfsgt	??___ftadd& (0+255),b
  9954  002286  D007               	goto	l1047
  9955  002288                     u6410:
  9956                           
  9957                           ; BSR set to: 0
  9958  002288  C08B  F088         	movff	___ftadd@f2,?___ftadd
  9959  00228C  C08C  F089         	movff	___ftadd@f2+1,?___ftadd+1
  9960  002290  C08D  F08A         	movff	___ftadd@f2+2,?___ftadd+2
  9961  002294  0012               	return	
  9962  002296                     l1047:
  9963                           
  9964                           ; BSR set to: 0
  9965                           
  9966                           ; BSR set to: 0
  9967  002296  5192               	movf	___ftadd@exp2& (0+255),w,b
  9968  002298  B4D8               	btfsc	status,2,c
  9969  00229A  D00B               	goto	u6440
  9970                           
  9971                           ; BSR set to: 0
  9972  00229C  5193               	movf	___ftadd@exp1& (0+255),w,b
  9973  00229E  5D92               	subwf	___ftadd@exp2& (0+255),w,b
  9974  0022A0  B0D8               	btfsc	status,0,c
  9975  0022A2  D00E               	goto	l1051
  9976                           
  9977                           ; BSR set to: 0
  9978  0022A4  5192               	movf	___ftadd@exp2& (0+255),w,b
  9979  0022A6  0800               	sublw	0
  9980  0022A8  2593               	addwf	___ftadd@exp1& (0+255),w,b
  9981  0022AA  6F8E               	movwf	??___ftadd& (0+255),b
  9982  0022AC  0E18               	movlw	24
  9983  0022AE  658E               	cpfsgt	??___ftadd& (0+255),b
  9984  0022B0  D007               	goto	l1051
  9985  0022B2                     u6440:
  9986                           
  9987                           ; BSR set to: 0
  9988  0022B2  C088  F088         	movff	___ftadd@f1,?___ftadd
  9989  0022B6  C089  F089         	movff	___ftadd@f1+1,?___ftadd+1
  9990  0022BA  C08A  F08A         	movff	___ftadd@f1+2,?___ftadd+2
  9991  0022BE  0012               	return	
  9992  0022C0                     l1051:
  9993                           
  9994                           ; BSR set to: 0
  9995                           
  9996                           ; BSR set to: 0
  9997  0022C0  0E06               	movlw	6
  9998  0022C2  6F91               	movwf	___ftadd@sign& (0+255),b
  9999                           
 10000                           ; BSR set to: 0
 10001  0022C4  BF8A               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 10002                           
 10003                           ; BSR set to: 0
 10004  0022C6  8F91               	bsf	___ftadd@sign& (0+255),7,b
 10005                           
 10006                           ; BSR set to: 0
 10007                           
 10008                           ; BSR set to: 0
 10009  0022C8  BF8D               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 10010                           
 10011                           ; BSR set to: 0
 10012  0022CA  8D91               	bsf	___ftadd@sign& (0+255),6,b
 10013                           
 10014                           ; BSR set to: 0
 10015  0022CC  8F89               	bsf	(___ftadd@f1+1)& (0+255),7,b
 10016                           
 10017                           ; BSR set to: 0
 10018  0022CE  0EFF               	movlw	255
 10019  0022D0  1788               	andwf	___ftadd@f1& (0+255),f,b
 10020  0022D2  0EFF               	movlw	255
 10021  0022D4  1789               	andwf	(___ftadd@f1+1)& (0+255),f,b
 10022  0022D6  0E00               	movlw	0
 10023  0022D8  178A               	andwf	(___ftadd@f1+2)& (0+255),f,b
 10024  0022DA  8F8C               	bsf	(___ftadd@f2+1)& (0+255),7,b
 10025                           
 10026                           ; BSR set to: 0
 10027  0022DC  0EFF               	movlw	255
 10028  0022DE  178B               	andwf	___ftadd@f2& (0+255),f,b
 10029  0022E0  0EFF               	movlw	255
 10030  0022E2  178C               	andwf	(___ftadd@f2+1)& (0+255),f,b
 10031  0022E4  0E00               	movlw	0
 10032  0022E6  178D               	andwf	(___ftadd@f2+2)& (0+255),f,b
 10033                           
 10034                           ; BSR set to: 0
 10035  0022E8  5192               	movf	___ftadd@exp2& (0+255),w,b
 10036  0022EA  5D93               	subwf	___ftadd@exp1& (0+255),w,b
 10037  0022EC  B0D8               	btfsc	status,0,c
 10038  0022EE  D01B               	goto	l1056
 10039  0022F0                     u6470:
 10040                           
 10041                           ; BSR set to: 0
 10042                           
 10043                           ; BSR set to: 0
 10044  0022F0  90D8               	bcf	status,0,c
 10045  0022F2  378B               	rlcf	___ftadd@f2& (0+255),f,b
 10046  0022F4  378C               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 10047  0022F6  378D               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 10048  0022F8  0792               	decf	___ftadd@exp2& (0+255),f,b
 10049                           
 10050                           ; BSR set to: 0
 10051  0022FA  5193               	movf	___ftadd@exp1& (0+255),w,b
 10052  0022FC  1992               	xorwf	___ftadd@exp2& (0+255),w,b
 10053  0022FE  B4D8               	btfsc	status,2,c
 10054  002300  D00D               	goto	l1061
 10055                           
 10056                           ; BSR set to: 0
 10057  002302  0791               	decf	___ftadd@sign& (0+255),f,b
 10058  002304  C091  F08E         	movff	___ftadd@sign,??___ftadd
 10059  002308  0E07               	movlw	7
 10060  00230A  178E               	andwf	??___ftadd& (0+255),f,b
 10061  00230C  B4D8               	btfsc	status,2,c
 10062  00230E  D006               	goto	l1061
 10063  002310  D7EF               	goto	u6470
 10064  002312                     
 10065                           ; BSR set to: 0
 10066                           
 10067                           ; BSR set to: 0
 10068  002312  90D8               	bcf	status,0,c
 10069  002314  338A               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 10070  002316  3389               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 10071  002318  3388               	rrcf	___ftadd@f1& (0+255),f,b
 10072  00231A  2B93               	incf	___ftadd@exp1& (0+255),f,b
 10073  00231C                     l1061:
 10074                           
 10075                           ; BSR set to: 0
 10076                           
 10077                           ; BSR set to: 0
 10078  00231C  5192               	movf	___ftadd@exp2& (0+255),w,b
 10079  00231E  1993               	xorwf	___ftadd@exp1& (0+255),w,b
 10080  002320  B4D8               	btfsc	status,2,c
 10081  002322  D01F               	goto	u6540
 10082  002324  D7F6               	goto	l1062
 10083  002326                     l1056:
 10084                           
 10085                           ; BSR set to: 0
 10086                           
 10087                           ; BSR set to: 0
 10088  002326  5193               	movf	___ftadd@exp1& (0+255),w,b
 10089  002328  5D92               	subwf	___ftadd@exp2& (0+255),w,b
 10090  00232A  B0D8               	btfsc	status,0,c
 10091  00232C  D01A               	goto	u6540
 10092  00232E                     u6510:
 10093                           
 10094                           ; BSR set to: 0
 10095                           
 10096                           ; BSR set to: 0
 10097  00232E  90D8               	bcf	status,0,c
 10098  002330  3788               	rlcf	___ftadd@f1& (0+255),f,b
 10099  002332  3789               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 10100  002334  378A               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 10101  002336  0793               	decf	___ftadd@exp1& (0+255),f,b
 10102                           
 10103                           ; BSR set to: 0
 10104  002338  5193               	movf	___ftadd@exp1& (0+255),w,b
 10105  00233A  1992               	xorwf	___ftadd@exp2& (0+255),w,b
 10106  00233C  B4D8               	btfsc	status,2,c
 10107  00233E  D00D               	goto	l1070
 10108                           
 10109                           ; BSR set to: 0
 10110  002340  0791               	decf	___ftadd@sign& (0+255),f,b
 10111  002342  C091  F08E         	movff	___ftadd@sign,??___ftadd
 10112  002346  0E07               	movlw	7
 10113  002348  178E               	andwf	??___ftadd& (0+255),f,b
 10114  00234A  B4D8               	btfsc	status,2,c
 10115  00234C  D006               	goto	l1070
 10116  00234E  D7EF               	goto	u6510
 10117  002350                     
 10118                           ; BSR set to: 0
 10119                           
 10120                           ; BSR set to: 0
 10121  002350  90D8               	bcf	status,0,c
 10122  002352  338D               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 10123  002354  338C               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 10124  002356  338B               	rrcf	___ftadd@f2& (0+255),f,b
 10125  002358  2B92               	incf	___ftadd@exp2& (0+255),f,b
 10126  00235A                     l1070:
 10127                           
 10128                           ; BSR set to: 0
 10129                           
 10130                           ; BSR set to: 0
 10131  00235A  5192               	movf	___ftadd@exp2& (0+255),w,b
 10132  00235C  1993               	xorwf	___ftadd@exp1& (0+255),w,b
 10133  00235E  A4D8               	btfss	status,2,c
 10134  002360  D7F7               	goto	l1071
 10135  002362                     u6540:
 10136                           
 10137                           ; BSR set to: 0
 10138                           
 10139                           ; BSR set to: 0
 10140                           
 10141                           ; BSR set to: 0
 10142  002362  AF91               	btfss	___ftadd@sign& (0+255),7,b
 10143  002364  D00C               	goto	l1073
 10144                           
 10145                           ; BSR set to: 0
 10146  002366  0EFF               	movlw	255
 10147  002368  1B88               	xorwf	___ftadd@f1& (0+255),f,b
 10148  00236A  0EFF               	movlw	255
 10149  00236C  1B89               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 10150  00236E  0EFF               	movlw	255
 10151  002370  1B8A               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 10152  002372  0E01               	movlw	1
 10153  002374  2788               	addwf	___ftadd@f1& (0+255),f,b
 10154  002376  0E00               	movlw	0
 10155  002378  2389               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 10156  00237A  0E00               	movlw	0
 10157  00237C  238A               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 10158  00237E                     l1073:
 10159                           
 10160                           ; BSR set to: 0
 10161  00237E  AD91               	btfss	___ftadd@sign& (0+255),6,b
 10162  002380  D00C               	goto	l1074
 10163                           
 10164                           ; BSR set to: 0
 10165  002382  0EFF               	movlw	255
 10166  002384  1B8B               	xorwf	___ftadd@f2& (0+255),f,b
 10167  002386  0EFF               	movlw	255
 10168  002388  1B8C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10169  00238A  0EFF               	movlw	255
 10170  00238C  1B8D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10171  00238E  0E01               	movlw	1
 10172  002390  278B               	addwf	___ftadd@f2& (0+255),f,b
 10173  002392  0E00               	movlw	0
 10174  002394  238C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10175  002396  0E00               	movlw	0
 10176  002398  238D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10177  00239A                     l1074:
 10178                           
 10179                           ; BSR set to: 0
 10180                           
 10181                           ; BSR set to: 0
 10182  00239A  0E00               	movlw	0
 10183  00239C  6F91               	movwf	___ftadd@sign& (0+255),b
 10184                           
 10185                           ; BSR set to: 0
 10186  00239E  5188               	movf	___ftadd@f1& (0+255),w,b
 10187  0023A0  278B               	addwf	___ftadd@f2& (0+255),f,b
 10188  0023A2  5189               	movf	(___ftadd@f1+1)& (0+255),w,b
 10189  0023A4  238C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10190  0023A6  518A               	movf	(___ftadd@f1+2)& (0+255),w,b
 10191  0023A8  238D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10192                           
 10193                           ; BSR set to: 0
 10194  0023AA  AF8D               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10195  0023AC  D00E               	goto	l1075
 10196                           
 10197                           ; BSR set to: 0
 10198  0023AE  0EFF               	movlw	255
 10199  0023B0  1B8B               	xorwf	___ftadd@f2& (0+255),f,b
 10200  0023B2  0EFF               	movlw	255
 10201  0023B4  1B8C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10202  0023B6  0EFF               	movlw	255
 10203  0023B8  1B8D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10204  0023BA  0E01               	movlw	1
 10205  0023BC  278B               	addwf	___ftadd@f2& (0+255),f,b
 10206  0023BE  0E00               	movlw	0
 10207  0023C0  238C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10208  0023C2  0E00               	movlw	0
 10209  0023C4  238D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10210                           
 10211                           ; BSR set to: 0
 10212  0023C6  0E01               	movlw	1
 10213  0023C8  6F91               	movwf	___ftadd@sign& (0+255),b
 10214  0023CA                     l1075:
 10215                           
 10216                           ; BSR set to: 0
 10217                           
 10218                           ; BSR set to: 0
 10219  0023CA  C08B  F080         	movff	___ftadd@f2,___ftpack@arg
 10220  0023CE  C08C  F081         	movff	___ftadd@f2+1,___ftpack@arg+1
 10221  0023D2  C08D  F082         	movff	___ftadd@f2+2,___ftpack@arg+2
 10222  0023D6  C093  F083         	movff	___ftadd@exp1,___ftpack@exp
 10223  0023DA  C091  F084         	movff	___ftadd@sign,___ftpack@sign
 10224  0023DE  EC83  F014         	call	___ftpack	;wreg free
 10225  0023E2  C080  F088         	movff	?___ftpack,?___ftadd
 10226  0023E6  C081  F089         	movff	?___ftpack+1,?___ftadd+1
 10227  0023EA  C082  F08A         	movff	?___ftpack+2,?___ftadd+2
 10228  0023EE  0012               	return	
 10229  0023F0                     __end_of___ftadd:
 10230                           	opt stack 0
 10231                           tosu	equ	0xFFF
 10232                           tosh	equ	0xFFE
 10233                           tosl	equ	0xFFD
 10234                           pclath	equ	0xFFA
 10235                           tblptru	equ	0xFF8
 10236                           tblptrh	equ	0xFF7
 10237                           tblptrl	equ	0xFF6
 10238                           tablat	equ	0xFF5
 10239                           prodh	equ	0xFF4
 10240                           prodl	equ	0xFF3
 10241                           intcon	equ	0xFF2
 10242                           indf0	equ	0xFEF
 10243                           postinc0	equ	0xFEE
 10244                           fsr0h	equ	0xFEA
 10245                           fsr0l	equ	0xFE9
 10246                           wreg	equ	0xFE8
 10247                           postdec1	equ	0xFE5
 10248                           plusw1	equ	0xFE3
 10249                           fsr1l	equ	0xFE1
 10250                           indf2	equ	0xFDF
 10251                           postinc2	equ	0xFDE
 10252                           postdec2	equ	0xFDD
 10253                           plusw2	equ	0xFDB
 10254                           fsr2h	equ	0xFDA
 10255                           fsr2l	equ	0xFD9
 10256                           status	equ	0xFD8
 10257                           
 10258 ;; *************** function ___ftpack *****************
 10259 ;; Defined at:
 10260 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 10261 ;; Parameters:    Size  Location     Type
 10262 ;;  arg             3    0[BANK0 ] unsigned um
 10263 ;;  exp             1    3[BANK0 ] unsigned char 
 10264 ;;  sign            1    4[BANK0 ] unsigned char 
 10265 ;; Auto vars:     Size  Location     Type
 10266 ;;		None
 10267 ;; Return value:  Size  Location     Type
 10268 ;;                  3    0[BANK0 ] float 
 10269 ;; Registers used:
 10270 ;;		wreg, status,2, status,0
 10271 ;; Tracked objects:
 10272 ;;		On entry : 0/0
 10273 ;;		On exit  : 0/0
 10274 ;;		Unchanged: 0/0
 10275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10276 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10278 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10279 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10280 ;;Total ram usage:        8 bytes
 10281 ;; Hardware stack levels used:    1
 10282 ;; Hardware stack levels required when called:    4
 10283 ;; This function calls:
 10284 ;;		Nothing
 10285 ;; This function is called by:
 10286 ;;		___ftadd
 10287 ;; This function uses a non-reentrant model
 10288 ;;
 10289                           
 10290                           	psect	text25
 10291  002906                     __ptext25:
 10292                           	opt stack 0
 10293  002906                     ___ftpack:
 10294                           	opt stack 22
 10295                           
 10296                           ;incstack = 0
 10297  002906  0100               	movlb	0	; () banked
 10298  002908  5183               	movf	___ftpack@exp& (0+255),w,b
 10299  00290A  B4D8               	btfsc	status,2,c
 10300  00290C  D005               	goto	u5610
 10301                           
 10302                           ; BSR set to: 0
 10303  00290E  5180               	movf	___ftpack@arg& (0+255),w,b
 10304  002910  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 10305  002912  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 10306  002914  A4D8               	btfss	status,2,c
 10307  002916  D00C               	goto	l1016
 10308  002918                     u5610:
 10309                           
 10310                           ; BSR set to: 0
 10311                           
 10312                           ; BSR set to: 0
 10313  002918  0E00               	movlw	0
 10314  00291A  6F80               	movwf	?___ftpack& (0+255),b
 10315  00291C  0E00               	movlw	0
 10316  00291E  6F81               	movwf	(?___ftpack+1)& (0+255),b
 10317  002920  0E00               	movlw	0
 10318  002922  6F82               	movwf	(?___ftpack+2)& (0+255),b
 10319                           
 10320                           ; BSR set to: 0
 10321  002924  0012               	return	
 10322  002926                     
 10323                           ; BSR set to: 0
 10324                           
 10325                           ; BSR set to: 0
 10326  002926  2B83               	incf	___ftpack@exp& (0+255),f,b
 10327  002928  90D8               	bcf	status,0,c
 10328  00292A  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 10329  00292C  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 10330  00292E  3380               	rrcf	___ftpack@arg& (0+255),f,b
 10331  002930                     l1016:
 10332                           
 10333                           ; BSR set to: 0
 10334                           
 10335                           ; BSR set to: 0
 10336  002930  0E00               	movlw	0
 10337  002932  1580               	andwf	___ftpack@arg& (0+255),w,b
 10338  002934  6F85               	movwf	??___ftpack& (0+255),b
 10339  002936  0E00               	movlw	0
 10340  002938  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
 10341  00293A  6F86               	movwf	(??___ftpack+1)& (0+255),b
 10342  00293C  0EFE               	movlw	254
 10343  00293E  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
 10344  002940  6F87               	movwf	(??___ftpack+2)& (0+255),b
 10345  002942  5185               	movf	??___ftpack& (0+255),w,b
 10346  002944  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
 10347  002946  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
 10348  002948  B4D8               	btfsc	status,2,c
 10349  00294A  D00C               	goto	l1019
 10350  00294C  D7EC               	goto	l1017
 10351  00294E                     
 10352                           ; BSR set to: 0
 10353                           
 10354                           ; BSR set to: 0
 10355  00294E  2B83               	incf	___ftpack@exp& (0+255),f,b
 10356                           
 10357                           ; BSR set to: 0
 10358  002950  0E01               	movlw	1
 10359  002952  2780               	addwf	___ftpack@arg& (0+255),f,b
 10360  002954  0E00               	movlw	0
 10361  002956  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 10362  002958  0E00               	movlw	0
 10363  00295A  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 10364  00295C  90D8               	bcf	status,0,c
 10365  00295E  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 10366  002960  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 10367  002962  3380               	rrcf	___ftpack@arg& (0+255),f,b
 10368  002964                     l1019:
 10369                           
 10370                           ; BSR set to: 0
 10371                           
 10372                           ; BSR set to: 0
 10373  002964  0E00               	movlw	0
 10374  002966  1580               	andwf	___ftpack@arg& (0+255),w,b
 10375  002968  6F85               	movwf	??___ftpack& (0+255),b
 10376  00296A  0E00               	movlw	0
 10377  00296C  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
 10378  00296E  6F86               	movwf	(??___ftpack+1)& (0+255),b
 10379  002970  0EFF               	movlw	255
 10380  002972  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
 10381  002974  6F87               	movwf	(??___ftpack+2)& (0+255),b
 10382  002976  5185               	movf	??___ftpack& (0+255),w,b
 10383  002978  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
 10384  00297A  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
 10385  00297C  B4D8               	btfsc	status,2,c
 10386  00297E  D006               	goto	l1022
 10387  002980  D7E6               	goto	l1020
 10388  002982                     
 10389                           ; BSR set to: 0
 10390                           
 10391                           ; BSR set to: 0
 10392  002982  0783               	decf	___ftpack@exp& (0+255),f,b
 10393  002984  90D8               	bcf	status,0,c
 10394  002986  3780               	rlcf	___ftpack@arg& (0+255),f,b
 10395  002988  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 10396  00298A  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 10397  00298C                     l1022:
 10398                           
 10399                           ; BSR set to: 0
 10400                           
 10401                           ; BSR set to: 0
 10402  00298C  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
 10403  00298E  D003               	goto	u5650
 10404                           
 10405                           ; BSR set to: 0
 10406  002990  0E02               	movlw	2
 10407  002992  6183               	cpfslt	___ftpack@exp& (0+255),b
 10408  002994  D7F6               	goto	l1023
 10409  002996                     u5650:
 10410                           
 10411                           ; BSR set to: 0
 10412                           
 10413                           ; BSR set to: 0
 10414  002996  A183               	btfss	___ftpack@exp& (0+255),0,b
 10415                           
 10416                           ; BSR set to: 0
 10417  002998  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
 10418                           
 10419                           ; BSR set to: 0
 10420                           
 10421                           ; BSR set to: 0
 10422  00299A  90D8               	bcf	status,0,c
 10423  00299C  3383               	rrcf	___ftpack@exp& (0+255),f,b
 10424  00299E  5183               	movf	___ftpack@exp& (0+255),w,b
 10425  0029A0  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 10426                           
 10427                           ; BSR set to: 0
 10428  0029A2  5184               	movf	___ftpack@sign& (0+255),w,b
 10429  0029A4  A4D8               	btfss	status,2,c
 10430                           
 10431                           ; BSR set to: 0
 10432  0029A6  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
 10433                           
 10434                           ; BSR set to: 0
 10435                           
 10436                           ; BSR set to: 0
 10437  0029A8  C080  F080         	movff	___ftpack@arg,?___ftpack
 10438  0029AC  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
 10439  0029B0  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
 10440  0029B4  0012               	return	
 10441  0029B6                     __end_of___ftpack:
 10442                           	opt stack 0
 10443                           tosu	equ	0xFFF
 10444                           tosh	equ	0xFFE
 10445                           tosl	equ	0xFFD
 10446                           pclath	equ	0xFFA
 10447                           tblptru	equ	0xFF8
 10448                           tblptrh	equ	0xFF7
 10449                           tblptrl	equ	0xFF6
 10450                           tablat	equ	0xFF5
 10451                           prodh	equ	0xFF4
 10452                           prodl	equ	0xFF3
 10453                           intcon	equ	0xFF2
 10454                           indf0	equ	0xFEF
 10455                           postinc0	equ	0xFEE
 10456                           fsr0h	equ	0xFEA
 10457                           fsr0l	equ	0xFE9
 10458                           wreg	equ	0xFE8
 10459                           postdec1	equ	0xFE5
 10460                           plusw1	equ	0xFE3
 10461                           fsr1l	equ	0xFE1
 10462                           indf2	equ	0xFDF
 10463                           postinc2	equ	0xFDE
 10464                           postdec2	equ	0xFDD
 10465                           plusw2	equ	0xFDB
 10466                           fsr2h	equ	0xFDA
 10467                           fsr2l	equ	0xFD9
 10468                           status	equ	0xFD8
 10469                           
 10470 ;; *************** function _I2C_Send *****************
 10471 ;; Defined at:
 10472 ;;		line 83 in file "helpers.c"
 10473 ;; Parameters:    Size  Location     Type
 10474 ;;  address         1    wreg     unsigned char 
 10475 ;;  data            2    3[BANK0 ] PTR unsigned char 
 10476 ;;		 -> STR_23(21), STR_18(14), inputEntry@msg(24), STR_17(25), 
 10477 ;;		 -> STR_14(17), STR_13(17), STR_12(14), STR_11(15), 
 10478 ;;		 -> clearing@instr(2), packaging@msg3(50), packaging@msg2(32), packaging@instr_321(2), 
 10479 ;;		 -> packaging@msg(34), packaging@instr(2), STR_7(33), packageCompartment@instr(2), 
 10480 ;;		 -> STR_6(28), STR_5(19), STR_4(17), STR_3(17), 
 10481 ;;		 -> STR_2(14), STR_1(15), 
 10482 ;; Auto vars:     Size  Location     Type
 10483 ;;  address         1    8[BANK0 ] unsigned char 
 10484 ;;  i               2    9[BANK0 ] int 
 10485 ;; Return value:  Size  Location     Type
 10486 ;;                  1    wreg      void 
 10487 ;; Registers used:
 10488 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10489 ;; Tracked objects:
 10490 ;;		On entry : 0/0
 10491 ;;		On exit  : 0/0
 10492 ;;		Unchanged: 0/0
 10493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10494 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10495 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10496 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10497 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10498 ;;Total ram usage:        8 bytes
 10499 ;; Hardware stack levels used:    1
 10500 ;; Hardware stack levels required when called:    6
 10501 ;; This function calls:
 10502 ;;		_I2C_Master_Start
 10503 ;;		_I2C_Master_Stop
 10504 ;;		_I2C_Master_Write
 10505 ;; This function is called by:
 10506 ;;		_packageCompartment
 10507 ;;		_packaging
 10508 ;;		_clearing
 10509 ;;		_inputEntry
 10510 ;;		_mainMenu
 10511 ;; This function uses a non-reentrant model
 10512 ;;
 10513                           
 10514                           	psect	text26
 10515  002B06                     __ptext26:
 10516                           	opt stack 0
 10517  002B06                     _I2C_Send:
 10518                           	opt stack 21
 10519                           
 10520                           ; BSR set to: 0
 10521                           ;incstack = 0
 10522                           ;I2C_Send@address stored from wreg
 10523  002B06  0100               	movlb	0	; () banked
 10524  002B08  6F88               	movwf	I2C_Send@address& (0+255),b
 10525                           
 10526                           ;helpers.c: 88: int i=0;
 10527  002B0A  0E00               	movlw	0
 10528  002B0C  0100               	movlb	0	; () banked
 10529  002B0E  6F8A               	movwf	(I2C_Send@i+1)& (0+255),b
 10530  002B10  0E00               	movlw	0
 10531  002B12  6F89               	movwf	I2C_Send@i& (0+255),b
 10532                           
 10533                           ; BSR set to: 0
 10534                           ;helpers.c: 90: I2C_Master_Start();
 10535  002B14  ECC2  F019         	call	_I2C_Master_Start	;wreg free
 10536                           
 10537                           ;helpers.c: 91: I2C_Master_Write(address);
 10538  002B18  C088  F081         	movff	I2C_Send@address,I2C_Master_Write@byteToWrite
 10539  002B1C  0100               	movlb	0	; () banked
 10540  002B1E  6B82               	clrf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
 10541  002B20  ECB9  F019         	call	_I2C_Master_Write	;wreg free
 10542                           
 10543                           ;helpers.c: 93: while (data[i] != 0) {
 10544  002B24  D022               	goto	l517
 10545  002B26                     
 10546                           ;helpers.c: 94: I2C_Master_Write(data[i]);
 10547  002B26  0100               	movlb	0	; () banked
 10548  002B28  5189               	movf	I2C_Send@i& (0+255),w,b
 10549  002B2A  2583               	addwf	I2C_Send@data& (0+255),w,b
 10550  002B2C  6F85               	movwf	??_I2C_Send& (0+255),b
 10551  002B2E  518A               	movf	(I2C_Send@i+1)& (0+255),w,b
 10552  002B30  2184               	addwfc	(I2C_Send@data+1)& (0+255),w,b
 10553  002B32  6F86               	movwf	(??_I2C_Send+1)& (0+255),b
 10554  002B34  C085  FFF6         	movff	??_I2C_Send,tblptrl
 10555  002B38  C086  FFF7         	movff	??_I2C_Send+1,tblptrh
 10556  002B3C  0E00               	movlw	low (__mediumconst shr (0+16))
 10557  002B3E  6EF8               	movwf	tblptru,c
 10558  002B40  0E0F               	movlw	(high __ramtop+-1)
 10559  002B42  64F7               	cpfsgt	tblptrh,c
 10560  002B44  D003               	bra	u5867
 10561  002B46  0008               	tblrd		*
 10562  002B48  50F5               	movf	tablat,w,c
 10563  002B4A  D005               	bra	u5860
 10564  002B4C                     u5867:
 10565  002B4C  CFF6 FFE9          	movff	tblptrl,fsr0l
 10566  002B50  CFF7 FFEA          	movff	tblptrh,fsr0h
 10567  002B54  50EF               	movf	indf0,w,c
 10568  002B56                     u5860:
 10569  002B56  0100               	movlb	0	; () banked
 10570  002B58  6F87               	movwf	(??_I2C_Send+2)& (0+255),b
 10571  002B5A  5187               	movf	(??_I2C_Send+2)& (0+255),w,b
 10572  002B5C  6F81               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
 10573  002B5E  6B82               	clrf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
 10574  002B60  ECB9  F019         	call	_I2C_Master_Write	;wreg free
 10575                           
 10576                           ;helpers.c: 95: i++;
 10577  002B64  0100               	movlb	0	; () banked
 10578  002B66  4B89               	infsnz	I2C_Send@i& (0+255),f,b
 10579  002B68  2B8A               	incf	(I2C_Send@i+1)& (0+255),f,b
 10580  002B6A                     l517:
 10581                           
 10582                           ; BSR set to: 0
 10583  002B6A  0100               	movlb	0	; () banked
 10584  002B6C  5189               	movf	I2C_Send@i& (0+255),w,b
 10585  002B6E  2583               	addwf	I2C_Send@data& (0+255),w,b
 10586  002B70  6F85               	movwf	??_I2C_Send& (0+255),b
 10587  002B72  518A               	movf	(I2C_Send@i+1)& (0+255),w,b
 10588  002B74  2184               	addwfc	(I2C_Send@data+1)& (0+255),w,b
 10589  002B76  6F86               	movwf	(??_I2C_Send+1)& (0+255),b
 10590  002B78  C085  FFF6         	movff	??_I2C_Send,tblptrl
 10591  002B7C  C086  FFF7         	movff	??_I2C_Send+1,tblptrh
 10592  002B80  0E00               	movlw	low (__mediumconst shr (0+16))
 10593  002B82  6EF8               	movwf	tblptru,c
 10594  002B84  0E0F               	movlw	(high __ramtop+-1)
 10595  002B86  64F7               	cpfsgt	tblptrh,c
 10596  002B88  D003               	bra	u5877
 10597  002B8A  0008               	tblrd		*
 10598  002B8C  50F5               	movf	tablat,w,c
 10599  002B8E  D005               	bra	u5870
 10600  002B90                     u5877:
 10601  002B90  CFF6 FFE9          	movff	tblptrl,fsr0l
 10602  002B94  CFF7 FFEA          	movff	tblptrh,fsr0h
 10603  002B98  50EF               	movf	indf0,w,c
 10604  002B9A                     u5870:
 10605  002B9A  0900               	iorlw	0
 10606  002B9C  A4D8               	btfss	status,2,c
 10607  002B9E  D7C3               	goto	l518
 10608                           
 10609                           ;helpers.c: 96: }
 10610                           ;helpers.c: 98: I2C_Master_Stop();
 10611  002BA0  ECBE  F019         	call	_I2C_Master_Stop	;wreg free
 10612  002BA4  0012               	return	
 10613  002BA6                     __end_of_I2C_Send:
 10614                           	opt stack 0
 10615                           tosu	equ	0xFFF
 10616                           tosh	equ	0xFFE
 10617                           tosl	equ	0xFFD
 10618                           pclath	equ	0xFFA
 10619                           tblptru	equ	0xFF8
 10620                           tblptrh	equ	0xFF7
 10621                           tblptrl	equ	0xFF6
 10622                           tablat	equ	0xFF5
 10623                           prodh	equ	0xFF4
 10624                           prodl	equ	0xFF3
 10625                           intcon	equ	0xFF2
 10626                           indf0	equ	0xFEF
 10627                           postinc0	equ	0xFEE
 10628                           fsr0h	equ	0xFEA
 10629                           fsr0l	equ	0xFE9
 10630                           wreg	equ	0xFE8
 10631                           postdec1	equ	0xFE5
 10632                           plusw1	equ	0xFE3
 10633                           fsr1l	equ	0xFE1
 10634                           indf2	equ	0xFDF
 10635                           postinc2	equ	0xFDE
 10636                           postdec2	equ	0xFDD
 10637                           plusw2	equ	0xFDB
 10638                           fsr2h	equ	0xFDA
 10639                           fsr2l	equ	0xFD9
 10640                           status	equ	0xFD8
 10641                           
 10642 ;; *************** function _RTC_startOperation *****************
 10643 ;; Defined at:
 10644 ;;		line 55 in file "RTC.c"
 10645 ;; Parameters:    Size  Location     Type
 10646 ;;		None
 10647 ;; Auto vars:     Size  Location     Type
 10648 ;;  time            7    8[BANK0 ] unsigned char [7]
 10649 ;; Return value:  Size  Location     Type
 10650 ;;                  1    wreg      void 
 10651 ;; Registers used:
 10652 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10653 ;; Tracked objects:
 10654 ;;		On entry : 0/0
 10655 ;;		On exit  : 0/0
 10656 ;;		Unchanged: 0/0
 10657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10659 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10660 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10661 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10662 ;;Total ram usage:        9 bytes
 10663 ;; Hardware stack levels used:    1
 10664 ;; Hardware stack levels required when called:    7
 10665 ;; This function calls:
 10666 ;;		_RTC_getTime
 10667 ;; This function is called by:
 10668 ;;		_mainMenu
 10669 ;; This function uses a non-reentrant model
 10670 ;;
 10671                           
 10672                           	psect	text27
 10673  002CC6                     __ptext27:
 10674                           	opt stack 0
 10675  002CC6                     _RTC_startOperation:
 10676                           	opt stack 22
 10677                           
 10678                           ;RTC.c: 57: char time[7];
 10679                           ;RTC.c: 58: RTC_getTime(time);
 10680                           
 10681                           ;incstack = 0
 10682  002CC6  0E88               	movlw	low RTC_startOperation@time
 10683  002CC8  0100               	movlb	0	; () banked
 10684  002CCA  6F83               	movwf	RTC_getTime@time& (0+255),b
 10685  002CCC  0E00               	movlw	high RTC_startOperation@time
 10686  002CCE  6F84               	movwf	(RTC_getTime@time+1)& (0+255),b
 10687  002CD0  EC29  F017         	call	_RTC_getTime	;wreg free
 10688                           
 10689                           ;RTC.c: 59: startTime.h = (time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10;
 10690  002CD4  C08A  F086         	movff	RTC_startOperation@time+2,??_RTC_startOperation
 10691  002CD8  0100               	movlb	0	; () banked
 10692  002CDA  3B86               	swapf	??_RTC_startOperation& (0+255),f,b
 10693  002CDC  0E0F               	movlw	15
 10694  002CDE  1786               	andwf	??_RTC_startOperation& (0+255),f,b
 10695  002CE0  0E0F               	movlw	15
 10696  002CE2  1786               	andwf	??_RTC_startOperation& (0+255),f,b
 10697  002CE4  5186               	movf	??_RTC_startOperation& (0+255),w,b
 10698  002CE6  0D0A               	mullw	10
 10699  002CE8  C08A  F087         	movff	RTC_startOperation@time+2,??_RTC_startOperation+1
 10700  002CEC  0E0F               	movlw	15
 10701  002CEE  1787               	andwf	(??_RTC_startOperation+1)& (0+255),f,b
 10702  002CF0  5187               	movf	(??_RTC_startOperation+1)& (0+255),w,b
 10703  002CF2  24F3               	addwf	prodl,w,c
 10704  002CF4  6E3A               	movwf	_startTime,c
 10705  002CF6  0E00               	movlw	0
 10706  002CF8  20F4               	addwfc	prodh,w,c
 10707  002CFA  6E3B               	movwf	_startTime+1,c
 10708                           
 10709                           ; BSR set to: 0
 10710                           ;RTC.c: 60: startTime.m = (time[1] & 0x0F) + ((time[1] & 0xF0)>>4)*10;
 10711  002CFC  C089  F086         	movff	RTC_startOperation@time+1,??_RTC_startOperation
 10712  002D00  3B86               	swapf	??_RTC_startOperation& (0+255),f,b
 10713  002D02  0E0F               	movlw	15
 10714  002D04  1786               	andwf	??_RTC_startOperation& (0+255),f,b
 10715  002D06  0E0F               	movlw	15
 10716  002D08  1786               	andwf	??_RTC_startOperation& (0+255),f,b
 10717  002D0A  5186               	movf	??_RTC_startOperation& (0+255),w,b
 10718  002D0C  0D0A               	mullw	10
 10719  002D0E  C089  F087         	movff	RTC_startOperation@time+1,??_RTC_startOperation+1
 10720  002D12  0E0F               	movlw	15
 10721  002D14  1787               	andwf	(??_RTC_startOperation+1)& (0+255),f,b
 10722  002D16  5187               	movf	(??_RTC_startOperation+1)& (0+255),w,b
 10723  002D18  24F3               	addwf	prodl,w,c
 10724  002D1A  6E3C               	movwf	_startTime+2,c
 10725  002D1C  0E00               	movlw	0
 10726  002D1E  20F4               	addwfc	prodh,w,c
 10727  002D20  6E3D               	movwf	_startTime+3,c
 10728                           
 10729                           ; BSR set to: 0
 10730                           ;RTC.c: 61: startTime.s = (time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10;
 10731  002D22  C088  F086         	movff	RTC_startOperation@time,??_RTC_startOperation
 10732  002D26  3B86               	swapf	??_RTC_startOperation& (0+255),f,b
 10733  002D28  0E0F               	movlw	15
 10734  002D2A  1786               	andwf	??_RTC_startOperation& (0+255),f,b
 10735  002D2C  0E0F               	movlw	15
 10736  002D2E  1786               	andwf	??_RTC_startOperation& (0+255),f,b
 10737  002D30  5186               	movf	??_RTC_startOperation& (0+255),w,b
 10738  002D32  0D0A               	mullw	10
 10739  002D34  C088  F087         	movff	RTC_startOperation@time,??_RTC_startOperation+1
 10740  002D38  0E0F               	movlw	15
 10741  002D3A  1787               	andwf	(??_RTC_startOperation+1)& (0+255),f,b
 10742  002D3C  5187               	movf	(??_RTC_startOperation+1)& (0+255),w,b
 10743  002D3E  24F3               	addwf	prodl,w,c
 10744  002D40  6E3E               	movwf	_startTime+4,c
 10745  002D42  0E00               	movlw	0
 10746  002D44  20F4               	addwfc	prodh,w,c
 10747  002D46  6E3F               	movwf	_startTime+5,c
 10748                           
 10749                           ; BSR set to: 0
 10750  002D48  0012               	return		;funcret
 10751  002D4A                     __end_of_RTC_startOperation:
 10752                           	opt stack 0
 10753                           tosu	equ	0xFFF
 10754                           tosh	equ	0xFFE
 10755                           tosl	equ	0xFFD
 10756                           pclath	equ	0xFFA
 10757                           tblptru	equ	0xFF8
 10758                           tblptrh	equ	0xFF7
 10759                           tblptrl	equ	0xFF6
 10760                           tablat	equ	0xFF5
 10761                           prodh	equ	0xFF4
 10762                           prodl	equ	0xFF3
 10763                           intcon	equ	0xFF2
 10764                           indf0	equ	0xFEF
 10765                           postinc0	equ	0xFEE
 10766                           fsr0h	equ	0xFEA
 10767                           fsr0l	equ	0xFE9
 10768                           wreg	equ	0xFE8
 10769                           postdec1	equ	0xFE5
 10770                           plusw1	equ	0xFE3
 10771                           fsr1l	equ	0xFE1
 10772                           indf2	equ	0xFDF
 10773                           postinc2	equ	0xFDE
 10774                           postdec2	equ	0xFDD
 10775                           plusw2	equ	0xFDB
 10776                           fsr2h	equ	0xFDA
 10777                           fsr2l	equ	0xFD9
 10778                           status	equ	0xFD8
 10779                           
 10780 ;; *************** function _RTC_getOperatingTime *****************
 10781 ;; Defined at:
 10782 ;;		line 64 in file "RTC.c"
 10783 ;; Parameters:    Size  Location     Type
 10784 ;;		None
 10785 ;; Auto vars:     Size  Location     Type
 10786 ;;  time            7   10[BANK0 ] unsigned char [7]
 10787 ;;  operatingTim    6   19[BANK0 ] struct time
 10788 ;;  res             2   17[BANK0 ] int 
 10789 ;; Return value:  Size  Location     Type
 10790 ;;                  2    6[BANK0 ] int 
 10791 ;; Registers used:
 10792 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10793 ;; Tracked objects:
 10794 ;;		On entry : 0/0
 10795 ;;		On exit  : 0/0
 10796 ;;		Unchanged: 0/0
 10797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10798 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10799 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10800 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10801 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10802 ;;Total ram usage:       19 bytes
 10803 ;; Hardware stack levels used:    1
 10804 ;; Hardware stack levels required when called:    7
 10805 ;; This function calls:
 10806 ;;		_RTC_getTime
 10807 ;;		___wmul
 10808 ;; This function is called by:
 10809 ;;		_mainMenu
 10810 ;; This function uses a non-reentrant model
 10811 ;;
 10812                           
 10813                           	psect	text28
 10814  00259C                     __ptext28:
 10815                           	opt stack 0
 10816  00259C                     _RTC_getOperatingTime:
 10817                           	opt stack 22
 10818                           
 10819                           ;RTC.c: 66: char time[7];
 10820                           ;RTC.c: 67: RTC_getTime(time);
 10821                           
 10822                           ; BSR set to: 0
 10823                           ;incstack = 0
 10824  00259C  0E8A               	movlw	low RTC_getOperatingTime@time
 10825  00259E  0100               	movlb	0	; () banked
 10826  0025A0  6F83               	movwf	RTC_getTime@time& (0+255),b
 10827  0025A2  0E00               	movlw	high RTC_getOperatingTime@time
 10828  0025A4  6F84               	movwf	(RTC_getTime@time+1)& (0+255),b
 10829  0025A6  EC29  F017         	call	_RTC_getTime	;wreg free
 10830                           
 10831                           ;RTC.c: 68: endTime.h = (time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10;
 10832  0025AA  C08C  F088         	movff	RTC_getOperatingTime@time+2,??_RTC_getOperatingTime
 10833  0025AE  0100               	movlb	0	; () banked
 10834  0025B0  3B88               	swapf	??_RTC_getOperatingTime& (0+255),f,b
 10835  0025B2  0E0F               	movlw	15
 10836  0025B4  1788               	andwf	??_RTC_getOperatingTime& (0+255),f,b
 10837  0025B6  0E0F               	movlw	15
 10838  0025B8  1788               	andwf	??_RTC_getOperatingTime& (0+255),f,b
 10839  0025BA  5188               	movf	??_RTC_getOperatingTime& (0+255),w,b
 10840  0025BC  0D0A               	mullw	10
 10841  0025BE  C08C  F089         	movff	RTC_getOperatingTime@time+2,??_RTC_getOperatingTime+1
 10842  0025C2  0E0F               	movlw	15
 10843  0025C4  1789               	andwf	(??_RTC_getOperatingTime+1)& (0+255),f,b
 10844  0025C6  5189               	movf	(??_RTC_getOperatingTime+1)& (0+255),w,b
 10845  0025C8  24F3               	addwf	prodl,w,c
 10846  0025CA  6E34               	movwf	_endTime,c
 10847  0025CC  0E00               	movlw	0
 10848  0025CE  20F4               	addwfc	prodh,w,c
 10849  0025D0  6E35               	movwf	_endTime+1,c
 10850                           
 10851                           ; BSR set to: 0
 10852                           ;RTC.c: 69: endTime.m = (time[1] & 0x0F) + ((time[1] & 0xF0)>>4)*10;
 10853  0025D2  C08B  F088         	movff	RTC_getOperatingTime@time+1,??_RTC_getOperatingTime
 10854  0025D6  3B88               	swapf	??_RTC_getOperatingTime& (0+255),f,b
 10855  0025D8  0E0F               	movlw	15
 10856  0025DA  1788               	andwf	??_RTC_getOperatingTime& (0+255),f,b
 10857  0025DC  0E0F               	movlw	15
 10858  0025DE  1788               	andwf	??_RTC_getOperatingTime& (0+255),f,b
 10859  0025E0  5188               	movf	??_RTC_getOperatingTime& (0+255),w,b
 10860  0025E2  0D0A               	mullw	10
 10861  0025E4  C08B  F089         	movff	RTC_getOperatingTime@time+1,??_RTC_getOperatingTime+1
 10862  0025E8  0E0F               	movlw	15
 10863  0025EA  1789               	andwf	(??_RTC_getOperatingTime+1)& (0+255),f,b
 10864  0025EC  5189               	movf	(??_RTC_getOperatingTime+1)& (0+255),w,b
 10865  0025EE  24F3               	addwf	prodl,w,c
 10866  0025F0  6E36               	movwf	_endTime+2,c
 10867  0025F2  0E00               	movlw	0
 10868  0025F4  20F4               	addwfc	prodh,w,c
 10869  0025F6  6E37               	movwf	_endTime+3,c
 10870                           
 10871                           ; BSR set to: 0
 10872                           ;RTC.c: 70: endTime.s = (time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10;
 10873  0025F8  C08A  F088         	movff	RTC_getOperatingTime@time,??_RTC_getOperatingTime
 10874  0025FC  3B88               	swapf	??_RTC_getOperatingTime& (0+255),f,b
 10875  0025FE  0E0F               	movlw	15
 10876  002600  1788               	andwf	??_RTC_getOperatingTime& (0+255),f,b
 10877  002602  0E0F               	movlw	15
 10878  002604  1788               	andwf	??_RTC_getOperatingTime& (0+255),f,b
 10879  002606  5188               	movf	??_RTC_getOperatingTime& (0+255),w,b
 10880  002608  0D0A               	mullw	10
 10881  00260A  C08A  F089         	movff	RTC_getOperatingTime@time,??_RTC_getOperatingTime+1
 10882  00260E  0E0F               	movlw	15
 10883  002610  1789               	andwf	(??_RTC_getOperatingTime+1)& (0+255),f,b
 10884  002612  5189               	movf	(??_RTC_getOperatingTime+1)& (0+255),w,b
 10885  002614  24F3               	addwf	prodl,w,c
 10886  002616  6E38               	movwf	_endTime+4,c
 10887  002618  0E00               	movlw	0
 10888  00261A  20F4               	addwfc	prodh,w,c
 10889  00261C  6E39               	movwf	_endTime+5,c
 10890                           
 10891                           ; BSR set to: 0
 10892                           ;RTC.c: 72: Time operatingTime;
 10893                           ;RTC.c: 73: operatingTime.h = endTime.h - startTime.h;
 10894  00261E  C03A  F088         	movff	_startTime,??_RTC_getOperatingTime
 10895  002622  C03B  F089         	movff	_startTime+1,??_RTC_getOperatingTime+1
 10896  002626  1F88               	comf	??_RTC_getOperatingTime& (0+255),f,b
 10897  002628  1F89               	comf	(??_RTC_getOperatingTime+1)& (0+255),f,b
 10898  00262A  4B88               	infsnz	??_RTC_getOperatingTime& (0+255),f,b
 10899  00262C  2B89               	incf	(??_RTC_getOperatingTime+1)& (0+255),f,b
 10900  00262E  5034               	movf	_endTime,w,c
 10901  002630  2588               	addwf	??_RTC_getOperatingTime& (0+255),w,b
 10902  002632  6F93               	movwf	RTC_getOperatingTime@operatingTime& (0+255),b
 10903  002634  5035               	movf	_endTime+1,w,c
 10904  002636  2189               	addwfc	(??_RTC_getOperatingTime+1)& (0+255),w,b
 10905  002638  6F94               	movwf	(RTC_getOperatingTime@operatingTime+1)& (0+255),b
 10906                           
 10907                           ; BSR set to: 0
 10908                           ;RTC.c: 74: operatingTime.m = endTime.m - startTime.m;
 10909  00263A  EE20  F03C         	lfsr	2,_startTime+2
 10910  00263E  CFDE F088          	movff	postinc2,??_RTC_getOperatingTime
 10911  002642  CFDD F089          	movff	postdec2,??_RTC_getOperatingTime+1
 10912  002646  1F88               	comf	??_RTC_getOperatingTime& (0+255),f,b
 10913  002648  1F89               	comf	(??_RTC_getOperatingTime+1)& (0+255),f,b
 10914  00264A  4B88               	infsnz	??_RTC_getOperatingTime& (0+255),f,b
 10915  00264C  2B89               	incf	(??_RTC_getOperatingTime+1)& (0+255),f,b
 10916  00264E  5036               	movf	_endTime+2,w,c
 10917  002650  2588               	addwf	??_RTC_getOperatingTime& (0+255),w,b
 10918  002652  6F95               	movwf	(RTC_getOperatingTime@operatingTime+2)& (0+255),b
 10919  002654  5037               	movf	_endTime+3,w,c
 10920  002656  2189               	addwfc	(??_RTC_getOperatingTime+1)& (0+255),w,b
 10921  002658  6F96               	movwf	(RTC_getOperatingTime@operatingTime+3)& (0+255),b
 10922                           
 10923                           ; BSR set to: 0
 10924                           ;RTC.c: 75: operatingTime.s = endTime.s - startTime.s;
 10925  00265A  EE20  F03E         	lfsr	2,_startTime+4
 10926  00265E  CFDE F088          	movff	postinc2,??_RTC_getOperatingTime
 10927  002662  CFDD F089          	movff	postdec2,??_RTC_getOperatingTime+1
 10928  002666  1F88               	comf	??_RTC_getOperatingTime& (0+255),f,b
 10929  002668  1F89               	comf	(??_RTC_getOperatingTime+1)& (0+255),f,b
 10930  00266A  4B88               	infsnz	??_RTC_getOperatingTime& (0+255),f,b
 10931  00266C  2B89               	incf	(??_RTC_getOperatingTime+1)& (0+255),f,b
 10932  00266E  5038               	movf	_endTime+4,w,c
 10933  002670  2588               	addwf	??_RTC_getOperatingTime& (0+255),w,b
 10934  002672  6F97               	movwf	(RTC_getOperatingTime@operatingTime+4)& (0+255),b
 10935  002674  5039               	movf	_endTime+5,w,c
 10936  002676  2189               	addwfc	(??_RTC_getOperatingTime+1)& (0+255),w,b
 10937  002678  6F98               	movwf	(RTC_getOperatingTime@operatingTime+5)& (0+255),b
 10938                           
 10939                           ; BSR set to: 0
 10940                           ;RTC.c: 77: int res = 60*60*operatingTime.h + 60*operatingTime.m + operatingTime.s;
 10941  00267A  C093  F080         	movff	RTC_getOperatingTime@operatingTime,___wmul@multiplier
 10942  00267E  C094  F081         	movff	RTC_getOperatingTime@operatingTime+1,___wmul@multiplier+1
 10943  002682  0E0E               	movlw	14
 10944  002684  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10945  002686  0E10               	movlw	16
 10946  002688  6F82               	movwf	___wmul@multiplicand& (0+255),b
 10947  00268A  EC22  F019         	call	___wmul	;wreg free
 10948  00268E  C080  F088         	movff	?___wmul,??_RTC_getOperatingTime
 10949  002692  C081  F089         	movff	?___wmul+1,??_RTC_getOperatingTime+1
 10950  002696  C095  F080         	movff	RTC_getOperatingTime@operatingTime+2,___wmul@multiplier
 10951  00269A  C096  F081         	movff	RTC_getOperatingTime@operatingTime+3,___wmul@multiplier+1
 10952  00269E  0E00               	movlw	0
 10953  0026A0  0100               	movlb	0	; () banked
 10954  0026A2  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10955  0026A4  0E3C               	movlw	60
 10956  0026A6  6F82               	movwf	___wmul@multiplicand& (0+255),b
 10957  0026A8  EC22  F019         	call	___wmul	;wreg free
 10958  0026AC  0100               	movlb	0	; () banked
 10959  0026AE  5180               	movf	?___wmul& (0+255),w,b
 10960  0026B0  2788               	addwf	??_RTC_getOperatingTime& (0+255),f,b
 10961  0026B2  5181               	movf	(?___wmul+1)& (0+255),w,b
 10962  0026B4  2389               	addwfc	(??_RTC_getOperatingTime+1)& (0+255),f,b
 10963  0026B6  5197               	movf	(RTC_getOperatingTime@operatingTime+4)& (0+255),w,b
 10964  0026B8  2588               	addwf	??_RTC_getOperatingTime& (0+255),w,b
 10965  0026BA  6F91               	movwf	RTC_getOperatingTime@res& (0+255),b
 10966  0026BC  5198               	movf	(RTC_getOperatingTime@operatingTime+5)& (0+255),w,b
 10967  0026BE  2189               	addwfc	(??_RTC_getOperatingTime+1)& (0+255),w,b
 10968  0026C0  6F92               	movwf	(RTC_getOperatingTime@res+1)& (0+255),b
 10969                           
 10970                           ; BSR set to: 0
 10971                           ;RTC.c: 78: return res;
 10972  0026C2  C091  F086         	movff	RTC_getOperatingTime@res,?_RTC_getOperatingTime
 10973  0026C6  C092  F087         	movff	RTC_getOperatingTime@res+1,?_RTC_getOperatingTime+1
 10974  0026CA  0012               	return	
 10975  0026CC                     __end_of_RTC_getOperatingTime:
 10976                           	opt stack 0
 10977                           tosu	equ	0xFFF
 10978                           tosh	equ	0xFFE
 10979                           tosl	equ	0xFFD
 10980                           pclath	equ	0xFFA
 10981                           tblptru	equ	0xFF8
 10982                           tblptrh	equ	0xFF7
 10983                           tblptrl	equ	0xFF6
 10984                           tablat	equ	0xFF5
 10985                           prodh	equ	0xFF4
 10986                           prodl	equ	0xFF3
 10987                           intcon	equ	0xFF2
 10988                           indf0	equ	0xFEF
 10989                           postinc0	equ	0xFEE
 10990                           fsr0h	equ	0xFEA
 10991                           fsr0l	equ	0xFE9
 10992                           wreg	equ	0xFE8
 10993                           postdec1	equ	0xFE5
 10994                           plusw1	equ	0xFE3
 10995                           fsr1l	equ	0xFE1
 10996                           indf2	equ	0xFDF
 10997                           postinc2	equ	0xFDE
 10998                           postdec2	equ	0xFDD
 10999                           plusw2	equ	0xFDB
 11000                           fsr2h	equ	0xFDA
 11001                           fsr2l	equ	0xFD9
 11002                           status	equ	0xFD8
 11003                           
 11004 ;; *************** function ___wmul *****************
 11005 ;; Defined at:
 11006 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 11007 ;; Parameters:    Size  Location     Type
 11008 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11009 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11010 ;; Auto vars:     Size  Location     Type
 11011 ;;  product         2    4[BANK0 ] unsigned int 
 11012 ;; Return value:  Size  Location     Type
 11013 ;;                  2    0[BANK0 ] unsigned int 
 11014 ;; Registers used:
 11015 ;;		wreg, status,2, status,0, prodl, prodh
 11016 ;; Tracked objects:
 11017 ;;		On entry : 0/0
 11018 ;;		On exit  : 0/0
 11019 ;;		Unchanged: 0/0
 11020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11021 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11022 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11024 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11025 ;;Total ram usage:        6 bytes
 11026 ;; Hardware stack levels used:    1
 11027 ;; Hardware stack levels required when called:    4
 11028 ;; This function calls:
 11029 ;;		Nothing
 11030 ;; This function is called by:
 11031 ;;		_packaging
 11032 ;;		_inputEntry
 11033 ;;		_RTC_getOperatingTime
 11034 ;;		_RTC_getSeconds
 11035 ;; This function uses a non-reentrant model
 11036 ;;
 11037                           
 11038                           	psect	text29
 11039  003244                     __ptext29:
 11040                           	opt stack 0
 11041  003244                     ___wmul:
 11042                           	opt stack 24
 11043                           
 11044                           ; BSR set to: 0
 11045                           ;incstack = 0
 11046  003244  0100               	movlb	0	; () banked
 11047  003246  5180               	movf	___wmul@multiplier& (0+255),w,b
 11048  003248  0382               	mulwf	___wmul@multiplicand& (0+255),b
 11049  00324A  CFF3 F084          	movff	prodl,___wmul@product
 11050  00324E  CFF4 F085          	movff	prodh,___wmul@product+1
 11051  003252  5180               	movf	___wmul@multiplier& (0+255),w,b
 11052  003254  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 11053  003256  50F3               	movf	prodl,w,c
 11054  003258  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 11055  00325A  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 11056  00325C  0382               	mulwf	___wmul@multiplicand& (0+255),b
 11057  00325E  50F3               	movf	prodl,w,c
 11058  003260  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 11059                           
 11060                           ; BSR set to: 0
 11061  003262  C084  F080         	movff	___wmul@product,?___wmul
 11062  003266  C085  F081         	movff	___wmul@product+1,?___wmul+1
 11063  00326A  0012               	return	
 11064  00326C                     __end_of___wmul:
 11065                           	opt stack 0
 11066                           tosu	equ	0xFFF
 11067                           tosh	equ	0xFFE
 11068                           tosl	equ	0xFFD
 11069                           pclath	equ	0xFFA
 11070                           tblptru	equ	0xFF8
 11071                           tblptrh	equ	0xFF7
 11072                           tblptrl	equ	0xFF6
 11073                           tablat	equ	0xFF5
 11074                           prodh	equ	0xFF4
 11075                           prodl	equ	0xFF3
 11076                           intcon	equ	0xFF2
 11077                           indf0	equ	0xFEF
 11078                           postinc0	equ	0xFEE
 11079                           fsr0h	equ	0xFEA
 11080                           fsr0l	equ	0xFE9
 11081                           wreg	equ	0xFE8
 11082                           postdec1	equ	0xFE5
 11083                           plusw1	equ	0xFE3
 11084                           fsr1l	equ	0xFE1
 11085                           indf2	equ	0xFDF
 11086                           postinc2	equ	0xFDE
 11087                           postdec2	equ	0xFDD
 11088                           plusw2	equ	0xFDB
 11089                           fsr2h	equ	0xFDA
 11090                           fsr2l	equ	0xFD9
 11091                           status	equ	0xFD8
 11092                           
 11093 ;; *************** function _RTC_getTime *****************
 11094 ;; Defined at:
 11095 ;;		line 22 in file "RTC.c"
 11096 ;; Parameters:    Size  Location     Type
 11097 ;;  time            2    3[BANK0 ] PTR unsigned char 
 11098 ;;		 -> RTC_getOperatingTime@time(7), RTC_startOperation@time(7), RTC_getSeconds@time(7), 
 11099 ;; Auto vars:     Size  Location     Type
 11100 ;;  i               1    5[BANK0 ] unsigned char 
 11101 ;; Return value:  Size  Location     Type
 11102 ;;                  1    wreg      void 
 11103 ;; Registers used:
 11104 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11105 ;; Tracked objects:
 11106 ;;		On entry : 0/0
 11107 ;;		On exit  : 0/0
 11108 ;;		Unchanged: 0/0
 11109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11110 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11111 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11113 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11114 ;;Total ram usage:        3 bytes
 11115 ;; Hardware stack levels used:    1
 11116 ;; Hardware stack levels required when called:    6
 11117 ;; This function calls:
 11118 ;;		_I2C_Master_Read
 11119 ;;		_I2C_Master_Start
 11120 ;;		_I2C_Master_Stop
 11121 ;;		_I2C_Master_Write
 11122 ;; This function is called by:
 11123 ;;		_RTC_startOperation
 11124 ;;		_RTC_getOperatingTime
 11125 ;;		_RTC_getSeconds
 11126 ;; This function uses a non-reentrant model
 11127 ;;
 11128                           
 11129                           	psect	text30
 11130  002E52                     __ptext30:
 11131                           	opt stack 0
 11132  002E52                     _RTC_getTime:
 11133                           	opt stack 22
 11134                           
 11135                           ;RTC.c: 24: I2C_Master_Start();
 11136                           
 11137                           ; BSR set to: 0
 11138                           ;incstack = 0
 11139  002E52  ECC2  F019         	call	_I2C_Master_Start	;wreg free
 11140                           
 11141                           ;RTC.c: 25: I2C_Master_Write(0b11010000);
 11142  002E56  0E00               	movlw	0
 11143  002E58  0100               	movlb	0	; () banked
 11144  002E5A  6F82               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
 11145  002E5C  0ED0               	movlw	208
 11146  002E5E  6F81               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
 11147  002E60  ECB9  F019         	call	_I2C_Master_Write	;wreg free
 11148                           
 11149                           ;RTC.c: 26: I2C_Master_Write(0x00);
 11150  002E64  0E00               	movlw	0
 11151  002E66  0100               	movlb	0	; () banked
 11152  002E68  6F82               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
 11153  002E6A  0E00               	movlw	0
 11154  002E6C  6F81               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
 11155  002E6E  ECB9  F019         	call	_I2C_Master_Write	;wreg free
 11156                           
 11157                           ;RTC.c: 27: I2C_Master_Stop();
 11158  002E72  ECBE  F019         	call	_I2C_Master_Stop	;wreg free
 11159                           
 11160                           ;RTC.c: 30: char i;
 11161                           ;RTC.c: 32: I2C_Master_Start();
 11162  002E76  ECC2  F019         	call	_I2C_Master_Start	;wreg free
 11163                           
 11164                           ;RTC.c: 33: I2C_Master_Write(0b11010001);
 11165  002E7A  0E00               	movlw	0
 11166  002E7C  0100               	movlb	0	; () banked
 11167  002E7E  6F82               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
 11168  002E80  0ED1               	movlw	209
 11169  002E82  6F81               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
 11170  002E84  ECB9  F019         	call	_I2C_Master_Write	;wreg free
 11171                           
 11172                           ;RTC.c: 35: for (i = 0; i < 6; i++) {
 11173  002E88  0E00               	movlw	0
 11174  002E8A  0100               	movlb	0	; () banked
 11175  002E8C  6F85               	movwf	RTC_getTime@i& (0+255),b
 11176  002E8E                     l5471:
 11177                           
 11178                           ; BSR set to: 0
 11179  002E8E  0E05               	movlw	5
 11180  002E90  6585               	cpfsgt	RTC_getTime@i& (0+255),b
 11181  002E92  D001               	goto	l559
 11182  002E94  D00F               	goto	u6840
 11183  002E96                     l559:
 11184                           
 11185                           ; BSR set to: 0
 11186                           ;RTC.c: 36: time[i] = I2C_Master_Read(0);
 11187                           
 11188                           ; BSR set to: 0
 11189  002E96  5185               	movf	RTC_getTime@i& (0+255),w,b
 11190  002E98  0D01               	mullw	1
 11191  002E9A  50F3               	movf	prodl,w,c
 11192  002E9C  2583               	addwf	RTC_getTime@time& (0+255),w,b
 11193  002E9E  6ED9               	movwf	fsr2l,c
 11194  002EA0  50F4               	movf	prodh,w,c
 11195  002EA2  2184               	addwfc	(RTC_getTime@time+1)& (0+255),w,b
 11196  002EA4  6EDA               	movwf	fsr2h,c
 11197  002EA6  0E00               	movlw	0
 11198  002EA8  ECF9  F018         	call	_I2C_Master_Read
 11199  002EAC  6EDF               	movwf	indf2,c
 11200  002EAE  0100               	movlb	0	; () banked
 11201  002EB0  2B85               	incf	RTC_getTime@i& (0+255),f,b
 11202  002EB2  D7ED               	goto	l5471
 11203  002EB4                     u6840:
 11204                           
 11205                           ; BSR set to: 0
 11206                           ;RTC.c: 37: }
 11207                           ;RTC.c: 38: time[6] = I2C_Master_Read(1);
 11208                           
 11209                           ; BSR set to: 0
 11210  002EB4  EE20 F006          	lfsr	2,6
 11211  002EB8  5183               	movf	RTC_getTime@time& (0+255),w,b
 11212  002EBA  26D9               	addwf	fsr2l,f,c
 11213  002EBC  5184               	movf	(RTC_getTime@time+1)& (0+255),w,b
 11214  002EBE  22DA               	addwfc	fsr2h,f,c
 11215  002EC0  0E01               	movlw	1
 11216  002EC2  ECF9  F018         	call	_I2C_Master_Read
 11217  002EC6  6EDF               	movwf	indf2,c
 11218                           
 11219                           ;RTC.c: 39: I2C_Master_Stop();
 11220  002EC8  ECBE  F019         	call	_I2C_Master_Stop	;wreg free
 11221  002ECC  0012               	return		;funcret
 11222  002ECE                     __end_of_RTC_getTime:
 11223                           	opt stack 0
 11224                           tosu	equ	0xFFF
 11225                           tosh	equ	0xFFE
 11226                           tosl	equ	0xFFD
 11227                           pclath	equ	0xFFA
 11228                           tblptru	equ	0xFF8
 11229                           tblptrh	equ	0xFF7
 11230                           tblptrl	equ	0xFF6
 11231                           tablat	equ	0xFF5
 11232                           prodh	equ	0xFF4
 11233                           prodl	equ	0xFF3
 11234                           intcon	equ	0xFF2
 11235                           indf0	equ	0xFEF
 11236                           postinc0	equ	0xFEE
 11237                           fsr0h	equ	0xFEA
 11238                           fsr0l	equ	0xFE9
 11239                           wreg	equ	0xFE8
 11240                           postdec1	equ	0xFE5
 11241                           plusw1	equ	0xFE3
 11242                           fsr1l	equ	0xFE1
 11243                           indf2	equ	0xFDF
 11244                           postinc2	equ	0xFDE
 11245                           postdec2	equ	0xFDD
 11246                           plusw2	equ	0xFDB
 11247                           fsr2h	equ	0xFDA
 11248                           fsr2l	equ	0xFD9
 11249                           status	equ	0xFD8
 11250                           
 11251 ;; *************** function _I2C_Master_Write *****************
 11252 ;; Defined at:
 11253 ;;		line 108 in file "I2C.c"
 11254 ;; Parameters:    Size  Location     Type
 11255 ;;  byteToWrite     2    1[BANK0 ] unsigned int 
 11256 ;; Auto vars:     Size  Location     Type
 11257 ;;		None
 11258 ;; Return value:  Size  Location     Type
 11259 ;;                  1    wreg      void 
 11260 ;; Registers used:
 11261 ;;		wreg, status,2, status,0, cstack
 11262 ;; Tracked objects:
 11263 ;;		On entry : 0/0
 11264 ;;		On exit  : 0/0
 11265 ;;		Unchanged: 0/0
 11266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11267 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11270 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11271 ;;Total ram usage:        2 bytes
 11272 ;; Hardware stack levels used:    1
 11273 ;; Hardware stack levels required when called:    5
 11274 ;; This function calls:
 11275 ;;		_I2C_Master_Wait
 11276 ;; This function is called by:
 11277 ;;		_I2C_Send
 11278 ;;		_RTC_getTime
 11279 ;; This function uses a non-reentrant model
 11280 ;;
 11281                           
 11282                           	psect	text31
 11283  003372                     __ptext31:
 11284                           	opt stack 0
 11285  003372                     _I2C_Master_Write:
 11286                           	opt stack 21
 11287                           
 11288                           ;I2C.c: 116: I2C_Master_Wait();
 11289                           
 11290                           ;incstack = 0
 11291  003372  EC8F  F019         	call	_I2C_Master_Wait	;wreg free
 11292                           
 11293                           ;I2C.c: 117: SSPBUF = byteToWrite;
 11294  003376  C081  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
 11295  00337A  0012               	return		;funcret
 11296  00337C                     __end_of_I2C_Master_Write:
 11297                           	opt stack 0
 11298                           tosu	equ	0xFFF
 11299                           tosh	equ	0xFFE
 11300                           tosl	equ	0xFFD
 11301                           pclath	equ	0xFFA
 11302                           tblptru	equ	0xFF8
 11303                           tblptrh	equ	0xFF7
 11304                           tblptrl	equ	0xFF6
 11305                           tablat	equ	0xFF5
 11306                           prodh	equ	0xFF4
 11307                           prodl	equ	0xFF3
 11308                           intcon	equ	0xFF2
 11309                           indf0	equ	0xFEF
 11310                           postinc0	equ	0xFEE
 11311                           fsr0h	equ	0xFEA
 11312                           fsr0l	equ	0xFE9
 11313                           wreg	equ	0xFE8
 11314                           postdec1	equ	0xFE5
 11315                           plusw1	equ	0xFE3
 11316                           fsr1l	equ	0xFE1
 11317                           indf2	equ	0xFDF
 11318                           postinc2	equ	0xFDE
 11319                           postdec2	equ	0xFDD
 11320                           plusw2	equ	0xFDB
 11321                           fsr2h	equ	0xFDA
 11322                           fsr2l	equ	0xFD9
 11323                           status	equ	0xFD8
 11324                           
 11325 ;; *************** function _I2C_Master_Stop *****************
 11326 ;; Defined at:
 11327 ;;		line 95 in file "I2C.c"
 11328 ;; Parameters:    Size  Location     Type
 11329 ;;		None
 11330 ;; Auto vars:     Size  Location     Type
 11331 ;;		None
 11332 ;; Return value:  Size  Location     Type
 11333 ;;                  1    wreg      void 
 11334 ;; Registers used:
 11335 ;;		wreg, status,2, status,0, cstack
 11336 ;; Tracked objects:
 11337 ;;		On entry : 0/0
 11338 ;;		On exit  : 0/0
 11339 ;;		Unchanged: 0/0
 11340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11344 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11345 ;;Total ram usage:        0 bytes
 11346 ;; Hardware stack levels used:    1
 11347 ;; Hardware stack levels required when called:    5
 11348 ;; This function calls:
 11349 ;;		_I2C_Master_Wait
 11350 ;; This function is called by:
 11351 ;;		_I2C_Send
 11352 ;;		_RTC_getTime
 11353 ;; This function uses a non-reentrant model
 11354 ;;
 11355                           
 11356                           	psect	text32
 11357  00337C                     __ptext32:
 11358                           	opt stack 0
 11359  00337C                     _I2C_Master_Stop:
 11360                           	opt stack 21
 11361                           
 11362                           ;I2C.c: 104: I2C_Master_Wait();
 11363                           
 11364                           ;incstack = 0
 11365  00337C  EC8F  F019         	call	_I2C_Master_Wait	;wreg free
 11366                           
 11367                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
 11368  003380  84C5               	bsf	4037,2,c	;volatile
 11369  003382  0012               	return		;funcret
 11370  003384                     __end_of_I2C_Master_Stop:
 11371                           	opt stack 0
 11372                           tosu	equ	0xFFF
 11373                           tosh	equ	0xFFE
 11374                           tosl	equ	0xFFD
 11375                           pclath	equ	0xFFA
 11376                           tblptru	equ	0xFF8
 11377                           tblptrh	equ	0xFF7
 11378                           tblptrl	equ	0xFF6
 11379                           tablat	equ	0xFF5
 11380                           prodh	equ	0xFF4
 11381                           prodl	equ	0xFF3
 11382                           intcon	equ	0xFF2
 11383                           indf0	equ	0xFEF
 11384                           postinc0	equ	0xFEE
 11385                           fsr0h	equ	0xFEA
 11386                           fsr0l	equ	0xFE9
 11387                           wreg	equ	0xFE8
 11388                           postdec1	equ	0xFE5
 11389                           plusw1	equ	0xFE3
 11390                           fsr1l	equ	0xFE1
 11391                           indf2	equ	0xFDF
 11392                           postinc2	equ	0xFDE
 11393                           postdec2	equ	0xFDD
 11394                           plusw2	equ	0xFDB
 11395                           fsr2h	equ	0xFDA
 11396                           fsr2l	equ	0xFD9
 11397                           status	equ	0xFD8
 11398                           
 11399 ;; *************** function _I2C_Master_Start *****************
 11400 ;; Defined at:
 11401 ;;		line 69 in file "I2C.c"
 11402 ;; Parameters:    Size  Location     Type
 11403 ;;		None
 11404 ;; Auto vars:     Size  Location     Type
 11405 ;;		None
 11406 ;; Return value:  Size  Location     Type
 11407 ;;                  1    wreg      void 
 11408 ;; Registers used:
 11409 ;;		wreg, status,2, status,0, cstack
 11410 ;; Tracked objects:
 11411 ;;		On entry : 0/0
 11412 ;;		On exit  : 0/0
 11413 ;;		Unchanged: 0/0
 11414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11418 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11419 ;;Total ram usage:        0 bytes
 11420 ;; Hardware stack levels used:    1
 11421 ;; Hardware stack levels required when called:    5
 11422 ;; This function calls:
 11423 ;;		_I2C_Master_Wait
 11424 ;; This function is called by:
 11425 ;;		_I2C_Send
 11426 ;;		_RTC_getTime
 11427 ;; This function uses a non-reentrant model
 11428 ;;
 11429                           
 11430                           	psect	text33
 11431  003384                     __ptext33:
 11432                           	opt stack 0
 11433  003384                     _I2C_Master_Start:
 11434                           	opt stack 21
 11435                           
 11436                           ;I2C.c: 78: I2C_Master_Wait();
 11437                           
 11438                           ;incstack = 0
 11439  003384  EC8F  F019         	call	_I2C_Master_Wait	;wreg free
 11440                           
 11441                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
 11442  003388  80C5               	bsf	4037,0,c	;volatile
 11443  00338A  0012               	return		;funcret
 11444  00338C                     __end_of_I2C_Master_Start:
 11445                           	opt stack 0
 11446                           tosu	equ	0xFFF
 11447                           tosh	equ	0xFFE
 11448                           tosl	equ	0xFFD
 11449                           pclath	equ	0xFFA
 11450                           tblptru	equ	0xFF8
 11451                           tblptrh	equ	0xFF7
 11452                           tblptrl	equ	0xFF6
 11453                           tablat	equ	0xFF5
 11454                           prodh	equ	0xFF4
 11455                           prodl	equ	0xFF3
 11456                           intcon	equ	0xFF2
 11457                           indf0	equ	0xFEF
 11458                           postinc0	equ	0xFEE
 11459                           fsr0h	equ	0xFEA
 11460                           fsr0l	equ	0xFE9
 11461                           wreg	equ	0xFE8
 11462                           postdec1	equ	0xFE5
 11463                           plusw1	equ	0xFE3
 11464                           fsr1l	equ	0xFE1
 11465                           indf2	equ	0xFDF
 11466                           postinc2	equ	0xFDE
 11467                           postdec2	equ	0xFDD
 11468                           plusw2	equ	0xFDB
 11469                           fsr2h	equ	0xFDA
 11470                           fsr2l	equ	0xFD9
 11471                           status	equ	0xFD8
 11472                           
 11473 ;; *************** function _I2C_Master_Read *****************
 11474 ;; Defined at:
 11475 ;;		line 120 in file "I2C.c"
 11476 ;; Parameters:    Size  Location     Type
 11477 ;;  ackBit          1    wreg     unsigned char 
 11478 ;; Auto vars:     Size  Location     Type
 11479 ;;  ackBit          1    1[BANK0 ] unsigned char 
 11480 ;;  receivedByte    1    2[BANK0 ] unsigned char 
 11481 ;; Return value:  Size  Location     Type
 11482 ;;                  1    wreg      unsigned char 
 11483 ;; Registers used:
 11484 ;;		wreg, status,2, status,0, cstack
 11485 ;; Tracked objects:
 11486 ;;		On entry : 0/0
 11487 ;;		On exit  : 0/0
 11488 ;;		Unchanged: 0/0
 11489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11491 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11493 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11494 ;;Total ram usage:        2 bytes
 11495 ;; Hardware stack levels used:    1
 11496 ;; Hardware stack levels required when called:    5
 11497 ;; This function calls:
 11498 ;;		_I2C_Master_Wait
 11499 ;; This function is called by:
 11500 ;;		_RTC_getTime
 11501 ;; This function uses a non-reentrant model
 11502 ;;
 11503                           
 11504                           	psect	text34
 11505  0031F2                     __ptext34:
 11506                           	opt stack 0
 11507  0031F2                     _I2C_Master_Read:
 11508                           	opt stack 22
 11509                           
 11510                           ;incstack = 0
 11511                           ;I2C_Master_Read@ackBit stored from wreg
 11512  0031F2  0100               	movlb	0	; () banked
 11513  0031F4  6F81               	movwf	I2C_Master_Read@ackBit& (0+255),b
 11514                           
 11515                           ;I2C.c: 130: unsigned char receivedByte;
 11516                           ;I2C.c: 132: I2C_Master_Wait();
 11517  0031F6  EC8F  F019         	call	_I2C_Master_Wait	;wreg free
 11518                           
 11519                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
 11520  0031FA  86C5               	bsf	4037,3,c	;volatile
 11521                           
 11522                           ;I2C.c: 135: I2C_Master_Wait();
 11523  0031FC  EC8F  F019         	call	_I2C_Master_Wait	;wreg free
 11524                           
 11525                           ;I2C.c: 136: receivedByte = SSPBUF;
 11526  003200  CFC9 F082          	movff	4041,I2C_Master_Read@receivedByte	;volatile
 11527                           
 11528                           ;I2C.c: 138: I2C_Master_Wait();
 11529  003204  EC8F  F019         	call	_I2C_Master_Wait	;wreg free
 11530                           
 11531                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
 11532  003208  0100               	movlb	0	; () banked
 11533  00320A  B181               	btfsc	I2C_Master_Read@ackBit& (0+255),0,b
 11534  00320C  D002               	bra	u5895
 11535  00320E  9AC5               	bcf	4037,5,c	;volatile
 11536  003210  D001               	bra	u5896
 11537  003212                     u5895:
 11538  003212  8AC5               	bsf	4037,5,c	;volatile
 11539  003214                     u5896:
 11540                           
 11541                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
 11542  003214  88C5               	bsf	4037,4,c	;volatile
 11543                           
 11544                           ;I2C.c: 142: return receivedByte;
 11545  003216  0100               	movlb	0	; () banked
 11546  003218  5182               	movf	I2C_Master_Read@receivedByte& (0+255),w,b
 11547  00321A  0012               	return	
 11548  00321C                     __end_of_I2C_Master_Read:
 11549                           	opt stack 0
 11550                           tosu	equ	0xFFF
 11551                           tosh	equ	0xFFE
 11552                           tosl	equ	0xFFD
 11553                           pclath	equ	0xFFA
 11554                           tblptru	equ	0xFF8
 11555                           tblptrh	equ	0xFF7
 11556                           tblptrl	equ	0xFF6
 11557                           tablat	equ	0xFF5
 11558                           prodh	equ	0xFF4
 11559                           prodl	equ	0xFF3
 11560                           intcon	equ	0xFF2
 11561                           indf0	equ	0xFEF
 11562                           postinc0	equ	0xFEE
 11563                           fsr0h	equ	0xFEA
 11564                           fsr0l	equ	0xFE9
 11565                           wreg	equ	0xFE8
 11566                           postdec1	equ	0xFE5
 11567                           plusw1	equ	0xFE3
 11568                           fsr1l	equ	0xFE1
 11569                           indf2	equ	0xFDF
 11570                           postinc2	equ	0xFDE
 11571                           postdec2	equ	0xFDD
 11572                           plusw2	equ	0xFDB
 11573                           fsr2h	equ	0xFDA
 11574                           fsr2l	equ	0xFD9
 11575                           status	equ	0xFD8
 11576                           
 11577 ;; *************** function _I2C_Master_Wait *****************
 11578 ;; Defined at:
 11579 ;;		line 51 in file "I2C.c"
 11580 ;; Parameters:    Size  Location     Type
 11581 ;;		None
 11582 ;; Auto vars:     Size  Location     Type
 11583 ;;		None
 11584 ;; Return value:  Size  Location     Type
 11585 ;;                  1    wreg      void 
 11586 ;; Registers used:
 11587 ;;		wreg, status,2, status,0
 11588 ;; Tracked objects:
 11589 ;;		On entry : 0/0
 11590 ;;		On exit  : 0/0
 11591 ;;		Unchanged: 0/0
 11592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11595 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11596 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11597 ;;Total ram usage:        1 bytes
 11598 ;; Hardware stack levels used:    1
 11599 ;; Hardware stack levels required when called:    4
 11600 ;; This function calls:
 11601 ;;		Nothing
 11602 ;; This function is called by:
 11603 ;;		_I2C_Master_Start
 11604 ;;		_I2C_Master_Stop
 11605 ;;		_I2C_Master_Write
 11606 ;;		_I2C_Master_Read
 11607 ;;		_I2C_Master_RepeatedStart
 11608 ;; This function uses a non-reentrant model
 11609 ;;
 11610                           
 11611                           	psect	text35
 11612  00331E                     __ptext35:
 11613                           	opt stack 0
 11614  00331E                     _I2C_Master_Wait:
 11615                           	opt stack 21
 11616                           
 11617                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 11618                           
 11619                           ; BSR set to: 0
 11620                           ;incstack = 0
 11621  00331E  B4C7               	btfsc	4039,2,c	;volatile
 11622  003320  D7FE               	goto	_I2C_Master_Wait
 11623  003322  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
 11624  003326  0E1F               	movlw	31
 11625  003328  0100               	movlb	0	; () banked
 11626  00332A  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
 11627  00332C  B4D8               	btfsc	status,2,c
 11628  00332E  0012               	return	
 11629  003330  D7F6               	goto	_I2C_Master_Wait
 11630  003332                     __end_of_I2C_Master_Wait:
 11631                           	opt stack 0
 11632                           tosu	equ	0xFFF
 11633                           tosh	equ	0xFFE
 11634                           tosl	equ	0xFFD
 11635                           pclath	equ	0xFFA
 11636                           tblptru	equ	0xFF8
 11637                           tblptrh	equ	0xFF7
 11638                           tblptrl	equ	0xFF6
 11639                           tablat	equ	0xFF5
 11640                           prodh	equ	0xFF4
 11641                           prodl	equ	0xFF3
 11642                           intcon	equ	0xFF2
 11643                           indf0	equ	0xFEF
 11644                           postinc0	equ	0xFEE
 11645                           fsr0h	equ	0xFEA
 11646                           fsr0l	equ	0xFE9
 11647                           wreg	equ	0xFE8
 11648                           postdec1	equ	0xFE5
 11649                           plusw1	equ	0xFE3
 11650                           fsr1l	equ	0xFE1
 11651                           indf2	equ	0xFDF
 11652                           postinc2	equ	0xFDE
 11653                           postdec2	equ	0xFDD
 11654                           plusw2	equ	0xFDB
 11655                           fsr2h	equ	0xFDA
 11656                           fsr2l	equ	0xFD9
 11657                           status	equ	0xFD8
 11658                           
 11659 ;; *************** function _initLCD *****************
 11660 ;; Defined at:
 11661 ;;		line 61 in file "lcd.c"
 11662 ;; Parameters:    Size  Location     Type
 11663 ;;		None
 11664 ;; Auto vars:     Size  Location     Type
 11665 ;;		None
 11666 ;; Return value:  Size  Location     Type
 11667 ;;                  1    wreg      void 
 11668 ;; Registers used:
 11669 ;;		wreg, status,2, status,0, cstack
 11670 ;; Tracked objects:
 11671 ;;		On entry : 0/0
 11672 ;;		On exit  : 0/0
 11673 ;;		Unchanged: 0/0
 11674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11677 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11678 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11679 ;;Total ram usage:        1 bytes
 11680 ;; Hardware stack levels used:    1
 11681 ;; Hardware stack levels required when called:    6
 11682 ;; This function calls:
 11683 ;;		_lcdInst
 11684 ;; This function is called by:
 11685 ;;		_main
 11686 ;; This function uses a non-reentrant model
 11687 ;;
 11688                           
 11689                           	psect	text36
 11690  003000                     __ptext36:
 11691                           	opt stack 0
 11692  003000                     _initLCD:
 11693                           	opt stack 24
 11694                           
 11695                           ;lcd.c: 69: _delay((unsigned long)((15)*(40000000/4000.0)));
 11696                           
 11697                           ; BSR set to: 0
 11698                           ;incstack = 0
 11699  003000  0EC3               	movlw	195
 11700  003002  0100               	movlb	0	; () banked
 11701  003004  6F83               	movwf	??_initLCD& (0+255),b
 11702  003006  0ECD               	movlw	205
 11703  003008                     u7977:
 11704  003008  2EE8               	decfsz	wreg,f,c
 11705  00300A  D7FE               	bra	u7977
 11706  00300C  2F83               	decfsz	??_initLCD& (0+255),f,b
 11707  00300E  D7FC               	bra	u7977
 11708                           
 11709                           ;lcd.c: 70: lcdInst(0b00110011);
 11710  003010  0E33               	movlw	51
 11711  003012  EC83  F019         	call	_lcdInst
 11712                           
 11713                           ;lcd.c: 71: lcdInst(0b00110010);
 11714  003016  0E32               	movlw	50
 11715  003018  EC83  F019         	call	_lcdInst
 11716                           
 11717                           ;lcd.c: 72: lcdInst(0b00101000);
 11718  00301C  0E28               	movlw	40
 11719  00301E  EC83  F019         	call	_lcdInst
 11720                           
 11721                           ;lcd.c: 73: lcdInst(0b00001111);
 11722  003022  0E0F               	movlw	15
 11723  003024  EC83  F019         	call	_lcdInst
 11724                           
 11725                           ;lcd.c: 74: lcdInst(0b00000110);
 11726  003028  0E06               	movlw	6
 11727  00302A  EC83  F019         	call	_lcdInst
 11728                           
 11729                           ;lcd.c: 75: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 11730  00302E  0E01               	movlw	1
 11731  003030  EC83  F019         	call	_lcdInst
 11732  003034  0EC3               	movlw	195
 11733  003036  0100               	movlb	0	; () banked
 11734  003038  6F83               	movwf	??_initLCD& (0+255),b
 11735  00303A  0ECD               	movlw	205
 11736  00303C                     u7987:
 11737  00303C  2EE8               	decfsz	wreg,f,c
 11738  00303E  D7FE               	bra	u7987
 11739  003040  2F83               	decfsz	??_initLCD& (0+255),f,b
 11740  003042  D7FC               	bra	u7987
 11741                           
 11742                           ;lcd.c: 78: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
 11743  003044  0E0F               	movlw	15
 11744  003046  EC83  F019         	call	_lcdInst
 11745  00304A  0012               	return		;funcret
 11746  00304C                     __end_of_initLCD:
 11747                           	opt stack 0
 11748                           tosu	equ	0xFFF
 11749                           tosh	equ	0xFFE
 11750                           tosl	equ	0xFFD
 11751                           pclath	equ	0xFFA
 11752                           tblptru	equ	0xFF8
 11753                           tblptrh	equ	0xFF7
 11754                           tblptrl	equ	0xFF6
 11755                           tablat	equ	0xFF5
 11756                           prodh	equ	0xFF4
 11757                           prodl	equ	0xFF3
 11758                           intcon	equ	0xFF2
 11759                           indf0	equ	0xFEF
 11760                           postinc0	equ	0xFEE
 11761                           fsr0h	equ	0xFEA
 11762                           fsr0l	equ	0xFE9
 11763                           wreg	equ	0xFE8
 11764                           postdec1	equ	0xFE5
 11765                           plusw1	equ	0xFE3
 11766                           fsr1l	equ	0xFE1
 11767                           indf2	equ	0xFDF
 11768                           postinc2	equ	0xFDE
 11769                           postdec2	equ	0xFDD
 11770                           plusw2	equ	0xFDB
 11771                           fsr2h	equ	0xFDA
 11772                           fsr2l	equ	0xFD9
 11773                           status	equ	0xFD8
 11774                           
 11775 ;; *************** function _lcdInst *****************
 11776 ;; Defined at:
 11777 ;;		line 12 in file "lcd.c"
 11778 ;; Parameters:    Size  Location     Type
 11779 ;;  data            1    wreg     unsigned char 
 11780 ;; Auto vars:     Size  Location     Type
 11781 ;;  data            1    2[BANK0 ] unsigned char 
 11782 ;; Return value:  Size  Location     Type
 11783 ;;                  1    wreg      void 
 11784 ;; Registers used:
 11785 ;;		wreg, status,2, status,0, cstack
 11786 ;; Tracked objects:
 11787 ;;		On entry : 0/0
 11788 ;;		On exit  : 0/0
 11789 ;;		Unchanged: 0/0
 11790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11792 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11794 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11795 ;;Total ram usage:        1 bytes
 11796 ;; Hardware stack levels used:    1
 11797 ;; Hardware stack levels required when called:    5
 11798 ;; This function calls:
 11799 ;;		_lcdNibble
 11800 ;; This function is called by:
 11801 ;;		_packaging
 11802 ;;		_main
 11803 ;;		_initLCD
 11804 ;;		_lcd_set_cursor
 11805 ;;		_lcd_shift_cursor
 11806 ;;		_inputEntry
 11807 ;;		_mainMenu
 11808 ;;		_printStringLCD
 11809 ;;		_lcd_shift_display
 11810 ;; This function uses a non-reentrant model
 11811 ;;
 11812                           
 11813                           	psect	text37
 11814  003306                     __ptext37:
 11815                           	opt stack 0
 11816  003306                     _lcdInst:
 11817                           	opt stack 22
 11818                           
 11819                           ;incstack = 0
 11820                           ;lcdInst@data stored from wreg
 11821  003306  0100               	movlb	0	; () banked
 11822  003308  6F82               	movwf	lcdInst@data& (0+255),b
 11823                           
 11824                           ;lcd.c: 20: LATDbits.LATD2 = 0;
 11825  00330A  948C               	bcf	3980,2,c	;volatile
 11826                           
 11827                           ;lcd.c: 21: lcdNibble(data);
 11828  00330C  0100               	movlb	0	; () banked
 11829  00330E  5182               	movf	lcdInst@data& (0+255),w,b
 11830  003310  ECA5  F016         	call	_lcdNibble
 11831                           
 11832                           ;lcd.c: 22: _delay((unsigned long)((100)*(40000000/4000000.0)));
 11833  003314  0EC8               	movlw	200
 11834  003316                     u7997:
 11835  003316  D000               	nop2	
 11836  003318  2EE8               	decfsz	wreg,f,c
 11837  00331A  D7FD               	bra	u7997
 11838  00331C  0012               	return		;funcret
 11839  00331E                     __end_of_lcdInst:
 11840                           	opt stack 0
 11841                           tosu	equ	0xFFF
 11842                           tosh	equ	0xFFE
 11843                           tosl	equ	0xFFD
 11844                           pclath	equ	0xFFA
 11845                           tblptru	equ	0xFF8
 11846                           tblptrh	equ	0xFF7
 11847                           tblptrl	equ	0xFF6
 11848                           tablat	equ	0xFF5
 11849                           prodh	equ	0xFF4
 11850                           prodl	equ	0xFF3
 11851                           intcon	equ	0xFF2
 11852                           indf0	equ	0xFEF
 11853                           postinc0	equ	0xFEE
 11854                           fsr0h	equ	0xFEA
 11855                           fsr0l	equ	0xFE9
 11856                           wreg	equ	0xFE8
 11857                           postdec1	equ	0xFE5
 11858                           plusw1	equ	0xFE3
 11859                           fsr1l	equ	0xFE1
 11860                           indf2	equ	0xFDF
 11861                           postinc2	equ	0xFDE
 11862                           postdec2	equ	0xFDD
 11863                           plusw2	equ	0xFDB
 11864                           fsr2h	equ	0xFDA
 11865                           fsr2l	equ	0xFD9
 11866                           status	equ	0xFD8
 11867                           
 11868 ;; *************** function _lcdNibble *****************
 11869 ;; Defined at:
 11870 ;;		line 38 in file "lcd.c"
 11871 ;; Parameters:    Size  Location     Type
 11872 ;;  data            1    wreg     unsigned char 
 11873 ;; Auto vars:     Size  Location     Type
 11874 ;;  data            1    1[BANK0 ] unsigned char 
 11875 ;;  temp            1    0[BANK0 ] unsigned char 
 11876 ;; Return value:  Size  Location     Type
 11877 ;;                  1    wreg      void 
 11878 ;; Registers used:
 11879 ;;		wreg, status,2, status,0
 11880 ;; Tracked objects:
 11881 ;;		On entry : 0/0
 11882 ;;		On exit  : 0/0
 11883 ;;		Unchanged: 0/0
 11884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11886 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11888 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11889 ;;Total ram usage:        2 bytes
 11890 ;; Hardware stack levels used:    1
 11891 ;; Hardware stack levels required when called:    4
 11892 ;; This function calls:
 11893 ;;		Nothing
 11894 ;; This function is called by:
 11895 ;;		_lcdInst
 11896 ;;		_putch
 11897 ;; This function uses a non-reentrant model
 11898 ;;
 11899                           
 11900                           	psect	text38
 11901  002D4A                     __ptext38:
 11902                           	opt stack 0
 11903  002D4A                     _lcdNibble:
 11904                           	opt stack 22
 11905                           
 11906                           ;incstack = 0
 11907                           ;lcdNibble@data stored from wreg
 11908  002D4A  0100               	movlb	0	; () banked
 11909  002D4C  6F81               	movwf	lcdNibble@data& (0+255),b
 11910                           
 11911                           ;lcd.c: 46: char temp = (unsigned char) (data & 0xF0);
 11912  002D4E  0100               	movlb	0	; () banked
 11913  002D50  5181               	movf	lcdNibble@data& (0+255),w,b
 11914  002D52  0BF0               	andlw	240
 11915  002D54  6F80               	movwf	lcdNibble@temp& (0+255),b
 11916                           
 11917                           ;lcd.c: 47: LATD = (unsigned char) (LATD & 0x0F);
 11918  002D56  508C               	movf	3980,w,c	;volatile
 11919  002D58  0B0F               	andlw	15
 11920  002D5A  6E8C               	movwf	3980,c	;volatile
 11921                           
 11922                           ;lcd.c: 48: LATD = (unsigned char) (temp | LATD);
 11923  002D5C  5180               	movf	lcdNibble@temp& (0+255),w,b
 11924  002D5E  108C               	iorwf	3980,w,c	;volatile
 11925  002D60  6E8C               	movwf	3980,c	;volatile
 11926                           
 11927                           ; BSR set to: 0
 11928                           ;lcd.c: 50: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 11929  002D62  0E00               	movlw	0
 11930  002D64  BEF2               	btfsc	intcon,7,c	;volatile
 11931  002D66  0E01               	movlw	1
 11932  002D68  6E4C               	movwf	_LCDinterruptState,c
 11933                           
 11934                           ; BSR set to: 0
 11935  002D6A  9EF2               	bcf	intcon,7,c	;volatile
 11936                           
 11937                           ; BSR set to: 0
 11938  002D6C  868C               	bsf	3980,3,c	;volatile
 11939                           
 11940                           ; BSR set to: 0
 11941  002D6E  0E53               	movlw	83
 11942  002D70                     u8007:
 11943  002D70  2EE8               	decfsz	wreg,f,c
 11944  002D72  D7FE               	bra	u8007
 11945  002D74  F000               	nop	
 11946  002D76  968C               	bcf	3980,3,c	;volatile
 11947  002D78  0EC8               	movlw	200
 11948  002D7A                     u8017:
 11949  002D7A  D000               	nop2	
 11950  002D7C  2EE8               	decfsz	wreg,f,c
 11951  002D7E  D7FD               	bra	u8017
 11952  002D80  B04C               	btfsc	_LCDinterruptState,0,c
 11953  002D82  D002               	bra	u5585
 11954  002D84  9EF2               	bcf	intcon,7,c	;volatile
 11955  002D86  D001               	bra	u5586
 11956  002D88                     u5585:
 11957  002D88  8EF2               	bsf	intcon,7,c	;volatile
 11958  002D8A                     u5586:
 11959                           
 11960                           ;lcd.c: 53: data = (unsigned char) (data << 4);
 11961  002D8A  0100               	movlb	0	; () banked
 11962  002D8C  3981               	swapf	lcdNibble@data& (0+255),w,b
 11963  002D8E  0BF0               	andlw	240
 11964  002D90  6F81               	movwf	lcdNibble@data& (0+255),b
 11965                           
 11966                           ; BSR set to: 0
 11967                           ;lcd.c: 54: temp = (unsigned char) (data & 0xF0);
 11968  002D92  5181               	movf	lcdNibble@data& (0+255),w,b
 11969  002D94  0BF0               	andlw	240
 11970  002D96  6F80               	movwf	lcdNibble@temp& (0+255),b
 11971                           
 11972                           ; BSR set to: 0
 11973                           ;lcd.c: 55: LATD = (unsigned char) (LATD & 0x0F);
 11974  002D98  508C               	movf	3980,w,c	;volatile
 11975  002D9A  0B0F               	andlw	15
 11976  002D9C  6E8C               	movwf	3980,c	;volatile
 11977                           
 11978                           ; BSR set to: 0
 11979                           ;lcd.c: 56: LATD = (unsigned char) (temp | LATD);
 11980  002D9E  5180               	movf	lcdNibble@temp& (0+255),w,b
 11981  002DA0  108C               	iorwf	3980,w,c	;volatile
 11982  002DA2  6E8C               	movwf	3980,c	;volatile
 11983                           
 11984                           ; BSR set to: 0
 11985                           ;lcd.c: 58: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 11986  002DA4  0E00               	movlw	0
 11987  002DA6  BEF2               	btfsc	intcon,7,c	;volatile
 11988  002DA8  0E01               	movlw	1
 11989  002DAA  6E4C               	movwf	_LCDinterruptState,c
 11990                           
 11991                           ; BSR set to: 0
 11992  002DAC  9EF2               	bcf	intcon,7,c	;volatile
 11993                           
 11994                           ; BSR set to: 0
 11995  002DAE  868C               	bsf	3980,3,c	;volatile
 11996                           
 11997                           ; BSR set to: 0
 11998  002DB0  0E53               	movlw	83
 11999  002DB2                     u8027:
 12000  002DB2  2EE8               	decfsz	wreg,f,c
 12001  002DB4  D7FE               	bra	u8027
 12002  002DB6  F000               	nop	
 12003  002DB8  968C               	bcf	3980,3,c	;volatile
 12004  002DBA  0EC8               	movlw	200
 12005  002DBC                     u8037:
 12006  002DBC  D000               	nop2	
 12007  002DBE  2EE8               	decfsz	wreg,f,c
 12008  002DC0  D7FD               	bra	u8037
 12009  002DC2  B04C               	btfsc	_LCDinterruptState,0,c
 12010  002DC4  D002               	bra	u5595
 12011  002DC6  9EF2               	bcf	intcon,7,c	;volatile
 12012  002DC8  D001               	bra	u5596
 12013  002DCA                     u5595:
 12014  002DCA  8EF2               	bsf	intcon,7,c	;volatile
 12015  002DCC                     u5596:
 12016  002DCC  0012               	return		;funcret
 12017  002DCE                     __end_of_lcdNibble:
 12018                           	opt stack 0
 12019                           tosu	equ	0xFFF
 12020                           tosh	equ	0xFFE
 12021                           tosl	equ	0xFFD
 12022                           pclath	equ	0xFFA
 12023                           tblptru	equ	0xFF8
 12024                           tblptrh	equ	0xFF7
 12025                           tblptrl	equ	0xFF6
 12026                           tablat	equ	0xFF5
 12027                           prodh	equ	0xFF4
 12028                           prodl	equ	0xFF3
 12029                           intcon	equ	0xFF2
 12030                           indf0	equ	0xFEF
 12031                           postinc0	equ	0xFEE
 12032                           fsr0h	equ	0xFEA
 12033                           fsr0l	equ	0xFE9
 12034                           wreg	equ	0xFE8
 12035                           postdec1	equ	0xFE5
 12036                           plusw1	equ	0xFE3
 12037                           fsr1l	equ	0xFE1
 12038                           indf2	equ	0xFDF
 12039                           postinc2	equ	0xFDE
 12040                           postdec2	equ	0xFDD
 12041                           plusw2	equ	0xFDB
 12042                           fsr2h	equ	0xFDA
 12043                           fsr2l	equ	0xFD9
 12044                           status	equ	0xFD8
 12045                           
 12046 ;; *************** function _I2C_Master_Init *****************
 12047 ;; Defined at:
 12048 ;;		line 14 in file "I2C.c"
 12049 ;; Parameters:    Size  Location     Type
 12050 ;;  clockFreq       4   13[BANK0 ] const unsigned long 
 12051 ;; Auto vars:     Size  Location     Type
 12052 ;;		None
 12053 ;; Return value:  Size  Location     Type
 12054 ;;                  1    wreg      void 
 12055 ;; Registers used:
 12056 ;;		wreg, status,2, status,0, cstack
 12057 ;; Tracked objects:
 12058 ;;		On entry : 0/0
 12059 ;;		On exit  : 0/0
 12060 ;;		Unchanged: 0/0
 12061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12062 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12064 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12065 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12066 ;;Total ram usage:        8 bytes
 12067 ;; Hardware stack levels used:    1
 12068 ;; Hardware stack levels required when called:    5
 12069 ;; This function calls:
 12070 ;;		___lldiv
 12071 ;; This function is called by:
 12072 ;;		_main
 12073 ;; This function uses a non-reentrant model
 12074 ;;
 12075                           
 12076                           	psect	text39
 12077  002FA0                     __ptext39:
 12078                           	opt stack 0
 12079  002FA0                     _I2C_Master_Init:
 12080                           	opt stack 25
 12081                           
 12082                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
 12083                           
 12084                           ;incstack = 0
 12085  002FA0  9AC6               	bcf	4038,5,c	;volatile
 12086                           
 12087                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
 12088  002FA2  8694               	bsf	3988,3,c	;volatile
 12089                           
 12090                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
 12091  002FA4  8894               	bsf	3988,4,c	;volatile
 12092                           
 12093                           ;I2C.c: 41: SSPSTAT = 0b10000000;
 12094  002FA6  0E80               	movlw	128
 12095  002FA8  6EC7               	movwf	4039,c	;volatile
 12096                           
 12097                           ;I2C.c: 42: SSPCON1 = 0b00101000;
 12098  002FAA  0E28               	movlw	40
 12099  002FAC  6EC6               	movwf	4038,c	;volatile
 12100                           
 12101                           ;I2C.c: 43: SSPCON2 = 0b00000000;
 12102  002FAE  0E00               	movlw	0
 12103  002FB0  6EC5               	movwf	4037,c	;volatile
 12104                           
 12105                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
 12106  002FB2  0E00               	movlw	0
 12107  002FB4  0100               	movlb	0	; () banked
 12108  002FB6  6F80               	movwf	___lldiv@dividend& (0+255),b
 12109  002FB8  0E5A               	movlw	90
 12110  002FBA  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
 12111  002FBC  0E62               	movlw	98
 12112  002FBE  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
 12113  002FC0  0E02               	movlw	2
 12114  002FC2  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
 12115  002FC4  C08D  F091         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
 12116  002FC8  C08E  F092         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
 12117  002FCC  C08F  F093         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
 12118  002FD0  C090  F094         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
 12119  002FD4  0E02               	movlw	2
 12120  002FD6                     u7575:
 12121  002FD6  90D8               	bcf	status,0,c
 12122  002FD8  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
 12123  002FDA  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
 12124  002FDC  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
 12125  002FDE  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
 12126  002FE0  2EE8               	decfsz	wreg,f,c
 12127  002FE2  D7F9               	goto	u7575
 12128  002FE4  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
 12129  002FE8  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 12130  002FEC  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 12131  002FF0  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 12132  002FF4  ECE7  F016         	call	___lldiv	;wreg free
 12133  002FF8  0100               	movlb	0	; () banked
 12134  002FFA  0580               	decf	?___lldiv& (0+255),w,b
 12135  002FFC  6EC8               	movwf	4040,c	;volatile
 12136                           
 12137                           ; BSR set to: 0
 12138  002FFE  0012               	return		;funcret
 12139  003000                     __end_of_I2C_Master_Init:
 12140                           	opt stack 0
 12141                           tosu	equ	0xFFF
 12142                           tosh	equ	0xFFE
 12143                           tosl	equ	0xFFD
 12144                           pclath	equ	0xFFA
 12145                           tblptru	equ	0xFF8
 12146                           tblptrh	equ	0xFF7
 12147                           tblptrl	equ	0xFF6
 12148                           tablat	equ	0xFF5
 12149                           prodh	equ	0xFF4
 12150                           prodl	equ	0xFF3
 12151                           intcon	equ	0xFF2
 12152                           indf0	equ	0xFEF
 12153                           postinc0	equ	0xFEE
 12154                           fsr0h	equ	0xFEA
 12155                           fsr0l	equ	0xFE9
 12156                           wreg	equ	0xFE8
 12157                           postdec1	equ	0xFE5
 12158                           plusw1	equ	0xFE3
 12159                           fsr1l	equ	0xFE1
 12160                           indf2	equ	0xFDF
 12161                           postinc2	equ	0xFDE
 12162                           postdec2	equ	0xFDD
 12163                           plusw2	equ	0xFDB
 12164                           fsr2h	equ	0xFDA
 12165                           fsr2l	equ	0xFD9
 12166                           status	equ	0xFD8
 12167                           
 12168 ;; *************** function ___lldiv *****************
 12169 ;; Defined at:
 12170 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 12171 ;; Parameters:    Size  Location     Type
 12172 ;;  dividend        4    0[BANK0 ] unsigned long 
 12173 ;;  divisor         4    4[BANK0 ] unsigned long 
 12174 ;; Auto vars:     Size  Location     Type
 12175 ;;  quotient        4    8[BANK0 ] unsigned long 
 12176 ;;  counter         1   12[BANK0 ] unsigned char 
 12177 ;; Return value:  Size  Location     Type
 12178 ;;                  4    0[BANK0 ] unsigned long 
 12179 ;; Registers used:
 12180 ;;		wreg, status,2, status,0
 12181 ;; Tracked objects:
 12182 ;;		On entry : 0/0
 12183 ;;		On exit  : 0/0
 12184 ;;		Unchanged: 0/0
 12185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12186 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12187 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12189 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12190 ;;Total ram usage:       13 bytes
 12191 ;; Hardware stack levels used:    1
 12192 ;; Hardware stack levels required when called:    4
 12193 ;; This function calls:
 12194 ;;		Nothing
 12195 ;; This function is called by:
 12196 ;;		_I2C_Master_Init
 12197 ;;		__doprnt
 12198 ;; This function uses a non-reentrant model
 12199 ;;
 12200                           
 12201                           	psect	text40
 12202  002DCE                     __ptext40:
 12203                           	opt stack 0
 12204  002DCE                     ___lldiv:
 12205                           	opt stack 23
 12206                           
 12207                           ; BSR set to: 0
 12208                           ;incstack = 0
 12209  002DCE  0E00               	movlw	0
 12210  002DD0  0100               	movlb	0	; () banked
 12211  002DD2  6F88               	movwf	___lldiv@quotient& (0+255),b
 12212  002DD4  0E00               	movlw	0
 12213  002DD6  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
 12214  002DD8  0E00               	movlw	0
 12215  002DDA  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
 12216  002DDC  0E00               	movlw	0
 12217  002DDE  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
 12218                           
 12219                           ; BSR set to: 0
 12220  002DE0  5184               	movf	___lldiv@divisor& (0+255),w,b
 12221  002DE2  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 12222  002DE4  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 12223  002DE6  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 12224  002DE8  B4D8               	btfsc	status,2,c
 12225  002DEA  D02A               	goto	l1157
 12226                           
 12227                           ; BSR set to: 0
 12228  002DEC  0E01               	movlw	1
 12229  002DEE  6F8C               	movwf	___lldiv@counter& (0+255),b
 12230  002DF0  D006               	goto	l1152
 12231  002DF2                     
 12232                           ; BSR set to: 0
 12233                           
 12234                           ; BSR set to: 0
 12235  002DF2  90D8               	bcf	status,0,c
 12236  002DF4  3784               	rlcf	___lldiv@divisor& (0+255),f,b
 12237  002DF6  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 12238  002DF8  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 12239  002DFA  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 12240  002DFC  2B8C               	incf	___lldiv@counter& (0+255),f,b
 12241  002DFE                     l1152:
 12242                           
 12243                           ; BSR set to: 0
 12244                           
 12245                           ; BSR set to: 0
 12246  002DFE  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 12247  002E00  D7F8               	goto	l1153
 12248  002E02                     u5690:
 12249                           
 12250                           ; BSR set to: 0
 12251                           
 12252                           ; BSR set to: 0
 12253                           
 12254                           ; BSR set to: 0
 12255  002E02  90D8               	bcf	status,0,c
 12256  002E04  3788               	rlcf	___lldiv@quotient& (0+255),f,b
 12257  002E06  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 12258  002E08  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 12259  002E0A  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 12260                           
 12261                           ; BSR set to: 0
 12262  002E0C  5184               	movf	___lldiv@divisor& (0+255),w,b
 12263  002E0E  5D80               	subwf	___lldiv@dividend& (0+255),w,b
 12264  002E10  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 12265  002E12  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 12266  002E14  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 12267  002E16  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 12268  002E18  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 12269  002E1A  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 12270  002E1C  A0D8               	btfss	status,0,c
 12271  002E1E  D009               	goto	l1156
 12272                           
 12273                           ; BSR set to: 0
 12274  002E20  5184               	movf	___lldiv@divisor& (0+255),w,b
 12275  002E22  5F80               	subwf	___lldiv@dividend& (0+255),f,b
 12276  002E24  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 12277  002E26  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 12278  002E28  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 12279  002E2A  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 12280  002E2C  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 12281  002E2E  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 12282                           
 12283                           ; BSR set to: 0
 12284  002E30  8188               	bsf	___lldiv@quotient& (0+255),0,b
 12285  002E32                     l1156:
 12286                           
 12287                           ; BSR set to: 0
 12288                           
 12289                           ; BSR set to: 0
 12290  002E32  90D8               	bcf	status,0,c
 12291  002E34  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 12292  002E36  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 12293  002E38  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 12294  002E3A  3384               	rrcf	___lldiv@divisor& (0+255),f,b
 12295                           
 12296                           ; BSR set to: 0
 12297  002E3C  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
 12298  002E3E  D7E1               	goto	u5690
 12299  002E40                     l1157:
 12300                           
 12301                           ; BSR set to: 0
 12302                           
 12303                           ; BSR set to: 0
 12304  002E40  C088  F080         	movff	___lldiv@quotient,?___lldiv
 12305  002E44  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
 12306  002E48  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
 12307  002E4C  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
 12308                           
 12309                           ; BSR set to: 0
 12310  002E50  0012               	return		;funcret
 12311  002E52                     __end_of___lldiv:
 12312                           	opt stack 0
 12313                           tosu	equ	0xFFF
 12314                           tosh	equ	0xFFE
 12315                           tosl	equ	0xFFD
 12316                           pclath	equ	0xFFA
 12317                           tblptru	equ	0xFF8
 12318                           tblptrh	equ	0xFF7
 12319                           tblptrl	equ	0xFF6
 12320                           tablat	equ	0xFF5
 12321                           prodh	equ	0xFF4
 12322                           prodl	equ	0xFF3
 12323                           intcon	equ	0xFF2
 12324                           indf0	equ	0xFEF
 12325                           postinc0	equ	0xFEE
 12326                           fsr0h	equ	0xFEA
 12327                           fsr0l	equ	0xFE9
 12328                           wreg	equ	0xFE8
 12329                           postdec1	equ	0xFE5
 12330                           plusw1	equ	0xFE3
 12331                           fsr1l	equ	0xFE1
 12332                           indf2	equ	0xFDF
 12333                           postinc2	equ	0xFDE
 12334                           postdec2	equ	0xFDD
 12335                           plusw2	equ	0xFDB
 12336                           fsr2h	equ	0xFDA
 12337                           fsr2l	equ	0xFD9
 12338                           status	equ	0xFD8
 12339                           
 12340 ;; *************** function _interruptHandler *****************
 12341 ;; Defined at:
 12342 ;;		line 272 in file "main.c"
 12343 ;; Parameters:    Size  Location     Type
 12344 ;;		None
 12345 ;; Auto vars:     Size  Location     Type
 12346 ;;		None
 12347 ;; Return value:  Size  Location     Type
 12348 ;;                  1    wreg      void 
 12349 ;; Registers used:
 12350 ;;		wreg, status,2, status,0, cstack
 12351 ;; Tracked objects:
 12352 ;;		On entry : 0/0
 12353 ;;		On exit  : 0/0
 12354 ;;		Unchanged: 0/0
 12355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12358 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12359 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12360 ;;Total ram usage:       18 bytes
 12361 ;; Hardware stack levels used:    1
 12362 ;; Hardware stack levels required when called:    3
 12363 ;; This function calls:
 12364 ;;		_tmr0_ISR
 12365 ;; This function is called by:
 12366 ;;		Interrupt level 2
 12367 ;; This function uses a non-reentrant model
 12368 ;;
 12369                           
 12370                           	psect	intcode
 12371  000008                     __pintcode:
 12372                           	opt stack 0
 12373  000008                     _interruptHandler:
 12374                           	opt stack 21
 12375                           
 12376                           ; BSR set to: 0
 12377                           ;incstack = 0
 12378  000008  8265               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 12379  00000A  ED32  F015         	call	int_func,f	;refresh shadow registers
 12380                           tosu	equ	0xFFF
 12381                           tosh	equ	0xFFE
 12382                           tosl	equ	0xFFD
 12383                           pclath	equ	0xFFA
 12384                           tblptru	equ	0xFF8
 12385                           tblptrh	equ	0xFF7
 12386                           tblptrl	equ	0xFF6
 12387                           tablat	equ	0xFF5
 12388                           prodh	equ	0xFF4
 12389                           prodl	equ	0xFF3
 12390                           intcon	equ	0xFF2
 12391                           indf0	equ	0xFEF
 12392                           postinc0	equ	0xFEE
 12393                           fsr0h	equ	0xFEA
 12394                           fsr0l	equ	0xFE9
 12395                           wreg	equ	0xFE8
 12396                           postdec1	equ	0xFE5
 12397                           plusw1	equ	0xFE3
 12398                           fsr1l	equ	0xFE1
 12399                           indf2	equ	0xFDF
 12400                           postinc2	equ	0xFDE
 12401                           postdec2	equ	0xFDD
 12402                           plusw2	equ	0xFDB
 12403                           fsr2h	equ	0xFDA
 12404                           fsr2l	equ	0xFD9
 12405                           status	equ	0xFD8
 12406                           
 12407                           	psect	intcode_body
 12408  002A64                     __pintcode_body:
 12409                           	opt stack 21
 12410  002A64                     int_func:
 12411                           	opt stack 21
 12412  002A64  0006               	pop		; remove dummy address from shadow register refresh
 12413  002A66  CFFA F022          	movff	pclath,??_interruptHandler
 12414  002A6A  CFFB F023          	movff	pclatu,??_interruptHandler+1
 12415  002A6E  CFE9 F024          	movff	fsr0l,??_interruptHandler+2
 12416  002A72  CFEA F025          	movff	fsr0h,??_interruptHandler+3
 12417  002A76  CFE1 F026          	movff	fsr1l,??_interruptHandler+4
 12418  002A7A  CFE2 F027          	movff	fsr1h,??_interruptHandler+5
 12419  002A7E  CFD9 F028          	movff	fsr2l,??_interruptHandler+6
 12420  002A82  CFDA F029          	movff	fsr2h,??_interruptHandler+7
 12421  002A86  CFF3 F02A          	movff	prodl,??_interruptHandler+8
 12422  002A8A  CFF4 F02B          	movff	prodh,??_interruptHandler+9
 12423  002A8E  CFF6 F02C          	movff	tblptrl,??_interruptHandler+10
 12424  002A92  CFF7 F02D          	movff	tblptrh,??_interruptHandler+11
 12425  002A96  CFF8 F02E          	movff	tblptru,??_interruptHandler+12
 12426  002A9A  CFF5 F02F          	movff	tablat,??_interruptHandler+13
 12427  002A9E  C065  F030         	movff	btemp,??_interruptHandler+14
 12428  002AA2  C066  F031         	movff	btemp+1,??_interruptHandler+15
 12429  002AA6  C067  F032         	movff	btemp+2,??_interruptHandler+16
 12430  002AAA  C068  F033         	movff	btemp+3,??_interruptHandler+17
 12431                           
 12432                           ;main.c: 273: if (T0IE && T0IF) {
 12433  002AAE  BAF2               	btfsc	intcon,5,c	;volatile
 12434  002AB0  A4F2               	btfss	intcon,2,c	;volatile
 12435  002AB2  D003               	goto	i2l180
 12436                           
 12437                           ;main.c: 274: T0IF = 0;
 12438  002AB4  94F2               	bcf	intcon,2,c	;volatile
 12439                           
 12440                           ;main.c: 275: tmr0_ISR();
 12441  002AB6  EC18  F00C         	call	_tmr0_ISR	;wreg free
 12442  002ABA                     i2l180:
 12443  002ABA  C033  F068         	movff	??_interruptHandler+17,btemp+3
 12444  002ABE  C032  F067         	movff	??_interruptHandler+16,btemp+2
 12445  002AC2  C031  F066         	movff	??_interruptHandler+15,btemp+1
 12446  002AC6  C030  F065         	movff	??_interruptHandler+14,btemp
 12447  002ACA  C02F  FFF5         	movff	??_interruptHandler+13,tablat
 12448  002ACE  C02E  FFF8         	movff	??_interruptHandler+12,tblptru
 12449  002AD2  C02D  FFF7         	movff	??_interruptHandler+11,tblptrh
 12450  002AD6  C02C  FFF6         	movff	??_interruptHandler+10,tblptrl
 12451  002ADA  C02B  FFF4         	movff	??_interruptHandler+9,prodh
 12452  002ADE  C02A  FFF3         	movff	??_interruptHandler+8,prodl
 12453  002AE2  C029  FFDA         	movff	??_interruptHandler+7,fsr2h
 12454  002AE6  C028  FFD9         	movff	??_interruptHandler+6,fsr2l
 12455  002AEA  C027  FFE2         	movff	??_interruptHandler+5,fsr1h
 12456  002AEE  C026  FFE1         	movff	??_interruptHandler+4,fsr1l
 12457  002AF2  C025  FFEA         	movff	??_interruptHandler+3,fsr0h
 12458  002AF6  C024  FFE9         	movff	??_interruptHandler+2,fsr0l
 12459  002AFA  C023  FFFB         	movff	??_interruptHandler+1,pclatu
 12460  002AFE  C022  FFFA         	movff	??_interruptHandler,pclath
 12461  002B02  9265               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 12462  002B04  0011               	retfie		f
 12463  002B06                     __end_of_interruptHandler:
 12464                           	opt stack 0
 12465                           tosu	equ	0xFFF
 12466                           tosh	equ	0xFFE
 12467                           tosl	equ	0xFFD
 12468                           pclatu	equ	0xFFB
 12469                           pclath	equ	0xFFA
 12470                           tblptru	equ	0xFF8
 12471                           tblptrh	equ	0xFF7
 12472                           tblptrl	equ	0xFF6
 12473                           tablat	equ	0xFF5
 12474                           prodh	equ	0xFF4
 12475                           prodl	equ	0xFF3
 12476                           intcon	equ	0xFF2
 12477                           indf0	equ	0xFEF
 12478                           postinc0	equ	0xFEE
 12479                           fsr0h	equ	0xFEA
 12480                           fsr0l	equ	0xFE9
 12481                           wreg	equ	0xFE8
 12482                           postdec1	equ	0xFE5
 12483                           plusw1	equ	0xFE3
 12484                           fsr1h	equ	0xFE2
 12485                           fsr1l	equ	0xFE1
 12486                           indf2	equ	0xFDF
 12487                           postinc2	equ	0xFDE
 12488                           postdec2	equ	0xFDD
 12489                           plusw2	equ	0xFDB
 12490                           fsr2h	equ	0xFDA
 12491                           fsr2l	equ	0xFD9
 12492                           status	equ	0xFD8
 12493                           
 12494 ;; *************** function _tmr0_ISR *****************
 12495 ;; Defined at:
 12496 ;;		line 103 in file "timer.c"
 12497 ;; Parameters:    Size  Location     Type
 12498 ;;		None
 12499 ;; Auto vars:     Size  Location     Type
 12500 ;;  motorControl    2   31[COMRAM] unsigned int 
 12501 ;;  motorControl    2   29[COMRAM] unsigned int 
 12502 ;;  motorControl    2   27[COMRAM] unsigned int 
 12503 ;;  motorControl    2   25[COMRAM] unsigned int 
 12504 ;; Return value:  Size  Location     Type
 12505 ;;                  1    wreg      void 
 12506 ;; Registers used:
 12507 ;;		wreg, status,2, status,0, cstack
 12508 ;; Tracked objects:
 12509 ;;		On entry : 0/0
 12510 ;;		On exit  : 0/0
 12511 ;;		Unchanged: 0/0
 12512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12514 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12515 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12516 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12517 ;;Total ram usage:       13 bytes
 12518 ;; Hardware stack levels used:    1
 12519 ;; Hardware stack levels required when called:    2
 12520 ;; This function calls:
 12521 ;;		_inverseDir
 12522 ;;		_resetMotorTimer
 12523 ;;		i2___ftadd
 12524 ;;		i2_motorControl
 12525 ;; This function is called by:
 12526 ;;		_interruptHandler
 12527 ;; This function uses a non-reentrant model
 12528 ;;
 12529                           
 12530                           	psect	text42
 12531  001830                     __ptext42:
 12532                           	opt stack 0
 12533  001830                     _tmr0_ISR:
 12534                           	opt stack 21
 12535                           
 12536                           ;timer.c: 104: timeSinceLastTic += 0.1;
 12537                           
 12538                           ;incstack = 0
 12539  001830  C059  F009         	movff	_timeSinceLastTic,i2___ftadd@f1	;volatile
 12540  001834  C05A  F00A         	movff	_timeSinceLastTic+1,i2___ftadd@f1+1	;volatile
 12541  001838  C05B  F00B         	movff	_timeSinceLastTic+2,i2___ftadd@f1+2	;volatile
 12542  00183C  0ECD               	movlw	205
 12543  00183E  6E0C               	movwf	i2___ftadd@f2,c
 12544  001840  0ECC               	movlw	204
 12545  001842  6E0D               	movwf	i2___ftadd@f2+1,c
 12546  001844  0E3D               	movlw	61
 12547  001846  6E0E               	movwf	i2___ftadd@f2+2,c
 12548  001848  ECF8  F011         	call	i2___ftadd	;wreg free
 12549  00184C  C009  F059         	movff	?i2___ftadd,_timeSinceLastTic	;volatile
 12550  001850  C00A  F05A         	movff	?i2___ftadd+1,_timeSinceLastTic+1	;volatile
 12551  001854  C00B  F05B         	movff	?i2___ftadd+2,_timeSinceLastTic+2	;volatile
 12552                           
 12553                           ;timer.c: 105: test++;
 12554  001858  0E01               	movlw	1
 12555  00185A  0101               	movlb	1	; () banked
 12556  00185C  27DA               	addwf	_test& (0+255),f,b	;volatile
 12557  00185E  0E00               	movlw	0
 12558  001860  23DB               	addwfc	(_test+1)& (0+255),f,b	;volatile
 12559  001862  23DC               	addwfc	(_test+2)& (0+255),f,b	;volatile
 12560  001864  23DD               	addwfc	(_test+3)& (0+255),f,b	;volatile
 12561                           
 12562                           ; BSR set to: 1
 12563                           ;timer.c: 106: if (operating) operatingTime += 0.1;
 12564  001866  504B               	movf	_operating,w,c
 12565  001868  B4D8               	btfsc	status,2,c
 12566  00186A  D014               	goto	i2l653
 12567                           
 12568                           ; BSR set to: 1
 12569  00186C  C05C  F009         	movff	timer@operatingTime,i2___ftadd@f1	;volatile
 12570  001870  C05D  F00A         	movff	timer@operatingTime+1,i2___ftadd@f1+1	;volatile
 12571  001874  C05E  F00B         	movff	timer@operatingTime+2,i2___ftadd@f1+2	;volatile
 12572  001878  0ECD               	movlw	205
 12573  00187A  6E0C               	movwf	i2___ftadd@f2,c
 12574  00187C  0ECC               	movlw	204
 12575  00187E  6E0D               	movwf	i2___ftadd@f2+1,c
 12576  001880  0E3D               	movlw	61
 12577  001882  6E0E               	movwf	i2___ftadd@f2+2,c
 12578  001884  ECF8  F011         	call	i2___ftadd	;wreg free
 12579  001888  C009  F05C         	movff	?i2___ftadd,timer@operatingTime	;volatile
 12580  00188C  C00A  F05D         	movff	?i2___ftadd+1,timer@operatingTime+1	;volatile
 12581  001890  C00B  F05E         	movff	?i2___ftadd+2,timer@operatingTime+2	;volatile
 12582  001894                     i2l653:
 12583                           
 12584                           ;timer.c: 107: TMR0H = 0xF9;
 12585  001894  0EF9               	movlw	249
 12586  001896  6ED7               	movwf	4055,c	;volatile
 12587                           
 12588                           ;timer.c: 108: TMR0L = 0x5F;
 12589  001898  0E5F               	movlw	95
 12590  00189A  6ED6               	movwf	4054,c	;volatile
 12591                           
 12592                           ;timer.c: 109: unsigned int motorControlTimerB = (motorControlTimerB > longTolerance) ? 
      +                          0 : motorControlTimerB + 1;
 12593  00189C  501A               	movf	tmr0_ISR@motorControlTimerB,w,c
 12594  00189E  6E15               	movwf	??_tmr0_ISR& (0+255),c
 12595  0018A0  501B               	movf	tmr0_ISR@motorControlTimerB+1,w,c
 12596  0018A2  6E16               	movwf	(??_tmr0_ISR+1)& (0+255),c
 12597  0018A4  6A17               	clrf	(??_tmr0_ISR+2)& (0+255),c
 12598  0018A6  6A18               	clrf	(??_tmr0_ISR+3)& (0+255),c
 12599  0018A8  5015               	movf	??_tmr0_ISR,w,c
 12600  0018AA  5C51               	subwf	_longTolerance,w,c
 12601  0018AC  5016               	movf	??_tmr0_ISR+1,w,c
 12602  0018AE  5852               	subwfb	_longTolerance+1,w,c
 12603  0018B0  5017               	movf	??_tmr0_ISR+2,w,c
 12604  0018B2  5853               	subwfb	_longTolerance+2,w,c
 12605  0018B4  5054               	movf	_longTolerance+3,w,c
 12606  0018B6  0A80               	xorlw	128
 12607  0018B8  6E19               	movwf	(??_tmr0_ISR+4)& (0+255),c
 12608  0018BA  5018               	movf	??_tmr0_ISR+3,w,c
 12609  0018BC  0A80               	xorlw	128
 12610  0018BE  5819               	subwfb	(??_tmr0_ISR+4)& (0+255),w,c
 12611  0018C0  A0D8               	btfss	status,0,c
 12612  0018C2  D007               	goto	i2l655
 12613  0018C4  0E01               	movlw	1
 12614  0018C6  241A               	addwf	tmr0_ISR@motorControlTimerB,w,c
 12615  0018C8  6E1A               	movwf	tmr0_ISR@motorControlTimerB,c
 12616  0018CA  0E00               	movlw	0
 12617  0018CC  201B               	addwfc	tmr0_ISR@motorControlTimerB+1,w,c
 12618  0018CE  6E1B               	movwf	tmr0_ISR@motorControlTimerB+1,c
 12619  0018D0  D004               	goto	i2l657
 12620  0018D2                     i2l655:
 12621  0018D2  0E00               	movlw	0
 12622  0018D4  6E1B               	movwf	tmr0_ISR@motorControlTimerB+1,c
 12623  0018D6  0E00               	movlw	0
 12624  0018D8  6E1A               	movwf	tmr0_ISR@motorControlTimerB,c
 12625  0018DA                     i2l657:
 12626                           
 12627                           ;timer.c: 110: unsigned int motorControlTimerN = (motorControlTimerN > longTolerance) ? 
      +                          0 : motorControlTimerN + 1;
 12628  0018DA  501C               	movf	tmr0_ISR@motorControlTimerN,w,c
 12629  0018DC  6E15               	movwf	??_tmr0_ISR& (0+255),c
 12630  0018DE  501D               	movf	tmr0_ISR@motorControlTimerN+1,w,c
 12631  0018E0  6E16               	movwf	(??_tmr0_ISR+1)& (0+255),c
 12632  0018E2  6A17               	clrf	(??_tmr0_ISR+2)& (0+255),c
 12633  0018E4  6A18               	clrf	(??_tmr0_ISR+3)& (0+255),c
 12634  0018E6  5015               	movf	??_tmr0_ISR,w,c
 12635  0018E8  5C51               	subwf	_longTolerance,w,c
 12636  0018EA  5016               	movf	??_tmr0_ISR+1,w,c
 12637  0018EC  5852               	subwfb	_longTolerance+1,w,c
 12638  0018EE  5017               	movf	??_tmr0_ISR+2,w,c
 12639  0018F0  5853               	subwfb	_longTolerance+2,w,c
 12640  0018F2  5054               	movf	_longTolerance+3,w,c
 12641  0018F4  0A80               	xorlw	128
 12642  0018F6  6E19               	movwf	(??_tmr0_ISR+4)& (0+255),c
 12643  0018F8  5018               	movf	??_tmr0_ISR+3,w,c
 12644  0018FA  0A80               	xorlw	128
 12645  0018FC  5819               	subwfb	(??_tmr0_ISR+4)& (0+255),w,c
 12646  0018FE  A0D8               	btfss	status,0,c
 12647  001900  D007               	goto	i2l659
 12648  001902  0E01               	movlw	1
 12649  001904  241C               	addwf	tmr0_ISR@motorControlTimerN,w,c
 12650  001906  6E1C               	movwf	tmr0_ISR@motorControlTimerN,c
 12651  001908  0E00               	movlw	0
 12652  00190A  201D               	addwfc	tmr0_ISR@motorControlTimerN+1,w,c
 12653  00190C  6E1D               	movwf	tmr0_ISR@motorControlTimerN+1,c
 12654  00190E  D004               	goto	i2l661
 12655  001910                     i2l659:
 12656  001910  0E00               	movlw	0
 12657  001912  6E1D               	movwf	tmr0_ISR@motorControlTimerN+1,c
 12658  001914  0E00               	movlw	0
 12659  001916  6E1C               	movwf	tmr0_ISR@motorControlTimerN,c
 12660  001918                     i2l661:
 12661                           
 12662                           ;timer.c: 111: unsigned int motorControlTimerS = (motorControlTimerS > longTolerance) ? 
      +                          0 : motorControlTimerS + 1;
 12663  001918  501E               	movf	tmr0_ISR@motorControlTimerS,w,c
 12664  00191A  6E15               	movwf	??_tmr0_ISR& (0+255),c
 12665  00191C  501F               	movf	tmr0_ISR@motorControlTimerS+1,w,c
 12666  00191E  6E16               	movwf	(??_tmr0_ISR+1)& (0+255),c
 12667  001920  6A17               	clrf	(??_tmr0_ISR+2)& (0+255),c
 12668  001922  6A18               	clrf	(??_tmr0_ISR+3)& (0+255),c
 12669  001924  5015               	movf	??_tmr0_ISR,w,c
 12670  001926  5C51               	subwf	_longTolerance,w,c
 12671  001928  5016               	movf	??_tmr0_ISR+1,w,c
 12672  00192A  5852               	subwfb	_longTolerance+1,w,c
 12673  00192C  5017               	movf	??_tmr0_ISR+2,w,c
 12674  00192E  5853               	subwfb	_longTolerance+2,w,c
 12675  001930  5054               	movf	_longTolerance+3,w,c
 12676  001932  0A80               	xorlw	128
 12677  001934  6E19               	movwf	(??_tmr0_ISR+4)& (0+255),c
 12678  001936  5018               	movf	??_tmr0_ISR+3,w,c
 12679  001938  0A80               	xorlw	128
 12680  00193A  5819               	subwfb	(??_tmr0_ISR+4)& (0+255),w,c
 12681  00193C  A0D8               	btfss	status,0,c
 12682  00193E  D007               	goto	i2l663
 12683  001940  0E01               	movlw	1
 12684  001942  241E               	addwf	tmr0_ISR@motorControlTimerS,w,c
 12685  001944  6E1E               	movwf	tmr0_ISR@motorControlTimerS,c
 12686  001946  0E00               	movlw	0
 12687  001948  201F               	addwfc	tmr0_ISR@motorControlTimerS+1,w,c
 12688  00194A  6E1F               	movwf	tmr0_ISR@motorControlTimerS+1,c
 12689  00194C  D004               	goto	i2l665
 12690  00194E                     i2l663:
 12691  00194E  0E00               	movlw	0
 12692  001950  6E1F               	movwf	tmr0_ISR@motorControlTimerS+1,c
 12693  001952  0E00               	movlw	0
 12694  001954  6E1E               	movwf	tmr0_ISR@motorControlTimerS,c
 12695  001956                     i2l665:
 12696                           
 12697                           ;timer.c: 112: unsigned int motorControlTimerW = (motorControlTimerW > longTolerance) ? 
      +                          0 : motorControlTimerW + 1;
 12698  001956  5020               	movf	tmr0_ISR@motorControlTimerW,w,c
 12699  001958  6E15               	movwf	??_tmr0_ISR& (0+255),c
 12700  00195A  5021               	movf	tmr0_ISR@motorControlTimerW+1,w,c
 12701  00195C  6E16               	movwf	(??_tmr0_ISR+1)& (0+255),c
 12702  00195E  6A17               	clrf	(??_tmr0_ISR+2)& (0+255),c
 12703  001960  6A18               	clrf	(??_tmr0_ISR+3)& (0+255),c
 12704  001962  5015               	movf	??_tmr0_ISR,w,c
 12705  001964  5C51               	subwf	_longTolerance,w,c
 12706  001966  5016               	movf	??_tmr0_ISR+1,w,c
 12707  001968  5852               	subwfb	_longTolerance+1,w,c
 12708  00196A  5017               	movf	??_tmr0_ISR+2,w,c
 12709  00196C  5853               	subwfb	_longTolerance+2,w,c
 12710  00196E  5054               	movf	_longTolerance+3,w,c
 12711  001970  0A80               	xorlw	128
 12712  001972  6E19               	movwf	(??_tmr0_ISR+4)& (0+255),c
 12713  001974  5018               	movf	??_tmr0_ISR+3,w,c
 12714  001976  0A80               	xorlw	128
 12715  001978  5819               	subwfb	(??_tmr0_ISR+4)& (0+255),w,c
 12716  00197A  A0D8               	btfss	status,0,c
 12717  00197C  D007               	goto	i2l667
 12718  00197E  0E01               	movlw	1
 12719  001980  2420               	addwf	tmr0_ISR@motorControlTimerW,w,c
 12720  001982  6E20               	movwf	tmr0_ISR@motorControlTimerW,c
 12721  001984  0E00               	movlw	0
 12722  001986  2021               	addwfc	tmr0_ISR@motorControlTimerW+1,w,c
 12723  001988  6E21               	movwf	tmr0_ISR@motorControlTimerW+1,c
 12724  00198A  D11A               	goto	i2l670
 12725  00198C                     i2l667:
 12726  00198C  0E00               	movlw	0
 12727  00198E  6E21               	movwf	tmr0_ISR@motorControlTimerW+1,c
 12728  001990  0E00               	movlw	0
 12729  001992  6E20               	movwf	tmr0_ISR@motorControlTimerW,c
 12730                           
 12731                           ;timer.c: 169: switch (currentMode) {
 12732  001994  D115               	goto	i2l670
 12733  001996                     
 12734                           ;timer.c: 171: case CLEARING:
 12735                           ;timer.c: 172: if (currentMotorDir.w != STOPMOTOR) {
 12736  001996  0E02               	movlw	2
 12737  001998  1858               	xorwf	_currentMotorDir+3,w,c
 12738  00199A  B4D8               	btfsc	status,2,c
 12739  00199C  D03F               	goto	i2l677
 12740                           
 12741                           ;timer.c: 173: if (!motorGoingBackwards.w) {
 12742  00199E  5043               	movf	_motorGoingBackwards+3,w,c	;volatile
 12743  0019A0  A4D8               	btfss	status,2,c
 12744  0019A2  D01C               	goto	i2l674
 12745                           
 12746                           ;timer.c: 174: if (motorControlTimerW == longTolerance) {
 12747  0019A4  5020               	movf	tmr0_ISR@motorControlTimerW,w,c
 12748  0019A6  6E15               	movwf	??_tmr0_ISR& (0+255),c
 12749  0019A8  5021               	movf	tmr0_ISR@motorControlTimerW+1,w,c
 12750  0019AA  6E16               	movwf	(??_tmr0_ISR+1)& (0+255),c
 12751  0019AC  6A17               	clrf	(??_tmr0_ISR+2)& (0+255),c
 12752  0019AE  6A18               	clrf	(??_tmr0_ISR+3)& (0+255),c
 12753  0019B0  5051               	movf	_longTolerance,w,c
 12754  0019B2  1815               	xorwf	??_tmr0_ISR,w,c
 12755  0019B4  E133               	bnz	i2l4513
 12756  0019B6  5052               	movf	_longTolerance+1,w,c
 12757  0019B8  1816               	xorwf	??_tmr0_ISR+1,w,c
 12758  0019BA  E130               	bnz	i2l4513
 12759  0019BC  5053               	movf	_longTolerance+2,w,c
 12760  0019BE  1817               	xorwf	??_tmr0_ISR+2,w,c
 12761  0019C0  E12D               	bnz	i2l4513
 12762  0019C2  5054               	movf	_longTolerance+3,w,c
 12763  0019C4  1818               	xorwf	??_tmr0_ISR+3,w,c
 12764  0019C6  A4D8               	btfss	status,2,c
 12765  0019C8  D029               	goto	i2l677
 12766                           
 12767                           ;timer.c: 175: motorControl(WASHER, inverseDir(currentMotorDir.w));
 12768  0019CA  5058               	movf	_currentMotorDir+3,w,c
 12769  0019CC  ECA3  F019         	call	_inverseDir
 12770  0019D0  6E02               	movwf	i2motorControl@dir,c
 12771  0019D2  0E03               	movlw	3
 12772  0019D4  ECC9  F013         	call	i2_motorControl
 12773                           
 12774                           ;timer.c: 176: motorGoingBackwards.w = 1;
 12775  0019D8  0E01               	movlw	1
 12776  0019DA  D01B               	goto	L14
 12777  0019DC                     i2l674:
 12778                           
 12779                           ;timer.c: 180: if (motorControlTimerW == shortTolerance) {
 12780  0019DC  5020               	movf	tmr0_ISR@motorControlTimerW,w,c
 12781  0019DE  6E15               	movwf	??_tmr0_ISR& (0+255),c
 12782  0019E0  5021               	movf	tmr0_ISR@motorControlTimerW+1,w,c
 12783  0019E2  6E16               	movwf	(??_tmr0_ISR+1)& (0+255),c
 12784  0019E4  6A17               	clrf	(??_tmr0_ISR+2)& (0+255),c
 12785  0019E6  6A18               	clrf	(??_tmr0_ISR+3)& (0+255),c
 12786  0019E8  504D               	movf	_shortTolerance,w,c
 12787  0019EA  1815               	xorwf	??_tmr0_ISR,w,c
 12788  0019EC  E117               	bnz	i2l4513
 12789  0019EE  504E               	movf	_shortTolerance+1,w,c
 12790  0019F0  1816               	xorwf	??_tmr0_ISR+1,w,c
 12791  0019F2  E114               	bnz	i2l4513
 12792  0019F4  504F               	movf	_shortTolerance+2,w,c
 12793  0019F6  1817               	xorwf	??_tmr0_ISR+2,w,c
 12794  0019F8  E111               	bnz	i2l4513
 12795  0019FA  5050               	movf	_shortTolerance+3,w,c
 12796  0019FC  1818               	xorwf	??_tmr0_ISR+3,w,c
 12797  0019FE  A4D8               	btfss	status,2,c
 12798  001A00  D00D               	goto	i2l677
 12799                           
 12800                           ;timer.c: 181: motorControl(WASHER, inverseDir(currentMotorDir.w));
 12801  001A02  5058               	movf	_currentMotorDir+3,w,c
 12802  001A04  ECA3  F019         	call	_inverseDir
 12803  001A08  6E02               	movwf	i2motorControl@dir,c
 12804  001A0A  0E03               	movlw	3
 12805  001A0C  ECC9  F013         	call	i2_motorControl
 12806                           
 12807                           ;timer.c: 182: motorGoingBackwards.w = 0;
 12808  001A10  0E00               	movlw	0
 12809  001A12                     L14:
 12810  001A12  6E43               	movwf	_motorGoingBackwards+3,c	;volatile
 12811                           
 12812                           ;timer.c: 183: motorControlTimerW = 0;
 12813  001A14  0E00               	movlw	0
 12814  001A16  6E21               	movwf	tmr0_ISR@motorControlTimerW+1,c
 12815  001A18  0E00               	movlw	0
 12816  001A1A  6E20               	movwf	tmr0_ISR@motorControlTimerW,c
 12817  001A1C                     i2l677:
 12818  001A1C                     i2l4513:
 12819                           
 12820                           ;timer.c: 184: }
 12821                           ;timer.c: 185: }
 12822                           ;timer.c: 186: }
 12823                           ;timer.c: 192: if (currentMotorDir.b != STOPMOTOR) {
 12824  001A1C  0E02               	movlw	2
 12825  001A1E  1855               	xorwf	_currentMotorDir,w,c
 12826  001A20  B4D8               	btfsc	status,2,c
 12827  001A22  D03F               	goto	i2l682
 12828                           
 12829                           ;timer.c: 193: if (!motorGoingBackwards.b) {
 12830  001A24  5040               	movf	_motorGoingBackwards,w,c	;volatile
 12831  001A26  A4D8               	btfss	status,2,c
 12832  001A28  D01C               	goto	i2l679
 12833                           
 12834                           ;timer.c: 194: if (motorControlTimerB == longTolerance) {
 12835  001A2A  501A               	movf	tmr0_ISR@motorControlTimerB,w,c
 12836  001A2C  6E15               	movwf	??_tmr0_ISR& (0+255),c
 12837  001A2E  501B               	movf	tmr0_ISR@motorControlTimerB+1,w,c
 12838  001A30  6E16               	movwf	(??_tmr0_ISR+1)& (0+255),c
 12839  001A32  6A17               	clrf	(??_tmr0_ISR+2)& (0+255),c
 12840  001A34  6A18               	clrf	(??_tmr0_ISR+3)& (0+255),c
 12841  001A36  5051               	movf	_longTolerance,w,c
 12842  001A38  1815               	xorwf	??_tmr0_ISR,w,c
 12843  001A3A  E133               	bnz	i2l4533
 12844  001A3C  5052               	movf	_longTolerance+1,w,c
 12845  001A3E  1816               	xorwf	??_tmr0_ISR+1,w,c
 12846  001A40  E130               	bnz	i2l4533
 12847  001A42  5053               	movf	_longTolerance+2,w,c
 12848  001A44  1817               	xorwf	??_tmr0_ISR+2,w,c
 12849  001A46  E12D               	bnz	i2l4533
 12850  001A48  5054               	movf	_longTolerance+3,w,c
 12851  001A4A  1818               	xorwf	??_tmr0_ISR+3,w,c
 12852  001A4C  A4D8               	btfss	status,2,c
 12853  001A4E  D029               	goto	i2l682
 12854                           
 12855                           ;timer.c: 195: motorControl(BOLT, inverseDir(currentMotorDir.b));
 12856  001A50  5055               	movf	_currentMotorDir,w,c
 12857  001A52  ECA3  F019         	call	_inverseDir
 12858  001A56  6E02               	movwf	i2motorControl@dir,c
 12859  001A58  0E00               	movlw	0
 12860  001A5A  ECC9  F013         	call	i2_motorControl
 12861                           
 12862                           ;timer.c: 196: motorGoingBackwards.b = 1;
 12863  001A5E  0E01               	movlw	1
 12864  001A60  D01B               	goto	L15
 12865  001A62                     i2l679:
 12866                           
 12867                           ;timer.c: 200: if (motorControlTimerB == shortTolerance) {
 12868  001A62  501A               	movf	tmr0_ISR@motorControlTimerB,w,c
 12869  001A64  6E15               	movwf	??_tmr0_ISR& (0+255),c
 12870  001A66  501B               	movf	tmr0_ISR@motorControlTimerB+1,w,c
 12871  001A68  6E16               	movwf	(??_tmr0_ISR+1)& (0+255),c
 12872  001A6A  6A17               	clrf	(??_tmr0_ISR+2)& (0+255),c
 12873  001A6C  6A18               	clrf	(??_tmr0_ISR+3)& (0+255),c
 12874  001A6E  504D               	movf	_shortTolerance,w,c
 12875  001A70  1815               	xorwf	??_tmr0_ISR,w,c
 12876  001A72  E117               	bnz	i2l4533
 12877  001A74  504E               	movf	_shortTolerance+1,w,c
 12878  001A76  1816               	xorwf	??_tmr0_ISR+1,w,c
 12879  001A78  E114               	bnz	i2l4533
 12880  001A7A  504F               	movf	_shortTolerance+2,w,c
 12881  001A7C  1817               	xorwf	??_tmr0_ISR+2,w,c
 12882  001A7E  E111               	bnz	i2l4533
 12883  001A80  5050               	movf	_shortTolerance+3,w,c
 12884  001A82  1818               	xorwf	??_tmr0_ISR+3,w,c
 12885  001A84  A4D8               	btfss	status,2,c
 12886  001A86  D00D               	goto	i2l682
 12887                           
 12888                           ;timer.c: 201: motorControl(BOLT, inverseDir(currentMotorDir.b));
 12889  001A88  5055               	movf	_currentMotorDir,w,c
 12890  001A8A  ECA3  F019         	call	_inverseDir
 12891  001A8E  6E02               	movwf	i2motorControl@dir,c
 12892  001A90  0E00               	movlw	0
 12893  001A92  ECC9  F013         	call	i2_motorControl
 12894                           
 12895                           ;timer.c: 202: motorGoingBackwards.b = 0;
 12896  001A96  0E00               	movlw	0
 12897  001A98                     L15:
 12898  001A98  6E40               	movwf	_motorGoingBackwards,c	;volatile
 12899                           
 12900                           ;timer.c: 203: motorControlTimerB = 0;
 12901  001A9A  0E00               	movlw	0
 12902  001A9C  6E1B               	movwf	tmr0_ISR@motorControlTimerB+1,c
 12903  001A9E  0E00               	movlw	0
 12904  001AA0  6E1A               	movwf	tmr0_ISR@motorControlTimerB,c
 12905  001AA2                     i2l682:
 12906  001AA2                     i2l4533:
 12907                           
 12908                           ;timer.c: 204: }
 12909                           ;timer.c: 205: }
 12910                           ;timer.c: 206: }
 12911                           ;timer.c: 208: if (currentMotorDir.n != STOPMOTOR) {
 12912  001AA2  0E02               	movlw	2
 12913  001AA4  1856               	xorwf	_currentMotorDir+1,w,c
 12914  001AA6  B4D8               	btfsc	status,2,c
 12915  001AA8  D03F               	goto	i2l687
 12916                           
 12917                           ;timer.c: 209: if (!motorGoingBackwards.n) {
 12918  001AAA  5041               	movf	_motorGoingBackwards+1,w,c	;volatile
 12919  001AAC  A4D8               	btfss	status,2,c
 12920  001AAE  D01C               	goto	i2l684
 12921                           
 12922                           ;timer.c: 210: if (motorControlTimerN == longTolerance) {
 12923  001AB0  501C               	movf	tmr0_ISR@motorControlTimerN,w,c
 12924  001AB2  6E15               	movwf	??_tmr0_ISR& (0+255),c
 12925  001AB4  501D               	movf	tmr0_ISR@motorControlTimerN+1,w,c
 12926  001AB6  6E16               	movwf	(??_tmr0_ISR+1)& (0+255),c
 12927  001AB8  6A17               	clrf	(??_tmr0_ISR+2)& (0+255),c
 12928  001ABA  6A18               	clrf	(??_tmr0_ISR+3)& (0+255),c
 12929  001ABC  5051               	movf	_longTolerance,w,c
 12930  001ABE  1815               	xorwf	??_tmr0_ISR,w,c
 12931  001AC0  E133               	bnz	i2l4553
 12932  001AC2  5052               	movf	_longTolerance+1,w,c
 12933  001AC4  1816               	xorwf	??_tmr0_ISR+1,w,c
 12934  001AC6  E130               	bnz	i2l4553
 12935  001AC8  5053               	movf	_longTolerance+2,w,c
 12936  001ACA  1817               	xorwf	??_tmr0_ISR+2,w,c
 12937  001ACC  E12D               	bnz	i2l4553
 12938  001ACE  5054               	movf	_longTolerance+3,w,c
 12939  001AD0  1818               	xorwf	??_tmr0_ISR+3,w,c
 12940  001AD2  A4D8               	btfss	status,2,c
 12941  001AD4  D029               	goto	i2l687
 12942                           
 12943                           ;timer.c: 211: motorControl(NUT, inverseDir(currentMotorDir.n));
 12944  001AD6  5056               	movf	_currentMotorDir+1,w,c
 12945  001AD8  ECA3  F019         	call	_inverseDir
 12946  001ADC  6E02               	movwf	i2motorControl@dir,c
 12947  001ADE  0E01               	movlw	1
 12948  001AE0  ECC9  F013         	call	i2_motorControl
 12949                           
 12950                           ;timer.c: 212: motorGoingBackwards.n = 1;
 12951  001AE4  0E01               	movlw	1
 12952  001AE6  D01B               	goto	L16
 12953  001AE8                     i2l684:
 12954                           
 12955                           ;timer.c: 216: if (motorControlTimerN == shortTolerance) {
 12956  001AE8  501C               	movf	tmr0_ISR@motorControlTimerN,w,c
 12957  001AEA  6E15               	movwf	??_tmr0_ISR& (0+255),c
 12958  001AEC  501D               	movf	tmr0_ISR@motorControlTimerN+1,w,c
 12959  001AEE  6E16               	movwf	(??_tmr0_ISR+1)& (0+255),c
 12960  001AF0  6A17               	clrf	(??_tmr0_ISR+2)& (0+255),c
 12961  001AF2  6A18               	clrf	(??_tmr0_ISR+3)& (0+255),c
 12962  001AF4  504D               	movf	_shortTolerance,w,c
 12963  001AF6  1815               	xorwf	??_tmr0_ISR,w,c
 12964  001AF8  E117               	bnz	i2l4553
 12965  001AFA  504E               	movf	_shortTolerance+1,w,c
 12966  001AFC  1816               	xorwf	??_tmr0_ISR+1,w,c
 12967  001AFE  E114               	bnz	i2l4553
 12968  001B00  504F               	movf	_shortTolerance+2,w,c
 12969  001B02  1817               	xorwf	??_tmr0_ISR+2,w,c
 12970  001B04  E111               	bnz	i2l4553
 12971  001B06  5050               	movf	_shortTolerance+3,w,c
 12972  001B08  1818               	xorwf	??_tmr0_ISR+3,w,c
 12973  001B0A  A4D8               	btfss	status,2,c
 12974  001B0C  D00D               	goto	i2l687
 12975                           
 12976                           ;timer.c: 217: motorControl(NUT, inverseDir(currentMotorDir.b));
 12977  001B0E  5055               	movf	_currentMotorDir,w,c
 12978  001B10  ECA3  F019         	call	_inverseDir
 12979  001B14  6E02               	movwf	i2motorControl@dir,c
 12980  001B16  0E01               	movlw	1
 12981  001B18  ECC9  F013         	call	i2_motorControl
 12982                           
 12983                           ;timer.c: 218: motorGoingBackwards.n = 0;
 12984  001B1C  0E00               	movlw	0
 12985  001B1E                     L16:
 12986  001B1E  6E41               	movwf	_motorGoingBackwards+1,c	;volatile
 12987                           
 12988                           ;timer.c: 219: motorControlTimerN = 0;
 12989  001B20  0E00               	movlw	0
 12990  001B22  6E1D               	movwf	tmr0_ISR@motorControlTimerN+1,c
 12991  001B24  0E00               	movlw	0
 12992  001B26  6E1C               	movwf	tmr0_ISR@motorControlTimerN,c
 12993  001B28                     i2l687:
 12994  001B28                     i2l4553:
 12995                           
 12996                           ;timer.c: 220: }
 12997                           ;timer.c: 221: }
 12998                           ;timer.c: 222: }
 12999                           ;timer.c: 224: if (currentMotorDir.s != STOPMOTOR) {
 13000  001B28  0E02               	movlw	2
 13001  001B2A  1857               	xorwf	_currentMotorDir+2,w,c
 13002  001B2C  B4D8               	btfsc	status,2,c
 13003  001B2E  0012               	return	
 13004                           
 13005                           ;timer.c: 225: if (!motorGoingBackwards.s) {
 13006  001B30  5042               	movf	_motorGoingBackwards+2,w,c	;volatile
 13007  001B32  A4D8               	btfss	status,2,c
 13008  001B34  D021               	goto	i2l689
 13009                           
 13010                           ;timer.c: 226: if (motorControlTimerS == longTolerance) {
 13011  001B36  501E               	movf	tmr0_ISR@motorControlTimerS,w,c
 13012  001B38  6E15               	movwf	??_tmr0_ISR& (0+255),c
 13013  001B3A  501F               	movf	tmr0_ISR@motorControlTimerS+1,w,c
 13014  001B3C  6E16               	movwf	(??_tmr0_ISR+1)& (0+255),c
 13015  001B3E  6A17               	clrf	(??_tmr0_ISR+2)& (0+255),c
 13016  001B40  6A18               	clrf	(??_tmr0_ISR+3)& (0+255),c
 13017  001B42  5051               	movf	_longTolerance,w,c
 13018  001B44  1815               	xorwf	??_tmr0_ISR,w,c
 13019  001B46  E14C               	bnz	i2l695
 13020  001B48  5052               	movf	_longTolerance+1,w,c
 13021  001B4A  1816               	xorwf	??_tmr0_ISR+1,w,c
 13022  001B4C  E149               	bnz	i2l695
 13023  001B4E  5053               	movf	_longTolerance+2,w,c
 13024  001B50  1817               	xorwf	??_tmr0_ISR+2,w,c
 13025  001B52  E146               	bnz	i2l695
 13026  001B54  5054               	movf	_longTolerance+3,w,c
 13027  001B56  1818               	xorwf	??_tmr0_ISR+3,w,c
 13028  001B58  A4D8               	btfss	status,2,c
 13029  001B5A  0012               	return	
 13030                           
 13031                           ;timer.c: 227: motorControl(SPACER, inverseDir(currentMotorDir.s));
 13032  001B5C  5057               	movf	_currentMotorDir+2,w,c
 13033  001B5E  ECA3  F019         	call	_inverseDir
 13034  001B62  6E02               	movwf	i2motorControl@dir,c
 13035  001B64  0E02               	movlw	2
 13036  001B66  ECC9  F013         	call	i2_motorControl
 13037                           
 13038                           ;timer.c: 228: motorGoingBackwards.s = 1;
 13039  001B6A  0E01               	movlw	1
 13040  001B6C  6E42               	movwf	_motorGoingBackwards+2,c	;volatile
 13041                           
 13042                           ;timer.c: 229: motorControlTimerS = 0;
 13043  001B6E  0E00               	movlw	0
 13044  001B70  6E1F               	movwf	tmr0_ISR@motorControlTimerS+1,c
 13045  001B72  0E00               	movlw	0
 13046  001B74  6E1E               	movwf	tmr0_ISR@motorControlTimerS,c
 13047                           
 13048                           ;timer.c: 230: }
 13049                           ;timer.c: 231: } else {
 13050  001B76  0012               	return	
 13051  001B78                     i2l689:
 13052                           
 13053                           ;timer.c: 232: if (motorControlTimerS == shortTolerance) {
 13054  001B78  501E               	movf	tmr0_ISR@motorControlTimerS,w,c
 13055  001B7A  6E15               	movwf	??_tmr0_ISR& (0+255),c
 13056  001B7C  501F               	movf	tmr0_ISR@motorControlTimerS+1,w,c
 13057  001B7E  6E16               	movwf	(??_tmr0_ISR+1)& (0+255),c
 13058  001B80  6A17               	clrf	(??_tmr0_ISR+2)& (0+255),c
 13059  001B82  6A18               	clrf	(??_tmr0_ISR+3)& (0+255),c
 13060  001B84  504D               	movf	_shortTolerance,w,c
 13061  001B86  1815               	xorwf	??_tmr0_ISR,w,c
 13062  001B88  E12B               	bnz	i2l695
 13063  001B8A  504E               	movf	_shortTolerance+1,w,c
 13064  001B8C  1816               	xorwf	??_tmr0_ISR+1,w,c
 13065  001B8E  E128               	bnz	i2l695
 13066  001B90  504F               	movf	_shortTolerance+2,w,c
 13067  001B92  1817               	xorwf	??_tmr0_ISR+2,w,c
 13068  001B94  E125               	bnz	i2l695
 13069  001B96  5050               	movf	_shortTolerance+3,w,c
 13070  001B98  1818               	xorwf	??_tmr0_ISR+3,w,c
 13071  001B9A  A4D8               	btfss	status,2,c
 13072  001B9C  0012               	return	
 13073                           
 13074                           ;timer.c: 233: motorControl(SPACER, inverseDir(currentMotorDir.s));
 13075  001B9E  5057               	movf	_currentMotorDir+2,w,c
 13076  001BA0  ECA3  F019         	call	_inverseDir
 13077  001BA4  6E02               	movwf	i2motorControl@dir,c
 13078  001BA6  0E02               	movlw	2
 13079  001BA8  ECC9  F013         	call	i2_motorControl
 13080                           
 13081                           ;timer.c: 234: motorGoingBackwards.s = 0;
 13082  001BAC  0E00               	movlw	0
 13083  001BAE  6E42               	movwf	_motorGoingBackwards+2,c	;volatile
 13084                           
 13085                           ;timer.c: 235: motorControlTimerS = 0;
 13086  001BB0  0E00               	movlw	0
 13087  001BB2  6E1F               	movwf	tmr0_ISR@motorControlTimerS+1,c
 13088  001BB4  0E00               	movlw	0
 13089  001BB6  6E1E               	movwf	tmr0_ISR@motorControlTimerS,c
 13090                           
 13091                           ;timer.c: 236: }
 13092                           ;timer.c: 237: }
 13093                           ;timer.c: 238: }
 13094                           ;timer.c: 239: break;
 13095  001BB8  0012               	return	
 13096  001BBA                     
 13097                           ;timer.c: 241: resetMotorTimer();
 13098  001BBA  EC99  F019         	call	_resetMotorTimer	;wreg free
 13099                           
 13100                           ;timer.c: 243: }
 13101                           
 13102                           ;timer.c: 242: break;
 13103  001BBE  0012               	return	
 13104  001BC0                     i2l670:
 13105  001BC0  C048  F015         	movff	_currentMode,??_tmr0_ISR
 13106  001BC4  C049  F016         	movff	_currentMode+1,??_tmr0_ISR+1
 13107                           
 13108                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13109                           ; Switch size 1, requested type "space"
 13110                           ; Number of cases is 1, Range of values is 0 to 0
 13111                           ; switch strategies available:
 13112                           ; Name         Instructions Cycles
 13113                           ; simple_byte            4     3 (average)
 13114                           ;	Chosen strategy is simple_byte
 13115  001BC8  5016               	movf	??_tmr0_ISR+1,w,c
 13116  001BCA  0A00               	xorlw	0	; case 0
 13117  001BCC  A4D8               	btfss	status,2,c
 13118  001BCE  D7F5               	goto	i2l694
 13119                           
 13120                           ; Switch size 1, requested type "space"
 13121                           ; Number of cases is 2, Range of values is 2 to 3
 13122                           ; switch strategies available:
 13123                           ; Name         Instructions Cycles
 13124                           ; simple_byte            7     4 (average)
 13125                           ;	Chosen strategy is simple_byte
 13126  001BD0  5015               	movf	??_tmr0_ISR,w,c
 13127  001BD2  0A02               	xorlw	2	; case 2
 13128  001BD4  B4D8               	btfsc	status,2,c
 13129  001BD6  D6DF               	goto	i2l671
 13130  001BD8  0A01               	xorlw	1	; case 3
 13131  001BDA  B4D8               	btfsc	status,2,c
 13132  001BDC  D6DC               	goto	i2l671
 13133  001BDE  D7ED               	goto	i2l694
 13134  001BE0                     i2l695:
 13135  001BE0  0012               	return		;funcret
 13136  001BE2                     __end_of_tmr0_ISR:
 13137                           	opt stack 0
 13138                           tosu	equ	0xFFF
 13139                           tosh	equ	0xFFE
 13140                           tosl	equ	0xFFD
 13141                           pclatu	equ	0xFFB
 13142                           pclath	equ	0xFFA
 13143                           tblptru	equ	0xFF8
 13144                           tblptrh	equ	0xFF7
 13145                           tblptrl	equ	0xFF6
 13146                           tablat	equ	0xFF5
 13147                           prodh	equ	0xFF4
 13148                           prodl	equ	0xFF3
 13149                           intcon	equ	0xFF2
 13150                           indf0	equ	0xFEF
 13151                           postinc0	equ	0xFEE
 13152                           fsr0h	equ	0xFEA
 13153                           fsr0l	equ	0xFE9
 13154                           wreg	equ	0xFE8
 13155                           postdec1	equ	0xFE5
 13156                           plusw1	equ	0xFE3
 13157                           fsr1h	equ	0xFE2
 13158                           fsr1l	equ	0xFE1
 13159                           indf2	equ	0xFDF
 13160                           postinc2	equ	0xFDE
 13161                           postdec2	equ	0xFDD
 13162                           plusw2	equ	0xFDB
 13163                           fsr2h	equ	0xFDA
 13164                           fsr2l	equ	0xFD9
 13165                           status	equ	0xFD8
 13166                           
 13167 ;; *************** function i2_motorControl *****************
 13168 ;; Defined at:
 13169 ;;		line 7 in file "motors.c"
 13170 ;; Parameters:    Size  Location     Type
 13171 ;;  motor           1    wreg     enum E2968
 13172 ;;  dir             1    1[COMRAM] enum E2974
 13173 ;; Auto vars:     Size  Location     Type
 13174 ;;  motor           1    2[COMRAM] enum E2968
 13175 ;; Return value:  Size  Location     Type
 13176 ;;                  1    wreg      void 
 13177 ;; Registers used:
 13178 ;;		wreg, status,2, status,0
 13179 ;; Tracked objects:
 13180 ;;		On entry : 0/0
 13181 ;;		On exit  : 0/0
 13182 ;;		Unchanged: 0/0
 13183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13184 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13185 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13187 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13188 ;;Total ram usage:        2 bytes
 13189 ;; Hardware stack levels used:    1
 13190 ;; This function calls:
 13191 ;;		Nothing
 13192 ;; This function is called by:
 13193 ;;		_tmr0_ISR
 13194 ;; This function uses a non-reentrant model
 13195 ;;
 13196                           
 13197                           	psect	text43
 13198  002792                     __ptext43:
 13199                           	opt stack 0
 13200  002792                     i2_motorControl:
 13201                           	opt stack 22
 13202                           
 13203                           ;incstack = 0
 13204                           ;i2motorControl@motor stored from wreg
 13205  002792  6E03               	movwf	i2motorControl@motor,c
 13206                           
 13207                           ;motors.c: 8: switch(motor) {
 13208  002794  D050               	goto	i2l728
 13209  002796                     
 13210                           ;motors.c: 10: if (dir == FORWARD) {
 13211  002796  5002               	movf	i2motorControl@dir,w,c
 13212  002798  A4D8               	btfss	status,2,c
 13213  00279A  D003               	goto	i2l730
 13214                           
 13215                           ;motors.c: 11: LATBbits.LATB3 = 1;
 13216  00279C  868A               	bsf	3978,3,c	;volatile
 13217                           
 13218                           ;motors.c: 12: LATCbits.LATC0 = 0;
 13219  00279E  908B               	bcf	3979,0,c	;volatile
 13220                           
 13221                           ;motors.c: 13: } else if (dir == REVERSE) {
 13222  0027A0  D00B               	goto	i2l734
 13223  0027A2                     i2l730:
 13224  0027A2  0402               	decf	i2motorControl@dir,w,c
 13225  0027A4  A4D8               	btfss	status,2,c
 13226  0027A6  D002               	goto	i2l732
 13227                           
 13228                           ;motors.c: 14: LATBbits.LATB3 = 0;
 13229  0027A8  968A               	bcf	3978,3,c	;volatile
 13230  0027AA  D005               	goto	L17
 13231  0027AC                     i2l732:
 13232  0027AC  0E02               	movlw	2
 13233  0027AE  1802               	xorwf	i2motorControl@dir,w,c
 13234  0027B0  A4D8               	btfss	status,2,c
 13235  0027B2  D002               	goto	i2l734
 13236                           
 13237                           ;motors.c: 17: LATBbits.LATB3 = 1;
 13238  0027B4  868A               	bsf	3978,3,c	;volatile
 13239  0027B6                     L17:
 13240                           
 13241                           ;motors.c: 18: LATCbits.LATC0 = 1;
 13242  0027B6  808B               	bsf	3979,0,c	;volatile
 13243  0027B8                     i2l734:
 13244                           
 13245                           ;motors.c: 19: }
 13246                           ;motors.c: 20: currentMotorDir.s = dir;
 13247  0027B8  C002  F057         	movff	i2motorControl@dir,_currentMotorDir+2
 13248                           
 13249                           ;motors.c: 21: break;
 13250  0027BC  0012               	return	
 13251  0027BE                     
 13252                           ;motors.c: 23: if (dir == FORWARD) {
 13253  0027BE  5002               	movf	i2motorControl@dir,w,c
 13254  0027C0  A4D8               	btfss	status,2,c
 13255  0027C2  D003               	goto	i2l737
 13256                           
 13257                           ;motors.c: 24: LATCbits.LATC1 = 1;
 13258  0027C4  828B               	bsf	3979,1,c	;volatile
 13259                           
 13260                           ;motors.c: 25: LATCbits.LATC2 = 0;
 13261  0027C6  948B               	bcf	3979,2,c	;volatile
 13262                           
 13263                           ;motors.c: 26: } else if (dir == REVERSE) {
 13264  0027C8  D00B               	goto	i2l741
 13265  0027CA                     i2l737:
 13266  0027CA  0402               	decf	i2motorControl@dir,w,c
 13267  0027CC  A4D8               	btfss	status,2,c
 13268  0027CE  D002               	goto	i2l739
 13269                           
 13270                           ;motors.c: 27: LATCbits.LATC1 = 0;
 13271  0027D0  928B               	bcf	3979,1,c	;volatile
 13272  0027D2  D005               	goto	L18
 13273  0027D4                     i2l739:
 13274  0027D4  0E02               	movlw	2
 13275  0027D6  1802               	xorwf	i2motorControl@dir,w,c
 13276  0027D8  A4D8               	btfss	status,2,c
 13277  0027DA  D002               	goto	i2l741
 13278                           
 13279                           ;motors.c: 30: LATCbits.LATC1 = 1;
 13280  0027DC  828B               	bsf	3979,1,c	;volatile
 13281  0027DE                     L18:
 13282                           
 13283                           ;motors.c: 31: LATCbits.LATC2 = 1;
 13284  0027DE  848B               	bsf	3979,2,c	;volatile
 13285  0027E0                     i2l741:
 13286                           
 13287                           ;motors.c: 32: }
 13288                           ;motors.c: 33: currentMotorDir.n = dir;
 13289  0027E0  C002  F056         	movff	i2motorControl@dir,_currentMotorDir+1
 13290                           
 13291                           ;motors.c: 34: break;
 13292  0027E4  0012               	return	
 13293  0027E6                     
 13294                           ;motors.c: 36: if (dir == FORWARD) {
 13295  0027E6  5002               	movf	i2motorControl@dir,w,c
 13296  0027E8  A4D8               	btfss	status,2,c
 13297  0027EA  D003               	goto	i2l743
 13298                           
 13299                           ;motors.c: 37: LATCbits.LATC5 = 1;
 13300  0027EC  8A8B               	bsf	3979,5,c	;volatile
 13301                           
 13302                           ;motors.c: 38: LATCbits.LATC6 = 0;
 13303  0027EE  9C8B               	bcf	3979,6,c	;volatile
 13304                           
 13305                           ;motors.c: 39: } else if (dir == REVERSE) {
 13306  0027F0  D00B               	goto	i2l747
 13307  0027F2                     i2l743:
 13308  0027F2  0402               	decf	i2motorControl@dir,w,c
 13309  0027F4  A4D8               	btfss	status,2,c
 13310  0027F6  D002               	goto	i2l745
 13311                           
 13312                           ;motors.c: 40: LATCbits.LATC5 = 0;
 13313  0027F8  9A8B               	bcf	3979,5,c	;volatile
 13314  0027FA  D005               	goto	L19
 13315  0027FC                     i2l745:
 13316  0027FC  0E02               	movlw	2
 13317  0027FE  1802               	xorwf	i2motorControl@dir,w,c
 13318  002800  A4D8               	btfss	status,2,c
 13319  002802  D002               	goto	i2l747
 13320                           
 13321                           ;motors.c: 43: LATCbits.LATC5 = 1;
 13322  002804  8A8B               	bsf	3979,5,c	;volatile
 13323  002806                     L19:
 13324                           
 13325                           ;motors.c: 44: LATCbits.LATC6 = 1;
 13326  002806  8C8B               	bsf	3979,6,c	;volatile
 13327  002808                     i2l747:
 13328                           
 13329                           ;motors.c: 45: }
 13330                           ;motors.c: 46: currentMotorDir.w = dir;
 13331  002808  C002  F058         	movff	i2motorControl@dir,_currentMotorDir+3
 13332                           
 13333                           ;motors.c: 47: break;
 13334  00280C  0012               	return	
 13335  00280E                     
 13336                           ;motors.c: 49: if (dir == FORWARD) {
 13337  00280E  5002               	movf	i2motorControl@dir,w,c
 13338  002810  A4D8               	btfss	status,2,c
 13339  002812  D003               	goto	i2l749
 13340                           
 13341                           ;motors.c: 50: LATCbits.LATC7 = 1;
 13342  002814  8E8B               	bsf	3979,7,c	;volatile
 13343                           
 13344                           ;motors.c: 51: LATEbits.LATE0 = 0;
 13345  002816  908D               	bcf	3981,0,c	;volatile
 13346                           
 13347                           ;motors.c: 52: } else if (dir == REVERSE) {
 13348  002818  D00B               	goto	i2l753
 13349  00281A                     i2l749:
 13350  00281A  0402               	decf	i2motorControl@dir,w,c
 13351  00281C  A4D8               	btfss	status,2,c
 13352  00281E  D002               	goto	i2l751
 13353                           
 13354                           ;motors.c: 53: LATCbits.LATC7 = 0;
 13355  002820  9E8B               	bcf	3979,7,c	;volatile
 13356  002822  D005               	goto	L20
 13357  002824                     i2l751:
 13358  002824  0E02               	movlw	2
 13359  002826  1802               	xorwf	i2motorControl@dir,w,c
 13360  002828  A4D8               	btfss	status,2,c
 13361  00282A  D002               	goto	i2l753
 13362                           
 13363                           ;motors.c: 56: LATCbits.LATC7 = 1;
 13364  00282C  8E8B               	bsf	3979,7,c	;volatile
 13365  00282E                     L20:
 13366                           
 13367                           ;motors.c: 57: LATEbits.LATE0 = 1;
 13368  00282E  808D               	bsf	3981,0,c	;volatile
 13369  002830                     i2l753:
 13370                           
 13371                           ;motors.c: 58: }
 13372                           ;motors.c: 59: currentMotorDir.b = dir;
 13373  002830  C002  F055         	movff	i2motorControl@dir,_currentMotorDir
 13374                           
 13375                           ;motors.c: 63: }
 13376                           
 13377                           ;motors.c: 62: break;
 13378                           
 13379                           ;motors.c: 61: default:
 13380                           
 13381                           ;motors.c: 60: break;
 13382  002834  0012               	return	
 13383  002836                     i2l728:
 13384  002836  5003               	movf	i2motorControl@motor,w,c
 13385                           
 13386                           ; Switch size 1, requested type "space"
 13387                           ; Number of cases is 4, Range of values is 0 to 3
 13388                           ; switch strategies available:
 13389                           ; Name         Instructions Cycles
 13390                           ; simple_byte           13     7 (average)
 13391                           ;	Chosen strategy is simple_byte
 13392  002838  0A00               	xorlw	0	; case 0
 13393  00283A  B4D8               	btfsc	status,2,c
 13394  00283C  D7E8               	goto	i2l748
 13395  00283E  0A01               	xorlw	1	; case 1
 13396  002840  B4D8               	btfsc	status,2,c
 13397  002842  D7BD               	goto	i2l736
 13398  002844  0A03               	xorlw	3	; case 2
 13399  002846  B4D8               	btfsc	status,2,c
 13400  002848  D7A6               	goto	i2l729
 13401  00284A  0A01               	xorlw	1	; case 3
 13402  00284C  A4D8               	btfss	status,2,c
 13403  00284E  0012               	return	
 13404  002850  D7CA               	goto	i2l742
 13405  002852                     __end_ofi2_motorControl:
 13406                           	opt stack 0
 13407                           tosu	equ	0xFFF
 13408                           tosh	equ	0xFFE
 13409                           tosl	equ	0xFFD
 13410                           pclatu	equ	0xFFB
 13411                           pclath	equ	0xFFA
 13412                           tblptru	equ	0xFF8
 13413                           tblptrh	equ	0xFF7
 13414                           tblptrl	equ	0xFF6
 13415                           tablat	equ	0xFF5
 13416                           prodh	equ	0xFF4
 13417                           prodl	equ	0xFF3
 13418                           intcon	equ	0xFF2
 13419                           indf0	equ	0xFEF
 13420                           postinc0	equ	0xFEE
 13421                           fsr0h	equ	0xFEA
 13422                           fsr0l	equ	0xFE9
 13423                           wreg	equ	0xFE8
 13424                           postdec1	equ	0xFE5
 13425                           plusw1	equ	0xFE3
 13426                           fsr1h	equ	0xFE2
 13427                           fsr1l	equ	0xFE1
 13428                           indf2	equ	0xFDF
 13429                           postinc2	equ	0xFDE
 13430                           postdec2	equ	0xFDD
 13431                           plusw2	equ	0xFDB
 13432                           fsr2h	equ	0xFDA
 13433                           fsr2l	equ	0xFD9
 13434                           status	equ	0xFD8
 13435                           
 13436 ;; *************** function i2___ftadd *****************
 13437 ;; Defined at:
 13438 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 13439 ;; Parameters:    Size  Location     Type
 13440 ;;  f1              3    8[COMRAM] float 
 13441 ;;  f2              3   11[COMRAM] float 
 13442 ;; Auto vars:     Size  Location     Type
 13443 ;;  __ftadd         1   19[COMRAM] unsigned char 
 13444 ;;  __ftadd         1   18[COMRAM] unsigned char 
 13445 ;;  __ftadd         1   17[COMRAM] unsigned char 
 13446 ;; Return value:  Size  Location     Type
 13447 ;;                  3    8[COMRAM] float 
 13448 ;; Registers used:
 13449 ;;		wreg, status,2, status,0, cstack
 13450 ;; Tracked objects:
 13451 ;;		On entry : 0/0
 13452 ;;		On exit  : 0/0
 13453 ;;		Unchanged: 0/0
 13454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13455 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13456 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13457 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13458 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13459 ;;Total ram usage:       12 bytes
 13460 ;; Hardware stack levels used:    1
 13461 ;; Hardware stack levels required when called:    1
 13462 ;; This function calls:
 13463 ;;		i2___ftpack
 13464 ;; This function is called by:
 13465 ;;		_tmr0_ISR
 13466 ;; This function uses a non-reentrant model
 13467 ;;
 13468                           
 13469                           	psect	text44
 13470  0023F0                     __ptext44:
 13471                           	opt stack 0
 13472  0023F0                     i2___ftadd:
 13473                           	opt stack 21
 13474                           
 13475                           ;incstack = 0
 13476  0023F0  C00B  F00F         	movff	i2___ftadd@f1+2,??i2___ftadd
 13477  0023F4  6A10               	clrf	(??i2___ftadd+1)& (0+255),c
 13478  0023F6  6A11               	clrf	(??i2___ftadd+2)& (0+255),c
 13479  0023F8  340A               	rlcf	i2___ftadd@f1+1,w,c
 13480  0023FA  360F               	rlcf	??i2___ftadd& (0+255),f,c
 13481  0023FC  E301               	bnc	u502_41
 13482  0023FE  8010               	bsf	(??i2___ftadd+1)& (0+255),0,c
 13483  002400                     u502_41:
 13484  002400  500F               	movf	??i2___ftadd,w,c
 13485  002402  6E14               	movwf	i2___ftadd@exp1,c
 13486  002404  C00E  F00F         	movff	i2___ftadd@f2+2,??i2___ftadd
 13487  002408  6A10               	clrf	(??i2___ftadd+1)& (0+255),c
 13488  00240A  6A11               	clrf	(??i2___ftadd+2)& (0+255),c
 13489  00240C  340D               	rlcf	i2___ftadd@f2+1,w,c
 13490  00240E  360F               	rlcf	??i2___ftadd& (0+255),f,c
 13491  002410  E301               	bnc	u503_41
 13492  002412  8010               	bsf	(??i2___ftadd+1)& (0+255),0,c
 13493  002414                     u503_41:
 13494  002414  500F               	movf	??i2___ftadd,w,c
 13495  002416  6E13               	movwf	i2___ftadd@exp2,c
 13496  002418  5014               	movf	i2___ftadd@exp1,w,c
 13497  00241A  B4D8               	btfsc	status,2,c
 13498  00241C  D00B               	goto	i2u506_40
 13499  00241E  5013               	movf	i2___ftadd@exp2,w,c
 13500  002420  5C14               	subwf	i2___ftadd@exp1,w,c
 13501  002422  B0D8               	btfsc	status,0,c
 13502  002424  D00E               	goto	i2l1047
 13503  002426  5014               	movf	i2___ftadd@exp1,w,c
 13504  002428  0800               	sublw	0
 13505  00242A  2413               	addwf	i2___ftadd@exp2,w,c
 13506  00242C  6E0F               	movwf	??i2___ftadd& (0+255),c
 13507  00242E  0E18               	movlw	24
 13508  002430  640F               	cpfsgt	??i2___ftadd,c
 13509  002432  D007               	goto	i2l1047
 13510  002434                     i2u506_40:
 13511  002434  C00C  F009         	movff	i2___ftadd@f2,?i2___ftadd
 13512  002438  C00D  F00A         	movff	i2___ftadd@f2+1,?i2___ftadd+1
 13513  00243C  C00E  F00B         	movff	i2___ftadd@f2+2,?i2___ftadd+2
 13514  002440  0012               	return	
 13515  002442                     i2l1047:
 13516  002442  5013               	movf	i2___ftadd@exp2,w,c
 13517  002444  B4D8               	btfsc	status,2,c
 13518  002446  D00B               	goto	i2u509_40
 13519  002448  5014               	movf	i2___ftadd@exp1,w,c
 13520  00244A  5C13               	subwf	i2___ftadd@exp2,w,c
 13521  00244C  B0D8               	btfsc	status,0,c
 13522  00244E  D00E               	goto	i2l1051
 13523  002450  5013               	movf	i2___ftadd@exp2,w,c
 13524  002452  0800               	sublw	0
 13525  002454  2414               	addwf	i2___ftadd@exp1,w,c
 13526  002456  6E0F               	movwf	??i2___ftadd& (0+255),c
 13527  002458  0E18               	movlw	24
 13528  00245A  640F               	cpfsgt	??i2___ftadd,c
 13529  00245C  D007               	goto	i2l1051
 13530  00245E                     i2u509_40:
 13531  00245E  C009  F009         	movff	i2___ftadd@f1,?i2___ftadd
 13532  002462  C00A  F00A         	movff	i2___ftadd@f1+1,?i2___ftadd+1
 13533  002466  C00B  F00B         	movff	i2___ftadd@f1+2,?i2___ftadd+2
 13534  00246A  0012               	return	
 13535  00246C                     i2l1051:
 13536  00246C  0E06               	movlw	6
 13537  00246E  6E12               	movwf	i2___ftadd@sign,c
 13538  002470  BE0B               	btfsc	i2___ftadd@f1+2,7,c
 13539  002472  8E12               	bsf	i2___ftadd@sign,7,c
 13540  002474  BE0E               	btfsc	i2___ftadd@f2+2,7,c
 13541  002476  8C12               	bsf	i2___ftadd@sign,6,c
 13542  002478  8E0A               	bsf	i2___ftadd@f1+1,7,c
 13543  00247A  0EFF               	movlw	255
 13544  00247C  1609               	andwf	i2___ftadd@f1,f,c
 13545  00247E  0EFF               	movlw	255
 13546  002480  160A               	andwf	i2___ftadd@f1+1,f,c
 13547  002482  0E00               	movlw	0
 13548  002484  160B               	andwf	i2___ftadd@f1+2,f,c
 13549  002486  8E0D               	bsf	i2___ftadd@f2+1,7,c
 13550  002488  0EFF               	movlw	255
 13551  00248A  160C               	andwf	i2___ftadd@f2,f,c
 13552  00248C  0EFF               	movlw	255
 13553  00248E  160D               	andwf	i2___ftadd@f2+1,f,c
 13554  002490  0E00               	movlw	0
 13555  002492  160E               	andwf	i2___ftadd@f2+2,f,c
 13556  002494  5013               	movf	i2___ftadd@exp2,w,c
 13557  002496  5C14               	subwf	i2___ftadd@exp1,w,c
 13558  002498  B0D8               	btfsc	status,0,c
 13559  00249A  D01B               	goto	i2l1056
 13560  00249C                     i2u512_40:
 13561  00249C  90D8               	bcf	status,0,c
 13562  00249E  360C               	rlcf	i2___ftadd@f2,f,c
 13563  0024A0  360D               	rlcf	i2___ftadd@f2+1,f,c
 13564  0024A2  360E               	rlcf	i2___ftadd@f2+2,f,c
 13565  0024A4  0613               	decf	i2___ftadd@exp2,f,c
 13566  0024A6  5014               	movf	i2___ftadd@exp1,w,c
 13567  0024A8  1813               	xorwf	i2___ftadd@exp2,w,c
 13568  0024AA  B4D8               	btfsc	status,2,c
 13569  0024AC  D00D               	goto	i2l1061
 13570  0024AE  0612               	decf	i2___ftadd@sign,f,c
 13571  0024B0  C012  F00F         	movff	i2___ftadd@sign,??i2___ftadd
 13572  0024B4  0E07               	movlw	7
 13573  0024B6  160F               	andwf	??i2___ftadd,f,c
 13574  0024B8  B4D8               	btfsc	status,2,c
 13575  0024BA  D006               	goto	i2l1061
 13576  0024BC  D7EF               	goto	i2u512_40
 13577  0024BE  90D8               	bcf	status,0,c
 13578  0024C0  320B               	rrcf	i2___ftadd@f1+2,f,c
 13579  0024C2  320A               	rrcf	i2___ftadd@f1+1,f,c
 13580  0024C4  3209               	rrcf	i2___ftadd@f1,f,c
 13581  0024C6  2A14               	incf	i2___ftadd@exp1,f,c
 13582  0024C8                     i2l1061:
 13583  0024C8  5013               	movf	i2___ftadd@exp2,w,c
 13584  0024CA  1814               	xorwf	i2___ftadd@exp1,w,c
 13585  0024CC  B4D8               	btfsc	status,2,c
 13586  0024CE  D01F               	goto	i2u519_40
 13587  0024D0  D7F6               	goto	i2l1062
 13588  0024D2                     i2l1056:
 13589  0024D2  5014               	movf	i2___ftadd@exp1,w,c
 13590  0024D4  5C13               	subwf	i2___ftadd@exp2,w,c
 13591  0024D6  B0D8               	btfsc	status,0,c
 13592  0024D8  D01A               	goto	i2u519_40
 13593  0024DA                     i2u516_40:
 13594  0024DA  90D8               	bcf	status,0,c
 13595  0024DC  3609               	rlcf	i2___ftadd@f1,f,c
 13596  0024DE  360A               	rlcf	i2___ftadd@f1+1,f,c
 13597  0024E0  360B               	rlcf	i2___ftadd@f1+2,f,c
 13598  0024E2  0614               	decf	i2___ftadd@exp1,f,c
 13599  0024E4  5014               	movf	i2___ftadd@exp1,w,c
 13600  0024E6  1813               	xorwf	i2___ftadd@exp2,w,c
 13601  0024E8  B4D8               	btfsc	status,2,c
 13602  0024EA  D00D               	goto	i2l1070
 13603  0024EC  0612               	decf	i2___ftadd@sign,f,c
 13604  0024EE  C012  F00F         	movff	i2___ftadd@sign,??i2___ftadd
 13605  0024F2  0E07               	movlw	7
 13606  0024F4  160F               	andwf	??i2___ftadd,f,c
 13607  0024F6  B4D8               	btfsc	status,2,c
 13608  0024F8  D006               	goto	i2l1070
 13609  0024FA  D7EF               	goto	i2u516_40
 13610  0024FC  90D8               	bcf	status,0,c
 13611  0024FE  320E               	rrcf	i2___ftadd@f2+2,f,c
 13612  002500  320D               	rrcf	i2___ftadd@f2+1,f,c
 13613  002502  320C               	rrcf	i2___ftadd@f2,f,c
 13614  002504  2A13               	incf	i2___ftadd@exp2,f,c
 13615  002506                     i2l1070:
 13616  002506  5013               	movf	i2___ftadd@exp2,w,c
 13617  002508  1814               	xorwf	i2___ftadd@exp1,w,c
 13618  00250A  A4D8               	btfss	status,2,c
 13619  00250C  D7F7               	goto	i2l1071
 13620  00250E                     i2u519_40:
 13621  00250E  AE12               	btfss	i2___ftadd@sign,7,c
 13622  002510  D00C               	goto	i2l1073
 13623  002512  0EFF               	movlw	255
 13624  002514  1A09               	xorwf	i2___ftadd@f1,f,c
 13625  002516  0EFF               	movlw	255
 13626  002518  1A0A               	xorwf	i2___ftadd@f1+1,f,c
 13627  00251A  0EFF               	movlw	255
 13628  00251C  1A0B               	xorwf	i2___ftadd@f1+2,f,c
 13629  00251E  0E01               	movlw	1
 13630  002520  2609               	addwf	i2___ftadd@f1,f,c
 13631  002522  0E00               	movlw	0
 13632  002524  220A               	addwfc	i2___ftadd@f1+1,f,c
 13633  002526  0E00               	movlw	0
 13634  002528  220B               	addwfc	i2___ftadd@f1+2,f,c
 13635  00252A                     i2l1073:
 13636  00252A  AC12               	btfss	i2___ftadd@sign,6,c
 13637  00252C  D00C               	goto	i2l1074
 13638  00252E  0EFF               	movlw	255
 13639  002530  1A0C               	xorwf	i2___ftadd@f2,f,c
 13640  002532  0EFF               	movlw	255
 13641  002534  1A0D               	xorwf	i2___ftadd@f2+1,f,c
 13642  002536  0EFF               	movlw	255
 13643  002538  1A0E               	xorwf	i2___ftadd@f2+2,f,c
 13644  00253A  0E01               	movlw	1
 13645  00253C  260C               	addwf	i2___ftadd@f2,f,c
 13646  00253E  0E00               	movlw	0
 13647  002540  220D               	addwfc	i2___ftadd@f2+1,f,c
 13648  002542  0E00               	movlw	0
 13649  002544  220E               	addwfc	i2___ftadd@f2+2,f,c
 13650  002546                     i2l1074:
 13651  002546  0E00               	movlw	0
 13652  002548  6E12               	movwf	i2___ftadd@sign,c
 13653  00254A  5009               	movf	i2___ftadd@f1,w,c
 13654  00254C  260C               	addwf	i2___ftadd@f2,f,c
 13655  00254E  500A               	movf	i2___ftadd@f1+1,w,c
 13656  002550  220D               	addwfc	i2___ftadd@f2+1,f,c
 13657  002552  500B               	movf	i2___ftadd@f1+2,w,c
 13658  002554  220E               	addwfc	i2___ftadd@f2+2,f,c
 13659  002556  AE0E               	btfss	i2___ftadd@f2+2,7,c
 13660  002558  D00E               	goto	i2l1075
 13661  00255A  0EFF               	movlw	255
 13662  00255C  1A0C               	xorwf	i2___ftadd@f2,f,c
 13663  00255E  0EFF               	movlw	255
 13664  002560  1A0D               	xorwf	i2___ftadd@f2+1,f,c
 13665  002562  0EFF               	movlw	255
 13666  002564  1A0E               	xorwf	i2___ftadd@f2+2,f,c
 13667  002566  0E01               	movlw	1
 13668  002568  260C               	addwf	i2___ftadd@f2,f,c
 13669  00256A  0E00               	movlw	0
 13670  00256C  220D               	addwfc	i2___ftadd@f2+1,f,c
 13671  00256E  0E00               	movlw	0
 13672  002570  220E               	addwfc	i2___ftadd@f2+2,f,c
 13673  002572  0E01               	movlw	1
 13674  002574  6E12               	movwf	i2___ftadd@sign,c
 13675  002576                     i2l1075:
 13676  002576  C00C  F001         	movff	i2___ftadd@f2,i2___ftpack@arg
 13677  00257A  C00D  F002         	movff	i2___ftadd@f2+1,i2___ftpack@arg+1
 13678  00257E  C00E  F003         	movff	i2___ftadd@f2+2,i2___ftpack@arg+2
 13679  002582  C014  F004         	movff	i2___ftadd@exp1,i2___ftpack@exp
 13680  002586  C012  F005         	movff	i2___ftadd@sign,i2___ftpack@sign
 13681  00258A  ECDB  F014         	call	i2___ftpack	;wreg free
 13682  00258E  C001  F009         	movff	?i2___ftpack,?i2___ftadd
 13683  002592  C002  F00A         	movff	?i2___ftpack+1,?i2___ftadd+1
 13684  002596  C003  F00B         	movff	?i2___ftpack+2,?i2___ftadd+2
 13685  00259A  0012               	return	
 13686  00259C                     __end_ofi2___ftadd:
 13687                           	opt stack 0
 13688                           tosu	equ	0xFFF
 13689                           tosh	equ	0xFFE
 13690                           tosl	equ	0xFFD
 13691                           pclatu	equ	0xFFB
 13692                           pclath	equ	0xFFA
 13693                           tblptru	equ	0xFF8
 13694                           tblptrh	equ	0xFF7
 13695                           tblptrl	equ	0xFF6
 13696                           tablat	equ	0xFF5
 13697                           prodh	equ	0xFF4
 13698                           prodl	equ	0xFF3
 13699                           intcon	equ	0xFF2
 13700                           indf0	equ	0xFEF
 13701                           postinc0	equ	0xFEE
 13702                           fsr0h	equ	0xFEA
 13703                           fsr0l	equ	0xFE9
 13704                           wreg	equ	0xFE8
 13705                           postdec1	equ	0xFE5
 13706                           plusw1	equ	0xFE3
 13707                           fsr1h	equ	0xFE2
 13708                           fsr1l	equ	0xFE1
 13709                           indf2	equ	0xFDF
 13710                           postinc2	equ	0xFDE
 13711                           postdec2	equ	0xFDD
 13712                           plusw2	equ	0xFDB
 13713                           fsr2h	equ	0xFDA
 13714                           fsr2l	equ	0xFD9
 13715                           status	equ	0xFD8
 13716                           
 13717 ;; *************** function i2___ftpack *****************
 13718 ;; Defined at:
 13719 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 13720 ;; Parameters:    Size  Location     Type
 13721 ;;  arg             3    0[COMRAM] unsigned um
 13722 ;;  exp             1    3[COMRAM] unsigned char 
 13723 ;;  sign            1    4[COMRAM] unsigned char 
 13724 ;; Auto vars:     Size  Location     Type
 13725 ;;		None
 13726 ;; Return value:  Size  Location     Type
 13727 ;;                  3    0[COMRAM] float 
 13728 ;; Registers used:
 13729 ;;		wreg, status,2, status,0
 13730 ;; Tracked objects:
 13731 ;;		On entry : 0/0
 13732 ;;		On exit  : 0/0
 13733 ;;		Unchanged: 0/0
 13734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13735 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13737 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13738 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13739 ;;Total ram usage:        8 bytes
 13740 ;; Hardware stack levels used:    1
 13741 ;; This function calls:
 13742 ;;		Nothing
 13743 ;; This function is called by:
 13744 ;;		i2___ftadd
 13745 ;; This function uses a non-reentrant model
 13746 ;;
 13747                           
 13748                           	psect	text45
 13749  0029B6                     __ptext45:
 13750                           	opt stack 0
 13751  0029B6                     i2___ftpack:
 13752                           	opt stack 21
 13753                           
 13754                           ;incstack = 0
 13755  0029B6  5004               	movf	i2___ftpack@exp,w,c
 13756  0029B8  B4D8               	btfsc	status,2,c
 13757  0029BA  D005               	goto	i2u409_40
 13758  0029BC  5001               	movf	i2___ftpack@arg,w,c
 13759  0029BE  1002               	iorwf	i2___ftpack@arg+1,w,c
 13760  0029C0  1003               	iorwf	i2___ftpack@arg+2,w,c
 13761  0029C2  A4D8               	btfss	status,2,c
 13762  0029C4  D00C               	goto	i2l1016
 13763  0029C6                     i2u409_40:
 13764  0029C6  0E00               	movlw	0
 13765  0029C8  6E01               	movwf	?i2___ftpack,c
 13766  0029CA  0E00               	movlw	0
 13767  0029CC  6E02               	movwf	?i2___ftpack+1,c
 13768  0029CE  0E00               	movlw	0
 13769  0029D0  6E03               	movwf	?i2___ftpack+2,c
 13770  0029D2  0012               	return	
 13771  0029D4  2A04               	incf	i2___ftpack@exp,f,c
 13772  0029D6  90D8               	bcf	status,0,c
 13773  0029D8  3203               	rrcf	i2___ftpack@arg+2,f,c
 13774  0029DA  3202               	rrcf	i2___ftpack@arg+1,f,c
 13775  0029DC  3201               	rrcf	i2___ftpack@arg,f,c
 13776  0029DE                     i2l1016:
 13777  0029DE  0E00               	movlw	0
 13778  0029E0  1401               	andwf	i2___ftpack@arg,w,c
 13779  0029E2  6E06               	movwf	??i2___ftpack& (0+255),c
 13780  0029E4  0E00               	movlw	0
 13781  0029E6  1402               	andwf	i2___ftpack@arg+1,w,c
 13782  0029E8  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 13783  0029EA  0EFE               	movlw	254
 13784  0029EC  1403               	andwf	i2___ftpack@arg+2,w,c
 13785  0029EE  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 13786  0029F0  5006               	movf	??i2___ftpack,w,c
 13787  0029F2  1007               	iorwf	??i2___ftpack+1,w,c
 13788  0029F4  1008               	iorwf	??i2___ftpack+2,w,c
 13789  0029F6  B4D8               	btfsc	status,2,c
 13790  0029F8  D00C               	goto	i2l1019
 13791  0029FA  D7EC               	goto	i2l1017
 13792  0029FC  2A04               	incf	i2___ftpack@exp,f,c
 13793  0029FE  0E01               	movlw	1
 13794  002A00  2601               	addwf	i2___ftpack@arg,f,c
 13795  002A02  0E00               	movlw	0
 13796  002A04  2202               	addwfc	i2___ftpack@arg+1,f,c
 13797  002A06  0E00               	movlw	0
 13798  002A08  2203               	addwfc	i2___ftpack@arg+2,f,c
 13799  002A0A  90D8               	bcf	status,0,c
 13800  002A0C  3203               	rrcf	i2___ftpack@arg+2,f,c
 13801  002A0E  3202               	rrcf	i2___ftpack@arg+1,f,c
 13802  002A10  3201               	rrcf	i2___ftpack@arg,f,c
 13803  002A12                     i2l1019:
 13804  002A12  0E00               	movlw	0
 13805  002A14  1401               	andwf	i2___ftpack@arg,w,c
 13806  002A16  6E06               	movwf	??i2___ftpack& (0+255),c
 13807  002A18  0E00               	movlw	0
 13808  002A1A  1402               	andwf	i2___ftpack@arg+1,w,c
 13809  002A1C  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 13810  002A1E  0EFF               	movlw	255
 13811  002A20  1403               	andwf	i2___ftpack@arg+2,w,c
 13812  002A22  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 13813  002A24  5006               	movf	??i2___ftpack,w,c
 13814  002A26  1007               	iorwf	??i2___ftpack+1,w,c
 13815  002A28  1008               	iorwf	??i2___ftpack+2,w,c
 13816  002A2A  B4D8               	btfsc	status,2,c
 13817  002A2C  D006               	goto	i2l1022
 13818  002A2E  D7E6               	goto	i2l1020
 13819  002A30  0604               	decf	i2___ftpack@exp,f,c
 13820  002A32  90D8               	bcf	status,0,c
 13821  002A34  3601               	rlcf	i2___ftpack@arg,f,c
 13822  002A36  3602               	rlcf	i2___ftpack@arg+1,f,c
 13823  002A38  3603               	rlcf	i2___ftpack@arg+2,f,c
 13824  002A3A                     i2l1022:
 13825  002A3A  BE02               	btfsc	i2___ftpack@arg+1,7,c
 13826  002A3C  D003               	goto	i2u413_40
 13827  002A3E  0E02               	movlw	2
 13828  002A40  6004               	cpfslt	i2___ftpack@exp,c
 13829  002A42  D7F6               	goto	i2l1023
 13830  002A44                     i2u413_40:
 13831  002A44  A004               	btfss	i2___ftpack@exp,0,c
 13832  002A46  9E02               	bcf	i2___ftpack@arg+1,7,c
 13833  002A48  90D8               	bcf	status,0,c
 13834  002A4A  3204               	rrcf	i2___ftpack@exp,f,c
 13835  002A4C  5004               	movf	i2___ftpack@exp,w,c
 13836  002A4E  1203               	iorwf	i2___ftpack@arg+2,f,c
 13837  002A50  5005               	movf	i2___ftpack@sign,w,c
 13838  002A52  A4D8               	btfss	status,2,c
 13839  002A54  8E03               	bsf	i2___ftpack@arg+2,7,c
 13840  002A56  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 13841  002A5A  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 13842  002A5E  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 13843  002A62  0012               	return	
 13844  002A64                     __end_ofi2___ftpack:
 13845                           	opt stack 0
 13846                           tosu	equ	0xFFF
 13847                           tosh	equ	0xFFE
 13848                           tosl	equ	0xFFD
 13849                           pclatu	equ	0xFFB
 13850                           pclath	equ	0xFFA
 13851                           tblptru	equ	0xFF8
 13852                           tblptrh	equ	0xFF7
 13853                           tblptrl	equ	0xFF6
 13854                           tablat	equ	0xFF5
 13855                           prodh	equ	0xFF4
 13856                           prodl	equ	0xFF3
 13857                           intcon	equ	0xFF2
 13858                           indf0	equ	0xFEF
 13859                           postinc0	equ	0xFEE
 13860                           fsr0h	equ	0xFEA
 13861                           fsr0l	equ	0xFE9
 13862                           wreg	equ	0xFE8
 13863                           postdec1	equ	0xFE5
 13864                           plusw1	equ	0xFE3
 13865                           fsr1h	equ	0xFE2
 13866                           fsr1l	equ	0xFE1
 13867                           indf2	equ	0xFDF
 13868                           postinc2	equ	0xFDE
 13869                           postdec2	equ	0xFDD
 13870                           plusw2	equ	0xFDB
 13871                           fsr2h	equ	0xFDA
 13872                           fsr2l	equ	0xFD9
 13873                           status	equ	0xFD8
 13874                           
 13875 ;; *************** function _resetMotorTimer *****************
 13876 ;; Defined at:
 13877 ;;		line 99 in file "timer.c"
 13878 ;; Parameters:    Size  Location     Type
 13879 ;;		None
 13880 ;; Auto vars:     Size  Location     Type
 13881 ;;		None
 13882 ;; Return value:  Size  Location     Type
 13883 ;;                  1    wreg      void 
 13884 ;; Registers used:
 13885 ;;		wreg, status,2
 13886 ;; Tracked objects:
 13887 ;;		On entry : 0/0
 13888 ;;		On exit  : 0/0
 13889 ;;		Unchanged: 0/0
 13890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13894 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13895 ;;Total ram usage:        0 bytes
 13896 ;; Hardware stack levels used:    1
 13897 ;; This function calls:
 13898 ;;		Nothing
 13899 ;; This function is called by:
 13900 ;;		_tmr0_ISR
 13901 ;; This function uses a non-reentrant model
 13902 ;;
 13903                           
 13904                           	psect	text46
 13905  003332                     __ptext46:
 13906                           	opt stack 0
 13907  003332                     _resetMotorTimer:
 13908                           	opt stack 22
 13909                           
 13910                           ;timer.c: 100: motorControlTimer = 0;
 13911                           
 13912                           ;incstack = 0
 13913  003332  0E00               	movlw	0
 13914  003334  0101               	movlb	1	; () banked
 13915  003336  6FD6               	movwf	_motorControlTimer& (0+255),b	;volatile
 13916  003338  0E00               	movlw	0
 13917  00333A  6FD7               	movwf	(_motorControlTimer+1)& (0+255),b	;volatile
 13918  00333C  0E00               	movlw	0
 13919  00333E  6FD8               	movwf	(_motorControlTimer+2)& (0+255),b	;volatile
 13920  003340  0E00               	movlw	0
 13921  003342  6FD9               	movwf	(_motorControlTimer+3)& (0+255),b	;volatile
 13922                           
 13923                           ; BSR set to: 1
 13924  003344  0012               	return		;funcret
 13925  003346                     __end_of_resetMotorTimer:
 13926                           	opt stack 0
 13927                           tosu	equ	0xFFF
 13928                           tosh	equ	0xFFE
 13929                           tosl	equ	0xFFD
 13930                           pclatu	equ	0xFFB
 13931                           pclath	equ	0xFFA
 13932                           tblptru	equ	0xFF8
 13933                           tblptrh	equ	0xFF7
 13934                           tblptrl	equ	0xFF6
 13935                           tablat	equ	0xFF5
 13936                           prodh	equ	0xFF4
 13937                           prodl	equ	0xFF3
 13938                           intcon	equ	0xFF2
 13939                           indf0	equ	0xFEF
 13940                           postinc0	equ	0xFEE
 13941                           fsr0h	equ	0xFEA
 13942                           fsr0l	equ	0xFE9
 13943                           wreg	equ	0xFE8
 13944                           postdec1	equ	0xFE5
 13945                           plusw1	equ	0xFE3
 13946                           fsr1h	equ	0xFE2
 13947                           fsr1l	equ	0xFE1
 13948                           indf2	equ	0xFDF
 13949                           postinc2	equ	0xFDE
 13950                           postdec2	equ	0xFDD
 13951                           plusw2	equ	0xFDB
 13952                           fsr2h	equ	0xFDA
 13953                           fsr2l	equ	0xFD9
 13954                           status	equ	0xFD8
 13955                           
 13956 ;; *************** function _inverseDir *****************
 13957 ;; Defined at:
 13958 ;;		line 66 in file "motors.c"
 13959 ;; Parameters:    Size  Location     Type
 13960 ;;  dir             1    wreg     enum E2974
 13961 ;; Auto vars:     Size  Location     Type
 13962 ;;  dir             1    0[COMRAM] enum E2974
 13963 ;; Return value:  Size  Location     Type
 13964 ;;                  1    wreg      enum E2980
 13965 ;; Registers used:
 13966 ;;		wreg, status,2
 13967 ;; Tracked objects:
 13968 ;;		On entry : 0/0
 13969 ;;		On exit  : 0/0
 13970 ;;		Unchanged: 0/0
 13971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13973 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13975 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13976 ;;Total ram usage:        1 bytes
 13977 ;; Hardware stack levels used:    1
 13978 ;; This function calls:
 13979 ;;		Nothing
 13980 ;; This function is called by:
 13981 ;;		_tmr0_ISR
 13982 ;; This function uses a non-reentrant model
 13983 ;;
 13984                           
 13985                           	psect	text47
 13986  003346                     __ptext47:
 13987                           	opt stack 0
 13988  003346                     _inverseDir:
 13989                           	opt stack 22
 13990                           
 13991                           ; BSR set to: 1
 13992                           ;incstack = 0
 13993                           ;inverseDir@dir stored from wreg
 13994  003346  6E01               	movwf	inverseDir@dir,c
 13995                           
 13996                           ;motors.c: 67: return (dir == FORWARD) ? REVERSE : FORWARD;
 13997  003348  5001               	movf	inverseDir@dir,w,c
 13998  00334A  A4D8               	btfss	status,2,c
 13999  00334C  D002               	goto	i2u488_40
 14000  00334E  0E01               	movlw	1
 14001  003350  0012               	return	
 14002  003352                     i2u488_40:
 14003  003352  0E00               	movlw	0
 14004  003354  0012               	return	
 14005  003356                     __end_of_inverseDir:
 14006                           	opt stack 0
 14007                           tosu	equ	0xFFF
 14008                           tosh	equ	0xFFE
 14009                           tosl	equ	0xFFD
 14010                           pclatu	equ	0xFFB
 14011                           pclath	equ	0xFFA
 14012                           tblptru	equ	0xFF8
 14013                           tblptrh	equ	0xFF7
 14014                           tblptrl	equ	0xFF6
 14015                           tablat	equ	0xFF5
 14016                           prodh	equ	0xFF4
 14017                           prodl	equ	0xFF3
 14018                           intcon	equ	0xFF2
 14019                           indf0	equ	0xFEF
 14020                           postinc0	equ	0xFEE
 14021                           fsr0h	equ	0xFEA
 14022                           fsr0l	equ	0xFE9
 14023                           wreg	equ	0xFE8
 14024                           postdec1	equ	0xFE5
 14025                           plusw1	equ	0xFE3
 14026                           fsr1h	equ	0xFE2
 14027                           fsr1l	equ	0xFE1
 14028                           indf2	equ	0xFDF
 14029                           postinc2	equ	0xFDE
 14030                           postdec2	equ	0xFDD
 14031                           plusw2	equ	0xFDB
 14032                           fsr2h	equ	0xFDA
 14033                           fsr2l	equ	0xFD9
 14034                           status	equ	0xFD8
 14035                           tosu	equ	0xFFF
 14036                           tosh	equ	0xFFE
 14037                           tosl	equ	0xFFD
 14038                           pclatu	equ	0xFFB
 14039                           pclath	equ	0xFFA
 14040                           tblptru	equ	0xFF8
 14041                           tblptrh	equ	0xFF7
 14042                           tblptrl	equ	0xFF6
 14043                           tablat	equ	0xFF5
 14044                           prodh	equ	0xFF4
 14045                           prodl	equ	0xFF3
 14046                           intcon	equ	0xFF2
 14047                           indf0	equ	0xFEF
 14048                           postinc0	equ	0xFEE
 14049                           fsr0h	equ	0xFEA
 14050                           fsr0l	equ	0xFE9
 14051                           wreg	equ	0xFE8
 14052                           postdec1	equ	0xFE5
 14053                           plusw1	equ	0xFE3
 14054                           fsr1h	equ	0xFE2
 14055                           fsr1l	equ	0xFE1
 14056                           indf2	equ	0xFDF
 14057                           postinc2	equ	0xFDE
 14058                           postdec2	equ	0xFDD
 14059                           plusw2	equ	0xFDB
 14060                           fsr2h	equ	0xFDA
 14061                           fsr2l	equ	0xFD9
 14062                           status	equ	0xFD8
 14063                           
 14064                           	psect	text48
 14065  000000                     __ptext48:
 14066                           	opt stack 0
 14067                           tosu	equ	0xFFF
 14068                           tosh	equ	0xFFE
 14069                           tosl	equ	0xFFD
 14070                           pclatu	equ	0xFFB
 14071                           pclath	equ	0xFFA
 14072                           tblptru	equ	0xFF8
 14073                           tblptrh	equ	0xFF7
 14074                           tblptrl	equ	0xFF6
 14075                           tablat	equ	0xFF5
 14076                           prodh	equ	0xFF4
 14077                           prodl	equ	0xFF3
 14078                           intcon	equ	0xFF2
 14079                           indf0	equ	0xFEF
 14080                           postinc0	equ	0xFEE
 14081                           fsr0h	equ	0xFEA
 14082                           fsr0l	equ	0xFE9
 14083                           wreg	equ	0xFE8
 14084                           postdec1	equ	0xFE5
 14085                           plusw1	equ	0xFE3
 14086                           fsr1h	equ	0xFE2
 14087                           fsr1l	equ	0xFE1
 14088                           indf2	equ	0xFDF
 14089                           postinc2	equ	0xFDE
 14090                           postdec2	equ	0xFDD
 14091                           plusw2	equ	0xFDB
 14092                           fsr2h	equ	0xFDA
 14093                           fsr2l	equ	0xFD9
 14094                           status	equ	0xFD8
 14095                           
 14096                           	psect	rparam
 14097  0000                     tosu	equ	0xFFF
 14098                           tosh	equ	0xFFE
 14099                           tosl	equ	0xFFD
 14100                           pclatu	equ	0xFFB
 14101                           pclath	equ	0xFFA
 14102                           tblptru	equ	0xFF8
 14103                           tblptrh	equ	0xFF7
 14104                           tblptrl	equ	0xFF6
 14105                           tablat	equ	0xFF5
 14106                           prodh	equ	0xFF4
 14107                           prodl	equ	0xFF3
 14108                           intcon	equ	0xFF2
 14109                           indf0	equ	0xFEF
 14110                           postinc0	equ	0xFEE
 14111                           fsr0h	equ	0xFEA
 14112                           fsr0l	equ	0xFE9
 14113                           wreg	equ	0xFE8
 14114                           postdec1	equ	0xFE5
 14115                           plusw1	equ	0xFE3
 14116                           fsr1h	equ	0xFE2
 14117                           fsr1l	equ	0xFE1
 14118                           indf2	equ	0xFDF
 14119                           postinc2	equ	0xFDE
 14120                           postdec2	equ	0xFDD
 14121                           plusw2	equ	0xFDB
 14122                           fsr2h	equ	0xFDA
 14123                           fsr2l	equ	0xFD9
 14124                           status	equ	0xFD8
 14125                           
 14126                           	psect	temp
 14127  000065                     btemp:
 14128                           	opt stack 0
 14129  000065                     	ds	1
 14130  0000                     int$flags	set	btemp
 14131  0000                     wtemp6	set	btemp+1
 14132                           tosu	equ	0xFFF
 14133                           tosh	equ	0xFFE
 14134                           tosl	equ	0xFFD
 14135                           pclatu	equ	0xFFB
 14136                           pclath	equ	0xFFA
 14137                           tblptru	equ	0xFF8
 14138                           tblptrh	equ	0xFF7
 14139                           tblptrl	equ	0xFF6
 14140                           tablat	equ	0xFF5
 14141                           prodh	equ	0xFF4
 14142                           prodl	equ	0xFF3
 14143                           intcon	equ	0xFF2
 14144                           indf0	equ	0xFEF
 14145                           postinc0	equ	0xFEE
 14146                           fsr0h	equ	0xFEA
 14147                           fsr0l	equ	0xFE9
 14148                           wreg	equ	0xFE8
 14149                           postdec1	equ	0xFE5
 14150                           plusw1	equ	0xFE3
 14151                           fsr1h	equ	0xFE2
 14152                           fsr1l	equ	0xFE1
 14153                           indf2	equ	0xFDF
 14154                           postinc2	equ	0xFDE
 14155                           postdec2	equ	0xFDD
 14156                           plusw2	equ	0xFDB
 14157                           fsr2h	equ	0xFDA
 14158                           fsr2l	equ	0xFD9
 14159                           status	equ	0xFD8


Data Sizes:
    Strings     513
    Constant    525
    Data        191
    BSS         75
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     51     100
    BANK0           128     92     108
    BANK1           256    126     222
    BANK2           256      0     105
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 132
		 -> inputEntryQuestions(CODE[132]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 32
		 -> inputEntry@fastenerString(BANK1[32]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 32
		 -> inputEntry@fastenerString(BANK1[32]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 36
		 -> STR_10(CODE[36]), STR_8(CODE[22]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 50
		 -> packaging@msg3(BANK1[50]), packaging@msg2(BANK1[32]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 50
		 -> NULL(NULL[0]), packaging@msg3(BANK1[50]), packaging@msg2(BANK1[32]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_29(CODE[4]), STR_28(CODE[6]), STR_27(CODE[16]), STR_26(CODE[11]), 
		 -> STR_25(CODE[12]), STR_24(CODE[9]), STR_22(CODE[19]), STR_21(CODE[10]), 
		 -> STR_20(CODE[17]), STR_9(CODE[15]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 50
		 -> NULL(NULL[0]), packaging@msg3(BANK1[50]), packaging@msg2(BANK1[32]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 36
		 -> STR_29(CODE[4]), STR_28(CODE[6]), STR_27(CODE[16]), STR_26(CODE[11]), 
		 -> STR_25(CODE[12]), STR_24(CODE[9]), STR_22(CODE[19]), STR_21(CODE[10]), 
		 -> STR_20(CODE[17]), STR_10(CODE[36]), STR_9(CODE[15]), STR_8(CODE[22]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), printf@ap(BANK0[2]), 

    _doprnt@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), NULL(NULL[0]), STR_30(CODE[7]), 
		 -> fSLookup(BANK2[105]), packaging@msg3(BANK1[50]), packaging@msg2(BANK1[32]), 

    S1369__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S1369__prbuf$ptr	PTR unsigned char  size(2) Largest target is 50
		 -> NULL(NULL[0]), packaging@msg3(BANK1[50]), packaging@msg2(BANK1[32]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 50
		 -> NULL(NULL[0]), packaging@msg3(BANK1[50]), packaging@msg2(BANK1[32]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(BANK0[4]), printf@pb(BANK0[4]), 

    RTC_getTime@time	PTR unsigned char  size(2) Largest target is 7
		 -> RTC_getOperatingTime@time(BANK0[7]), RTC_startOperation@time(BANK0[7]), RTC_getSeconds@time(COMRAM[7]), 

    I2C_Send@data	PTR unsigned char  size(2) Largest target is 50
		 -> STR_23(CODE[21]), STR_18(CODE[14]), inputEntry@msg(BANK1[24]), STR_17(CODE[25]), 
		 -> STR_14(CODE[17]), STR_13(CODE[17]), STR_12(CODE[14]), STR_11(CODE[15]), 
		 -> clearing@instr(BANK0[2]), packaging@msg3(BANK1[50]), packaging@msg2(BANK1[32]), packaging@instr_321(BANK1[2]), 
		 -> packaging@msg(BANK1[34]), packaging@instr(BANK1[2]), STR_7(CODE[33]), packageCompartment@instr(BANK0[2]), 
		 -> STR_6(CODE[28]), STR_5(CODE[19]), STR_4(CODE[17]), STR_3(CODE[17]), 
		 -> STR_2(CODE[14]), STR_1(CODE[15]), 

    printErrorLCD@string	PTR unsigned char  size(2) Largest target is 224
		 -> errMsgs.noFasteners(CODE[32]), errMsgs.tooManySpacers(CODE[32]), errMsgs.tooManyWashers(CODE[32]), errMsgs.tooManyNuts(CODE[32]), 
		 -> errMsgs.tooManyBolts(CODE[32]), errMsgs.tooManyFasteners(CODE[32]), errMsgs.badEntry(CODE[32]), errMsgs(CODE[224]), 

    printStringLCD@string	PTR unsigned char  size(2) Largest target is 224
		 -> STR_19(CODE[30]), inputEntry@fastenerString(BANK1[32]), inputEntryQuestions(CODE[132]), STR_16(CODE[26]), 
		 -> STR_15(CODE[17]), errMsgs.noFasteners(CODE[32]), errMsgs.tooManySpacers(CODE[32]), errMsgs.tooManyWashers(CODE[32]), 
		 -> errMsgs.tooManyNuts(CODE[32]), errMsgs.tooManyBolts(CODE[32]), errMsgs.tooManyFasteners(CODE[32]), errMsgs.badEntry(CODE[32]), 
		 -> errMsgs(CODE[224]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 32
		 -> inputEntry@fastenerString(BANK1[32]), 

    packaging@set	PTR unsigned char  size(2) Largest target is 84
		 -> fastenerMatrix(CODE[84]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _interruptHandler in COMRAM

    _interruptHandler->_tmr0_ISR
    _tmr0_ISR->i2___ftadd
    i2_motorControl->_inverseDir
    i2___ftadd->i2___ftpack

Critical Paths under _main in BANK0

    _main->_mainMenu
    _mainMenu->_packaging
    _viewLogs->_printStringLCD
    _packaging->_packageCompartment
    _sprintf->__doprnt
    _printf->__doprnt
    __doprnt->___llmod
    ___llmod->___lldiv
    _packageCompartment->___ftge
    _inputEntry->_printErrorLCD
    _strcpy->___wmul
    _printErrorLCD->_printStringLCD
    _lcd_set_cursor->_lcd_shift_cursor
    _lcd_shift_cursor->_lcdInst
    _hibernate->_printStringLCD
    _printStringLCD->___wmul
    _putch->_lcdNibble
    _clearing->___ftge
    ___ftge->___ftadd
    ___ftadd->___ftpack
    _I2C_Send->_I2C_Master_Write
    _RTC_startOperation->_RTC_getTime
    _RTC_getOperatingTime->_RTC_getTime
    _RTC_getOperatingTime->___wmul
    _RTC_getTime->_I2C_Master_Read
    _RTC_getTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    _mainMenu->_packaging

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   85347
                                             91 BANK0      1     1      0
                    _I2C_Master_Init
                          _hibernate
                            _initLCD
                            _lcdInst
                           _mainMenu
                       _motorControl
                           _tmr0Init
 ---------------------------------------------------------------------------------
 (1) _tmr0Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _mainMenu                                            16    16      0   79442
                                             75 BANK0     16    16      0
                           _I2C_Send
               _RTC_getOperatingTime
                 _RTC_startOperation
                           _clearing
                          _hibernate
                         _inputEntry
                            _lcdInst
                          _packaging
                         _pollKeypad
                     _printStringLCD
                             _printf
                              _putch
                           _viewLogs
 ---------------------------------------------------------------------------------
 (2) _viewLogs                                             3     3      0    2026
                                             21 BANK0      3     3      0
                         _pollKeypad
                     _printStringLCD
 ---------------------------------------------------------------------------------
 (2) _packaging                                          132   132      0   30310
                                             69 BANK0      6     6      0
                                              0 BANK1    126   126      0
                           _I2C_Send
                             ___wmul
                            _lcdInst
                 _packageCompartment
                             _printf
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             18     6     12    3748
                                             40 BANK0     18     6     12
                             ___wmul (ARG)
                            __doprnt
 ---------------------------------------------------------------------------------
 (2) _printf                                              16     6     10    4212
                                             40 BANK0     16     6     10
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) __doprnt                                             24    18      6    3098
                                             22 BANK0     18    12      6
                   Absolute function *
                            ___lldiv
                            ___llmod
                              _putch *
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     412
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _packageCompartment                                  40    37      3   15114
                                             29 BANK0     40    37      3
                           _I2C_Send
                            ___ftadd
                             ___ftge
                       _motorControl
                                _tic
                               _tock
 ---------------------------------------------------------------------------------
 (2) _inputEntry                                          94    94      0   14704
                                             25 BANK0      4     4      0
                                              0 BANK1     88    88      0
                           _I2C_Send
                             ___wmul
                            _lcdInst
                     _lcd_set_cursor
                         _pollKeypad
                      _printErrorLCD
                     _printStringLCD
                              _putch
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _strcpy                                               6     2      4     289
                                              6 BANK0      6     2      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _printErrorLCD                                        4     2      2    2709
                                             21 BANK0      4     2      2
                     _printStringLCD
 ---------------------------------------------------------------------------------
 (3) _lcd_set_cursor                                       4     3      1     920
                                              6 BANK0      4     3      1
                            _lcdInst
                   _lcd_shift_cursor
 ---------------------------------------------------------------------------------
 (4) _lcd_shift_cursor                                     3     2      1     415
                                              3 BANK0      3     2      1
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _hibernate                                            6     6      0    2026
                                             21 BANK0      6     6      0
                         _pollKeypad
                     _printStringLCD
 ---------------------------------------------------------------------------------
 (3) _printStringLCD                                      15    13      2    1958
                                              6 BANK0     15    13      2
                             ___wmul (ARG)
                            _lcdInst
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _pollKeypad                                           1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _clearing                                            19    19      0   14820
                                             29 BANK0     13    13      0
                           _I2C_Send
                            ___ftadd
                             ___ftge
                       _motorControl
                                _tic
                               _tock
 ---------------------------------------------------------------------------------
 (4) _tock                                                 3     0      3       0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _tic                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _motorControl                                         2     1      1    2767
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6    2358
                                             20 BANK0      9     3      6
                            ___ftadd (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    5878
                                              8 BANK0     12     6      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2713
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _I2C_Send                                             8     6      2    2982
                                              3 BANK0      8     6      2
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _RTC_startOperation                                   9     9      0    1218
                                              6 BANK0      9     9      0
                        _RTC_getTime
 ---------------------------------------------------------------------------------
 (2) _RTC_getOperatingTime                                19    17      2    4360
                                              6 BANK0     19    17      2
                        _RTC_getTime
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2932
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _RTC_getTime                                          3     1      2     977
                                              3 BANK0      3     1      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     481
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Read                                      2     2      0      65
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (4) _lcdInst                                              1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNibble                                            2     2      0     164
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     722
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     601
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _interruptHandler                                    18    18      0    2225
                                             33 COMRAM    18    18      0
                           _tmr0_ISR
 ---------------------------------------------------------------------------------
 (8) _tmr0_ISR                                            13    13      0    2225
                                             20 COMRAM    13    13      0
                         _inverseDir
                    _resetMotorTimer
                          i2___ftadd
                     i2_motorControl
 ---------------------------------------------------------------------------------
 (9) i2_motorControl                                       2     1      1     582
                                              1 COMRAM     2     1      1
                         _inverseDir (ARG)
 ---------------------------------------------------------------------------------
 (9) i2___ftadd                                           12     6      6    1253
                                              8 COMRAM    12     6      6
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (10) i2___ftpack                                          8     3      5     309
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) _resetMotorTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _inverseDir                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _hibernate
     _pollKeypad
     _printStringLCD
       ___wmul (ARG)
       _lcdInst (ARG)
         _lcdNibble
       _putch (ARG)
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _mainMenu
     _I2C_Send
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _RTC_getOperatingTime
       _RTC_getTime
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       ___wmul
     _RTC_startOperation
       _RTC_getTime
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
     _clearing
       _I2C_Send
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       ___ftadd
         ___ftpack
       ___ftge
         ___ftadd (ARG)
           ___ftpack
       _motorControl
       _tic
       _tock
     _hibernate
       _pollKeypad
       _printStringLCD
         ___wmul (ARG)
         _lcdInst (ARG)
           _lcdNibble
         _putch (ARG)
           _lcdNibble
     _inputEntry
       _I2C_Send
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       ___wmul
       _lcdInst
         _lcdNibble
       _lcd_set_cursor
         _lcdInst
           _lcdNibble
         _lcd_shift_cursor
           _lcdInst
             _lcdNibble
       _pollKeypad
       _printErrorLCD
         _printStringLCD
           ___wmul (ARG)
           _lcdInst (ARG)
             _lcdNibble
           _putch (ARG)
             _lcdNibble
       _printStringLCD
         ___wmul (ARG)
         _lcdInst (ARG)
           _lcdNibble
         _putch (ARG)
           _lcdNibble
       _putch
         _lcdNibble
       _strcpy
         ___wmul (ARG)
     _lcdInst
       _lcdNibble
     _packaging
       _I2C_Send
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       ___wmul
       _lcdInst
         _lcdNibble
       _packageCompartment
         _I2C_Send
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         ___ftadd
           ___ftpack
         ___ftge
           ___ftadd (ARG)
             ___ftpack
         _motorControl
         _tic
         _tock
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lldiv *
           ___llmod *
             ___lldiv (ARG)
           _putch *
             _lcdNibble
       _sprintf
         ___wmul (ARG)
         __doprnt (ARG)
           Absolute function(Fake) *
           ___lldiv *
           ___llmod *
             ___lldiv (ARG)
           _putch *
             _lcdNibble
     _pollKeypad
     _printStringLCD
       ___wmul (ARG)
       _lcdInst (ARG)
         _lcdNibble
       _putch (ARG)
         _lcdNibble
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lldiv *
         ___llmod *
           ___lldiv (ARG)
         _putch *
           _lcdNibble
     _putch
       _lcdNibble
     _viewLogs
       _pollKeypad
       _printStringLCD
         ___wmul (ARG)
         _lcdInst (ARG)
           _lcdNibble
         _putch (ARG)
           _lcdNibble
   _motorControl
   _tmr0Init

 _interruptHandler (ROOT)
   _tmr0_ISR
     _inverseDir
     _resetMotorTimer
     i2___ftadd
       i2___ftpack
     i2_motorControl
       _inverseDir (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      69       9       41.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     7E      DE       7       86.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5C      6C       5       84.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     33      64       1       79.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     217      34        0.0%
DATA                 0      0     217       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar 27 16:29:42 2018

              _motorGoingBackwards 0040                                 l99 1138  
              printErrorLCD@string 0095                ___wmul@multiplicand 0082  
                      __CFG_BORV$3 000000                         i2___ftpack 29B6  
                     __CFG_CP0$OFF 000000                        _RTC_getTime 2E52  
                     __CFG_CP1$OFF 000000                       __CFG_CP2$OFF 000000  
                     __CFG_CP3$OFF 000000                       ___ftadd@exp1 0093  
                     ___ftadd@exp2 0092                       ___ftadd@sign 0091  
                              l100 11BC                                l101 1230  
                              l102 12A4                                l103 1318  
                              l104 1348                                l105 1376  
                              l114 146A                                l106 13A4  
                              l122 14D4                                l107 13D2  
                              l132 1576                                l124 14F0  
                              l141 0794                                l134 181C  
                              l160 0A28                                l152 090A  
                              l144 07EC                                l128 157C  
                              l161 0AA8                                l153 098A  
                              l145 086C                                l170 0BE8  
                              l162 0ACA                                l154 09AC  
                              l146 088E                                l402 0308  
                              l420 0628                                l412 04C4  
                              l173 0C3A                                l165 0B1C  
                              l157 09FE                                l149 08E0  
                              l501 2230                                l405 033C  
                              l502 2240                                l422 065C  
                              l414 053C                                l407 0480  
                              l168 0B46                                l512 31CE  
                              l272 307A                                l424 0690  
                              l416 05C2                                l408 04A8  
                              l360 322A                                l440 1CC2  
                              l169 0BC6                                l353 3124  
                              l273 3070                                l409 04B2  
                              l426 06C4                                l418 05F4  
                              l370 0082                                l442 1D94  
                              l434 1BEC                                l186 2904  
                              l427 06E8                                l371 0126  
                              l443 1DAE                                l435 1C0C  
                              l372 0116                                l436 1C48  
                              l517 2B6A                                l429 0720  
                              l518 2B26                                l438 1F52  
                              l375 075A                                l391 02A6  
                              l383 01DE                                l376 0180  
                              l393 02B4                                l385 025A  
                              l730 26E0                                l386 02C6  
                              l491 2058                                l379 06F4  
                              l395 02C0                                l732 26EA  
                              l492 209E                                l741 271E  
                              l493 20EC                                l397 02F8  
                              l389 0298                                l742 2724  
                              l734 26F6                                l494 211A  
                              l559 2E96                                l751 2762  
                              l743 2730                                l728 2774  
                              l736 26FC                                l488 1FE6  
                              l753 276E                                l745 273A  
                              l737 2708                                l729 26D2  
                              l498 21FC                                l747 2746  
                              l739 2712                                l771 0DE2  
                              l748 274C                                l749 2758  
                              l781 0CFE                                l782 0D68  
                              l774 0CC0                                l766 0C42  
                              l783 0DB8                                l767 0CB8  
                              l768 0C8C                                l793 0F2A  
                              l777 0E1A                                l794 0F54  
                              l786 0E52                                l778 0CC4  
                              l787 0E84                                l796 0F62  
                              l788 0E9C                                l797 1022  
                              l798 104C                       __CFG_CPB$OFF 000000  
                     __CFG_CPD$OFF 000000                                _tic 3364  
                              prod 000FF3                   ?_resetMotorTimer 0001  
                              tosl 000FFD                                wreg 000FE8  
                  ?_lcd_set_cursor 0086                       __CFG_LVP$OFF 000000  
                     __CFG_WDT$OFF 000000                               l1020 294E  
                             l1022 298C                               l1023 2982  
                             l1016 2930                               l1017 2926  
                             l1019 2964                               l1051 22C0  
                             l1061 231C                               l1070 235A  
                             l1062 2312                               l1071 2350  
                             l1047 2296                               l1152 2DFE  
                             l1056 2326                               l1153 2DF2  
                             l1073 237E                               l1074 239A  
                             l1162 2F58                               l1075 23CA  
                             l1163 2F4C                               l1156 2E32  
                             l1157 2E40                               l1166 2F80  
                             l1167 2F8E                               l1088 2BD8  
                             l1089 2C08                               l1365 31A0  
                             l1366 3196                               l5109 21FC  
                             l5087 20FC                               l5191 0F62  
                             l5167 0EA0                               l5505 14F0  
                             l6057 1D9E                               l4803 2C34  
                             l6075 1E50                               l5613 09CA  
                             l5471 2E8E                               l5821 0318  
                             l5741 0116                               l5647 0AE8  
                             l5681 0C06                               l5921 0734  
                             l5579 08AC                               l5843 0490  
                             l5839 0480                               l5875 052C  
                             l5893 05F4                               l5885 058E  
                             ?_tic 0001                               STR_1 FF77  
                             STR_2 FFB2                               STR_3 FF23  
                             STR_4 FF34                               STR_5 FEEE  
                             STR_6 FE61                               STR_7 FE22  
                             STR_8 FEB0                               STR_9 FF95  
                             _T0IE 007F95                               _T0IF 007F92  
                             _LATA 000F89                               _LATB 000F8A  
                             _LATC 000F8B                               _LATD 000F8C  
                             _LATE 000F8D                               u6000 20D8  
                             u6110 21F6                               u6030 20FC  
                             u6007 20CE                               u7000 09CA  
                             u6040 2118                               u6130 222C  
                             u6050 2148                               u6210 0D5E  
                             u7100 0C06                               u6220 0DA2  
                             u6117 21EC                               u6230 0DDA  
                             u6208 0D2C                               u6137 2222  
                             u6057 213E                               u6217 0D54  
                             u6209 0D60                               u5610 2918  
                             u6410 2288                               u7050 0AE8  
                             u6090 21C0                               u7211 01A6  
                             u6227 0D98                               u6237 0DD0  
                             u6510 232E                               u7150 00F8  
                             u6350 105E                               u8007 2D70  
                             u6440 22B2                               u7160 0108  
                             u5720 2F5C                               u6360 107A  
                             u6328 0F16                               u8017 2D7A  
                             u6097 21B6                               u5650 2996  
                             u7250 0282                               u6290 0EDE  
                             u6178 0C78                               u8027 2DB2  
                             u6371 2254                               u6540 2362  
                             u7500 061A                               u7420 0490  
                             u7340 02EE                               u7180 017E  
                             u6348 100E                               u8037 2DBC  
                             u6381 2268                               u6470 22F0  
                             u7510 064E                               u5920 1FE4  
                             u7520 0682                               u7440 04BC  
                             u5585 2D88                               u5690 2E02  
                             u5586 2D8A                               u5930 2014  
                             u7530 06B6                               u7370 033A  
                             u7194 0192                               u5595 2DCA  
                             u7195 018E                               u5596 2DCC  
                             u5860 2B56                               u7381 0380  
                             u6901 182E                               u5870 2B9A  
                             u5950 204A                               u7550 0734  
                             u7470 058E                               u6840 2EB4  
                             u7480 05B4                               u7640 1E50  
                             u5937 200A                               u5970 2088  
                             u7490 05E6                               u5867 2B4C  
                             u7707 1C7A                               u5877 2B90  
                             u5957 2040                               u7717 1C90  
                             u6950 08AC                               u7575 2FD6  
                             u5895 3212                               u6871 14FA  
                             u7807 1ECC                               u7727 1D02  
                             u5896 3214                               u5977 207E  
                             u7817 1EE6                               u7737 1D18  
                             u7907 00D8                               u7827 1EFC  
                             u7747 1D86                               u7917 050C  
                             u7837 1F44                               u7757 1DBC  
                             u7927 3284                               u7847 1700  
                             u7767 1DD2                               u7687 28AC  
                             u7937 305E                               u7857 1716  
                             u7777 1E3C                               u7697 28C2  
                             u7947 1FA8                               u7867 1812  
                             u7787 1E5E                               u7957 1FBE  
                             u7877 1438                               u7797 1E74  
                             u7967 32FE                               u7887 0020  
                             u7977 3008                               u7897 0036  
                             u7987 303C                               u7997 3316  
                             _main 2852           __end_of_interruptHandler 2B06  
                     ___ftpack@arg 0080               _RTC_getOperatingTime 259C  
                     ___ftpack@exp 0083                               _tock 3356  
                             _test 01DA       __end_of_assemblyStepEncoding FC3F  
                             fsr0h 000FEA                               fsr1h 000FE2  
                             indf0 000FEF                               fsr2h 000FDA  
                             fsr0l 000FE9                               indf2 000FDF  
                             fsr1l 000FE1                               fsr2l 000FD9  
                 __end_of_I2C_Send 2BA6                               btemp 0065  
                     i2___ftadd@f1 0009                       i2___ftadd@f2 000C  
                             prodh 000FF4                               prodl 000FF3  
                             start 000E                      __CFG_IESO$OFF 000000  
                    __CFG_MCLRE$ON 000000                       ___param_bank 000000  
                 __end_of_LCD_LEFT FC41                              ??_tic 0080  
                  ??_printErrorLCD 0097              I2C_Master_Read@ackBit 0081  
                 ?_I2C_Master_Init 008D                   ?_I2C_Master_Read 0001  
                 ?_I2C_Master_Wait 0001                   ?_I2C_Master_Stop 0001  
                            ?_main 0001                    __end_of___ftadd 23F0  
                            STR_10 FDFE                              STR_11 FF86  
                            STR_12 FFC0                              STR_20 FF12  
                            STR_21 FEE4                              STR_13 FF45  
                            STR_30 FFEE                              STR_14 FF56  
                            STR_22 FEDB                              STR_15 FF01  
                            STR_23 FEC6                              STR_24 FFE5  
                            STR_16 FE7D                              STR_25 FFCE  
                            STR_17 FE97                              STR_26 FFDA  
                            STR_18 FFA4                              STR_27 FF67  
                            STR_19 FE43                              STR_28 FFF5  
                            STR_29 FFFB                              ?_tock 0080  
                  __end_of___lldiv 2E52                    __end_of___llmod 2FA0  
                            i2l180 2ABA                              i2l730 27A2  
                            i2l732 27AC                              i2l741 27E0  
                            i2l661 1918                              i2l653 1894  
                            i2l742 27E6                              i2l734 27B8  
                            i2l670 1BC0                              i2l751 2824  
                            i2l743 27F2                              i2l671 1996  
                            i2l663 194E                              i2l655 18D2  
                            i2l728 2836                              i2l736 27BE  
                            i2l753 2830                              i2l745 27FC  
                            i2l737 27CA                              i2l729 2796  
                            i2l665 1956                              i2l657 18DA  
                            i2l682 1AA2                              i2l674 19DC  
                            i2l747 2808                              i2l739 27D4  
                            i2l667 198C                              i2l659 1910  
                            i2l748 280E                              i2l684 1AE8  
                            i2l749 281A                              i2l677 1A1C  
                            i2l694 1BBA                              i2l695 1BE0  
                            i2l687 1B28                              i2l679 1A62  
                            i2l689 1B78                     i2_motorControl 2792  
                            _TMR0H 000FD7                              _TMR0L 000FD6  
                            _PORTB 000F81                    __end_of__doprnt 1084  
                            _TRISA 000F92                              _TRISB 000F93  
                            _TRISC 000F94                              _TRISD 000F95  
                            _TRISE 000F96               printStringLCD@string 0086  
                  mainMenu@pressed 00D7                      __CFG_PWRT$OFF 000000  
                    __CFG_WRT0$OFF 000000                      __CFG_WRT1$OFF 000000  
                    __CFG_WRT2$OFF 000000                      __CFG_WRT3$OFF 000000  
                  __end_of_lcdInst 331E                     __CFG_EBTR0$OFF 000000  
                   __CFG_FCMEN$OFF 000000                     __CFG_EBTR1$OFF 000000  
                   __CFG_EBTR2$OFF 000000                     __CFG_EBTR3$OFF 000000  
                    __CFG_WRTB$OFF 000000                      __CFG_WRTC$OFF 000000  
                    __CFG_WRTD$OFF 000000                    __end_of_errMsgs FD26  
                  __end_of_initLCD 304C                     __CFG_EBTRB$OFF 000000  
                  __end_of_dpowers FC19                      ___ftpack@sign 0084  
                            _putch 32EE                              pclath 000FFA  
                            tablat 000FF5                  _LCDinterruptState 004C  
                            plusw1 000FE3                              plusw2 000FDB  
            ?_RTC_getOperatingTime 0086                              status 000FD8  
      I2C_Master_Read@receivedByte 0082                              wtemp6 0066  
                  __end_of_sprintf 30D8                 __size_ofi2___ftadd 01AC  
                 _timeSinceLastTic 0059                    __initialization 2C38  
                     __end_of_main 2906                       __end_of_tock 3364  
                ?_lcd_shift_cursor 0083                     __CFG_OSC$HSPLL 000000  
                      ?i2___ftpack 0001             __end_ofi2_motorControl 2852  
                __end_of_LCD_RIGHT FC42                             ??_main 00DB  
                           ??_tock 0083                 ??_lcd_shift_cursor 0084  
                    __activetblptr 000003                     packaging@F3230 01B8  
                   packaging@F3226 01BA                     packaging@F3228 017E  
                ?_I2C_Master_Start 0001                  ?_I2C_Master_Write 0081  
                        I2C_Send@i 0089                 ??_I2C_Master_Start 0081  
                           _ADCON0 000FC2                             _ADCON1 000FC1  
               ??_I2C_Master_Write 0083                   ___llmod@dividend 008D  
      __size_of_RTC_startOperation 0084                             ?_putch 0001  
                 __end_of___ftpack 29B6                             i2l1020 29FC  
                           i2l1022 2A3A                             i2l1023 2A30  
                           i2l1016 29DE                             i2l1017 29D4  
                           i2l1019 2A12                             i2l1051 246C  
                           i2l1061 24C8                             i2l1070 2506  
                           i2l1062 24BE                             i2l1071 24FC  
                           i2l1047 2442                             i2l1056 24D2  
                           i2l1073 252A                             i2l1074 2546  
                           i2l1075 2576                             i2l4513 1A1C  
                           i2l4533 1AA2                             i2l4553 1B28  
                           u502_41 2400                             u503_41 2414  
                    inputEntry@msg 0100                             _TMR0IE 007F95  
                    inputEntry@sum 0145                             _SSPADD 000FC8  
                   packaging@instr 0174                             _SSPBUF 000FC9  
                 __end_of_clearing 0C40                     __CFG_XINST$OFF 000000  
                           ___ftge 2BA6                   __end_of_mainMenu 1F7C  
                     RTC_getTime@i 0085                    motorControl@dir 0080  
                           ___wmul 3244                          ??___ftadd 008E  
                   __CFG_STVREN$ON 000000                   __end_of_nanoAddr FC40  
                        ??___lldiv 0088                          ??___llmod 0095  
                        ??__doprnt 009C                             _params 01BC  
                           clear_0 2C9E                             clear_1 2CAA  
                           clear_2 2CB6                             _extras 00E4  
                    inverseDir@dir 0001                       __doprnt@flag 00A0  
                 ??_printStringLCD 0088                          ??_lcdInst 0082  
                           _printf 3154                    ?i2_motorControl 0002  
                 __end_of_tmr0_ISR 1BE2                       __doprnt@prec 009E  
                 __end_of_tmr0Init 32B4                             _strcpy 318C  
                        ??_initLCD 0083                    _currentMotorDir 0055  
             _assemblyStepEncoding FC3A                       __pdataCOMRAM 004D  
                        ?_I2C_Send 0083                  __end_ofi2___ftadd 259C  
                   i2___ftadd@exp1 0014                     i2___ftadd@exp2 0013  
                   i2___ftadd@sign 0012                       __mediumconst FBF0  
                 __end_of_viewLogs 3244                             tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
                        ??_sprintf 00B4               __end_of_LCDMenuIcons FC3A  
           ??_RTC_getOperatingTime 0088               clearing@debounceTime 00A4  
                       __accesstop 0080            __end_of__initialization 2CBC  
                  __CFG_PBADEN$OFF 000000                         ___ftadd@f1 0088  
                       ___ftadd@f2 008B                __size_ofi2___ftpack 00AE  
                       ___ftge@ff1 0094                         ___ftge@ff2 0097  
                _motorControlTimer 01D6                      ___rparam_used 000001  
                   i2___ftpack@arg 0001                     i2___ftpack@exp 0004  
       packageCompartment@currTime 00C2                     __pcstackCOMRAM 0001  
                     __pidataBANK1 30D8                       __pidataBANK2 2ECE  
                  viewLogs@pressed 0096         __end_of_packageCompartment 1470  
                    __end_of_putch 3306                       ?_RTC_getTime 0083  
                 ??_lcd_set_cursor 0087                 __size_of_lcdNibble 0084  
                       ??_I2C_Send 0085                        inputEntry@i 0155  
                     packaging@msg 0100                       packaging@set 0178  
               __size_of_hibernate 003E                         __doprnt@ap 009A  
                       __doprnt@cp 00A5                         __doprnt@pb 0096  
                          ??_putch 0082                         __pbssBANK0 00DC  
                       __pbssBANK1 01BC                 __size_of_packaging 03C0  
              mainMenu@needToPrint 00D5                  ?_interruptHandler 0001  
               ??_interruptHandler 0022                _inputEntryQuestions FD26  
                          ?___ftge 0094                            ?___wmul 0080  
                        ?___ftpack 0080                            ?_printf 00A8  
                     I2C_Send@data 0083                            ?_strcpy 0086  
                   inputEntry@done 013B                          ?_clearing 0001  
                   inputEntry@numB 0147                     inputEntry@numN 0149  
                   inputEntry@numS 014B                     inputEntry@numW 014D  
                          _SSPCON1 000FC6                            _SSPCON2 000FC5  
                          _SSPSTAT 000FC7                          ?_mainMenu 0001  
         __size_of_resetMotorTimer 0014                 timer@operatingTime 005C  
                        ?_tmr0_ISR 0001                  __end_of_lcdNibble 2DCE  
                        ?_tmr0Init 0001                            __Hparam 0000  
RTC_getOperatingTime@operatingTime 0093                            __Lparam 0000  
                __end_of_hibernate 3154                          ?_viewLogs 0001  
                  __size_of___ftge 0092                            ___ftadd 2242  
                          ___lldiv 2DCE                    __size_of___wmul 0028  
                          ___llmod 2F38                            __doprnt 0C40  
          RTC_getOperatingTime@res 0091                      ?_motorControl 0080  
                          __pcinit 2C38                       ??i2___ftpack 0006  
                       ??___ftpack 0085                            __ramtop 1000  
                          _endTime 0034              __end_of_printErrorLCD 3292  
                          _lcdInst 3306                  __end_of_packaging 1830  
                          __ptext0 2852                            __ptext1 3292  
                          __ptext2 1BE2                            __ptext3 321C  
                          __ptext4 1470                            __ptext5 3094  
                          __ptext6 3154                            __ptext7 0C40  
                          __ptext8 2F38                            __ptext9 1084  
                  __size_of_printf 0038                          _T0CONbits 000FD5  
                          _errMsgs FC46                    __size_of_strcpy 0034  
                          _initLCD 3000                            _dpowers FBF1  
       printStringLCD@newlineIndex 008F                       __size_of_tic 000E  
                        _LCD_RIGHT FC41                         _inputEntry 0012  
         __size_of_I2C_Master_Init 0060           __size_of_I2C_Master_Read 002A  
                       ??_clearing 009D           __size_of_I2C_Master_Wait 0014  
                       _inverseDir 3346           __size_of_I2C_Master_Stop 0008  
         printStringLCD@spaceIndex 008D                    printStringLCD@i 0093  
                  printStringLCD@j 008B                            _sprintf 3094  
                   __pintcode_body 2A64          __size_of_lcd_shift_cursor 0022  
             end_of_initialization 2CBC                         ??_mainMenu 00CB  
            __end_of_LCD_SIZE_HORZ FC44              __end_of_LCD_SIZE_VERT FC43  
         inputEntry@fastenerString 0118                            int_func 2A64  
               __end_ofi2___ftpack 2A64                         ??_tmr0_ISR 0015  
                       ??_tmr0Init 0080          __size_of_I2C_Master_Start 0008  
        __size_of_I2C_Master_Write 000A                    ___lldiv@divisor 0084  
                  ___lldiv@counter 008C                         _pollKeypad 31C0  
           packageCompartment@numB 00B2             packageCompartment@numN 00B4  
           packageCompartment@numS 00B6             packageCompartment@numW 00B8  
                          printf@f 00A8                   ??i2_motorControl 0003  
                          postdec1 000FE5                            postdec2 000FDD  
                       ??_viewLogs 0095                            postinc0 000FEE  
                          postinc2 000FDE                     ??_motorControl 0081  
        inputEntry@doneCompartment 0143                       _LCDMenuIcons FC2A  
                    _longTolerance 0051                          _PORTAbits 000F80  
                        _PORTBbits 000F81               __size_of_RTC_getTime 007C  
                        _TRISCbits 000F94         __end_of_RTC_startOperation 2D4A  
                __size_of_I2C_Send 00A0                          i2___ftadd 23F0  
     inputEntry@compartmentsToFill 013A          lcd_shift_cursor@direction 0083  
              i2motorControl@motor 0003                    i2___ftpack@sign 0005  
                ??_resetMotorTimer 0001                     __end_of___ftge 2C38  
                   __end_of___wmul 326C                      __pidataCOMRAM 32D6  
               pollKeypad@keypress 0080                     __end_of_printf 318C  
              packageCompartment@b 00A5                packageCompartment@n 009D  
              packageCompartment@s 009E                packageCompartment@w 009F  
                   __end_of_strcpy 31C0                start_initialization 2C38  
                      ?_inputEntry 0001                        ?_inverseDir 0001  
               _packageCompartment 1084                        __end_of_tic 3372  
                       ?i2___ftadd 0009               inputEntry@numPressed 0151  
                ??_I2C_Master_Init 0091                  ??_I2C_Master_Read 0081  
              ?_packageCompartment 009D                  ??_I2C_Master_Wait 0080  
                ??_I2C_Master_Stop 0081      __size_of_RTC_getOperatingTime 0130  
                  ___llmod@divisor 0091                    ___llmod@counter 0095  
                    packaging@msg2 0154                      packaging@msg3 0122  
                    packaging@mult 017A            packaging@compartmentNum 017C  
                      ?_pollKeypad 0001                      clearing@F3240 0061  
                         ??___ftge 009A                           ??___wmul 0084  
                      __doprnt@val 00A1           I2C_Master_Init@clockFreq 008D  
                      __pdataBANK1 017E                        __pdataBANK2 0200  
                 __CFG_LPT1OSC$OFF 000000               ??_packageCompartment 00A0  
                         ??_printf 00B2          __size_of_interruptHandler 2AFE  
                         ??_strcpy 008A                      clearing@instr 009F  
                __size_of___ftpack 00B0                        __pbssCOMRAM 0034  
                 hibernate@pressed 0099                      __pcstackBANK0 0080  
                    __pcstackBANK1 0100             RTC_startOperation@time 0088  
         inputEntry@inputEntryStep 014F                   _lcd_shift_cursor 32B4  
          __size_of_printStringLCD 02C6                  __size_of_clearing 04DA  
                  RTC_getTime@time 0083               __end_of_motorControl 2792  
                        __doprnt@c 00A7                          __doprnt@f 0098  
                __size_of_mainMenu 039A                   _I2C_Master_Start 3384  
                 _I2C_Master_Write 3372                  __CFG_CCP2MX$PORTC 000000  
                __size_of_tmr0_ISR 03B2                  __size_of_tmr0Init 0022  
              __size_of_inputEntry 0754                          __pintcode 0008  
                    __pmediumconst FBF0                          _lcdNibble 2D4A  
              __size_of_inverseDir 0010                           ?___ftadd 0088  
                         ?___lldiv 0080                           ?___llmod 008D  
                         ?__doprnt 0096                  __size_of_viewLogs 0028  
                        _hibernate 3116                           ?_lcdInst 0001  
                        _dispensed 00DC                           ?_initLCD 0001  
                         _I2C_Send 2B06                          _packaging 1470  
              __size_of_pollKeypad 0032                        ??i2___ftadd 000F  
                         ?_sprintf 00A8                     __size_of_putch 0018  
                  inputEntry@F3210 01A0                    inputEntry@F3189 005F  
              __end_of_keypadChars FC2A                           _LCD_LEFT FC40  
          __size_of_lcd_set_cursor 0048                     _fastenerMatrix FDAA  
                   ___wmul@product 0084                           _LATBbits 000F8A  
                         _LATCbits 000F8B         inputEntry@compartmentLabel 0138  
                         _LATDbits 000F8C                           _LATEbits 000F8D  
                    _operatingTime 0044                    lcd_set_cursor@i 0088  
                  lcd_set_cursor@x 0089                    lcd_set_cursor@y 0086  
                         i2u413_40 2A44                           i2u512_40 249C  
                         i2u409_40 29C6                           i2u506_40 2434  
                         i2u516_40 24DA                           i2u509_40 245E  
                        _operating 004B                           i2u519_40 250E  
                         i2u488_40 3352                    inputEntry@found 013D  
                 __CFG_WDTPS$32768 000000                         ?_lcdNibble 0001  
         inputEntry@compartmentNum 0153                          _timerInit 004A  
      __end_of_inputEntryQuestions FDAA                         ?_hibernate 0001  
                ___wmul@multiplier 0080                          _startTime 003A  
                    lcdNibble@data 0081                      lcdNibble@temp 0080  
                       ?_packaging 0001                          mainMenu@i 00D9  
                   _LCD_HORZ_LIMIT FC45                inputEntry@setIsGood 013F  
                        copy_data0 2C4C                          copy_data1 2C6C  
                        copy_data2 2C8C             __end_of_fastenerMatrix FDFE  
                  _resetMotorTimer 3332            inputEntry@doneMultiples 0141  
               mainMenu@startPress 00D3             __size_of_printErrorLCD 0026  
               _RTC_startOperation 2CC6                           __Hrparam 0000  
                         __Lrparam 0000                 __CFG_BOREN$SBORDIS 000000  
                         _fSLookup 0200                ?_RTC_startOperation 0001  
                  I2C_Send@address 0088                   __size_of___ftadd 01AE  
                 __size_of___lldiv 0084                   __size_of___llmod 0068  
                    ??_RTC_getTime 0085                           ___ftpack 2906  
                 __size_of__doprnt 0444                   _interruptHandler 0008  
                 __size_of_lcdInst 0018                  motorControl@motor 0081  
                      _currentMode 0048                    _I2C_Master_Init 2FA0  
                  _I2C_Master_Read 31F2                   __size_of_initLCD 004C  
                  _I2C_Master_Wait 331E                     _shortTolerance 004D  
         RTC_getOperatingTime@time 008A                    _I2C_Master_Stop 337C  
           __end_of_LCD_HORZ_LIMIT FC46                       ??_inputEntry 0099  
                      _keypadChars FC19                       ??_inverseDir 0001  
            __size_of_motorControl 00C6                           _clearing 0766  
                         __ptext10 0012                           __ptext11 318C  
                         __ptext20 3356                           __ptext12 326C  
                         __ptext21 3364                           __ptext13 304C  
                         __ptext30 2E52                           __ptext22 26CC  
                         __ptext14 32B4                           __ptext31 3372  
                         __ptext23 2BA6                           __ptext15 3116  
                         __ptext40 2DCE                           __ptext32 337C  
                         __ptext24 2242                           __ptext16 1F7C  
                         __ptext33 3384                           __ptext25 2906  
                         __ptext17 32EE                           __ptext42 1830  
                         __ptext34 31F2                           __ptext26 2B06  
                         __ptext18 31C0                           __ptext43 2792  
                         __ptext35 331E                           __ptext27 2CC6  
                         __ptext19 0766                           __ptext44 23F0  
                         __ptext36 3000                           __ptext28 259C  
                         __ptext45 29B6                           __ptext37 3306  
                         __ptext29 3244                           __ptext46 3332  
                         __ptext38 2D4A                           __ptext47 3346  
                         __ptext39 2FA0                           __ptext48 0000  
                   _printStringLCD 1F7C               ??_RTC_startOperation 0086  
                   _LCD_VERT_LIMIT FC44                           _mainMenu 1BE2  
                 __size_of_sprintf 0044                           _nanoAddr FC3F  
                       strcpy@from 0088                      __size_of_main 00B4  
                    __size_of_tock 000E                           _tmr0_ISR 1830  
                         _tmr0Init 3292                       ??_pollKeypad 0080  
                      ??_lcdNibble 0080                           _viewLogs 321C  
               __end_of_inputEntry 0766                           int$flags 0065  
               __end_of_inverseDir 3356           __end_of_lcd_shift_cursor 32D6  
                i2motorControl@dir 0002                        ??_hibernate 0095  
     __end_of_RTC_getOperatingTime 26CC                       _motorControl 26CC  
      I2C_Master_Write@byteToWrite 0081                      _printErrorLCD 326C  
                lcd_shift_cursor@n 0085                          putch@data 0082  
         __end_of_I2C_Master_Start 338C           __end_of_I2C_Master_Write 337C  
                       _INTCONbits 000FF2            __end_of_resetMotorTimer 3346  
          __size_ofi2_motorControl 00C0                        ??_packaging 00C5  
           __end_of_printStringLCD 2242             __end_of_LCD_VERT_LIMIT FC45  
              __end_of_RTC_getTime 2ECE     printStringLCD@newlineCharIndex 0091  
               __end_of_pollKeypad 31F2                           intlevel2 0000  
                   _lcd_set_cursor 304C                          sprintf@ap 00B4  
                        sprintf@pb 00B6                          sprintf@wh 00A8  
          packageCompartment@F3222 0063                      _LCD_SIZE_HORZ FC43  
                    _LCD_SIZE_VERT FC42                   ___lldiv@dividend 0080  
       tmr0_ISR@motorControlTimerB 001A         tmr0_ISR@motorControlTimerN 001C  
       tmr0_ISR@motorControlTimerS 001E         tmr0_ISR@motorControlTimerW 0020  
            mainMenu@operationTime 00CF            packageCompartment@doneB 00BA  
          packageCompartment@doneN 00BC            packageCompartment@doneS 00BE  
          packageCompartment@doneW 00C0            packageCompartment@instr 00A3  
          packageCompartment@timeB 00A6            packageCompartment@timeN 00A9  
          packageCompartment@timeS 00AC            packageCompartment@timeW 00AF  
                         printf@ap 00B2                           printf@pb 00B4  
          __end_of_I2C_Master_Init 3000            __end_of_I2C_Master_Read 321C  
          __end_of_I2C_Master_Wait 3332            __end_of_I2C_Master_Stop 3384  
                      lcdInst@data 0082                  inputEntry@pressed 0157  
                   ?_printErrorLCD 0095        __size_of_packageCompartment 03EC  
                         sprintf@f 00AA                   ___lldiv@quotient 0088  
                         strcpy@cp 008A                           strcpy@to 0086  
                  ?_printStringLCD 0086                        _SSPCON1bits 000FC6  
                      _SSPCON2bits 000FC5             __end_of_lcd_set_cursor 3094  
                 clearing@currTime 00A7                 packaging@instr_321 0176  
         lcd_shift_cursor@numChars 0084                   clearing@spinTime 00A1  
