

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Apr 02 17:16:02 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     9                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
    10                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
    11                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    12                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    17                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    18                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    19                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    20                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    21                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    23                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    24                           	psect	text0,global,reloc=2,class=CODE,delta=1
    25                           	psect	text1,global,reloc=2,class=CODE,delta=1
    26                           	psect	text2,global,reloc=2,class=CODE,delta=1
    27                           	psect	text3,global,reloc=2,class=CODE,delta=1
    28                           	psect	text4,global,reloc=2,class=CODE,delta=1
    29                           	psect	text5,global,reloc=2,class=CODE,delta=1
    30                           	psect	text6,global,reloc=2,class=CODE,delta=1
    31                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text9,global,reloc=2,class=CODE,delta=1
    34                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text13,global,reloc=2,class=CODE,delta=1
    38                           	psect	text14,global,reloc=2,class=CODE,delta=1
    39                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text16,global,reloc=2,class=CODE,delta=1
    41                           	psect	text17,global,reloc=2,class=CODE,delta=1
    42                           	psect	text18,global,reloc=2,class=CODE,delta=1
    43                           	psect	text19,global,reloc=2,class=CODE,delta=1
    44                           	psect	text20,global,reloc=2,class=CODE,delta=1
    45                           	psect	text21,global,reloc=2,class=CODE,delta=1
    46                           	psect	text22,global,reloc=2,class=CODE,delta=1
    47                           	psect	text23,global,reloc=2,class=CODE,delta=1
    48                           	psect	text24,global,reloc=2,class=CODE,delta=1
    49                           	psect	text25,global,reloc=2,class=CODE,delta=1
    50                           	psect	text26,global,reloc=2,class=CODE,delta=1
    51                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text30,global,reloc=2,class=CODE,delta=1
    55                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text32,global,reloc=2,class=CODE,delta=1
    57                           	psect	text33,global,reloc=2,class=CODE,delta=1
    58                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text35,global,reloc=2,class=CODE,delta=1
    60                           	psect	text36,global,reloc=2,class=CODE,delta=1
    61                           	psect	text37,global,reloc=2,class=CODE,delta=1
    62                           	psect	text38,global,reloc=2,class=CODE,delta=1
    63                           	psect	text39,global,reloc=2,class=CODE,delta=1
    64                           	psect	text40,global,reloc=2,class=CODE,delta=1
    65                           	psect	text41,global,reloc=2,class=CODE,delta=1
    66                           	psect	text42,global,reloc=2,class=CODE,delta=1
    67                           	psect	text43,global,reloc=2,class=CODE,delta=1
    68                           	psect	text44,global,reloc=2,class=CODE,delta=1
    69                           	psect	text45,global,reloc=2,class=CODE,delta=1
    70                           	psect	text46,global,reloc=2,class=CODE,delta=1
    71                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    73                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    74                           	psect	text49,global,reloc=2,class=CODE,delta=1
    75                           	psect	text50,global,reloc=2,class=CODE,delta=1
    76                           	psect	text51,global,reloc=2,class=CODE,delta=1
    77                           	psect	text52,global,reloc=2,class=CODE,delta=1
    78                           	psect	text53,global,reloc=2,class=CODE,delta=1
    79                           	psect	text54,global,reloc=2,class=CODE,delta=1
    80                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    81                           	psect	text55,global,reloc=2,class=CODE,delta=1
    82                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    83                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    84  0000                     
    85                           ; Version 1.45
    86                           ; Generated 16/11/2017 GMT
    87                           ; 
    88                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    89                           ; All rights reserved.
    90                           ; 
    91                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    92                           ; 
    93                           ; Redistribution and use in source and binary forms, with or without modification, are
    94                           ; permitted provided that the following conditions are met:
    95                           ; 
    96                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    97                           ;        conditions and the following disclaimer.
    98                           ; 
    99                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   100                           ;        of conditions and the following disclaimer in the documentation and/or other
   101                           ;        materials provided with the distribution.
   102                           ; 
   103                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   104                           ;        software without specific prior written permission.
   105                           ; 
   106                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   107                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   108                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   109                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   110                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   111                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   112                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   113                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   114                           ; 
   115                           ; 
   116                           ; Code-generator required, PIC18F4620 Definitions
   117                           ; 
   118                           ; SFR Addresses
   119  0000                     
   120                           	psect	idataCOMRAM
   121  003FB8                     __pidataCOMRAM:
   122                           	opt stack 0
   123                           
   124                           ;initializer for _shortTolerance
   125  003FB8  0012               	dw	18
   126  003FBA  0000               	dw	0
   127                           
   128                           ;initializer for _longTolerance
   129  003FBC  003C               	dw	60
   130  003FBE  0000               	dw	0
   131                           
   132                           ;initializer for _currentMotorDir
   133  003FC0  02                 	db	2
   134  003FC1  02                 	db	2
   135  003FC2  02                 	db	2
   136  003FC3  02                 	db	2
   137                           
   138                           ;initializer for _timeSinceLastTic
   139  003FC4  00                 	db	0
   140  003FC5  80                 	db	128
   141  003FC6  BF                 	db	191
   142                           
   143                           ;initializer for timer@operatingTime
   144  003FC7  00                 	db	0
   145  003FC8  80                 	db	128
   146  003FC9  BF                 	db	191
   147                           
   148                           ;initializer for _interruptKeypress
   149  003FCA  FF                 	db	255
   150                           
   151                           	psect	idataBANK0
   152  004012                     __pidataBANK0:
   153                           	opt stack 0
   154                           
   155                           ;initializer for inputEntry@F3225
   156  004012  43                 	db	67
   157  004013  30                 	db	48
   158                           
   159                           ;initializer for clearing@F3241
   160  004014  03                 	db	3
   161  004015  00                 	db	0
   162                           
   163                           ;initializer for packageCompartment@F3223
   164  004016  02                 	db	2
   165  004017  00                 	db	0
   166                           
   167                           	psect	idataBANK1
   168  003F2E                     __pidataBANK1:
   169                           	opt stack 0
   170                           
   171                           ;initializer for inputEntry@F3246
   172  003F2E  01                 	db	1
   173  003F2F  53                 	db	83
   174  003F30  74                 	db	116
   175  003F31  61                 	db	97
   176  003F32  72                 	db	114
   177  003F33  74                 	db	116
   178  003F34  65                 	db	101
   179  003F35  64                 	db	100
   180  003F36  20                 	db	32
   181  003F37  63                 	db	99
   182  003F38  6F                 	db	111
   183  003F39  6D                 	db	109
   184  003F3A  70                 	db	112
   185  003F3B  61                 	db	97
   186  003F3C  72                 	db	114
   187  003F3D  74                 	db	116
   188  003F3E  6D                 	db	109
   189  003F3F  65                 	db	101
   190  003F40  6E                 	db	110
   191  003F41  74                 	db	116
   192  003F42  20                 	db	32
   193  003F43  78                 	db	120
   194  003F44  00                 	db	0
   195  003F45  00                 	db	0
   196                           
   197                           ;initializer for packaging@F3231
   198  003F46  02                 	db	2
   199  003F47  00                 	db	0
   200                           
   201                           ;initializer for packaging@F3227
   202  003F48  08                 	db	8
   203  003F49  00                 	db	0
   204                           
   205                           	psect	idataBANK2
   206  003EA6                     __pidataBANK2:
   207                           	opt stack 0
   208                           
   209                           ;initializer for packaging@F3229
   210  003EA6  01                 	db	1
   211  003EA7  53                 	db	83
   212  003EA8  74                 	db	116
   213  003EA9  61                 	db	97
   214  003EAA  72                 	db	114
   215  003EAB  74                 	db	116
   216  003EAC  65                 	db	101
   217  003EAD  64                 	db	100
   218  003EAE  20                 	db	32
   219  003EAF  70                 	db	112
   220  003EB0  61                 	db	97
   221  003EB1  63                 	db	99
   222  003EB2  6B                 	db	107
   223  003EB3  61                 	db	97
   224  003EB4  67                 	db	103
   225  003EB5  69                 	db	105
   226  003EB6  6E                 	db	110
   227  003EB7  67                 	db	103
   228  003EB8  20                 	db	32
   229  003EB9  63                 	db	99
   230  003EBA  6F                 	db	111
   231  003EBB  6D                 	db	109
   232  003EBC  70                 	db	112
   233  003EBD  61                 	db	97
   234  003EBE  72                 	db	114
   235  003EBF  74                 	db	116
   236  003EC0  6D                 	db	109
   237  003EC1  65                 	db	101
   238  003EC2  6E                 	db	110
   239  003EC3  74                 	db	116
   240  003EC4  20                 	db	32
   241  003EC5  78                 	db	120
   242  003EC6  00                 	db	0
   243  003EC7  00                 	db	0
   244                           
   245                           	psect	idataBANK3
   246  003AEC                     __pidataBANK3:
   247                           	opt stack 0
   248                           
   249                           ;initializer for _fSLookup
   250  003AEC  4E                 	db	78
   251  003AED  4F                 	db	79
   252  003AEE  4E                 	db	78
   253  003AEF  45                 	db	69
   254  003AF0  00                 	db	0
   255  003AF1  42                 	db	66
   256  003AF2  00                 	db	0
   257  003AF3  00                 	db	0
   258  003AF4  00                 	db	0
   259  003AF5  00                 	db	0
   260  003AF6  4E                 	db	78
   261  003AF7  00                 	db	0
   262  003AF8  00                 	db	0
   263  003AF9  00                 	db	0
   264  003AFA  00                 	db	0
   265  003AFB  53                 	db	83
   266  003AFC  00                 	db	0
   267  003AFD  00                 	db	0
   268  003AFE  00                 	db	0
   269  003AFF  00                 	db	0
   270  003B00  57                 	db	87
   271  003B01  00                 	db	0
   272  003B02  00                 	db	0
   273  003B03  00                 	db	0
   274  003B04  00                 	db	0
   275  003B05  42                 	db	66
   276  003B06  4E                 	db	78
   277  003B07  00                 	db	0
   278  003B08  00                 	db	0
   279  003B09  00                 	db	0
   280  003B0A  42                 	db	66
   281  003B0B  53                 	db	83
   282  003B0C  00                 	db	0
   283  003B0D  00                 	db	0
   284  003B0E  00                 	db	0
   285  003B0F  42                 	db	66
   286  003B10  57                 	db	87
   287  003B11  00                 	db	0
   288  003B12  00                 	db	0
   289  003B13  00                 	db	0
   290  003B14  42                 	db	66
   291  003B15  42                 	db	66
   292  003B16  4E                 	db	78
   293  003B17  00                 	db	0
   294  003B18  00                 	db	0
   295  003B19  42                 	db	66
   296  003B1A  42                 	db	66
   297  003B1B  53                 	db	83
   298  003B1C  00                 	db	0
   299  003B1D  00                 	db	0
   300  003B1E  42                 	db	66
   301  003B1F  42                 	db	66
   302  003B20  57                 	db	87
   303  003B21  00                 	db	0
   304  003B22  00                 	db	0
   305  003B23  42                 	db	66
   306  003B24  4E                 	db	78
   307  003B25  57                 	db	87
   308  003B26  00                 	db	0
   309  003B27  00                 	db	0
   310  003B28  42                 	db	66
   311  003B29  53                 	db	83
   312  003B2A  57                 	db	87
   313  003B2B  00                 	db	0
   314  003B2C  00                 	db	0
   315  003B2D  42                 	db	66
   316  003B2E  57                 	db	87
   317  003B2F  57                 	db	87
   318  003B30  00                 	db	0
   319  003B31  00                 	db	0
   320  003B32  42                 	db	66
   321  003B33  4E                 	db	78
   322  003B34  4E                 	db	78
   323  003B35  57                 	db	87
   324  003B36  00                 	db	0
   325  003B37  42                 	db	66
   326  003B38  53                 	db	83
   327  003B39  57                 	db	87
   328  003B3A  57                 	db	87
   329  003B3B  00                 	db	0
   330  003B3C  42                 	db	66
   331  003B3D  42                 	db	66
   332  003B3E  53                 	db	83
   333  003B3F  57                 	db	87
   334  003B40  00                 	db	0
   335  003B41  42                 	db	66
   336  003B42  42                 	db	66
   337  003B43  4E                 	db	78
   338  003B44  57                 	db	87
   339  003B45  00                 	db	0
   340  003B46  42                 	db	66
   341  003B47  4E                 	db	78
   342  003B48  4E                 	db	78
   343  003B49  57                 	db	87
   344  003B4A  00                 	db	0
   345  003B4B  42                 	db	66
   346  003B4C  4E                 	db	78
   347  003B4D  4E                 	db	78
   348  003B4E  4E                 	db	78
   349  003B4F  00                 	db	0
   350  003B50  42                 	db	66
   351  003B51  57                 	db	87
   352  003B52  57                 	db	87
   353  003B53  57                 	db	87
   354  003B54  00                 	db	0
   355                           
   356                           	psect	mediumconst
   357  00FB72                     __pmediumconst:
   358                           	opt stack 0
   359  00FB72  00                 	db	0
   360  00FB73                     _keypadChars:
   361                           	opt stack 0
   362  00FB73  31                 	db	49
   363  00FB74  32                 	db	50
   364  00FB75  33                 	db	51
   365  00FB76  42                 	db	66
   366  00FB77  34                 	db	52
   367  00FB78  35                 	db	53
   368  00FB79  36                 	db	54
   369  00FB7A  4E                 	db	78
   370  00FB7B  37                 	db	55
   371  00FB7C  38                 	db	56
   372  00FB7D  39                 	db	57
   373  00FB7E  53                 	db	83
   374  00FB7F  2A                 	db	42
   375  00FB80  30                 	db	48
   376  00FB81  23                 	db	35
   377  00FB82  57                 	db	87
   378  00FB83  00                 	db	0
   379  00FB84                     __end_of_keypadChars:
   380                           	opt stack 0
   381  00FB84                     _LCDMenuIcons:
   382                           	opt stack 0
   383  00FB84  2A                 	db	42
   384  00FB85  3C                 	db	60
   385  00FB86  2D                 	db	45
   386  00FB87  20                 	db	32
   387  00FB88  20                 	db	32
   388  00FB89  20                 	db	32
   389  00FB8A  28                 	db	40
   390  00FB8B  20                 	db	32
   391  00FB8C  2D                 	db	45
   392  00FB8D  20                 	db	32
   393  00FB8E  29                 	db	41
   394  00FB8F  20                 	db	32
   395  00FB90  20                 	db	32
   396  00FB91  20                 	db	32
   397  00FB92  20                 	db	32
   398  00FB93  00                 	db	0
   399  00FB94                     __end_of_LCDMenuIcons:
   400                           	opt stack 0
   401  00FB94                     _dpowers:
   402                           	opt stack 0
   403  00FB94  0001               	dw	1
   404  00FB96  000A               	dw	10
   405  00FB98  0064               	dw	100
   406  00FB9A  03E8               	dw	1000
   407  00FB9C  2710               	dw	10000
   408  00FB9E                     __end_of_dpowers:
   409                           	opt stack 0
   410  00FB9E                     _assemblyStepEncoding:
   411                           	opt stack 0
   412  00FB9E  55                 	db	85
   413  00FB9F  5B                 	db	91
   414  00FBA0  77                 	db	119
   415  00FBA1  7F                 	db	127
   416  00FBA2  FF                 	db	255
   417  00FBA3                     __end_of_assemblyStepEncoding:
   418                           	opt stack 0
   419  00FBA3                     _nanoAddr:
   420                           	opt stack 0
   421  00FBA3  10                 	db	16
   422  00FBA4                     __end_of_nanoAddr:
   423                           	opt stack 0
   424  00FBA4                     _LCD_LEFT:
   425                           	opt stack 0
   426  00FBA4  00                 	db	0
   427  00FBA5                     __end_of_LCD_LEFT:
   428                           	opt stack 0
   429  00FBA5                     _LCD_RIGHT:
   430                           	opt stack 0
   431  00FBA5  01                 	db	1
   432  00FBA6                     __end_of_LCD_RIGHT:
   433                           	opt stack 0
   434  00FBA6                     _LCD_SIZE_VERT:
   435                           	opt stack 0
   436  00FBA6  02                 	db	2
   437  00FBA7                     __end_of_LCD_SIZE_VERT:
   438                           	opt stack 0
   439  00FBA7                     _LCD_SIZE_HORZ:
   440                           	opt stack 0
   441  00FBA7  10                 	db	16
   442  00FBA8                     __end_of_LCD_SIZE_HORZ:
   443                           	opt stack 0
   444  00FBA8                     _LCD_VERT_LIMIT:
   445                           	opt stack 0
   446  00FBA8  02                 	db	2
   447  00FBA9                     __end_of_LCD_VERT_LIMIT:
   448                           	opt stack 0
   449  00FBA9                     _LCD_HORZ_LIMIT:
   450                           	opt stack 0
   451  00FBA9  28                 	db	40
   452  00FBAA                     __end_of_LCD_HORZ_LIMIT:
   453                           	opt stack 0
   454  00FBAA                     _errMsgs:
   455                           	opt stack 0
   456  00FBAA  49                 	db	73
   457  00FBAB  6E                 	db	110
   458  00FBAC  76                 	db	118
   459  00FBAD  61                 	db	97
   460  00FBAE  6C                 	db	108
   461  00FBAF  69                 	db	105
   462  00FBB0  64                 	db	100
   463  00FBB1  20                 	db	32
   464  00FBB2  65                 	db	101
   465  00FBB3  6E                 	db	110
   466  00FBB4  74                 	db	116
   467  00FBB5  72                 	db	114
   468  00FBB6  79                 	db	121
   469  00FBB7  0A                 	db	10
   470  00FBB8  50                 	db	80
   471  00FBB9  6C                 	db	108
   472  00FBBA  65                 	db	101
   473  00FBBB  61                 	db	97
   474  00FBBC  73                 	db	115
   475  00FBBD  65                 	db	101
   476  00FBBE  20                 	db	32
   477  00FBBF  74                 	db	116
   478  00FBC0  72                 	db	114
   479  00FBC1  79                 	db	121
   480  00FBC2  20                 	db	32
   481  00FBC3  61                 	db	97
   482  00FBC4  67                 	db	103
   483  00FBC5  61                 	db	97
   484  00FBC6  69                 	db	105
   485  00FBC7  6E                 	db	110
   486  00FBC8  00                 	db	0
   487  00FBC9  00                 	db	0
   488  00FBCA  54                 	db	84
   489  00FBCB  6F                 	db	111
   490  00FBCC  6F                 	db	111
   491  00FBCD  20                 	db	32
   492  00FBCE  6D                 	db	109
   493  00FBCF  61                 	db	97
   494  00FBD0  6E                 	db	110
   495  00FBD1  79                 	db	121
   496  00FBD2  20                 	db	32
   497  00FBD3  66                 	db	102
   498  00FBD4  61                 	db	97
   499  00FBD5  73                 	db	115
   500  00FBD6  74                 	db	116
   501  00FBD7  65                 	db	101
   502  00FBD8  6E                 	db	110
   503  00FBD9  65                 	db	101
   504  00FBDA  72                 	db	114
   505  00FBDB  73                 	db	115
   506  00FBDC  00                 	db	0
   507  00FBDD  00                 	db	0
   508  00FBDE  00                 	db	0
   509  00FBDF  00                 	db	0
   510  00FBE0  00                 	db	0
   511  00FBE1  00                 	db	0
   512  00FBE2  00                 	db	0
   513  00FBE3  00                 	db	0
   514  00FBE4  00                 	db	0
   515  00FBE5  00                 	db	0
   516  00FBE6  00                 	db	0
   517  00FBE7  00                 	db	0
   518  00FBE8  00                 	db	0
   519  00FBE9  00                 	db	0
   520  00FBEA  54                 	db	84
   521  00FBEB  6F                 	db	111
   522  00FBEC  6F                 	db	111
   523  00FBED  20                 	db	32
   524  00FBEE  6D                 	db	109
   525  00FBEF  61                 	db	97
   526  00FBF0  6E                 	db	110
   527  00FBF1  79                 	db	121
   528  00FBF2  20                 	db	32
   529  00FBF3  62                 	db	98
   530  00FBF4  6F                 	db	111
   531  00FBF5  6C                 	db	108
   532  00FBF6  74                 	db	116
   533  00FBF7  73                 	db	115
   534  00FBF8  00                 	db	0
   535  00FBF9  00                 	db	0
   536  00FBFA  00                 	db	0
   537  00FBFB  00                 	db	0
   538  00FBFC  00                 	db	0
   539  00FBFD  00                 	db	0
   540  00FBFE  00                 	db	0
   541  00FBFF  00                 	db	0
   542  00FC00  00                 	db	0
   543  00FC01  00                 	db	0
   544  00FC02  00                 	db	0
   545  00FC03  00                 	db	0
   546  00FC04  00                 	db	0
   547  00FC05  00                 	db	0
   548  00FC06  00                 	db	0
   549  00FC07  00                 	db	0
   550  00FC08  00                 	db	0
   551  00FC09  00                 	db	0
   552  00FC0A  54                 	db	84
   553  00FC0B  6F                 	db	111
   554  00FC0C  6F                 	db	111
   555  00FC0D  20                 	db	32
   556  00FC0E  6D                 	db	109
   557  00FC0F  61                 	db	97
   558  00FC10  6E                 	db	110
   559  00FC11  79                 	db	121
   560  00FC12  20                 	db	32
   561  00FC13  6E                 	db	110
   562  00FC14  75                 	db	117
   563  00FC15  74                 	db	116
   564  00FC16  73                 	db	115
   565  00FC17  00                 	db	0
   566  00FC18  00                 	db	0
   567  00FC19  00                 	db	0
   568  00FC1A  00                 	db	0
   569  00FC1B  00                 	db	0
   570  00FC1C  00                 	db	0
   571  00FC1D  00                 	db	0
   572  00FC1E  00                 	db	0
   573  00FC1F  00                 	db	0
   574  00FC20  00                 	db	0
   575  00FC21  00                 	db	0
   576  00FC22  00                 	db	0
   577  00FC23  00                 	db	0
   578  00FC24  00                 	db	0
   579  00FC25  00                 	db	0
   580  00FC26  00                 	db	0
   581  00FC27  00                 	db	0
   582  00FC28  00                 	db	0
   583  00FC29  00                 	db	0
   584  00FC2A  54                 	db	84
   585  00FC2B  6F                 	db	111
   586  00FC2C  6F                 	db	111
   587  00FC2D  20                 	db	32
   588  00FC2E  6D                 	db	109
   589  00FC2F  61                 	db	97
   590  00FC30  6E                 	db	110
   591  00FC31  79                 	db	121
   592  00FC32  20                 	db	32
   593  00FC33  77                 	db	119
   594  00FC34  61                 	db	97
   595  00FC35  73                 	db	115
   596  00FC36  68                 	db	104
   597  00FC37  65                 	db	101
   598  00FC38  72                 	db	114
   599  00FC39  73                 	db	115
   600  00FC3A  00                 	db	0
   601  00FC3B  00                 	db	0
   602  00FC3C  00                 	db	0
   603  00FC3D  00                 	db	0
   604  00FC3E  00                 	db	0
   605  00FC3F  00                 	db	0
   606  00FC40  00                 	db	0
   607  00FC41  00                 	db	0
   608  00FC42  00                 	db	0
   609  00FC43  00                 	db	0
   610  00FC44  00                 	db	0
   611  00FC45  00                 	db	0
   612  00FC46  00                 	db	0
   613  00FC47  00                 	db	0
   614  00FC48  00                 	db	0
   615  00FC49  00                 	db	0
   616  00FC4A  54                 	db	84
   617  00FC4B  6F                 	db	111
   618  00FC4C  6F                 	db	111
   619  00FC4D  20                 	db	32
   620  00FC4E  6D                 	db	109
   621  00FC4F  61                 	db	97
   622  00FC50  6E                 	db	110
   623  00FC51  79                 	db	121
   624  00FC52  20                 	db	32
   625  00FC53  73                 	db	115
   626  00FC54  70                 	db	112
   627  00FC55  61                 	db	97
   628  00FC56  63                 	db	99
   629  00FC57  65                 	db	101
   630  00FC58  72                 	db	114
   631  00FC59  73                 	db	115
   632  00FC5A  00                 	db	0
   633  00FC5B  00                 	db	0
   634  00FC5C  00                 	db	0
   635  00FC5D  00                 	db	0
   636  00FC5E  00                 	db	0
   637  00FC5F  00                 	db	0
   638  00FC60  00                 	db	0
   639  00FC61  00                 	db	0
   640  00FC62  00                 	db	0
   641  00FC63  00                 	db	0
   642  00FC64  00                 	db	0
   643  00FC65  00                 	db	0
   644  00FC66  00                 	db	0
   645  00FC67  00                 	db	0
   646  00FC68  00                 	db	0
   647  00FC69  00                 	db	0
   648  00FC6A  4E                 	db	78
   649  00FC6B  6F                 	db	111
   650  00FC6C  20                 	db	32
   651  00FC6D  66                 	db	102
   652  00FC6E  61                 	db	97
   653  00FC6F  73                 	db	115
   654  00FC70  74                 	db	116
   655  00FC71  65                 	db	101
   656  00FC72  6E                 	db	110
   657  00FC73  65                 	db	101
   658  00FC74  72                 	db	114
   659  00FC75  73                 	db	115
   660  00FC76  20                 	db	32
   661  00FC77  73                 	db	115
   662  00FC78  65                 	db	101
   663  00FC79  6C                 	db	108
   664  00FC7A  65                 	db	101
   665  00FC7B  63                 	db	99
   666  00FC7C  74                 	db	116
   667  00FC7D  65                 	db	101
   668  00FC7E  64                 	db	100
   669  00FC7F  00                 	db	0
   670  00FC80  00                 	db	0
   671  00FC81  00                 	db	0
   672  00FC82  00                 	db	0
   673  00FC83  00                 	db	0
   674  00FC84  00                 	db	0
   675  00FC85  00                 	db	0
   676  00FC86  00                 	db	0
   677  00FC87  00                 	db	0
   678  00FC88  00                 	db	0
   679  00FC89  00                 	db	0
   680  00FC8A                     __end_of_errMsgs:
   681                           	opt stack 0
   682  00FC8A                     _inputEntryQuestions:
   683                           	opt stack 0
   684  00FC8A  41                 	db	65
   685  00FC8B  73                 	db	115
   686  00FC8C  73                 	db	115
   687  00FC8D  65                 	db	101
   688  00FC8E  6D                 	db	109
   689  00FC8F  62                 	db	98
   690  00FC90  6C                 	db	108
   691  00FC91  79                 	db	121
   692  00FC92  20                 	db	32
   693  00FC93  73                 	db	115
   694  00FC94  74                 	db	116
   695  00FC95  65                 	db	101
   696  00FC96  70                 	db	112
   697  00FC97  73                 	db	115
   698  00FC98  0A                 	db	10
   699  00FC99  2A                 	db	42
   700  00FC9A  3C                 	db	60
   701  00FC9B  2D                 	db	45
   702  00FC9C  20                 	db	32
   703  00FC9D  20                 	db	32
   704  00FC9E  28                 	db	40
   705  00FC9F  34                 	db	52
   706  00FCA0  2D                 	db	45
   707  00FCA1  38                 	db	56
   708  00FCA2  29                 	db	41
   709  00FCA3  20                 	db	32
   710  00FCA4  20                 	db	32
   711  00FCA5  20                 	db	32
   712  00FCA6  20                 	db	32
   713  00FCA7  20                 	db	32
   714  00FCA8  00                 	db	0
   715  00FCA9  00                 	db	0
   716  00FCAA  00                 	db	0
   717  00FCAB  46                 	db	70
   718  00FCAC  61                 	db	97
   719  00FCAD  73                 	db	115
   720  00FCAE  74                 	db	116
   721  00FCAF  65                 	db	101
   722  00FCB0  6E                 	db	110
   723  00FCB1  65                 	db	101
   724  00FCB2  72                 	db	114
   725  00FCB3  73                 	db	115
   726  00FCB4  20                 	db	32
   727  00FCB5  69                 	db	105
   728  00FCB6  6E                 	db	110
   729  00FCB7  20                 	db	32
   730  00FCB8  43                 	db	67
   731  00FCB9  78                 	db	120
   732  00FCBA  0A                 	db	10
   733  00FCBB  2A                 	db	42
   734  00FCBC  3C                 	db	60
   735  00FCBD  2D                 	db	45
   736  00FCBE  28                 	db	40
   737  00FCBF  42                 	db	66
   738  00FCC0  4E                 	db	78
   739  00FCC1  53                 	db	83
   740  00FCC2  57                 	db	87
   741  00FCC3  29                 	db	41
   742  00FCC4  20                 	db	32
   743  00FCC5  20                 	db	32
   744  00FCC6  20                 	db	32
   745  00FCC7  20                 	db	32
   746  00FCC8  2D                 	db	45
   747  00FCC9  3E                 	db	62
   748  00FCCA  23                 	db	35
   749  00FCCB  00                 	db	0
   750  00FCCC  48                 	db	72
   751  00FCCD  6F                 	db	111
   752  00FCCE  77                 	db	119
   753  00FCCF  20                 	db	32
   754  00FCD0  6D                 	db	109
   755  00FCD1  61                 	db	97
   756  00FCD2  6E                 	db	110
   757  00FCD3  79                 	db	121
   758  00FCD4  20                 	db	32
   759  00FCD5  73                 	db	115
   760  00FCD6  65                 	db	101
   761  00FCD7  74                 	db	116
   762  00FCD8  73                 	db	115
   763  00FCD9  3F                 	db	63
   764  00FCDA  0A                 	db	10
   765  00FCDB  2A                 	db	42
   766  00FCDC  3C                 	db	60
   767  00FCDD  2D                 	db	45
   768  00FCDE  20                 	db	32
   769  00FCDF  20                 	db	32
   770  00FCE0  28                 	db	40
   771  00FCE1  31                 	db	49
   772  00FCE2  2D                 	db	45
   773  00FCE3  34                 	db	52
   774  00FCE4  29                 	db	41
   775  00FCE5  20                 	db	32
   776  00FCE6  20                 	db	32
   777  00FCE7  20                 	db	32
   778  00FCE8  20                 	db	32
   779  00FCE9  20                 	db	32
   780  00FCEA  00                 	db	0
   781  00FCEB  00                 	db	0
   782  00FCEC  00                 	db	0
   783  00FCED  43                 	db	67
   784  00FCEE  6F                 	db	111
   785  00FCEF  6E                 	db	110
   786  00FCF0  66                 	db	102
   787  00FCF1  69                 	db	105
   788  00FCF2  72                 	db	114
   789  00FCF3  6D                 	db	109
   790  00FCF4  3F                 	db	63
   791  00FCF5  0A                 	db	10
   792  00FCF6  2A                 	db	42
   793  00FCF7  3C                 	db	60
   794  00FCF8  2D                 	db	45
   795  00FCF9  20                 	db	32
   796  00FCFA  20                 	db	32
   797  00FCFB  28                 	db	40
   798  00FCFC  41                 	db	65
   799  00FCFD  3A                 	db	58
   800  00FCFE  59                 	db	89
   801  00FCFF  2F                 	db	47
   802  00FD00  42                 	db	66
   803  00FD01  3A                 	db	58
   804  00FD02  4E                 	db	78
   805  00FD03  29                 	db	41
   806  00FD04  20                 	db	32
   807  00FD05  00                 	db	0
   808  00FD06  00                 	db	0
   809  00FD07  00                 	db	0
   810  00FD08  00                 	db	0
   811  00FD09  00                 	db	0
   812  00FD0A  00                 	db	0
   813  00FD0B  00                 	db	0
   814  00FD0C  00                 	db	0
   815  00FD0D  00                 	db	0
   816  00FD0E                     __end_of_inputEntryQuestions:
   817                           	opt stack 0
   818  00FD0E                     _fastenerMatrix:
   819                           	opt stack 0
   820  00FD0E  00                 	db	0
   821  00FD0F  00                 	db	0
   822  00FD10  00                 	db	0
   823  00FD11  00                 	db	0
   824  00FD12  01                 	db	1
   825  00FD13  00                 	db	0
   826  00FD14  00                 	db	0
   827  00FD15  00                 	db	0
   828  00FD16  00                 	db	0
   829  00FD17  01                 	db	1
   830  00FD18  00                 	db	0
   831  00FD19  00                 	db	0
   832  00FD1A  00                 	db	0
   833  00FD1B  00                 	db	0
   834  00FD1C  01                 	db	1
   835  00FD1D  00                 	db	0
   836  00FD1E  00                 	db	0
   837  00FD1F  00                 	db	0
   838  00FD20  00                 	db	0
   839  00FD21  01                 	db	1
   840  00FD22  01                 	db	1
   841  00FD23  01                 	db	1
   842  00FD24  00                 	db	0
   843  00FD25  00                 	db	0
   844  00FD26  01                 	db	1
   845  00FD27  00                 	db	0
   846  00FD28  01                 	db	1
   847  00FD29  00                 	db	0
   848  00FD2A  01                 	db	1
   849  00FD2B  00                 	db	0
   850  00FD2C  00                 	db	0
   851  00FD2D  01                 	db	1
   852  00FD2E  02                 	db	2
   853  00FD2F  01                 	db	1
   854  00FD30  00                 	db	0
   855  00FD31  00                 	db	0
   856  00FD32  02                 	db	2
   857  00FD33  00                 	db	0
   858  00FD34  01                 	db	1
   859  00FD35  00                 	db	0
   860  00FD36  02                 	db	2
   861  00FD37  00                 	db	0
   862  00FD38  00                 	db	0
   863  00FD39  01                 	db	1
   864  00FD3A  01                 	db	1
   865  00FD3B  01                 	db	1
   866  00FD3C  00                 	db	0
   867  00FD3D  01                 	db	1
   868  00FD3E  01                 	db	1
   869  00FD3F  00                 	db	0
   870  00FD40  01                 	db	1
   871  00FD41  01                 	db	1
   872  00FD42  01                 	db	1
   873  00FD43  00                 	db	0
   874  00FD44  00                 	db	0
   875  00FD45  02                 	db	2
   876  00FD46  01                 	db	1
   877  00FD47  01                 	db	1
   878  00FD48  00                 	db	0
   879  00FD49  02                 	db	2
   880  00FD4A  01                 	db	1
   881  00FD4B  00                 	db	0
   882  00FD4C  01                 	db	1
   883  00FD4D  02                 	db	2
   884  00FD4E  02                 	db	2
   885  00FD4F  00                 	db	0
   886  00FD50  01                 	db	1
   887  00FD51  01                 	db	1
   888  00FD52  02                 	db	2
   889  00FD53  01                 	db	1
   890  00FD54  00                 	db	0
   891  00FD55  01                 	db	1
   892  00FD56  01                 	db	1
   893  00FD57  02                 	db	2
   894  00FD58  00                 	db	0
   895  00FD59  01                 	db	1
   896  00FD5A  01                 	db	1
   897  00FD5B  03                 	db	3
   898  00FD5C  00                 	db	0
   899  00FD5D  00                 	db	0
   900  00FD5E  01                 	db	1
   901  00FD5F  00                 	db	0
   902  00FD60  00                 	db	0
   903  00FD61  03                 	db	3
   904  00FD62                     __end_of_fastenerMatrix:
   905                           	opt stack 0
   906  0000                     _PIR2bits	set	4001
   907  0000                     _EECON2	set	4007
   908  0000                     _EEDATA	set	4008
   909  0000                     _EEADR	set	4009
   910  0000                     _EEADRH	set	4010
   911  0000                     _EECON1bits	set	4006
   912  0000                     _LATEbits	set	3981
   913  0000                     _LATCbits	set	3979
   914  0000                     _LATBbits	set	3978
   915  0000                     _TMR0L	set	4054
   916  0000                     _TMR0H	set	4055
   917  0000                     _T0CONbits	set	4053
   918  0000                     _PORTBbits	set	3969
   919  0000                     _INTCONbits	set	4082
   920  0000                     _LATDbits	set	3980
   921  0000                     _SSPBUF	set	4041
   922  0000                     _SSPCON2bits	set	4037
   923  0000                     _SSPADD	set	4040
   924  0000                     _SSPCON2	set	4037
   925  0000                     _SSPCON1	set	4038
   926  0000                     _SSPSTAT	set	4039
   927  0000                     _TRISCbits	set	3988
   928  0000                     _SSPCON1bits	set	4038
   929  0000                     _ADCON1	set	4033
   930  0000                     _ADCON0	set	4034
   931  0000                     _TRISE	set	3990
   932  0000                     _TRISD	set	3989
   933  0000                     _TRISC	set	3988
   934  0000                     _TRISB	set	3987
   935  0000                     _LATE	set	3981
   936  0000                     _LATD	set	3980
   937  0000                     _LATC	set	3979
   938  0000                     _LATB	set	3978
   939  0000                     _LATA	set	3977
   940  0000                     _PORTB	set	3969
   941  0000                     _PORTAbits	set	3968
   942  0000                     _TRISA	set	3986
   943  0000                     _TMR0IE	set	32661
   944  0000                     _INT1IF	set	32640
   945  0000                     _T0IF	set	32658
   946  0000                     _T0IE	set	32661
   947  00FD62                     STR_10:
   948  00FD62  01                 	db	1
   949  00FD63  46                 	db	70	;'F'
   950  00FD64  69                 	db	105	;'i'
   951  00FD65  6E                 	db	110	;'n'
   952  00FD66  69                 	db	105	;'i'
   953  00FD67  73                 	db	115	;'s'
   954  00FD68  68                 	db	104	;'h'
   955  00FD69  65                 	db	101	;'e'
   956  00FD6A  64                 	db	100	;'d'
   957  00FD6B  20                 	db	32
   958  00FD6C  70                 	db	112	;'p'
   959  00FD6D  61                 	db	97	;'a'
   960  00FD6E  63                 	db	99	;'c'
   961  00FD6F  6B                 	db	107	;'k'
   962  00FD70  61                 	db	97	;'a'
   963  00FD71  67                 	db	103	;'g'
   964  00FD72  69                 	db	105	;'i'
   965  00FD73  6E                 	db	110	;'n'
   966  00FD74  67                 	db	103	;'g'
   967  00FD75  20                 	db	32
   968  00FD76  63                 	db	99	;'c'
   969  00FD77  6F                 	db	111	;'o'
   970  00FD78  6D                 	db	109	;'m'
   971  00FD79  70                 	db	112	;'p'
   972  00FD7A  61                 	db	97	;'a'
   973  00FD7B  72                 	db	114	;'r'
   974  00FD7C  74                 	db	116	;'t'
   975  00FD7D  6D                 	db	109	;'m'
   976  00FD7E  65                 	db	101	;'e'
   977  00FD7F  6E                 	db	110	;'n'
   978  00FD80  74                 	db	116	;'t'
   979  00FD81  20                 	db	32
   980  00FD82  25                 	db	37
   981  00FD83  64                 	db	100	;'d'
   982  00FD84  00                 	db	0
   983  00FD85  00                 	db	0
   984  00FD86                     STR_7:
   985  00FD86  01                 	db	1
   986  00FD87  45                 	db	69	;'E'
   987  00FD88  6E                 	db	110	;'n'
   988  00FD89  74                 	db	116	;'t'
   989  00FD8A  65                 	db	101	;'e'
   990  00FD8B  72                 	db	114	;'r'
   991  00FD8C  65                 	db	101	;'e'
   992  00FD8D  64                 	db	100	;'d'
   993  00FD8E  20                 	db	32
   994  00FD8F  74                 	db	116	;'t'
   995  00FD90  68                 	db	104	;'h'
   996  00FD91  65                 	db	101	;'e'
   997  00FD92  20                 	db	32
   998  00FD93  70                 	db	112	;'p'
   999  00FD94  61                 	db	97	;'a'
  1000  00FD95  63                 	db	99	;'c'
  1001  00FD96  6B                 	db	107	;'k'
  1002  00FD97  61                 	db	97	;'a'
  1003  00FD98  67                 	db	103	;'g'
  1004  00FD99  69                 	db	105	;'i'
  1005  00FD9A  6E                 	db	110	;'n'
  1006  00FD9B  67                 	db	103	;'g'
  1007  00FD9C  20                 	db	32
  1008  00FD9D  66                 	db	102	;'f'
  1009  00FD9E  75                 	db	117	;'u'
  1010  00FD9F  6E                 	db	110	;'n'
  1011  00FDA0  63                 	db	99	;'c'
  1012  00FDA1  74                 	db	116	;'t'
  1013  00FDA2  69                 	db	105	;'i'
  1014  00FDA3  6F                 	db	111	;'o'
  1015  00FDA4  6E                 	db	110	;'n'
  1016  00FDA5  00                 	db	0
  1017  00FDA6  00                 	db	0
  1018  00FDA7                     STR_29:
  1019  00FDA7  30                 	db	48	;'0'
  1020  00FDA8  3A                 	db	58	;':'
  1021  00FDA9  72                 	db	114	;'r'
  1022  00FDAA  65                 	db	101	;'e'
  1023  00FDAB  74                 	db	116	;'t'
  1024  00FDAC  75                 	db	117	;'u'
  1025  00FDAD  72                 	db	114	;'r'
  1026  00FDAE  6E                 	db	110	;'n'
  1027  00FDAF  20                 	db	32
  1028  00FDB0  31                 	db	49	;'1'
  1029  00FDB1  3A                 	db	58	;':'
  1030  00FDB2  73                 	db	115	;'s'
  1031  00FDB3  61                 	db	97	;'a'
  1032  00FDB4  76                 	db	118	;'v'
  1033  00FDB5  65                 	db	101	;'e'
  1034  00FDB6  0A                 	db	10
  1035  00FDB7  3C                 	db	60	;'<'
  1036  00FDB8  3E                 	db	62	;'>'
  1037  00FDB9  3A                 	db	58	;':'
  1038  00FDBA  76                 	db	118	;'v'
  1039  00FDBB  69                 	db	105	;'i'
  1040  00FDBC  65                 	db	101	;'e'
  1041  00FDBD  77                 	db	119	;'w'
  1042  00FDBE  20                 	db	32
  1043  00FDBF  73                 	db	115	;'s'
  1044  00FDC0  75                 	db	117	;'u'
  1045  00FDC1  6D                 	db	109	;'m'
  1046  00FDC2  6D                 	db	109	;'m'
  1047  00FDC3  61                 	db	97	;'a'
  1048  00FDC4  72                 	db	114	;'r'
  1049  00FDC5  79                 	db	121	;'y'
  1050  00FDC6  00                 	db	0
  1051  00FDC7                     STR_25:
  1052  00FDC7  30                 	db	48	;'0'
  1053  00FDC8  3A                 	db	58	;':'
  1054  00FDC9  53                 	db	83	;'S'
  1055  00FDCA  6C                 	db	108	;'l'
  1056  00FDCB  65                 	db	101	;'e'
  1057  00FDCC  65                 	db	101	;'e'
  1058  00FDCD  70                 	db	112	;'p'
  1059  00FDCE  20                 	db	32
  1060  00FDCF  31                 	db	49	;'1'
  1061  00FDD0  3A                 	db	58	;':'
  1062  00FDD1  42                 	db	66	;'B'
  1063  00FDD2  65                 	db	101	;'e'
  1064  00FDD3  67                 	db	103	;'g'
  1065  00FDD4  69                 	db	105	;'i'
  1066  00FDD5  6E                 	db	110	;'n'
  1067  00FDD6  20                 	db	32
  1068  00FDD7  0A                 	db	10
  1069  00FDD8  32                 	db	50	;'2'
  1070  00FDD9  3A                 	db	58	;':'
  1071  00FDDA  20                 	db	32
  1072  00FDDB  56                 	db	86	;'V'
  1073  00FDDC  69                 	db	105	;'i'
  1074  00FDDD  65                 	db	101	;'e'
  1075  00FDDE  77                 	db	119	;'w'
  1076  00FDDF  20                 	db	32
  1077  00FDE0  4C                 	db	76	;'L'
  1078  00FDE1  6F                 	db	111	;'o'
  1079  00FDE2  67                 	db	103	;'g'
  1080  00FDE3  73                 	db	115	;'s'
  1081  00FDE4  00                 	db	0
  1082  00FDE5                     STR_6:
  1083  00FDE5  01                 	db	1
  1084  00FDE6  4F                 	db	79	;'O'
  1085  00FDE7  75                 	db	117	;'u'
  1086  00FDE8  74                 	db	116	;'t'
  1087  00FDE9  20                 	db	32
  1088  00FDEA  6F                 	db	111	;'o'
  1089  00FDEB  66                 	db	102	;'f'
  1090  00FDEC  20                 	db	32
  1091  00FDED  74                 	db	116	;'t'
  1092  00FDEE  68                 	db	104	;'h'
  1093  00FDEF  65                 	db	101	;'e'
  1094  00FDF0  20                 	db	32
  1095  00FDF1  70                 	db	112	;'p'
  1096  00FDF2  61                 	db	97	;'a'
  1097  00FDF3  63                 	db	99	;'c'
  1098  00FDF4  6B                 	db	107	;'k'
  1099  00FDF5  61                 	db	97	;'a'
  1100  00FDF6  67                 	db	103	;'g'
  1101  00FDF7  69                 	db	105	;'i'
  1102  00FDF8  6E                 	db	110	;'n'
  1103  00FDF9  67                 	db	103	;'g'
  1104  00FDFA  20                 	db	32
  1105  00FDFB  6C                 	db	108	;'l'
  1106  00FDFC  6F                 	db	111	;'o'
  1107  00FDFD  6F                 	db	111	;'o'
  1108  00FDFE  70                 	db	112	;'p'
  1109  00FDFF  00                 	db	0
  1110  00FE00  00                 	db	0
  1111  00FE01                     STR_20:
  1112  00FE01  52                 	db	82	;'R'
  1113  00FE02  65                 	db	101	;'e'
  1114  00FE03  6D                 	db	109	;'m'
  1115  00FE04  61                 	db	97	;'a'
  1116  00FE05  69                 	db	105	;'i'
  1117  00FE06  6E                 	db	110	;'n'
  1118  00FE07  69                 	db	105	;'i'
  1119  00FE08  6E                 	db	110	;'n'
  1120  00FE09  67                 	db	103	;'g'
  1121  00FE0A  3A                 	db	58	;':'
  1122  00FE0B  0A                 	db	10
  1123  00FE0C  42                 	db	66	;'B'
  1124  00FE0D  25                 	db	37
  1125  00FE0E  64                 	db	100	;'d'
  1126  00FE0F  20                 	db	32
  1127  00FE10  4E                 	db	78	;'N'
  1128  00FE11  25                 	db	37
  1129  00FE12  64                 	db	100	;'d'
  1130  00FE13  20                 	db	32
  1131  00FE14  53                 	db	83	;'S'
  1132  00FE15  25                 	db	37
  1133  00FE16  64                 	db	100	;'d'
  1134  00FE17  20                 	db	32
  1135  00FE18  57                 	db	87	;'W'
  1136  00FE19  25                 	db	37
  1137  00FE1A  64                 	db	100	;'d'
  1138  00FE1B  00                 	db	0
  1139  00FE1C                     STR_26:
  1140  00FE1C  50                 	db	80	;'P'
  1141  00FE1D  72                 	db	114	;'r'
  1142  00FE1E  65                 	db	101	;'e'
  1143  00FE1F  73                 	db	115	;'s'
  1144  00FE20  73                 	db	115	;'s'
  1145  00FE21  20                 	db	32
  1146  00FE22  31                 	db	49	;'1'
  1147  00FE23  20                 	db	32
  1148  00FE24  74                 	db	116	;'t'
  1149  00FE25  6F                 	db	111	;'o'
  1150  00FE26  20                 	db	32
  1151  00FE27  73                 	db	115	;'s'
  1152  00FE28  74                 	db	116	;'t'
  1153  00FE29  61                 	db	97	;'a'
  1154  00FE2A  72                 	db	114	;'r'
  1155  00FE2B  74                 	db	116	;'t'
  1156  00FE2C  0A                 	db	10
  1157  00FE2D  70                 	db	112	;'p'
  1158  00FE2E  61                 	db	97	;'a'
  1159  00FE2F  63                 	db	99	;'c'
  1160  00FE30  6B                 	db	107	;'k'
  1161  00FE31  61                 	db	97	;'a'
  1162  00FE32  67                 	db	103	;'g'
  1163  00FE33  69                 	db	105	;'i'
  1164  00FE34  6E                 	db	110	;'n'
  1165  00FE35  67                 	db	103	;'g'
  1166  00FE36  00                 	db	0
  1167  00FE37                     STR_19:
  1168  00FE37  50                 	db	80	;'P'
  1169  00FE38  61                 	db	97	;'a'
  1170  00FE39  63                 	db	99	;'c'
  1171  00FE3A  6B                 	db	107	;'k'
  1172  00FE3B  61                 	db	97	;'a'
  1173  00FE3C  67                 	db	103	;'g'
  1174  00FE3D  65                 	db	101	;'e'
  1175  00FE3E  64                 	db	100	;'d'
  1176  00FE3F  3A                 	db	58	;':'
  1177  00FE40  0A                 	db	10
  1178  00FE41  42                 	db	66	;'B'
  1179  00FE42  25                 	db	37
  1180  00FE43  64                 	db	100	;'d'
  1181  00FE44  20                 	db	32
  1182  00FE45  4E                 	db	78	;'N'
  1183  00FE46  25                 	db	37
  1184  00FE47  64                 	db	100	;'d'
  1185  00FE48  20                 	db	32
  1186  00FE49  53                 	db	83	;'S'
  1187  00FE4A  25                 	db	37
  1188  00FE4B  64                 	db	100	;'d'
  1189  00FE4C  20                 	db	32
  1190  00FE4D  57                 	db	87	;'W'
  1191  00FE4E  25                 	db	37
  1192  00FE4F  64                 	db	100	;'d'
  1193  00FE50  00                 	db	0
  1194  00FE51                     STR_23:
  1195  00FE51  53                 	db	83	;'S'
  1196  00FE52  74                 	db	116	;'t'
  1197  00FE53  61                 	db	97	;'a'
  1198  00FE54  72                 	db	114	;'r'
  1199  00FE55  74                 	db	116	;'t'
  1200  00FE56  65                 	db	101	;'e'
  1201  00FE57  64                 	db	100	;'d'
  1202  00FE58  20                 	db	32
  1203  00FE59  69                 	db	105	;'i'
  1204  00FE5A  6E                 	db	110	;'n'
  1205  00FE5B  70                 	db	112	;'p'
  1206  00FE5C  75                 	db	117	;'u'
  1207  00FE5D  74                 	db	116	;'t'
  1208  00FE5E  20                 	db	32
  1209  00FE5F  65                 	db	101	;'e'
  1210  00FE60  6E                 	db	110	;'n'
  1211  00FE61  74                 	db	116	;'t'
  1212  00FE62  72                 	db	114	;'r'
  1213  00FE63  79                 	db	121	;'y'
  1214  00FE64  2C                 	db	44
  1215  00FE65  20                 	db	32
  1216  00FE66  68                 	db	104	;'h'
  1217  00FE67  69                 	db	105	;'i'
  1218  00FE68  00                 	db	0
  1219  00FE69  00                 	db	0
  1220  00FE6A                     STR_27:
  1221  00FE6A  50                 	db	80	;'P'
  1222  00FE6B  61                 	db	97	;'a'
  1223  00FE6C  63                 	db	99	;'c'
  1224  00FE6D  6B                 	db	107	;'k'
  1225  00FE6E  61                 	db	97	;'a'
  1226  00FE6F  67                 	db	103	;'g'
  1227  00FE70  69                 	db	105	;'i'
  1228  00FE71  6E                 	db	110	;'n'
  1229  00FE72  67                 	db	103	;'g'
  1230  00FE73  0A                 	db	10
  1231  00FE74  50                 	db	80	;'P'
  1232  00FE75  6C                 	db	108	;'l'
  1233  00FE76  65                 	db	101	;'e'
  1234  00FE77  61                 	db	97	;'a'
  1235  00FE78  73                 	db	115	;'s'
  1236  00FE79  65                 	db	101	;'e'
  1237  00FE7A  20                 	db	32
  1238  00FE7B  77                 	db	119	;'w'
  1239  00FE7C  61                 	db	97	;'a'
  1240  00FE7D  69                 	db	105	;'i'
  1241  00FE7E  74                 	db	116	;'t'
  1242  00FE7F  2E                 	db	46
  1243  00FE80  2E                 	db	46
  1244  00FE81  2E                 	db	46
  1245  00FE82  00                 	db	0
  1246  00FE83                     STR_18:
  1247  00FE83  44                 	db	68	;'D'
  1248  00FE84  61                 	db	97	;'a'
  1249  00FE85  74                 	db	116	;'t'
  1250  00FE86  65                 	db	101	;'e'
  1251  00FE87  3A                 	db	58	;':'
  1252  00FE88  0A                 	db	10
  1253  00FE89  32                 	db	50	;'2'
  1254  00FE8A  30                 	db	48	;'0'
  1255  00FE8B  25                 	db	37
  1256  00FE8C  30                 	db	48	;'0'
  1257  00FE8D  32                 	db	50	;'2'
  1258  00FE8E  64                 	db	100	;'d'
  1259  00FE8F  2D                 	db	45
  1260  00FE90  25                 	db	37
  1261  00FE91  30                 	db	48	;'0'
  1262  00FE92  32                 	db	50	;'2'
  1263  00FE93  64                 	db	100	;'d'
  1264  00FE94  2D                 	db	45
  1265  00FE95  25                 	db	37
  1266  00FE96  30                 	db	48	;'0'
  1267  00FE97  32                 	db	50	;'2'
  1268  00FE98  64                 	db	100	;'d'
  1269  00FE99  00                 	db	0
  1270  00FE9A                     STR_31:
  1271  00FE9A  4F                 	db	79	;'O'
  1272  00FE9B  70                 	db	112	;'p'
  1273  00FE9C  65                 	db	101	;'e'
  1274  00FE9D  72                 	db	114	;'r'
  1275  00FE9E  61                 	db	97	;'a'
  1276  00FE9F  74                 	db	116	;'t'
  1277  00FEA0  69                 	db	105	;'i'
  1278  00FEA1  6E                 	db	110	;'n'
  1279  00FEA2  67                 	db	103	;'g'
  1280  00FEA3  20                 	db	32
  1281  00FEA4  74                 	db	116	;'t'
  1282  00FEA5  69                 	db	105	;'i'
  1283  00FEA6  6D                 	db	109	;'m'
  1284  00FEA7  65                 	db	101	;'e'
  1285  00FEA8  3A                 	db	58	;':'
  1286  00FEA9  0A                 	db	10
  1287  00FEAA  25                 	db	37
  1288  00FEAB  64                 	db	100	;'d'
  1289  00FEAC  3A                 	db	58	;':'
  1290  00FEAD  25                 	db	37
  1291  00FEAE  64                 	db	100	;'d'
  1292  00FEAF  00                 	db	0
  1293  00FEB0                     STR_8:
  1294  00FEB0  01                 	db	1
  1295  00FEB1  42                 	db	66	;'B'
  1296  00FEB2  3A                 	db	58	;':'
  1297  00FEB3  25                 	db	37
  1298  00FEB4  64                 	db	100	;'d'
  1299  00FEB5  20                 	db	32
  1300  00FEB6  4E                 	db	78	;'N'
  1301  00FEB7  3A                 	db	58	;':'
  1302  00FEB8  25                 	db	37
  1303  00FEB9  64                 	db	100	;'d'
  1304  00FEBA  20                 	db	32
  1305  00FEBB  53                 	db	83	;'S'
  1306  00FEBC  3A                 	db	58	;':'
  1307  00FEBD  25                 	db	37
  1308  00FEBE  64                 	db	100	;'d'
  1309  00FEBF  20                 	db	32
  1310  00FEC0  57                 	db	87	;'W'
  1311  00FEC1  3A                 	db	58	;':'
  1312  00FEC2  25                 	db	37
  1313  00FEC3  64                 	db	100	;'d'
  1314  00FEC4  00                 	db	0
  1315  00FEC5  00                 	db	0
  1316  00FEC6                     STR_28:
  1317  00FEC6  01                 	db	1
  1318  00FEC7  53                 	db	83	;'S'
  1319  00FEC8  74                 	db	116	;'t'
  1320  00FEC9  61                 	db	97	;'a'
  1321  00FECA  72                 	db	114	;'r'
  1322  00FECB  74                 	db	116	;'t'
  1323  00FECC  69                 	db	105	;'i'
  1324  00FECD  6E                 	db	110	;'n'
  1325  00FECE  67                 	db	103	;'g'
  1326  00FECF  20                 	db	32
  1327  00FED0  70                 	db	112	;'p'
  1328  00FED1  61                 	db	97	;'a'
  1329  00FED2  63                 	db	99	;'c'
  1330  00FED3  6B                 	db	107	;'k'
  1331  00FED4  61                 	db	97	;'a'
  1332  00FED5  67                 	db	103	;'g'
  1333  00FED6  69                 	db	105	;'i'
  1334  00FED7  6E                 	db	110	;'n'
  1335  00FED8  67                 	db	103	;'g'
  1336  00FED9  00                 	db	0
  1337  00FEDA  00                 	db	0
  1338  00FEDB                     STR_16:
  1339  00FEDB  30                 	db	48	;'0'
  1340  00FEDC  3A                 	db	58	;':'
  1341  00FEDD  52                 	db	82	;'R'
  1342  00FEDE  65                 	db	101	;'e'
  1343  00FEDF  74                 	db	116	;'t'
  1344  00FEE0  75                 	db	117	;'u'
  1345  00FEE1  72                 	db	114	;'r'
  1346  00FEE2  6E                 	db	110	;'n'
  1347  00FEE3  0A                 	db	10
  1348  00FEE4  3C                 	db	60	;'<'
  1349  00FEE5  3E                 	db	62	;'>'
  1350  00FEE6  3A                 	db	58	;':'
  1351  00FEE7  4E                 	db	78	;'N'
  1352  00FEE8  61                 	db	97	;'a'
  1353  00FEE9  76                 	db	118	;'v'
  1354  00FEEA  69                 	db	105	;'i'
  1355  00FEEB  67                 	db	103	;'g'
  1356  00FEEC  61                 	db	97	;'a'
  1357  00FEED  74                 	db	116	;'t'
  1358  00FEEE  65                 	db	101	;'e'
  1359  00FEEF  00                 	db	0
  1360  00FEF0                     STR_5:
  1361  00FEF0  01                 	db	1
  1362  00FEF1  44                 	db	68	;'D'
  1363  00FEF2  6F                 	db	111	;'o'
  1364  00FEF3  6E                 	db	110	;'n'
  1365  00FEF4  65                 	db	101	;'e'
  1366  00FEF5  20                 	db	32
  1367  00FEF6  63                 	db	99	;'c'
  1368  00FEF7  6F                 	db	111	;'o'
  1369  00FEF8  6D                 	db	109	;'m'
  1370  00FEF9  70                 	db	112	;'p'
  1371  00FEFA  61                 	db	97	;'a'
  1372  00FEFB  72                 	db	114	;'r'
  1373  00FEFC  74                 	db	116	;'t'
  1374  00FEFD  6D                 	db	109	;'m'
  1375  00FEFE  65                 	db	101	;'e'
  1376  00FEFF  6E                 	db	110	;'n'
  1377  00FF00  74                 	db	116	;'t'
  1378  00FF01  00                 	db	0
  1379  00FF02  00                 	db	0
  1380  00FF03                     STR_22:
  1381  00FF03  45                 	db	69	;'E'
  1382  00FF04  6E                 	db	110	;'n'
  1383  00FF05  74                 	db	116	;'t'
  1384  00FF06  72                 	db	114	;'r'
  1385  00FF07  79                 	db	121	;'y'
  1386  00FF08  20                 	db	32
  1387  00FF09  25                 	db	37
  1388  00FF0A  75                 	db	117	;'u'
  1389  00FF0B  0A                 	db	10
  1390  00FF0C  69                 	db	105	;'i'
  1391  00FF0D  73                 	db	115	;'s'
  1392  00FF0E  20                 	db	32
  1393  00FF0F  65                 	db	101	;'e'
  1394  00FF10  6D                 	db	109	;'m'
  1395  00FF11  70                 	db	112	;'p'
  1396  00FF12  74                 	db	116	;'t'
  1397  00FF13  79                 	db	121	;'y'
  1398  00FF14  00                 	db	0
  1399  00FF15                     STR_15:
  1400  00FF15  50                 	db	80	;'P'
  1401  00FF16  72                 	db	114	;'r'
  1402  00FF17  65                 	db	101	;'e'
  1403  00FF18  73                 	db	115	;'s'
  1404  00FF19  73                 	db	115	;'s'
  1405  00FF1A  20                 	db	32
  1406  00FF1B  31                 	db	49	;'1'
  1407  00FF1C  20                 	db	32
  1408  00FF1D  74                 	db	116	;'t'
  1409  00FF1E  6F                 	db	111	;'o'
  1410  00FF1F  20                 	db	32
  1411  00FF20  62                 	db	98	;'b'
  1412  00FF21  65                 	db	101	;'e'
  1413  00FF22  67                 	db	103	;'g'
  1414  00FF23  69                 	db	105	;'i'
  1415  00FF24  6E                 	db	110	;'n'
  1416  00FF25  00                 	db	0
  1417  00FF26                     STR_3:
  1418  00FF26  01                 	db	1
  1419  00FF27  53                 	db	83	;'S'
  1420  00FF28  70                 	db	112	;'p'
  1421  00FF29  61                 	db	97	;'a'
  1422  00FF2A  63                 	db	99	;'c'
  1423  00FF2B  65                 	db	101	;'e'
  1424  00FF2C  72                 	db	114	;'r'
  1425  00FF2D  20                 	db	32
  1426  00FF2E  43                 	db	67	;'C'
  1427  00FF2F  6F                 	db	111	;'o'
  1428  00FF30  75                 	db	117	;'u'
  1429  00FF31  6E                 	db	110	;'n'
  1430  00FF32  74                 	db	116	;'t'
  1431  00FF33  65                 	db	101	;'e'
  1432  00FF34  64                 	db	100	;'d'
  1433  00FF35  00                 	db	0
  1434  00FF36  00                 	db	0
  1435  00FF37                     STR_4:
  1436  00FF37  01                 	db	1
  1437  00FF38  57                 	db	87	;'W'
  1438  00FF39  61                 	db	97	;'a'
  1439  00FF3A  73                 	db	115	;'s'
  1440  00FF3B  68                 	db	104	;'h'
  1441  00FF3C  65                 	db	101	;'e'
  1442  00FF3D  72                 	db	114	;'r'
  1443  00FF3E  20                 	db	32
  1444  00FF3F  43                 	db	67	;'C'
  1445  00FF40  6F                 	db	111	;'o'
  1446  00FF41  75                 	db	117	;'u'
  1447  00FF42  6E                 	db	110	;'n'
  1448  00FF43  74                 	db	116	;'t'
  1449  00FF44  65                 	db	101	;'e'
  1450  00FF45  64                 	db	100	;'d'
  1451  00FF46  00                 	db	0
  1452  00FF47  00                 	db	0
  1453  00FF48                     STR_13:
  1454  00FF48  01                 	db	1
  1455  00FF49  53                 	db	83	;'S'
  1456  00FF4A  70                 	db	112	;'p'
  1457  00FF4B  61                 	db	97	;'a'
  1458  00FF4C  63                 	db	99	;'c'
  1459  00FF4D  65                 	db	101	;'e'
  1460  00FF4E  72                 	db	114	;'r'
  1461  00FF4F  20                 	db	32
  1462  00FF50  63                 	db	99	;'c'
  1463  00FF51  6F                 	db	111	;'o'
  1464  00FF52  75                 	db	117	;'u'
  1465  00FF53  6E                 	db	110	;'n'
  1466  00FF54  74                 	db	116	;'t'
  1467  00FF55  65                 	db	101	;'e'
  1468  00FF56  64                 	db	100	;'d'
  1469  00FF57  00                 	db	0
  1470  00FF58  00                 	db	0
  1471  00FF59                     STR_14:
  1472  00FF59  01                 	db	1
  1473  00FF5A  57                 	db	87	;'W'
  1474  00FF5B  61                 	db	97	;'a'
  1475  00FF5C  73                 	db	115	;'s'
  1476  00FF5D  68                 	db	104	;'h'
  1477  00FF5E  65                 	db	101	;'e'
  1478  00FF5F  72                 	db	114	;'r'
  1479  00FF60  20                 	db	32
  1480  00FF61  63                 	db	99	;'c'
  1481  00FF62  6F                 	db	111	;'o'
  1482  00FF63  75                 	db	117	;'u'
  1483  00FF64  6E                 	db	110	;'n'
  1484  00FF65  74                 	db	116	;'t'
  1485  00FF66  65                 	db	101	;'e'
  1486  00FF67  64                 	db	100	;'d'
  1487  00FF68  00                 	db	0
  1488  00FF69  00                 	db	0
  1489  00FF6A                     STR_32:
  1490  00FF6A  53                 	db	83	;'S'
  1491  00FF6B  61                 	db	97	;'a'
  1492  00FF6C  76                 	db	118	;'v'
  1493  00FF6D  65                 	db	101	;'e'
  1494  00FF6E  64                 	db	100	;'d'
  1495  00FF6F  20                 	db	32
  1496  00FF70  74                 	db	116	;'t'
  1497  00FF71  6F                 	db	111	;'o'
  1498  00FF72  20                 	db	32
  1499  00FF73  45                 	db	69	;'E'
  1500  00FF74  45                 	db	69	;'E'
  1501  00FF75  50                 	db	80	;'P'
  1502  00FF76  52                 	db	82	;'R'
  1503  00FF77  4F                 	db	79	;'O'
  1504  00FF78  4D                 	db	77	;'M'
  1505  00FF79  00                 	db	0
  1506  00FF7A                     STR_1:
  1507  00FF7A  01                 	db	1
  1508  00FF7B  42                 	db	66	;'B'
  1509  00FF7C  6F                 	db	111	;'o'
  1510  00FF7D  6C                 	db	108	;'l'
  1511  00FF7E  74                 	db	116	;'t'
  1512  00FF7F  20                 	db	32
  1513  00FF80  43                 	db	67	;'C'
  1514  00FF81  6F                 	db	111	;'o'
  1515  00FF82  75                 	db	117	;'u'
  1516  00FF83  6E                 	db	110	;'n'
  1517  00FF84  74                 	db	116	;'t'
  1518  00FF85  65                 	db	101	;'e'
  1519  00FF86  64                 	db	100	;'d'
  1520  00FF87  00                 	db	0
  1521  00FF88  00                 	db	0
  1522  00FF89                     STR_11:
  1523  00FF89  01                 	db	1
  1524  00FF8A  42                 	db	66	;'B'
  1525  00FF8B  6F                 	db	111	;'o'
  1526  00FF8C  6C                 	db	108	;'l'
  1527  00FF8D  74                 	db	116	;'t'
  1528  00FF8E  20                 	db	32
  1529  00FF8F  63                 	db	99	;'c'
  1530  00FF90  6F                 	db	111	;'o'
  1531  00FF91  75                 	db	117	;'u'
  1532  00FF92  6E                 	db	110	;'n'
  1533  00FF93  74                 	db	116	;'t'
  1534  00FF94  65                 	db	101	;'e'
  1535  00FF95  64                 	db	100	;'d'
  1536  00FF96  00                 	db	0
  1537  00FF97  00                 	db	0
  1538  00FF98                     STR_9:
  1539  00FF98  43                 	db	67	;'C'
  1540  00FF99  6F                 	db	111	;'o'
  1541  00FF9A  6D                 	db	109	;'m'
  1542  00FF9B  70                 	db	112	;'p'
  1543  00FF9C  61                 	db	97	;'a'
  1544  00FF9D  72                 	db	114	;'r'
  1545  00FF9E  74                 	db	116	;'t'
  1546  00FF9F  6D                 	db	109	;'m'
  1547  00FFA0  65                 	db	101	;'e'
  1548  00FFA1  6E                 	db	110	;'n'
  1549  00FFA2  74                 	db	116	;'t'
  1550  00FFA3  20                 	db	32
  1551  00FFA4  25                 	db	37
  1552  00FFA5  64                 	db	100	;'d'
  1553  00FFA6  00                 	db	0
  1554  00FFA7                     STR_24:
  1555  00FFA7  01                 	db	1
  1556  00FFA8  44                 	db	68	;'D'
  1557  00FFA9  6F                 	db	111	;'o'
  1558  00FFAA  6E                 	db	110	;'n'
  1559  00FFAB  65                 	db	101	;'e'
  1560  00FFAC  20                 	db	32
  1561  00FFAD  69                 	db	105	;'i'
  1562  00FFAE  6E                 	db	110	;'n'
  1563  00FFAF  70                 	db	112	;'p'
  1564  00FFB0  75                 	db	117	;'u'
  1565  00FFB1  74                 	db	116	;'t'
  1566  00FFB2  73                 	db	115	;'s'
  1567  00FFB3  00                 	db	0
  1568  00FFB4  00                 	db	0
  1569  00FFB5                     STR_33:
  1570  00FFB5  41                 	db	65	;'A'
  1571  00FFB6  6C                 	db	108	;'l'
  1572  00FFB7  72                 	db	114	;'r'
  1573  00FFB8  65                 	db	101	;'e'
  1574  00FFB9  61                 	db	97	;'a'
  1575  00FFBA  64                 	db	100	;'d'
  1576  00FFBB  79                 	db	121	;'y'
  1577  00FFBC  20                 	db	32
  1578  00FFBD  73                 	db	115	;'s'
  1579  00FFBE  61                 	db	97	;'a'
  1580  00FFBF  76                 	db	118	;'v'
  1581  00FFC0  65                 	db	101	;'e'
  1582  00FFC1  64                 	db	100	;'d'
  1583  00FFC2  00                 	db	0
  1584  00FFC3                     STR_2:
  1585  00FFC3  01                 	db	1
  1586  00FFC4  4E                 	db	78	;'N'
  1587  00FFC5  75                 	db	117	;'u'
  1588  00FFC6  74                 	db	116	;'t'
  1589  00FFC7  20                 	db	32
  1590  00FFC8  43                 	db	67	;'C'
  1591  00FFC9  6F                 	db	111	;'o'
  1592  00FFCA  75                 	db	117	;'u'
  1593  00FFCB  6E                 	db	110	;'n'
  1594  00FFCC  74                 	db	116	;'t'
  1595  00FFCD  65                 	db	101	;'e'
  1596  00FFCE  64                 	db	100	;'d'
  1597  00FFCF  00                 	db	0
  1598  00FFD0  00                 	db	0
  1599  00FFD1                     STR_12:
  1600  00FFD1  01                 	db	1
  1601  00FFD2  4E                 	db	78	;'N'
  1602  00FFD3  75                 	db	117	;'u'
  1603  00FFD4  74                 	db	116	;'t'
  1604  00FFD5  20                 	db	32
  1605  00FFD6  63                 	db	99	;'c'
  1606  00FFD7  6F                 	db	111	;'o'
  1607  00FFD8  75                 	db	117	;'u'
  1608  00FFD9  6E                 	db	110	;'n'
  1609  00FFDA  74                 	db	116	;'t'
  1610  00FFDB  65                 	db	101	;'e'
  1611  00FFDC  64                 	db	100	;'d'
  1612  00FFDD  00                 	db	0
  1613  00FFDE  00                 	db	0
  1614  00FFDF                     STR_21:
  1615  00FFDF  54                 	db	84	;'T'
  1616  00FFE0  69                 	db	105	;'i'
  1617  00FFE1  6D                 	db	109	;'m'
  1618  00FFE2  65                 	db	101	;'e'
  1619  00FFE3  3A                 	db	58	;':'
  1620  00FFE4  0A                 	db	10
  1621  00FFE5  25                 	db	37
  1622  00FFE6  64                 	db	100	;'d'
  1623  00FFE7  3A                 	db	58	;':'
  1624  00FFE8  25                 	db	37
  1625  00FFE9  64                 	db	100	;'d'
  1626  00FFEA  00                 	db	0
  1627  00FFEB                     STR_34:
  1628  00FFEB  43                 	db	67	;'C'
  1629  00FFEC  25                 	db	37
  1630  00FFED  64                 	db	100	;'d'
  1631  00FFEE  3A                 	db	58	;':'
  1632  00FFEF  20                 	db	32
  1633  00FFF0  25                 	db	37
  1634  00FFF1  73                 	db	115	;'s'
  1635  00FFF2  20                 	db	32
  1636  00FFF3  78                 	db	120	;'x'
  1637  00FFF4  25                 	db	37
  1638  00FFF5  64                 	db	100	;'d'
  1639  00FFF6  00                 	db	0
  1640  00FFF7                     STR_35:
  1641  00FFF7  28                 	db	40
  1642  00FFF8  6E                 	db	110	;'n'
  1643  00FFF9  75                 	db	117	;'u'
  1644  00FFFA  6C                 	db	108	;'l'
  1645  00FFFB  6C                 	db	108	;'l'
  1646  00FFFC  29                 	db	41
  1647  00FFFD  00                 	db	0
  1648  0000                     
  1649                           ; #config settings
  1650  00FFFE  00                 	db	0	; dummy byte at the end
  1651  0000                     
  1652                           	psect	cinit
  1653  0031C6                     __pcinit:
  1654                           	opt stack 0
  1655  0031C6                     start_initialization:
  1656                           	opt stack 0
  1657  0031C6                     __initialization:
  1658                           	opt stack 0
  1659                           
  1660                           ; Initialize objects allocated to BANK3 (105 bytes)
  1661                           ; load TBLPTR registers with __pidataBANK3
  1662  0031C6  0EEC               	movlw	low __pidataBANK3
  1663  0031C8  6EF6               	movwf	tblptrl,c
  1664  0031CA  0E3A               	movlw	high __pidataBANK3
  1665  0031CC  6EF7               	movwf	tblptrh,c
  1666  0031CE  0E00               	movlw	low (__pidataBANK3 shr (0+16))
  1667  0031D0  6EF8               	movwf	tblptru,c
  1668  0031D2  EE03  F000         	lfsr	0,__pdataBANK3
  1669  0031D6  EE10 F069          	lfsr	1,105
  1670  0031DA                     copy_data0:
  1671  0031DA  0009               	tblrd		*+
  1672  0031DC  CFF5 FFEE          	movff	tablat,postinc0
  1673  0031E0  50E5               	movf	postdec1,w,c
  1674  0031E2  50E1               	movf	fsr1l,w,c
  1675  0031E4  E1FA               	bnz	copy_data0
  1676                           
  1677                           ; Initialize objects allocated to BANK2 (34 bytes)
  1678                           ; load TBLPTR registers with __pidataBANK2
  1679  0031E6  0EA6               	movlw	low __pidataBANK2
  1680  0031E8  6EF6               	movwf	tblptrl,c
  1681  0031EA  0E3E               	movlw	high __pidataBANK2
  1682  0031EC  6EF7               	movwf	tblptrh,c
  1683  0031EE  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  1684  0031F0  6EF8               	movwf	tblptru,c
  1685  0031F2  EE02  F0A6         	lfsr	0,__pdataBANK2
  1686  0031F6  EE10 F022          	lfsr	1,34
  1687  0031FA                     copy_data1:
  1688  0031FA  0009               	tblrd		*+
  1689  0031FC  CFF5 FFEE          	movff	tablat,postinc0
  1690  003200  50E5               	movf	postdec1,w,c
  1691  003202  50E1               	movf	fsr1l,w,c
  1692  003204  E1FA               	bnz	copy_data1
  1693                           
  1694                           ; Initialize objects allocated to BANK1 (28 bytes)
  1695                           ; load TBLPTR registers with __pidataBANK1
  1696  003206  0E2E               	movlw	low __pidataBANK1
  1697  003208  6EF6               	movwf	tblptrl,c
  1698  00320A  0E3F               	movlw	high __pidataBANK1
  1699  00320C  6EF7               	movwf	tblptrh,c
  1700  00320E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1701  003210  6EF8               	movwf	tblptru,c
  1702  003212  EE01  F0D5         	lfsr	0,__pdataBANK1
  1703  003216  EE10 F01C          	lfsr	1,28
  1704  00321A                     copy_data2:
  1705  00321A  0009               	tblrd		*+
  1706  00321C  CFF5 FFEE          	movff	tablat,postinc0
  1707  003220  50E5               	movf	postdec1,w,c
  1708  003222  50E1               	movf	fsr1l,w,c
  1709  003224  E1FA               	bnz	copy_data2
  1710                           
  1711                           ; Initialize objects allocated to BANK0 (6 bytes)
  1712                           ; load TBLPTR registers with __pidataBANK0
  1713  003226  0E12               	movlw	low __pidataBANK0
  1714  003228  6EF6               	movwf	tblptrl,c
  1715  00322A  0E40               	movlw	high __pidataBANK0
  1716  00322C  6EF7               	movwf	tblptrh,c
  1717  00322E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1718  003230  6EF8               	movwf	tblptru,c
  1719  003232  EE00  F0E5         	lfsr	0,__pdataBANK0
  1720  003236  EE10 F006          	lfsr	1,6
  1721  00323A                     copy_data3:
  1722  00323A  0009               	tblrd		*+
  1723  00323C  CFF5 FFEE          	movff	tablat,postinc0
  1724  003240  50E5               	movf	postdec1,w,c
  1725  003242  50E1               	movf	fsr1l,w,c
  1726  003244  E1FA               	bnz	copy_data3
  1727                           
  1728                           ; Initialize objects allocated to COMRAM (19 bytes)
  1729                           ; load TBLPTR registers with __pidataCOMRAM
  1730  003246  0EB8               	movlw	low __pidataCOMRAM
  1731  003248  6EF6               	movwf	tblptrl,c
  1732  00324A  0E3F               	movlw	high __pidataCOMRAM
  1733  00324C  6EF7               	movwf	tblptrh,c
  1734  00324E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1735  003250  6EF8               	movwf	tblptru,c
  1736  003252  EE00  F051         	lfsr	0,__pdataCOMRAM
  1737  003256  EE10 F013          	lfsr	1,19
  1738  00325A                     copy_data4:
  1739  00325A  0009               	tblrd		*+
  1740  00325C  CFF5 FFEE          	movff	tablat,postinc0
  1741  003260  50E5               	movf	postdec1,w,c
  1742  003262  50E1               	movf	fsr1l,w,c
  1743  003264  E1FA               	bnz	copy_data4
  1744                           
  1745                           ; Clear objects allocated to BANK1 (30 bytes)
  1746  003266  EE01  F0B7         	lfsr	0,__pbssBANK1
  1747  00326A  0E1E               	movlw	30
  1748  00326C                     clear_0:
  1749  00326C  6AEE               	clrf	postinc0,c
  1750  00326E  06E8               	decf	wreg,f,c
  1751  003270  E1FD               	bnz	clear_0
  1752                           
  1753                           ; Clear objects allocated to BANK0 (16 bytes)
  1754  003272  EE00  F0D5         	lfsr	0,__pbssBANK0
  1755  003276  0E10               	movlw	16
  1756  003278                     clear_1:
  1757  003278  6AEE               	clrf	postinc0,c
  1758  00327A  06E8               	decf	wreg,f,c
  1759  00327C  E1FD               	bnz	clear_1
  1760                           
  1761                           ; Clear objects allocated to COMRAM (29 bytes)
  1762  00327E  EE00  F034         	lfsr	0,__pbssCOMRAM
  1763  003282  0E1D               	movlw	29
  1764  003284                     clear_2:
  1765  003284  6AEE               	clrf	postinc0,c
  1766  003286  06E8               	decf	wreg,f,c
  1767  003288  E1FD               	bnz	clear_2
  1768  00328A                     end_of_initialization:
  1769                           	opt stack 0
  1770  00328A                     __end_of__initialization:
  1771                           	opt stack 0
  1772  00328A  9064               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1773  00328C  9264               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1774  00328E  0100               	movlb	0
  1775  003290  EFD0  F01A         	goto	_main	;jump to C main() function
  1776                           tblptru	equ	0xFF8
  1777                           tblptrh	equ	0xFF7
  1778                           tblptrl	equ	0xFF6
  1779                           tablat	equ	0xFF5
  1780                           postinc0	equ	0xFEE
  1781                           wreg	equ	0xFE8
  1782                           postdec1	equ	0xFE5
  1783                           fsr1l	equ	0xFE1
  1784                           
  1785                           	psect	bssCOMRAM
  1786  000034                     __pbssCOMRAM:
  1787                           	opt stack 0
  1788  000034                     _endTime:
  1789                           	opt stack 0
  1790  000034                     	ds	6
  1791  00003A                     _startTime:
  1792                           	opt stack 0
  1793  00003A                     	ds	6
  1794  000040                     _motorGoingBackwards:
  1795                           	opt stack 0
  1796  000040                     	ds	4
  1797  000044                     _test:
  1798                           	opt stack 0
  1799  000044                     	ds	4
  1800  000048                     	ds	4
  1801  00004C                     _currentMode:
  1802                           	opt stack 0
  1803  00004C                     	ds	2
  1804  00004E                     _timerInit:
  1805                           	opt stack 0
  1806  00004E                     	ds	1
  1807  00004F                     _operating:
  1808                           	opt stack 0
  1809  00004F                     	ds	1
  1810  000050                     _LCDinterruptState:
  1811                           	opt stack 0
  1812  000050                     	ds	1
  1813                           tblptru	equ	0xFF8
  1814                           tblptrh	equ	0xFF7
  1815                           tblptrl	equ	0xFF6
  1816                           tablat	equ	0xFF5
  1817                           postinc0	equ	0xFEE
  1818                           wreg	equ	0xFE8
  1819                           postdec1	equ	0xFE5
  1820                           fsr1l	equ	0xFE1
  1821                           
  1822                           	psect	dataCOMRAM
  1823  000051                     __pdataCOMRAM:
  1824                           	opt stack 0
  1825  000051                     _shortTolerance:
  1826                           	opt stack 0
  1827  000051                     	ds	4
  1828  000055                     _longTolerance:
  1829                           	opt stack 0
  1830  000055                     	ds	4
  1831  000059                     _currentMotorDir:
  1832                           	opt stack 0
  1833  000059                     	ds	4
  1834  00005D                     _timeSinceLastTic:
  1835                           	opt stack 0
  1836  00005D                     	ds	3
  1837  000060                     timer@operatingTime:
  1838                           	opt stack 0
  1839  000060                     	ds	3
  1840  000063                     _interruptKeypress:
  1841                           	opt stack 0
  1842  000063                     	ds	1
  1843                           tblptru	equ	0xFF8
  1844                           tblptrh	equ	0xFF7
  1845                           tblptrl	equ	0xFF6
  1846                           tablat	equ	0xFF5
  1847                           postinc0	equ	0xFEE
  1848                           wreg	equ	0xFE8
  1849                           postdec1	equ	0xFE5
  1850                           fsr1l	equ	0xFE1
  1851                           
  1852                           	psect	bssBANK0
  1853  0000D5                     __pbssBANK0:
  1854                           	opt stack 0
  1855  0000D5                     _dispensed:
  1856                           	opt stack 0
  1857  0000D5                     	ds	8
  1858  0000DD                     _extras:
  1859                           	opt stack 0
  1860  0000DD                     	ds	8
  1861                           tblptru	equ	0xFF8
  1862                           tblptrh	equ	0xFF7
  1863                           tblptrl	equ	0xFF6
  1864                           tablat	equ	0xFF5
  1865                           postinc0	equ	0xFEE
  1866                           wreg	equ	0xFE8
  1867                           postdec1	equ	0xFE5
  1868                           fsr1l	equ	0xFE1
  1869                           
  1870                           	psect	dataBANK0
  1871  0000E5                     __pdataBANK0:
  1872                           	opt stack 0
  1873  0000E5                     inputEntry@F3225:
  1874                           	opt stack 0
  1875  0000E5                     	ds	2
  1876  0000E7                     clearing@F3241:
  1877                           	opt stack 0
  1878  0000E7                     	ds	2
  1879  0000E9                     packageCompartment@F3223:
  1880                           	opt stack 0
  1881  0000E9                     	ds	2
  1882                           tblptru	equ	0xFF8
  1883                           tblptrh	equ	0xFF7
  1884                           tblptrl	equ	0xFF6
  1885                           tablat	equ	0xFF5
  1886                           postinc0	equ	0xFEE
  1887                           wreg	equ	0xFE8
  1888                           postdec1	equ	0xFE5
  1889                           fsr1l	equ	0xFE1
  1890                           
  1891                           	psect	bssBANK1
  1892  0001B7                     __pbssBANK1:
  1893                           	opt stack 0
  1894  0001B7                     _params:
  1895                           	opt stack 0
  1896  0001B7                     	ds	26
  1897  0001D1                     _motorControlTimer:
  1898                           	opt stack 0
  1899  0001D1                     	ds	4
  1900                           tblptru	equ	0xFF8
  1901                           tblptrh	equ	0xFF7
  1902                           tblptrl	equ	0xFF6
  1903                           tablat	equ	0xFF5
  1904                           postinc0	equ	0xFEE
  1905                           wreg	equ	0xFE8
  1906                           postdec1	equ	0xFE5
  1907                           fsr1l	equ	0xFE1
  1908                           
  1909                           	psect	dataBANK1
  1910  0001D5                     __pdataBANK1:
  1911                           	opt stack 0
  1912  0001D5                     inputEntry@F3246:
  1913                           	opt stack 0
  1914  0001D5                     	ds	24
  1915  0001ED                     packaging@F3231:
  1916                           	opt stack 0
  1917  0001ED                     	ds	2
  1918  0001EF                     packaging@F3227:
  1919                           	opt stack 0
  1920  0001EF                     	ds	2
  1921                           tblptru	equ	0xFF8
  1922                           tblptrh	equ	0xFF7
  1923                           tblptrl	equ	0xFF6
  1924                           tablat	equ	0xFF5
  1925                           postinc0	equ	0xFEE
  1926                           wreg	equ	0xFE8
  1927                           postdec1	equ	0xFE5
  1928                           fsr1l	equ	0xFE1
  1929                           
  1930                           	psect	dataBANK2
  1931  0002A6                     __pdataBANK2:
  1932                           	opt stack 0
  1933  0002A6                     packaging@F3229:
  1934                           	opt stack 0
  1935  0002A6                     	ds	34
  1936                           tblptru	equ	0xFF8
  1937                           tblptrh	equ	0xFF7
  1938                           tblptrl	equ	0xFF6
  1939                           tablat	equ	0xFF5
  1940                           postinc0	equ	0xFEE
  1941                           wreg	equ	0xFE8
  1942                           postdec1	equ	0xFE5
  1943                           fsr1l	equ	0xFE1
  1944                           
  1945                           	psect	dataBANK3
  1946  000300                     __pdataBANK3:
  1947                           	opt stack 0
  1948  000300                     _fSLookup:
  1949                           	opt stack 0
  1950  000300                     	ds	105
  1951                           tblptru	equ	0xFF8
  1952                           tblptrh	equ	0xFF7
  1953                           tblptrl	equ	0xFF6
  1954                           tablat	equ	0xFF5
  1955                           postinc0	equ	0xFEE
  1956                           wreg	equ	0xFE8
  1957                           postdec1	equ	0xFE5
  1958                           fsr1l	equ	0xFE1
  1959                           
  1960                           	psect	cstackBANK2
  1961  000200                     __pcstackBANK2:
  1962                           	opt stack 0
  1963  000200                     mainMenu@summaries:
  1964                           	opt stack 0
  1965                           
  1966                           ; 96 bytes @ 0x0
  1967  000200                     	ds	96
  1968  000260                     mainMenu@msg:
  1969                           	opt stack 0
  1970                           
  1971                           ; 32 bytes @ 0x60
  1972  000260                     	ds	32
  1973  000280                     mainMenu@time:
  1974                           	opt stack 0
  1975                           
  1976                           ; 7 bytes @ 0x80
  1977  000280                     	ds	7
  1978  000287                     mainMenu@savedToEEPROM:
  1979                           	opt stack 0
  1980                           
  1981                           ; 1 bytes @ 0x87
  1982  000287                     	ds	1
  1983  000288                     mainMenu@startPress:
  1984                           	opt stack 0
  1985                           
  1986                           ; 2 bytes @ 0x88
  1987  000288                     	ds	2
  1988  00028A                     mainMenu@operationTime:
  1989                           	opt stack 0
  1990                           
  1991                           ; 4 bytes @ 0x8A
  1992  00028A                     	ds	4
  1993  00028E                     mainMenu@needToPrint:
  1994                           	opt stack 0
  1995                           
  1996                           ; 2 bytes @ 0x8E
  1997  00028E                     	ds	2
  1998  000290                     mainMenu@operationSeconds:
  1999                           	opt stack 0
  2000                           
  2001                           ; 2 bytes @ 0x90
  2002  000290                     	ds	2
  2003  000292                     mainMenu@operationMinutes:
  2004                           	opt stack 0
  2005                           
  2006                           ; 2 bytes @ 0x92
  2007  000292                     	ds	2
  2008  000294                     mainMenu@pressed:
  2009                           	opt stack 0
  2010                           
  2011                           ; 2 bytes @ 0x94
  2012  000294                     	ds	2
  2013  000296                     mainMenu@pressed_843:
  2014                           	opt stack 0
  2015                           
  2016                           ; 1 bytes @ 0x96
  2017  000296                     	ds	1
  2018  000297                     mainMenu@i:
  2019                           	opt stack 0
  2020                           
  2021                           ; 2 bytes @ 0x97
  2022  000297                     	ds	2
  2023  000299                     mainMenu@run:
  2024                           	opt stack 0
  2025                           
  2026                           ; 13 bytes @ 0x99
  2027  000299                     	ds	13
  2028                           tblptru	equ	0xFF8
  2029                           tblptrh	equ	0xFF7
  2030                           tblptrl	equ	0xFF6
  2031                           tablat	equ	0xFF5
  2032                           postinc0	equ	0xFEE
  2033                           wreg	equ	0xFE8
  2034                           postdec1	equ	0xFE5
  2035                           fsr1l	equ	0xFE1
  2036                           
  2037                           	psect	cstackBANK1
  2038  000100                     __pcstackBANK1:
  2039                           	opt stack 0
  2040  000100                     inputEntry@msg:
  2041                           	opt stack 0
  2042  000100                     packaging@msg:
  2043                           	opt stack 0
  2044  000100                     viewLogs@msgs:
  2045                           	opt stack 0
  2046                           
  2047                           ; 128 bytes @ 0x0
  2048  000100                     	ds	24
  2049  000118                     inputEntry@fastenerString:
  2050                           	opt stack 0
  2051                           
  2052                           ; 32 bytes @ 0x18
  2053  000118                     	ds	10
  2054  000122                     packaging@msg3:
  2055                           	opt stack 0
  2056                           
  2057                           ; 50 bytes @ 0x22
  2058  000122                     	ds	22
  2059  000138                     inputEntry@compartmentLabel:
  2060                           	opt stack 0
  2061                           
  2062                           ; 2 bytes @ 0x38
  2063  000138                     	ds	2
  2064  00013A                     inputEntry@compartmentsToFill:
  2065                           	opt stack 0
  2066                           
  2067                           ; 1 bytes @ 0x3A
  2068  00013A                     	ds	1
  2069  00013B                     inputEntry@done:
  2070                           	opt stack 0
  2071                           
  2072                           ; 2 bytes @ 0x3B
  2073  00013B                     	ds	2
  2074  00013D                     inputEntry@found:
  2075                           	opt stack 0
  2076                           
  2077                           ; 2 bytes @ 0x3D
  2078  00013D                     	ds	2
  2079  00013F                     inputEntry@setIsGood:
  2080                           	opt stack 0
  2081                           
  2082                           ; 2 bytes @ 0x3F
  2083  00013F                     	ds	2
  2084  000141                     inputEntry@doneMultiples:
  2085                           	opt stack 0
  2086                           
  2087                           ; 2 bytes @ 0x41
  2088  000141                     	ds	2
  2089  000143                     inputEntry@doneCompartment:
  2090                           	opt stack 0
  2091                           
  2092                           ; 2 bytes @ 0x43
  2093  000143                     	ds	2
  2094  000145                     inputEntry@sum:
  2095                           	opt stack 0
  2096                           
  2097                           ; 2 bytes @ 0x45
  2098  000145                     	ds	2
  2099  000147                     inputEntry@numB:
  2100                           	opt stack 0
  2101                           
  2102                           ; 2 bytes @ 0x47
  2103  000147                     	ds	2
  2104  000149                     inputEntry@numN:
  2105                           	opt stack 0
  2106                           
  2107                           ; 2 bytes @ 0x49
  2108  000149                     	ds	2
  2109  00014B                     inputEntry@numS:
  2110                           	opt stack 0
  2111                           
  2112                           ; 2 bytes @ 0x4B
  2113  00014B                     	ds	2
  2114  00014D                     inputEntry@numW:
  2115                           	opt stack 0
  2116                           
  2117                           ; 2 bytes @ 0x4D
  2118  00014D                     	ds	2
  2119  00014F                     inputEntry@inputEntryStep:
  2120                           	opt stack 0
  2121                           
  2122                           ; 2 bytes @ 0x4F
  2123  00014F                     	ds	2
  2124  000151                     inputEntry@numPressed:
  2125                           	opt stack 0
  2126                           
  2127                           ; 2 bytes @ 0x51
  2128  000151                     	ds	2
  2129  000153                     inputEntry@compartmentNum:
  2130                           	opt stack 0
  2131                           
  2132                           ; 2 bytes @ 0x53
  2133  000153                     	ds	1
  2134  000154                     packaging@msg2:
  2135                           	opt stack 0
  2136                           
  2137                           ; 32 bytes @ 0x54
  2138  000154                     	ds	1
  2139  000155                     inputEntry@i:
  2140                           	opt stack 0
  2141                           
  2142                           ; 2 bytes @ 0x55
  2143  000155                     	ds	2
  2144  000157                     inputEntry@pressed:
  2145                           	opt stack 0
  2146                           
  2147                           ; 1 bytes @ 0x57
  2148  000157                     	ds	29
  2149  000174                     packaging@instr:
  2150                           	opt stack 0
  2151                           
  2152                           ; 2 bytes @ 0x74
  2153  000174                     	ds	2
  2154  000176                     packaging@instr_324:
  2155                           	opt stack 0
  2156                           
  2157                           ; 2 bytes @ 0x76
  2158  000176                     	ds	2
  2159  000178                     _packaging$2365:
  2160                           	opt stack 0
  2161                           
  2162                           ; 2 bytes @ 0x78
  2163  000178                     	ds	2
  2164  00017A                     _packaging$2366:
  2165                           	opt stack 0
  2166                           
  2167                           ; 2 bytes @ 0x7A
  2168  00017A                     	ds	2
  2169  00017C                     _packaging$2367:
  2170                           	opt stack 0
  2171                           
  2172                           ; 2 bytes @ 0x7C
  2173  00017C                     	ds	2
  2174  00017E                     _packaging$2368:
  2175                           	opt stack 0
  2176                           
  2177                           ; 2 bytes @ 0x7E
  2178  00017E                     	ds	2
  2179  000180                     packaging@set:
  2180                           	opt stack 0
  2181  000180                     viewLogs@msg:
  2182                           	opt stack 0
  2183                           
  2184                           ; 32 bytes @ 0x80
  2185  000180                     	ds	2
  2186  000182                     packaging@mult:
  2187                           	opt stack 0
  2188                           
  2189                           ; 2 bytes @ 0x82
  2190  000182                     	ds	2
  2191  000184                     packaging@compartmentNum:
  2192                           	opt stack 0
  2193                           
  2194                           ; 2 bytes @ 0x84
  2195  000184                     	ds	28
  2196  0001A0                     viewLogs@success:
  2197                           	opt stack 0
  2198                           
  2199                           ; 2 bytes @ 0xA0
  2200  0001A0                     	ds	2
  2201  0001A2                     viewLogs@j:
  2202                           	opt stack 0
  2203                           
  2204                           ; 2 bytes @ 0xA2
  2205  0001A2                     	ds	2
  2206  0001A4                     viewLogs@entry:
  2207                           	opt stack 0
  2208                           
  2209                           ; 2 bytes @ 0xA4
  2210  0001A4                     	ds	2
  2211  0001A6                     viewLogs@pressed:
  2212                           	opt stack 0
  2213                           
  2214                           ; 2 bytes @ 0xA6
  2215  0001A6                     	ds	2
  2216  0001A8                     viewLogs@i:
  2217                           	opt stack 0
  2218                           
  2219                           ; 2 bytes @ 0xA8
  2220  0001A8                     	ds	2
  2221  0001AA                     viewLogs@run:
  2222                           	opt stack 0
  2223                           
  2224                           ; 13 bytes @ 0xAA
  2225  0001AA                     	ds	13
  2226                           tblptru	equ	0xFF8
  2227                           tblptrh	equ	0xFF7
  2228                           tblptrl	equ	0xFF6
  2229                           tablat	equ	0xFF5
  2230                           postinc0	equ	0xFEE
  2231                           wreg	equ	0xFE8
  2232                           postdec1	equ	0xFE5
  2233                           fsr1l	equ	0xFE1
  2234                           
  2235                           	psect	cstackBANK0
  2236  000080                     __pcstackBANK0:
  2237                           	opt stack 0
  2238  000080                     ??_isdigit:
  2239  000080                     ??_I2C_Master_Wait:
  2240  000080                     ?___wmul:
  2241                           	opt stack 0
  2242  000080                     ?___lwdiv:
  2243                           	opt stack 0
  2244  000080                     ?_tock:
  2245                           	opt stack 0
  2246  000080                     ?___ftpack:
  2247                           	opt stack 0
  2248  000080                     ?___aldiv:
  2249                           	opt stack 0
  2250  000080                     ?___lldiv:
  2251                           	opt stack 0
  2252  000080                     lcdNibble@temp:
  2253                           	opt stack 0
  2254  000080                     pollKeypad@keypress:
  2255                           	opt stack 0
  2256  000080                     motorControl@dir:
  2257                           	opt stack 0
  2258  000080                     EEPROM_write@address:
  2259                           	opt stack 0
  2260  000080                     EEPROM_read@address:
  2261                           	opt stack 0
  2262  000080                     ___wmul@multiplier:
  2263                           	opt stack 0
  2264  000080                     ___lwdiv@dividend:
  2265                           	opt stack 0
  2266  000080                     ___ftpack@arg:
  2267                           	opt stack 0
  2268  000080                     ___aldiv@dividend:
  2269                           	opt stack 0
  2270  000080                     ___lldiv@dividend:
  2271                           	opt stack 0
  2272                           
  2273                           ; 4 bytes @ 0x0
  2274  000080                     	ds	1
  2275  000081                     I2C_Master_Read@ackBit:
  2276                           	opt stack 0
  2277  000081                     lcdNibble@data:
  2278                           	opt stack 0
  2279  000081                     motorControl@motor:
  2280                           	opt stack 0
  2281  000081                     _isdigit$1941:
  2282                           	opt stack 0
  2283  000081                     I2C_Master_Write@byteToWrite:
  2284                           	opt stack 0
  2285                           
  2286                           ; 2 bytes @ 0x1
  2287  000081                     	ds	1
  2288  000082                     ?_EEPROM_readLog:
  2289                           	opt stack 0
  2290  000082                     I2C_Master_Read@receivedByte:
  2291                           	opt stack 0
  2292  000082                     lcdInst@data:
  2293                           	opt stack 0
  2294  000082                     putch@data:
  2295                           	opt stack 0
  2296  000082                     EEPROM_write@data:
  2297                           	opt stack 0
  2298  000082                     isdigit@c:
  2299                           	opt stack 0
  2300  000082                     EEPROM_readLog@logNum:
  2301                           	opt stack 0
  2302  000082                     ___wmul@multiplicand:
  2303                           	opt stack 0
  2304  000082                     ___lwdiv@divisor:
  2305                           	opt stack 0
  2306                           
  2307                           ; 2 bytes @ 0x2
  2308  000082                     	ds	1
  2309  000083                     ??_initLCD:
  2310  000083                     lcd_shift_cursor@direction:
  2311                           	opt stack 0
  2312  000083                     ___ftpack@exp:
  2313                           	opt stack 0
  2314  000083                     I2C_Send@data:
  2315                           	opt stack 0
  2316  000083                     RTC_getTime@time:
  2317                           	opt stack 0
  2318  000083                     EEPROM_logOperation@data:
  2319                           	opt stack 0
  2320                           
  2321                           ; 2 bytes @ 0x3
  2322  000083                     	ds	1
  2323  000084                     lcd_shift_cursor@numChars:
  2324                           	opt stack 0
  2325  000084                     ___ftpack@sign:
  2326                           	opt stack 0
  2327  000084                     ___lwdiv@counter:
  2328                           	opt stack 0
  2329  000084                     EEPROM_readLog@data:
  2330                           	opt stack 0
  2331  000084                     ___wmul@product:
  2332                           	opt stack 0
  2333  000084                     ___aldiv@divisor:
  2334                           	opt stack 0
  2335  000084                     ___lldiv@divisor:
  2336                           	opt stack 0
  2337                           
  2338                           ; 4 bytes @ 0x4
  2339  000084                     	ds	1
  2340  000085                     ??_I2C_Send:
  2341  000085                     ??_EEPROM_logOperation:
  2342  000085                     ??___ftpack:
  2343  000085                     lcd_shift_cursor@n:
  2344                           	opt stack 0
  2345  000085                     RTC_getTime@i:
  2346                           	opt stack 0
  2347  000085                     ___lwdiv@quotient:
  2348                           	opt stack 0
  2349                           
  2350                           ; 2 bytes @ 0x5
  2351  000085                     	ds	1
  2352  000086                     ??_EEPROM_readLog:
  2353  000086                     ??_RTC_startOperation:
  2354  000086                     ?_RTC_getOperatingTime:
  2355                           	opt stack 0
  2356  000086                     lcd_set_cursor@y:
  2357                           	opt stack 0
  2358  000086                     printStringLCD@string:
  2359                           	opt stack 0
  2360  000086                     strcpy@to:
  2361                           	opt stack 0
  2362                           
  2363                           ; 2 bytes @ 0x6
  2364  000086                     	ds	1
  2365  000087                     ??_lcd_set_cursor:
  2366  000087                     ?___lwmod:
  2367                           	opt stack 0
  2368  000087                     ___lwmod@dividend:
  2369                           	opt stack 0
  2370                           
  2371                           ; 2 bytes @ 0x7
  2372  000087                     	ds	1
  2373  000088                     ??_printStringLCD:
  2374  000088                     ??_RTC_getOperatingTime:
  2375  000088                     ?___ftadd:
  2376                           	opt stack 0
  2377  000088                     lcd_set_cursor@i:
  2378                           	opt stack 0
  2379  000088                     I2C_Send@address:
  2380                           	opt stack 0
  2381  000088                     ___aldiv@counter:
  2382                           	opt stack 0
  2383  000088                     strcpy@from:
  2384                           	opt stack 0
  2385  000088                     ___ftadd@f1:
  2386                           	opt stack 0
  2387  000088                     ___lldiv@quotient:
  2388                           	opt stack 0
  2389  000088                     RTC_startOperation@time:
  2390                           	opt stack 0
  2391                           
  2392                           ; 7 bytes @ 0x8
  2393  000088                     	ds	1
  2394  000089                     lcd_set_cursor@x:
  2395                           	opt stack 0
  2396  000089                     EEPROM_logOperation@line0:
  2397                           	opt stack 0
  2398  000089                     EEPROM_readLog@line0:
  2399                           	opt stack 0
  2400  000089                     ___aldiv@sign:
  2401                           	opt stack 0
  2402  000089                     I2C_Send@i:
  2403                           	opt stack 0
  2404  000089                     ___lwmod@divisor:
  2405                           	opt stack 0
  2406                           
  2407                           ; 2 bytes @ 0x9
  2408  000089                     	ds	1
  2409  00008A                     EEPROM_logOperation@line1:
  2410                           	opt stack 0
  2411  00008A                     EEPROM_readLog@line2:
  2412                           	opt stack 0
  2413  00008A                     strcpy@cp:
  2414                           	opt stack 0
  2415  00008A                     ___aldiv@quotient:
  2416                           	opt stack 0
  2417  00008A                     RTC_getOperatingTime@time:
  2418                           	opt stack 0
  2419                           
  2420                           ; 7 bytes @ 0xA
  2421  00008A                     	ds	1
  2422  00008B                     EEPROM_logOperation@line2:
  2423                           	opt stack 0
  2424  00008B                     EEPROM_readLog@line3:
  2425                           	opt stack 0
  2426  00008B                     ___lwmod@counter:
  2427                           	opt stack 0
  2428  00008B                     printStringLCD@j:
  2429                           	opt stack 0
  2430  00008B                     ___ftadd@f2:
  2431                           	opt stack 0
  2432                           
  2433                           ; 3 bytes @ 0xB
  2434  00008B                     	ds	1
  2435  00008C                     ?__doprnt:
  2436                           	opt stack 0
  2437  00008C                     EEPROM_logOperation@line3:
  2438                           	opt stack 0
  2439  00008C                     EEPROM_readLog@line4:
  2440                           	opt stack 0
  2441  00008C                     ___lldiv@counter:
  2442                           	opt stack 0
  2443  00008C                     __doprnt@pb:
  2444                           	opt stack 0
  2445                           
  2446                           ; 2 bytes @ 0xC
  2447  00008C                     	ds	1
  2448  00008D                     EEPROM_logOperation@line4:
  2449                           	opt stack 0
  2450  00008D                     EEPROM_readLog@line6:
  2451                           	opt stack 0
  2452  00008D                     printStringLCD@spaceIndex:
  2453                           	opt stack 0
  2454  00008D                     I2C_Master_Init@clockFreq:
  2455                           	opt stack 0
  2456                           
  2457                           ; 4 bytes @ 0xD
  2458  00008D                     	ds	1
  2459  00008E                     ??___ftadd:
  2460  00008E                     EEPROM_logOperation@line5:
  2461                           	opt stack 0
  2462  00008E                     EEPROM_readLog@line7:
  2463                           	opt stack 0
  2464  00008E                     __doprnt@f:
  2465                           	opt stack 0
  2466                           
  2467                           ; 2 bytes @ 0xE
  2468  00008E                     	ds	1
  2469  00008F                     EEPROM_logOperation@line6:
  2470                           	opt stack 0
  2471  00008F                     EEPROM_readLog@line1:
  2472                           	opt stack 0
  2473  00008F                     printStringLCD@newlineIndex:
  2474                           	opt stack 0
  2475                           
  2476                           ; 2 bytes @ 0xF
  2477  00008F                     	ds	1
  2478  000090                     EEPROM_logOperation@line7:
  2479                           	opt stack 0
  2480  000090                     EEPROM_readLog@line5:
  2481                           	opt stack 0
  2482  000090                     __doprnt@ap:
  2483                           	opt stack 0
  2484                           
  2485                           ; 2 bytes @ 0x10
  2486  000090                     	ds	1
  2487  000091                     ??_I2C_Master_Init:
  2488  000091                     ___ftadd@sign:
  2489                           	opt stack 0
  2490  000091                     printStringLCD@newlineCharIndex:
  2491                           	opt stack 0
  2492  000091                     RTC_getOperatingTime@res:
  2493                           	opt stack 0
  2494  000091                     EEPROM_logOperation@address:
  2495                           	opt stack 0
  2496  000091                     EEPROM_readLog@address:
  2497                           	opt stack 0
  2498                           
  2499                           ; 2 bytes @ 0x11
  2500  000091                     	ds	1
  2501  000092                     ??__doprnt:
  2502  000092                     ___ftadd@exp2:
  2503                           	opt stack 0
  2504                           
  2505                           ; 1 bytes @ 0x12
  2506  000092                     	ds	1
  2507  000093                     ___ftadd@exp1:
  2508                           	opt stack 0
  2509  000093                     printStringLCD@i:
  2510                           	opt stack 0
  2511  000093                     RTC_getOperatingTime@operatingTimeLocal:
  2512                           	opt stack 0
  2513                           
  2514                           ; 6 bytes @ 0x13
  2515  000093                     	ds	1
  2516  000094                     ___ftge@ff1:
  2517                           	opt stack 0
  2518                           
  2519                           ; 3 bytes @ 0x14
  2520  000094                     	ds	1
  2521  000095                     ??_hibernate:
  2522  000095                     printErrorLCD@string:
  2523                           	opt stack 0
  2524                           
  2525                           ; 2 bytes @ 0x15
  2526  000095                     	ds	1
  2527  000096                     __doprnt@prec:
  2528                           	opt stack 0
  2529                           
  2530                           ; 1 bytes @ 0x16
  2531  000096                     	ds	1
  2532  000097                     ??_printErrorLCD:
  2533  000097                     __doprnt@len:
  2534                           	opt stack 0
  2535  000097                     ___ftge@ff2:
  2536                           	opt stack 0
  2537                           
  2538                           ; 3 bytes @ 0x17
  2539  000097                     	ds	2
  2540  000099                     ??_inputEntry:
  2541  000099                     hibernate@pressed:
  2542                           	opt stack 0
  2543  000099                     __doprnt@val:
  2544                           	opt stack 0
  2545                           
  2546                           ; 2 bytes @ 0x19
  2547  000099                     	ds	1
  2548  00009A                     ??___ftge:
  2549                           
  2550                           ; 1 bytes @ 0x1A
  2551  00009A                     	ds	1
  2552  00009B                     __doprnt@cp:
  2553                           	opt stack 0
  2554                           
  2555                           ; 2 bytes @ 0x1B
  2556  00009B                     	ds	2
  2557  00009D                     ??_clearing:
  2558  00009D                     packageCompartment@n:
  2559                           	opt stack 0
  2560  00009D                     __doprnt@flag:
  2561                           	opt stack 0
  2562                           
  2563                           ; 1 bytes @ 0x1D
  2564  00009D                     	ds	1
  2565  00009E                     packageCompartment@s:
  2566                           	opt stack 0
  2567  00009E                     __doprnt@width:
  2568                           	opt stack 0
  2569                           
  2570                           ; 2 bytes @ 0x1E
  2571  00009E                     	ds	1
  2572  00009F                     packageCompartment@w:
  2573                           	opt stack 0
  2574  00009F                     clearing@instr:
  2575                           	opt stack 0
  2576                           
  2577                           ; 2 bytes @ 0x1F
  2578  00009F                     	ds	1
  2579  0000A0                     ??_packageCompartment:
  2580  0000A0                     __doprnt@c:
  2581                           	opt stack 0
  2582                           
  2583                           ; 1 bytes @ 0x20
  2584  0000A0                     	ds	1
  2585  0000A1                     ?_sprintf:
  2586                           	opt stack 0
  2587  0000A1                     ?_printf:
  2588                           	opt stack 0
  2589  0000A1                     printf@f:
  2590                           	opt stack 0
  2591  0000A1                     sprintf@wh:
  2592                           	opt stack 0
  2593  0000A1                     clearing@spinTime:
  2594                           	opt stack 0
  2595                           
  2596                           ; 3 bytes @ 0x21
  2597  0000A1                     	ds	2
  2598  0000A3                     packageCompartment@instr:
  2599                           	opt stack 0
  2600  0000A3                     sprintf@f:
  2601                           	opt stack 0
  2602                           
  2603                           ; 2 bytes @ 0x23
  2604  0000A3                     	ds	1
  2605  0000A4                     clearing@debounceTime:
  2606                           	opt stack 0
  2607                           
  2608                           ; 3 bytes @ 0x24
  2609  0000A4                     	ds	1
  2610  0000A5                     packageCompartment@b:
  2611                           	opt stack 0
  2612  0000A5                     printf@ap:
  2613                           	opt stack 0
  2614                           
  2615                           ; 2 bytes @ 0x25
  2616  0000A5                     	ds	1
  2617  0000A6                     packageCompartment@timeB:
  2618                           	opt stack 0
  2619                           
  2620                           ; 3 bytes @ 0x26
  2621  0000A6                     	ds	1
  2622  0000A7                     clearing@currTime:
  2623                           	opt stack 0
  2624  0000A7                     printf@pb:
  2625                           	opt stack 0
  2626                           
  2627                           ; 4 bytes @ 0x27
  2628  0000A7                     	ds	2
  2629  0000A9                     packageCompartment@timeN:
  2630                           	opt stack 0
  2631                           
  2632                           ; 3 bytes @ 0x29
  2633  0000A9                     	ds	3
  2634  0000AC                     packageCompartment@timeS:
  2635                           	opt stack 0
  2636                           
  2637                           ; 3 bytes @ 0x2C
  2638  0000AC                     	ds	1
  2639  0000AD                     sprintf@ap:
  2640                           	opt stack 0
  2641                           
  2642                           ; 2 bytes @ 0x2D
  2643  0000AD                     	ds	2
  2644  0000AF                     packageCompartment@timeW:
  2645                           	opt stack 0
  2646  0000AF                     sprintf@pb:
  2647                           	opt stack 0
  2648                           
  2649                           ; 4 bytes @ 0x2F
  2650  0000AF                     	ds	3
  2651  0000B2                     packageCompartment@numB:
  2652                           	opt stack 0
  2653                           
  2654                           ; 2 bytes @ 0x32
  2655  0000B2                     	ds	1
  2656  0000B3                     ??_viewLogs:
  2657                           
  2658                           ; 1 bytes @ 0x33
  2659  0000B3                     	ds	1
  2660  0000B4                     packageCompartment@numN:
  2661                           	opt stack 0
  2662                           
  2663                           ; 2 bytes @ 0x34
  2664  0000B4                     	ds	2
  2665  0000B6                     packageCompartment@numS:
  2666                           	opt stack 0
  2667                           
  2668                           ; 2 bytes @ 0x36
  2669  0000B6                     	ds	2
  2670  0000B8                     packageCompartment@numW:
  2671                           	opt stack 0
  2672                           
  2673                           ; 2 bytes @ 0x38
  2674  0000B8                     	ds	2
  2675  0000BA                     packageCompartment@doneB:
  2676                           	opt stack 0
  2677                           
  2678                           ; 2 bytes @ 0x3A
  2679  0000BA                     	ds	2
  2680  0000BC                     packageCompartment@doneN:
  2681                           	opt stack 0
  2682                           
  2683                           ; 2 bytes @ 0x3C
  2684  0000BC                     	ds	2
  2685  0000BE                     packageCompartment@doneS:
  2686                           	opt stack 0
  2687                           
  2688                           ; 2 bytes @ 0x3E
  2689  0000BE                     	ds	2
  2690  0000C0                     packageCompartment@doneW:
  2691                           	opt stack 0
  2692                           
  2693                           ; 2 bytes @ 0x40
  2694  0000C0                     	ds	2
  2695  0000C2                     packageCompartment@currTime:
  2696                           	opt stack 0
  2697                           
  2698                           ; 3 bytes @ 0x42
  2699  0000C2                     	ds	3
  2700  0000C5                     ??_packaging:
  2701                           
  2702                           ; 1 bytes @ 0x45
  2703  0000C5                     	ds	6
  2704  0000CB                     ??_mainMenu:
  2705                           
  2706                           ; 1 bytes @ 0x4B
  2707  0000CB                     	ds	9
  2708  0000D4                     ??_main:
  2709                           
  2710                           ; 1 bytes @ 0x54
  2711  0000D4                     	ds	1
  2712                           tblptru	equ	0xFF8
  2713                           tblptrh	equ	0xFF7
  2714                           tblptrl	equ	0xFF6
  2715                           tablat	equ	0xFF5
  2716                           postinc0	equ	0xFEE
  2717                           wreg	equ	0xFE8
  2718                           postdec1	equ	0xFE5
  2719                           fsr1l	equ	0xFE1
  2720                           
  2721                           	psect	cstackCOMRAM
  2722  000001                     __pcstackCOMRAM:
  2723                           	opt stack 0
  2724  000001                     ?i2___ftpack:
  2725                           	opt stack 0
  2726  000001                     inverseDir@dir:
  2727                           	opt stack 0
  2728  000001                     i2___ftpack@arg:
  2729                           	opt stack 0
  2730                           
  2731                           ; 3 bytes @ 0x0
  2732  000001                     	ds	1
  2733  000002                     i2motorControl@dir:
  2734                           	opt stack 0
  2735                           
  2736                           ; 1 bytes @ 0x1
  2737  000002                     	ds	1
  2738  000003                     i2motorControl@motor:
  2739                           	opt stack 0
  2740                           
  2741                           ; 1 bytes @ 0x2
  2742  000003                     	ds	1
  2743  000004                     i2___ftpack@exp:
  2744                           	opt stack 0
  2745                           
  2746                           ; 1 bytes @ 0x3
  2747  000004                     	ds	1
  2748  000005                     i2___ftpack@sign:
  2749                           	opt stack 0
  2750                           
  2751                           ; 1 bytes @ 0x4
  2752  000005                     	ds	1
  2753  000006                     ??i2___ftpack:
  2754                           
  2755                           ; 1 bytes @ 0x5
  2756  000006                     	ds	3
  2757  000009                     ?i2___ftadd:
  2758                           	opt stack 0
  2759  000009                     i2___ftadd@f1:
  2760                           	opt stack 0
  2761                           
  2762                           ; 3 bytes @ 0x8
  2763  000009                     	ds	3
  2764  00000C                     i2___ftadd@f2:
  2765                           	opt stack 0
  2766                           
  2767                           ; 3 bytes @ 0xB
  2768  00000C                     	ds	3
  2769  00000F                     ??i2___ftadd:
  2770                           
  2771                           ; 1 bytes @ 0xE
  2772  00000F                     	ds	3
  2773  000012                     i2___ftadd@sign:
  2774                           	opt stack 0
  2775                           
  2776                           ; 1 bytes @ 0x11
  2777  000012                     	ds	1
  2778  000013                     i2___ftadd@exp2:
  2779                           	opt stack 0
  2780                           
  2781                           ; 1 bytes @ 0x12
  2782  000013                     	ds	1
  2783  000014                     i2___ftadd@exp1:
  2784                           	opt stack 0
  2785                           
  2786                           ; 1 bytes @ 0x13
  2787  000014                     	ds	1
  2788  000015                     ??_tmr0_ISR:
  2789                           
  2790                           ; 1 bytes @ 0x14
  2791  000015                     	ds	5
  2792  00001A                     tmr0_ISR@motorControlTimerB:
  2793                           	opt stack 0
  2794                           
  2795                           ; 2 bytes @ 0x19
  2796  00001A                     	ds	2
  2797  00001C                     tmr0_ISR@motorControlTimerN:
  2798                           	opt stack 0
  2799                           
  2800                           ; 2 bytes @ 0x1B
  2801  00001C                     	ds	2
  2802  00001E                     tmr0_ISR@motorControlTimerS:
  2803                           	opt stack 0
  2804                           
  2805                           ; 2 bytes @ 0x1D
  2806  00001E                     	ds	2
  2807  000020                     tmr0_ISR@motorControlTimerW:
  2808                           	opt stack 0
  2809                           
  2810                           ; 2 bytes @ 0x1F
  2811  000020                     	ds	2
  2812  000022                     ??_interruptHandler:
  2813                           
  2814                           ; 1 bytes @ 0x21
  2815  000022                     	ds	18
  2816                           tblptru	equ	0xFF8
  2817                           tblptrh	equ	0xFF7
  2818                           tblptrl	equ	0xFF6
  2819                           tablat	equ	0xFF5
  2820                           postinc0	equ	0xFEE
  2821                           wreg	equ	0xFE8
  2822                           postdec1	equ	0xFE5
  2823                           fsr1l	equ	0xFE1
  2824                           
  2825 ;;
  2826 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2827 ;;
  2828 ;; *************** function _main *****************
  2829 ;; Defined at:
  2830 ;;		line 285 in file "main.c"
  2831 ;; Parameters:    Size  Location     Type
  2832 ;;		None
  2833 ;; Auto vars:     Size  Location     Type
  2834 ;;		None
  2835 ;; Return value:  Size  Location     Type
  2836 ;;                  1    wreg      void 
  2837 ;; Registers used:
  2838 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2839 ;; Tracked objects:
  2840 ;;		On entry : 0/0
  2841 ;;		On exit  : 0/0
  2842 ;;		Unchanged: 0/0
  2843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2846 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2847 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2848 ;;Total ram usage:        1 bytes
  2849 ;; Hardware stack levels required when called:   10
  2850 ;; This function calls:
  2851 ;;		_I2C_Master_Init
  2852 ;;		_hibernate
  2853 ;;		_initLCD
  2854 ;;		_lcdInst
  2855 ;;		_mainMenu
  2856 ;;		_motorControl
  2857 ;;		_tmr0Init
  2858 ;; This function is called by:
  2859 ;;		Startup code after reset
  2860 ;; This function uses a non-reentrant model
  2861 ;;
  2862                           
  2863                           	psect	text0
  2864  0035A0                     __ptext0:
  2865                           	opt stack 0
  2866  0035A0                     _main:
  2867                           	opt stack 21
  2868                           
  2869                           ;main.c: 290: LATA = 0x00;
  2870                           
  2871                           ;incstack = 0
  2872  0035A0  0E00               	movlw	0
  2873  0035A2  6E89               	movwf	3977,c	;volatile
  2874                           
  2875                           ;main.c: 291: LATB = 0x00;
  2876  0035A4  0E00               	movlw	0
  2877  0035A6  6E8A               	movwf	3978,c	;volatile
  2878                           
  2879                           ;main.c: 292: LATC = 0x00;
  2880  0035A8  0E00               	movlw	0
  2881  0035AA  6E8B               	movwf	3979,c	;volatile
  2882                           
  2883                           ;main.c: 293: LATD = 0x00;
  2884  0035AC  0E00               	movlw	0
  2885  0035AE  6E8C               	movwf	3980,c	;volatile
  2886                           
  2887                           ;main.c: 294: LATE = 0x00;
  2888  0035B0  0E00               	movlw	0
  2889  0035B2  6E8D               	movwf	3981,c	;volatile
  2890                           
  2891                           ;main.c: 297: TRISA = 0xFF;
  2892  0035B4  6892               	setf	3986,c	;volatile
  2893                           
  2894                           ;main.c: 298: TRISB = 0b11110111;
  2895  0035B6  0EF7               	movlw	247
  2896  0035B8  6E93               	movwf	3987,c	;volatile
  2897                           
  2898                           ;main.c: 299: TRISC = 0x00;
  2899  0035BA  0E00               	movlw	0
  2900  0035BC  6E94               	movwf	3988,c	;volatile
  2901                           
  2902                           ;main.c: 300: TRISD = 0x00;
  2903  0035BE  0E00               	movlw	0
  2904  0035C0  6E95               	movwf	3989,c	;volatile
  2905                           
  2906                           ;main.c: 301: TRISE = 0x00;
  2907  0035C2  0E00               	movlw	0
  2908  0035C4  6E96               	movwf	3990,c	;volatile
  2909                           
  2910                           ;main.c: 303: ADCON0 = 0x00;
  2911  0035C6  0E00               	movlw	0
  2912  0035C8  6EC2               	movwf	4034,c	;volatile
  2913                           
  2914                           ;main.c: 304: ADCON1 = 0x0F;
  2915  0035CA  0E0F               	movlw	15
  2916  0035CC  6EC1               	movwf	4033,c	;volatile
  2917                           
  2918                           ;main.c: 307: I2C_Master_Init(100000);
  2919  0035CE  0EA0               	movlw	160
  2920  0035D0  0100               	movlb	0	; () banked
  2921  0035D2  6F8D               	movwf	I2C_Master_Init@clockFreq& (0+255),b
  2922  0035D4  0E86               	movlw	134
  2923  0035D6  6F8E               	movwf	(I2C_Master_Init@clockFreq+1)& (0+255),b
  2924  0035D8  0E01               	movlw	1
  2925  0035DA  6F8F               	movwf	(I2C_Master_Init@clockFreq+2)& (0+255),b
  2926  0035DC  0E00               	movlw	0
  2927  0035DE  6F90               	movwf	(I2C_Master_Init@clockFreq+3)& (0+255),b
  2928  0035E0  ECAB  F01D         	call	_I2C_Master_Init	;wreg free
  2929                           
  2930                           ;main.c: 308: tmr0Init();
  2931  0035E4  EC64  F01F         	call	_tmr0Init	;wreg free
  2932                           
  2933                           ;main.c: 309: initLCD();
  2934  0035E8  EC05  F01E         	call	_initLCD	;wreg free
  2935                           
  2936                           ;main.c: 311: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2937  0035EC  0E01               	movlw	1
  2938  0035EE  ECB1  F01F         	call	_lcdInst
  2939  0035F2  0EC3               	movlw	195
  2940  0035F4  0100               	movlb	0	; () banked
  2941  0035F6  6FD4               	movwf	??_main& (0+255),b
  2942  0035F8  0ECD               	movlw	205
  2943  0035FA                     u9747:
  2944  0035FA  2EE8               	decfsz	wreg,f,c
  2945  0035FC  D7FE               	bra	u9747
  2946  0035FE  2FD4               	decfsz	??_main& (0+255),f,b
  2947  003600  D7FC               	bra	u9747
  2948                           
  2949                           ;main.c: 312: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2950  003602  0E80               	movlw	128
  2951  003604  ECB1  F01F         	call	_lcdInst
  2952  003608  0E41               	movlw	65
  2953  00360A  0100               	movlb	0	; () banked
  2954  00360C  6FD4               	movwf	??_main& (0+255),b
  2955  00360E  0EEE               	movlw	238
  2956  003610                     u9757:
  2957  003610  2EE8               	decfsz	wreg,f,c
  2958  003612  D7FE               	bra	u9757
  2959  003614  2FD4               	decfsz	??_main& (0+255),f,b
  2960  003616  D7FC               	bra	u9757
  2961  003618  F000               	nop	
  2962                           
  2963                           ;main.c: 315: motorControl(BOLT, STOPMOTOR);
  2964  00361A  0E02               	movlw	2
  2965  00361C  0100               	movlb	0	; () banked
  2966  00361E  6F80               	movwf	motorControl@dir& (0+255),b
  2967  003620  0E00               	movlw	0
  2968  003622  ECB1  F019         	call	_motorControl
  2969                           
  2970                           ;main.c: 316: motorControl(NUT, STOPMOTOR);
  2971  003626  0E02               	movlw	2
  2972  003628  0100               	movlb	0	; () banked
  2973  00362A  6F80               	movwf	motorControl@dir& (0+255),b
  2974  00362C  0E01               	movlw	1
  2975  00362E  ECB1  F019         	call	_motorControl
  2976                           
  2977                           ;main.c: 317: motorControl(SPACER, STOPMOTOR);
  2978  003632  0E02               	movlw	2
  2979  003634  0100               	movlb	0	; () banked
  2980  003636  6F80               	movwf	motorControl@dir& (0+255),b
  2981  003638  0E02               	movlw	2
  2982  00363A  ECB1  F019         	call	_motorControl
  2983                           
  2984                           ;main.c: 318: motorControl(WASHER, STOPMOTOR);
  2985  00363E  0E02               	movlw	2
  2986  003640  0100               	movlb	0	; () banked
  2987  003642  6F80               	movwf	motorControl@dir& (0+255),b
  2988  003644  0E03               	movlw	3
  2989  003646  ECB1  F019         	call	_motorControl
  2990  00364A                     
  2991                           ;main.c: 321: hibernate();
  2992  00364A  EC93  F01E         	call	_hibernate	;wreg free
  2993                           
  2994                           ;main.c: 322: mainMenu();
  2995  00364E  ECA9  F009         	call	_mainMenu	;wreg free
  2996  003652  D7FB               	goto	l194
  2997  003654                     __end_of_main:
  2998                           	opt stack 0
  2999                           tblptru	equ	0xFF8
  3000                           tblptrh	equ	0xFF7
  3001                           tblptrl	equ	0xFF6
  3002                           tablat	equ	0xFF5
  3003                           postinc0	equ	0xFEE
  3004                           wreg	equ	0xFE8
  3005                           postdec1	equ	0xFE5
  3006                           fsr1l	equ	0xFE1
  3007                           
  3008 ;; *************** function _tmr0Init *****************
  3009 ;; Defined at:
  3010 ;;		line 32 in file "timer.c"
  3011 ;; Parameters:    Size  Location     Type
  3012 ;;		None
  3013 ;; Auto vars:     Size  Location     Type
  3014 ;;		None
  3015 ;; Return value:  Size  Location     Type
  3016 ;;                  1    wreg      void 
  3017 ;; Registers used:
  3018 ;;		wreg, status,2
  3019 ;; Tracked objects:
  3020 ;;		On entry : 0/0
  3021 ;;		On exit  : 0/0
  3022 ;;		Unchanged: 0/0
  3023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3027 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3028 ;;Total ram usage:        0 bytes
  3029 ;; Hardware stack levels used:    1
  3030 ;; Hardware stack levels required when called:    4
  3031 ;; This function calls:
  3032 ;;		Nothing
  3033 ;; This function is called by:
  3034 ;;		_main
  3035 ;;		_Timer_startOperation
  3036 ;; This function uses a non-reentrant model
  3037 ;;
  3038                           
  3039                           	psect	text1
  3040  003EC8                     __ptext1:
  3041                           	opt stack 0
  3042  003EC8                     _tmr0Init:
  3043                           	opt stack 26
  3044                           
  3045                           ;timer.c: 41: if (!timerInit) {
  3046                           
  3047                           ;incstack = 0
  3048  003EC8  504E               	movf	_timerInit,w,c
  3049  003ECA  A4D8               	btfss	status,2,c
  3050  003ECC  0012               	return	
  3051                           
  3052                           ;timer.c: 42: T0CONbits.T08BIT = 0;
  3053  003ECE  9CD5               	bcf	4053,6,c	;volatile
  3054                           
  3055                           ;timer.c: 43: T0CONbits.T0CS = 0;
  3056  003ED0  9AD5               	bcf	4053,5,c	;volatile
  3057                           
  3058                           ;timer.c: 44: T0CONbits.PSA = 0;
  3059  003ED2  96D5               	bcf	4053,3,c	;volatile
  3060                           
  3061                           ;timer.c: 47: T0CONbits.T0PS2 = 1;
  3062  003ED4  84D5               	bsf	4053,2,c	;volatile
  3063                           
  3064                           ;timer.c: 48: T0CONbits.T0PS1 = 1;
  3065  003ED6  82D5               	bsf	4053,1,c	;volatile
  3066                           
  3067                           ;timer.c: 49: T0CONbits.T0PS0 = 1;
  3068  003ED8  80D5               	bsf	4053,0,c	;volatile
  3069                           
  3070                           ;timer.c: 52: TMR0H = 0xF9;
  3071  003EDA  0EF9               	movlw	249
  3072  003EDC  6ED7               	movwf	4055,c	;volatile
  3073                           
  3074                           ;timer.c: 53: TMR0L = 0x5F;
  3075  003EDE  0E5F               	movlw	95
  3076  003EE0  6ED6               	movwf	4054,c	;volatile
  3077                           
  3078                           ;timer.c: 54: T0CONbits.TMR0ON = 1;
  3079  003EE2  8ED5               	bsf	4053,7,c	;volatile
  3080                           
  3081                           ;timer.c: 55: TMR0IE = 1;
  3082  003EE4  8AF2               	bsf	intcon,5,c	;volatile
  3083                           
  3084                           ;timer.c: 58: (INTCONbits.GIE = 1);
  3085  003EE6  8EF2               	bsf	intcon,7,c	;volatile
  3086  003EE8  0012               	return	
  3087  003EEA                     __end_of_tmr0Init:
  3088                           	opt stack 0
  3089                           tblptru	equ	0xFF8
  3090                           tblptrh	equ	0xFF7
  3091                           tblptrl	equ	0xFF6
  3092                           tablat	equ	0xFF5
  3093                           intcon	equ	0xFF2
  3094                           postinc0	equ	0xFEE
  3095                           wreg	equ	0xFE8
  3096                           postdec1	equ	0xFE5
  3097                           fsr1l	equ	0xFE1
  3098                           status	equ	0xFD8
  3099                           
  3100 ;; *************** function _mainMenu *****************
  3101 ;; Defined at:
  3102 ;;		line 207 in file "menu.c"
  3103 ;; Parameters:    Size  Location     Type
  3104 ;;		None
  3105 ;; Auto vars:     Size  Location     Type
  3106 ;;  run            13  153[BANK2 ] struct operationInfo
  3107 ;;  time            7  128[BANK2 ] unsigned char [7]
  3108 ;;  msg            32   96[BANK2 ] unsigned char [32]
  3109 ;;  summaries      96    0[BANK2 ] unsigned char [32][3]
  3110 ;;  operationTim    4  138[BANK2 ] long 
  3111 ;;  i               2  151[BANK2 ] int 
  3112 ;;  operationMin    2  146[BANK2 ] int 
  3113 ;;  operationSec    2  144[BANK2 ] int 
  3114 ;;  startPress      2  136[BANK2 ] int 
  3115 ;;  pressed         1  150[BANK2 ] unsigned char 
  3116 ;;  savedToEEPRO    1  135[BANK2 ] unsigned char 
  3117 ;;  pressed         2  148[BANK2 ] int 
  3118 ;;  needToPrint     2  142[BANK2 ] int 
  3119 ;; Return value:  Size  Location     Type
  3120 ;;                  1    wreg      void 
  3121 ;; Registers used:
  3122 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3123 ;; Tracked objects:
  3124 ;;		On entry : 0/0
  3125 ;;		On exit  : 0/0
  3126 ;;		Unchanged: 0/0
  3127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3129 ;;      Locals:         0       0       0     166       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3130 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3131 ;;      Totals:         0       9       0     166       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3132 ;;Total ram usage:      175 bytes
  3133 ;; Hardware stack levels used:    1
  3134 ;; Hardware stack levels required when called:    9
  3135 ;; This function calls:
  3136 ;;		_EEPROM_logOperation
  3137 ;;		_I2C_Send
  3138 ;;		_RTC_getOperatingTime
  3139 ;;		_RTC_getTime
  3140 ;;		_RTC_startOperation
  3141 ;;		___aldiv
  3142 ;;		___wmul
  3143 ;;		_clearing
  3144 ;;		_hibernate
  3145 ;;		_inputEntry
  3146 ;;		_packaging
  3147 ;;		_pollKeypad
  3148 ;;		_printStringLCD
  3149 ;;		_putch
  3150 ;;		_sprintf
  3151 ;;		_viewLogs
  3152 ;; This function is called by:
  3153 ;;		_main
  3154 ;; This function uses a non-reentrant model
  3155 ;;
  3156                           
  3157                           	psect	text2
  3158  001352                     __ptext2:
  3159                           	opt stack 0
  3160  001352                     _mainMenu:
  3161                           	opt stack 21
  3162                           
  3163                           ;menu.c: 208: int pressed;
  3164                           ;menu.c: 209: int needToPrint = 1;
  3165                           
  3166                           ;incstack = 0
  3167  001352  0E00               	movlw	0
  3168  001354  0102               	movlb	2	; () banked
  3169  001356  6F8F               	movwf	(mainMenu@needToPrint+1)& (0+255),b
  3170  001358  0E01               	movlw	1
  3171  00135A  6F8E               	movwf	mainMenu@needToPrint& (0+255),b
  3172  00135C                     
  3173                           ;menu.c: 212: if (needToPrint) {
  3174                           
  3175                           ; BSR set to: 2
  3176  00135C  0102               	movlb	2	; () banked
  3177  00135E  518E               	movf	mainMenu@needToPrint& (0+255),w,b
  3178  001360  118F               	iorwf	(mainMenu@needToPrint+1)& (0+255),w,b
  3179  001362  B4D8               	btfsc	status,2,c
  3180  001364  D00C               	goto	l471
  3181                           
  3182                           ; BSR set to: 2
  3183                           ;menu.c: 213: printStringLCD("0:Sleep 1:Begin \n2: View Logs");
  3184  001366  0EC7               	movlw	low STR_25
  3185  001368  0100               	movlb	0	; () banked
  3186  00136A  6F86               	movwf	printStringLCD@string& (0+255),b
  3187  00136C  0EFD               	movlw	high STR_25
  3188  00136E  6F87               	movwf	(printStringLCD@string+1)& (0+255),b
  3189  001370  ECBD  F011         	call	_printStringLCD	;wreg free
  3190                           
  3191                           ;menu.c: 214: needToPrint = 0;
  3192  001374  0E00               	movlw	0
  3193  001376  0102               	movlb	2	; () banked
  3194  001378  6F8F               	movwf	(mainMenu@needToPrint+1)& (0+255),b
  3195  00137A  0E00               	movlw	0
  3196  00137C  6F8E               	movwf	mainMenu@needToPrint& (0+255),b
  3197  00137E                     l471:
  3198                           
  3199                           ; BSR set to: 2
  3200                           ;menu.c: 215: }
  3201                           ;menu.c: 216: pressed = pollKeypad();
  3202                           
  3203                           ; BSR set to: 2
  3204  00137E  ECE8  F01E         	call	_pollKeypad	;wreg free
  3205  001382  0100               	movlb	0	; () banked
  3206  001384  6FCB               	movwf	??_mainMenu& (0+255),b
  3207  001386  51CB               	movf	??_mainMenu& (0+255),w,b
  3208  001388  0102               	movlb	2	; () banked
  3209  00138A  6F94               	movwf	mainMenu@pressed& (0+255),b
  3210  00138C  6B95               	clrf	(mainMenu@pressed+1)& (0+255),b
  3211                           
  3212                           ; BSR set to: 2
  3213                           ;menu.c: 217: putch(pressed);
  3214  00138E  5194               	movf	mainMenu@pressed& (0+255),w,b
  3215  001390  ECA5  F01F         	call	_putch
  3216                           
  3217                           ;menu.c: 218: if (pressed - 48 == 0) {
  3218  001394  0ED0               	movlw	208
  3219  001396  0100               	movlb	0	; () banked
  3220  001398  6FCB               	movwf	??_mainMenu& (0+255),b
  3221  00139A  0EFF               	movlw	255
  3222  00139C  6FCC               	movwf	(??_mainMenu+1)& (0+255),b
  3223  00139E  C294  F0CD         	movff	mainMenu@pressed,??_mainMenu+2
  3224  0013A2  C295  F0CE         	movff	mainMenu@pressed+1,??_mainMenu+3
  3225  0013A6  51CB               	movf	??_mainMenu& (0+255),w,b
  3226  0013A8  27CD               	addwf	(??_mainMenu+2)& (0+255),f,b
  3227  0013AA  51CC               	movf	(??_mainMenu+1)& (0+255),w,b
  3228  0013AC  23CE               	addwfc	(??_mainMenu+3)& (0+255),f,b
  3229  0013AE  51CD               	movf	(??_mainMenu+2)& (0+255),w,b
  3230  0013B0  11CE               	iorwf	(??_mainMenu+3)& (0+255),w,b
  3231  0013B2  A4D8               	btfss	status,2,c
  3232  0013B4  D003               	goto	l472
  3233                           
  3234                           ; BSR set to: 0
  3235                           ;menu.c: 219: hibernate();
  3236  0013B6  EC93  F01E         	call	_hibernate	;wreg free
  3237  0013BA  D7CB               	goto	_mainMenu
  3238  0013BC                     l472:
  3239                           
  3240                           ; BSR set to: 2
  3241  0013BC  0ED0               	movlw	208
  3242  0013BE  0100               	movlb	0	; () banked
  3243  0013C0  6FCB               	movwf	??_mainMenu& (0+255),b
  3244  0013C2  0EFF               	movlw	255
  3245  0013C4  6FCC               	movwf	(??_mainMenu+1)& (0+255),b
  3246  0013C6  C294  F0CD         	movff	mainMenu@pressed,??_mainMenu+2
  3247  0013CA  C295  F0CE         	movff	mainMenu@pressed+1,??_mainMenu+3
  3248  0013CE  51CB               	movf	??_mainMenu& (0+255),w,b
  3249  0013D0  27CD               	addwf	(??_mainMenu+2)& (0+255),f,b
  3250  0013D2  51CC               	movf	(??_mainMenu+1)& (0+255),w,b
  3251  0013D4  23CE               	addwfc	(??_mainMenu+3)& (0+255),f,b
  3252  0013D6  05CD               	decf	(??_mainMenu+2)& (0+255),w,b
  3253  0013D8  11CE               	iorwf	(??_mainMenu+3)& (0+255),w,b
  3254  0013DA  A4D8               	btfss	status,2,c
  3255  0013DC  D1FA               	goto	l474
  3256                           
  3257                           ; BSR set to: 0
  3258                           ;menu.c: 222: inputEntry();
  3259  0013DE  EC09  F000         	call	_inputEntry	;wreg free
  3260                           
  3261                           ;menu.c: 223: printStringLCD("Press 1 to start\npackaging");
  3262  0013E2  0E1C               	movlw	low STR_26
  3263  0013E4  0100               	movlb	0	; () banked
  3264  0013E6  6F86               	movwf	printStringLCD@string& (0+255),b
  3265  0013E8  0EFE               	movlw	high STR_26
  3266  0013EA  6F87               	movwf	(printStringLCD@string+1)& (0+255),b
  3267  0013EC  ECBD  F011         	call	_printStringLCD	;wreg free
  3268                           
  3269                           ;menu.c: 224: int startPress = pollKeypad();
  3270  0013F0  ECE8  F01E         	call	_pollKeypad	;wreg free
  3271  0013F4  D002               	goto	L1
  3272  0013F6                     
  3273                           ;menu.c: 226: startPress = pollKeypad();
  3274                           
  3275                           ; BSR set to: 2
  3276  0013F6  ECE8  F01E         	call	_pollKeypad	;wreg free
  3277  0013FA                     L1:
  3278  0013FA  0100               	movlb	0	; () banked
  3279  0013FC  6FCB               	movwf	??_mainMenu& (0+255),b
  3280  0013FE  51CB               	movf	??_mainMenu& (0+255),w,b
  3281  001400  0102               	movlb	2	; () banked
  3282  001402  6F88               	movwf	mainMenu@startPress& (0+255),b
  3283  001404  6B89               	clrf	(mainMenu@startPress+1)& (0+255),b
  3284                           
  3285                           ; BSR set to: 2
  3286                           
  3287                           ; BSR set to: 2
  3288  001406  0ED0               	movlw	208
  3289  001408  0100               	movlb	0	; () banked
  3290  00140A  6FCB               	movwf	??_mainMenu& (0+255),b
  3291  00140C  0EFF               	movlw	255
  3292  00140E  6FCC               	movwf	(??_mainMenu+1)& (0+255),b
  3293  001410  C288  F0CD         	movff	mainMenu@startPress,??_mainMenu+2
  3294  001414  C289  F0CE         	movff	mainMenu@startPress+1,??_mainMenu+3
  3295  001418  51CB               	movf	??_mainMenu& (0+255),w,b
  3296  00141A  27CD               	addwf	(??_mainMenu+2)& (0+255),f,b
  3297  00141C  51CC               	movf	(??_mainMenu+1)& (0+255),w,b
  3298  00141E  23CE               	addwfc	(??_mainMenu+3)& (0+255),f,b
  3299  001420  05CD               	decf	(??_mainMenu+2)& (0+255),w,b
  3300  001422  11CE               	iorwf	(??_mainMenu+3)& (0+255),w,b
  3301  001424  A4D8               	btfss	status,2,c
  3302  001426  D7E7               	goto	l476
  3303                           
  3304                           ; BSR set to: 0
  3305                           ;menu.c: 227: }
  3306                           ;menu.c: 228: RTC_startOperation();
  3307                           
  3308                           ; BSR set to: 0
  3309  001428  EC72  F01C         	call	_RTC_startOperation	;wreg free
  3310                           
  3311                           ;menu.c: 229: printStringLCD("Packaging\nPlease wait...");
  3312  00142C  0E6A               	movlw	low STR_27
  3313  00142E  0100               	movlb	0	; () banked
  3314  001430  6F86               	movwf	printStringLCD@string& (0+255),b
  3315  001432  0EFE               	movlw	high STR_27
  3316  001434  6F87               	movwf	(printStringLCD@string+1)& (0+255),b
  3317  001436  ECBD  F011         	call	_printStringLCD	;wreg free
  3318                           
  3319                           ;menu.c: 230: I2C_Send(nanoAddr, "\1Starting packaging\0");
  3320  00143A  0EC6               	movlw	low STR_28
  3321  00143C  0100               	movlb	0	; () banked
  3322  00143E  6F83               	movwf	I2C_Send@data& (0+255),b
  3323  001440  0EFE               	movlw	high STR_28
  3324  001442  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  3325  001444  0EA3               	movlw	low _nanoAddr
  3326  001446  6EF6               	movwf	tblptrl,c
  3327  001448                     	if	1	;There is more than 1 active tblptr byte
  3328  001448  0EFB               	movlw	high _nanoAddr
  3329  00144A  6EF7               	movwf	tblptrh,c
  3330  00144C                     	endif
  3331  00144C                     	if	1	;There are 3 active tblptr bytes
  3332  00144C  0E00               	movlw	low (_nanoAddr shr (0+16))
  3333  00144E  6EF8               	movwf	tblptru,c
  3334  001450                     	endif
  3335  001450  0008               	tblrd		*
  3336  001452  50F5               	movf	tablat,w,c
  3337  001454  ECD9  F01B         	call	_I2C_Send
  3338                           
  3339                           ;menu.c: 231: packaging();
  3340  001458  ECF4  F00D         	call	_packaging	;wreg free
  3341                           
  3342                           ;menu.c: 232: clearing();
  3343  00145C  EC3C  F007         	call	_clearing	;wreg free
  3344                           
  3345                           ;menu.c: 233: long operationTime = RTC_getOperatingTime();
  3346  001460  EC4B  F018         	call	_RTC_getOperatingTime	;wreg free
  3347  001464  0100               	movlb	0	; () banked
  3348  001466  C086  F28A         	movff	?_RTC_getOperatingTime,mainMenu@operationTime
  3349  00146A  C087  F28B         	movff	?_RTC_getOperatingTime+1,mainMenu@operationTime+1
  3350  00146E  0102               	movlb	2	; () banked
  3351  001470  0E00               	movlw	0
  3352  001472  BF8B               	btfsc	(mainMenu@operationTime+1)& (0+255),7,b
  3353  001474  0EFF               	movlw	-1
  3354  001476  6F8C               	movwf	(mainMenu@operationTime+2)& (0+255),b
  3355  001478  6F8D               	movwf	(mainMenu@operationTime+3)& (0+255),b
  3356                           
  3357                           ; BSR set to: 2
  3358                           ;menu.c: 234: int operationMinutes = (int)(operationTime/60);
  3359  00147A  C28A  F080         	movff	mainMenu@operationTime,___aldiv@dividend
  3360  00147E  C28B  F081         	movff	mainMenu@operationTime+1,___aldiv@dividend+1
  3361  001482  C28C  F082         	movff	mainMenu@operationTime+2,___aldiv@dividend+2
  3362  001486  C28D  F083         	movff	mainMenu@operationTime+3,___aldiv@dividend+3
  3363  00148A  0E3C               	movlw	60
  3364  00148C  0100               	movlb	0	; () banked
  3365  00148E  6F84               	movwf	___aldiv@divisor& (0+255),b
  3366  001490  0E00               	movlw	0
  3367  001492  6F85               	movwf	(___aldiv@divisor+1)& (0+255),b
  3368  001494  0E00               	movlw	0
  3369  001496  6F86               	movwf	(___aldiv@divisor+2)& (0+255),b
  3370  001498  0E00               	movlw	0
  3371  00149A  6F87               	movwf	(___aldiv@divisor+3)& (0+255),b
  3372  00149C  EC4A  F019         	call	___aldiv	;wreg free
  3373  0014A0  C080  F292         	movff	?___aldiv,mainMenu@operationMinutes
  3374  0014A4  C081  F293         	movff	?___aldiv+1,mainMenu@operationMinutes+1
  3375                           
  3376                           ;menu.c: 235: int operationSeconds = (int)operationTime - 60*operationMinutes;
  3377  0014A8  C292  F080         	movff	mainMenu@operationMinutes,___wmul@multiplier
  3378  0014AC  C293  F081         	movff	mainMenu@operationMinutes+1,___wmul@multiplier+1
  3379  0014B0  0E00               	movlw	0
  3380  0014B2  0100               	movlb	0	; () banked
  3381  0014B4  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3382  0014B6  0E3C               	movlw	60
  3383  0014B8  6F82               	movwf	___wmul@multiplicand& (0+255),b
  3384  0014BA  EC2C  F01F         	call	___wmul	;wreg free
  3385  0014BE  0100               	movlb	0	; () banked
  3386  0014C0  1F80               	comf	?___wmul& (0+255),f,b
  3387  0014C2  1F81               	comf	(?___wmul+1)& (0+255),f,b
  3388  0014C4  4B80               	infsnz	?___wmul& (0+255),f,b
  3389  0014C6  2B81               	incf	(?___wmul+1)& (0+255),f,b
  3390  0014C8  0102               	movlb	2	; () banked
  3391  0014CA  518A               	movf	mainMenu@operationTime& (0+255),w,b
  3392  0014CC  0100               	movlb	0	; () banked
  3393  0014CE  2580               	addwf	?___wmul& (0+255),w,b
  3394  0014D0  0102               	movlb	2	; () banked
  3395  0014D2  6F90               	movwf	mainMenu@operationSeconds& (0+255),b
  3396  0014D4  518B               	movf	(mainMenu@operationTime+1)& (0+255),w,b
  3397  0014D6  0100               	movlb	0	; () banked
  3398  0014D8  2181               	addwfc	(?___wmul+1)& (0+255),w,b
  3399  0014DA  0102               	movlb	2	; () banked
  3400  0014DC  6F91               	movwf	(mainMenu@operationSeconds+1)& (0+255),b
  3401                           
  3402                           ; BSR set to: 2
  3403                           ;menu.c: 239: char summaries[3][32];
  3404                           ;menu.c: 240: char savedToEEPROM = 0;
  3405  0014DE  0E00               	movlw	0
  3406  0014E0  6F87               	movwf	mainMenu@savedToEEPROM& (0+255),b
  3407                           
  3408                           ; BSR set to: 2
  3409                           ;menu.c: 242: sprintf(summaries[0], "0:return 1:save\n<>:view summary");
  3410  0014E2  0E00               	movlw	low mainMenu@summaries
  3411  0014E4  0100               	movlb	0	; () banked
  3412  0014E6  6FA1               	movwf	sprintf@wh& (0+255),b
  3413  0014E8  0E02               	movlw	high mainMenu@summaries
  3414  0014EA  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3415  0014EC  0EA7               	movlw	low STR_29
  3416  0014EE  6FA3               	movwf	sprintf@f& (0+255),b
  3417  0014F0  0EFD               	movlw	high STR_29
  3418  0014F2  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3419  0014F4  EC4F  F01E         	call	_sprintf	;wreg free
  3420                           
  3421                           ;menu.c: 243: printStringLCD(summaries[0]);
  3422  0014F8  0E00               	movlw	low mainMenu@summaries
  3423  0014FA  0100               	movlb	0	; () banked
  3424  0014FC  6F86               	movwf	printStringLCD@string& (0+255),b
  3425  0014FE  0E02               	movlw	high mainMenu@summaries
  3426  001500  6F87               	movwf	(printStringLCD@string+1)& (0+255),b
  3427  001502  ECBD  F011         	call	_printStringLCD	;wreg free
  3428                           
  3429                           ;menu.c: 246: int i;
  3430                           ;menu.c: 253: sprintf(summaries[1], "Remaining:\nB%d N%d S%d W%d", extras.b, extras.n, e
      +                          xtras.s, extras.w);
  3431  001506  0E20               	movlw	low (mainMenu@summaries+32)
  3432  001508  0100               	movlb	0	; () banked
  3433  00150A  6FA1               	movwf	sprintf@wh& (0+255),b
  3434  00150C  0E02               	movlw	high (mainMenu@summaries+32)
  3435  00150E  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3436  001510  0E01               	movlw	low STR_20
  3437  001512  6FA3               	movwf	sprintf@f& (0+255),b
  3438  001514  0EFE               	movlw	high STR_20
  3439  001516  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3440  001518  C0DD  F0A5         	movff	_extras,?_sprintf+4
  3441  00151C  C0DE  F0A6         	movff	_extras+1,?_sprintf+5
  3442  001520  C0DF  F0A7         	movff	_extras+2,?_sprintf+6
  3443  001524  C0E0  F0A8         	movff	_extras+3,?_sprintf+7
  3444  001528  C0E1  F0A9         	movff	_extras+4,?_sprintf+8
  3445  00152C  C0E2  F0AA         	movff	_extras+5,?_sprintf+9
  3446  001530  C0E3  F0AB         	movff	_extras+6,?_sprintf+10
  3447  001534  C0E4  F0AC         	movff	_extras+7,?_sprintf+11
  3448  001538  EC4F  F01E         	call	_sprintf	;wreg free
  3449                           
  3450                           ;menu.c: 256: sprintf(summaries[2], "Operating time:\n%d:%d", operationMinutes, operatio
      +                          nSeconds);
  3451  00153C  0E40               	movlw	low (mainMenu@summaries+64)
  3452  00153E  0100               	movlb	0	; () banked
  3453  001540  6FA1               	movwf	sprintf@wh& (0+255),b
  3454  001542  0E02               	movlw	high (mainMenu@summaries+64)
  3455  001544  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3456  001546  0E9A               	movlw	low STR_31
  3457  001548  6FA3               	movwf	sprintf@f& (0+255),b
  3458  00154A  0EFE               	movlw	high STR_31
  3459  00154C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3460  00154E  C292  F0A5         	movff	mainMenu@operationMinutes,?_sprintf+4
  3461  001552  C293  F0A6         	movff	mainMenu@operationMinutes+1,?_sprintf+5
  3462  001556  C290  F0A7         	movff	mainMenu@operationSeconds,?_sprintf+6
  3463  00155A  C291  F0A8         	movff	mainMenu@operationSeconds+1,?_sprintf+7
  3464  00155E  EC4F  F01E         	call	_sprintf	;wreg free
  3465                           
  3466                           ;menu.c: 258: unsigned char pressed;
  3467                           ;menu.c: 259: i = 0;
  3468  001562  0E00               	movlw	0
  3469  001564  0102               	movlb	2	; () banked
  3470  001566  6F98               	movwf	(mainMenu@i+1)& (0+255),b
  3471  001568  0E00               	movlw	0
  3472  00156A  6F97               	movwf	mainMenu@i& (0+255),b
  3473  00156C                     
  3474                           ;menu.c: 261: pressed = pollKeypad();
  3475                           
  3476                           ; BSR set to: 2
  3477  00156C  ECE8  F01E         	call	_pollKeypad	;wreg free
  3478  001570  0102               	movlb	2	; () banked
  3479  001572  6F96               	movwf	mainMenu@pressed_843& (0+255),b
  3480                           
  3481                           ; BSR set to: 2
  3482                           ;menu.c: 262: if (pressed == '>' || pressed == '#') {
  3483  001574  0E3E               	movlw	62
  3484  001576  1996               	xorwf	mainMenu@pressed_843& (0+255),w,b
  3485  001578  B4D8               	btfsc	status,2,c
  3486  00157A  D004               	goto	u9560
  3487                           
  3488                           ; BSR set to: 2
  3489  00157C  0E23               	movlw	35
  3490  00157E  1996               	xorwf	mainMenu@pressed_843& (0+255),w,b
  3491  001580  A4D8               	btfss	status,2,c
  3492  001582  D011               	goto	l479
  3493  001584                     u9560:
  3494                           
  3495                           ; BSR set to: 2
  3496                           ;menu.c: 263: i = (i < 10) ? i+1 : 0;
  3497                           
  3498                           ; BSR set to: 2
  3499  001584  BF98               	btfsc	(mainMenu@i+1)& (0+255),7,b
  3500  001586  D00A               	goto	l483
  3501  001588  5198               	movf	(mainMenu@i+1)& (0+255),w,b
  3502  00158A  E104               	bnz	u9570
  3503  00158C  0E0A               	movlw	10
  3504  00158E  5D97               	subwf	mainMenu@i& (0+255),w,b
  3505  001590  A0D8               	btfss	status,0,c
  3506  001592  D004               	goto	l483
  3507  001594                     u9570:
  3508                           
  3509                           ; BSR set to: 2
  3510  001594  0E00               	movlw	0
  3511  001596  6F98               	movwf	(mainMenu@i+1)& (0+255),b
  3512  001598  0E00               	movlw	0
  3513  00159A  D017               	goto	L2
  3514  00159C                     l483:
  3515                           
  3516                           ; BSR set to: 2
  3517                           
  3518                           ; BSR set to: 2
  3519  00159C  0E01               	movlw	1
  3520  00159E  2597               	addwf	mainMenu@i& (0+255),w,b
  3521  0015A0  6F97               	movwf	mainMenu@i& (0+255),b
  3522  0015A2  0E00               	movlw	0
  3523  0015A4  D018               	goto	L3
  3524  0015A6                     l479:
  3525                           
  3526                           ; BSR set to: 2
  3527                           
  3528                           ; BSR set to: 2
  3529  0015A6  0E3C               	movlw	60
  3530  0015A8  1996               	xorwf	mainMenu@pressed_843& (0+255),w,b
  3531  0015AA  B4D8               	btfsc	status,2,c
  3532  0015AC  D004               	goto	u9590
  3533                           
  3534                           ; BSR set to: 2
  3535  0015AE  0E2A               	movlw	42
  3536  0015B0  1996               	xorwf	mainMenu@pressed_843& (0+255),w,b
  3537  0015B2  A4D8               	btfss	status,2,c
  3538  0015B4  D013               	goto	l487
  3539  0015B6                     u9590:
  3540                           
  3541                           ; BSR set to: 2
  3542                           ;menu.c: 265: i = (i > 0) ? i-1 : 10;
  3543                           
  3544                           ; BSR set to: 2
  3545  0015B6  BF98               	btfsc	(mainMenu@i+1)& (0+255),7,b
  3546  0015B8  D005               	goto	u9600
  3547  0015BA  5198               	movf	(mainMenu@i+1)& (0+255),w,b
  3548  0015BC  E108               	bnz	l7246
  3549  0015BE  0597               	decf	mainMenu@i& (0+255),w,b
  3550  0015C0  B0D8               	btfsc	status,0,c
  3551  0015C2  D005               	goto	l491
  3552  0015C4                     u9600:
  3553                           
  3554                           ; BSR set to: 2
  3555  0015C4  0E00               	movlw	0
  3556  0015C6  6F98               	movwf	(mainMenu@i+1)& (0+255),b
  3557  0015C8  0E0A               	movlw	10
  3558  0015CA                     L2:
  3559  0015CA  6F97               	movwf	mainMenu@i& (0+255),b
  3560  0015CC  D074               	goto	l500
  3561  0015CE                     l491:
  3562  0015CE                     l7246:
  3563                           
  3564                           ; BSR set to: 2
  3565  0015CE  0EFF               	movlw	255
  3566  0015D0  2597               	addwf	mainMenu@i& (0+255),w,b
  3567  0015D2  6F97               	movwf	mainMenu@i& (0+255),b
  3568  0015D4  0EFF               	movlw	255
  3569  0015D6                     L3:
  3570  0015D6  2198               	addwfc	(mainMenu@i+1)& (0+255),w,b
  3571  0015D8  6F98               	movwf	(mainMenu@i+1)& (0+255),b
  3572                           
  3573                           ; BSR set to: 2
  3574                           ;menu.c: 266: } else if (pressed == '0') {
  3575  0015DA  D06D               	goto	l500
  3576  0015DC                     l487:
  3577                           
  3578                           ; BSR set to: 2
  3579                           
  3580                           ; BSR set to: 2
  3581  0015DC  0E30               	movlw	48
  3582  0015DE  1996               	xorwf	mainMenu@pressed_843& (0+255),w,b
  3583  0015E0  B4D8               	btfsc	status,2,c
  3584  0015E2  0012               	return	
  3585                           
  3586                           ; BSR set to: 2
  3587                           
  3588                           ; BSR set to: 2
  3589                           
  3590                           ; BSR set to: 2
  3591                           ;menu.c: 270: } else if (pressed == '1') {
  3592                           
  3593                           ; BSR set to: 2
  3594                           ;menu.c: 269: return;
  3595  0015E4  0E31               	movlw	49
  3596  0015E6  1996               	xorwf	mainMenu@pressed_843& (0+255),w,b
  3597  0015E8  A4D8               	btfss	status,2,c
  3598  0015EA  D065               	goto	l500
  3599                           
  3600                           ; BSR set to: 2
  3601                           ;menu.c: 271: if (!savedToEEPROM) {
  3602  0015EC  5187               	movf	mainMenu@savedToEEPROM& (0+255),w,b
  3603  0015EE  A4D8               	btfss	status,2,c
  3604  0015F0  D04F               	goto	l499
  3605                           
  3606                           ; BSR set to: 2
  3607                           ;menu.c: 273: unsigned char time[7];
  3608                           ;menu.c: 274: RTC_getTime(time);
  3609  0015F2  0E80               	movlw	low mainMenu@time
  3610  0015F4  0100               	movlb	0	; () banked
  3611  0015F6  6F83               	movwf	RTC_getTime@time& (0+255),b
  3612  0015F8  0E02               	movlw	high mainMenu@time
  3613  0015FA  6F84               	movwf	(RTC_getTime@time+1)& (0+255),b
  3614  0015FC  EC38  F01D         	call	_RTC_getTime	;wreg free
  3615                           
  3616                           ;menu.c: 275: struct operationInfo run;
  3617                           ;menu.c: 277: run.year = (time[6] & 0x0F) + ((time[6] & 0xF0)>>4)*10;
  3618  001600  0102               	movlb	2	; () banked
  3619  001602  3986               	swapf	(mainMenu@time+6)& (0+255),w,b
  3620  001604  0B0F               	andlw	15
  3621  001606  0B0F               	andlw	15
  3622  001608  0D0A               	mullw	10
  3623  00160A  5186               	movf	(mainMenu@time+6)& (0+255),w,b
  3624  00160C  0B0F               	andlw	15
  3625  00160E  24F3               	addwf	prodl,w,c
  3626  001610  6F99               	movwf	mainMenu@run& (0+255),b
  3627                           
  3628                           ; BSR set to: 2
  3629                           ;menu.c: 278: run.month = (time[5] & 0x0F) + ((time[5] & 0xF0)>>4)*10;
  3630  001612  3985               	swapf	(mainMenu@time+5)& (0+255),w,b
  3631  001614  0B0F               	andlw	15
  3632  001616  0B0F               	andlw	15
  3633  001618  0D0A               	mullw	10
  3634  00161A  5185               	movf	(mainMenu@time+5)& (0+255),w,b
  3635  00161C  0B0F               	andlw	15
  3636  00161E  24F3               	addwf	prodl,w,c
  3637  001620  6F9B               	movwf	(mainMenu@run+2)& (0+255),b
  3638                           
  3639                           ; BSR set to: 2
  3640                           ;menu.c: 279: run.day = (time[4] & 0x0F) + ((time[4] & 0xF0)>>4)*10;
  3641  001622  3984               	swapf	(mainMenu@time+4)& (0+255),w,b
  3642  001624  0B0F               	andlw	15
  3643  001626  0B0F               	andlw	15
  3644  001628  0D0A               	mullw	10
  3645  00162A  5184               	movf	(mainMenu@time+4)& (0+255),w,b
  3646  00162C  0B0F               	andlw	15
  3647  00162E  24F3               	addwf	prodl,w,c
  3648  001630  6F9A               	movwf	(mainMenu@run+1)& (0+255),b
  3649                           
  3650                           ; BSR set to: 2
  3651                           ;menu.c: 281: run.minutes = operationMinutes;
  3652  001632  C292  F29C         	movff	mainMenu@operationMinutes,mainMenu@run+3
  3653                           
  3654                           ; BSR set to: 2
  3655                           ;menu.c: 282: run.seconds = operationSeconds;
  3656  001636  C290  F29D         	movff	mainMenu@operationSeconds,mainMenu@run+4
  3657                           
  3658                           ; BSR set to: 2
  3659                           ;menu.c: 284: run.packagedB = dispensed.b;
  3660  00163A  C0D5  F29E         	movff	_dispensed,mainMenu@run+5
  3661                           
  3662                           ; BSR set to: 2
  3663                           ;menu.c: 285: run.packagedN = dispensed.n;
  3664  00163E  C0D7  F29F         	movff	_dispensed+2,mainMenu@run+6
  3665                           
  3666                           ; BSR set to: 2
  3667                           ;menu.c: 286: run.packagedS = dispensed.s;
  3668  001642  C0D9  F2A0         	movff	_dispensed+4,mainMenu@run+7
  3669                           
  3670                           ; BSR set to: 2
  3671                           ;menu.c: 287: run.packagedW = dispensed.w;
  3672  001646  C0DB  F2A1         	movff	_dispensed+6,mainMenu@run+8
  3673                           
  3674                           ; BSR set to: 2
  3675                           ;menu.c: 289: run.remainingB = extras.b;
  3676  00164A  C0DD  F2A2         	movff	_extras,mainMenu@run+9
  3677                           
  3678                           ; BSR set to: 2
  3679                           ;menu.c: 290: run.remainingN = extras.n;
  3680  00164E  C0DF  F2A3         	movff	_extras+2,mainMenu@run+10
  3681                           
  3682                           ; BSR set to: 2
  3683                           ;menu.c: 291: run.remainingS = extras.s;
  3684  001652  C0E1  F2A4         	movff	_extras+4,mainMenu@run+11
  3685                           
  3686                           ; BSR set to: 2
  3687                           ;menu.c: 292: run.remainingW = extras.w;
  3688  001656  C0E3  F2A5         	movff	_extras+6,mainMenu@run+12
  3689                           
  3690                           ; BSR set to: 2
  3691                           ;menu.c: 294: EEPROM_logOperation(&run);
  3692  00165A  0E99               	movlw	low mainMenu@run
  3693  00165C  0100               	movlb	0	; () banked
  3694  00165E  6F83               	movwf	EEPROM_logOperation@data& (0+255),b
  3695  001660  0E02               	movlw	high mainMenu@run
  3696  001662  6F84               	movwf	(EEPROM_logOperation@data+1)& (0+255),b
  3697  001664  EC20  F013         	call	_EEPROM_logOperation	;wreg free
  3698                           
  3699                           ;menu.c: 295: printStringLCD("Saved to EEPROM");
  3700  001668  0E6A               	movlw	low STR_32
  3701  00166A  0100               	movlb	0	; () banked
  3702  00166C  6F86               	movwf	printStringLCD@string& (0+255),b
  3703  00166E  0EFF               	movlw	high STR_32
  3704  001670  6F87               	movwf	(printStringLCD@string+1)& (0+255),b
  3705  001672  ECBD  F011         	call	_printStringLCD	;wreg free
  3706                           
  3707                           ;menu.c: 296: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3708  001676  0E66               	movlw	102
  3709  001678  0100               	movlb	0	; () banked
  3710  00167A  6FCC               	movwf	(??_mainMenu+1)& (0+255),b
  3711  00167C  0E76               	movlw	118
  3712  00167E  6FCB               	movwf	??_mainMenu& (0+255),b
  3713  001680  0EC1               	movlw	193
  3714  001682                     u9767:
  3715  001682  2EE8               	decfsz	wreg,f,c
  3716  001684  D7FE               	bra	u9767
  3717  001686  2FCB               	decfsz	??_mainMenu& (0+255),f,b
  3718  001688  D7FC               	bra	u9767
  3719  00168A  2FCC               	decfsz	(??_mainMenu+1)& (0+255),f,b
  3720  00168C  D7FA               	bra	u9767
  3721                           
  3722                           ;menu.c: 298: } else {
  3723  00168E  D013               	goto	l500
  3724  001690                     l499:
  3725                           
  3726                           ;menu.c: 299: printStringLCD("Already saved");
  3727  001690  0EB5               	movlw	low STR_33
  3728  001692  0100               	movlb	0	; () banked
  3729  001694  6F86               	movwf	printStringLCD@string& (0+255),b
  3730  001696  0EFF               	movlw	high STR_33
  3731  001698  6F87               	movwf	(printStringLCD@string+1)& (0+255),b
  3732  00169A  ECBD  F011         	call	_printStringLCD	;wreg free
  3733                           
  3734                           ;menu.c: 300: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3735  00169E  0E66               	movlw	102
  3736  0016A0  0100               	movlb	0	; () banked
  3737  0016A2  6FCC               	movwf	(??_mainMenu+1)& (0+255),b
  3738  0016A4  0E76               	movlw	118
  3739  0016A6  6FCB               	movwf	??_mainMenu& (0+255),b
  3740  0016A8  0EC1               	movlw	193
  3741  0016AA                     u9777:
  3742  0016AA  2EE8               	decfsz	wreg,f,c
  3743  0016AC  D7FE               	bra	u9777
  3744  0016AE  2FCB               	decfsz	??_mainMenu& (0+255),f,b
  3745  0016B0  D7FC               	bra	u9777
  3746  0016B2  2FCC               	decfsz	(??_mainMenu+1)& (0+255),f,b
  3747  0016B4  D7FA               	bra	u9777
  3748  0016B6                     l500:
  3749                           
  3750                           ;menu.c: 301: }
  3751                           ;menu.c: 303: }
  3752                           ;menu.c: 305: if (i == 0) {
  3753  0016B6  0102               	movlb	2	; () banked
  3754  0016B8  5197               	movf	mainMenu@i& (0+255),w,b
  3755  0016BA  1198               	iorwf	(mainMenu@i+1)& (0+255),w,b
  3756  0016BC  A4D8               	btfss	status,2,c
  3757  0016BE  D008               	goto	l501
  3758                           
  3759                           ; BSR set to: 2
  3760                           ;menu.c: 306: printStringLCD(summaries[0]);
  3761  0016C0  0E00               	movlw	low mainMenu@summaries
  3762  0016C2  0100               	movlb	0	; () banked
  3763  0016C4  6F86               	movwf	printStringLCD@string& (0+255),b
  3764  0016C6  0E02               	movlw	high mainMenu@summaries
  3765  0016C8  6F87               	movwf	(printStringLCD@string+1)& (0+255),b
  3766  0016CA  ECBD  F011         	call	_printStringLCD	;wreg free
  3767                           
  3768                           ;menu.c: 307: } else if (i > 0 && i <= 8) {
  3769  0016CE  D74E               	goto	l478
  3770  0016D0                     l501:
  3771  0016D0  0102               	movlb	2	; () banked
  3772  0016D2  BF98               	btfsc	(mainMenu@i+1)& (0+255),7,b
  3773  0016D4  D059               	goto	l503
  3774  0016D6  5198               	movf	(mainMenu@i+1)& (0+255),w,b
  3775  0016D8  E103               	bnz	u9650
  3776  0016DA  0597               	decf	mainMenu@i& (0+255),w,b
  3777  0016DC  A0D8               	btfss	status,0,c
  3778  0016DE  D054               	goto	l503
  3779  0016E0                     u9650:
  3780                           
  3781                           ; BSR set to: 2
  3782  0016E0  BF98               	btfsc	(mainMenu@i+1)& (0+255),7,b
  3783  0016E2  D006               	goto	u9660
  3784  0016E4  5198               	movf	(mainMenu@i+1)& (0+255),w,b
  3785  0016E6  E150               	bnz	l7308
  3786  0016E8  0E09               	movlw	9
  3787  0016EA  5D97               	subwf	mainMenu@i& (0+255),w,b
  3788  0016EC  B0D8               	btfsc	status,0,c
  3789  0016EE  D04C               	goto	l503
  3790  0016F0                     u9660:
  3791                           
  3792                           ; BSR set to: 2
  3793                           ;menu.c: 308: char msg[32];
  3794                           ;menu.c: 309: sprintf(msg, "C%d: %s x%d", i, fSLookup[params.toFill[i-1]], params.setMul
      +                          tiple[i-1]);
  3795  0016F0  0E60               	movlw	low mainMenu@msg
  3796  0016F2  0100               	movlb	0	; () banked
  3797  0016F4  6FA1               	movwf	sprintf@wh& (0+255),b
  3798  0016F6  0E02               	movlw	high mainMenu@msg
  3799  0016F8  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  3800  0016FA  0EEB               	movlw	low STR_34
  3801  0016FC  6FA3               	movwf	sprintf@f& (0+255),b
  3802  0016FE  0EFF               	movlw	high STR_34
  3803  001700  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  3804  001702  C297  F0A5         	movff	mainMenu@i,?_sprintf+4
  3805  001706  C298  F0A6         	movff	mainMenu@i+1,?_sprintf+5
  3806  00170A  0EFF               	movlw	255
  3807  00170C  6FCB               	movwf	??_mainMenu& (0+255),b
  3808  00170E  0EFF               	movlw	255
  3809  001710  6FCC               	movwf	(??_mainMenu+1)& (0+255),b
  3810  001712  C297  F0CD         	movff	mainMenu@i,??_mainMenu+2
  3811  001716  C298  F0CE         	movff	mainMenu@i+1,??_mainMenu+3
  3812  00171A  51CB               	movf	??_mainMenu& (0+255),w,b
  3813  00171C  27CD               	addwf	(??_mainMenu+2)& (0+255),f,b
  3814  00171E  51CC               	movf	(??_mainMenu+1)& (0+255),w,b
  3815  001720  23CE               	addwfc	(??_mainMenu+3)& (0+255),f,b
  3816  001722  0EB9               	movlw	low (_params+2)
  3817  001724  25CD               	addwf	(??_mainMenu+2)& (0+255),w,b
  3818  001726  6ED9               	movwf	fsr2l,c
  3819  001728  0E01               	movlw	high (_params+2)
  3820  00172A  21CE               	addwfc	(??_mainMenu+3)& (0+255),w,b
  3821  00172C  6EDA               	movwf	fsr2h,c
  3822  00172E  50DF               	movf	indf2,w,c
  3823  001730  6FCF               	movwf	(??_mainMenu+4)& (0+255),b
  3824  001732  51CF               	movf	(??_mainMenu+4)& (0+255),w,b
  3825  001734  0D05               	mullw	5
  3826  001736  0E00               	movlw	low _fSLookup
  3827  001738  24F3               	addwf	prodl,w,c
  3828  00173A  6FA7               	movwf	(?_sprintf+6)& (0+255),b
  3829  00173C  0E03               	movlw	high _fSLookup
  3830  00173E  20F4               	addwfc	prodh,w,c
  3831  001740  6FA8               	movwf	(?_sprintf+7)& (0+255),b
  3832  001742  0EFE               	movlw	254
  3833  001744  6FD0               	movwf	(??_mainMenu+5)& (0+255),b
  3834  001746  0EFF               	movlw	255
  3835  001748  6FD1               	movwf	(??_mainMenu+6)& (0+255),b
  3836  00174A  C297  F0D2         	movff	mainMenu@i,??_mainMenu+7
  3837  00174E  C298  F0D3         	movff	mainMenu@i+1,??_mainMenu+8
  3838  001752  90D8               	bcf	status,0,c
  3839  001754  37D2               	rlcf	(??_mainMenu+7)& (0+255),f,b
  3840  001756  37D3               	rlcf	(??_mainMenu+8)& (0+255),f,b
  3841  001758  51D0               	movf	(??_mainMenu+5)& (0+255),w,b
  3842  00175A  27D2               	addwf	(??_mainMenu+7)& (0+255),f,b
  3843  00175C  51D1               	movf	(??_mainMenu+6)& (0+255),w,b
  3844  00175E  23D3               	addwfc	(??_mainMenu+8)& (0+255),f,b
  3845  001760  0EC1               	movlw	low (_params+10)
  3846  001762  25D2               	addwf	(??_mainMenu+7)& (0+255),w,b
  3847  001764  6ED9               	movwf	fsr2l,c
  3848  001766  0E01               	movlw	high (_params+10)
  3849  001768  21D3               	addwfc	(??_mainMenu+8)& (0+255),w,b
  3850  00176A  6EDA               	movwf	fsr2h,c
  3851  00176C  CFDE F0A9          	movff	postinc2,?_sprintf+8
  3852  001770  CFDD F0AA          	movff	postdec2,?_sprintf+9
  3853  001774  EC4F  F01E         	call	_sprintf	;wreg free
  3854                           
  3855                           ;menu.c: 310: printStringLCD(msg);
  3856  001778  0E60               	movlw	low mainMenu@msg
  3857  00177A  0100               	movlb	0	; () banked
  3858  00177C  6F86               	movwf	printStringLCD@string& (0+255),b
  3859  00177E  0E02               	movlw	high mainMenu@msg
  3860  001780  6F87               	movwf	(printStringLCD@string+1)& (0+255),b
  3861  001782  ECBD  F011         	call	_printStringLCD	;wreg free
  3862                           
  3863                           ;menu.c: 311: } else if (i > 8) {
  3864  001786  D6F2               	goto	l478
  3865  001788                     l503:
  3866  001788                     l7308:
  3867  001788  0102               	movlb	2	; () banked
  3868  00178A  BF98               	btfsc	(mainMenu@i+1)& (0+255),7,b
  3869  00178C  D6EF               	goto	l478
  3870  00178E  5198               	movf	(mainMenu@i+1)& (0+255),w,b
  3871  001790  E104               	bnz	u9670
  3872  001792  0E09               	movlw	9
  3873  001794  5D97               	subwf	mainMenu@i& (0+255),w,b
  3874  001796  A0D8               	btfss	status,0,c
  3875  001798  D6E9               	goto	l478
  3876  00179A                     u9670:
  3877                           
  3878                           ; BSR set to: 2
  3879                           ;menu.c: 312: printStringLCD(summaries[i-8]);
  3880  00179A  0E00               	movlw	0
  3881  00179C  0100               	movlb	0	; () banked
  3882  00179E  6FCB               	movwf	??_mainMenu& (0+255),b
  3883  0017A0  0EFF               	movlw	255
  3884  0017A2  6FCC               	movwf	(??_mainMenu+1)& (0+255),b
  3885  0017A4  C297  F0CD         	movff	mainMenu@i,??_mainMenu+2
  3886  0017A8  C298  F0CE         	movff	mainMenu@i+1,??_mainMenu+3
  3887  0017AC  0E05               	movlw	5
  3888  0017AE                     u9685:
  3889  0017AE  90D8               	bcf	status,0,c
  3890  0017B0  37CD               	rlcf	(??_mainMenu+2)& (0+255),f,b
  3891  0017B2  37CE               	rlcf	(??_mainMenu+3)& (0+255),f,b
  3892  0017B4  2EE8               	decfsz	wreg,f,c
  3893  0017B6  D7FB               	goto	u9685
  3894  0017B8  51CB               	movf	??_mainMenu& (0+255),w,b
  3895  0017BA  27CD               	addwf	(??_mainMenu+2)& (0+255),f,b
  3896  0017BC  51CC               	movf	(??_mainMenu+1)& (0+255),w,b
  3897  0017BE  23CE               	addwfc	(??_mainMenu+3)& (0+255),f,b
  3898  0017C0  0E00               	movlw	low mainMenu@summaries
  3899  0017C2  25CD               	addwf	(??_mainMenu+2)& (0+255),w,b
  3900  0017C4  6F86               	movwf	printStringLCD@string& (0+255),b
  3901  0017C6  0E02               	movlw	high mainMenu@summaries
  3902  0017C8  21CE               	addwfc	(??_mainMenu+3)& (0+255),w,b
  3903  0017CA  6F87               	movwf	(printStringLCD@string+1)& (0+255),b
  3904  0017CC  ECBD  F011         	call	_printStringLCD	;wreg free
  3905  0017D0  D6CD               	goto	l478
  3906  0017D2                     l474:
  3907  0017D2  0ED0               	movlw	208
  3908  0017D4  0100               	movlb	0	; () banked
  3909  0017D6  6FCB               	movwf	??_mainMenu& (0+255),b
  3910  0017D8  0EFF               	movlw	255
  3911  0017DA  6FCC               	movwf	(??_mainMenu+1)& (0+255),b
  3912  0017DC  C294  F0CD         	movff	mainMenu@pressed,??_mainMenu+2
  3913  0017E0  C295  F0CE         	movff	mainMenu@pressed+1,??_mainMenu+3
  3914  0017E4  51CB               	movf	??_mainMenu& (0+255),w,b
  3915  0017E6  27CD               	addwf	(??_mainMenu+2)& (0+255),f,b
  3916  0017E8  51CC               	movf	(??_mainMenu+1)& (0+255),w,b
  3917  0017EA  23CE               	addwfc	(??_mainMenu+3)& (0+255),f,b
  3918  0017EC  0E02               	movlw	2
  3919  0017EE  19CD               	xorwf	(??_mainMenu+2)& (0+255),w,b
  3920  0017F0  11CE               	iorwf	(??_mainMenu+3)& (0+255),w,b
  3921  0017F2  A4D8               	btfss	status,2,c
  3922  0017F4  D5B3               	goto	l470
  3923                           
  3924                           ; BSR set to: 0
  3925                           ;menu.c: 344: viewLogs();
  3926  0017F6  EC89  F015         	call	_viewLogs	;wreg free
  3927  0017FA  D5AB               	goto	_mainMenu
  3928  0017FC                     __end_of_mainMenu:
  3929                           	opt stack 0
  3930                           tblptru	equ	0xFF8
  3931                           tblptrh	equ	0xFF7
  3932                           tblptrl	equ	0xFF6
  3933                           tablat	equ	0xFF5
  3934                           prodh	equ	0xFF4
  3935                           prodl	equ	0xFF3
  3936                           intcon	equ	0xFF2
  3937                           postinc0	equ	0xFEE
  3938                           wreg	equ	0xFE8
  3939                           postdec1	equ	0xFE5
  3940                           fsr1l	equ	0xFE1
  3941                           indf2	equ	0xFDF
  3942                           postinc2	equ	0xFDE
  3943                           postdec2	equ	0xFDD
  3944                           fsr2h	equ	0xFDA
  3945                           fsr2l	equ	0xFD9
  3946                           status	equ	0xFD8
  3947                           
  3948 ;; *************** function _viewLogs *****************
  3949 ;; Defined at:
  3950 ;;		line 23 in file "menu.c"
  3951 ;; Parameters:    Size  Location     Type
  3952 ;;		None
  3953 ;; Auto vars:     Size  Location     Type
  3954 ;;  msg            32  128[BANK1 ] unsigned char [32]
  3955 ;;  msgs          128    0[BANK1 ] unsigned char [32][4]
  3956 ;;  j               2  162[BANK1 ] int 
  3957 ;;  run            13  170[BANK1 ] struct operationInfo
  3958 ;;  success         2  160[BANK1 ] int 
  3959 ;;  i               2  168[BANK1 ] unsigned int 
  3960 ;;  pressed         2  166[BANK1 ] int 
  3961 ;;  entry           2  164[BANK1 ] unsigned int 
  3962 ;; Return value:  Size  Location     Type
  3963 ;;                  1    wreg      void 
  3964 ;; Registers used:
  3965 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3966 ;; Tracked objects:
  3967 ;;		On entry : 0/0
  3968 ;;		On exit  : 0/0
  3969 ;;		Unchanged: 0/0
  3970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3972 ;;      Locals:         0       0     183       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3973 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3974 ;;      Totals:         0       4     183       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3975 ;;Total ram usage:      187 bytes
  3976 ;; Hardware stack levels used:    1
  3977 ;; Hardware stack levels required when called:    8
  3978 ;; This function calls:
  3979 ;;		_EEPROM_readLog
  3980 ;;		_pollKeypad
  3981 ;;		_printStringLCD
  3982 ;;		_sprintf
  3983 ;; This function is called by:
  3984 ;;		_mainMenu
  3985 ;; This function uses a non-reentrant model
  3986 ;;
  3987                           
  3988                           	psect	text3
  3989  002B12                     __ptext3:
  3990                           	opt stack 0
  3991  002B12                     _viewLogs:
  3992                           	opt stack 21
  3993                           
  3994                           ;menu.c: 26: unsigned int i = 0;
  3995                           
  3996                           ; BSR set to: 2
  3997                           ;incstack = 0
  3998  002B12  0E00               	movlw	0
  3999  002B14  0101               	movlb	1	; () banked
  4000  002B16  6FA9               	movwf	(viewLogs@i+1)& (0+255),b
  4001  002B18  0E00               	movlw	0
  4002  002B1A  6FA8               	movwf	viewLogs@i& (0+255),b
  4003                           
  4004                           ;menu.c: 27: unsigned int entry = 0;
  4005  002B1C  0E00               	movlw	0
  4006  002B1E  6FA5               	movwf	(viewLogs@entry+1)& (0+255),b
  4007  002B20  0E00               	movlw	0
  4008  002B22  6FA4               	movwf	viewLogs@entry& (0+255),b
  4009                           
  4010                           ; BSR set to: 1
  4011                           ;menu.c: 28: printStringLCD("0:Return\n<>:Navigate");
  4012  002B24  0EDB               	movlw	low STR_16
  4013  002B26  0100               	movlb	0	; () banked
  4014  002B28  6F86               	movwf	printStringLCD@string& (0+255),b
  4015  002B2A  0EFE               	movlw	high STR_16
  4016  002B2C  6F87               	movwf	(printStringLCD@string+1)& (0+255),b
  4017  002B2E  ECBD  F011         	call	_printStringLCD	;wreg free
  4018  002B32                     
  4019                           ;menu.c: 31: pressed = pollKeypad();
  4020  002B32  ECE8  F01E         	call	_pollKeypad	;wreg free
  4021  002B36  0100               	movlb	0	; () banked
  4022  002B38  6FB3               	movwf	??_viewLogs& (0+255),b
  4023  002B3A  51B3               	movf	??_viewLogs& (0+255),w,b
  4024  002B3C  0101               	movlb	1	; () banked
  4025  002B3E  6FA6               	movwf	viewLogs@pressed& (0+255),b
  4026  002B40  6BA7               	clrf	(viewLogs@pressed+1)& (0+255),b
  4027                           
  4028                           ; BSR set to: 1
  4029                           ;menu.c: 32: if (pressed == '0') {
  4030  002B42  0E30               	movlw	48
  4031  002B44  19A6               	xorwf	viewLogs@pressed& (0+255),w,b
  4032  002B46  11A7               	iorwf	(viewLogs@pressed+1)& (0+255),w,b
  4033  002B48  B4D8               	btfsc	status,2,c
  4034  002B4A  0012               	return	
  4035                           
  4036                           ; BSR set to: 1
  4037                           
  4038                           ; BSR set to: 1
  4039                           
  4040                           ; BSR set to: 1
  4041                           ;menu.c: 34: } else if (pressed == '>' || pressed == '#') {
  4042                           
  4043                           ; BSR set to: 1
  4044                           ;menu.c: 33: return;
  4045  002B4C  0E3E               	movlw	62
  4046  002B4E  19A6               	xorwf	viewLogs@pressed& (0+255),w,b
  4047  002B50  11A7               	iorwf	(viewLogs@pressed+1)& (0+255),w,b
  4048  002B52  B4D8               	btfsc	status,2,c
  4049  002B54  D005               	goto	u8840
  4050                           
  4051                           ; BSR set to: 1
  4052  002B56  0E23               	movlw	35
  4053  002B58  19A6               	xorwf	viewLogs@pressed& (0+255),w,b
  4054  002B5A  11A7               	iorwf	(viewLogs@pressed+1)& (0+255),w,b
  4055  002B5C  A4D8               	btfss	status,2,c
  4056  002B5E  D00F               	goto	l380
  4057  002B60                     u8840:
  4058                           
  4059                           ; BSR set to: 1
  4060                           ;menu.c: 35: i = (i < 16) ? i+1 : 0;
  4061                           
  4062                           ; BSR set to: 1
  4063  002B60  51A9               	movf	(viewLogs@i+1)& (0+255),w,b
  4064  002B62  E104               	bnz	u8850
  4065  002B64  0E10               	movlw	16
  4066  002B66  5DA8               	subwf	viewLogs@i& (0+255),w,b
  4067  002B68  A0D8               	btfss	status,0,c
  4068  002B6A  D004               	goto	l384
  4069  002B6C                     u8850:
  4070                           
  4071                           ; BSR set to: 1
  4072  002B6C  0E00               	movlw	0
  4073  002B6E  6FA9               	movwf	(viewLogs@i+1)& (0+255),b
  4074  002B70  0E00               	movlw	0
  4075  002B72  D016               	goto	L4
  4076  002B74                     l384:
  4077                           
  4078                           ; BSR set to: 1
  4079                           
  4080                           ; BSR set to: 1
  4081  002B74  0E01               	movlw	1
  4082  002B76  25A8               	addwf	viewLogs@i& (0+255),w,b
  4083  002B78  6FA8               	movwf	viewLogs@i& (0+255),b
  4084  002B7A  0E00               	movlw	0
  4085  002B7C  D017               	goto	L5
  4086  002B7E                     l380:
  4087                           
  4088                           ; BSR set to: 1
  4089                           
  4090                           ; BSR set to: 1
  4091  002B7E  0E3C               	movlw	60
  4092  002B80  19A6               	xorwf	viewLogs@pressed& (0+255),w,b
  4093  002B82  11A7               	iorwf	(viewLogs@pressed+1)& (0+255),w,b
  4094  002B84  B4D8               	btfsc	status,2,c
  4095  002B86  D005               	goto	u8870
  4096                           
  4097                           ; BSR set to: 1
  4098  002B88  0E2A               	movlw	42
  4099  002B8A  19A6               	xorwf	viewLogs@pressed& (0+255),w,b
  4100  002B8C  11A7               	iorwf	(viewLogs@pressed+1)& (0+255),w,b
  4101  002B8E  A4D8               	btfss	status,2,c
  4102  002B90  D00F               	goto	l394
  4103  002B92                     u8870:
  4104                           
  4105                           ; BSR set to: 1
  4106                           ;menu.c: 37: i = (i > 0) ? i-1 : 16;
  4107                           
  4108                           ; BSR set to: 1
  4109  002B92  51A8               	movf	viewLogs@i& (0+255),w,b
  4110  002B94  11A9               	iorwf	(viewLogs@i+1)& (0+255),w,b
  4111  002B96  A4D8               	btfss	status,2,c
  4112  002B98  D005               	goto	l392
  4113                           
  4114                           ; BSR set to: 1
  4115  002B9A  0E00               	movlw	0
  4116  002B9C  6FA9               	movwf	(viewLogs@i+1)& (0+255),b
  4117  002B9E  0E10               	movlw	16
  4118  002BA0                     L4:
  4119  002BA0  6FA8               	movwf	viewLogs@i& (0+255),b
  4120  002BA2  D006               	goto	l394
  4121  002BA4                     l392:
  4122                           
  4123                           ; BSR set to: 1
  4124                           
  4125                           ; BSR set to: 1
  4126  002BA4  0EFF               	movlw	255
  4127  002BA6  25A8               	addwf	viewLogs@i& (0+255),w,b
  4128  002BA8  6FA8               	movwf	viewLogs@i& (0+255),b
  4129  002BAA  0EFF               	movlw	255
  4130  002BAC                     L5:
  4131  002BAC  21A9               	addwfc	(viewLogs@i+1)& (0+255),w,b
  4132  002BAE  6FA9               	movwf	(viewLogs@i+1)& (0+255),b
  4133  002BB0                     l394:
  4134                           
  4135                           ; BSR set to: 1
  4136                           ;menu.c: 38: }
  4137                           ;menu.c: 40: if (i == 0) {
  4138                           
  4139                           ; BSR set to: 1
  4140                           
  4141                           ; BSR set to: 1
  4142                           
  4143                           ; BSR set to: 1
  4144  002BB0  51A8               	movf	viewLogs@i& (0+255),w,b
  4145  002BB2  11A9               	iorwf	(viewLogs@i+1)& (0+255),w,b
  4146  002BB4  A4D8               	btfss	status,2,c
  4147  002BB6  D008               	goto	l395
  4148                           
  4149                           ; BSR set to: 1
  4150                           ;menu.c: 41: printStringLCD("0:Return\n<>:Navigate");
  4151  002BB8  0EDB               	movlw	low STR_16
  4152  002BBA  0100               	movlb	0	; () banked
  4153  002BBC  6F86               	movwf	printStringLCD@string& (0+255),b
  4154  002BBE  0EFE               	movlw	high STR_16
  4155  002BC0  6F87               	movwf	(printStringLCD@string+1)& (0+255),b
  4156  002BC2  ECBD  F011         	call	_printStringLCD	;wreg free
  4157                           
  4158                           ;menu.c: 42: } else {
  4159  002BC6  D7B5               	goto	l376
  4160  002BC8                     l395:
  4161                           
  4162                           ;menu.c: 43: entry = (unsigned int)(i-1)/4;
  4163  002BC8  0EFF               	movlw	255
  4164  002BCA  0100               	movlb	0	; () banked
  4165  002BCC  6FB3               	movwf	??_viewLogs& (0+255),b
  4166  002BCE  0EFF               	movlw	255
  4167  002BD0  6FB4               	movwf	(??_viewLogs+1)& (0+255),b
  4168  002BD2  C1A8  F0B5         	movff	viewLogs@i,??_viewLogs+2
  4169  002BD6  C1A9  F0B6         	movff	viewLogs@i+1,??_viewLogs+3
  4170  002BDA  51B3               	movf	??_viewLogs& (0+255),w,b
  4171  002BDC  27B5               	addwf	(??_viewLogs+2)& (0+255),f,b
  4172  002BDE  51B4               	movf	(??_viewLogs+1)& (0+255),w,b
  4173  002BE0  23B6               	addwfc	(??_viewLogs+3)& (0+255),f,b
  4174  002BE2  90D8               	bcf	status,0,c
  4175  002BE4  33B6               	rrcf	(??_viewLogs+3)& (0+255),f,b
  4176  002BE6  33B5               	rrcf	(??_viewLogs+2)& (0+255),f,b
  4177  002BE8  90D8               	bcf	status,0,c
  4178  002BEA  33B6               	rrcf	(??_viewLogs+3)& (0+255),f,b
  4179  002BEC  33B5               	rrcf	(??_viewLogs+2)& (0+255),f,b
  4180  002BEE  C0B5  F1A4         	movff	??_viewLogs+2,viewLogs@entry
  4181  002BF2  C0B6  F1A5         	movff	??_viewLogs+3,viewLogs@entry+1
  4182                           
  4183                           ; BSR set to: 0
  4184                           ;menu.c: 44: struct operationInfo run;
  4185                           ;menu.c: 45: int success = EEPROM_readLog(entry, &run);
  4186  002BF6  C1A4  F082         	movff	viewLogs@entry,EEPROM_readLog@logNum
  4187  002BFA  C1A5  F083         	movff	viewLogs@entry+1,EEPROM_readLog@logNum+1
  4188  002BFE  0EAA               	movlw	low viewLogs@run
  4189  002C00  6F84               	movwf	EEPROM_readLog@data& (0+255),b
  4190  002C02  0E01               	movlw	high viewLogs@run
  4191  002C04  6F85               	movwf	(EEPROM_readLog@data+1)& (0+255),b
  4192  002C06  EC63  F014         	call	_EEPROM_readLog	;wreg free
  4193  002C0A  C082  F1A0         	movff	?_EEPROM_readLog,viewLogs@success
  4194  002C0E  C083  F1A1         	movff	?_EEPROM_readLog+1,viewLogs@success+1
  4195                           
  4196                           ;menu.c: 46: if (success) {
  4197  002C12  0101               	movlb	1	; () banked
  4198  002C14  51A0               	movf	viewLogs@success& (0+255),w,b
  4199  002C16  11A1               	iorwf	(viewLogs@success+1)& (0+255),w,b
  4200  002C18  B4D8               	btfsc	status,2,c
  4201  002C1A  D079               	goto	l397
  4202                           
  4203                           ; BSR set to: 1
  4204                           ;menu.c: 47: char msgs[4][32];
  4205                           ;menu.c: 48: sprintf(msgs[0], "Date:\n20%02d-%02d-%02d", run.year, run.minutes, run.seco
      +                          nds);
  4206  002C1C  0E00               	movlw	low viewLogs@msgs
  4207  002C1E  0100               	movlb	0	; () banked
  4208  002C20  6FA1               	movwf	sprintf@wh& (0+255),b
  4209  002C22  0E01               	movlw	high viewLogs@msgs
  4210  002C24  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4211  002C26  0E83               	movlw	low STR_18
  4212  002C28  6FA3               	movwf	sprintf@f& (0+255),b
  4213  002C2A  0EFE               	movlw	high STR_18
  4214  002C2C  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4215  002C2E  C1AA  F0A5         	movff	viewLogs@run,?_sprintf+4
  4216  002C32  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  4217  002C34  C1AD  F0A7         	movff	viewLogs@run+3,?_sprintf+6
  4218  002C38  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  4219  002C3A  C1AE  F0A9         	movff	viewLogs@run+4,?_sprintf+8
  4220  002C3E  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  4221  002C40  EC4F  F01E         	call	_sprintf	;wreg free
  4222                           
  4223                           ;menu.c: 49: sprintf(msgs[1], "Packaged:\nB%d N%d S%d W%d", run.packagedB, run.packagedN
      +                          , run.packagedS, run.packagedW);
  4224  002C44  0E20               	movlw	low (viewLogs@msgs+32)
  4225  002C46  0100               	movlb	0	; () banked
  4226  002C48  6FA1               	movwf	sprintf@wh& (0+255),b
  4227  002C4A  0E01               	movlw	high (viewLogs@msgs+32)
  4228  002C4C  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4229  002C4E  0E37               	movlw	low STR_19
  4230  002C50  6FA3               	movwf	sprintf@f& (0+255),b
  4231  002C52  0EFE               	movlw	high STR_19
  4232  002C54  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4233  002C56  C1AF  F0A5         	movff	viewLogs@run+5,?_sprintf+4
  4234  002C5A  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  4235  002C5C  C1B0  F0A7         	movff	viewLogs@run+6,?_sprintf+6
  4236  002C60  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  4237  002C62  C1B1  F0A9         	movff	viewLogs@run+7,?_sprintf+8
  4238  002C66  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  4239  002C68  C1B2  F0AB         	movff	viewLogs@run+8,?_sprintf+10
  4240  002C6C  6BAC               	clrf	(?_sprintf+11)& (0+255),b
  4241  002C6E  EC4F  F01E         	call	_sprintf	;wreg free
  4242                           
  4243                           ;menu.c: 50: sprintf(msgs[2], "Remaining:\nB%d N%d S%d W%d", run.remainingB, run.remaini
      +                          ngN, run.remainingS, run.remainingW);
  4244  002C72  0E40               	movlw	low (viewLogs@msgs+64)
  4245  002C74  0100               	movlb	0	; () banked
  4246  002C76  6FA1               	movwf	sprintf@wh& (0+255),b
  4247  002C78  0E01               	movlw	high (viewLogs@msgs+64)
  4248  002C7A  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4249  002C7C  0E01               	movlw	low STR_20
  4250  002C7E  6FA3               	movwf	sprintf@f& (0+255),b
  4251  002C80  0EFE               	movlw	high STR_20
  4252  002C82  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4253  002C84  C1B3  F0A5         	movff	viewLogs@run+9,?_sprintf+4
  4254  002C88  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  4255  002C8A  C1B4  F0A7         	movff	viewLogs@run+10,?_sprintf+6
  4256  002C8E  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  4257  002C90  C1B5  F0A9         	movff	viewLogs@run+11,?_sprintf+8
  4258  002C94  6BAA               	clrf	(?_sprintf+9)& (0+255),b
  4259  002C96  C1B6  F0AB         	movff	viewLogs@run+12,?_sprintf+10
  4260  002C9A  6BAC               	clrf	(?_sprintf+11)& (0+255),b
  4261  002C9C  EC4F  F01E         	call	_sprintf	;wreg free
  4262                           
  4263                           ;menu.c: 51: sprintf(msgs[3], "Time:\n%d:%d", run.minutes, run.seconds);
  4264  002CA0  0E60               	movlw	low (viewLogs@msgs+96)
  4265  002CA2  0100               	movlb	0	; () banked
  4266  002CA4  6FA1               	movwf	sprintf@wh& (0+255),b
  4267  002CA6  0E01               	movlw	high (viewLogs@msgs+96)
  4268  002CA8  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4269  002CAA  0EDF               	movlw	low STR_21
  4270  002CAC  6FA3               	movwf	sprintf@f& (0+255),b
  4271  002CAE  0EFF               	movlw	high STR_21
  4272  002CB0  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4273  002CB2  C1AD  F0A5         	movff	viewLogs@run+3,?_sprintf+4
  4274  002CB6  6BA6               	clrf	(?_sprintf+5)& (0+255),b
  4275  002CB8  C1AE  F0A7         	movff	viewLogs@run+4,?_sprintf+6
  4276  002CBC  6BA8               	clrf	(?_sprintf+7)& (0+255),b
  4277  002CBE  EC4F  F01E         	call	_sprintf	;wreg free
  4278                           
  4279                           ;menu.c: 52: int j = (i-1)%4;
  4280  002CC2  0EFF               	movlw	255
  4281  002CC4  0100               	movlb	0	; () banked
  4282  002CC6  6FB3               	movwf	??_viewLogs& (0+255),b
  4283  002CC8  0EFF               	movlw	255
  4284  002CCA  6FB4               	movwf	(??_viewLogs+1)& (0+255),b
  4285  002CCC  C1A8  F0B5         	movff	viewLogs@i,??_viewLogs+2
  4286  002CD0  C1A9  F0B6         	movff	viewLogs@i+1,??_viewLogs+3
  4287  002CD4  51B3               	movf	??_viewLogs& (0+255),w,b
  4288  002CD6  27B5               	addwf	(??_viewLogs+2)& (0+255),f,b
  4289  002CD8  51B4               	movf	(??_viewLogs+1)& (0+255),w,b
  4290  002CDA  23B6               	addwfc	(??_viewLogs+3)& (0+255),f,b
  4291  002CDC  0E03               	movlw	3
  4292  002CDE  15B5               	andwf	(??_viewLogs+2)& (0+255),w,b
  4293  002CE0  0101               	movlb	1	; () banked
  4294  002CE2  6FA2               	movwf	viewLogs@j& (0+255),b
  4295  002CE4  6BA3               	clrf	(viewLogs@j+1)& (0+255),b
  4296                           
  4297                           ; BSR set to: 1
  4298                           ;menu.c: 53: printStringLCD(msgs[j]);
  4299  002CE6  C1A2  F0B3         	movff	viewLogs@j,??_viewLogs
  4300  002CEA  C1A3  F0B4         	movff	viewLogs@j+1,??_viewLogs+1
  4301  002CEE  0E05               	movlw	5
  4302  002CF0                     u8915:
  4303  002CF0  90D8               	bcf	status,0,c
  4304  002CF2  0100               	movlb	0	; () banked
  4305  002CF4  37B3               	rlcf	??_viewLogs& (0+255),f,b
  4306  002CF6  37B4               	rlcf	(??_viewLogs+1)& (0+255),f,b
  4307  002CF8  2EE8               	decfsz	wreg,f,c
  4308  002CFA  D7FA               	goto	u8915
  4309  002CFC  0E00               	movlw	low viewLogs@msgs
  4310  002CFE  25B3               	addwf	??_viewLogs& (0+255),w,b
  4311  002D00  6F86               	movwf	printStringLCD@string& (0+255),b
  4312  002D02  0E01               	movlw	high viewLogs@msgs
  4313  002D04  21B4               	addwfc	(??_viewLogs+1)& (0+255),w,b
  4314  002D06  6F87               	movwf	(printStringLCD@string+1)& (0+255),b
  4315  002D08  ECBD  F011         	call	_printStringLCD	;wreg free
  4316                           
  4317                           ;menu.c: 54: } else {
  4318  002D0C  D712               	goto	l376
  4319  002D0E                     l397:
  4320                           
  4321                           ;menu.c: 55: char msg[32];
  4322                           ;menu.c: 56: sprintf(msg, "Entry %u\nis empty", entry);
  4323  002D0E  0E80               	movlw	low viewLogs@msg
  4324  002D10  0100               	movlb	0	; () banked
  4325  002D12  6FA1               	movwf	sprintf@wh& (0+255),b
  4326  002D14  0E01               	movlw	high viewLogs@msg
  4327  002D16  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  4328  002D18  0E03               	movlw	low STR_22
  4329  002D1A  6FA3               	movwf	sprintf@f& (0+255),b
  4330  002D1C  0EFF               	movlw	high STR_22
  4331  002D1E  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  4332  002D20  C1A4  F0A5         	movff	viewLogs@entry,?_sprintf+4
  4333  002D24  C1A5  F0A6         	movff	viewLogs@entry+1,?_sprintf+5
  4334  002D28  EC4F  F01E         	call	_sprintf	;wreg free
  4335                           
  4336                           ;menu.c: 57: printStringLCD(msg);
  4337  002D2C  0E80               	movlw	low viewLogs@msg
  4338  002D2E  0100               	movlb	0	; () banked
  4339  002D30  6F86               	movwf	printStringLCD@string& (0+255),b
  4340  002D32  0E01               	movlw	high viewLogs@msg
  4341  002D34  6F87               	movwf	(printStringLCD@string+1)& (0+255),b
  4342  002D36  ECBD  F011         	call	_printStringLCD	;wreg free
  4343  002D3A  D6FB               	goto	l376
  4344  002D3C                     __end_of_viewLogs:
  4345                           	opt stack 0
  4346                           tblptru	equ	0xFF8
  4347                           tblptrh	equ	0xFF7
  4348                           tblptrl	equ	0xFF6
  4349                           tablat	equ	0xFF5
  4350                           prodh	equ	0xFF4
  4351                           prodl	equ	0xFF3
  4352                           intcon	equ	0xFF2
  4353                           postinc0	equ	0xFEE
  4354                           wreg	equ	0xFE8
  4355                           postdec1	equ	0xFE5
  4356                           fsr1l	equ	0xFE1
  4357                           indf2	equ	0xFDF
  4358                           postinc2	equ	0xFDE
  4359                           postdec2	equ	0xFDD
  4360                           fsr2h	equ	0xFDA
  4361                           fsr2l	equ	0xFD9
  4362                           status	equ	0xFD8
  4363                           
  4364 ;; *************** function _EEPROM_readLog *****************
  4365 ;; Defined at:
  4366 ;;		line 73 in file "EEPROM.c"
  4367 ;; Parameters:    Size  Location     Type
  4368 ;;  logNum          2    2[BANK0 ] unsigned int 
  4369 ;;  data            2    4[BANK0 ] PTR struct operationInfo
  4370 ;;		 -> viewLogs@run(13), 
  4371 ;; Auto vars:     Size  Location     Type
  4372 ;;  address         2   17[BANK0 ] unsigned int 
  4373 ;;  line5           1   16[BANK0 ] unsigned char 
  4374 ;;  line1           1   15[BANK0 ] unsigned char 
  4375 ;;  line7           1   14[BANK0 ] unsigned char 
  4376 ;;  line6           1   13[BANK0 ] unsigned char 
  4377 ;;  line4           1   12[BANK0 ] unsigned char 
  4378 ;;  line3           1   11[BANK0 ] unsigned char 
  4379 ;;  line2           1   10[BANK0 ] unsigned char 
  4380 ;;  line0           1    9[BANK0 ] unsigned char 
  4381 ;; Return value:  Size  Location     Type
  4382 ;;                  2    2[BANK0 ] int 
  4383 ;; Registers used:
  4384 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4385 ;; Tracked objects:
  4386 ;;		On entry : 0/0
  4387 ;;		On exit  : 0/0
  4388 ;;		Unchanged: 0/0
  4389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4390 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4391 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4392 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4393 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4394 ;;Total ram usage:       17 bytes
  4395 ;; Hardware stack levels used:    1
  4396 ;; Hardware stack levels required when called:    5
  4397 ;; This function calls:
  4398 ;;		_EEPROM_read
  4399 ;; This function is called by:
  4400 ;;		_viewLogs
  4401 ;; This function uses a non-reentrant model
  4402 ;;
  4403                           
  4404                           	psect	text4
  4405  0028C6                     __ptext4:
  4406                           	opt stack 0
  4407  0028C6                     _EEPROM_readLog:
  4408                           	opt stack 23
  4409                           
  4410                           ;EEPROM.c: 74: unsigned int address = logNum*8;
  4411                           
  4412                           ;incstack = 0
  4413  0028C6  C082  F086         	movff	EEPROM_readLog@logNum,??_EEPROM_readLog
  4414  0028CA  C083  F087         	movff	EEPROM_readLog@logNum+1,??_EEPROM_readLog+1
  4415  0028CE  0100               	movlb	0	; () banked
  4416  0028D0  90D8               	bcf	status,0,c
  4417  0028D2  3786               	rlcf	??_EEPROM_readLog& (0+255),f,b
  4418  0028D4  3787               	rlcf	(??_EEPROM_readLog+1)& (0+255),f,b
  4419  0028D6  90D8               	bcf	status,0,c
  4420  0028D8  3786               	rlcf	??_EEPROM_readLog& (0+255),f,b
  4421  0028DA  3787               	rlcf	(??_EEPROM_readLog+1)& (0+255),f,b
  4422  0028DC  90D8               	bcf	status,0,c
  4423  0028DE  3786               	rlcf	??_EEPROM_readLog& (0+255),f,b
  4424  0028E0  3787               	rlcf	(??_EEPROM_readLog+1)& (0+255),f,b
  4425  0028E2  C086  F091         	movff	??_EEPROM_readLog,EEPROM_readLog@address
  4426  0028E6  C087  F092         	movff	??_EEPROM_readLog+1,EEPROM_readLog@address+1
  4427                           
  4428                           ; BSR set to: 0
  4429                           ;EEPROM.c: 76: unsigned char line0 = EEPROM_read(address);
  4430  0028EA  C091  F080         	movff	EEPROM_readLog@address,EEPROM_read@address
  4431  0028EE  C092  F081         	movff	EEPROM_readLog@address+1,EEPROM_read@address+1
  4432  0028F2  ECBD  F01F         	call	_EEPROM_read	;wreg free
  4433  0028F6  0100               	movlb	0	; () banked
  4434  0028F8  6F89               	movwf	EEPROM_readLog@line0& (0+255),b
  4435                           
  4436                           ; BSR set to: 0
  4437                           ;EEPROM.c: 77: unsigned char line1 = EEPROM_read(address+1);
  4438  0028FA  0E01               	movlw	1
  4439  0028FC  2591               	addwf	EEPROM_readLog@address& (0+255),w,b
  4440  0028FE  6F80               	movwf	EEPROM_read@address& (0+255),b
  4441  002900  0E00               	movlw	0
  4442  002902  2192               	addwfc	(EEPROM_readLog@address+1)& (0+255),w,b
  4443  002904  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  4444  002906  ECBD  F01F         	call	_EEPROM_read	;wreg free
  4445  00290A  0100               	movlb	0	; () banked
  4446  00290C  6F8F               	movwf	EEPROM_readLog@line1& (0+255),b
  4447                           
  4448                           ; BSR set to: 0
  4449                           ;EEPROM.c: 78: unsigned char line2 = EEPROM_read(address+2);
  4450  00290E  0E02               	movlw	2
  4451  002910  2591               	addwf	EEPROM_readLog@address& (0+255),w,b
  4452  002912  6F80               	movwf	EEPROM_read@address& (0+255),b
  4453  002914  0E00               	movlw	0
  4454  002916  2192               	addwfc	(EEPROM_readLog@address+1)& (0+255),w,b
  4455  002918  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  4456  00291A  ECBD  F01F         	call	_EEPROM_read	;wreg free
  4457  00291E  0100               	movlb	0	; () banked
  4458  002920  6F8A               	movwf	EEPROM_readLog@line2& (0+255),b
  4459                           
  4460                           ; BSR set to: 0
  4461                           ;EEPROM.c: 79: unsigned char line3 = EEPROM_read(address+3);
  4462  002922  0E03               	movlw	3
  4463  002924  2591               	addwf	EEPROM_readLog@address& (0+255),w,b
  4464  002926  6F80               	movwf	EEPROM_read@address& (0+255),b
  4465  002928  0E00               	movlw	0
  4466  00292A  2192               	addwfc	(EEPROM_readLog@address+1)& (0+255),w,b
  4467  00292C  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  4468  00292E  ECBD  F01F         	call	_EEPROM_read	;wreg free
  4469  002932  0100               	movlb	0	; () banked
  4470  002934  6F8B               	movwf	EEPROM_readLog@line3& (0+255),b
  4471                           
  4472                           ; BSR set to: 0
  4473                           ;EEPROM.c: 80: unsigned char line4 = EEPROM_read(address+4);
  4474  002936  0E04               	movlw	4
  4475  002938  2591               	addwf	EEPROM_readLog@address& (0+255),w,b
  4476  00293A  6F80               	movwf	EEPROM_read@address& (0+255),b
  4477  00293C  0E00               	movlw	0
  4478  00293E  2192               	addwfc	(EEPROM_readLog@address+1)& (0+255),w,b
  4479  002940  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  4480  002942  ECBD  F01F         	call	_EEPROM_read	;wreg free
  4481  002946  0100               	movlb	0	; () banked
  4482  002948  6F8C               	movwf	EEPROM_readLog@line4& (0+255),b
  4483                           
  4484                           ; BSR set to: 0
  4485                           ;EEPROM.c: 81: unsigned char line5 = EEPROM_read(address+5);
  4486  00294A  0E05               	movlw	5
  4487  00294C  2591               	addwf	EEPROM_readLog@address& (0+255),w,b
  4488  00294E  6F80               	movwf	EEPROM_read@address& (0+255),b
  4489  002950  0E00               	movlw	0
  4490  002952  2192               	addwfc	(EEPROM_readLog@address+1)& (0+255),w,b
  4491  002954  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  4492  002956  ECBD  F01F         	call	_EEPROM_read	;wreg free
  4493  00295A  0100               	movlb	0	; () banked
  4494  00295C  6F90               	movwf	EEPROM_readLog@line5& (0+255),b
  4495                           
  4496                           ; BSR set to: 0
  4497                           ;EEPROM.c: 82: unsigned char line6 = EEPROM_read(address+6);
  4498  00295E  0E06               	movlw	6
  4499  002960  2591               	addwf	EEPROM_readLog@address& (0+255),w,b
  4500  002962  6F80               	movwf	EEPROM_read@address& (0+255),b
  4501  002964  0E00               	movlw	0
  4502  002966  2192               	addwfc	(EEPROM_readLog@address+1)& (0+255),w,b
  4503  002968  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  4504  00296A  ECBD  F01F         	call	_EEPROM_read	;wreg free
  4505  00296E  0100               	movlb	0	; () banked
  4506  002970  6F8D               	movwf	EEPROM_readLog@line6& (0+255),b
  4507                           
  4508                           ; BSR set to: 0
  4509                           ;EEPROM.c: 83: unsigned char line7 = EEPROM_read(address+7);
  4510  002972  0E07               	movlw	7
  4511  002974  2591               	addwf	EEPROM_readLog@address& (0+255),w,b
  4512  002976  6F80               	movwf	EEPROM_read@address& (0+255),b
  4513  002978  0E00               	movlw	0
  4514  00297A  2192               	addwfc	(EEPROM_readLog@address+1)& (0+255),w,b
  4515  00297C  6F81               	movwf	(EEPROM_read@address+1)& (0+255),b
  4516  00297E  ECBD  F01F         	call	_EEPROM_read	;wreg free
  4517  002982  0100               	movlb	0	; () banked
  4518  002984  6F8E               	movwf	EEPROM_readLog@line7& (0+255),b
  4519                           
  4520                           ; BSR set to: 0
  4521                           ;EEPROM.c: 85: if ((line7 & 0b1) == 0) {
  4522  002986  B18E               	btfsc	EEPROM_readLog@line7& (0+255),0,b
  4523  002988  D005               	goto	l876
  4524                           
  4525                           ; BSR set to: 0
  4526                           ;EEPROM.c: 86: return 0;
  4527  00298A  0E00               	movlw	0
  4528  00298C  6F83               	movwf	(?_EEPROM_readLog+1)& (0+255),b
  4529  00298E  0E00               	movlw	0
  4530  002990  6F82               	movwf	?_EEPROM_readLog& (0+255),b
  4531                           
  4532                           ; BSR set to: 0
  4533  002992  0012               	return	
  4534  002994                     l876:
  4535                           
  4536                           ; BSR set to: 0
  4537                           ;EEPROM.c: 87: }
  4538                           ;EEPROM.c: 90: data->year = (unsigned char)(line0 >> 3);
  4539                           
  4540                           ; BSR set to: 0
  4541  002994  3989               	swapf	EEPROM_readLog@line0& (0+255),w,b
  4542  002996  46E8               	rlncf	wreg,f,c
  4543  002998  0B1F               	andlw	31
  4544  00299A  C084  FFD9         	movff	EEPROM_readLog@data,fsr2l
  4545  00299E  C085  FFDA         	movff	EEPROM_readLog@data+1,fsr2h
  4546  0029A2  6EDF               	movwf	indf2,c
  4547                           
  4548                           ;EEPROM.c: 91: data->day = (unsigned char)(((line0 & 0b00000111) << 2) | (line1 >> 6));
  4549  0029A4  EE20 F001          	lfsr	2,1
  4550  0029A8  5184               	movf	EEPROM_readLog@data& (0+255),w,b
  4551  0029AA  26D9               	addwf	fsr2l,f,c
  4552  0029AC  5185               	movf	(EEPROM_readLog@data+1)& (0+255),w,b
  4553  0029AE  22DA               	addwfc	fsr2h,f,c
  4554  0029B0  C08F  F086         	movff	EEPROM_readLog@line1,??_EEPROM_readLog
  4555  0029B4  0E06               	movlw	6
  4556  0029B6  6F87               	movwf	(??_EEPROM_readLog+1)& (0+255),b
  4557  0029B8                     u8465:
  4558  0029B8  90D8               	bcf	status,0,c
  4559  0029BA  3386               	rrcf	??_EEPROM_readLog& (0+255),f,b
  4560  0029BC  2F87               	decfsz	(??_EEPROM_readLog+1)& (0+255),f,b
  4561  0029BE  D7FC               	goto	u8465
  4562  0029C0  C089  F088         	movff	EEPROM_readLog@line0,??_EEPROM_readLog+2
  4563  0029C4  0E07               	movlw	7
  4564  0029C6  1788               	andwf	(??_EEPROM_readLog+2)& (0+255),f,b
  4565  0029C8  90D8               	bcf	status,0,c
  4566  0029CA  3788               	rlcf	(??_EEPROM_readLog+2)& (0+255),f,b
  4567  0029CC  90D8               	bcf	status,0,c
  4568  0029CE  3588               	rlcf	(??_EEPROM_readLog+2)& (0+255),w,b
  4569  0029D0  1186               	iorwf	??_EEPROM_readLog& (0+255),w,b
  4570  0029D2  6EDF               	movwf	indf2,c
  4571                           
  4572                           ;EEPROM.c: 92: data->month = (unsigned char)((line1 >> 2) & 0b00001111);
  4573  0029D4  EE20 F002          	lfsr	2,2
  4574  0029D8  5184               	movf	EEPROM_readLog@data& (0+255),w,b
  4575  0029DA  26D9               	addwf	fsr2l,f,c
  4576  0029DC  5185               	movf	(EEPROM_readLog@data+1)& (0+255),w,b
  4577  0029DE  22DA               	addwfc	fsr2h,f,c
  4578  0029E0  418F               	rrncf	EEPROM_readLog@line1& (0+255),w,b
  4579  0029E2  42E8               	rrncf	wreg,f,c
  4580  0029E4  0B3F               	andlw	63
  4581  0029E6  0B0F               	andlw	15
  4582  0029E8  6EDF               	movwf	indf2,c
  4583                           
  4584                           ;EEPROM.c: 93: data->packagedN = (unsigned char)(((line1 & 0b00000011) << 3) | (line2 >>
      +                           5));
  4585  0029EA  EE20 F006          	lfsr	2,6
  4586  0029EE  5184               	movf	EEPROM_readLog@data& (0+255),w,b
  4587  0029F0  26D9               	addwf	fsr2l,f,c
  4588  0029F2  5185               	movf	(EEPROM_readLog@data+1)& (0+255),w,b
  4589  0029F4  22DA               	addwfc	fsr2h,f,c
  4590  0029F6  C08A  F086         	movff	EEPROM_readLog@line2,??_EEPROM_readLog
  4591  0029FA  0E05               	movlw	5
  4592  0029FC  6F87               	movwf	(??_EEPROM_readLog+1)& (0+255),b
  4593  0029FE                     u8475:
  4594  0029FE  90D8               	bcf	status,0,c
  4595  002A00  3386               	rrcf	??_EEPROM_readLog& (0+255),f,b
  4596  002A02  2F87               	decfsz	(??_EEPROM_readLog+1)& (0+255),f,b
  4597  002A04  D7FC               	goto	u8475
  4598  002A06  C08F  F088         	movff	EEPROM_readLog@line1,??_EEPROM_readLog+2
  4599  002A0A  0E03               	movlw	3
  4600  002A0C  1788               	andwf	(??_EEPROM_readLog+2)& (0+255),f,b
  4601  002A0E  90D8               	bcf	status,0,c
  4602  002A10  3788               	rlcf	(??_EEPROM_readLog+2)& (0+255),f,b
  4603  002A12  90D8               	bcf	status,0,c
  4604  002A14  3788               	rlcf	(??_EEPROM_readLog+2)& (0+255),f,b
  4605  002A16  90D8               	bcf	status,0,c
  4606  002A18  3588               	rlcf	(??_EEPROM_readLog+2)& (0+255),w,b
  4607  002A1A  1186               	iorwf	??_EEPROM_readLog& (0+255),w,b
  4608  002A1C  6EDF               	movwf	indf2,c
  4609                           
  4610                           ;EEPROM.c: 94: data->packagedW = (unsigned char)(line2 & 0b00011111);
  4611  002A1E  EE20 F008          	lfsr	2,8
  4612  002A22  5184               	movf	EEPROM_readLog@data& (0+255),w,b
  4613  002A24  26D9               	addwf	fsr2l,f,c
  4614  002A26  5185               	movf	(EEPROM_readLog@data+1)& (0+255),w,b
  4615  002A28  22DA               	addwfc	fsr2h,f,c
  4616  002A2A  518A               	movf	EEPROM_readLog@line2& (0+255),w,b
  4617  002A2C  0B1F               	andlw	31
  4618  002A2E  6EDF               	movwf	indf2,c
  4619                           
  4620                           ;EEPROM.c: 95: data->packagedB = (unsigned char)(line3 >> 4);
  4621  002A30  EE20 F005          	lfsr	2,5
  4622  002A34  5184               	movf	EEPROM_readLog@data& (0+255),w,b
  4623  002A36  26D9               	addwf	fsr2l,f,c
  4624  002A38  5185               	movf	(EEPROM_readLog@data+1)& (0+255),w,b
  4625  002A3A  22DA               	addwfc	fsr2h,f,c
  4626  002A3C  398B               	swapf	EEPROM_readLog@line3& (0+255),w,b
  4627  002A3E  0B0F               	andlw	15
  4628  002A40  6EDF               	movwf	indf2,c
  4629                           
  4630                           ;EEPROM.c: 96: data->packagedS = (unsigned char)(line3 & 0b00001111);
  4631  002A42  EE20 F007          	lfsr	2,7
  4632  002A46  5184               	movf	EEPROM_readLog@data& (0+255),w,b
  4633  002A48  26D9               	addwf	fsr2l,f,c
  4634  002A4A  5185               	movf	(EEPROM_readLog@data+1)& (0+255),w,b
  4635  002A4C  22DA               	addwfc	fsr2h,f,c
  4636  002A4E  518B               	movf	EEPROM_readLog@line3& (0+255),w,b
  4637  002A50  0B0F               	andlw	15
  4638  002A52  6EDF               	movwf	indf2,c
  4639                           
  4640                           ;EEPROM.c: 97: data->remainingB = (unsigned char)(line4 >> 3);
  4641  002A54  EE20 F009          	lfsr	2,9
  4642  002A58  5184               	movf	EEPROM_readLog@data& (0+255),w,b
  4643  002A5A  26D9               	addwf	fsr2l,f,c
  4644  002A5C  5185               	movf	(EEPROM_readLog@data+1)& (0+255),w,b
  4645  002A5E  22DA               	addwfc	fsr2h,f,c
  4646  002A60  398C               	swapf	EEPROM_readLog@line4& (0+255),w,b
  4647  002A62  46E8               	rlncf	wreg,f,c
  4648  002A64  0B1F               	andlw	31
  4649  002A66  6EDF               	movwf	indf2,c
  4650                           
  4651                           ;EEPROM.c: 98: data->remainingN = (unsigned char)(((line4 & 0b00000111) << 2) | (line5 >
      +                          > 6));
  4652  002A68  EE20 F00A          	lfsr	2,10
  4653  002A6C  5184               	movf	EEPROM_readLog@data& (0+255),w,b
  4654  002A6E  26D9               	addwf	fsr2l,f,c
  4655  002A70  5185               	movf	(EEPROM_readLog@data+1)& (0+255),w,b
  4656  002A72  22DA               	addwfc	fsr2h,f,c
  4657  002A74  C090  F086         	movff	EEPROM_readLog@line5,??_EEPROM_readLog
  4658  002A78  0E06               	movlw	6
  4659  002A7A  6F87               	movwf	(??_EEPROM_readLog+1)& (0+255),b
  4660  002A7C                     u8485:
  4661  002A7C  90D8               	bcf	status,0,c
  4662  002A7E  3386               	rrcf	??_EEPROM_readLog& (0+255),f,b
  4663  002A80  2F87               	decfsz	(??_EEPROM_readLog+1)& (0+255),f,b
  4664  002A82  D7FC               	goto	u8485
  4665  002A84  C08C  F088         	movff	EEPROM_readLog@line4,??_EEPROM_readLog+2
  4666  002A88  0E07               	movlw	7
  4667  002A8A  1788               	andwf	(??_EEPROM_readLog+2)& (0+255),f,b
  4668  002A8C  90D8               	bcf	status,0,c
  4669  002A8E  3788               	rlcf	(??_EEPROM_readLog+2)& (0+255),f,b
  4670  002A90  90D8               	bcf	status,0,c
  4671  002A92  3588               	rlcf	(??_EEPROM_readLog+2)& (0+255),w,b
  4672  002A94  1186               	iorwf	??_EEPROM_readLog& (0+255),w,b
  4673  002A96  6EDF               	movwf	indf2,c
  4674                           
  4675                           ;EEPROM.c: 99: data->remainingS = (unsigned char)((line5 >> 1) & 0b00011111);
  4676  002A98  EE20 F00B          	lfsr	2,11
  4677  002A9C  5184               	movf	EEPROM_readLog@data& (0+255),w,b
  4678  002A9E  26D9               	addwf	fsr2l,f,c
  4679  002AA0  5185               	movf	(EEPROM_readLog@data+1)& (0+255),w,b
  4680  002AA2  22DA               	addwfc	fsr2h,f,c
  4681  002AA4  90D8               	bcf	status,0,c
  4682  002AA6  3190               	rrcf	EEPROM_readLog@line5& (0+255),w,b
  4683  002AA8  0B1F               	andlw	31
  4684  002AAA  6EDF               	movwf	indf2,c
  4685                           
  4686                           ;EEPROM.c: 100: data->remainingW = (unsigned char)(((line5 & 0b00000001) << 5) | (line6 
      +                          >> 3));
  4687  002AAC  EE20 F00C          	lfsr	2,12
  4688  002AB0  5184               	movf	EEPROM_readLog@data& (0+255),w,b
  4689  002AB2  26D9               	addwf	fsr2l,f,c
  4690  002AB4  5185               	movf	(EEPROM_readLog@data+1)& (0+255),w,b
  4691  002AB6  22DA               	addwfc	fsr2h,f,c
  4692  002AB8  C08D  F086         	movff	EEPROM_readLog@line6,??_EEPROM_readLog
  4693  002ABC  90D8               	bcf	status,0,c
  4694  002ABE  3386               	rrcf	??_EEPROM_readLog& (0+255),f,b
  4695  002AC0  90D8               	bcf	status,0,c
  4696  002AC2  3386               	rrcf	??_EEPROM_readLog& (0+255),f,b
  4697  002AC4  90D8               	bcf	status,0,c
  4698  002AC6  3386               	rrcf	??_EEPROM_readLog& (0+255),f,b
  4699  002AC8  C090  F087         	movff	EEPROM_readLog@line5,??_EEPROM_readLog+1
  4700  002ACC  0E01               	movlw	1
  4701  002ACE  1787               	andwf	(??_EEPROM_readLog+1)& (0+255),f,b
  4702  002AD0  0E05               	movlw	5
  4703  002AD2  6F88               	movwf	(??_EEPROM_readLog+2)& (0+255),b
  4704  002AD4                     u8495:
  4705  002AD4  90D8               	bcf	status,0,c
  4706  002AD6  3787               	rlcf	(??_EEPROM_readLog+1)& (0+255),f,b
  4707  002AD8  2F88               	decfsz	(??_EEPROM_readLog+2)& (0+255),f,b
  4708  002ADA  D7FC               	goto	u8495
  4709  002ADC  5187               	movf	(??_EEPROM_readLog+1)& (0+255),w,b
  4710  002ADE  1186               	iorwf	??_EEPROM_readLog& (0+255),w,b
  4711  002AE0  6EDF               	movwf	indf2,c
  4712                           
  4713                           ;EEPROM.c: 101: data->minutes = (unsigned char)(line6 & 0b00000111);
  4714  002AE2  EE20 F003          	lfsr	2,3
  4715  002AE6  5184               	movf	EEPROM_readLog@data& (0+255),w,b
  4716  002AE8  26D9               	addwf	fsr2l,f,c
  4717  002AEA  5185               	movf	(EEPROM_readLog@data+1)& (0+255),w,b
  4718  002AEC  22DA               	addwfc	fsr2h,f,c
  4719  002AEE  518D               	movf	EEPROM_readLog@line6& (0+255),w,b
  4720  002AF0  0B07               	andlw	7
  4721  002AF2  6EDF               	movwf	indf2,c
  4722                           
  4723                           ;EEPROM.c: 102: data->seconds = (unsigned char)(line7 >> 2);
  4724  002AF4  EE20 F004          	lfsr	2,4
  4725  002AF8  5184               	movf	EEPROM_readLog@data& (0+255),w,b
  4726  002AFA  26D9               	addwf	fsr2l,f,c
  4727  002AFC  5185               	movf	(EEPROM_readLog@data+1)& (0+255),w,b
  4728  002AFE  22DA               	addwfc	fsr2h,f,c
  4729  002B00  418E               	rrncf	EEPROM_readLog@line7& (0+255),w,b
  4730  002B02  42E8               	rrncf	wreg,f,c
  4731  002B04  0B3F               	andlw	63
  4732  002B06  6EDF               	movwf	indf2,c
  4733                           
  4734                           ; BSR set to: 0
  4735                           ;EEPROM.c: 104: return 1;
  4736  002B08  0E00               	movlw	0
  4737  002B0A  6F83               	movwf	(?_EEPROM_readLog+1)& (0+255),b
  4738  002B0C  0E01               	movlw	1
  4739  002B0E  6F82               	movwf	?_EEPROM_readLog& (0+255),b
  4740  002B10  0012               	return	
  4741  002B12                     __end_of_EEPROM_readLog:
  4742                           	opt stack 0
  4743                           tblptru	equ	0xFF8
  4744                           tblptrh	equ	0xFF7
  4745                           tblptrl	equ	0xFF6
  4746                           tablat	equ	0xFF5
  4747                           prodh	equ	0xFF4
  4748                           prodl	equ	0xFF3
  4749                           intcon	equ	0xFF2
  4750                           postinc0	equ	0xFEE
  4751                           wreg	equ	0xFE8
  4752                           postdec1	equ	0xFE5
  4753                           fsr1l	equ	0xFE1
  4754                           indf2	equ	0xFDF
  4755                           postinc2	equ	0xFDE
  4756                           postdec2	equ	0xFDD
  4757                           fsr2h	equ	0xFDA
  4758                           fsr2l	equ	0xFD9
  4759                           status	equ	0xFD8
  4760                           
  4761 ;; *************** function _EEPROM_read *****************
  4762 ;; Defined at:
  4763 ;;		line 32 in file "EEPROM.c"
  4764 ;; Parameters:    Size  Location     Type
  4765 ;;  address         2    0[BANK0 ] unsigned int 
  4766 ;; Auto vars:     Size  Location     Type
  4767 ;;		None
  4768 ;; Return value:  Size  Location     Type
  4769 ;;                  1    wreg      unsigned char 
  4770 ;; Registers used:
  4771 ;;		wreg, status,2
  4772 ;; Tracked objects:
  4773 ;;		On entry : 0/0
  4774 ;;		On exit  : 0/0
  4775 ;;		Unchanged: 0/0
  4776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4777 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4780 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4781 ;;Total ram usage:        2 bytes
  4782 ;; Hardware stack levels used:    1
  4783 ;; Hardware stack levels required when called:    4
  4784 ;; This function calls:
  4785 ;;		Nothing
  4786 ;; This function is called by:
  4787 ;;		_EEPROM_readLog
  4788 ;; This function uses a non-reentrant model
  4789 ;;
  4790                           
  4791                           	psect	text5
  4792  003F7A                     __ptext5:
  4793                           	opt stack 0
  4794  003F7A                     _EEPROM_read:
  4795                           	opt stack 23
  4796                           
  4797                           ;EEPROM.c: 34: EEADRH = (unsigned char)(address >> 8);
  4798                           
  4799                           ; BSR set to: 0
  4800                           ;incstack = 0
  4801  003F7A  0100               	movlb	0	; () banked
  4802  003F7C  5181               	movf	(EEPROM_read@address+1)& (0+255),w,b
  4803  003F7E  6EAA               	movwf	4010,c	;volatile
  4804                           
  4805                           ; BSR set to: 0
  4806                           ;EEPROM.c: 35: EEADR = (unsigned char)address;
  4807  003F80  C080  FFA9         	movff	EEPROM_read@address,4009	;volatile
  4808                           
  4809                           ; BSR set to: 0
  4810                           ;EEPROM.c: 37: EECON1bits.EEPGD = 0;
  4811  003F84  9EA6               	bcf	4006,7,c	;volsfr
  4812                           
  4813                           ; BSR set to: 0
  4814                           ;EEPROM.c: 38: EECON1bits.RD = 1;
  4815  003F86  80A6               	bsf	4006,0,c	;volsfr
  4816  003F88                     
  4817                           ; BSR set to: 0
  4818  003F88  B0A6               	btfsc	4006,0,c	;volsfr
  4819  003F8A  D7FE               	goto	l865
  4820                           
  4821                           ;EEPROM.c: 42: return EEDATA;
  4822  003F8C  50A8               	movf	4008,w,c	;volatile
  4823  003F8E  0012               	return	
  4824  003F90                     __end_of_EEPROM_read:
  4825                           	opt stack 0
  4826                           tblptru	equ	0xFF8
  4827                           tblptrh	equ	0xFF7
  4828                           tblptrl	equ	0xFF6
  4829                           tablat	equ	0xFF5
  4830                           prodh	equ	0xFF4
  4831                           prodl	equ	0xFF3
  4832                           intcon	equ	0xFF2
  4833                           postinc0	equ	0xFEE
  4834                           wreg	equ	0xFE8
  4835                           postdec1	equ	0xFE5
  4836                           fsr1l	equ	0xFE1
  4837                           indf2	equ	0xFDF
  4838                           postinc2	equ	0xFDE
  4839                           postdec2	equ	0xFDD
  4840                           fsr2h	equ	0xFDA
  4841                           fsr2l	equ	0xFD9
  4842                           status	equ	0xFD8
  4843                           
  4844 ;; *************** function _packaging *****************
  4845 ;; Defined at:
  4846 ;;		line 116 in file "main.c"
  4847 ;; Parameters:    Size  Location     Type
  4848 ;;		None
  4849 ;; Auto vars:     Size  Location     Type
  4850 ;;  instr           2  118[BANK1 ] unsigned char [2]
  4851 ;;  msg3           50   34[BANK1 ] unsigned char [50]
  4852 ;;  msg            34    0[BANK1 ] unsigned char [34]
  4853 ;;  msg2           32   84[BANK1 ] unsigned char [32]
  4854 ;;  mult            2  130[BANK1 ] int 
  4855 ;;  set             2  128[BANK1 ] PTR unsigned char 
  4856 ;;		 -> fastenerMatrix(84), 
  4857 ;;  compartmentN    2  132[BANK1 ] int 
  4858 ;;  instr           2  116[BANK1 ] unsigned char [2]
  4859 ;; Return value:  Size  Location     Type
  4860 ;;                  1    wreg      void 
  4861 ;; Registers used:
  4862 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4863 ;; Tracked objects:
  4864 ;;		On entry : 0/0
  4865 ;;		On exit  : 0/0
  4866 ;;		Unchanged: 0/0
  4867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4869 ;;      Locals:         0       0     134       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4870 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4871 ;;      Totals:         0       6     134       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4872 ;;Total ram usage:      140 bytes
  4873 ;; Hardware stack levels used:    1
  4874 ;; Hardware stack levels required when called:    8
  4875 ;; This function calls:
  4876 ;;		_I2C_Send
  4877 ;;		___wmul
  4878 ;;		_lcdInst
  4879 ;;		_packageCompartment
  4880 ;;		_printf
  4881 ;;		_sprintf
  4882 ;; This function is called by:
  4883 ;;		_mainMenu
  4884 ;; This function uses a non-reentrant model
  4885 ;;
  4886                           
  4887                           	psect	text6
  4888  001BE8                     __ptext6:
  4889                           	opt stack 0
  4890  001BE8                     _packaging:
  4891                           	opt stack 21
  4892                           
  4893                           ;main.c: 117: int compartmentNum;
  4894                           ;main.c: 122: dispensed.b = 0;
  4895                           
  4896                           ;incstack = 0
  4897  001BE8  0E00               	movlw	0
  4898  001BEA  0100               	movlb	0	; () banked
  4899  001BEC  6FD6               	movwf	(_dispensed+1)& (0+255),b
  4900  001BEE  0E00               	movlw	0
  4901  001BF0  6FD5               	movwf	_dispensed& (0+255),b
  4902                           
  4903                           ;main.c: 123: dispensed.n = 0;
  4904  001BF2  0E00               	movlw	0
  4905  001BF4  6FD8               	movwf	(_dispensed+3)& (0+255),b
  4906  001BF6  0E00               	movlw	0
  4907  001BF8  6FD7               	movwf	(_dispensed+2)& (0+255),b
  4908                           
  4909                           ;main.c: 124: dispensed.s = 0;
  4910  001BFA  0E00               	movlw	0
  4911  001BFC  6FDA               	movwf	(_dispensed+5)& (0+255),b
  4912  001BFE  0E00               	movlw	0
  4913  001C00  6FD9               	movwf	(_dispensed+4)& (0+255),b
  4914                           
  4915                           ;main.c: 125: dispensed.w = 0;
  4916  001C02  0E00               	movlw	0
  4917  001C04  6FDC               	movwf	(_dispensed+7)& (0+255),b
  4918  001C06  0E00               	movlw	0
  4919  001C08  6FDB               	movwf	(_dispensed+6)& (0+255),b
  4920                           
  4921                           ; BSR set to: 0
  4922                           ;main.c: 127: I2C_Send(nanoAddr, "\1Entered the packaging function\0");
  4923  001C0A  0E86               	movlw	low STR_7
  4924  001C0C  6F83               	movwf	I2C_Send@data& (0+255),b
  4925  001C0E  0EFD               	movlw	high STR_7
  4926  001C10  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  4927  001C12  0EA3               	movlw	low _nanoAddr
  4928  001C14  6EF6               	movwf	tblptrl,c
  4929  001C16                     	if	1	;There is more than 1 active tblptr byte
  4930  001C16  0EFB               	movlw	high _nanoAddr
  4931  001C18  6EF7               	movwf	tblptrh,c
  4932  001C1A                     	endif
  4933  001C1A                     	if	1	;There are 3 active tblptr bytes
  4934  001C1A  0E00               	movlw	low (_nanoAddr shr (0+16))
  4935  001C1C  6EF8               	movwf	tblptru,c
  4936  001C1E                     	endif
  4937  001C1E  0008               	tblrd		*
  4938  001C20  50F5               	movf	tablat,w,c
  4939  001C22  ECD9  F01B         	call	_I2C_Send
  4940                           
  4941                           ;main.c: 128: char instr[2] = {8, 0};
  4942  001C26  C1EF  F174         	movff	packaging@F3227,packaging@instr
  4943  001C2A  C1F0  F175         	movff	packaging@F3227+1,packaging@instr+1
  4944                           
  4945                           ;main.c: 129: I2C_Send(nanoAddr, &instr);
  4946  001C2E  0E74               	movlw	low packaging@instr
  4947  001C30  0100               	movlb	0	; () banked
  4948  001C32  6F83               	movwf	I2C_Send@data& (0+255),b
  4949  001C34  0E01               	movlw	high packaging@instr
  4950  001C36  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  4951  001C38  0EA3               	movlw	low _nanoAddr
  4952  001C3A  6EF6               	movwf	tblptrl,c
  4953  001C3C                     	if	1	;There is more than 1 active tblptr byte
  4954  001C3C  0EFB               	movlw	high _nanoAddr
  4955  001C3E  6EF7               	movwf	tblptrh,c
  4956  001C40                     	endif
  4957  001C40                     	if	1	;There are 3 active tblptr bytes
  4958  001C40  0E00               	movlw	low (_nanoAddr shr (0+16))
  4959  001C42  6EF8               	movwf	tblptru,c
  4960  001C44                     	endif
  4961  001C44  0008               	tblrd		*
  4962  001C46  50F5               	movf	tablat,w,c
  4963  001C48  ECD9  F01B         	call	_I2C_Send
  4964  001C4C  BA80               	btfsc	3968,5,c	;volatile
  4965  001C4E  D7FE               	goto	l128
  4966                           
  4967                           ;main.c: 133: for (compartmentNum = 8; compartmentNum > 0; compartmentNum--) {
  4968  001C50  0E00               	movlw	0
  4969  001C52  0101               	movlb	1	; () banked
  4970  001C54  6F85               	movwf	(packaging@compartmentNum+1)& (0+255),b
  4971  001C56  0E08               	movlw	8
  4972  001C58  6F84               	movwf	packaging@compartmentNum& (0+255),b
  4973                           
  4974                           ; BSR set to: 1
  4975  001C5A  BF85               	btfsc	(packaging@compartmentNum+1)& (0+255),7,b
  4976  001C5C  0012               	return	
  4977  001C5E  5185               	movf	(packaging@compartmentNum+1)& (0+255),w,b
  4978  001C60  E103               	bnz	l6540
  4979  001C62  0584               	decf	packaging@compartmentNum& (0+255),w,b
  4980  001C64  A0D8               	btfss	status,0,c
  4981  001C66  0012               	return	
  4982  001C68                     l6540:
  4983                           
  4984                           ; BSR set to: 1
  4985                           ;main.c: 134: char msg[] = "\1Started packaging compartment x\0";
  4986  001C68  EE22  F0A6         	lfsr	2,packaging@F3229
  4987  001C6C  EE11  F000         	lfsr	1,packaging@msg
  4988  001C70  0E21               	movlw	33
  4989  001C72                     u8561:
  4990  001C72  CFDB FFE3          	movff	plusw2,plusw1
  4991  001C76  06E8               	decf	wreg,f,c
  4992  001C78  E2FC               	bc	u8561
  4993                           
  4994                           ; BSR set to: 1
  4995                           ;main.c: 135: msg[31] = compartmentNum + 48;
  4996  001C7A  5184               	movf	packaging@compartmentNum& (0+255),w,b
  4997  001C7C  0F30               	addlw	48
  4998  001C7E  6F1F               	movwf	(packaging@msg+31)& (0+255),b
  4999                           
  5000                           ; BSR set to: 1
  5001                           ;main.c: 136: I2C_Send(nanoAddr, msg);
  5002  001C80  0E00               	movlw	low packaging@msg
  5003  001C82  0100               	movlb	0	; () banked
  5004  001C84  6F83               	movwf	I2C_Send@data& (0+255),b
  5005  001C86  0E01               	movlw	high packaging@msg
  5006  001C88  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  5007  001C8A  0EA3               	movlw	low _nanoAddr
  5008  001C8C  6EF6               	movwf	tblptrl,c
  5009  001C8E                     	if	1	;There is more than 1 active tblptr byte
  5010  001C8E  0EFB               	movlw	high _nanoAddr
  5011  001C90  6EF7               	movwf	tblptrh,c
  5012  001C92                     	endif
  5013  001C92                     	if	1	;There are 3 active tblptr bytes
  5014  001C92  0E00               	movlw	low (_nanoAddr shr (0+16))
  5015  001C94  6EF8               	movwf	tblptru,c
  5016  001C96                     	endif
  5017  001C96  0008               	tblrd		*
  5018  001C98  50F5               	movf	tablat,w,c
  5019  001C9A  ECD9  F01B         	call	_I2C_Send
  5020                           
  5021                           ;main.c: 138: if (params.toFill[compartmentNum-1] == 0) {
  5022  001C9E  0EFF               	movlw	255
  5023  001CA0  0100               	movlb	0	; () banked
  5024  001CA2  6FC5               	movwf	??_packaging& (0+255),b
  5025  001CA4  0EFF               	movlw	255
  5026  001CA6  6FC6               	movwf	(??_packaging+1)& (0+255),b
  5027  001CA8  C184  F0C7         	movff	packaging@compartmentNum,??_packaging+2
  5028  001CAC  C185  F0C8         	movff	packaging@compartmentNum+1,??_packaging+3
  5029  001CB0  51C5               	movf	??_packaging& (0+255),w,b
  5030  001CB2  27C7               	addwf	(??_packaging+2)& (0+255),f,b
  5031  001CB4  51C6               	movf	(??_packaging+1)& (0+255),w,b
  5032  001CB6  23C8               	addwfc	(??_packaging+3)& (0+255),f,b
  5033  001CB8  0EB9               	movlw	low (_params+2)
  5034  001CBA  25C7               	addwf	(??_packaging+2)& (0+255),w,b
  5035  001CBC  6ED9               	movwf	fsr2l,c
  5036  001CBE  0E01               	movlw	high (_params+2)
  5037  001CC0  21C8               	addwfc	(??_packaging+3)& (0+255),w,b
  5038  001CC2  6EDA               	movwf	fsr2h,c
  5039  001CC4  50DF               	movf	indf2,w,c
  5040  001CC6  A4D8               	btfss	status,2,c
  5041  001CC8  D015               	goto	l134
  5042                           
  5043                           ; BSR set to: 0
  5044                           ;main.c: 141: char instr[] = {2, 0};
  5045  001CCA  C1ED  F176         	movff	packaging@F3231,packaging@instr_324
  5046  001CCE  C1EE  F177         	movff	packaging@F3231+1,packaging@instr_324+1
  5047                           
  5048                           ; BSR set to: 0
  5049                           ;main.c: 142: I2C_Send(nanoAddr, instr);
  5050  001CD2  0E76               	movlw	low packaging@instr_324
  5051  001CD4  6F83               	movwf	I2C_Send@data& (0+255),b
  5052  001CD6  0E01               	movlw	high packaging@instr_324
  5053  001CD8  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  5054  001CDA  0EA3               	movlw	low _nanoAddr
  5055  001CDC  6EF6               	movwf	tblptrl,c
  5056  001CDE                     	if	1	;There is more than 1 active tblptr byte
  5057  001CDE  0EFB               	movlw	high _nanoAddr
  5058  001CE0  6EF7               	movwf	tblptrh,c
  5059  001CE2                     	endif
  5060  001CE2                     	if	1	;There are 3 active tblptr bytes
  5061  001CE2  0E00               	movlw	low (_nanoAddr shr (0+16))
  5062  001CE4  6EF8               	movwf	tblptru,c
  5063  001CE6                     	endif
  5064  001CE6  0008               	tblrd		*
  5065  001CE8  50F5               	movf	tablat,w,c
  5066  001CEA  ECD9  F01B         	call	_I2C_Send
  5067  001CEE  AA80               	btfss	3968,5,c	;volatile
  5068  001CF0  D162               	goto	l140
  5069  001CF2  D7FD               	goto	l138
  5070  001CF4                     l134:
  5071                           
  5072                           ;main.c: 145: };
  5073                           ;main.c: 146: char * set = fastenerMatrix[params.toFill[compartmentNum-1]];
  5074  001CF4  0EFF               	movlw	255
  5075  001CF6  0100               	movlb	0	; () banked
  5076  001CF8  6FC5               	movwf	??_packaging& (0+255),b
  5077  001CFA  0EFF               	movlw	255
  5078  001CFC  6FC6               	movwf	(??_packaging+1)& (0+255),b
  5079  001CFE  C184  F0C7         	movff	packaging@compartmentNum,??_packaging+2
  5080  001D02  C185  F0C8         	movff	packaging@compartmentNum+1,??_packaging+3
  5081  001D06  51C5               	movf	??_packaging& (0+255),w,b
  5082  001D08  27C7               	addwf	(??_packaging+2)& (0+255),f,b
  5083  001D0A  51C6               	movf	(??_packaging+1)& (0+255),w,b
  5084  001D0C  23C8               	addwfc	(??_packaging+3)& (0+255),f,b
  5085  001D0E  0EB9               	movlw	low (_params+2)
  5086  001D10  25C7               	addwf	(??_packaging+2)& (0+255),w,b
  5087  001D12  6ED9               	movwf	fsr2l,c
  5088  001D14  0E01               	movlw	high (_params+2)
  5089  001D16  21C8               	addwfc	(??_packaging+3)& (0+255),w,b
  5090  001D18  6EDA               	movwf	fsr2h,c
  5091  001D1A  50DF               	movf	indf2,w,c
  5092  001D1C  6FC9               	movwf	(??_packaging+4)& (0+255),b
  5093  001D1E  51C9               	movf	(??_packaging+4)& (0+255),w,b
  5094  001D20  0D04               	mullw	4
  5095  001D22  0E0E               	movlw	low _fastenerMatrix
  5096  001D24  24F3               	addwf	prodl,w,c
  5097  001D26  0101               	movlb	1	; () banked
  5098  001D28  6F80               	movwf	packaging@set& (0+255),b
  5099  001D2A  0EFD               	movlw	high _fastenerMatrix
  5100  001D2C  20F4               	addwfc	prodh,w,c
  5101  001D2E  6F81               	movwf	(packaging@set+1)& (0+255),b
  5102                           
  5103                           ; BSR set to: 1
  5104                           ;main.c: 147: char msg2[32];
  5105                           ;main.c: 148: int mult = params.setMultiple[compartmentNum - 1];
  5106  001D30  0EFE               	movlw	254
  5107  001D32  0100               	movlb	0	; () banked
  5108  001D34  6FC5               	movwf	??_packaging& (0+255),b
  5109  001D36  0EFF               	movlw	255
  5110  001D38  6FC6               	movwf	(??_packaging+1)& (0+255),b
  5111  001D3A  C184  F0C7         	movff	packaging@compartmentNum,??_packaging+2
  5112  001D3E  C185  F0C8         	movff	packaging@compartmentNum+1,??_packaging+3
  5113  001D42  90D8               	bcf	status,0,c
  5114  001D44  37C7               	rlcf	(??_packaging+2)& (0+255),f,b
  5115  001D46  37C8               	rlcf	(??_packaging+3)& (0+255),f,b
  5116  001D48  51C5               	movf	??_packaging& (0+255),w,b
  5117  001D4A  27C7               	addwf	(??_packaging+2)& (0+255),f,b
  5118  001D4C  51C6               	movf	(??_packaging+1)& (0+255),w,b
  5119  001D4E  23C8               	addwfc	(??_packaging+3)& (0+255),f,b
  5120  001D50  0EC1               	movlw	low (_params+10)
  5121  001D52  25C7               	addwf	(??_packaging+2)& (0+255),w,b
  5122  001D54  6ED9               	movwf	fsr2l,c
  5123  001D56  0E01               	movlw	high (_params+10)
  5124  001D58  21C8               	addwfc	(??_packaging+3)& (0+255),w,b
  5125  001D5A  6EDA               	movwf	fsr2h,c
  5126  001D5C  CFDE F182          	movff	postinc2,packaging@mult
  5127  001D60  CFDD F183          	movff	postdec2,packaging@mult+1
  5128                           
  5129                           ; BSR set to: 0
  5130                           ;main.c: 149: sprintf(msg2, "\1B:%d N:%d S:%d W:%d\0", set[0]*mult, set[1]*mult, set[2]*
      +                          mult, set[3]*mult);
  5131  001D64  C180  FFF6         	movff	packaging@set,tblptrl
  5132  001D68  C181  FFF7         	movff	packaging@set+1,tblptrh
  5133  001D6C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5134  001D6C  6AF8               	clrf	tblptru,c
  5135  001D6E                     	endif
  5136  001D6E                     	if	0	;tblptru may be non-zero
  5137  001D6E                     	endif
  5138  001D6E  0008               	tblrd		*
  5139  001D70  50F5               	movf	tablat,w,c
  5140  001D72  6F80               	movwf	___wmul@multiplier& (0+255),b
  5141  001D74  6B81               	clrf	(___wmul@multiplier+1)& (0+255),b
  5142  001D76  C182  F082         	movff	packaging@mult,___wmul@multiplicand
  5143  001D7A  C183  F083         	movff	packaging@mult+1,___wmul@multiplicand+1
  5144  001D7E  EC2C  F01F         	call	___wmul	;wreg free
  5145  001D82  C080  F178         	movff	?___wmul,_packaging$2365
  5146  001D86  C081  F179         	movff	?___wmul+1,_packaging$2365+1
  5147                           
  5148                           ;main.c: 149: sprintf(msg2, "\1B:%d N:%d S:%d W:%d\0", set[0]*mult, set[1]*mult, set[2]*
      +                          mult, set[3]*mult);
  5149  001D8A  0E01               	movlw	1
  5150  001D8C  0101               	movlb	1	; () banked
  5151  001D8E  2580               	addwf	packaging@set& (0+255),w,b
  5152  001D90  0100               	movlb	0	; () banked
  5153  001D92  6FC5               	movwf	??_packaging& (0+255),b
  5154  001D94  0E00               	movlw	0
  5155  001D96  0101               	movlb	1	; () banked
  5156  001D98  2181               	addwfc	(packaging@set+1)& (0+255),w,b
  5157  001D9A  0100               	movlb	0	; () banked
  5158  001D9C  6FC6               	movwf	(??_packaging+1)& (0+255),b
  5159  001D9E  C0C5  FFF6         	movff	??_packaging,tblptrl
  5160  001DA2  C0C6  FFF7         	movff	??_packaging+1,tblptrh
  5161  001DA6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5162  001DA6  6AF8               	clrf	tblptru,c
  5163  001DA8                     	endif
  5164  001DA8                     	if	0	;tblptru may be non-zero
  5165  001DA8                     	endif
  5166  001DA8  0008               	tblrd		*
  5167  001DAA  50F5               	movf	tablat,w,c
  5168  001DAC  6F80               	movwf	___wmul@multiplier& (0+255),b
  5169  001DAE  6B81               	clrf	(___wmul@multiplier+1)& (0+255),b
  5170  001DB0  C182  F082         	movff	packaging@mult,___wmul@multiplicand
  5171  001DB4  C183  F083         	movff	packaging@mult+1,___wmul@multiplicand+1
  5172  001DB8  EC2C  F01F         	call	___wmul	;wreg free
  5173  001DBC  C080  F17A         	movff	?___wmul,_packaging$2366
  5174  001DC0  C081  F17B         	movff	?___wmul+1,_packaging$2366+1
  5175                           
  5176                           ;main.c: 149: sprintf(msg2, "\1B:%d N:%d S:%d W:%d\0", set[0]*mult, set[1]*mult, set[2]*
      +                          mult, set[3]*mult);
  5177  001DC4  0E02               	movlw	2
  5178  001DC6  0101               	movlb	1	; () banked
  5179  001DC8  2580               	addwf	packaging@set& (0+255),w,b
  5180  001DCA  0100               	movlb	0	; () banked
  5181  001DCC  6FC5               	movwf	??_packaging& (0+255),b
  5182  001DCE  0E00               	movlw	0
  5183  001DD0  0101               	movlb	1	; () banked
  5184  001DD2  2181               	addwfc	(packaging@set+1)& (0+255),w,b
  5185  001DD4  0100               	movlb	0	; () banked
  5186  001DD6  6FC6               	movwf	(??_packaging+1)& (0+255),b
  5187  001DD8  C0C5  FFF6         	movff	??_packaging,tblptrl
  5188  001DDC  C0C6  FFF7         	movff	??_packaging+1,tblptrh
  5189  001DE0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5190  001DE0  6AF8               	clrf	tblptru,c
  5191  001DE2                     	endif
  5192  001DE2                     	if	0	;tblptru may be non-zero
  5193  001DE2                     	endif
  5194  001DE2  0008               	tblrd		*
  5195  001DE4  50F5               	movf	tablat,w,c
  5196  001DE6  6F80               	movwf	___wmul@multiplier& (0+255),b
  5197  001DE8  6B81               	clrf	(___wmul@multiplier+1)& (0+255),b
  5198  001DEA  C182  F082         	movff	packaging@mult,___wmul@multiplicand
  5199  001DEE  C183  F083         	movff	packaging@mult+1,___wmul@multiplicand+1
  5200  001DF2  EC2C  F01F         	call	___wmul	;wreg free
  5201  001DF6  C080  F17C         	movff	?___wmul,_packaging$2367
  5202  001DFA  C081  F17D         	movff	?___wmul+1,_packaging$2367+1
  5203                           
  5204                           ;main.c: 149: sprintf(msg2, "\1B:%d N:%d S:%d W:%d\0", set[0]*mult, set[1]*mult, set[2]*
      +                          mult, set[3]*mult);
  5205  001DFE  0E03               	movlw	3
  5206  001E00  0101               	movlb	1	; () banked
  5207  001E02  2580               	addwf	packaging@set& (0+255),w,b
  5208  001E04  0100               	movlb	0	; () banked
  5209  001E06  6FC5               	movwf	??_packaging& (0+255),b
  5210  001E08  0E00               	movlw	0
  5211  001E0A  0101               	movlb	1	; () banked
  5212  001E0C  2181               	addwfc	(packaging@set+1)& (0+255),w,b
  5213  001E0E  0100               	movlb	0	; () banked
  5214  001E10  6FC6               	movwf	(??_packaging+1)& (0+255),b
  5215  001E12  C0C5  FFF6         	movff	??_packaging,tblptrl
  5216  001E16  C0C6  FFF7         	movff	??_packaging+1,tblptrh
  5217  001E1A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5218  001E1A  6AF8               	clrf	tblptru,c
  5219  001E1C                     	endif
  5220  001E1C                     	if	0	;tblptru may be non-zero
  5221  001E1C                     	endif
  5222  001E1C  0008               	tblrd		*
  5223  001E1E  50F5               	movf	tablat,w,c
  5224  001E20  6F80               	movwf	___wmul@multiplier& (0+255),b
  5225  001E22  6B81               	clrf	(___wmul@multiplier+1)& (0+255),b
  5226  001E24  C182  F082         	movff	packaging@mult,___wmul@multiplicand
  5227  001E28  C183  F083         	movff	packaging@mult+1,___wmul@multiplicand+1
  5228  001E2C  EC2C  F01F         	call	___wmul	;wreg free
  5229  001E30  C080  F17E         	movff	?___wmul,_packaging$2368
  5230  001E34  C081  F17F         	movff	?___wmul+1,_packaging$2368+1
  5231                           
  5232                           ;main.c: 149: sprintf(msg2, "\1B:%d N:%d S:%d W:%d\0", set[0]*mult, set[1]*mult, set[2]*
      +                          mult, set[3]*mult);
  5233  001E38  0E54               	movlw	low packaging@msg2
  5234  001E3A  0100               	movlb	0	; () banked
  5235  001E3C  6FA1               	movwf	sprintf@wh& (0+255),b
  5236  001E3E  0E01               	movlw	high packaging@msg2
  5237  001E40  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5238  001E42  0EB0               	movlw	low STR_8
  5239  001E44  6FA3               	movwf	sprintf@f& (0+255),b
  5240  001E46  0EFE               	movlw	high STR_8
  5241  001E48  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5242  001E4A  C178  F0A5         	movff	_packaging$2365,?_sprintf+4
  5243  001E4E  C179  F0A6         	movff	_packaging$2365+1,?_sprintf+5
  5244  001E52  C17A  F0A7         	movff	_packaging$2366,?_sprintf+6
  5245  001E56  C17B  F0A8         	movff	_packaging$2366+1,?_sprintf+7
  5246  001E5A  C17C  F0A9         	movff	_packaging$2367,?_sprintf+8
  5247  001E5E  C17D  F0AA         	movff	_packaging$2367+1,?_sprintf+9
  5248  001E62  C17E  F0AB         	movff	_packaging$2368,?_sprintf+10
  5249  001E66  C17F  F0AC         	movff	_packaging$2368+1,?_sprintf+11
  5250  001E6A  EC4F  F01E         	call	_sprintf	;wreg free
  5251                           
  5252                           ;main.c: 150: I2C_Send(nanoAddr, msg2);
  5253  001E6E  0E54               	movlw	low packaging@msg2
  5254  001E70  0100               	movlb	0	; () banked
  5255  001E72  6F83               	movwf	I2C_Send@data& (0+255),b
  5256  001E74  0E01               	movlw	high packaging@msg2
  5257  001E76  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  5258  001E78  0EA3               	movlw	low _nanoAddr
  5259  001E7A  6EF6               	movwf	tblptrl,c
  5260  001E7C                     	if	1	;There is more than 1 active tblptr byte
  5261  001E7C  0EFB               	movlw	high _nanoAddr
  5262  001E7E  6EF7               	movwf	tblptrh,c
  5263  001E80                     	endif
  5264  001E80                     	if	1	;There are 3 active tblptr bytes
  5265  001E80  0E00               	movlw	low (_nanoAddr shr (0+16))
  5266  001E82  6EF8               	movwf	tblptru,c
  5267  001E84                     	endif
  5268  001E84  0008               	tblrd		*
  5269  001E86  50F5               	movf	tablat,w,c
  5270  001E88  ECD9  F01B         	call	_I2C_Send
  5271                           
  5272                           ;main.c: 151: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5273  001E8C  0E01               	movlw	1
  5274  001E8E  ECB1  F01F         	call	_lcdInst
  5275  001E92  0EC3               	movlw	195
  5276  001E94  0100               	movlb	0	; () banked
  5277  001E96  6FC5               	movwf	??_packaging& (0+255),b
  5278  001E98  0ECD               	movlw	205
  5279  001E9A                     u9787:
  5280  001E9A  2EE8               	decfsz	wreg,f,c
  5281  001E9C  D7FE               	bra	u9787
  5282  001E9E  2FC5               	decfsz	??_packaging& (0+255),f,b
  5283  001EA0  D7FC               	bra	u9787
  5284                           
  5285                           ;main.c: 152: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  5286  001EA2  0E80               	movlw	128
  5287  001EA4  ECB1  F01F         	call	_lcdInst
  5288  001EA8  0E41               	movlw	65
  5289  001EAA  0100               	movlb	0	; () banked
  5290  001EAC  6FC5               	movwf	??_packaging& (0+255),b
  5291  001EAE  0EEE               	movlw	238
  5292  001EB0                     u9797:
  5293  001EB0  2EE8               	decfsz	wreg,f,c
  5294  001EB2  D7FE               	bra	u9797
  5295  001EB4  2FC5               	decfsz	??_packaging& (0+255),f,b
  5296  001EB6  D7FC               	bra	u9797
  5297  001EB8  F000               	nop	
  5298                           
  5299                           ;main.c: 153: printf("Compartment %d", compartmentNum);
  5300  001EBA  0E98               	movlw	low STR_9
  5301  001EBC  0100               	movlb	0	; () banked
  5302  001EBE  6FA1               	movwf	printf@f& (0+255),b
  5303  001EC0  0EFF               	movlw	high STR_9
  5304  001EC2  6FA2               	movwf	(printf@f+1)& (0+255),b
  5305  001EC4  C184  F0A3         	movff	packaging@compartmentNum,?_printf+2
  5306  001EC8  C185  F0A4         	movff	packaging@compartmentNum+1,?_printf+3
  5307  001ECC  ECB2  F01E         	call	_printf	;wreg free
  5308                           
  5309                           ;main.c: 154: packageCompartment(set[0]*mult, set[1]*mult, set[2]*mult, set[3]*mult);
  5310  001ED0  0E01               	movlw	1
  5311  001ED2  0101               	movlb	1	; () banked
  5312  001ED4  2580               	addwf	packaging@set& (0+255),w,b
  5313  001ED6  0100               	movlb	0	; () banked
  5314  001ED8  6FC5               	movwf	??_packaging& (0+255),b
  5315  001EDA  0E00               	movlw	0
  5316  001EDC  0101               	movlb	1	; () banked
  5317  001EDE  2181               	addwfc	(packaging@set+1)& (0+255),w,b
  5318  001EE0  0100               	movlb	0	; () banked
  5319  001EE2  6FC6               	movwf	(??_packaging+1)& (0+255),b
  5320  001EE4  C0C5  FFF6         	movff	??_packaging,tblptrl
  5321  001EE8  C0C6  FFF7         	movff	??_packaging+1,tblptrh
  5322  001EEC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5323  001EEC  6AF8               	clrf	tblptru,c
  5324  001EEE                     	endif
  5325  001EEE                     	if	0	;tblptru may be non-zero
  5326  001EEE                     	endif
  5327  001EEE  0008               	tblrd		*
  5328  001EF0  50F5               	movf	tablat,w,c
  5329  001EF2  0101               	movlb	1	; () banked
  5330  001EF4  0382               	mulwf	packaging@mult& (0+255),b
  5331  001EF6  CFF3 F09D          	movff	prodl,packageCompartment@n
  5332  001EFA  0E02               	movlw	2
  5333  001EFC  2580               	addwf	packaging@set& (0+255),w,b
  5334  001EFE  0100               	movlb	0	; () banked
  5335  001F00  6FC7               	movwf	(??_packaging+2)& (0+255),b
  5336  001F02  0E00               	movlw	0
  5337  001F04  0101               	movlb	1	; () banked
  5338  001F06  2181               	addwfc	(packaging@set+1)& (0+255),w,b
  5339  001F08  0100               	movlb	0	; () banked
  5340  001F0A  6FC8               	movwf	(??_packaging+3)& (0+255),b
  5341  001F0C  C0C7  FFF6         	movff	??_packaging+2,tblptrl
  5342  001F10  C0C8  FFF7         	movff	??_packaging+3,tblptrh
  5343  001F14                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5344  001F14  6AF8               	clrf	tblptru,c
  5345  001F16                     	endif
  5346  001F16                     	if	0	;tblptru may be non-zero
  5347  001F16                     	endif
  5348  001F16  0008               	tblrd		*
  5349  001F18  50F5               	movf	tablat,w,c
  5350  001F1A  0101               	movlb	1	; () banked
  5351  001F1C  0382               	mulwf	packaging@mult& (0+255),b
  5352  001F1E  CFF3 F09E          	movff	prodl,packageCompartment@s
  5353  001F22  0E03               	movlw	3
  5354  001F24  2580               	addwf	packaging@set& (0+255),w,b
  5355  001F26  0100               	movlb	0	; () banked
  5356  001F28  6FC9               	movwf	(??_packaging+4)& (0+255),b
  5357  001F2A  0E00               	movlw	0
  5358  001F2C  0101               	movlb	1	; () banked
  5359  001F2E  2181               	addwfc	(packaging@set+1)& (0+255),w,b
  5360  001F30  0100               	movlb	0	; () banked
  5361  001F32  6FCA               	movwf	(??_packaging+5)& (0+255),b
  5362  001F34  C0C9  FFF6         	movff	??_packaging+4,tblptrl
  5363  001F38  C0CA  FFF7         	movff	??_packaging+5,tblptrh
  5364  001F3C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5365  001F3C  6AF8               	clrf	tblptru,c
  5366  001F3E                     	endif
  5367  001F3E                     	if	0	;tblptru may be non-zero
  5368  001F3E                     	endif
  5369  001F3E  0008               	tblrd		*
  5370  001F40  50F5               	movf	tablat,w,c
  5371  001F42  0101               	movlb	1	; () banked
  5372  001F44  0382               	mulwf	packaging@mult& (0+255),b
  5373  001F46  CFF3 F09F          	movff	prodl,packageCompartment@w
  5374  001F4A  C180  FFF6         	movff	packaging@set,tblptrl
  5375  001F4E  C181  FFF7         	movff	packaging@set+1,tblptrh
  5376  001F52                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5377  001F52  6AF8               	clrf	tblptru,c
  5378  001F54                     	endif
  5379  001F54                     	if	0	;tblptru may be non-zero
  5380  001F54                     	endif
  5381  001F54  0008               	tblrd		*
  5382  001F56  50F5               	movf	tablat,w,c
  5383  001F58  0382               	mulwf	packaging@mult& (0+255),b
  5384  001F5A  50F3               	movf	prodl,w,c
  5385  001F5C  ECFE  F00B         	call	_packageCompartment
  5386                           
  5387                           ;main.c: 155: char msg3[50];
  5388                           ;main.c: 156: sprintf(msg3, "\1Finished packaging compartment %d\0", compartmentNum);
  5389  001F60  0E22               	movlw	low packaging@msg3
  5390  001F62  0100               	movlb	0	; () banked
  5391  001F64  6FA1               	movwf	sprintf@wh& (0+255),b
  5392  001F66  0E01               	movlw	high packaging@msg3
  5393  001F68  6FA2               	movwf	(sprintf@wh+1)& (0+255),b
  5394  001F6A  0E62               	movlw	low STR_10
  5395  001F6C  6FA3               	movwf	sprintf@f& (0+255),b
  5396  001F6E  0EFD               	movlw	high STR_10
  5397  001F70  6FA4               	movwf	(sprintf@f+1)& (0+255),b
  5398  001F72  C184  F0A5         	movff	packaging@compartmentNum,?_sprintf+4
  5399  001F76  C185  F0A6         	movff	packaging@compartmentNum+1,?_sprintf+5
  5400  001F7A  EC4F  F01E         	call	_sprintf	;wreg free
  5401                           
  5402                           ;main.c: 157: I2C_Send(nanoAddr, msg3);
  5403  001F7E  0E22               	movlw	low packaging@msg3
  5404  001F80  0100               	movlb	0	; () banked
  5405  001F82  6F83               	movwf	I2C_Send@data& (0+255),b
  5406  001F84  0E01               	movlw	high packaging@msg3
  5407  001F86  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  5408  001F88  0EA3               	movlw	low _nanoAddr
  5409  001F8A  6EF6               	movwf	tblptrl,c
  5410  001F8C                     	if	1	;There is more than 1 active tblptr byte
  5411  001F8C  0EFB               	movlw	high _nanoAddr
  5412  001F8E  6EF7               	movwf	tblptrh,c
  5413  001F90                     	endif
  5414  001F90                     	if	1	;There are 3 active tblptr bytes
  5415  001F90  0E00               	movlw	low (_nanoAddr shr (0+16))
  5416  001F92  6EF8               	movwf	tblptru,c
  5417  001F94                     	endif
  5418  001F94  0008               	tblrd		*
  5419  001F96  50F5               	movf	tablat,w,c
  5420  001F98  ECD9  F01B         	call	_I2C_Send
  5421                           
  5422                           ;main.c: 158: currentMode = WAITING;
  5423  001F9C  0E00               	movlw	0
  5424  001F9E  6E4D               	movwf	_currentMode+1,c
  5425  001FA0  0E04               	movlw	4
  5426  001FA2  6E4C               	movwf	_currentMode,c
  5427                           
  5428                           ;main.c: 159: _delay((unsigned long)((10)*(40000000/4000.0)));
  5429  001FA4  0E82               	movlw	130
  5430  001FA6  0100               	movlb	0	; () banked
  5431  001FA8  6FC5               	movwf	??_packaging& (0+255),b
  5432  001FAA  0EDD               	movlw	221
  5433  001FAC                     u9807:
  5434  001FAC  2EE8               	decfsz	wreg,f,c
  5435  001FAE  D7FE               	bra	u9807
  5436  001FB0  2FC5               	decfsz	??_packaging& (0+255),f,b
  5437  001FB2  D7FC               	bra	u9807
  5438  001FB4  D000               	nop2	
  5439  001FB6                     l140:
  5440  001FB6  0101               	movlb	1	; () banked
  5441  001FB8  0784               	decf	packaging@compartmentNum& (0+255),f,b
  5442  001FBA  A0D8               	btfss	status,0,c
  5443  001FBC  0785               	decf	(packaging@compartmentNum+1)& (0+255),f,b
  5444                           
  5445                           ; BSR set to: 1
  5446  001FBE  BF85               	btfsc	(packaging@compartmentNum+1)& (0+255),7,b
  5447  001FC0  0012               	return	
  5448  001FC2  5185               	movf	(packaging@compartmentNum+1)& (0+255),w,b
  5449  001FC4  E101               	bnz	u8591
  5450  001FC6  D64D               	goto	L6
  5451  001FC8                     u8591:
  5452  001FC8  D64F               	goto	l130
  5453  001FCA                     __end_of_packaging:
  5454                           	opt stack 0
  5455                           tblptru	equ	0xFF8
  5456                           tblptrh	equ	0xFF7
  5457                           tblptrl	equ	0xFF6
  5458                           tablat	equ	0xFF5
  5459                           prodh	equ	0xFF4
  5460                           prodl	equ	0xFF3
  5461                           intcon	equ	0xFF2
  5462                           postinc0	equ	0xFEE
  5463                           wreg	equ	0xFE8
  5464                           postdec1	equ	0xFE5
  5465                           plusw1	equ	0xFE3
  5466                           fsr1l	equ	0xFE1
  5467                           indf2	equ	0xFDF
  5468                           postinc2	equ	0xFDE
  5469                           postdec2	equ	0xFDD
  5470                           plusw2	equ	0xFDB
  5471                           fsr2h	equ	0xFDA
  5472                           fsr2l	equ	0xFD9
  5473                           status	equ	0xFD8
  5474                           
  5475 ;; *************** function _sprintf *****************
  5476 ;; Defined at:
  5477 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprintf.c"
  5478 ;; Parameters:    Size  Location     Type
  5479 ;;  wh              2   33[BANK0 ] PTR unsigned char 
  5480 ;;		 -> mainMenu@msg(32), mainMenu@summaries(96), viewLogs@msg(32), viewLogs@msgs(128), 
  5481 ;;		 -> packaging@msg3(50), packaging@msg2(32), 
  5482 ;;  f               2   35[BANK0 ] PTR const unsigned char 
  5483 ;;		 -> STR_34(12), STR_31(22), STR_30(27), STR_29(32), 
  5484 ;;		 -> STR_22(18), STR_21(12), STR_20(27), STR_19(26), 
  5485 ;;		 -> STR_18(23), STR_10(36), STR_8(22), 
  5486 ;; Auto vars:     Size  Location     Type
  5487 ;;  pb              4   47[BANK0 ] struct __prbuf
  5488 ;;  ap              2   45[BANK0 ] PTR void [1]
  5489 ;;		 -> ?_sprintf(2), ?_printf(2), 
  5490 ;; Return value:  Size  Location     Type
  5491 ;;                  2   33[BANK0 ] int 
  5492 ;; Registers used:
  5493 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5494 ;; Tracked objects:
  5495 ;;		On entry : 0/0
  5496 ;;		On exit  : 0/0
  5497 ;;		Unchanged: 0/0
  5498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5499 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5500 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5502 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5503 ;;Total ram usage:       18 bytes
  5504 ;; Hardware stack levels used:    1
  5505 ;; Hardware stack levels required when called:    7
  5506 ;; This function calls:
  5507 ;;		__doprnt
  5508 ;; This function is called by:
  5509 ;;		_packaging
  5510 ;;		_viewLogs
  5511 ;;		_mainMenu
  5512 ;; This function uses a non-reentrant model
  5513 ;;
  5514                           
  5515                           	psect	text7
  5516  003C9E                     __ptext7:
  5517                           	opt stack 0
  5518  003C9E                     _sprintf:
  5519                           	opt stack 21
  5520                           
  5521                           ; BSR set to: 1
  5522                           ;incstack = 0
  5523  003C9E  C0A1  F0AF         	movff	sprintf@wh,sprintf@pb
  5524  003CA2  C0A2  F0B0         	movff	sprintf@wh+1,sprintf@pb+1
  5525  003CA6  0E00               	movlw	0
  5526  003CA8  0100               	movlb	0	; () banked
  5527  003CAA  6FB1               	movwf	(sprintf@pb+2)& (0+255),b
  5528  003CAC  0E00               	movlw	0
  5529  003CAE  6FB2               	movwf	(sprintf@pb+3)& (0+255),b
  5530  003CB0  0EA5               	movlw	low (?_sprintf+4)
  5531  003CB2  6FAD               	movwf	sprintf@ap& (0+255),b
  5532  003CB4  0E00               	movlw	high (?_sprintf+4)
  5533  003CB6  6FAE               	movwf	(sprintf@ap+1)& (0+255),b
  5534                           
  5535                           ; BSR set to: 0
  5536  003CB8  0EAF               	movlw	low sprintf@pb
  5537  003CBA  6F8C               	movwf	__doprnt@pb& (0+255),b
  5538  003CBC  0E00               	movlw	high sprintf@pb
  5539  003CBE  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
  5540  003CC0  C0A3  F08E         	movff	sprintf@f,__doprnt@f
  5541  003CC4  C0A4  F08F         	movff	sprintf@f+1,__doprnt@f+1
  5542  003CC8  0EAD               	movlw	low sprintf@ap
  5543  003CCA  6F90               	movwf	__doprnt@ap& (0+255),b
  5544  003CCC  0E00               	movlw	high sprintf@ap
  5545  003CCE  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
  5546  003CD0  ECB3  F003         	call	__doprnt	;wreg free
  5547  003CD4  C0AF  FFD9         	movff	sprintf@pb,fsr2l
  5548  003CD8  C0B0  FFDA         	movff	sprintf@pb+1,fsr2h
  5549  003CDC  0E00               	movlw	0
  5550  003CDE  6EDF               	movwf	indf2,c
  5551  003CE0  0012               	return	
  5552  003CE2                     __end_of_sprintf:
  5553                           	opt stack 0
  5554                           tblptru	equ	0xFF8
  5555                           tblptrh	equ	0xFF7
  5556                           tblptrl	equ	0xFF6
  5557                           tablat	equ	0xFF5
  5558                           prodh	equ	0xFF4
  5559                           prodl	equ	0xFF3
  5560                           intcon	equ	0xFF2
  5561                           postinc0	equ	0xFEE
  5562                           wreg	equ	0xFE8
  5563                           postdec1	equ	0xFE5
  5564                           plusw1	equ	0xFE3
  5565                           fsr1l	equ	0xFE1
  5566                           indf2	equ	0xFDF
  5567                           postinc2	equ	0xFDE
  5568                           postdec2	equ	0xFDD
  5569                           plusw2	equ	0xFDB
  5570                           fsr2h	equ	0xFDA
  5571                           fsr2l	equ	0xFD9
  5572                           status	equ	0xFD8
  5573                           
  5574 ;; *************** function _printf *****************
  5575 ;; Defined at:
  5576 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\printf.c"
  5577 ;; Parameters:    Size  Location     Type
  5578 ;;  f               2   33[BANK0 ] PTR const unsigned char 
  5579 ;;		 -> STR_9(15), 
  5580 ;; Auto vars:     Size  Location     Type
  5581 ;;  pb              4   39[BANK0 ] struct __prbuf
  5582 ;;  ap              2   37[BANK0 ] PTR void [1]
  5583 ;;		 -> ?_sprintf(2), ?_printf(2), 
  5584 ;; Return value:  Size  Location     Type
  5585 ;;                  2   33[BANK0 ] int 
  5586 ;; Registers used:
  5587 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5588 ;; Tracked objects:
  5589 ;;		On entry : 0/0
  5590 ;;		On exit  : 0/0
  5591 ;;		Unchanged: 0/0
  5592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5593 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5594 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5596 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5597 ;;Total ram usage:       10 bytes
  5598 ;; Hardware stack levels used:    1
  5599 ;; Hardware stack levels required when called:    7
  5600 ;; This function calls:
  5601 ;;		__doprnt
  5602 ;; This function is called by:
  5603 ;;		_packaging
  5604 ;; This function uses a non-reentrant model
  5605 ;;
  5606                           
  5607                           	psect	text8
  5608  003D64                     __ptext8:
  5609                           	opt stack 0
  5610  003D64                     _printf:
  5611                           	opt stack 21
  5612                           
  5613                           ;incstack = 0
  5614  003D64  0E00               	movlw	0
  5615  003D66  0100               	movlb	0	; () banked
  5616  003D68  6FA7               	movwf	printf@pb& (0+255),b
  5617  003D6A  0E00               	movlw	0
  5618  003D6C  6FA8               	movwf	(printf@pb+1)& (0+255),b
  5619  003D6E  0E4A               	movlw	low _putch
  5620  003D70  6FA9               	movwf	(printf@pb+2)& (0+255),b
  5621  003D72  0E3F               	movlw	high _putch
  5622  003D74  6FAA               	movwf	(printf@pb+3)& (0+255),b
  5623  003D76  0EA3               	movlw	low (?_printf+2)
  5624  003D78  6FA5               	movwf	printf@ap& (0+255),b
  5625  003D7A  0E00               	movlw	high (?_printf+2)
  5626  003D7C  6FA6               	movwf	(printf@ap+1)& (0+255),b
  5627                           
  5628                           ; BSR set to: 0
  5629                           ;	Return value of _printf is never used
  5630  003D7E  0EA7               	movlw	low printf@pb
  5631  003D80  6F8C               	movwf	__doprnt@pb& (0+255),b
  5632  003D82  0E00               	movlw	high printf@pb
  5633  003D84  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
  5634  003D86  C0A1  F08E         	movff	printf@f,__doprnt@f
  5635  003D8A  C0A2  F08F         	movff	printf@f+1,__doprnt@f+1
  5636  003D8E  0EA5               	movlw	low printf@ap
  5637  003D90  6F90               	movwf	__doprnt@ap& (0+255),b
  5638  003D92  0E00               	movlw	high printf@ap
  5639  003D94  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
  5640  003D96  ECB3  F003         	call	__doprnt	;wreg free
  5641  003D9A  0012               	return	
  5642  003D9C                     __end_of_printf:
  5643                           	opt stack 0
  5644                           tblptru	equ	0xFF8
  5645                           tblptrh	equ	0xFF7
  5646                           tblptrl	equ	0xFF6
  5647                           tablat	equ	0xFF5
  5648                           prodh	equ	0xFF4
  5649                           prodl	equ	0xFF3
  5650                           intcon	equ	0xFF2
  5651                           postinc0	equ	0xFEE
  5652                           wreg	equ	0xFE8
  5653                           postdec1	equ	0xFE5
  5654                           plusw1	equ	0xFE3
  5655                           fsr1l	equ	0xFE1
  5656                           indf2	equ	0xFDF
  5657                           postinc2	equ	0xFDE
  5658                           postdec2	equ	0xFDD
  5659                           plusw2	equ	0xFDB
  5660                           fsr2h	equ	0xFDA
  5661                           fsr2l	equ	0xFD9
  5662                           status	equ	0xFD8
  5663                           
  5664 ;; *************** function __doprnt *****************
  5665 ;; Defined at:
  5666 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  5667 ;; Parameters:    Size  Location     Type
  5668 ;;  pb              2   12[BANK0 ] PTR struct __prbuf
  5669 ;;		 -> sprintf@pb(4), printf@pb(4), 
  5670 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  5671 ;;		 -> STR_34(12), STR_31(22), STR_30(27), STR_29(32), 
  5672 ;;		 -> STR_22(18), STR_21(12), STR_20(27), STR_19(26), 
  5673 ;;		 -> STR_18(23), STR_10(36), STR_9(15), STR_8(22), 
  5674 ;;  ap              2   16[BANK0 ] PTR PTR void 
  5675 ;;		 -> sprintf@ap(2), printf@ap(2), 
  5676 ;; Auto vars:     Size  Location     Type
  5677 ;;  tmpval          4    0        struct .
  5678 ;;  width           2   30[BANK0 ] int 
  5679 ;;  cp              2   27[BANK0 ] PTR const unsigned char 
  5680 ;;		 -> ?_sprintf(2), ?_printf(2), NULL(0), STR_35(7), 
  5681 ;;		 -> fSLookup(105), mainMenu@msg(32), mainMenu@summaries(96), viewLogs@msg(32), 
  5682 ;;		 -> viewLogs@msgs(128), packaging@msg3(50), packaging@msg2(32), 
  5683 ;;  val             2   25[BANK0 ] unsigned int 
  5684 ;;  len             2   23[BANK0 ] unsigned int 
  5685 ;;  c               1   32[BANK0 ] char 
  5686 ;;  flag            1   29[BANK0 ] unsigned char 
  5687 ;;  prec            1   22[BANK0 ] char 
  5688 ;; Return value:  Size  Location     Type
  5689 ;;                  2   12[BANK0 ] int 
  5690 ;; Registers used:
  5691 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5692 ;; Tracked objects:
  5693 ;;		On entry : 0/0
  5694 ;;		On exit  : 0/0
  5695 ;;		Unchanged: 0/0
  5696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5697 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5698 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5699 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5700 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5701 ;;Total ram usage:       21 bytes
  5702 ;; Hardware stack levels used:    1
  5703 ;; Hardware stack levels required when called:    6
  5704 ;; This function calls:
  5705 ;;		Absolute function
  5706 ;;		___lwdiv
  5707 ;;		___lwmod
  5708 ;;		___wmul
  5709 ;;		_isdigit
  5710 ;;		_putch
  5711 ;; This function is called by:
  5712 ;;		_printf
  5713 ;;		_sprintf
  5714 ;; This function uses a non-reentrant model
  5715 ;;
  5716                           
  5717                           	psect	text9
  5718  000766                     __ptext9:
  5719                           	opt stack 0
  5720  000766                     __doprnt:
  5721                           	opt stack 21
  5722                           
  5723                           ;doprnt.c: 499: signed char c;
  5724                           ;doprnt.c: 501: int width;
  5725                           ;doprnt.c: 506: signed char prec;
  5726                           ;doprnt.c: 508: unsigned char flag;
  5727                           ;doprnt.c: 523: union {
  5728                           ;doprnt.c: 524: unsigned long vd;
  5729                           ;doprnt.c: 525: double integ;
  5730                           ;doprnt.c: 526: } tmpval;
  5731                           ;doprnt.c: 528: unsigned int val;
  5732                           ;doprnt.c: 529: unsigned len;
  5733                           ;doprnt.c: 530: const char * cp;
  5734                           ;doprnt.c: 536: while(c = *f++) {
  5735                           
  5736                           ;incstack = 0
  5737  000766  D374               	goto	u7980
  5738  000768                     
  5739                           ;doprnt.c: 538: if(c != '%')
  5740  000768  0E25               	movlw	37
  5741  00076A  0100               	movlb	0	; () banked
  5742  00076C  19A0               	xorwf	__doprnt@c& (0+255),w,b
  5743  00076E  B4D8               	btfsc	status,2,c
  5744  000770  D036               	goto	l893
  5745                           
  5746                           ; BSR set to: 0
  5747                           ;doprnt.c: 540: {
  5748                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  5749  000772  EE20 F002          	lfsr	2,2
  5750  000776  518C               	movf	__doprnt@pb& (0+255),w,b
  5751  000778  26D9               	addwf	fsr2l,f,c
  5752  00077A  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5753  00077C  22DA               	addwfc	fsr2h,f,c
  5754  00077E  50DE               	movf	postinc2,w,c
  5755  000780  10DE               	iorwf	postinc2,w,c
  5756  000782  B4D8               	btfsc	status,2,c
  5757  000784  D016               	goto	l894
  5758                           
  5759                           ; BSR set to: 0
  5760  000786  EE20 F002          	lfsr	2,2
  5761  00078A  518C               	movf	__doprnt@pb& (0+255),w,b
  5762  00078C  26D9               	addwf	fsr2l,f,c
  5763  00078E  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5764  000790  22DA               	addwfc	fsr2h,f,c
  5765  000792  CFDE F092          	movff	postinc2,??__doprnt
  5766  000796  CFDD F093          	movff	postdec2,??__doprnt+1
  5767  00079A  D801               	call	u7588
  5768  00079C  D359               	goto	u7980
  5769  00079E                     u7588:
  5770  00079E  0005               	push	
  5771  0007A0  6EFA               	movwf	pclath,c
  5772  0007A2  5192               	movf	??__doprnt& (0+255),w,b
  5773  0007A4  6EFD               	movwf	tosl,c
  5774  0007A6  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5775  0007A8  6EFE               	movwf	tosh,c
  5776  0007AA  6AFF               	clrf	tosu,c
  5777  0007AC  50FA               	movf	pclath,w,c
  5778  0007AE  51A0               	movf	__doprnt@c& (0+255),w,b
  5779  0007B0  0012               	return		;indir
  5780  0007B2                     l894:
  5781  0007B2  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5782  0007B6  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5783  0007BA  CFDE F092          	movff	postinc2,??__doprnt
  5784  0007BE  CFDD F093          	movff	postdec2,??__doprnt+1
  5785  0007C2  C092  FFD9         	movff	??__doprnt,fsr2l
  5786  0007C6  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5787  0007CA  C0A0  FFDF         	movff	__doprnt@c,indf2
  5788  0007CE  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5789  0007D2  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5790  0007D6  2ADE               	incf	postinc2,f,c
  5791  0007D8  0E00               	movlw	0
  5792  0007DA  22DD               	addwfc	postdec2,f,c
  5793                           
  5794                           ;doprnt.c: 542: continue;
  5795  0007DC  D339               	goto	u7980
  5796  0007DE                     l893:
  5797                           
  5798                           ;doprnt.c: 543: }
  5799                           ;doprnt.c: 546: width = 0;
  5800  0007DE  0E00               	movlw	0
  5801  0007E0  0100               	movlb	0	; () banked
  5802  0007E2  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
  5803  0007E4  0E00               	movlw	0
  5804  0007E6  6F9E               	movwf	__doprnt@width& (0+255),b
  5805                           
  5806                           ;doprnt.c: 548: flag = 0;
  5807  0007E8  0E00               	movlw	0
  5808  0007EA  6F9D               	movwf	__doprnt@flag& (0+255),b
  5809                           
  5810                           ; BSR set to: 0
  5811                           ;doprnt.c: 551: switch(*f) {
  5812                           
  5813                           ;doprnt.c: 550: for(;;) {
  5814  0007EC  D004               	goto	l897
  5815  0007EE                     
  5816                           ;doprnt.c: 580: flag |= 0x04;
  5817                           
  5818                           ; BSR set to: 0
  5819  0007EE  0100               	movlb	0	; () banked
  5820  0007F0  859D               	bsf	__doprnt@flag& (0+255),2,b
  5821                           
  5822                           ;doprnt.c: 581: f++;
  5823  0007F2  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  5824  0007F4  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  5825  0007F6                     l897:
  5826                           
  5827                           ; BSR set to: 0
  5828  0007F6  C08E  FFF6         	movff	__doprnt@f,tblptrl
  5829  0007FA  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  5830  0007FE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5831  0007FE  6AF8               	clrf	tblptru,c
  5832  000800                     	endif
  5833  000800                     	if	0	;tblptru may be non-zero
  5834  000800                     	endif
  5835  000800  0008               	tblrd		*
  5836  000802  50F5               	movf	tablat,w,c
  5837                           
  5838                           ; Switch size 1, requested type "space"
  5839                           ; Number of cases is 1, Range of values is 48 to 48
  5840                           ; switch strategies available:
  5841                           ; Name         Instructions Cycles
  5842                           ; simple_byte            4     3 (average)
  5843                           ;	Chosen strategy is simple_byte
  5844  000804  0A30               	xorlw	48	; case 48
  5845  000806  B4D8               	btfsc	status,2,c
  5846  000808  D7F2               	goto	l898
  5847                           
  5848                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5849                           
  5850                           ;doprnt.c: 586: }
  5851                           
  5852                           ;doprnt.c: 585: break;
  5853  00080A  C08E  FFF6         	movff	__doprnt@f,tblptrl
  5854  00080E  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  5855  000812                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5856  000812  6AF8               	clrf	tblptru,c
  5857  000814                     	endif
  5858  000814                     	if	0	;tblptru may be non-zero
  5859  000814                     	endif
  5860  000814  0008               	tblrd		*
  5861  000816  50F5               	movf	tablat,w,c
  5862  000818  EC75  F01F         	call	_isdigit
  5863  00081C  A0D8               	btfss	status,0,c
  5864  00081E  D12E               	goto	l905
  5865                           
  5866                           ;doprnt.c: 598: width = 0;
  5867  000820  0E00               	movlw	0
  5868  000822  0100               	movlb	0	; () banked
  5869  000824  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
  5870  000826  0E00               	movlw	0
  5871  000828  6F9E               	movwf	__doprnt@width& (0+255),b
  5872  00082A                     
  5873                           ;doprnt.c: 600: width *= 10;
  5874                           
  5875                           ; BSR set to: 0
  5876  00082A  C09E  F080         	movff	__doprnt@width,___wmul@multiplier
  5877  00082E  C09F  F081         	movff	__doprnt@width+1,___wmul@multiplier+1
  5878  000832  0E00               	movlw	0
  5879  000834  0100               	movlb	0	; () banked
  5880  000836  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5881  000838  0E0A               	movlw	10
  5882  00083A  6F82               	movwf	___wmul@multiplicand& (0+255),b
  5883  00083C  EC2C  F01F         	call	___wmul	;wreg free
  5884  000840  C080  F09E         	movff	?___wmul,__doprnt@width
  5885  000844  C081  F09F         	movff	?___wmul+1,__doprnt@width+1
  5886                           
  5887                           ;doprnt.c: 601: width += *f++ - '0';
  5888  000848  0ED0               	movlw	208
  5889  00084A  0100               	movlb	0	; () banked
  5890  00084C  6F92               	movwf	??__doprnt& (0+255),b
  5891  00084E  0EFF               	movlw	255
  5892  000850  6F93               	movwf	(??__doprnt+1)& (0+255),b
  5893  000852  C08E  FFF6         	movff	__doprnt@f,tblptrl
  5894  000856  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  5895  00085A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5896  00085A  6AF8               	clrf	tblptru,c
  5897  00085C                     	endif
  5898  00085C                     	if	0	;tblptru may be non-zero
  5899  00085C                     	endif
  5900  00085C  0008               	tblrd		*
  5901  00085E  50F5               	movf	tablat,w,c
  5902  000860  6F94               	movwf	(??__doprnt+2)& (0+255),b
  5903  000862  6B95               	clrf	(??__doprnt+3)& (0+255),b
  5904  000864  5192               	movf	??__doprnt& (0+255),w,b
  5905  000866  2794               	addwf	(??__doprnt+2)& (0+255),f,b
  5906  000868  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5907  00086A  2395               	addwfc	(??__doprnt+3)& (0+255),f,b
  5908  00086C  5194               	movf	(??__doprnt+2)& (0+255),w,b
  5909  00086E  279E               	addwf	__doprnt@width& (0+255),f,b
  5910  000870  5195               	movf	(??__doprnt+3)& (0+255),w,b
  5911  000872  239F               	addwfc	(__doprnt@width+1)& (0+255),f,b
  5912                           
  5913                           ; BSR set to: 0
  5914  000874  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  5915  000876  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  5916                           
  5917                           ; BSR set to: 0
  5918                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5919  000878  C08E  FFF6         	movff	__doprnt@f,tblptrl
  5920  00087C  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  5921  000880                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5922  000880  6AF8               	clrf	tblptru,c
  5923  000882                     	endif
  5924  000882                     	if	0	;tblptru may be non-zero
  5925  000882                     	endif
  5926  000882  0008               	tblrd		*
  5927  000884  50F5               	movf	tablat,w,c
  5928  000886  EC75  F01F         	call	_isdigit
  5929  00088A  A0D8               	btfss	status,0,c
  5930  00088C  D0F7               	goto	l905
  5931  00088E  D7CD               	goto	l903
  5932  000890                     
  5933                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  5934  000890  C090  FFD9         	movff	__doprnt@ap,fsr2l
  5935  000894  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  5936  000898  CFDF F092          	movff	indf2,??__doprnt
  5937  00089C  0E02               	movlw	2
  5938  00089E  26DE               	addwf	postinc2,f,c
  5939  0008A0  CFDF F093          	movff	indf2,??__doprnt+1
  5940  0008A4  0E00               	movlw	0
  5941  0008A6  22DD               	addwfc	postdec2,f,c
  5942  0008A8  C092  FFD9         	movff	??__doprnt,fsr2l
  5943  0008AC  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5944  0008B0  CFDE F09B          	movff	postinc2,__doprnt@cp
  5945  0008B4  CFDD F09C          	movff	postdec2,__doprnt@cp+1
  5946                           
  5947                           ;doprnt.c: 740: if(!cp)
  5948  0008B8  0100               	movlb	0	; () banked
  5949  0008BA  519B               	movf	__doprnt@cp& (0+255),w,b
  5950  0008BC  119C               	iorwf	(__doprnt@cp+1)& (0+255),w,b
  5951  0008BE  A4D8               	btfss	status,2,c
  5952  0008C0  D004               	goto	l912
  5953                           
  5954                           ; BSR set to: 0
  5955                           ;doprnt.c: 741: cp = "(null)";
  5956  0008C2  0EF7               	movlw	low STR_35
  5957  0008C4  6F9B               	movwf	__doprnt@cp& (0+255),b
  5958  0008C6  0EFF               	movlw	high STR_35
  5959  0008C8  6F9C               	movwf	(__doprnt@cp+1)& (0+255),b
  5960  0008CA                     l912:
  5961                           
  5962                           ; BSR set to: 0
  5963                           ;doprnt.c: 745: len = 0;
  5964                           
  5965                           ; BSR set to: 0
  5966  0008CA  0E00               	movlw	0
  5967  0008CC  6F98               	movwf	(__doprnt@len+1)& (0+255),b
  5968  0008CE  0E00               	movlw	0
  5969  0008D0  6F97               	movwf	__doprnt@len& (0+255),b
  5970                           
  5971                           ;doprnt.c: 746: while(cp[len])
  5972  0008D2  D003               	goto	l913
  5973  0008D4                     
  5974                           ;doprnt.c: 747: len++;
  5975                           
  5976                           ; BSR set to: 0
  5977  0008D4  0100               	movlb	0	; () banked
  5978  0008D6  4B97               	infsnz	__doprnt@len& (0+255),f,b
  5979  0008D8  2B98               	incf	(__doprnt@len+1)& (0+255),f,b
  5980  0008DA                     l913:
  5981                           
  5982                           ; BSR set to: 0
  5983                           
  5984                           ; BSR set to: 0
  5985  0008DA  5197               	movf	__doprnt@len& (0+255),w,b
  5986  0008DC  259B               	addwf	__doprnt@cp& (0+255),w,b
  5987  0008DE  6F92               	movwf	??__doprnt& (0+255),b
  5988  0008E0  5198               	movf	(__doprnt@len+1)& (0+255),w,b
  5989  0008E2  219C               	addwfc	(__doprnt@cp+1)& (0+255),w,b
  5990  0008E4  6F93               	movwf	(??__doprnt+1)& (0+255),b
  5991  0008E6  C092  FFF6         	movff	??__doprnt,tblptrl
  5992  0008EA  C093  FFF7         	movff	??__doprnt+1,tblptrh
  5993  0008EE  0E00               	movlw	low (__mediumconst shr (0+16))
  5994  0008F0  6EF8               	movwf	tblptru,c
  5995  0008F2  0E0F               	movlw	(high __ramtop+-1)
  5996  0008F4  64F7               	cpfsgt	tblptrh,c
  5997  0008F6  D003               	bra	u7627
  5998  0008F8  0008               	tblrd		*
  5999  0008FA  50F5               	movf	tablat,w,c
  6000  0008FC  D005               	bra	u7620
  6001  0008FE                     u7627:
  6002  0008FE  CFF6 FFE9          	movff	tblptrl,fsr0l
  6003  000902  CFF7 FFEA          	movff	tblptrh,fsr0h
  6004  000906  50EF               	movf	indf0,w,c
  6005  000908                     u7620:
  6006  000908  0900               	iorlw	0
  6007  00090A  A4D8               	btfss	status,2,c
  6008  00090C  D7E3               	goto	l914
  6009                           
  6010                           ;doprnt.c: 757: if(width > len)
  6011  00090E  0100               	movlb	0	; () banked
  6012  000910  519E               	movf	__doprnt@width& (0+255),w,b
  6013  000912  5D97               	subwf	__doprnt@len& (0+255),w,b
  6014  000914  519F               	movf	(__doprnt@width+1)& (0+255),w,b
  6015  000916  5998               	subwfb	(__doprnt@len+1)& (0+255),w,b
  6016  000918  B0D8               	btfsc	status,0,c
  6017  00091A  D005               	goto	l916
  6018                           
  6019                           ; BSR set to: 0
  6020                           ;doprnt.c: 758: width -= len;
  6021  00091C  5197               	movf	__doprnt@len& (0+255),w,b
  6022  00091E  5F9E               	subwf	__doprnt@width& (0+255),f,b
  6023  000920  5198               	movf	(__doprnt@len+1)& (0+255),w,b
  6024  000922  5B9F               	subwfb	(__doprnt@width+1)& (0+255),f,b
  6025  000924  D03A               	goto	l921
  6026  000926                     l916:
  6027                           
  6028                           ; BSR set to: 0
  6029                           ;doprnt.c: 759: else
  6030                           ;doprnt.c: 760: width = 0;
  6031                           
  6032                           ; BSR set to: 0
  6033  000926  0E00               	movlw	0
  6034  000928  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
  6035  00092A  0E00               	movlw	0
  6036  00092C  6F9E               	movwf	__doprnt@width& (0+255),b
  6037                           
  6038                           ; BSR set to: 0
  6039                           ;doprnt.c: 764: while(width--)
  6040  00092E  D035               	goto	l921
  6041  000930                     l6070:
  6042                           
  6043                           ; BSR set to: 0
  6044                           ;doprnt.c: 765: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  6045  000930  EE20 F002          	lfsr	2,2
  6046  000934  518C               	movf	__doprnt@pb& (0+255),w,b
  6047  000936  26D9               	addwf	fsr2l,f,c
  6048  000938  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  6049  00093A  22DA               	addwfc	fsr2h,f,c
  6050  00093C  50DE               	movf	postinc2,w,c
  6051  00093E  10DE               	iorwf	postinc2,w,c
  6052  000940  B4D8               	btfsc	status,2,c
  6053  000942  D016               	goto	l920
  6054                           
  6055                           ; BSR set to: 0
  6056  000944  EE20 F002          	lfsr	2,2
  6057  000948  518C               	movf	__doprnt@pb& (0+255),w,b
  6058  00094A  26D9               	addwf	fsr2l,f,c
  6059  00094C  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  6060  00094E  22DA               	addwfc	fsr2h,f,c
  6061  000950  CFDE F092          	movff	postinc2,??__doprnt
  6062  000954  CFDD F093          	movff	postdec2,??__doprnt+1
  6063  000958  D801               	call	u7668
  6064  00095A  D01F               	goto	l921
  6065  00095C                     u7668:
  6066  00095C  0005               	push	
  6067  00095E  6EFA               	movwf	pclath,c
  6068  000960  5192               	movf	??__doprnt& (0+255),w,b
  6069  000962  6EFD               	movwf	tosl,c
  6070  000964  5193               	movf	(??__doprnt+1)& (0+255),w,b
  6071  000966  6EFE               	movwf	tosh,c
  6072  000968  6AFF               	clrf	tosu,c
  6073  00096A  50FA               	movf	pclath,w,c
  6074  00096C  0E20               	movlw	32
  6075  00096E  0012               	return		;indir
  6076  000970                     l920:
  6077  000970  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6078  000974  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6079  000978  CFDE F092          	movff	postinc2,??__doprnt
  6080  00097C  CFDD F093          	movff	postdec2,??__doprnt+1
  6081  000980  C092  FFD9         	movff	??__doprnt,fsr2l
  6082  000984  C093  FFDA         	movff	??__doprnt+1,fsr2h
  6083  000988  0E20               	movlw	32
  6084  00098A  6EDF               	movwf	indf2,c
  6085  00098C  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6086  000990  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6087  000994  2ADE               	incf	postinc2,f,c
  6088  000996  0E00               	movlw	0
  6089  000998  22DD               	addwfc	postdec2,f,c
  6090  00099A                     l921:
  6091  00099A  0100               	movlb	0	; () banked
  6092  00099C  079E               	decf	__doprnt@width& (0+255),f,b
  6093  00099E  A0D8               	btfss	status,0,c
  6094  0009A0  079F               	decf	(__doprnt@width+1)& (0+255),f,b
  6095  0009A2  299E               	incf	__doprnt@width& (0+255),w,b
  6096  0009A4  E1C5               	bnz	l6070
  6097  0009A6  299F               	incf	(__doprnt@width+1)& (0+255),w,b
  6098  0009A8  B4D8               	btfsc	status,2,c
  6099  0009AA  D05D               	goto	l926
  6100  0009AC  D7C1               	goto	l919
  6101  0009AE                     l6080:
  6102                           
  6103                           ; BSR set to: 0
  6104                           ;doprnt.c: 768: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
  6105  0009AE  EE20 F002          	lfsr	2,2
  6106  0009B2  518C               	movf	__doprnt@pb& (0+255),w,b
  6107  0009B4  26D9               	addwf	fsr2l,f,c
  6108  0009B6  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  6109  0009B8  22DA               	addwfc	fsr2h,f,c
  6110  0009BA  50DE               	movf	postinc2,w,c
  6111  0009BC  10DE               	iorwf	postinc2,w,c
  6112  0009BE  B4D8               	btfsc	status,2,c
  6113  0009C0  D02A               	goto	l925
  6114                           
  6115                           ; BSR set to: 0
  6116  0009C2  EE20 F002          	lfsr	2,2
  6117  0009C6  518C               	movf	__doprnt@pb& (0+255),w,b
  6118  0009C8  26D9               	addwf	fsr2l,f,c
  6119  0009CA  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  6120  0009CC  22DA               	addwfc	fsr2h,f,c
  6121  0009CE  CFDE F092          	movff	postinc2,??__doprnt
  6122  0009D2  CFDD F093          	movff	postdec2,??__doprnt+1
  6123  0009D6  D801               	call	u7698
  6124  0009D8  D01A               	goto	u7699
  6125  0009DA                     u7698:
  6126  0009DA  0005               	push	
  6127  0009DC  6EFA               	movwf	pclath,c
  6128  0009DE  5192               	movf	??__doprnt& (0+255),w,b
  6129  0009E0  6EFD               	movwf	tosl,c
  6130  0009E2  5193               	movf	(??__doprnt+1)& (0+255),w,b
  6131  0009E4  6EFE               	movwf	tosh,c
  6132  0009E6  6AFF               	clrf	tosu,c
  6133  0009E8  50FA               	movf	pclath,w,c
  6134  0009EA  C09B  FFF6         	movff	__doprnt@cp,tblptrl
  6135  0009EE  C09C  FFF7         	movff	__doprnt@cp+1,tblptrh
  6136  0009F2  0E00               	movlw	low (__mediumconst shr (0+16))
  6137  0009F4  6EF8               	movwf	tblptru,c
  6138  0009F6  0E0F               	movlw	(high __ramtop+-1)
  6139  0009F8  64F7               	cpfsgt	tblptrh,c
  6140  0009FA  D003               	bra	u7707
  6141  0009FC  0008               	tblrd		*
  6142  0009FE  50F5               	movf	tablat,w,c
  6143  000A00  D005               	bra	u7700
  6144  000A02                     u7707:
  6145  000A02  CFF6 FFE9          	movff	tblptrl,fsr0l
  6146  000A06  CFF7 FFEA          	movff	tblptrh,fsr0h
  6147  000A0A  50EF               	movf	indf0,w,c
  6148  000A0C                     u7700:
  6149  000A0C  0012               	return		;indir
  6150  000A0E                     u7699:
  6151  000A0E  0100               	movlb	0	; () banked
  6152  000A10  4B9B               	infsnz	__doprnt@cp& (0+255),f,b
  6153  000A12  2B9C               	incf	(__doprnt@cp+1)& (0+255),f,b
  6154  000A14  D028               	goto	l926
  6155  000A16                     l925:
  6156                           
  6157                           ; BSR set to: 0
  6158                           
  6159                           ; BSR set to: 0
  6160  000A16  C09B  FFF6         	movff	__doprnt@cp,tblptrl
  6161  000A1A  C09C  FFF7         	movff	__doprnt@cp+1,tblptrh
  6162  000A1E  0E00               	movlw	low (__mediumconst shr (0+16))
  6163  000A20  6EF8               	movwf	tblptru,c
  6164  000A22  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6165  000A26  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6166  000A2A  CFDE F092          	movff	postinc2,??__doprnt
  6167  000A2E  CFDD F093          	movff	postdec2,??__doprnt+1
  6168  000A32  C092  FFD9         	movff	??__doprnt,fsr2l
  6169  000A36  C093  FFDA         	movff	??__doprnt+1,fsr2h
  6170  000A3A  0E0F               	movlw	(high __ramtop+-1)
  6171  000A3C  64F7               	cpfsgt	tblptrh,c
  6172  000A3E  D003               	bra	u7717
  6173  000A40  0008               	tblrd		*
  6174  000A42  50F5               	movf	tablat,w,c
  6175  000A44  D005               	bra	u7710
  6176  000A46                     u7717:
  6177  000A46  CFF6 FFE9          	movff	tblptrl,fsr0l
  6178  000A4A  CFF7 FFEA          	movff	tblptrh,fsr0h
  6179  000A4E  50EF               	movf	indf0,w,c
  6180  000A50                     u7710:
  6181  000A50  6EDF               	movwf	indf2,c
  6182  000A52  0100               	movlb	0	; () banked
  6183  000A54  4B9B               	infsnz	__doprnt@cp& (0+255),f,b
  6184  000A56  2B9C               	incf	(__doprnt@cp+1)& (0+255),f,b
  6185                           
  6186                           ; BSR set to: 0
  6187  000A58  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6188  000A5C  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6189  000A60  2ADE               	incf	postinc2,f,c
  6190  000A62  0E00               	movlw	0
  6191  000A64  22DD               	addwfc	postdec2,f,c
  6192  000A66                     l926:
  6193                           
  6194                           ; BSR set to: 0
  6195                           
  6196                           ; BSR set to: 0
  6197                           
  6198                           ; BSR set to: 0
  6199  000A66  0797               	decf	__doprnt@len& (0+255),f,b
  6200  000A68  A0D8               	btfss	status,0,c
  6201  000A6A  0798               	decf	(__doprnt@len+1)& (0+255),f,b
  6202  000A6C  2997               	incf	__doprnt@len& (0+255),w,b
  6203  000A6E  E19F               	bnz	l6080
  6204  000A70  2998               	incf	(__doprnt@len+1)& (0+255),w,b
  6205  000A72  B4D8               	btfsc	status,2,c
  6206  000A74  D1ED               	goto	u7980
  6207  000A76  D79B               	goto	l924
  6208  000A78                     
  6209                           ; BSR set to: 0
  6210                           ;doprnt.c: 818: flag |= 0x40;
  6211                           
  6212                           ; BSR set to: 0
  6213  000A78  8D9D               	bsf	__doprnt@flag& (0+255),6,b
  6214                           
  6215                           ; BSR set to: 0
  6216                           ;doprnt.c: 822: }
  6217                           
  6218                           ;doprnt.c: 819: break;
  6219  000A7A  D01C               	goto	l910
  6220  000A7C                     l905:
  6221                           
  6222                           ; BSR set to: 0
  6223  000A7C  C08E  FFF6         	movff	__doprnt@f,tblptrl
  6224  000A80  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  6225  000A84  0100               	movlb	0	; () banked
  6226  000A86  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  6227  000A88  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  6228  000A8A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6229  000A8A  6AF8               	clrf	tblptru,c
  6230  000A8C                     	endif
  6231  000A8C                     	if	0	;tblptru may be non-zero
  6232  000A8C                     	endif
  6233  000A8C  0008               	tblrd		*
  6234  000A8E  CFF5 F0A0          	movff	tablat,__doprnt@c
  6235  000A92  51A0               	movf	__doprnt@c& (0+255),w,b
  6236                           
  6237                           ; Switch size 1, requested type "space"
  6238                           ; Number of cases is 5, Range of values is 0 to 117
  6239                           ; switch strategies available:
  6240                           ; Name         Instructions Cycles
  6241                           ; simple_byte           16     9 (average)
  6242                           ;	Chosen strategy is simple_byte
  6243  000A94  0A00               	xorlw	0	; case 0
  6244  000A96  B4D8               	btfsc	status,2,c
  6245  000A98  D1E9               	goto	u7990
  6246  000A9A  0A64               	xorlw	100	; case 100
  6247  000A9C  B4D8               	btfsc	status,2,c
  6248  000A9E  D00A               	goto	l910
  6249  000AA0  0A0D               	xorlw	13	; case 105
  6250  000AA2  B4D8               	btfsc	status,2,c
  6251  000AA4  D007               	goto	l910
  6252  000AA6  0A1A               	xorlw	26	; case 115
  6253  000AA8  B4D8               	btfsc	status,2,c
  6254  000AAA  D6F2               	goto	l911
  6255  000AAC  0A06               	xorlw	6	; case 117
  6256  000AAE  B4D8               	btfsc	status,2,c
  6257  000AB0  D7E3               	goto	l929
  6258  000AB2  D1CE               	goto	u7980
  6259  000AB4                     l910:
  6260                           
  6261                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  6262  000AB4  0100               	movlb	0	; () banked
  6263  000AB6  BD9D               	btfsc	__doprnt@flag& (0+255),6,b
  6264  000AB8  D01D               	goto	l930
  6265                           
  6266                           ; BSR set to: 0
  6267                           ;doprnt.c: 1253: {
  6268                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6269  000ABA  C090  FFD9         	movff	__doprnt@ap,fsr2l
  6270  000ABE  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  6271  000AC2  CFDF F092          	movff	indf2,??__doprnt
  6272  000AC6  0E02               	movlw	2
  6273  000AC8  26DE               	addwf	postinc2,f,c
  6274  000ACA  CFDF F093          	movff	indf2,??__doprnt+1
  6275  000ACE  0E00               	movlw	0
  6276  000AD0  22DD               	addwfc	postdec2,f,c
  6277  000AD2  C092  FFD9         	movff	??__doprnt,fsr2l
  6278  000AD6  C093  FFDA         	movff	??__doprnt+1,fsr2h
  6279  000ADA  CFDE F099          	movff	postinc2,__doprnt@val
  6280  000ADE  CFDD F09A          	movff	postdec2,__doprnt@val+1
  6281                           
  6282                           ; BSR set to: 0
  6283                           ;doprnt.c: 1261: if((int)val < 0) {
  6284  000AE2  AF9A               	btfss	(__doprnt@val+1)& (0+255),7,b
  6285  000AE4  D01B               	goto	l932
  6286                           
  6287                           ; BSR set to: 0
  6288                           ;doprnt.c: 1262: flag |= 0x03;
  6289  000AE6  0E03               	movlw	3
  6290  000AE8  139D               	iorwf	__doprnt@flag& (0+255),f,b
  6291                           
  6292                           ; BSR set to: 0
  6293                           ;doprnt.c: 1263: val = -val;
  6294  000AEA  6D99               	negf	__doprnt@val& (0+255),b
  6295  000AEC  1F9A               	comf	(__doprnt@val+1)& (0+255),f,b
  6296  000AEE  B0D8               	btfsc	status,0,c
  6297  000AF0  2B9A               	incf	(__doprnt@val+1)& (0+255),f,b
  6298                           
  6299                           ; BSR set to: 0
  6300                           ;doprnt.c: 1264: }
  6301                           ;doprnt.c: 1266: }
  6302  000AF2  D014               	goto	l932
  6303  000AF4                     l930:
  6304                           
  6305                           ; BSR set to: 0
  6306                           ;doprnt.c: 1268: else
  6307                           ;doprnt.c: 1273: {
  6308                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6309                           
  6310                           ; BSR set to: 0
  6311  000AF4  C090  FFD9         	movff	__doprnt@ap,fsr2l
  6312  000AF8  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  6313  000AFC  CFDF F092          	movff	indf2,??__doprnt
  6314  000B00  0E02               	movlw	2
  6315  000B02  26DE               	addwf	postinc2,f,c
  6316  000B04  CFDF F093          	movff	indf2,??__doprnt+1
  6317  000B08  0E00               	movlw	0
  6318  000B0A  22DD               	addwfc	postdec2,f,c
  6319  000B0C  C092  FFD9         	movff	??__doprnt,fsr2l
  6320  000B10  C093  FFDA         	movff	??__doprnt+1,fsr2h
  6321  000B14  CFDE F099          	movff	postinc2,__doprnt@val
  6322  000B18  CFDD F09A          	movff	postdec2,__doprnt@val+1
  6323  000B1C                     l932:
  6324                           
  6325                           ; BSR set to: 0
  6326                           ;doprnt.c: 1287: }
  6327                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6328                           
  6329                           ; BSR set to: 0
  6330  000B1C  0E01               	movlw	1
  6331  000B1E  6FA0               	movwf	__doprnt@c& (0+255),b
  6332  000B20                     l6112:
  6333                           
  6334                           ; BSR set to: 0
  6335  000B20  0E05               	movlw	5
  6336  000B22  19A0               	xorwf	__doprnt@c& (0+255),w,b
  6337  000B24  B4D8               	btfsc	status,2,c
  6338  000B26  D015               	goto	u7770
  6339                           
  6340                           ; BSR set to: 0
  6341                           ;doprnt.c: 1306: if(val < dpowers[c])
  6342                           
  6343                           ; BSR set to: 0
  6344                           
  6345                           ; BSR set to: 0
  6346  000B28  51A0               	movf	__doprnt@c& (0+255),w,b
  6347  000B2A  0D02               	mullw	2
  6348  000B2C  0E94               	movlw	low _dpowers
  6349  000B2E  24F3               	addwf	prodl,w,c
  6350  000B30  6EF6               	movwf	tblptrl,c
  6351  000B32  0EFB               	movlw	high _dpowers
  6352  000B34  20F4               	addwfc	prodh,w,c
  6353  000B36  6EF7               	movwf	tblptrh,c
  6354  000B38                     	if	1	;There are 3 active tblptr bytes
  6355  000B38  6AF8               	clrf	tblptru,c
  6356  000B3A  0E00               	movlw	low (__mediumconst shr (0+16))
  6357  000B3C  22F8               	addwfc	tblptru,f,c
  6358  000B3E                     	endif
  6359  000B3E  0009               	tblrd		*+
  6360  000B40  50F5               	movf	tablat,w,c
  6361  000B42  5D99               	subwf	__doprnt@val& (0+255),w,b
  6362  000B44  0009               	tblrd		*+
  6363  000B46  50F5               	movf	tablat,w,c
  6364  000B48  599A               	subwfb	(__doprnt@val+1)& (0+255),w,b
  6365  000B4A  A0D8               	btfss	status,0,c
  6366  000B4C  D002               	goto	u7770
  6367                           
  6368                           ; BSR set to: 0
  6369                           
  6370                           ; BSR set to: 0
  6371                           
  6372                           ; BSR set to: 0
  6373                           ;doprnt.c: 1307: break;
  6374  000B4E  2BA0               	incf	__doprnt@c& (0+255),f,b
  6375  000B50  D7E7               	goto	l6112
  6376  000B52                     u7770:
  6377                           
  6378                           ; BSR set to: 0
  6379                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6380                           
  6381                           ; BSR set to: 0
  6382  000B52  519E               	movf	__doprnt@width& (0+255),w,b
  6383  000B54  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
  6384  000B56  B4D8               	btfsc	status,2,c
  6385  000B58  D009               	goto	l936
  6386                           
  6387                           ; BSR set to: 0
  6388  000B5A  C09D  F092         	movff	__doprnt@flag,??__doprnt
  6389  000B5E  0E03               	movlw	3
  6390  000B60  1792               	andwf	??__doprnt& (0+255),f,b
  6391  000B62  B4D8               	btfsc	status,2,c
  6392  000B64  D003               	goto	l936
  6393                           
  6394                           ; BSR set to: 0
  6395                           ;doprnt.c: 1346: width--;
  6396  000B66  079E               	decf	__doprnt@width& (0+255),f,b
  6397  000B68  A0D8               	btfss	status,0,c
  6398  000B6A  079F               	decf	(__doprnt@width+1)& (0+255),f,b
  6399  000B6C                     l936:
  6400                           
  6401                           ; BSR set to: 0
  6402                           ;doprnt.c: 1381: if(width > c)
  6403                           
  6404                           ; BSR set to: 0
  6405  000B6C  0E80               	movlw	128
  6406  000B6E  BFA0               	btfsc	__doprnt@c& (0+255),7,b
  6407  000B70  0E7F               	movlw	127
  6408  000B72  6F92               	movwf	??__doprnt& (0+255),b
  6409  000B74  519E               	movf	__doprnt@width& (0+255),w,b
  6410  000B76  5DA0               	subwf	__doprnt@c& (0+255),w,b
  6411  000B78  519F               	movf	(__doprnt@width+1)& (0+255),w,b
  6412  000B7A  0A80               	xorlw	128
  6413  000B7C  5992               	subwfb	??__doprnt& (0+255),w,b
  6414  000B7E  B0D8               	btfsc	status,0,c
  6415  000B80  D007               	goto	l937
  6416                           
  6417                           ; BSR set to: 0
  6418                           ;doprnt.c: 1382: width -= c;
  6419  000B82  51A0               	movf	__doprnt@c& (0+255),w,b
  6420  000B84  5F9E               	subwf	__doprnt@width& (0+255),f,b
  6421  000B86  0E00               	movlw	0
  6422  000B88  BFA0               	btfsc	__doprnt@c& (0+255),7,b
  6423  000B8A  0EFF               	movlw	255
  6424  000B8C  5B9F               	subwfb	(__doprnt@width+1)& (0+255),f,b
  6425  000B8E  D004               	goto	l938
  6426  000B90                     l937:
  6427                           
  6428                           ; BSR set to: 0
  6429                           ;doprnt.c: 1383: else
  6430                           ;doprnt.c: 1384: width = 0;
  6431                           
  6432                           ; BSR set to: 0
  6433  000B90  0E00               	movlw	0
  6434  000B92  6F9F               	movwf	(__doprnt@width+1)& (0+255),b
  6435  000B94  0E00               	movlw	0
  6436  000B96  6F9E               	movwf	__doprnt@width& (0+255),b
  6437  000B98                     l938:
  6438                           
  6439                           ; BSR set to: 0
  6440                           ;doprnt.c: 1387: if(flag & 0x04) {
  6441                           
  6442                           ; BSR set to: 0
  6443  000B98  A59D               	btfss	__doprnt@flag& (0+255),2,b
  6444  000B9A  D07A               	goto	l939
  6445                           
  6446                           ; BSR set to: 0
  6447                           ;doprnt.c: 1392: if(flag & 0x03)
  6448  000B9C  C09D  F092         	movff	__doprnt@flag,??__doprnt
  6449  000BA0  0E03               	movlw	3
  6450  000BA2  1792               	andwf	??__doprnt& (0+255),f,b
  6451  000BA4  B4D8               	btfsc	status,2,c
  6452  000BA6  D035               	goto	l942
  6453                           
  6454                           ; BSR set to: 0
  6455                           ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  6456  000BA8  EE20 F002          	lfsr	2,2
  6457  000BAC  518C               	movf	__doprnt@pb& (0+255),w,b
  6458  000BAE  26D9               	addwf	fsr2l,f,c
  6459  000BB0  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  6460  000BB2  22DA               	addwfc	fsr2h,f,c
  6461  000BB4  50DE               	movf	postinc2,w,c
  6462  000BB6  10DE               	iorwf	postinc2,w,c
  6463  000BB8  B4D8               	btfsc	status,2,c
  6464  000BBA  D016               	goto	l941
  6465                           
  6466                           ; BSR set to: 0
  6467  000BBC  EE20 F002          	lfsr	2,2
  6468  000BC0  518C               	movf	__doprnt@pb& (0+255),w,b
  6469  000BC2  26D9               	addwf	fsr2l,f,c
  6470  000BC4  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  6471  000BC6  22DA               	addwfc	fsr2h,f,c
  6472  000BC8  CFDE F092          	movff	postinc2,??__doprnt
  6473  000BCC  CFDD F093          	movff	postdec2,??__doprnt+1
  6474  000BD0  D801               	call	u7848
  6475  000BD2  D01F               	goto	l942
  6476  000BD4                     u7848:
  6477  000BD4  0005               	push	
  6478  000BD6  6EFA               	movwf	pclath,c
  6479  000BD8  5192               	movf	??__doprnt& (0+255),w,b
  6480  000BDA  6EFD               	movwf	tosl,c
  6481  000BDC  5193               	movf	(??__doprnt+1)& (0+255),w,b
  6482  000BDE  6EFE               	movwf	tosh,c
  6483  000BE0  6AFF               	clrf	tosu,c
  6484  000BE2  50FA               	movf	pclath,w,c
  6485  000BE4  0E2D               	movlw	45
  6486  000BE6  0012               	return		;indir
  6487  000BE8                     l941:
  6488  000BE8  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6489  000BEC  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6490  000BF0  CFDE F092          	movff	postinc2,??__doprnt
  6491  000BF4  CFDD F093          	movff	postdec2,??__doprnt+1
  6492  000BF8  C092  FFD9         	movff	??__doprnt,fsr2l
  6493  000BFC  C093  FFDA         	movff	??__doprnt+1,fsr2h
  6494  000C00  0E2D               	movlw	45
  6495  000C02  6EDF               	movwf	indf2,c
  6496  000C04  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6497  000C08  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6498  000C0C  2ADE               	incf	postinc2,f,c
  6499  000C0E  0E00               	movlw	0
  6500  000C10  22DD               	addwfc	postdec2,f,c
  6501  000C12                     l942:
  6502                           
  6503                           ;doprnt.c: 1415: if(width)
  6504  000C12  0100               	movlb	0	; () banked
  6505  000C14  519E               	movf	__doprnt@width& (0+255),w,b
  6506  000C16  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
  6507  000C18  B4D8               	btfsc	status,2,c
  6508  000C1A  D0B6               	goto	l956
  6509                           
  6510                           ; BSR set to: 0
  6511                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
  6512                           
  6513                           ; BSR set to: 0
  6514                           
  6515                           ;doprnt.c: 1416: do
  6516  000C1C  EE20 F002          	lfsr	2,2
  6517  000C20  518C               	movf	__doprnt@pb& (0+255),w,b
  6518  000C22  26D9               	addwf	fsr2l,f,c
  6519  000C24  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  6520  000C26  22DA               	addwfc	fsr2h,f,c
  6521  000C28  50DE               	movf	postinc2,w,c
  6522  000C2A  10DE               	iorwf	postinc2,w,c
  6523  000C2C  B4D8               	btfsc	status,2,c
  6524  000C2E  D016               	goto	l945
  6525                           
  6526                           ; BSR set to: 0
  6527  000C30  EE20 F002          	lfsr	2,2
  6528  000C34  518C               	movf	__doprnt@pb& (0+255),w,b
  6529  000C36  26D9               	addwf	fsr2l,f,c
  6530  000C38  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  6531  000C3A  22DA               	addwfc	fsr2h,f,c
  6532  000C3C  CFDE F092          	movff	postinc2,??__doprnt
  6533  000C40  CFDD F093          	movff	postdec2,??__doprnt+1
  6534  000C44  D801               	call	u7878
  6535  000C46  D01F               	goto	l946
  6536  000C48                     u7878:
  6537  000C48  0005               	push	
  6538  000C4A  6EFA               	movwf	pclath,c
  6539  000C4C  5192               	movf	??__doprnt& (0+255),w,b
  6540  000C4E  6EFD               	movwf	tosl,c
  6541  000C50  5193               	movf	(??__doprnt+1)& (0+255),w,b
  6542  000C52  6EFE               	movwf	tosh,c
  6543  000C54  6AFF               	clrf	tosu,c
  6544  000C56  50FA               	movf	pclath,w,c
  6545  000C58  0E30               	movlw	48
  6546  000C5A  0012               	return		;indir
  6547  000C5C                     l945:
  6548  000C5C  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6549  000C60  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6550  000C64  CFDE F092          	movff	postinc2,??__doprnt
  6551  000C68  CFDD F093          	movff	postdec2,??__doprnt+1
  6552  000C6C  C092  FFD9         	movff	??__doprnt,fsr2l
  6553  000C70  C093  FFDA         	movff	??__doprnt+1,fsr2h
  6554  000C74  0E30               	movlw	48
  6555  000C76  6EDF               	movwf	indf2,c
  6556  000C78  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6557  000C7C  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6558  000C80  2ADE               	incf	postinc2,f,c
  6559  000C82  0E00               	movlw	0
  6560  000C84  22DD               	addwfc	postdec2,f,c
  6561  000C86                     l946:
  6562                           
  6563                           ;doprnt.c: 1418: while(--width);
  6564  000C86  0100               	movlb	0	; () banked
  6565  000C88  079E               	decf	__doprnt@width& (0+255),f,b
  6566  000C8A  A0D8               	btfss	status,0,c
  6567  000C8C  079F               	decf	(__doprnt@width+1)& (0+255),f,b
  6568  000C8E  D7C2               	goto	L25
  6569  000C90                     l939:
  6570                           
  6571                           ; BSR set to: 0
  6572                           ;doprnt.c: 1422: {
  6573                           ;doprnt.c: 1424: if(width
  6574                           ;doprnt.c: 1428: )
  6575                           
  6576                           ; BSR set to: 0
  6577  000C90  519E               	movf	__doprnt@width& (0+255),w,b
  6578  000C92  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
  6579  000C94  B4D8               	btfsc	status,2,c
  6580  000C96  D03D               	goto	u7920
  6581  000C98                     u7890:
  6582                           
  6583                           ; BSR set to: 0
  6584                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  6585                           
  6586                           ; BSR set to: 0
  6587                           
  6588                           ;doprnt.c: 1429: do
  6589  000C98  EE20 F002          	lfsr	2,2
  6590  000C9C  518C               	movf	__doprnt@pb& (0+255),w,b
  6591  000C9E  26D9               	addwf	fsr2l,f,c
  6592  000CA0  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  6593  000CA2  22DA               	addwfc	fsr2h,f,c
  6594  000CA4  50DE               	movf	postinc2,w,c
  6595  000CA6  10DE               	iorwf	postinc2,w,c
  6596  000CA8  B4D8               	btfsc	status,2,c
  6597  000CAA  D016               	goto	l951
  6598                           
  6599                           ; BSR set to: 0
  6600  000CAC  EE20 F002          	lfsr	2,2
  6601  000CB0  518C               	movf	__doprnt@pb& (0+255),w,b
  6602  000CB2  26D9               	addwf	fsr2l,f,c
  6603  000CB4  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  6604  000CB6  22DA               	addwfc	fsr2h,f,c
  6605  000CB8  CFDE F092          	movff	postinc2,??__doprnt
  6606  000CBC  CFDD F093          	movff	postdec2,??__doprnt+1
  6607  000CC0  D801               	call	u7918
  6608  000CC2  D01F               	goto	l952
  6609  000CC4                     u7918:
  6610  000CC4  0005               	push	
  6611  000CC6  6EFA               	movwf	pclath,c
  6612  000CC8  5192               	movf	??__doprnt& (0+255),w,b
  6613  000CCA  6EFD               	movwf	tosl,c
  6614  000CCC  5193               	movf	(??__doprnt+1)& (0+255),w,b
  6615  000CCE  6EFE               	movwf	tosh,c
  6616  000CD0  6AFF               	clrf	tosu,c
  6617  000CD2  50FA               	movf	pclath,w,c
  6618  000CD4  0E20               	movlw	32
  6619  000CD6  0012               	return		;indir
  6620  000CD8                     l951:
  6621  000CD8  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6622  000CDC  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6623  000CE0  CFDE F092          	movff	postinc2,??__doprnt
  6624  000CE4  CFDD F093          	movff	postdec2,??__doprnt+1
  6625  000CE8  C092  FFD9         	movff	??__doprnt,fsr2l
  6626  000CEC  C093  FFDA         	movff	??__doprnt+1,fsr2h
  6627  000CF0  0E20               	movlw	32
  6628  000CF2  6EDF               	movwf	indf2,c
  6629  000CF4  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6630  000CF8  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6631  000CFC  2ADE               	incf	postinc2,f,c
  6632  000CFE  0E00               	movlw	0
  6633  000D00  22DD               	addwfc	postdec2,f,c
  6634  000D02                     l952:
  6635                           
  6636                           ;doprnt.c: 1431: while(--width);
  6637  000D02  0100               	movlb	0	; () banked
  6638  000D04  079E               	decf	__doprnt@width& (0+255),f,b
  6639  000D06  A0D8               	btfss	status,0,c
  6640  000D08  079F               	decf	(__doprnt@width+1)& (0+255),f,b
  6641  000D0A  519E               	movf	__doprnt@width& (0+255),w,b
  6642  000D0C  119F               	iorwf	(__doprnt@width+1)& (0+255),w,b
  6643  000D0E  A4D8               	btfss	status,2,c
  6644  000D10  D7C3               	goto	u7890
  6645  000D12                     u7920:
  6646                           
  6647                           ; BSR set to: 0
  6648                           ;doprnt.c: 1438: if(flag & 0x03)
  6649                           
  6650                           ; BSR set to: 0
  6651                           
  6652                           ; BSR set to: 0
  6653  000D12  C09D  F092         	movff	__doprnt@flag,??__doprnt
  6654  000D16  0E03               	movlw	3
  6655  000D18  1792               	andwf	??__doprnt& (0+255),f,b
  6656  000D1A  B4D8               	btfsc	status,2,c
  6657  000D1C  D035               	goto	l956
  6658                           
  6659                           ; BSR set to: 0
  6660                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  6661  000D1E  EE20 F002          	lfsr	2,2
  6662  000D22  518C               	movf	__doprnt@pb& (0+255),w,b
  6663  000D24  26D9               	addwf	fsr2l,f,c
  6664  000D26  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  6665  000D28  22DA               	addwfc	fsr2h,f,c
  6666  000D2A  50DE               	movf	postinc2,w,c
  6667  000D2C  10DE               	iorwf	postinc2,w,c
  6668  000D2E  B4D8               	btfsc	status,2,c
  6669  000D30  D016               	goto	l955
  6670                           
  6671                           ; BSR set to: 0
  6672  000D32  EE20 F002          	lfsr	2,2
  6673  000D36  518C               	movf	__doprnt@pb& (0+255),w,b
  6674  000D38  26D9               	addwf	fsr2l,f,c
  6675  000D3A  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  6676  000D3C  22DA               	addwfc	fsr2h,f,c
  6677  000D3E  CFDE F092          	movff	postinc2,??__doprnt
  6678  000D42  CFDD F093          	movff	postdec2,??__doprnt+1
  6679  000D46  D801               	call	u7958
  6680  000D48  D01F               	goto	l956
  6681  000D4A                     u7958:
  6682  000D4A  0005               	push	
  6683  000D4C  6EFA               	movwf	pclath,c
  6684  000D4E  5192               	movf	??__doprnt& (0+255),w,b
  6685  000D50  6EFD               	movwf	tosl,c
  6686  000D52  5193               	movf	(??__doprnt+1)& (0+255),w,b
  6687  000D54  6EFE               	movwf	tosh,c
  6688  000D56  6AFF               	clrf	tosu,c
  6689  000D58  50FA               	movf	pclath,w,c
  6690  000D5A  0E2D               	movlw	45
  6691  000D5C  0012               	return		;indir
  6692  000D5E                     l955:
  6693  000D5E  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6694  000D62  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6695  000D66  CFDE F092          	movff	postinc2,??__doprnt
  6696  000D6A  CFDD F093          	movff	postdec2,??__doprnt+1
  6697  000D6E  C092  FFD9         	movff	??__doprnt,fsr2l
  6698  000D72  C093  FFDA         	movff	??__doprnt+1,fsr2h
  6699  000D76  0E2D               	movlw	45
  6700  000D78  6EDF               	movwf	indf2,c
  6701  000D7A  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6702  000D7E  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6703  000D82  2ADE               	incf	postinc2,f,c
  6704  000D84  0E00               	movlw	0
  6705  000D86  22DD               	addwfc	postdec2,f,c
  6706  000D88                     l956:
  6707                           
  6708                           ;doprnt.c: 1469: }
  6709                           ;doprnt.c: 1472: prec = c;
  6710  000D88  C0A0  F096         	movff	__doprnt@c,__doprnt@prec
  6711                           
  6712                           ;doprnt.c: 1474: while(prec--) {
  6713  000D8C  D05C               	goto	l960
  6714  000D8E                     
  6715                           ;doprnt.c: 1478: {
  6716                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6717  000D8E  0100               	movlb	0	; () banked
  6718  000D90  5196               	movf	__doprnt@prec& (0+255),w,b
  6719  000D92  0D02               	mullw	2
  6720  000D94  0E94               	movlw	low _dpowers
  6721  000D96  24F3               	addwf	prodl,w,c
  6722  000D98  6EF6               	movwf	tblptrl,c
  6723  000D9A  0EFB               	movlw	high _dpowers
  6724  000D9C  20F4               	addwfc	prodh,w,c
  6725  000D9E  6EF7               	movwf	tblptrh,c
  6726  000DA0                     	if	1	;There are 3 active tblptr bytes
  6727  000DA0  6AF8               	clrf	tblptru,c
  6728  000DA2  0E00               	movlw	low (__mediumconst shr (0+16))
  6729  000DA4  22F8               	addwfc	tblptru,f,c
  6730  000DA6                     	endif
  6731  000DA6  0009               	tblrd		*+
  6732  000DA8  CFF5 F082          	movff	tablat,___lwdiv@divisor
  6733  000DAC  000A               	tblrd		*-
  6734  000DAE  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  6735  000DB2  C099  F080         	movff	__doprnt@val,___lwdiv@dividend
  6736  000DB6  C09A  F081         	movff	__doprnt@val+1,___lwdiv@dividend+1
  6737  000DBA  ECDB  F01D         	call	___lwdiv
  6738  000DBE  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  6739  000DC2  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  6740  000DC6  0E00               	movlw	0
  6741  000DC8  0100               	movlb	0	; () banked
  6742  000DCA  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  6743  000DCC  0E0A               	movlw	10
  6744  000DCE  6F89               	movwf	___lwmod@divisor& (0+255),b
  6745  000DD0  EC71  F01E         	call	___lwmod	;wreg free
  6746  000DD4  0100               	movlb	0	; () banked
  6747  000DD6  5187               	movf	?___lwmod& (0+255),w,b
  6748  000DD8  0F30               	addlw	48
  6749  000DDA  6FA0               	movwf	__doprnt@c& (0+255),b
  6750                           
  6751                           ; BSR set to: 0
  6752                           ;doprnt.c: 1523: }
  6753                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  6754  000DDC  EE20 F002          	lfsr	2,2
  6755  000DE0  518C               	movf	__doprnt@pb& (0+255),w,b
  6756  000DE2  26D9               	addwf	fsr2l,f,c
  6757  000DE4  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  6758  000DE6  22DA               	addwfc	fsr2h,f,c
  6759  000DE8  50DE               	movf	postinc2,w,c
  6760  000DEA  10DE               	iorwf	postinc2,w,c
  6761  000DEC  B4D8               	btfsc	status,2,c
  6762  000DEE  D016               	goto	l959
  6763                           
  6764                           ; BSR set to: 0
  6765  000DF0  EE20 F002          	lfsr	2,2
  6766  000DF4  518C               	movf	__doprnt@pb& (0+255),w,b
  6767  000DF6  26D9               	addwf	fsr2l,f,c
  6768  000DF8  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  6769  000DFA  22DA               	addwfc	fsr2h,f,c
  6770  000DFC  CFDE F092          	movff	postinc2,??__doprnt
  6771  000E00  CFDD F093          	movff	postdec2,??__doprnt+1
  6772  000E04  D801               	call	u7978
  6773  000E06  D01F               	goto	l960
  6774  000E08                     u7978:
  6775  000E08  0005               	push	
  6776  000E0A  6EFA               	movwf	pclath,c
  6777  000E0C  5192               	movf	??__doprnt& (0+255),w,b
  6778  000E0E  6EFD               	movwf	tosl,c
  6779  000E10  5193               	movf	(??__doprnt+1)& (0+255),w,b
  6780  000E12  6EFE               	movwf	tosh,c
  6781  000E14  6AFF               	clrf	tosu,c
  6782  000E16  50FA               	movf	pclath,w,c
  6783  000E18  51A0               	movf	__doprnt@c& (0+255),w,b
  6784  000E1A  0012               	return		;indir
  6785  000E1C                     l959:
  6786  000E1C  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6787  000E20  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6788  000E24  CFDE F092          	movff	postinc2,??__doprnt
  6789  000E28  CFDD F093          	movff	postdec2,??__doprnt+1
  6790  000E2C  C092  FFD9         	movff	??__doprnt,fsr2l
  6791  000E30  C093  FFDA         	movff	??__doprnt+1,fsr2h
  6792  000E34  C0A0  FFDF         	movff	__doprnt@c,indf2
  6793  000E38  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6794  000E3C  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6795  000E40  2ADE               	incf	postinc2,f,c
  6796  000E42  0E00               	movlw	0
  6797  000E44  22DD               	addwfc	postdec2,f,c
  6798  000E46                     l960:
  6799  000E46  0100               	movlb	0	; () banked
  6800  000E48  0796               	decf	__doprnt@prec& (0+255),f,b
  6801  000E4A  2996               	incf	__doprnt@prec& (0+255),w,b
  6802  000E4C  A4D8               	btfss	status,2,c
  6803  000E4E  D79F               	goto	l958
  6804  000E50                     u7980:
  6805                           
  6806                           ; BSR set to: 0
  6807                           
  6808                           ; BSR set to: 0
  6809  000E50  C08E  FFF6         	movff	__doprnt@f,tblptrl
  6810  000E54  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  6811  000E58  0100               	movlb	0	; () banked
  6812  000E5A  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  6813  000E5C  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  6814  000E5E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6815  000E5E  6AF8               	clrf	tblptru,c
  6816  000E60                     	endif
  6817  000E60                     	if	0	;tblptru may be non-zero
  6818  000E60                     	endif
  6819  000E60  0008               	tblrd		*
  6820  000E62  CFF5 F0A0          	movff	tablat,__doprnt@c
  6821  000E66  51A0               	movf	__doprnt@c& (0+255),w,b
  6822  000E68  A4D8               	btfss	status,2,c
  6823  000E6A  D47E               	goto	l892
  6824  000E6C                     u7990:
  6825                           
  6826                           ;doprnt.c: 1540: return 0;
  6827                           
  6828                           ; BSR set to: 0
  6829                           
  6830                           ;doprnt.c: 1525: }
  6831                           ;doprnt.c: 1533: }
  6832                           ;doprnt.c: 1535: alldone:
  6833                           
  6834                           ; BSR set to: 0
  6835  000E6C  0E00               	movlw	0
  6836  000E6E  0100               	movlb	0	; () banked
  6837  000E70  6F8D               	movwf	(?__doprnt+1)& (0+255),b
  6838  000E72  0E00               	movlw	0
  6839  000E74  6F8C               	movwf	?__doprnt& (0+255),b
  6840  000E76  0012               	return	
  6841  000E78                     __end_of__doprnt:
  6842                           	opt stack 0
  6843                           tosu	equ	0xFFF
  6844                           tosh	equ	0xFFE
  6845                           tosl	equ	0xFFD
  6846                           pclath	equ	0xFFA
  6847                           tblptru	equ	0xFF8
  6848                           tblptrh	equ	0xFF7
  6849                           tblptrl	equ	0xFF6
  6850                           tablat	equ	0xFF5
  6851                           prodh	equ	0xFF4
  6852                           prodl	equ	0xFF3
  6853                           intcon	equ	0xFF2
  6854                           indf0	equ	0xFEF
  6855                           postinc0	equ	0xFEE
  6856                           fsr0h	equ	0xFEA
  6857                           fsr0l	equ	0xFE9
  6858                           wreg	equ	0xFE8
  6859                           postdec1	equ	0xFE5
  6860                           plusw1	equ	0xFE3
  6861                           fsr1l	equ	0xFE1
  6862                           indf2	equ	0xFDF
  6863                           postinc2	equ	0xFDE
  6864                           postdec2	equ	0xFDD
  6865                           plusw2	equ	0xFDB
  6866                           fsr2h	equ	0xFDA
  6867                           fsr2l	equ	0xFD9
  6868                           status	equ	0xFD8
  6869                           
  6870 ;; *************** function _isdigit *****************
  6871 ;; Defined at:
  6872 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  6873 ;; Parameters:    Size  Location     Type
  6874 ;;  c               1    wreg     unsigned char 
  6875 ;; Auto vars:     Size  Location     Type
  6876 ;;  c               1    2[BANK0 ] unsigned char 
  6877 ;; Return value:  Size  Location     Type
  6878 ;;		None               void
  6879 ;; Registers used:
  6880 ;;		wreg, status,2, status,0
  6881 ;; Tracked objects:
  6882 ;;		On entry : 0/0
  6883 ;;		On exit  : 0/0
  6884 ;;		Unchanged: 0/0
  6885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6887 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6888 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6889 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6890 ;;Total ram usage:        3 bytes
  6891 ;; Hardware stack levels used:    1
  6892 ;; Hardware stack levels required when called:    4
  6893 ;; This function calls:
  6894 ;;		Nothing
  6895 ;; This function is called by:
  6896 ;;		__doprnt
  6897 ;; This function uses a non-reentrant model
  6898 ;;
  6899                           
  6900                           	psect	text10
  6901  003EEA                     __ptext10:
  6902                           	opt stack 0
  6903  003EEA                     _isdigit:
  6904                           	opt stack 22
  6905                           
  6906                           ; BSR set to: 0
  6907                           ;incstack = 0
  6908                           ;isdigit@c stored from wreg
  6909  003EEA  0100               	movlb	0	; () banked
  6910  003EEC  6F82               	movwf	isdigit@c& (0+255),b
  6911  003EEE  0E00               	movlw	0
  6912  003EF0  0100               	movlb	0	; () banked
  6913  003EF2  6F81               	movwf	_isdigit$1941& (0+255),b
  6914                           
  6915                           ; BSR set to: 0
  6916  003EF4  0E3A               	movlw	58
  6917  003EF6  6182               	cpfslt	isdigit@c& (0+255),b
  6918  003EF8  D005               	goto	l1293
  6919                           
  6920                           ; BSR set to: 0
  6921  003EFA  0E2F               	movlw	47
  6922  003EFC  6582               	cpfsgt	isdigit@c& (0+255),b
  6923  003EFE  D002               	goto	l1293
  6924                           
  6925                           ; BSR set to: 0
  6926  003F00  0E01               	movlw	1
  6927  003F02  6F81               	movwf	_isdigit$1941& (0+255),b
  6928  003F04                     l1293:
  6929                           
  6930                           ; BSR set to: 0
  6931                           
  6932                           ; BSR set to: 0
  6933  003F04  C081  F080         	movff	_isdigit$1941,??_isdigit
  6934  003F08  3180               	rrcf	??_isdigit& (0+255),w,b
  6935  003F0A  0012               	return	
  6936  003F0C                     __end_of_isdigit:
  6937                           	opt stack 0
  6938                           tosu	equ	0xFFF
  6939                           tosh	equ	0xFFE
  6940                           tosl	equ	0xFFD
  6941                           pclath	equ	0xFFA
  6942                           tblptru	equ	0xFF8
  6943                           tblptrh	equ	0xFF7
  6944                           tblptrl	equ	0xFF6
  6945                           tablat	equ	0xFF5
  6946                           prodh	equ	0xFF4
  6947                           prodl	equ	0xFF3
  6948                           intcon	equ	0xFF2
  6949                           indf0	equ	0xFEF
  6950                           postinc0	equ	0xFEE
  6951                           fsr0h	equ	0xFEA
  6952                           fsr0l	equ	0xFE9
  6953                           wreg	equ	0xFE8
  6954                           postdec1	equ	0xFE5
  6955                           plusw1	equ	0xFE3
  6956                           fsr1l	equ	0xFE1
  6957                           indf2	equ	0xFDF
  6958                           postinc2	equ	0xFDE
  6959                           postdec2	equ	0xFDD
  6960                           plusw2	equ	0xFDB
  6961                           fsr2h	equ	0xFDA
  6962                           fsr2l	equ	0xFD9
  6963                           status	equ	0xFD8
  6964                           
  6965 ;; *************** function ___lwmod *****************
  6966 ;; Defined at:
  6967 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  6968 ;; Parameters:    Size  Location     Type
  6969 ;;  dividend        2    7[BANK0 ] unsigned int 
  6970 ;;  divisor         2    9[BANK0 ] unsigned int 
  6971 ;; Auto vars:     Size  Location     Type
  6972 ;;  counter         1   11[BANK0 ] unsigned char 
  6973 ;; Return value:  Size  Location     Type
  6974 ;;                  2    7[BANK0 ] unsigned int 
  6975 ;; Registers used:
  6976 ;;		wreg, status,2, status,0
  6977 ;; Tracked objects:
  6978 ;;		On entry : 0/0
  6979 ;;		On exit  : 0/0
  6980 ;;		Unchanged: 0/0
  6981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6982 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6983 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6985 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6986 ;;Total ram usage:        5 bytes
  6987 ;; Hardware stack levels used:    1
  6988 ;; Hardware stack levels required when called:    4
  6989 ;; This function calls:
  6990 ;;		Nothing
  6991 ;; This function is called by:
  6992 ;;		__doprnt
  6993 ;; This function uses a non-reentrant model
  6994 ;;
  6995                           
  6996                           	psect	text11
  6997  003CE2                     __ptext11:
  6998                           	opt stack 0
  6999  003CE2                     ___lwmod:
  7000                           	opt stack 22
  7001                           
  7002                           ; BSR set to: 0
  7003                           ;incstack = 0
  7004  003CE2  0100               	movlb	0	; () banked
  7005  003CE4  5189               	movf	___lwmod@divisor& (0+255),w,b
  7006  003CE6  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  7007  003CE8  B4D8               	btfsc	status,2,c
  7008  003CEA  D018               	goto	l1387
  7009                           
  7010                           ; BSR set to: 0
  7011  003CEC  0E01               	movlw	1
  7012  003CEE  6F8B               	movwf	___lwmod@counter& (0+255),b
  7013  003CF0  D004               	goto	l1382
  7014  003CF2                     
  7015                           ; BSR set to: 0
  7016                           
  7017                           ; BSR set to: 0
  7018  003CF2  90D8               	bcf	status,0,c
  7019  003CF4  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  7020  003CF6  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  7021  003CF8  2B8B               	incf	___lwmod@counter& (0+255),f,b
  7022  003CFA                     l1382:
  7023                           
  7024                           ; BSR set to: 0
  7025                           
  7026                           ; BSR set to: 0
  7027  003CFA  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  7028  003CFC  D7FA               	goto	l1383
  7029  003CFE                     u7120:
  7030                           
  7031                           ; BSR set to: 0
  7032                           
  7033                           ; BSR set to: 0
  7034                           
  7035                           ; BSR set to: 0
  7036  003CFE  5189               	movf	___lwmod@divisor& (0+255),w,b
  7037  003D00  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  7038  003D02  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7039  003D04  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  7040  003D06  A0D8               	btfss	status,0,c
  7041  003D08  D004               	goto	l1386
  7042                           
  7043                           ; BSR set to: 0
  7044  003D0A  5189               	movf	___lwmod@divisor& (0+255),w,b
  7045  003D0C  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  7046  003D0E  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7047  003D10  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  7048  003D12                     l1386:
  7049                           
  7050                           ; BSR set to: 0
  7051                           
  7052                           ; BSR set to: 0
  7053  003D12  90D8               	bcf	status,0,c
  7054  003D14  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  7055  003D16  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  7056                           
  7057                           ; BSR set to: 0
  7058  003D18  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  7059  003D1A  D7F1               	goto	u7120
  7060  003D1C                     l1387:
  7061                           
  7062                           ; BSR set to: 0
  7063                           
  7064                           ; BSR set to: 0
  7065  003D1C  C087  F087         	movff	___lwmod@dividend,?___lwmod
  7066  003D20  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  7067                           
  7068                           ; BSR set to: 0
  7069  003D24  0012               	return		;funcret
  7070  003D26                     __end_of___lwmod:
  7071                           	opt stack 0
  7072                           tosu	equ	0xFFF
  7073                           tosh	equ	0xFFE
  7074                           tosl	equ	0xFFD
  7075                           pclath	equ	0xFFA
  7076                           tblptru	equ	0xFF8
  7077                           tblptrh	equ	0xFF7
  7078                           tblptrl	equ	0xFF6
  7079                           tablat	equ	0xFF5
  7080                           prodh	equ	0xFF4
  7081                           prodl	equ	0xFF3
  7082                           intcon	equ	0xFF2
  7083                           indf0	equ	0xFEF
  7084                           postinc0	equ	0xFEE
  7085                           fsr0h	equ	0xFEA
  7086                           fsr0l	equ	0xFE9
  7087                           wreg	equ	0xFE8
  7088                           postdec1	equ	0xFE5
  7089                           plusw1	equ	0xFE3
  7090                           fsr1l	equ	0xFE1
  7091                           indf2	equ	0xFDF
  7092                           postinc2	equ	0xFDE
  7093                           postdec2	equ	0xFDD
  7094                           plusw2	equ	0xFDB
  7095                           fsr2h	equ	0xFDA
  7096                           fsr2l	equ	0xFD9
  7097                           status	equ	0xFD8
  7098                           
  7099 ;; *************** function ___lwdiv *****************
  7100 ;; Defined at:
  7101 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  7102 ;; Parameters:    Size  Location     Type
  7103 ;;  dividend        2    0[BANK0 ] unsigned int 
  7104 ;;  divisor         2    2[BANK0 ] unsigned int 
  7105 ;; Auto vars:     Size  Location     Type
  7106 ;;  quotient        2    5[BANK0 ] unsigned int 
  7107 ;;  counter         1    4[BANK0 ] unsigned char 
  7108 ;; Return value:  Size  Location     Type
  7109 ;;                  2    0[BANK0 ] unsigned int 
  7110 ;; Registers used:
  7111 ;;		wreg, status,2, status,0
  7112 ;; Tracked objects:
  7113 ;;		On entry : 0/0
  7114 ;;		On exit  : 0/0
  7115 ;;		Unchanged: 0/0
  7116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7117 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7118 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7120 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7121 ;;Total ram usage:        7 bytes
  7122 ;; Hardware stack levels used:    1
  7123 ;; Hardware stack levels required when called:    4
  7124 ;; This function calls:
  7125 ;;		Nothing
  7126 ;; This function is called by:
  7127 ;;		__doprnt
  7128 ;; This function uses a non-reentrant model
  7129 ;;
  7130                           
  7131                           	psect	text12
  7132  003BB6                     __ptext12:
  7133                           	opt stack 0
  7134  003BB6                     ___lwdiv:
  7135                           	opt stack 22
  7136                           
  7137                           ; BSR set to: 0
  7138                           ;incstack = 0
  7139  003BB6  0E00               	movlw	0
  7140  003BB8  0100               	movlb	0	; () banked
  7141  003BBA  6F86               	movwf	(___lwdiv@quotient+1)& (0+255),b
  7142  003BBC  0E00               	movlw	0
  7143  003BBE  6F85               	movwf	___lwdiv@quotient& (0+255),b
  7144                           
  7145                           ; BSR set to: 0
  7146  003BC0  5182               	movf	___lwdiv@divisor& (0+255),w,b
  7147  003BC2  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  7148  003BC4  B4D8               	btfsc	status,2,c
  7149  003BC6  D01C               	goto	l1377
  7150                           
  7151                           ; BSR set to: 0
  7152  003BC8  0E01               	movlw	1
  7153  003BCA  6F84               	movwf	___lwdiv@counter& (0+255),b
  7154  003BCC  D004               	goto	l1372
  7155  003BCE                     
  7156                           ; BSR set to: 0
  7157                           
  7158                           ; BSR set to: 0
  7159  003BCE  90D8               	bcf	status,0,c
  7160  003BD0  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  7161  003BD2  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  7162  003BD4  2B84               	incf	___lwdiv@counter& (0+255),f,b
  7163  003BD6                     l1372:
  7164                           
  7165                           ; BSR set to: 0
  7166                           
  7167                           ; BSR set to: 0
  7168  003BD6  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  7169  003BD8  D7FA               	goto	l1373
  7170  003BDA                     u7090:
  7171                           
  7172                           ; BSR set to: 0
  7173                           
  7174                           ; BSR set to: 0
  7175                           
  7176                           ; BSR set to: 0
  7177  003BDA  90D8               	bcf	status,0,c
  7178  003BDC  3785               	rlcf	___lwdiv@quotient& (0+255),f,b
  7179  003BDE  3786               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  7180                           
  7181                           ; BSR set to: 0
  7182  003BE0  5182               	movf	___lwdiv@divisor& (0+255),w,b
  7183  003BE2  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  7184  003BE4  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7185  003BE6  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  7186  003BE8  A0D8               	btfss	status,0,c
  7187  003BEA  D005               	goto	l1376
  7188                           
  7189                           ; BSR set to: 0
  7190  003BEC  5182               	movf	___lwdiv@divisor& (0+255),w,b
  7191  003BEE  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  7192  003BF0  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7193  003BF2  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  7194                           
  7195                           ; BSR set to: 0
  7196  003BF4  8185               	bsf	___lwdiv@quotient& (0+255),0,b
  7197  003BF6                     l1376:
  7198                           
  7199                           ; BSR set to: 0
  7200                           
  7201                           ; BSR set to: 0
  7202  003BF6  90D8               	bcf	status,0,c
  7203  003BF8  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  7204  003BFA  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  7205                           
  7206                           ; BSR set to: 0
  7207  003BFC  2F84               	decfsz	___lwdiv@counter& (0+255),f,b
  7208  003BFE  D7ED               	goto	u7090
  7209  003C00                     l1377:
  7210                           
  7211                           ; BSR set to: 0
  7212                           
  7213                           ; BSR set to: 0
  7214  003C00  C085  F080         	movff	___lwdiv@quotient,?___lwdiv
  7215  003C04  C086  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7216                           
  7217                           ; BSR set to: 0
  7218  003C08  0012               	return		;funcret
  7219  003C0A                     __end_of___lwdiv:
  7220                           	opt stack 0
  7221                           tosu	equ	0xFFF
  7222                           tosh	equ	0xFFE
  7223                           tosl	equ	0xFFD
  7224                           pclath	equ	0xFFA
  7225                           tblptru	equ	0xFF8
  7226                           tblptrh	equ	0xFF7
  7227                           tblptrl	equ	0xFF6
  7228                           tablat	equ	0xFF5
  7229                           prodh	equ	0xFF4
  7230                           prodl	equ	0xFF3
  7231                           intcon	equ	0xFF2
  7232                           indf0	equ	0xFEF
  7233                           postinc0	equ	0xFEE
  7234                           fsr0h	equ	0xFEA
  7235                           fsr0l	equ	0xFE9
  7236                           wreg	equ	0xFE8
  7237                           postdec1	equ	0xFE5
  7238                           plusw1	equ	0xFE3
  7239                           fsr1l	equ	0xFE1
  7240                           indf2	equ	0xFDF
  7241                           postinc2	equ	0xFDE
  7242                           postdec2	equ	0xFDD
  7243                           plusw2	equ	0xFDB
  7244                           fsr2h	equ	0xFDA
  7245                           fsr2l	equ	0xFD9
  7246                           status	equ	0xFD8
  7247                           
  7248 ;; *************** function _packageCompartment *****************
  7249 ;; Defined at:
  7250 ;;		line 25 in file "main.c"
  7251 ;; Parameters:    Size  Location     Type
  7252 ;;  b               1    wreg     unsigned char 
  7253 ;;  n               1   29[BANK0 ] unsigned char 
  7254 ;;  s               1   30[BANK0 ] unsigned char 
  7255 ;;  w               1   31[BANK0 ] unsigned char 
  7256 ;; Auto vars:     Size  Location     Type
  7257 ;;  b               1   37[BANK0 ] unsigned char 
  7258 ;;  currTime        3   66[BANK0 ] unsigned char 
  7259 ;;  timeW           3   47[BANK0 ] unsigned char 
  7260 ;;  timeS           3   44[BANK0 ] unsigned char 
  7261 ;;  timeN           3   41[BANK0 ] unsigned char 
  7262 ;;  timeB           3   38[BANK0 ] unsigned char 
  7263 ;;  instr           2   35[BANK0 ] unsigned char [2]
  7264 ;;  doneW           2   64[BANK0 ] int 
  7265 ;;  doneS           2   62[BANK0 ] int 
  7266 ;;  doneN           2   60[BANK0 ] int 
  7267 ;;  doneB           2   58[BANK0 ] int 
  7268 ;;  numW            2   56[BANK0 ] int 
  7269 ;;  numS            2   54[BANK0 ] int 
  7270 ;;  numN            2   52[BANK0 ] int 
  7271 ;;  numB            2   50[BANK0 ] int 
  7272 ;; Return value:  Size  Location     Type
  7273 ;;                  1    wreg      void 
  7274 ;; Registers used:
  7275 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7276 ;; Tracked objects:
  7277 ;;		On entry : 0/0
  7278 ;;		On exit  : 0/0
  7279 ;;		Unchanged: 0/0
  7280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7281 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7282 ;;      Locals:         0      34       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7283 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7284 ;;      Totals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7285 ;;Total ram usage:       40 bytes
  7286 ;; Hardware stack levels used:    1
  7287 ;; Hardware stack levels required when called:    7
  7288 ;; This function calls:
  7289 ;;		_I2C_Send
  7290 ;;		___ftadd
  7291 ;;		___ftge
  7292 ;;		_motorControl
  7293 ;;		_tic
  7294 ;;		_tock
  7295 ;; This function is called by:
  7296 ;;		_packaging
  7297 ;; This function uses a non-reentrant model
  7298 ;;
  7299                           
  7300                           	psect	text13
  7301  0017FC                     __ptext13:
  7302                           	opt stack 0
  7303  0017FC                     _packageCompartment:
  7304                           	opt stack 21
  7305                           
  7306                           ; BSR set to: 0
  7307                           ;incstack = 0
  7308                           ;packageCompartment@b stored from wreg
  7309  0017FC  0100               	movlb	0	; () banked
  7310  0017FE  6FA5               	movwf	packageCompartment@b& (0+255),b
  7311                           
  7312                           ;main.c: 26: currentMode = PACKAGING;
  7313  001800  0E00               	movlw	0
  7314  001802  6E4D               	movwf	_currentMode+1,c
  7315  001804  0E02               	movlw	2
  7316  001806  6E4C               	movwf	_currentMode,c
  7317                           
  7318                           ;main.c: 27: TRISA = 0xFF;
  7319  001808  6892               	setf	3986,c	;volatile
  7320                           
  7321                           ;main.c: 30: motorControl(BOLT, FORWARD);
  7322  00180A  0E00               	movlw	0
  7323  00180C  0100               	movlb	0	; () banked
  7324  00180E  6F80               	movwf	motorControl@dir& (0+255),b
  7325  001810  0E00               	movlw	0
  7326  001812  ECB1  F019         	call	_motorControl
  7327                           
  7328                           ;main.c: 31: motorControl(NUT, FORWARD);
  7329  001816  0E00               	movlw	0
  7330  001818  0100               	movlb	0	; () banked
  7331  00181A  6F80               	movwf	motorControl@dir& (0+255),b
  7332  00181C  0E01               	movlw	1
  7333  00181E  ECB1  F019         	call	_motorControl
  7334                           
  7335                           ;main.c: 32: motorControl(SPACER, FORWARD);
  7336  001822  0E00               	movlw	0
  7337  001824  0100               	movlb	0	; () banked
  7338  001826  6F80               	movwf	motorControl@dir& (0+255),b
  7339  001828  0E02               	movlw	2
  7340  00182A  ECB1  F019         	call	_motorControl
  7341                           
  7342                           ;main.c: 33: motorControl(WASHER, FORWARD);
  7343  00182E  0E00               	movlw	0
  7344  001830  0100               	movlb	0	; () banked
  7345  001832  6F80               	movwf	motorControl@dir& (0+255),b
  7346  001834  0E03               	movlw	3
  7347  001836  ECB1  F019         	call	_motorControl
  7348                           
  7349                           ;main.c: 35: int numB=0, numN=0, numS=0, numW=0;
  7350  00183A  0E00               	movlw	0
  7351  00183C  0100               	movlb	0	; () banked
  7352  00183E  6FB3               	movwf	(packageCompartment@numB+1)& (0+255),b
  7353  001840  0E00               	movlw	0
  7354  001842  6FB2               	movwf	packageCompartment@numB& (0+255),b
  7355                           
  7356                           ; BSR set to: 0
  7357  001844  0E00               	movlw	0
  7358  001846  6FB5               	movwf	(packageCompartment@numN+1)& (0+255),b
  7359  001848  0E00               	movlw	0
  7360  00184A  6FB4               	movwf	packageCompartment@numN& (0+255),b
  7361                           
  7362                           ; BSR set to: 0
  7363  00184C  0E00               	movlw	0
  7364  00184E  6FB7               	movwf	(packageCompartment@numS+1)& (0+255),b
  7365  001850  0E00               	movlw	0
  7366  001852  6FB6               	movwf	packageCompartment@numS& (0+255),b
  7367                           
  7368                           ; BSR set to: 0
  7369  001854  0E00               	movlw	0
  7370  001856  6FB9               	movwf	(packageCompartment@numW+1)& (0+255),b
  7371  001858  0E00               	movlw	0
  7372  00185A  6FB8               	movwf	packageCompartment@numW& (0+255),b
  7373                           
  7374                           ; BSR set to: 0
  7375                           ;main.c: 36: int doneB=0, doneN=0, doneS=0, doneW=0;
  7376  00185C  0E00               	movlw	0
  7377  00185E  6FBB               	movwf	(packageCompartment@doneB+1)& (0+255),b
  7378  001860  0E00               	movlw	0
  7379  001862  6FBA               	movwf	packageCompartment@doneB& (0+255),b
  7380                           
  7381                           ; BSR set to: 0
  7382  001864  0E00               	movlw	0
  7383  001866  6FBD               	movwf	(packageCompartment@doneN+1)& (0+255),b
  7384  001868  0E00               	movlw	0
  7385  00186A  6FBC               	movwf	packageCompartment@doneN& (0+255),b
  7386                           
  7387                           ; BSR set to: 0
  7388  00186C  0E00               	movlw	0
  7389  00186E  6FBF               	movwf	(packageCompartment@doneS+1)& (0+255),b
  7390  001870  0E00               	movlw	0
  7391  001872  6FBE               	movwf	packageCompartment@doneS& (0+255),b
  7392                           
  7393                           ; BSR set to: 0
  7394  001874  0E00               	movlw	0
  7395  001876  6FC1               	movwf	(packageCompartment@doneW+1)& (0+255),b
  7396  001878  0E00               	movlw	0
  7397  00187A  6FC0               	movwf	packageCompartment@doneW& (0+255),b
  7398                           
  7399                           ; BSR set to: 0
  7400                           ;main.c: 37: double currTime, timeB=0, timeN=0, timeS=0, timeW=0;
  7401  00187C  0E00               	movlw	0
  7402  00187E  6FA6               	movwf	packageCompartment@timeB& (0+255),b
  7403  001880  0E00               	movlw	0
  7404  001882  6FA7               	movwf	(packageCompartment@timeB+1)& (0+255),b
  7405  001884  0E00               	movlw	0
  7406  001886  6FA8               	movwf	(packageCompartment@timeB+2)& (0+255),b
  7407                           
  7408                           ; BSR set to: 0
  7409  001888  0E00               	movlw	0
  7410  00188A  6FA9               	movwf	packageCompartment@timeN& (0+255),b
  7411  00188C  0E00               	movlw	0
  7412  00188E  6FAA               	movwf	(packageCompartment@timeN+1)& (0+255),b
  7413  001890  0E00               	movlw	0
  7414  001892  6FAB               	movwf	(packageCompartment@timeN+2)& (0+255),b
  7415                           
  7416                           ; BSR set to: 0
  7417  001894  0E00               	movlw	0
  7418  001896  6FAC               	movwf	packageCompartment@timeS& (0+255),b
  7419  001898  0E00               	movlw	0
  7420  00189A  6FAD               	movwf	(packageCompartment@timeS+1)& (0+255),b
  7421  00189C  0E00               	movlw	0
  7422  00189E  6FAE               	movwf	(packageCompartment@timeS+2)& (0+255),b
  7423                           
  7424                           ; BSR set to: 0
  7425  0018A0  0E00               	movlw	0
  7426  0018A2  6FAF               	movwf	packageCompartment@timeW& (0+255),b
  7427  0018A4  0E00               	movlw	0
  7428  0018A6  6FB0               	movwf	(packageCompartment@timeW+1)& (0+255),b
  7429  0018A8  0E00               	movlw	0
  7430  0018AA  6FB1               	movwf	(packageCompartment@timeW+2)& (0+255),b
  7431                           
  7432                           ; BSR set to: 0
  7433                           ;main.c: 39: tic();
  7434  0018AC  ECF5  F01F         	call	_tic	;wreg free
  7435  0018B0                     
  7436                           ;main.c: 41: currTime = tock();
  7437  0018B0  ECEE  F01F         	call	_tock	;wreg free
  7438  0018B4  C080  F0C2         	movff	?_tock,packageCompartment@currTime
  7439  0018B8  C081  F0C3         	movff	?_tock+1,packageCompartment@currTime+1
  7440  0018BC  C082  F0C4         	movff	?_tock+2,packageCompartment@currTime+2
  7441                           
  7442                           ;main.c: 53: if (PORTAbits.RA3 == 0 && currTime > timeB + 1) {
  7443  0018C0  B680               	btfsc	3968,3,c	;volatile
  7444  0018C2  D038               	goto	l106
  7445  0018C4  0E00               	movlw	0
  7446  0018C6  0100               	movlb	0	; () banked
  7447  0018C8  6F8B               	movwf	___ftadd@f2& (0+255),b
  7448  0018CA  0E80               	movlw	128
  7449  0018CC  6F8C               	movwf	(___ftadd@f2+1)& (0+255),b
  7450  0018CE  0E3F               	movlw	63
  7451  0018D0  6F8D               	movwf	(___ftadd@f2+2)& (0+255),b
  7452  0018D2  C0A6  F088         	movff	packageCompartment@timeB,___ftadd@f1
  7453  0018D6  C0A7  F089         	movff	packageCompartment@timeB+1,___ftadd@f1+1
  7454  0018DA  C0A8  F08A         	movff	packageCompartment@timeB+2,___ftadd@f1+2
  7455  0018DE  EC9E  F016         	call	___ftadd	;wreg free
  7456  0018E2  C088  F094         	movff	?___ftadd,___ftge@ff1
  7457  0018E6  C089  F095         	movff	?___ftadd+1,___ftge@ff1+1
  7458  0018EA  C08A  F096         	movff	?___ftadd+2,___ftge@ff1+2
  7459  0018EE  C0C2  F097         	movff	packageCompartment@currTime,___ftge@ff2
  7460  0018F2  C0C3  F098         	movff	packageCompartment@currTime+1,___ftge@ff2+1
  7461  0018F6  C0C4  F099         	movff	packageCompartment@currTime+2,___ftge@ff2+2
  7462  0018FA  EC29  F01C         	call	___ftge	;wreg free
  7463  0018FE  0100               	movlb	0	; () banked
  7464  001900  B0D8               	btfsc	status,0,c
  7465  001902  D018               	goto	l106
  7466                           
  7467                           ; BSR set to: 0
  7468                           ;main.c: 54: timeB = currTime;
  7469  001904  C0C2  F0A6         	movff	packageCompartment@currTime,packageCompartment@timeB
  7470  001908  C0C3  F0A7         	movff	packageCompartment@currTime+1,packageCompartment@timeB+1
  7471  00190C  C0C4  F0A8         	movff	packageCompartment@currTime+2,packageCompartment@timeB+2
  7472                           
  7473                           ; BSR set to: 0
  7474                           ;main.c: 55: numB++;
  7475  001910  4BB2               	infsnz	packageCompartment@numB& (0+255),f,b
  7476  001912  2BB3               	incf	(packageCompartment@numB+1)& (0+255),f,b
  7477                           
  7478                           ;main.c: 56: dispensed.b++;
  7479  001914  4BD5               	infsnz	_dispensed& (0+255),f,b
  7480  001916  2BD6               	incf	(_dispensed+1)& (0+255),f,b
  7481                           
  7482                           ; BSR set to: 0
  7483                           ;main.c: 57: I2C_Send(nanoAddr, "\1Bolt Counted\0");
  7484  001918  0E7A               	movlw	low STR_1
  7485  00191A  6F83               	movwf	I2C_Send@data& (0+255),b
  7486  00191C  0EFF               	movlw	high STR_1
  7487  00191E  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  7488  001920  0EA3               	movlw	low _nanoAddr
  7489  001922  6EF6               	movwf	tblptrl,c
  7490  001924                     	if	1	;There is more than 1 active tblptr byte
  7491  001924  0EFB               	movlw	high _nanoAddr
  7492  001926  6EF7               	movwf	tblptrh,c
  7493  001928                     	endif
  7494  001928                     	if	1	;There are 3 active tblptr bytes
  7495  001928  0E00               	movlw	low (_nanoAddr shr (0+16))
  7496  00192A  6EF8               	movwf	tblptru,c
  7497  00192C                     	endif
  7498  00192C  0008               	tblrd		*
  7499  00192E  50F5               	movf	tablat,w,c
  7500  001930  ECD9  F01B         	call	_I2C_Send
  7501  001934                     l106:
  7502                           
  7503                           ;main.c: 58: }
  7504                           ;main.c: 61: if (PORTAbits.RA1 == 0 && currTime > timeN + 1) {
  7505  001934  B280               	btfsc	3968,1,c	;volatile
  7506  001936  D038               	goto	l107
  7507  001938  0E00               	movlw	0
  7508  00193A  0100               	movlb	0	; () banked
  7509  00193C  6F8B               	movwf	___ftadd@f2& (0+255),b
  7510  00193E  0E80               	movlw	128
  7511  001940  6F8C               	movwf	(___ftadd@f2+1)& (0+255),b
  7512  001942  0E3F               	movlw	63
  7513  001944  6F8D               	movwf	(___ftadd@f2+2)& (0+255),b
  7514  001946  C0A9  F088         	movff	packageCompartment@timeN,___ftadd@f1
  7515  00194A  C0AA  F089         	movff	packageCompartment@timeN+1,___ftadd@f1+1
  7516  00194E  C0AB  F08A         	movff	packageCompartment@timeN+2,___ftadd@f1+2
  7517  001952  EC9E  F016         	call	___ftadd	;wreg free
  7518  001956  C088  F094         	movff	?___ftadd,___ftge@ff1
  7519  00195A  C089  F095         	movff	?___ftadd+1,___ftge@ff1+1
  7520  00195E  C08A  F096         	movff	?___ftadd+2,___ftge@ff1+2
  7521  001962  C0C2  F097         	movff	packageCompartment@currTime,___ftge@ff2
  7522  001966  C0C3  F098         	movff	packageCompartment@currTime+1,___ftge@ff2+1
  7523  00196A  C0C4  F099         	movff	packageCompartment@currTime+2,___ftge@ff2+2
  7524  00196E  EC29  F01C         	call	___ftge	;wreg free
  7525  001972  0100               	movlb	0	; () banked
  7526  001974  B0D8               	btfsc	status,0,c
  7527  001976  D018               	goto	l107
  7528                           
  7529                           ; BSR set to: 0
  7530                           ;main.c: 62: timeN = currTime;
  7531  001978  C0C2  F0A9         	movff	packageCompartment@currTime,packageCompartment@timeN
  7532  00197C  C0C3  F0AA         	movff	packageCompartment@currTime+1,packageCompartment@timeN+1
  7533  001980  C0C4  F0AB         	movff	packageCompartment@currTime+2,packageCompartment@timeN+2
  7534                           
  7535                           ; BSR set to: 0
  7536                           ;main.c: 63: numN++;
  7537  001984  4BB4               	infsnz	packageCompartment@numN& (0+255),f,b
  7538  001986  2BB5               	incf	(packageCompartment@numN+1)& (0+255),f,b
  7539                           
  7540                           ;main.c: 64: dispensed.n++;
  7541  001988  4BD7               	infsnz	(_dispensed+2)& (0+255),f,b
  7542  00198A  2BD8               	incf	(_dispensed+3)& (0+255),f,b
  7543                           
  7544                           ; BSR set to: 0
  7545                           ;main.c: 65: I2C_Send(nanoAddr, "\1Nut Counted\0");
  7546  00198C  0EC3               	movlw	low STR_2
  7547  00198E  6F83               	movwf	I2C_Send@data& (0+255),b
  7548  001990  0EFF               	movlw	high STR_2
  7549  001992  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  7550  001994  0EA3               	movlw	low _nanoAddr
  7551  001996  6EF6               	movwf	tblptrl,c
  7552  001998                     	if	1	;There is more than 1 active tblptr byte
  7553  001998  0EFB               	movlw	high _nanoAddr
  7554  00199A  6EF7               	movwf	tblptrh,c
  7555  00199C                     	endif
  7556  00199C                     	if	1	;There are 3 active tblptr bytes
  7557  00199C  0E00               	movlw	low (_nanoAddr shr (0+16))
  7558  00199E  6EF8               	movwf	tblptru,c
  7559  0019A0                     	endif
  7560  0019A0  0008               	tblrd		*
  7561  0019A2  50F5               	movf	tablat,w,c
  7562  0019A4  ECD9  F01B         	call	_I2C_Send
  7563  0019A8                     l107:
  7564                           
  7565                           ;main.c: 66: }
  7566                           ;main.c: 69: if (PORTAbits.RA0 == 0 && currTime > timeS + 1) {
  7567  0019A8  B080               	btfsc	3968,0,c	;volatile
  7568  0019AA  D038               	goto	l108
  7569  0019AC  0E00               	movlw	0
  7570  0019AE  0100               	movlb	0	; () banked
  7571  0019B0  6F8B               	movwf	___ftadd@f2& (0+255),b
  7572  0019B2  0E80               	movlw	128
  7573  0019B4  6F8C               	movwf	(___ftadd@f2+1)& (0+255),b
  7574  0019B6  0E3F               	movlw	63
  7575  0019B8  6F8D               	movwf	(___ftadd@f2+2)& (0+255),b
  7576  0019BA  C0AC  F088         	movff	packageCompartment@timeS,___ftadd@f1
  7577  0019BE  C0AD  F089         	movff	packageCompartment@timeS+1,___ftadd@f1+1
  7578  0019C2  C0AE  F08A         	movff	packageCompartment@timeS+2,___ftadd@f1+2
  7579  0019C6  EC9E  F016         	call	___ftadd	;wreg free
  7580  0019CA  C088  F094         	movff	?___ftadd,___ftge@ff1
  7581  0019CE  C089  F095         	movff	?___ftadd+1,___ftge@ff1+1
  7582  0019D2  C08A  F096         	movff	?___ftadd+2,___ftge@ff1+2
  7583  0019D6  C0C2  F097         	movff	packageCompartment@currTime,___ftge@ff2
  7584  0019DA  C0C3  F098         	movff	packageCompartment@currTime+1,___ftge@ff2+1
  7585  0019DE  C0C4  F099         	movff	packageCompartment@currTime+2,___ftge@ff2+2
  7586  0019E2  EC29  F01C         	call	___ftge	;wreg free
  7587  0019E6  0100               	movlb	0	; () banked
  7588  0019E8  B0D8               	btfsc	status,0,c
  7589  0019EA  D018               	goto	l108
  7590                           
  7591                           ; BSR set to: 0
  7592                           ;main.c: 70: timeS = currTime;
  7593  0019EC  C0C2  F0AC         	movff	packageCompartment@currTime,packageCompartment@timeS
  7594  0019F0  C0C3  F0AD         	movff	packageCompartment@currTime+1,packageCompartment@timeS+1
  7595  0019F4  C0C4  F0AE         	movff	packageCompartment@currTime+2,packageCompartment@timeS+2
  7596                           
  7597                           ; BSR set to: 0
  7598                           ;main.c: 71: numS++;
  7599  0019F8  4BB6               	infsnz	packageCompartment@numS& (0+255),f,b
  7600  0019FA  2BB7               	incf	(packageCompartment@numS+1)& (0+255),f,b
  7601                           
  7602                           ;main.c: 72: dispensed.s++;
  7603  0019FC  4BD9               	infsnz	(_dispensed+4)& (0+255),f,b
  7604  0019FE  2BDA               	incf	(_dispensed+5)& (0+255),f,b
  7605                           
  7606                           ; BSR set to: 0
  7607                           ;main.c: 73: I2C_Send(nanoAddr, "\1Spacer Counted\0");
  7608  001A00  0E26               	movlw	low STR_3
  7609  001A02  6F83               	movwf	I2C_Send@data& (0+255),b
  7610  001A04  0EFF               	movlw	high STR_3
  7611  001A06  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  7612  001A08  0EA3               	movlw	low _nanoAddr
  7613  001A0A  6EF6               	movwf	tblptrl,c
  7614  001A0C                     	if	1	;There is more than 1 active tblptr byte
  7615  001A0C  0EFB               	movlw	high _nanoAddr
  7616  001A0E  6EF7               	movwf	tblptrh,c
  7617  001A10                     	endif
  7618  001A10                     	if	1	;There are 3 active tblptr bytes
  7619  001A10  0E00               	movlw	low (_nanoAddr shr (0+16))
  7620  001A12  6EF8               	movwf	tblptru,c
  7621  001A14                     	endif
  7622  001A14  0008               	tblrd		*
  7623  001A16  50F5               	movf	tablat,w,c
  7624  001A18  ECD9  F01B         	call	_I2C_Send
  7625  001A1C                     l108:
  7626                           
  7627                           ;main.c: 74: }
  7628                           ;main.c: 77: if (PORTAbits.RA2 == 0 && currTime > timeW + 1) {
  7629  001A1C  B480               	btfsc	3968,2,c	;volatile
  7630  001A1E  D038               	goto	l109
  7631  001A20  0E00               	movlw	0
  7632  001A22  0100               	movlb	0	; () banked
  7633  001A24  6F8B               	movwf	___ftadd@f2& (0+255),b
  7634  001A26  0E80               	movlw	128
  7635  001A28  6F8C               	movwf	(___ftadd@f2+1)& (0+255),b
  7636  001A2A  0E3F               	movlw	63
  7637  001A2C  6F8D               	movwf	(___ftadd@f2+2)& (0+255),b
  7638  001A2E  C0AF  F088         	movff	packageCompartment@timeW,___ftadd@f1
  7639  001A32  C0B0  F089         	movff	packageCompartment@timeW+1,___ftadd@f1+1
  7640  001A36  C0B1  F08A         	movff	packageCompartment@timeW+2,___ftadd@f1+2
  7641  001A3A  EC9E  F016         	call	___ftadd	;wreg free
  7642  001A3E  C088  F094         	movff	?___ftadd,___ftge@ff1
  7643  001A42  C089  F095         	movff	?___ftadd+1,___ftge@ff1+1
  7644  001A46  C08A  F096         	movff	?___ftadd+2,___ftge@ff1+2
  7645  001A4A  C0C2  F097         	movff	packageCompartment@currTime,___ftge@ff2
  7646  001A4E  C0C3  F098         	movff	packageCompartment@currTime+1,___ftge@ff2+1
  7647  001A52  C0C4  F099         	movff	packageCompartment@currTime+2,___ftge@ff2+2
  7648  001A56  EC29  F01C         	call	___ftge	;wreg free
  7649  001A5A  0100               	movlb	0	; () banked
  7650  001A5C  B0D8               	btfsc	status,0,c
  7651  001A5E  D018               	goto	l109
  7652                           
  7653                           ; BSR set to: 0
  7654                           ;main.c: 78: timeW = currTime;
  7655  001A60  C0C2  F0AF         	movff	packageCompartment@currTime,packageCompartment@timeW
  7656  001A64  C0C3  F0B0         	movff	packageCompartment@currTime+1,packageCompartment@timeW+1
  7657  001A68  C0C4  F0B1         	movff	packageCompartment@currTime+2,packageCompartment@timeW+2
  7658                           
  7659                           ; BSR set to: 0
  7660                           ;main.c: 79: numW++;
  7661  001A6C  4BB8               	infsnz	packageCompartment@numW& (0+255),f,b
  7662  001A6E  2BB9               	incf	(packageCompartment@numW+1)& (0+255),f,b
  7663                           
  7664                           ;main.c: 80: dispensed.w++;
  7665  001A70  4BDB               	infsnz	(_dispensed+6)& (0+255),f,b
  7666  001A72  2BDC               	incf	(_dispensed+7)& (0+255),f,b
  7667                           
  7668                           ; BSR set to: 0
  7669                           ;main.c: 81: I2C_Send(nanoAddr, "\1Washer Counted\0");
  7670  001A74  0E37               	movlw	low STR_4
  7671  001A76  6F83               	movwf	I2C_Send@data& (0+255),b
  7672  001A78  0EFF               	movlw	high STR_4
  7673  001A7A  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  7674  001A7C  0EA3               	movlw	low _nanoAddr
  7675  001A7E  6EF6               	movwf	tblptrl,c
  7676  001A80                     	if	1	;There is more than 1 active tblptr byte
  7677  001A80  0EFB               	movlw	high _nanoAddr
  7678  001A82  6EF7               	movwf	tblptrh,c
  7679  001A84                     	endif
  7680  001A84                     	if	1	;There are 3 active tblptr bytes
  7681  001A84  0E00               	movlw	low (_nanoAddr shr (0+16))
  7682  001A86  6EF8               	movwf	tblptru,c
  7683  001A88                     	endif
  7684  001A88  0008               	tblrd		*
  7685  001A8A  50F5               	movf	tablat,w,c
  7686  001A8C  ECD9  F01B         	call	_I2C_Send
  7687  001A90                     l109:
  7688                           
  7689                           ;main.c: 82: }
  7690                           ;main.c: 85: if (numB >= b) {
  7691  001A90  0100               	movlb	0	; () banked
  7692  001A92  51A5               	movf	packageCompartment@b& (0+255),w,b
  7693  001A94  6FA0               	movwf	??_packageCompartment& (0+255),b
  7694  001A96  6BA1               	clrf	(??_packageCompartment+1)& (0+255),b
  7695  001A98  51A0               	movf	??_packageCompartment& (0+255),w,b
  7696  001A9A  5DB2               	subwf	packageCompartment@numB& (0+255),w,b
  7697  001A9C  51B3               	movf	(packageCompartment@numB+1)& (0+255),w,b
  7698  001A9E  0A80               	xorlw	128
  7699  001AA0  6FA2               	movwf	(??_packageCompartment+2)& (0+255),b
  7700  001AA2  51A1               	movf	(??_packageCompartment+1)& (0+255),w,b
  7701  001AA4  0A80               	xorlw	128
  7702  001AA6  59A2               	subwfb	(??_packageCompartment+2)& (0+255),w,b
  7703  001AA8  A0D8               	btfss	status,0,c
  7704  001AAA  D00A               	goto	l110
  7705                           
  7706                           ; BSR set to: 0
  7707                           ;main.c: 86: motorControl(BOLT, STOPMOTOR);
  7708  001AAC  0E02               	movlw	2
  7709  001AAE  6F80               	movwf	motorControl@dir& (0+255),b
  7710  001AB0  0E00               	movlw	0
  7711  001AB2  ECB1  F019         	call	_motorControl
  7712                           
  7713                           ;main.c: 87: doneB=1;
  7714  001AB6  0E00               	movlw	0
  7715  001AB8  0100               	movlb	0	; () banked
  7716  001ABA  6FBB               	movwf	(packageCompartment@doneB+1)& (0+255),b
  7717  001ABC  0E01               	movlw	1
  7718  001ABE  6FBA               	movwf	packageCompartment@doneB& (0+255),b
  7719  001AC0                     l110:
  7720                           
  7721                           ; BSR set to: 0
  7722                           ;main.c: 88: }
  7723                           ;main.c: 89: if (numN >= n) {
  7724                           
  7725                           ; BSR set to: 0
  7726  001AC0  519D               	movf	packageCompartment@n& (0+255),w,b
  7727  001AC2  6FA0               	movwf	??_packageCompartment& (0+255),b
  7728  001AC4  6BA1               	clrf	(??_packageCompartment+1)& (0+255),b
  7729  001AC6  51A0               	movf	??_packageCompartment& (0+255),w,b
  7730  001AC8  5DB4               	subwf	packageCompartment@numN& (0+255),w,b
  7731  001ACA  51B5               	movf	(packageCompartment@numN+1)& (0+255),w,b
  7732  001ACC  0A80               	xorlw	128
  7733  001ACE  6FA2               	movwf	(??_packageCompartment+2)& (0+255),b
  7734  001AD0  51A1               	movf	(??_packageCompartment+1)& (0+255),w,b
  7735  001AD2  0A80               	xorlw	128
  7736  001AD4  59A2               	subwfb	(??_packageCompartment+2)& (0+255),w,b
  7737  001AD6  A0D8               	btfss	status,0,c
  7738  001AD8  D00A               	goto	l111
  7739                           
  7740                           ; BSR set to: 0
  7741                           ;main.c: 90: motorControl(NUT, STOPMOTOR);
  7742  001ADA  0E02               	movlw	2
  7743  001ADC  6F80               	movwf	motorControl@dir& (0+255),b
  7744  001ADE  0E01               	movlw	1
  7745  001AE0  ECB1  F019         	call	_motorControl
  7746                           
  7747                           ;main.c: 91: doneN=1;
  7748  001AE4  0E00               	movlw	0
  7749  001AE6  0100               	movlb	0	; () banked
  7750  001AE8  6FBD               	movwf	(packageCompartment@doneN+1)& (0+255),b
  7751  001AEA  0E01               	movlw	1
  7752  001AEC  6FBC               	movwf	packageCompartment@doneN& (0+255),b
  7753  001AEE                     l111:
  7754                           
  7755                           ; BSR set to: 0
  7756                           ;main.c: 92: }
  7757                           ;main.c: 93: if (numS >= s) {
  7758                           
  7759                           ; BSR set to: 0
  7760  001AEE  519E               	movf	packageCompartment@s& (0+255),w,b
  7761  001AF0  6FA0               	movwf	??_packageCompartment& (0+255),b
  7762  001AF2  6BA1               	clrf	(??_packageCompartment+1)& (0+255),b
  7763  001AF4  51A0               	movf	??_packageCompartment& (0+255),w,b
  7764  001AF6  5DB6               	subwf	packageCompartment@numS& (0+255),w,b
  7765  001AF8  51B7               	movf	(packageCompartment@numS+1)& (0+255),w,b
  7766  001AFA  0A80               	xorlw	128
  7767  001AFC  6FA2               	movwf	(??_packageCompartment+2)& (0+255),b
  7768  001AFE  51A1               	movf	(??_packageCompartment+1)& (0+255),w,b
  7769  001B00  0A80               	xorlw	128
  7770  001B02  59A2               	subwfb	(??_packageCompartment+2)& (0+255),w,b
  7771  001B04  A0D8               	btfss	status,0,c
  7772  001B06  D00A               	goto	l112
  7773                           
  7774                           ; BSR set to: 0
  7775                           ;main.c: 94: motorControl(SPACER, STOPMOTOR);
  7776  001B08  0E02               	movlw	2
  7777  001B0A  6F80               	movwf	motorControl@dir& (0+255),b
  7778  001B0C  0E02               	movlw	2
  7779  001B0E  ECB1  F019         	call	_motorControl
  7780                           
  7781                           ;main.c: 95: doneS=1;
  7782  001B12  0E00               	movlw	0
  7783  001B14  0100               	movlb	0	; () banked
  7784  001B16  6FBF               	movwf	(packageCompartment@doneS+1)& (0+255),b
  7785  001B18  0E01               	movlw	1
  7786  001B1A  6FBE               	movwf	packageCompartment@doneS& (0+255),b
  7787  001B1C                     l112:
  7788                           
  7789                           ; BSR set to: 0
  7790                           ;main.c: 96: }
  7791                           ;main.c: 97: if (numW >= w) {
  7792                           
  7793                           ; BSR set to: 0
  7794  001B1C  519F               	movf	packageCompartment@w& (0+255),w,b
  7795  001B1E  6FA0               	movwf	??_packageCompartment& (0+255),b
  7796  001B20  6BA1               	clrf	(??_packageCompartment+1)& (0+255),b
  7797  001B22  51A0               	movf	??_packageCompartment& (0+255),w,b
  7798  001B24  5DB8               	subwf	packageCompartment@numW& (0+255),w,b
  7799  001B26  51B9               	movf	(packageCompartment@numW+1)& (0+255),w,b
  7800  001B28  0A80               	xorlw	128
  7801  001B2A  6FA2               	movwf	(??_packageCompartment+2)& (0+255),b
  7802  001B2C  51A1               	movf	(??_packageCompartment+1)& (0+255),w,b
  7803  001B2E  0A80               	xorlw	128
  7804  001B30  59A2               	subwfb	(??_packageCompartment+2)& (0+255),w,b
  7805  001B32  A0D8               	btfss	status,0,c
  7806  001B34  D00A               	goto	l113
  7807                           
  7808                           ; BSR set to: 0
  7809                           ;main.c: 98: motorControl(WASHER, STOPMOTOR);
  7810  001B36  0E02               	movlw	2
  7811  001B38  6F80               	movwf	motorControl@dir& (0+255),b
  7812  001B3A  0E03               	movlw	3
  7813  001B3C  ECB1  F019         	call	_motorControl
  7814                           
  7815                           ;main.c: 99: doneW=1;
  7816  001B40  0E00               	movlw	0
  7817  001B42  0100               	movlb	0	; () banked
  7818  001B44  6FC1               	movwf	(packageCompartment@doneW+1)& (0+255),b
  7819  001B46  0E01               	movlw	1
  7820  001B48  6FC0               	movwf	packageCompartment@doneW& (0+255),b
  7821  001B4A                     l113:
  7822                           
  7823                           ; BSR set to: 0
  7824                           ;main.c: 100: }
  7825                           ;main.c: 102: if (doneB && doneN && doneS && doneW) {
  7826                           
  7827                           ; BSR set to: 0
  7828  001B4A  51BA               	movf	packageCompartment@doneB& (0+255),w,b
  7829  001B4C  11BB               	iorwf	(packageCompartment@doneB+1)& (0+255),w,b
  7830  001B4E  B4D8               	btfsc	status,2,c
  7831  001B50  D6AF               	goto	l105
  7832                           
  7833                           ; BSR set to: 0
  7834  001B52  51BC               	movf	packageCompartment@doneN& (0+255),w,b
  7835  001B54  11BD               	iorwf	(packageCompartment@doneN+1)& (0+255),w,b
  7836  001B56  B4D8               	btfsc	status,2,c
  7837  001B58  D6AB               	goto	l105
  7838                           
  7839                           ; BSR set to: 0
  7840  001B5A  51BE               	movf	packageCompartment@doneS& (0+255),w,b
  7841  001B5C  11BF               	iorwf	(packageCompartment@doneS+1)& (0+255),w,b
  7842  001B5E  B4D8               	btfsc	status,2,c
  7843  001B60  D6A7               	goto	l105
  7844                           
  7845                           ; BSR set to: 0
  7846  001B62  51C0               	movf	packageCompartment@doneW& (0+255),w,b
  7847  001B64  11C1               	iorwf	(packageCompartment@doneW+1)& (0+255),w,b
  7848  001B66  B4D8               	btfsc	status,2,c
  7849  001B68  D6A3               	goto	l105
  7850                           
  7851                           ; BSR set to: 0
  7852                           ;main.c: 103: I2C_Send(nanoAddr, "\1Done compartment\0");
  7853  001B6A  0EF0               	movlw	low STR_5
  7854  001B6C  6F83               	movwf	I2C_Send@data& (0+255),b
  7855  001B6E  0EFE               	movlw	high STR_5
  7856  001B70  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  7857  001B72  0EA3               	movlw	low _nanoAddr
  7858  001B74  6EF6               	movwf	tblptrl,c
  7859  001B76                     	if	1	;There is more than 1 active tblptr byte
  7860  001B76  0EFB               	movlw	high _nanoAddr
  7861  001B78  6EF7               	movwf	tblptrh,c
  7862  001B7A                     	endif
  7863  001B7A                     	if	1	;There are 3 active tblptr bytes
  7864  001B7A  0E00               	movlw	low (_nanoAddr shr (0+16))
  7865  001B7C  6EF8               	movwf	tblptru,c
  7866  001B7E                     	endif
  7867  001B7E  0008               	tblrd		*
  7868  001B80  50F5               	movf	tablat,w,c
  7869  001B82  ECD9  F01B         	call	_I2C_Send
  7870                           
  7871                           ;main.c: 105: }
  7872                           ;main.c: 106: }
  7873                           ;main.c: 107: I2C_Send(nanoAddr, "\1Out of the packaging loop\0");
  7874                           
  7875                           ;main.c: 104: break;
  7876  001B86  0EE5               	movlw	low STR_6
  7877  001B88  0100               	movlb	0	; () banked
  7878  001B8A  6F83               	movwf	I2C_Send@data& (0+255),b
  7879  001B8C  0EFD               	movlw	high STR_6
  7880  001B8E  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  7881  001B90  0EA3               	movlw	low _nanoAddr
  7882  001B92  6EF6               	movwf	tblptrl,c
  7883  001B94                     	if	1	;There is more than 1 active tblptr byte
  7884  001B94  0EFB               	movlw	high _nanoAddr
  7885  001B96  6EF7               	movwf	tblptrh,c
  7886  001B98                     	endif
  7887  001B98                     	if	1	;There are 3 active tblptr bytes
  7888  001B98  0E00               	movlw	low (_nanoAddr shr (0+16))
  7889  001B9A  6EF8               	movwf	tblptru,c
  7890  001B9C                     	endif
  7891  001B9C  0008               	tblrd		*
  7892  001B9E  50F5               	movf	tablat,w,c
  7893  001BA0  ECD9  F01B         	call	_I2C_Send
  7894                           
  7895                           ;main.c: 108: _delay((unsigned long)((2000)*(40000000/4000.0)));
  7896  001BA4  0E66               	movlw	102
  7897  001BA6  0100               	movlb	0	; () banked
  7898  001BA8  6FA1               	movwf	(??_packageCompartment+1)& (0+255),b
  7899  001BAA  0E76               	movlw	118
  7900  001BAC  6FA0               	movwf	??_packageCompartment& (0+255),b
  7901  001BAE  0EC1               	movlw	193
  7902  001BB0                     u9817:
  7903  001BB0  2EE8               	decfsz	wreg,f,c
  7904  001BB2  D7FE               	bra	u9817
  7905  001BB4  2FA0               	decfsz	??_packageCompartment& (0+255),f,b
  7906  001BB6  D7FC               	bra	u9817
  7907  001BB8  2FA1               	decfsz	(??_packageCompartment+1)& (0+255),f,b
  7908  001BBA  D7FA               	bra	u9817
  7909                           
  7910                           ;main.c: 111: char instr[] = {2, 0};
  7911  001BBC  C0E9  F0A3         	movff	packageCompartment@F3223,packageCompartment@instr
  7912  001BC0  C0EA  F0A4         	movff	packageCompartment@F3223+1,packageCompartment@instr+1
  7913                           
  7914                           ;main.c: 112: I2C_Send(nanoAddr, instr);
  7915  001BC4  0EA3               	movlw	low packageCompartment@instr
  7916  001BC6  0100               	movlb	0	; () banked
  7917  001BC8  6F83               	movwf	I2C_Send@data& (0+255),b
  7918  001BCA  0E00               	movlw	high packageCompartment@instr
  7919  001BCC  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  7920  001BCE  0EA3               	movlw	low _nanoAddr
  7921  001BD0  6EF6               	movwf	tblptrl,c
  7922  001BD2                     	if	1	;There is more than 1 active tblptr byte
  7923  001BD2  0EFB               	movlw	high _nanoAddr
  7924  001BD4  6EF7               	movwf	tblptrh,c
  7925  001BD6                     	endif
  7926  001BD6                     	if	1	;There are 3 active tblptr bytes
  7927  001BD6  0E00               	movlw	low (_nanoAddr shr (0+16))
  7928  001BD8  6EF8               	movwf	tblptru,c
  7929  001BDA                     	endif
  7930  001BDA  0008               	tblrd		*
  7931  001BDC  50F5               	movf	tablat,w,c
  7932  001BDE  ECD9  F01B         	call	_I2C_Send
  7933  001BE2  AA80               	btfss	3968,5,c	;volatile
  7934  001BE4  0012               	return	
  7935  001BE6  D7FD               	goto	l120
  7936  001BE8                     __end_of_packageCompartment:
  7937                           	opt stack 0
  7938                           tosu	equ	0xFFF
  7939                           tosh	equ	0xFFE
  7940                           tosl	equ	0xFFD
  7941                           pclath	equ	0xFFA
  7942                           tblptru	equ	0xFF8
  7943                           tblptrh	equ	0xFF7
  7944                           tblptrl	equ	0xFF6
  7945                           tablat	equ	0xFF5
  7946                           prodh	equ	0xFF4
  7947                           prodl	equ	0xFF3
  7948                           intcon	equ	0xFF2
  7949                           indf0	equ	0xFEF
  7950                           postinc0	equ	0xFEE
  7951                           fsr0h	equ	0xFEA
  7952                           fsr0l	equ	0xFE9
  7953                           wreg	equ	0xFE8
  7954                           postdec1	equ	0xFE5
  7955                           plusw1	equ	0xFE3
  7956                           fsr1l	equ	0xFE1
  7957                           indf2	equ	0xFDF
  7958                           postinc2	equ	0xFDE
  7959                           postdec2	equ	0xFDD
  7960                           plusw2	equ	0xFDB
  7961                           fsr2h	equ	0xFDA
  7962                           fsr2l	equ	0xFD9
  7963                           status	equ	0xFD8
  7964                           
  7965 ;; *************** function _inputEntry *****************
  7966 ;; Defined at:
  7967 ;;		line 63 in file "menu.c"
  7968 ;; Parameters:    Size  Location     Type
  7969 ;;		None
  7970 ;; Auto vars:     Size  Location     Type
  7971 ;;  sum             2   69[BANK1 ] int 
  7972 ;;  fastenerStri   32   24[BANK1 ] unsigned char [32]
  7973 ;;  msg            24    0[BANK1 ] unsigned char [24]
  7974 ;;  compartments    1   58[BANK1 ] unsigned char 
  7975 ;;  i               2   85[BANK1 ] int 
  7976 ;;  compartmentN    2   83[BANK1 ] int 
  7977 ;;  numPressed      2   81[BANK1 ] int 
  7978 ;;  inputEntrySt    2   79[BANK1 ] int 
  7979 ;;  numW            2   77[BANK1 ] int 
  7980 ;;  numS            2   75[BANK1 ] int 
  7981 ;;  numN            2   73[BANK1 ] int 
  7982 ;;  numB            2   71[BANK1 ] int 
  7983 ;;  doneCompartm    2   67[BANK1 ] int 
  7984 ;;  doneMultiple    2   65[BANK1 ] int 
  7985 ;;  setIsGood       2   63[BANK1 ] int 
  7986 ;;  found           2   61[BANK1 ] int 
  7987 ;;  done            2   59[BANK1 ] int 
  7988 ;;  compartmentL    2   56[BANK1 ] unsigned char [2]
  7989 ;;  numFasteners    2    0        int 
  7990 ;;  pressed         1   87[BANK1 ] unsigned char 
  7991 ;; Return value:  Size  Location     Type
  7992 ;;                  1    wreg      void 
  7993 ;; Registers used:
  7994 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7995 ;; Tracked objects:
  7996 ;;		On entry : 0/0
  7997 ;;		On exit  : 0/0
  7998 ;;		Unchanged: 0/0
  7999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8001 ;;      Locals:         0       0      88       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8002 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8003 ;;      Totals:         0       4      88       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8004 ;;Total ram usage:       92 bytes
  8005 ;; Hardware stack levels used:    1
  8006 ;; Hardware stack levels required when called:    8
  8007 ;; This function calls:
  8008 ;;		_I2C_Send
  8009 ;;		___wmul
  8010 ;;		_lcdInst
  8011 ;;		_lcd_set_cursor
  8012 ;;		_pollKeypad
  8013 ;;		_printErrorLCD
  8014 ;;		_printStringLCD
  8015 ;;		_putch
  8016 ;;		_strcpy
  8017 ;; This function is called by:
  8018 ;;		_mainMenu
  8019 ;; This function uses a non-reentrant model
  8020 ;;
  8021                           
  8022                           	psect	text14
  8023  000012                     __ptext14:
  8024                           	opt stack 0
  8025  000012                     _inputEntry:
  8026                           	opt stack 21
  8027                           
  8028                           ;menu.c: 64: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  8029                           
  8030                           ;incstack = 0
  8031  000012  0E01               	movlw	1
  8032  000014  ECB1  F01F         	call	_lcdInst
  8033  000018  0EC3               	movlw	195
  8034  00001A  0100               	movlb	0	; () banked
  8035  00001C  6F99               	movwf	??_inputEntry& (0+255),b
  8036  00001E  0ECD               	movlw	205
  8037  000020                     u9827:
  8038  000020  2EE8               	decfsz	wreg,f,c
  8039  000022  D7FE               	bra	u9827
  8040  000024  2F99               	decfsz	??_inputEntry& (0+255),f,b
  8041  000026  D7FC               	bra	u9827
  8042                           
  8043                           ;menu.c: 65: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  8044  000028  0E80               	movlw	128
  8045  00002A  ECB1  F01F         	call	_lcdInst
  8046  00002E  0E41               	movlw	65
  8047  000030  0100               	movlb	0	; () banked
  8048  000032  6F99               	movwf	??_inputEntry& (0+255),b
  8049  000034  0EEE               	movlw	238
  8050  000036                     u9837:
  8051  000036  2EE8               	decfsz	wreg,f,c
  8052  000038  D7FE               	bra	u9837
  8053  00003A  2F99               	decfsz	??_inputEntry& (0+255),f,b
  8054  00003C  D7FC               	bra	u9837
  8055  00003E  F000               	nop	
  8056                           
  8057                           ;menu.c: 67: I2C_Send(nanoAddr, "Started input entry, hi\0");
  8058  000040  0E51               	movlw	low STR_23
  8059  000042  0100               	movlb	0	; () banked
  8060  000044  6F83               	movwf	I2C_Send@data& (0+255),b
  8061  000046  0EFE               	movlw	high STR_23
  8062  000048  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  8063  00004A  0EA3               	movlw	low _nanoAddr
  8064  00004C  6EF6               	movwf	tblptrl,c
  8065  00004E                     	if	1	;There is more than 1 active tblptr byte
  8066  00004E  0EFB               	movlw	high _nanoAddr
  8067  000050  6EF7               	movwf	tblptrh,c
  8068  000052                     	endif
  8069  000052                     	if	1	;There are 3 active tblptr bytes
  8070  000052  0E00               	movlw	low (_nanoAddr shr (0+16))
  8071  000054  6EF8               	movwf	tblptru,c
  8072  000056                     	endif
  8073  000056  0008               	tblrd		*
  8074  000058  50F5               	movf	tablat,w,c
  8075  00005A  ECD9  F01B         	call	_I2C_Send
  8076                           
  8077                           ;menu.c: 69: int compartmentNum = 0;
  8078  00005E  0E00               	movlw	0
  8079  000060  0101               	movlb	1	; () banked
  8080  000062  6F54               	movwf	(inputEntry@compartmentNum+1)& (0+255),b
  8081  000064  0E00               	movlw	0
  8082  000066  6F53               	movwf	inputEntry@compartmentNum& (0+255),b
  8083                           
  8084                           ; BSR set to: 1
  8085                           ;menu.c: 70: char compartmentLabel[2] = "C0";
  8086  000068  C0E5  F138         	movff	inputEntry@F3225,inputEntry@compartmentLabel
  8087  00006C  C0E6  F139         	movff	inputEntry@F3225+1,inputEntry@compartmentLabel+1
  8088                           
  8089                           ; BSR set to: 1
  8090                           ;menu.c: 71: int inputEntryStep = 0;
  8091  000070  0E00               	movlw	0
  8092  000072  6F50               	movwf	(inputEntry@inputEntryStep+1)& (0+255),b
  8093  000074  0E00               	movlw	0
  8094  000076  6F4F               	movwf	inputEntry@inputEntryStep& (0+255),b
  8095                           
  8096                           ; BSR set to: 1
  8097                           ;menu.c: 72: int done = 0;
  8098  000078  0E00               	movlw	0
  8099  00007A  6F3C               	movwf	(inputEntry@done+1)& (0+255),b
  8100  00007C  0E00               	movlw	0
  8101  00007E  6F3B               	movwf	inputEntry@done& (0+255),b
  8102                           
  8103                           ;menu.c: 74: int i, numPressed, doneCompartment, numB, numN, numS, numW, found, numFaste
      +                          ners;
  8104                           ;menu.c: 75: int setIsGood, doneMultiples;
  8105                           ;menu.c: 76: unsigned char pressed;
  8106                           ;menu.c: 78: while (!done) {
  8107  000080  D36C               	goto	l411
  8108  000082                     
  8109                           ; BSR set to: 1
  8110                           ;menu.c: 80: if (inputEntryStep == 0) {
  8111                           
  8112                           ; BSR set to: 1
  8113  000082  514F               	movf	inputEntry@inputEntryStep& (0+255),w,b
  8114  000084  1150               	iorwf	(inputEntry@inputEntryStep+1)& (0+255),w,b
  8115  000086  A4D8               	btfss	status,2,c
  8116  000088  D04E               	goto	l407
  8117                           
  8118                           ; BSR set to: 1
  8119                           ;menu.c: 81: printStringLCD(inputEntryQuestions[inputEntryStep]);
  8120  00008A  C14F  F080         	movff	inputEntry@inputEntryStep,___wmul@multiplier
  8121  00008E  C150  F081         	movff	inputEntry@inputEntryStep+1,___wmul@multiplier+1
  8122  000092  0E00               	movlw	0
  8123  000094  0100               	movlb	0	; () banked
  8124  000096  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8125  000098  0E21               	movlw	33
  8126  00009A  6F82               	movwf	___wmul@multiplicand& (0+255),b
  8127  00009C  EC2C  F01F         	call	___wmul	;wreg free
  8128  0000A0  0E8A               	movlw	low _inputEntryQuestions
  8129  0000A2  0100               	movlb	0	; () banked
  8130  0000A4  2580               	addwf	?___wmul& (0+255),w,b
  8131  0000A6  6F86               	movwf	printStringLCD@string& (0+255),b
  8132  0000A8  0EFC               	movlw	high _inputEntryQuestions
  8133  0000AA  2181               	addwfc	(?___wmul+1)& (0+255),w,b
  8134  0000AC  6F87               	movwf	(printStringLCD@string+1)& (0+255),b
  8135  0000AE  ECBD  F011         	call	_printStringLCD	;wreg free
  8136                           
  8137                           ;menu.c: 83: pressed = pollKeypad();
  8138  0000B2  ECE8  F01E         	call	_pollKeypad	;wreg free
  8139  0000B6  0101               	movlb	1	; () banked
  8140  0000B8  6F57               	movwf	inputEntry@pressed& (0+255),b
  8141                           
  8142                           ; BSR set to: 1
  8143                           ;menu.c: 84: numPressed = pressed - 48;
  8144  0000BA  0ED0               	movlw	208
  8145  0000BC  2557               	addwf	inputEntry@pressed& (0+255),w,b
  8146  0000BE  6F51               	movwf	inputEntry@numPressed& (0+255),b
  8147  0000C0  6B52               	clrf	(inputEntry@numPressed+1)& (0+255),b
  8148  0000C2  0EFF               	movlw	255
  8149  0000C4  2352               	addwfc	(inputEntry@numPressed+1)& (0+255),f,b
  8150                           
  8151                           ; BSR set to: 1
  8152                           ;menu.c: 86: putch(pressed);
  8153  0000C6  5157               	movf	inputEntry@pressed& (0+255),w,b
  8154  0000C8  ECA5  F01F         	call	_putch
  8155                           
  8156                           ;menu.c: 87: _delay((unsigned long)((500)*(40000000/4000.0)));
  8157  0000CC  0E1A               	movlw	26
  8158  0000CE  0100               	movlb	0	; () banked
  8159  0000D0  6F9A               	movwf	(??_inputEntry+1)& (0+255),b
  8160  0000D2  0E5E               	movlw	94
  8161  0000D4  6F99               	movwf	??_inputEntry& (0+255),b
  8162  0000D6  0E6E               	movlw	110
  8163  0000D8                     u9847:
  8164  0000D8  2EE8               	decfsz	wreg,f,c
  8165  0000DA  D7FE               	bra	u9847
  8166  0000DC  2F99               	decfsz	??_inputEntry& (0+255),f,b
  8167  0000DE  D7FC               	bra	u9847
  8168  0000E0  2F9A               	decfsz	(??_inputEntry+1)& (0+255),f,b
  8169  0000E2  D7FA               	bra	u9847
  8170  0000E4  F000               	nop	
  8171                           
  8172                           ;menu.c: 89: if (numPressed >= 4 && numPressed <= 8) {
  8173  0000E6  0101               	movlb	1	; () banked
  8174  0000E8  BF52               	btfsc	(inputEntry@numPressed+1)& (0+255),7,b
  8175  0000EA  D015               	goto	l408
  8176  0000EC  5152               	movf	(inputEntry@numPressed+1)& (0+255),w,b
  8177  0000EE  E104               	bnz	u8930
  8178  0000F0  0E04               	movlw	4
  8179  0000F2  5D51               	subwf	inputEntry@numPressed& (0+255),w,b
  8180  0000F4  A0D8               	btfss	status,0,c
  8181  0000F6  D00F               	goto	l408
  8182  0000F8                     u8930:
  8183                           
  8184                           ; BSR set to: 1
  8185  0000F8  BF52               	btfsc	(inputEntry@numPressed+1)& (0+255),7,b
  8186  0000FA  D006               	goto	u8940
  8187  0000FC  5152               	movf	(inputEntry@numPressed+1)& (0+255),w,b
  8188  0000FE  E10B               	bnz	l6826
  8189  000100  0E09               	movlw	9
  8190  000102  5D51               	subwf	inputEntry@numPressed& (0+255),w,b
  8191  000104  B0D8               	btfsc	status,0,c
  8192  000106  D007               	goto	l408
  8193  000108                     u8940:
  8194                           
  8195                           ; BSR set to: 1
  8196                           ;menu.c: 90: params.steps = numPressed;
  8197  000108  C151  F1B7         	movff	inputEntry@numPressed,_params
  8198  00010C  C152  F1B8         	movff	inputEntry@numPressed+1,_params+1
  8199                           
  8200                           ; BSR set to: 1
  8201                           ;menu.c: 91: inputEntryStep++;
  8202  000110  4B4F               	infsnz	inputEntry@inputEntryStep& (0+255),f,b
  8203  000112  2B50               	incf	(inputEntry@inputEntryStep+1)& (0+255),f,b
  8204                           
  8205                           ;menu.c: 92: } else printErrorLCD(errMsgs.badEntry);
  8206  000114  D322               	goto	l411
  8207  000116                     l408:
  8208  000116                     l6826:
  8209                           
  8210                           ; BSR set to: 1
  8211  000116  0EAA               	movlw	low _errMsgs
  8212  000118  0100               	movlb	0	; () banked
  8213  00011A  6F95               	movwf	printErrorLCD@string& (0+255),b
  8214  00011C  0EFB               	movlw	high _errMsgs
  8215  00011E  6F96               	movwf	(printErrorLCD@string+1)& (0+255),b
  8216  000120  EC40  F01F         	call	_printErrorLCD	;wreg free
  8217                           
  8218                           ;menu.c: 93: } else if (inputEntryStep == 1) {
  8219  000124  D31A               	goto	l411
  8220  000126                     l407:
  8221  000126  0101               	movlb	1	; () banked
  8222  000128  054F               	decf	inputEntry@inputEntryStep& (0+255),w,b
  8223  00012A  1150               	iorwf	(inputEntry@inputEntryStep+1)& (0+255),w,b
  8224  00012C  A4D8               	btfss	status,2,c
  8225  00012E  D315               	goto	l411
  8226                           
  8227                           ; BSR set to: 1
  8228                           ;menu.c: 95: char compartmentsToFill = assemblyStepEncoding[params.steps - 4];
  8229  000130  0EFC               	movlw	252
  8230  000132  0100               	movlb	0	; () banked
  8231  000134  6F99               	movwf	??_inputEntry& (0+255),b
  8232  000136  0EFF               	movlw	255
  8233  000138  6F9A               	movwf	(??_inputEntry+1)& (0+255),b
  8234  00013A  C1B7  F09B         	movff	_params,??_inputEntry+2
  8235  00013E  C1B8  F09C         	movff	_params+1,??_inputEntry+3
  8236  000142  5199               	movf	??_inputEntry& (0+255),w,b
  8237  000144  279B               	addwf	(??_inputEntry+2)& (0+255),f,b
  8238  000146  519A               	movf	(??_inputEntry+1)& (0+255),w,b
  8239  000148  239C               	addwfc	(??_inputEntry+3)& (0+255),f,b
  8240  00014A  0E9E               	movlw	low _assemblyStepEncoding
  8241  00014C  259B               	addwf	(??_inputEntry+2)& (0+255),w,b
  8242  00014E  6EF6               	movwf	tblptrl,c
  8243  000150  0EFB               	movlw	high _assemblyStepEncoding
  8244  000152  219C               	addwfc	(??_inputEntry+3)& (0+255),w,b
  8245  000154  6EF7               	movwf	tblptrh,c
  8246  000156                     	if	1	;There are 3 active tblptr bytes
  8247  000156  6AF8               	clrf	tblptru,c
  8248  000158  0E00               	movlw	low (__mediumconst shr (0+16))
  8249  00015A  22F8               	addwfc	tblptru,f,c
  8250  00015C                     	endif
  8251  00015C  0008               	tblrd		*
  8252  00015E  CFF5 F13A          	movff	tablat,inputEntry@compartmentsToFill
  8253                           
  8254                           ; BSR set to: 0
  8255                           ;menu.c: 96: for (compartmentNum = 0; compartmentNum < 8; compartmentNum++) {
  8256  000162  0E00               	movlw	0
  8257  000164  0101               	movlb	1	; () banked
  8258  000166  6F54               	movwf	(inputEntry@compartmentNum+1)& (0+255),b
  8259  000168  0E00               	movlw	0
  8260  00016A  6F53               	movwf	inputEntry@compartmentNum& (0+255),b
  8261                           
  8262                           ; BSR set to: 1
  8263  00016C  BF54               	btfsc	(inputEntry@compartmentNum+1)& (0+255),7,b
  8264  00016E  D008               	goto	l412
  8265  000170  5154               	movf	(inputEntry@compartmentNum+1)& (0+255),w,b
  8266  000172  E105               	bnz	u8960
  8267  000174  0E08               	movlw	8
  8268  000176  5D53               	subwf	inputEntry@compartmentNum& (0+255),w,b
  8269  000178  B0D8               	btfsc	status,0,c
  8270  00017A  D2DC               	goto	u9330
  8271  00017C  D001               	goto	l412
  8272  00017E                     u8960:
  8273                           
  8274                           ; BSR set to: 1
  8275  00017E  D2DA               	goto	u9330
  8276  000180                     l412:
  8277                           
  8278                           ; BSR set to: 1
  8279                           ;menu.c: 98: if ((compartmentsToFill >> compartmentNum) & 0b1) {
  8280                           
  8281                           ; BSR set to: 1
  8282                           
  8283                           ;menu.c: 97: STARTCOMPARTMENT:
  8284                           
  8285                           ; BSR set to: 1
  8286  000180  C153  F099         	movff	inputEntry@compartmentNum,??_inputEntry
  8287  000184  C13A  F09A         	movff	inputEntry@compartmentsToFill,??_inputEntry+1
  8288  000188  0100               	movlb	0	; () banked
  8289  00018A  2B99               	incf	??_inputEntry& (0+255),f,b
  8290  00018C  D002               	goto	u8974
  8291  00018E                     u8975:
  8292  00018E  90D8               	bcf	status,0,c
  8293  000190  339A               	rrcf	(??_inputEntry+1)& (0+255),f,b
  8294  000192                     u8974:
  8295  000192  2F99               	decfsz	??_inputEntry& (0+255),f,b
  8296  000194  D7FC               	goto	u8975
  8297  000196  0100               	movlb	0	; () banked
  8298  000198  A19A               	btfss	(??_inputEntry+1)& (0+255),0,b
  8299  00019A  D2AC               	goto	l415
  8300                           
  8301                           ; BSR set to: 0
  8302                           ;menu.c: 99: char msg[] = "\1Started compartment x\0";
  8303  00019C  EE21  F0D5         	lfsr	2,inputEntry@F3246
  8304  0001A0  EE11  F000         	lfsr	1,inputEntry@msg
  8305  0001A4  0E17               	movlw	23
  8306  0001A6                     u8991:
  8307  0001A6  CFDB FFE3          	movff	plusw2,plusw1
  8308  0001AA  06E8               	decf	wreg,f,c
  8309  0001AC  E2FC               	bc	u8991
  8310                           
  8311                           ; BSR set to: 0
  8312                           ;menu.c: 100: msg[21] = compartmentNum + 1 + 48;
  8313  0001AE  0101               	movlb	1	; () banked
  8314  0001B0  5153               	movf	inputEntry@compartmentNum& (0+255),w,b
  8315  0001B2  0F31               	addlw	49
  8316  0001B4  6F15               	movwf	(inputEntry@msg+21)& (0+255),b
  8317                           
  8318                           ; BSR set to: 1
  8319                           ;menu.c: 101: I2C_Send(nanoAddr, msg);
  8320  0001B6  0E00               	movlw	low inputEntry@msg
  8321  0001B8  0100               	movlb	0	; () banked
  8322  0001BA  6F83               	movwf	I2C_Send@data& (0+255),b
  8323  0001BC  0E01               	movlw	high inputEntry@msg
  8324  0001BE  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  8325  0001C0  0EA3               	movlw	low _nanoAddr
  8326  0001C2  6EF6               	movwf	tblptrl,c
  8327  0001C4                     	if	1	;There is more than 1 active tblptr byte
  8328  0001C4  0EFB               	movlw	high _nanoAddr
  8329  0001C6  6EF7               	movwf	tblptrh,c
  8330  0001C8                     	endif
  8331  0001C8                     	if	1	;There are 3 active tblptr bytes
  8332  0001C8  0E00               	movlw	low (_nanoAddr shr (0+16))
  8333  0001CA  6EF8               	movwf	tblptru,c
  8334  0001CC                     	endif
  8335  0001CC  0008               	tblrd		*
  8336  0001CE  50F5               	movf	tablat,w,c
  8337  0001D0  ECD9  F01B         	call	_I2C_Send
  8338                           
  8339                           ;menu.c: 103: setIsGood = 0;
  8340  0001D4  0E00               	movlw	0
  8341  0001D6  0101               	movlb	1	; () banked
  8342  0001D8  6F40               	movwf	(inputEntry@setIsGood+1)& (0+255),b
  8343  0001DA  0E00               	movlw	0
  8344  0001DC  D169               	goto	L7
  8345  0001DE                     
  8346                           ; BSR set to: 1
  8347                           ;menu.c: 105: numB = 0;
  8348                           
  8349                           ; BSR set to: 1
  8350  0001DE  0E00               	movlw	0
  8351  0001E0  6F48               	movwf	(inputEntry@numB+1)& (0+255),b
  8352  0001E2  0E00               	movlw	0
  8353  0001E4  6F47               	movwf	inputEntry@numB& (0+255),b
  8354                           
  8355                           ;menu.c: 106: numN = 0;
  8356  0001E6  0E00               	movlw	0
  8357  0001E8  6F4A               	movwf	(inputEntry@numN+1)& (0+255),b
  8358  0001EA  0E00               	movlw	0
  8359  0001EC  6F49               	movwf	inputEntry@numN& (0+255),b
  8360                           
  8361                           ;menu.c: 107: numS = 0;
  8362  0001EE  0E00               	movlw	0
  8363  0001F0  6F4C               	movwf	(inputEntry@numS+1)& (0+255),b
  8364  0001F2  0E00               	movlw	0
  8365  0001F4  6F4B               	movwf	inputEntry@numS& (0+255),b
  8366                           
  8367                           ;menu.c: 108: numW = 0;
  8368  0001F6  0E00               	movlw	0
  8369  0001F8  6F4E               	movwf	(inputEntry@numW+1)& (0+255),b
  8370  0001FA  0E00               	movlw	0
  8371  0001FC  6F4D               	movwf	inputEntry@numW& (0+255),b
  8372                           
  8373                           ; BSR set to: 1
  8374                           ;menu.c: 109: char fastenerString[32];
  8375                           ;menu.c: 110: strcpy(fastenerString, inputEntryQuestions[inputEntryStep]);
  8376  0001FE  0E18               	movlw	low inputEntry@fastenerString
  8377  000200  0100               	movlb	0	; () banked
  8378  000202  6F86               	movwf	strcpy@to& (0+255),b
  8379  000204  0E01               	movlw	high inputEntry@fastenerString
  8380  000206  6F87               	movwf	(strcpy@to+1)& (0+255),b
  8381  000208  C14F  F080         	movff	inputEntry@inputEntryStep,___wmul@multiplier
  8382  00020C  C150  F081         	movff	inputEntry@inputEntryStep+1,___wmul@multiplier+1
  8383  000210  0E00               	movlw	0
  8384  000212  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8385  000214  0E21               	movlw	33
  8386  000216  6F82               	movwf	___wmul@multiplicand& (0+255),b
  8387  000218  EC2C  F01F         	call	___wmul	;wreg free
  8388  00021C  0E8A               	movlw	low _inputEntryQuestions
  8389  00021E  0100               	movlb	0	; () banked
  8390  000220  2580               	addwf	?___wmul& (0+255),w,b
  8391  000222  6F88               	movwf	strcpy@from& (0+255),b
  8392  000224  0EFC               	movlw	high _inputEntryQuestions
  8393  000226  2181               	addwfc	(?___wmul+1)& (0+255),w,b
  8394  000228  6F89               	movwf	(strcpy@from+1)& (0+255),b
  8395  00022A  ECCE  F01E         	call	_strcpy	;wreg free
  8396                           
  8397                           ;menu.c: 111: fastenerString[14] = compartmentNum + 1 + 48;
  8398  00022E  0101               	movlb	1	; () banked
  8399  000230  5153               	movf	inputEntry@compartmentNum& (0+255),w,b
  8400  000232  0F31               	addlw	49
  8401  000234  6F26               	movwf	(inputEntry@fastenerString+14)& (0+255),b
  8402                           
  8403                           ; BSR set to: 1
  8404                           ;menu.c: 113: printStringLCD(fastenerString);
  8405  000236  0E18               	movlw	low inputEntry@fastenerString
  8406  000238  0100               	movlb	0	; () banked
  8407  00023A  6F86               	movwf	printStringLCD@string& (0+255),b
  8408  00023C  0E01               	movlw	high inputEntry@fastenerString
  8409  00023E  6F87               	movwf	(printStringLCD@string+1)& (0+255),b
  8410  000240  ECBD  F011         	call	_printStringLCD	;wreg free
  8411                           
  8412                           ;menu.c: 114: lcd_set_cursor(9, 1);
  8413  000244  0E01               	movlw	1
  8414  000246  0100               	movlb	0	; () banked
  8415  000248  6F86               	movwf	lcd_set_cursor@y& (0+255),b
  8416  00024A  0E09               	movlw	9
  8417  00024C  EC2B  F01E         	call	_lcd_set_cursor
  8418                           
  8419                           ;menu.c: 115: doneCompartment = 0;
  8420  000250  0E00               	movlw	0
  8421  000252  0101               	movlb	1	; () banked
  8422  000254  6F44               	movwf	(inputEntry@doneCompartment+1)& (0+255),b
  8423  000256  0E00               	movlw	0
  8424  000258  D04D               	goto	L8
  8425  00025A                     
  8426                           ; BSR set to: 1
  8427                           ;menu.c: 118: pressed = pollKeypad();
  8428                           
  8429                           ; BSR set to: 1
  8430  00025A  ECE8  F01E         	call	_pollKeypad	;wreg free
  8431  00025E  0101               	movlb	1	; () banked
  8432  000260  6F57               	movwf	inputEntry@pressed& (0+255),b
  8433                           
  8434                           ; BSR set to: 1
  8435                           ;menu.c: 119: if (pressed == 66 || pressed == 78 || pressed == 83 || pressed == 87) {
  8436  000262  0E42               	movlw	66
  8437  000264  1957               	xorwf	inputEntry@pressed& (0+255),w,b
  8438  000266  B4D8               	btfsc	status,2,c
  8439  000268  D00C               	goto	u9030
  8440                           
  8441                           ; BSR set to: 1
  8442  00026A  0E4E               	movlw	78
  8443  00026C  1957               	xorwf	inputEntry@pressed& (0+255),w,b
  8444  00026E  B4D8               	btfsc	status,2,c
  8445  000270  D008               	goto	u9030
  8446                           
  8447                           ; BSR set to: 1
  8448  000272  0E53               	movlw	83
  8449  000274  1957               	xorwf	inputEntry@pressed& (0+255),w,b
  8450  000276  B4D8               	btfsc	status,2,c
  8451  000278  D004               	goto	u9030
  8452                           
  8453                           ; BSR set to: 1
  8454  00027A  0E57               	movlw	87
  8455  00027C  1957               	xorwf	inputEntry@pressed& (0+255),w,b
  8456  00027E  A4D8               	btfss	status,2,c
  8457  000280  D022               	goto	l422
  8458  000282                     u9030:
  8459                           
  8460                           ; BSR set to: 1
  8461                           ;menu.c: 120: putch(pressed);
  8462                           
  8463                           ; BSR set to: 1
  8464  000282  5157               	movf	inputEntry@pressed& (0+255),w,b
  8465  000284  ECA5  F01F         	call	_putch
  8466                           
  8467                           ;menu.c: 121: if (pressed == 66) numB++;
  8468  000288  0E42               	movlw	66
  8469  00028A  0101               	movlb	1	; () banked
  8470  00028C  1957               	xorwf	inputEntry@pressed& (0+255),w,b
  8471  00028E  A4D8               	btfss	status,2,c
  8472  000290  D003               	goto	l425
  8473                           
  8474                           ; BSR set to: 1
  8475  000292  4B47               	infsnz	inputEntry@numB& (0+255),f,b
  8476  000294  2B48               	incf	(inputEntry@numB+1)& (0+255),f,b
  8477  000296  D014               	goto	l431
  8478  000298                     l425:
  8479                           
  8480                           ; BSR set to: 1
  8481                           ;menu.c: 122: else if (pressed == 78) numN++;
  8482                           
  8483                           ; BSR set to: 1
  8484  000298  0E4E               	movlw	78
  8485  00029A  1957               	xorwf	inputEntry@pressed& (0+255),w,b
  8486  00029C  A4D8               	btfss	status,2,c
  8487  00029E  D003               	goto	l427
  8488                           
  8489                           ; BSR set to: 1
  8490  0002A0  4B49               	infsnz	inputEntry@numN& (0+255),f,b
  8491  0002A2  2B4A               	incf	(inputEntry@numN+1)& (0+255),f,b
  8492  0002A4  D00D               	goto	l431
  8493  0002A6                     l427:
  8494                           
  8495                           ; BSR set to: 1
  8496                           ;menu.c: 123: else if (pressed == 83) numS ++;
  8497                           
  8498                           ; BSR set to: 1
  8499  0002A6  0E53               	movlw	83
  8500  0002A8  1957               	xorwf	inputEntry@pressed& (0+255),w,b
  8501  0002AA  A4D8               	btfss	status,2,c
  8502  0002AC  D003               	goto	l429
  8503                           
  8504                           ; BSR set to: 1
  8505  0002AE  4B4B               	infsnz	inputEntry@numS& (0+255),f,b
  8506  0002B0  2B4C               	incf	(inputEntry@numS+1)& (0+255),f,b
  8507  0002B2  D006               	goto	l431
  8508  0002B4                     l429:
  8509                           
  8510                           ; BSR set to: 1
  8511                           ;menu.c: 124: else if (pressed == 87) numW++;
  8512                           
  8513                           ; BSR set to: 1
  8514  0002B4  0E57               	movlw	87
  8515  0002B6  1957               	xorwf	inputEntry@pressed& (0+255),w,b
  8516  0002B8  A4D8               	btfss	status,2,c
  8517  0002BA  D002               	goto	l431
  8518                           
  8519                           ; BSR set to: 1
  8520  0002BC  4B4D               	infsnz	inputEntry@numW& (0+255),f,b
  8521  0002BE  2B4E               	incf	(inputEntry@numW+1)& (0+255),f,b
  8522  0002C0                     l431:
  8523                           
  8524                           ; BSR set to: 1
  8525                           ;menu.c: 125: doneCompartment++;
  8526                           
  8527                           ; BSR set to: 1
  8528                           
  8529                           ; BSR set to: 1
  8530                           
  8531                           ; BSR set to: 1
  8532  0002C0  4B43               	infsnz	inputEntry@doneCompartment& (0+255),f,b
  8533  0002C2  2B44               	incf	(inputEntry@doneCompartment+1)& (0+255),f,b
  8534                           
  8535                           ;menu.c: 126: } else if (pressed == 35) {
  8536  0002C4  D021               	goto	l438
  8537  0002C6                     l422:
  8538                           
  8539                           ; BSR set to: 1
  8540                           
  8541                           ; BSR set to: 1
  8542  0002C6  0E23               	movlw	35
  8543  0002C8  1957               	xorwf	inputEntry@pressed& (0+255),w,b
  8544  0002CA  A4D8               	btfss	status,2,c
  8545  0002CC  D015               	goto	l433
  8546                           
  8547                           ; BSR set to: 1
  8548                           ;menu.c: 127: if (numB != 0 || numN != 0 || numS != 0 || numW != 0) doneCompartment = 4;
  8549  0002CE  5147               	movf	inputEntry@numB& (0+255),w,b
  8550  0002D0  1148               	iorwf	(inputEntry@numB+1)& (0+255),w,b
  8551  0002D2  A4D8               	btfss	status,2,c
  8552  0002D4  D00C               	goto	u9120
  8553                           
  8554                           ; BSR set to: 1
  8555  0002D6  5149               	movf	inputEntry@numN& (0+255),w,b
  8556  0002D8  114A               	iorwf	(inputEntry@numN+1)& (0+255),w,b
  8557  0002DA  A4D8               	btfss	status,2,c
  8558  0002DC  D008               	goto	u9120
  8559                           
  8560                           ; BSR set to: 1
  8561  0002DE  514B               	movf	inputEntry@numS& (0+255),w,b
  8562  0002E0  114C               	iorwf	(inputEntry@numS+1)& (0+255),w,b
  8563  0002E2  A4D8               	btfss	status,2,c
  8564  0002E4  D004               	goto	u9120
  8565                           
  8566                           ; BSR set to: 1
  8567  0002E6  514D               	movf	inputEntry@numW& (0+255),w,b
  8568  0002E8  114E               	iorwf	(inputEntry@numW+1)& (0+255),w,b
  8569  0002EA  B4D8               	btfsc	status,2,c
  8570  0002EC  D00D               	goto	l438
  8571  0002EE                     u9120:
  8572                           
  8573                           ; BSR set to: 1
  8574                           
  8575                           ; BSR set to: 1
  8576  0002EE  0E00               	movlw	0
  8577  0002F0  6F44               	movwf	(inputEntry@doneCompartment+1)& (0+255),b
  8578  0002F2  0E04               	movlw	4
  8579  0002F4                     L8:
  8580  0002F4  6F43               	movwf	inputEntry@doneCompartment& (0+255),b
  8581                           
  8582                           ; BSR set to: 1
  8583                           ;menu.c: 128: } else if (pressed == 42) {
  8584  0002F6  D008               	goto	l438
  8585  0002F8                     l433:
  8586                           
  8587                           ; BSR set to: 1
  8588                           
  8589                           ; BSR set to: 1
  8590  0002F8  0E2A               	movlw	42
  8591  0002FA  1957               	xorwf	inputEntry@pressed& (0+255),w,b
  8592  0002FC  A4D8               	btfss	status,2,c
  8593  0002FE  D004               	goto	l438
  8594                           
  8595                           ; BSR set to: 1
  8596                           ;menu.c: 129: compartmentNum--;
  8597  000300  0753               	decf	inputEntry@compartmentNum& (0+255),f,b
  8598  000302  A0D8               	btfss	status,0,c
  8599  000304  0754               	decf	(inputEntry@compartmentNum+1)& (0+255),f,b
  8600                           
  8601                           ;menu.c: 130: goto STARTMULTIPLES;
  8602  000306  D0DA               	goto	u9220
  8603  000308                     l438:
  8604                           
  8605                           ; BSR set to: 1
  8606                           
  8607                           ; BSR set to: 1
  8608                           
  8609                           ; BSR set to: 1
  8610                           
  8611                           ; BSR set to: 1
  8612                           
  8613                           ; BSR set to: 1
  8614  000308  BF44               	btfsc	(inputEntry@doneCompartment+1)& (0+255),7,b
  8615  00030A  D7A7               	goto	l421
  8616  00030C  5144               	movf	(inputEntry@doneCompartment+1)& (0+255),w,b
  8617  00030E  E104               	bnz	l6906
  8618  000310  0E04               	movlw	4
  8619  000312  5D43               	subwf	inputEntry@doneCompartment& (0+255),w,b
  8620  000314  A0D8               	btfss	status,0,c
  8621  000316  D7A1               	goto	l421
  8622  000318                     l6906:
  8623                           
  8624                           ; BSR set to: 1
  8625                           ;menu.c: 131: }
  8626                           ;menu.c: 132: }
  8627                           ;menu.c: 135: found = 0;
  8628  000318  0E00               	movlw	0
  8629  00031A  6F3E               	movwf	(inputEntry@found+1)& (0+255),b
  8630  00031C  0E00               	movlw	0
  8631  00031E  6F3D               	movwf	inputEntry@found& (0+255),b
  8632                           
  8633                           ;menu.c: 136: for (i = 0; i < 21; i++) {
  8634  000320  0E00               	movlw	0
  8635  000322  6F56               	movwf	(inputEntry@i+1)& (0+255),b
  8636  000324  0E00               	movlw	0
  8637  000326  6F55               	movwf	inputEntry@i& (0+255),b
  8638                           
  8639                           ; BSR set to: 1
  8640  000328  BF56               	btfsc	(inputEntry@i+1)& (0+255),7,b
  8641  00032A  D008               	goto	l441
  8642  00032C  5156               	movf	(inputEntry@i+1)& (0+255),w,b
  8643  00032E  E105               	bnz	u9150
  8644  000330  0E15               	movlw	21
  8645  000332  5D55               	subwf	inputEntry@i& (0+255),w,b
  8646  000334  B0D8               	btfsc	status,0,c
  8647  000336  D0AC               	goto	u9200
  8648  000338  D001               	goto	l441
  8649  00033A                     u9150:
  8650                           
  8651                           ; BSR set to: 1
  8652  00033A  D0AA               	goto	u9200
  8653  00033C                     l441:
  8654                           
  8655                           ; BSR set to: 1
  8656                           ;menu.c: 137: if (fastenerMatrix[i][0] == numB &&
  8657                           ;menu.c: 138: fastenerMatrix[i][1] == numN &&
  8658                           ;menu.c: 139: fastenerMatrix[i][2] == numS &&
  8659                           ;menu.c: 140: fastenerMatrix[i][3] == numW)
  8660                           
  8661                           ; BSR set to: 1
  8662  00033C  C155  F099         	movff	inputEntry@i,??_inputEntry
  8663  000340  C156  F09A         	movff	inputEntry@i+1,??_inputEntry+1
  8664  000344  0100               	movlb	0	; () banked
  8665  000346  90D8               	bcf	status,0,c
  8666  000348  3799               	rlcf	??_inputEntry& (0+255),f,b
  8667  00034A  379A               	rlcf	(??_inputEntry+1)& (0+255),f,b
  8668  00034C  90D8               	bcf	status,0,c
  8669  00034E  3799               	rlcf	??_inputEntry& (0+255),f,b
  8670  000350  379A               	rlcf	(??_inputEntry+1)& (0+255),f,b
  8671  000352  0E0E               	movlw	low _fastenerMatrix
  8672  000354  2599               	addwf	??_inputEntry& (0+255),w,b
  8673  000356  6EF6               	movwf	tblptrl,c
  8674  000358  0EFD               	movlw	high _fastenerMatrix
  8675  00035A  219A               	addwfc	(??_inputEntry+1)& (0+255),w,b
  8676  00035C  6EF7               	movwf	tblptrh,c
  8677  00035E                     	if	1	;There are 3 active tblptr bytes
  8678  00035E  6AF8               	clrf	tblptru,c
  8679  000360  0E00               	movlw	low (__mediumconst shr (0+16))
  8680  000362  22F8               	addwfc	tblptru,f,c
  8681  000364                     	endif
  8682  000364  0008               	tblrd		*
  8683  000366  50F5               	movf	tablat,w,c
  8684  000368  6F9B               	movwf	(??_inputEntry+2)& (0+255),b
  8685  00036A  6B9C               	clrf	(??_inputEntry+3)& (0+255),b
  8686  00036C  0101               	movlb	1	; () banked
  8687  00036E  5147               	movf	inputEntry@numB& (0+255),w,b
  8688  000370  0100               	movlb	0	; () banked
  8689  000372  199B               	xorwf	(??_inputEntry+2)& (0+255),w,b
  8690  000374  E105               	bnz	u9161
  8691  000376  0101               	movlb	1	; () banked
  8692  000378  5148               	movf	(inputEntry@numB+1)& (0+255),w,b
  8693  00037A  0100               	movlb	0	; () banked
  8694  00037C  199C               	xorwf	(??_inputEntry+3)& (0+255),w,b
  8695  00037E  A4D8               	btfss	status,2,c
  8696  000380                     u9161:
  8697  000380  D07F               	goto	l443
  8698                           
  8699                           ; BSR set to: 0
  8700  000382  C155  F099         	movff	inputEntry@i,??_inputEntry
  8701  000386  C156  F09A         	movff	inputEntry@i+1,??_inputEntry+1
  8702  00038A  90D8               	bcf	status,0,c
  8703  00038C  3799               	rlcf	??_inputEntry& (0+255),f,b
  8704  00038E  379A               	rlcf	(??_inputEntry+1)& (0+255),f,b
  8705  000390  90D8               	bcf	status,0,c
  8706  000392  3799               	rlcf	??_inputEntry& (0+255),f,b
  8707  000394  379A               	rlcf	(??_inputEntry+1)& (0+255),f,b
  8708  000396  0E01               	movlw	1
  8709  000398  2799               	addwf	??_inputEntry& (0+255),f,b
  8710  00039A  0E00               	movlw	0
  8711  00039C  239A               	addwfc	(??_inputEntry+1)& (0+255),f,b
  8712  00039E  0E0E               	movlw	low _fastenerMatrix
  8713  0003A0  2599               	addwf	??_inputEntry& (0+255),w,b
  8714  0003A2  6EF6               	movwf	tblptrl,c
  8715  0003A4  0EFD               	movlw	high _fastenerMatrix
  8716  0003A6  219A               	addwfc	(??_inputEntry+1)& (0+255),w,b
  8717  0003A8  6EF7               	movwf	tblptrh,c
  8718  0003AA                     	if	1	;There are 3 active tblptr bytes
  8719  0003AA  6AF8               	clrf	tblptru,c
  8720  0003AC  0E00               	movlw	low (__mediumconst shr (0+16))
  8721  0003AE  22F8               	addwfc	tblptru,f,c
  8722  0003B0                     	endif
  8723  0003B0  0008               	tblrd		*
  8724  0003B2  50F5               	movf	tablat,w,c
  8725  0003B4  6F9B               	movwf	(??_inputEntry+2)& (0+255),b
  8726  0003B6  6B9C               	clrf	(??_inputEntry+3)& (0+255),b
  8727  0003B8  0101               	movlb	1	; () banked
  8728  0003BA  5149               	movf	inputEntry@numN& (0+255),w,b
  8729  0003BC  0100               	movlb	0	; () banked
  8730  0003BE  199B               	xorwf	(??_inputEntry+2)& (0+255),w,b
  8731  0003C0  E15F               	bnz	l6924
  8732  0003C2  0101               	movlb	1	; () banked
  8733  0003C4  514A               	movf	(inputEntry@numN+1)& (0+255),w,b
  8734  0003C6  0100               	movlb	0	; () banked
  8735  0003C8  199C               	xorwf	(??_inputEntry+3)& (0+255),w,b
  8736  0003CA  A4D8               	btfss	status,2,c
  8737  0003CC  D059               	goto	l443
  8738                           
  8739                           ; BSR set to: 0
  8740  0003CE  C155  F099         	movff	inputEntry@i,??_inputEntry
  8741  0003D2  C156  F09A         	movff	inputEntry@i+1,??_inputEntry+1
  8742  0003D6  90D8               	bcf	status,0,c
  8743  0003D8  3799               	rlcf	??_inputEntry& (0+255),f,b
  8744  0003DA  379A               	rlcf	(??_inputEntry+1)& (0+255),f,b
  8745  0003DC  90D8               	bcf	status,0,c
  8746  0003DE  3799               	rlcf	??_inputEntry& (0+255),f,b
  8747  0003E0  379A               	rlcf	(??_inputEntry+1)& (0+255),f,b
  8748  0003E2  0E02               	movlw	2
  8749  0003E4  2799               	addwf	??_inputEntry& (0+255),f,b
  8750  0003E6  0E00               	movlw	0
  8751  0003E8  239A               	addwfc	(??_inputEntry+1)& (0+255),f,b
  8752  0003EA  0E0E               	movlw	low _fastenerMatrix
  8753  0003EC  2599               	addwf	??_inputEntry& (0+255),w,b
  8754  0003EE  6EF6               	movwf	tblptrl,c
  8755  0003F0  0EFD               	movlw	high _fastenerMatrix
  8756  0003F2  219A               	addwfc	(??_inputEntry+1)& (0+255),w,b
  8757  0003F4  6EF7               	movwf	tblptrh,c
  8758  0003F6                     	if	1	;There are 3 active tblptr bytes
  8759  0003F6  6AF8               	clrf	tblptru,c
  8760  0003F8  0E00               	movlw	low (__mediumconst shr (0+16))
  8761  0003FA  22F8               	addwfc	tblptru,f,c
  8762  0003FC                     	endif
  8763  0003FC  0008               	tblrd		*
  8764  0003FE  50F5               	movf	tablat,w,c
  8765  000400  6F9B               	movwf	(??_inputEntry+2)& (0+255),b
  8766  000402  6B9C               	clrf	(??_inputEntry+3)& (0+255),b
  8767  000404  0101               	movlb	1	; () banked
  8768  000406  514B               	movf	inputEntry@numS& (0+255),w,b
  8769  000408  0100               	movlb	0	; () banked
  8770  00040A  199B               	xorwf	(??_inputEntry+2)& (0+255),w,b
  8771  00040C  E139               	bnz	l6924
  8772  00040E  0101               	movlb	1	; () banked
  8773  000410  514C               	movf	(inputEntry@numS+1)& (0+255),w,b
  8774  000412  0100               	movlb	0	; () banked
  8775  000414  199C               	xorwf	(??_inputEntry+3)& (0+255),w,b
  8776  000416  A4D8               	btfss	status,2,c
  8777  000418  D033               	goto	l443
  8778                           
  8779                           ; BSR set to: 0
  8780  00041A  C155  F099         	movff	inputEntry@i,??_inputEntry
  8781  00041E  C156  F09A         	movff	inputEntry@i+1,??_inputEntry+1
  8782  000422  90D8               	bcf	status,0,c
  8783  000424  3799               	rlcf	??_inputEntry& (0+255),f,b
  8784  000426  379A               	rlcf	(??_inputEntry+1)& (0+255),f,b
  8785  000428  90D8               	bcf	status,0,c
  8786  00042A  3799               	rlcf	??_inputEntry& (0+255),f,b
  8787  00042C  379A               	rlcf	(??_inputEntry+1)& (0+255),f,b
  8788  00042E  0E03               	movlw	3
  8789  000430  2799               	addwf	??_inputEntry& (0+255),f,b
  8790  000432  0E00               	movlw	0
  8791  000434  239A               	addwfc	(??_inputEntry+1)& (0+255),f,b
  8792  000436  0E0E               	movlw	low _fastenerMatrix
  8793  000438  2599               	addwf	??_inputEntry& (0+255),w,b
  8794  00043A  6EF6               	movwf	tblptrl,c
  8795  00043C  0EFD               	movlw	high _fastenerMatrix
  8796  00043E  219A               	addwfc	(??_inputEntry+1)& (0+255),w,b
  8797  000440  6EF7               	movwf	tblptrh,c
  8798  000442                     	if	1	;There are 3 active tblptr bytes
  8799  000442  6AF8               	clrf	tblptru,c
  8800  000444  0E00               	movlw	low (__mediumconst shr (0+16))
  8801  000446  22F8               	addwfc	tblptru,f,c
  8802  000448                     	endif
  8803  000448  0008               	tblrd		*
  8804  00044A  50F5               	movf	tablat,w,c
  8805  00044C  6F9B               	movwf	(??_inputEntry+2)& (0+255),b
  8806  00044E  6B9C               	clrf	(??_inputEntry+3)& (0+255),b
  8807  000450  0101               	movlb	1	; () banked
  8808  000452  514D               	movf	inputEntry@numW& (0+255),w,b
  8809  000454  0100               	movlb	0	; () banked
  8810  000456  199B               	xorwf	(??_inputEntry+2)& (0+255),w,b
  8811  000458  E113               	bnz	l6924
  8812  00045A  0101               	movlb	1	; () banked
  8813  00045C  514E               	movf	(inputEntry@numW+1)& (0+255),w,b
  8814  00045E  0100               	movlb	0	; () banked
  8815  000460  199C               	xorwf	(??_inputEntry+3)& (0+255),w,b
  8816  000462  A4D8               	btfss	status,2,c
  8817  000464  D00D               	goto	l443
  8818                           
  8819                           ; BSR set to: 0
  8820                           ;menu.c: 141: {
  8821                           ;menu.c: 142: params.toFill[compartmentNum] = i;
  8822  000466  0EB9               	movlw	low (_params+2)
  8823  000468  0101               	movlb	1	; () banked
  8824  00046A  2553               	addwf	inputEntry@compartmentNum& (0+255),w,b
  8825  00046C  6ED9               	movwf	fsr2l,c
  8826  00046E  0E01               	movlw	high (_params+2)
  8827  000470  2154               	addwfc	(inputEntry@compartmentNum+1)& (0+255),w,b
  8828  000472  6EDA               	movwf	fsr2h,c
  8829  000474  C155  FFDF         	movff	inputEntry@i,indf2
  8830                           
  8831                           ; BSR set to: 1
  8832                           ;menu.c: 143: found = 1;
  8833  000478  0E00               	movlw	0
  8834  00047A  6F3E               	movwf	(inputEntry@found+1)& (0+255),b
  8835  00047C  0E01               	movlw	1
  8836  00047E  6F3D               	movwf	inputEntry@found& (0+255),b
  8837  000480                     l443:
  8838  000480                     l6924:
  8839  000480  0101               	movlb	1	; () banked
  8840  000482  4B55               	infsnz	inputEntry@i& (0+255),f,b
  8841  000484  2B56               	incf	(inputEntry@i+1)& (0+255),f,b
  8842                           
  8843                           ; BSR set to: 1
  8844  000486  BF56               	btfsc	(inputEntry@i+1)& (0+255),7,b
  8845  000488  D759               	goto	l441
  8846  00048A  5156               	movf	(inputEntry@i+1)& (0+255),w,b
  8847  00048C  E101               	bnz	l6928
  8848  00048E  D750               	goto	L9
  8849  000490                     u9200:
  8850  000490                     l6928:
  8851                           
  8852                           ; BSR set to: 1
  8853                           ;menu.c: 144: }
  8854                           ;menu.c: 145: }
  8855                           ;menu.c: 146: if (!found) {
  8856  000490  513D               	movf	inputEntry@found& (0+255),w,b
  8857  000492  113E               	iorwf	(inputEntry@found+1)& (0+255),w,b
  8858  000494  A4D8               	btfss	status,2,c
  8859  000496  D008               	goto	l444
  8860                           
  8861                           ; BSR set to: 1
  8862                           ;menu.c: 147: printErrorLCD(errMsgs.badEntry);
  8863  000498  0EAA               	movlw	low _errMsgs
  8864  00049A  0100               	movlb	0	; () banked
  8865  00049C  6F95               	movwf	printErrorLCD@string& (0+255),b
  8866  00049E  0EFB               	movlw	high _errMsgs
  8867  0004A0  6F96               	movwf	(printErrorLCD@string+1)& (0+255),b
  8868  0004A2  EC40  F01F         	call	_printErrorLCD	;wreg free
  8869                           
  8870                           ;menu.c: 151: } else {
  8871                           
  8872                           ;menu.c: 150: continue;
  8873  0004A6  D005               	goto	l445
  8874  0004A8                     l444:
  8875                           
  8876                           ;menu.c: 152: setIsGood = 1;
  8877  0004A8  0E00               	movlw	0
  8878  0004AA  0101               	movlb	1	; () banked
  8879  0004AC  6F40               	movwf	(inputEntry@setIsGood+1)& (0+255),b
  8880  0004AE  0E01               	movlw	1
  8881  0004B0                     L7:
  8882  0004B0  6F3F               	movwf	inputEntry@setIsGood& (0+255),b
  8883  0004B2                     l445:
  8884                           
  8885                           ; BSR set to: 1
  8886                           
  8887                           ; BSR set to: 1
  8888  0004B2  0101               	movlb	1	; () banked
  8889  0004B4  513F               	movf	inputEntry@setIsGood& (0+255),w,b
  8890  0004B6  1140               	iorwf	(inputEntry@setIsGood+1)& (0+255),w,b
  8891  0004B8  B4D8               	btfsc	status,2,c
  8892  0004BA  D691               	goto	l419
  8893  0004BC                     u9220:
  8894                           
  8895                           ; BSR set to: 1
  8896                           ;menu.c: 158: doneMultiples = 0;
  8897                           
  8898                           ; BSR set to: 1
  8899                           
  8900                           ;menu.c: 153: }
  8901                           ;menu.c: 154: }
  8902                           ;menu.c: 157: STARTMULTIPLES:
  8903                           
  8904                           ; BSR set to: 1
  8905  0004BC  0E00               	movlw	0
  8906  0004BE  6F42               	movwf	(inputEntry@doneMultiples+1)& (0+255),b
  8907  0004C0  0E00               	movlw	0
  8908  0004C2  D111               	goto	L10
  8909  0004C4                     
  8910                           ; BSR set to: 1
  8911                           ;menu.c: 160: printStringLCD(inputEntryQuestions[2]);
  8912                           
  8913                           ; BSR set to: 1
  8914  0004C4  0ECC               	movlw	low (_inputEntryQuestions+66)
  8915  0004C6  0100               	movlb	0	; () banked
  8916  0004C8  6F86               	movwf	printStringLCD@string& (0+255),b
  8917  0004CA  0EFC               	movlw	high (_inputEntryQuestions+66)
  8918  0004CC  6F87               	movwf	(printStringLCD@string+1)& (0+255),b
  8919  0004CE  ECBD  F011         	call	_printStringLCD	;wreg free
  8920                           
  8921                           ;menu.c: 161: lcd_set_cursor(14, 1);
  8922  0004D2  0E01               	movlw	1
  8923  0004D4  0100               	movlb	0	; () banked
  8924  0004D6  6F86               	movwf	lcd_set_cursor@y& (0+255),b
  8925  0004D8  0E0E               	movlw	14
  8926  0004DA  EC2B  F01E         	call	_lcd_set_cursor
  8927                           
  8928                           ;menu.c: 163: pressed = pollKeypad();
  8929  0004DE  ECE8  F01E         	call	_pollKeypad	;wreg free
  8930  0004E2  0101               	movlb	1	; () banked
  8931  0004E4  6F57               	movwf	inputEntry@pressed& (0+255),b
  8932                           
  8933                           ; BSR set to: 1
  8934                           ;menu.c: 164: numPressed = pressed - 48;
  8935  0004E6  0ED0               	movlw	208
  8936  0004E8  2557               	addwf	inputEntry@pressed& (0+255),w,b
  8937  0004EA  6F51               	movwf	inputEntry@numPressed& (0+255),b
  8938  0004EC  6B52               	clrf	(inputEntry@numPressed+1)& (0+255),b
  8939  0004EE  0EFF               	movlw	255
  8940  0004F0  2352               	addwfc	(inputEntry@numPressed+1)& (0+255),f,b
  8941                           
  8942                           ; BSR set to: 1
  8943                           ;menu.c: 166: if (pressed == 42) goto STARTCOMPARTMENT;
  8944  0004F2  0E2A               	movlw	42
  8945  0004F4  1957               	xorwf	inputEntry@pressed& (0+255),w,b
  8946  0004F6  B4D8               	btfsc	status,2,c
  8947  0004F8  D643               	goto	l412
  8948                           
  8949                           ; BSR set to: 1
  8950                           ;menu.c: 169: putch(pressed);
  8951                           
  8952                           ; BSR set to: 1
  8953                           
  8954                           ; BSR set to: 1
  8955  0004FA  5157               	movf	inputEntry@pressed& (0+255),w,b
  8956  0004FC  ECA5  F01F         	call	_putch
  8957                           
  8958                           ;menu.c: 170: _delay((unsigned long)((500)*(40000000/4000.0)));
  8959  000500  0E1A               	movlw	26
  8960  000502  0100               	movlb	0	; () banked
  8961  000504  6F9A               	movwf	(??_inputEntry+1)& (0+255),b
  8962  000506  0E5E               	movlw	94
  8963  000508  6F99               	movwf	??_inputEntry& (0+255),b
  8964  00050A  0E6E               	movlw	110
  8965  00050C                     u9857:
  8966  00050C  2EE8               	decfsz	wreg,f,c
  8967  00050E  D7FE               	bra	u9857
  8968  000510  2F99               	decfsz	??_inputEntry& (0+255),f,b
  8969  000512  D7FC               	bra	u9857
  8970  000514  2F9A               	decfsz	(??_inputEntry+1)& (0+255),f,b
  8971  000516  D7FA               	bra	u9857
  8972  000518  F000               	nop	
  8973                           
  8974                           ;menu.c: 172: int sum = 0;
  8975  00051A  0E00               	movlw	0
  8976  00051C  0101               	movlb	1	; () banked
  8977  00051E  6F46               	movwf	(inputEntry@sum+1)& (0+255),b
  8978  000520  0E00               	movlw	0
  8979  000522  6F45               	movwf	inputEntry@sum& (0+255),b
  8980                           
  8981                           ; BSR set to: 1
  8982                           ;menu.c: 173: for (i = 0; i < 4; i++) {
  8983  000524  0E00               	movlw	0
  8984  000526  6F56               	movwf	(inputEntry@i+1)& (0+255),b
  8985  000528  0E00               	movlw	0
  8986  00052A  6F55               	movwf	inputEntry@i& (0+255),b
  8987  00052C                     l6960:
  8988                           
  8989                           ; BSR set to: 1
  8990  00052C  BF56               	btfsc	(inputEntry@i+1)& (0+255),7,b
  8991  00052E  D006               	goto	l450
  8992  000530  5156               	movf	(inputEntry@i+1)& (0+255),w,b
  8993  000532  E12D               	bnz	l6970
  8994  000534  0E04               	movlw	4
  8995  000536  5D55               	subwf	inputEntry@i& (0+255),w,b
  8996  000538  B0D8               	btfsc	status,0,c
  8997  00053A  D029               	goto	u9250
  8998  00053C                     l450:
  8999                           
  9000                           ; BSR set to: 1
  9001                           ;menu.c: 174: sum += fastenerMatrix[params.toFill[compartmentNum]][i];
  9002                           
  9003                           ; BSR set to: 1
  9004  00053C  0EB9               	movlw	low (_params+2)
  9005  00053E  2553               	addwf	inputEntry@compartmentNum& (0+255),w,b
  9006  000540  6ED9               	movwf	fsr2l,c
  9007  000542  0E01               	movlw	high (_params+2)
  9008  000544  2154               	addwfc	(inputEntry@compartmentNum+1)& (0+255),w,b
  9009  000546  6EDA               	movwf	fsr2h,c
  9010  000548  50DF               	movf	indf2,w,c
  9011  00054A  0100               	movlb	0	; () banked
  9012  00054C  6F99               	movwf	??_inputEntry& (0+255),b
  9013  00054E  5199               	movf	??_inputEntry& (0+255),w,b
  9014  000550  0D04               	mullw	4
  9015  000552  0E0E               	movlw	low _fastenerMatrix
  9016  000554  6F9A               	movwf	(??_inputEntry+1)& (0+255),b
  9017  000556  0EFD               	movlw	high _fastenerMatrix
  9018  000558  6F9B               	movwf	(??_inputEntry+2)& (0+255),b
  9019  00055A  50F3               	movf	prodl,w,c
  9020  00055C  279A               	addwf	(??_inputEntry+1)& (0+255),f,b
  9021  00055E  50F4               	movf	prodh,w,c
  9022  000560  239B               	addwfc	(??_inputEntry+2)& (0+255),f,b
  9023  000562  0101               	movlb	1	; () banked
  9024  000564  5155               	movf	inputEntry@i& (0+255),w,b
  9025  000566  0100               	movlb	0	; () banked
  9026  000568  279A               	addwf	(??_inputEntry+1)& (0+255),f,b
  9027  00056A  0101               	movlb	1	; () banked
  9028  00056C  5156               	movf	(inputEntry@i+1)& (0+255),w,b
  9029  00056E  0100               	movlb	0	; () banked
  9030  000570  239B               	addwfc	(??_inputEntry+2)& (0+255),f,b
  9031  000572  C09A  FFF6         	movff	??_inputEntry+1,tblptrl
  9032  000576  C09B  FFF7         	movff	??_inputEntry+2,tblptrh
  9033  00057A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9034  00057A  6AF8               	clrf	tblptru,c
  9035  00057C                     	endif
  9036  00057C                     	if	0	;tblptru may be non-zero
  9037  00057C                     	endif
  9038  00057C  0008               	tblrd		*
  9039  00057E  50F5               	movf	tablat,w,c
  9040  000580  0101               	movlb	1	; () banked
  9041  000582  2745               	addwf	inputEntry@sum& (0+255),f,b
  9042  000584  0E00               	movlw	0
  9043  000586  2346               	addwfc	(inputEntry@sum+1)& (0+255),f,b
  9044                           
  9045                           ; BSR set to: 1
  9046  000588  4B55               	infsnz	inputEntry@i& (0+255),f,b
  9047  00058A  2B56               	incf	(inputEntry@i+1)& (0+255),f,b
  9048  00058C  D7CF               	goto	l6960
  9049  00058E                     u9250:
  9050  00058E                     l6970:
  9051                           
  9052                           ; BSR set to: 1
  9053                           ;menu.c: 175: };
  9054                           ;menu.c: 176: if (numPressed * sum > 4) {
  9055  00058E  C151  F080         	movff	inputEntry@numPressed,___wmul@multiplier
  9056  000592  C152  F081         	movff	inputEntry@numPressed+1,___wmul@multiplier+1
  9057  000596  C145  F082         	movff	inputEntry@sum,___wmul@multiplicand
  9058  00059A  C146  F083         	movff	inputEntry@sum+1,___wmul@multiplicand+1
  9059  00059E  EC2C  F01F         	call	___wmul	;wreg free
  9060  0005A2  0100               	movlb	0	; () banked
  9061  0005A4  BF81               	btfsc	(?___wmul+1)& (0+255),7,b
  9062  0005A6  D00D               	goto	l452
  9063  0005A8  5181               	movf	(?___wmul+1)& (0+255),w,b
  9064  0005AA  E104               	bnz	u9260
  9065  0005AC  0E05               	movlw	5
  9066  0005AE  5D80               	subwf	?___wmul& (0+255),w,b
  9067  0005B0  A0D8               	btfss	status,0,c
  9068  0005B2  D007               	goto	l452
  9069  0005B4                     u9260:
  9070                           
  9071                           ; BSR set to: 0
  9072                           ;menu.c: 177: printErrorLCD(errMsgs.tooManyFasteners);
  9073  0005B4  0ECA               	movlw	low (_errMsgs+32)
  9074  0005B6  6F95               	movwf	printErrorLCD@string& (0+255),b
  9075  0005B8  0EFB               	movlw	high (_errMsgs+32)
  9076  0005BA  6F96               	movwf	(printErrorLCD@string+1)& (0+255),b
  9077  0005BC  EC40  F01F         	call	_printErrorLCD	;wreg free
  9078                           
  9079                           ;menu.c: 178: } else if (numPressed * sum <= 0) {
  9080  0005C0  D093               	goto	l463
  9081  0005C2                     l452:
  9082  0005C2  C151  F080         	movff	inputEntry@numPressed,___wmul@multiplier
  9083  0005C6  C152  F081         	movff	inputEntry@numPressed+1,___wmul@multiplier+1
  9084  0005CA  C145  F082         	movff	inputEntry@sum,___wmul@multiplicand
  9085  0005CE  C146  F083         	movff	inputEntry@sum+1,___wmul@multiplicand+1
  9086  0005D2  EC2C  F01F         	call	___wmul	;wreg free
  9087  0005D6  0100               	movlb	0	; () banked
  9088  0005D8  BF81               	btfsc	(?___wmul+1)& (0+255),7,b
  9089  0005DA  D005               	goto	u9270
  9090  0005DC  5181               	movf	(?___wmul+1)& (0+255),w,b
  9091  0005DE  E10A               	bnz	l6978
  9092  0005E0  0580               	decf	?___wmul& (0+255),w,b
  9093  0005E2  B0D8               	btfsc	status,0,c
  9094  0005E4  D007               	goto	l454
  9095  0005E6                     u9270:
  9096                           
  9097                           ; BSR set to: 0
  9098                           ;menu.c: 179: printErrorLCD(errMsgs.noFasteners);
  9099  0005E6  0E6A               	movlw	low (_errMsgs+192)
  9100  0005E8  6F95               	movwf	printErrorLCD@string& (0+255),b
  9101  0005EA  0EFC               	movlw	high (_errMsgs+192)
  9102  0005EC  6F96               	movwf	(printErrorLCD@string+1)& (0+255),b
  9103  0005EE  EC40  F01F         	call	_printErrorLCD	;wreg free
  9104                           
  9105                           ;menu.c: 183: } else if (numB * numPressed > 2) {
  9106  0005F2  D07A               	goto	l463
  9107  0005F4                     l454:
  9108  0005F4                     l6978:
  9109  0005F4  C147  F080         	movff	inputEntry@numB,___wmul@multiplier
  9110  0005F8  C148  F081         	movff	inputEntry@numB+1,___wmul@multiplier+1
  9111  0005FC  C151  F082         	movff	inputEntry@numPressed,___wmul@multiplicand
  9112  000600  C152  F083         	movff	inputEntry@numPressed+1,___wmul@multiplicand+1
  9113  000604  EC2C  F01F         	call	___wmul	;wreg free
  9114  000608  0100               	movlb	0	; () banked
  9115  00060A  BF81               	btfsc	(?___wmul+1)& (0+255),7,b
  9116  00060C  D00D               	goto	l456
  9117  00060E  5181               	movf	(?___wmul+1)& (0+255),w,b
  9118  000610  E104               	bnz	u9280
  9119  000612  0E03               	movlw	3
  9120  000614  5D80               	subwf	?___wmul& (0+255),w,b
  9121  000616  A0D8               	btfss	status,0,c
  9122  000618  D007               	goto	l456
  9123  00061A                     u9280:
  9124                           
  9125                           ; BSR set to: 0
  9126                           ;menu.c: 184: printErrorLCD(errMsgs.tooManyBolts);
  9127  00061A  0EEA               	movlw	low (_errMsgs+64)
  9128  00061C  6F95               	movwf	printErrorLCD@string& (0+255),b
  9129  00061E  0EFB               	movlw	high (_errMsgs+64)
  9130  000620  6F96               	movwf	(printErrorLCD@string+1)& (0+255),b
  9131  000622  EC40  F01F         	call	_printErrorLCD	;wreg free
  9132                           
  9133                           ;menu.c: 185: } else if (numN * numPressed > 3) {
  9134  000626  D060               	goto	l463
  9135  000628                     l456:
  9136  000628  C149  F080         	movff	inputEntry@numN,___wmul@multiplier
  9137  00062C  C14A  F081         	movff	inputEntry@numN+1,___wmul@multiplier+1
  9138  000630  C151  F082         	movff	inputEntry@numPressed,___wmul@multiplicand
  9139  000634  C152  F083         	movff	inputEntry@numPressed+1,___wmul@multiplicand+1
  9140  000638  EC2C  F01F         	call	___wmul	;wreg free
  9141  00063C  0100               	movlb	0	; () banked
  9142  00063E  BF81               	btfsc	(?___wmul+1)& (0+255),7,b
  9143  000640  D00D               	goto	l458
  9144  000642  5181               	movf	(?___wmul+1)& (0+255),w,b
  9145  000644  E104               	bnz	u9290
  9146  000646  0E04               	movlw	4
  9147  000648  5D80               	subwf	?___wmul& (0+255),w,b
  9148  00064A  A0D8               	btfss	status,0,c
  9149  00064C  D007               	goto	l458
  9150  00064E                     u9290:
  9151                           
  9152                           ; BSR set to: 0
  9153                           ;menu.c: 186: printErrorLCD(errMsgs.tooManyNuts);
  9154  00064E  0E0A               	movlw	low (_errMsgs+96)
  9155  000650  6F95               	movwf	printErrorLCD@string& (0+255),b
  9156  000652  0EFC               	movlw	high (_errMsgs+96)
  9157  000654  6F96               	movwf	(printErrorLCD@string+1)& (0+255),b
  9158  000656  EC40  F01F         	call	_printErrorLCD	;wreg free
  9159                           
  9160                           ;menu.c: 187: } else if (numS * numPressed > 2) {
  9161  00065A  D046               	goto	l463
  9162  00065C                     l458:
  9163  00065C  C14B  F080         	movff	inputEntry@numS,___wmul@multiplier
  9164  000660  C14C  F081         	movff	inputEntry@numS+1,___wmul@multiplier+1
  9165  000664  C151  F082         	movff	inputEntry@numPressed,___wmul@multiplicand
  9166  000668  C152  F083         	movff	inputEntry@numPressed+1,___wmul@multiplicand+1
  9167  00066C  EC2C  F01F         	call	___wmul	;wreg free
  9168  000670  0100               	movlb	0	; () banked
  9169  000672  BF81               	btfsc	(?___wmul+1)& (0+255),7,b
  9170  000674  D00D               	goto	l460
  9171  000676  5181               	movf	(?___wmul+1)& (0+255),w,b
  9172  000678  E104               	bnz	u9300
  9173  00067A  0E03               	movlw	3
  9174  00067C  5D80               	subwf	?___wmul& (0+255),w,b
  9175  00067E  A0D8               	btfss	status,0,c
  9176  000680  D007               	goto	l460
  9177  000682                     u9300:
  9178                           
  9179                           ; BSR set to: 0
  9180                           ;menu.c: 188: printErrorLCD(errMsgs.tooManySpacers);
  9181  000682  0E4A               	movlw	low (_errMsgs+160)
  9182  000684  6F95               	movwf	printErrorLCD@string& (0+255),b
  9183  000686  0EFC               	movlw	high (_errMsgs+160)
  9184  000688  6F96               	movwf	(printErrorLCD@string+1)& (0+255),b
  9185  00068A  EC40  F01F         	call	_printErrorLCD	;wreg free
  9186                           
  9187                           ;menu.c: 189: } else if (numW * numPressed > 4) {
  9188  00068E  D02C               	goto	l463
  9189  000690                     l460:
  9190  000690  C14D  F080         	movff	inputEntry@numW,___wmul@multiplier
  9191  000694  C14E  F081         	movff	inputEntry@numW+1,___wmul@multiplier+1
  9192  000698  C151  F082         	movff	inputEntry@numPressed,___wmul@multiplicand
  9193  00069C  C152  F083         	movff	inputEntry@numPressed+1,___wmul@multiplicand+1
  9194  0006A0  EC2C  F01F         	call	___wmul	;wreg free
  9195  0006A4  0100               	movlb	0	; () banked
  9196  0006A6  BF81               	btfsc	(?___wmul+1)& (0+255),7,b
  9197  0006A8  D00D               	goto	l462
  9198  0006AA  5181               	movf	(?___wmul+1)& (0+255),w,b
  9199  0006AC  E104               	bnz	u9310
  9200  0006AE  0E05               	movlw	5
  9201  0006B0  5D80               	subwf	?___wmul& (0+255),w,b
  9202  0006B2  A0D8               	btfss	status,0,c
  9203  0006B4  D007               	goto	l462
  9204  0006B6                     u9310:
  9205                           
  9206                           ; BSR set to: 0
  9207                           ;menu.c: 190: printErrorLCD(errMsgs.tooManyWashers);
  9208  0006B6  0E2A               	movlw	low (_errMsgs+128)
  9209  0006B8  6F95               	movwf	printErrorLCD@string& (0+255),b
  9210  0006BA  0EFC               	movlw	high (_errMsgs+128)
  9211  0006BC  6F96               	movwf	(printErrorLCD@string+1)& (0+255),b
  9212  0006BE  EC40  F01F         	call	_printErrorLCD	;wreg free
  9213                           
  9214                           ;menu.c: 191: } else {
  9215  0006C2  D012               	goto	l463
  9216  0006C4                     l462:
  9217                           
  9218                           ;menu.c: 192: params.setMultiple[compartmentNum] = numPressed;
  9219  0006C4  90D8               	bcf	status,0,c
  9220  0006C6  0101               	movlb	1	; () banked
  9221  0006C8  3553               	rlcf	inputEntry@compartmentNum& (0+255),w,b
  9222  0006CA  6ED9               	movwf	fsr2l,c
  9223  0006CC  3554               	rlcf	(inputEntry@compartmentNum+1)& (0+255),w,b
  9224  0006CE  6EDA               	movwf	fsr2h,c
  9225  0006D0  0EC1               	movlw	low (_params+10)
  9226  0006D2  26D9               	addwf	fsr2l,f,c
  9227  0006D4  0E01               	movlw	high (_params+10)
  9228  0006D6  22DA               	addwfc	fsr2h,f,c
  9229  0006D8  C151  FFDE         	movff	inputEntry@numPressed,postinc2
  9230  0006DC  C152  FFDD         	movff	inputEntry@numPressed+1,postdec2
  9231                           
  9232                           ; BSR set to: 1
  9233                           ;menu.c: 193: doneMultiples = 1;
  9234  0006E0  0E00               	movlw	0
  9235  0006E2  6F42               	movwf	(inputEntry@doneMultiples+1)& (0+255),b
  9236  0006E4  0E01               	movlw	1
  9237  0006E6                     L10:
  9238  0006E6  6F41               	movwf	inputEntry@doneMultiples& (0+255),b
  9239  0006E8                     l463:
  9240                           
  9241                           ; BSR set to: 1
  9242                           
  9243                           ; BSR set to: 1
  9244                           
  9245                           ; BSR set to: 1
  9246                           
  9247                           ; BSR set to: 1
  9248                           
  9249                           ; BSR set to: 1
  9250                           
  9251                           ; BSR set to: 1
  9252                           
  9253                           ; BSR set to: 1
  9254  0006E8  0101               	movlb	1	; () banked
  9255  0006EA  5141               	movf	inputEntry@doneMultiples& (0+255),w,b
  9256  0006EC  1142               	iorwf	(inputEntry@doneMultiples+1)& (0+255),w,b
  9257  0006EE  A4D8               	btfss	status,2,c
  9258  0006F0  D017               	goto	l465
  9259  0006F2  D6E8               	goto	l448
  9260  0006F4                     l415:
  9261                           
  9262                           ;menu.c: 197: params.toFill[compartmentNum] = NONE;
  9263                           
  9264                           ; BSR set to: 1
  9265  0006F4  0EB9               	movlw	low (_params+2)
  9266  0006F6  0101               	movlb	1	; () banked
  9267  0006F8  2553               	addwf	inputEntry@compartmentNum& (0+255),w,b
  9268  0006FA  6ED9               	movwf	fsr2l,c
  9269  0006FC  0E01               	movlw	high (_params+2)
  9270  0006FE  2154               	addwfc	(inputEntry@compartmentNum+1)& (0+255),w,b
  9271  000700  6EDA               	movwf	fsr2h,c
  9272  000702  0E00               	movlw	0
  9273  000704  6EDF               	movwf	indf2,c
  9274                           
  9275                           ;menu.c: 198: params.setMultiple[compartmentNum] = 0;
  9276  000706  90D8               	bcf	status,0,c
  9277  000708  3553               	rlcf	inputEntry@compartmentNum& (0+255),w,b
  9278  00070A  6ED9               	movwf	fsr2l,c
  9279  00070C  3554               	rlcf	(inputEntry@compartmentNum+1)& (0+255),w,b
  9280  00070E  6EDA               	movwf	fsr2h,c
  9281  000710  0EC1               	movlw	low (_params+10)
  9282  000712  26D9               	addwf	fsr2l,f,c
  9283  000714  0E01               	movlw	high (_params+10)
  9284  000716  22DA               	addwfc	fsr2h,f,c
  9285  000718  0E00               	movlw	0
  9286  00071A  6EDE               	movwf	postinc2,c
  9287  00071C  0E00               	movlw	0
  9288  00071E  6EDD               	movwf	postdec2,c
  9289  000720                     l465:
  9290                           
  9291                           ; BSR set to: 1
  9292                           
  9293                           ; BSR set to: 1
  9294  000720  4B53               	infsnz	inputEntry@compartmentNum& (0+255),f,b
  9295  000722  2B54               	incf	(inputEntry@compartmentNum+1)& (0+255),f,b
  9296                           
  9297                           ; BSR set to: 1
  9298  000724  BF54               	btfsc	(inputEntry@compartmentNum+1)& (0+255),7,b
  9299  000726  D52C               	goto	l412
  9300  000728  5154               	movf	(inputEntry@compartmentNum+1)& (0+255),w,b
  9301  00072A  E104               	bnz	l7006
  9302  00072C  0E08               	movlw	8
  9303  00072E  5D53               	subwf	inputEntry@compartmentNum& (0+255),w,b
  9304  000730  A0D8               	btfss	status,0,c
  9305  000732  D526               	goto	l412
  9306  000734                     u9330:
  9307  000734                     l7006:
  9308                           
  9309                           ; BSR set to: 1
  9310                           ;menu.c: 199: }
  9311                           ;menu.c: 200: }
  9312                           ;menu.c: 201: done = 1;
  9313  000734  0E00               	movlw	0
  9314  000736  6F3C               	movwf	(inputEntry@done+1)& (0+255),b
  9315  000738  0E01               	movlw	1
  9316  00073A  6F3B               	movwf	inputEntry@done& (0+255),b
  9317                           
  9318                           ; BSR set to: 1
  9319                           ;menu.c: 202: I2C_Send(nanoAddr, "\1Done inputs\0");
  9320  00073C  0EA7               	movlw	low STR_24
  9321  00073E  0100               	movlb	0	; () banked
  9322  000740  6F83               	movwf	I2C_Send@data& (0+255),b
  9323  000742  0EFF               	movlw	high STR_24
  9324  000744  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  9325  000746  0EA3               	movlw	low _nanoAddr
  9326  000748  6EF6               	movwf	tblptrl,c
  9327  00074A                     	if	1	;There is more than 1 active tblptr byte
  9328  00074A  0EFB               	movlw	high _nanoAddr
  9329  00074C  6EF7               	movwf	tblptrh,c
  9330  00074E                     	endif
  9331  00074E                     	if	1	;There are 3 active tblptr bytes
  9332  00074E  0E00               	movlw	low (_nanoAddr shr (0+16))
  9333  000750  6EF8               	movwf	tblptru,c
  9334  000752                     	endif
  9335  000752  0008               	tblrd		*
  9336  000754  50F5               	movf	tablat,w,c
  9337  000756  ECD9  F01B         	call	_I2C_Send
  9338  00075A                     l411:
  9339  00075A  0101               	movlb	1	; () banked
  9340  00075C  513B               	movf	inputEntry@done& (0+255),w,b
  9341  00075E  113C               	iorwf	(inputEntry@done+1)& (0+255),w,b
  9342  000760  A4D8               	btfss	status,2,c
  9343  000762  0012               	return	
  9344  000764  D48E               	goto	l406
  9345  000766                     __end_of_inputEntry:
  9346                           	opt stack 0
  9347                           tosu	equ	0xFFF
  9348                           tosh	equ	0xFFE
  9349                           tosl	equ	0xFFD
  9350                           pclath	equ	0xFFA
  9351                           tblptru	equ	0xFF8
  9352                           tblptrh	equ	0xFF7
  9353                           tblptrl	equ	0xFF6
  9354                           tablat	equ	0xFF5
  9355                           prodh	equ	0xFF4
  9356                           prodl	equ	0xFF3
  9357                           intcon	equ	0xFF2
  9358                           indf0	equ	0xFEF
  9359                           postinc0	equ	0xFEE
  9360                           fsr0h	equ	0xFEA
  9361                           fsr0l	equ	0xFE9
  9362                           wreg	equ	0xFE8
  9363                           postdec1	equ	0xFE5
  9364                           plusw1	equ	0xFE3
  9365                           fsr1l	equ	0xFE1
  9366                           indf2	equ	0xFDF
  9367                           postinc2	equ	0xFDE
  9368                           postdec2	equ	0xFDD
  9369                           plusw2	equ	0xFDB
  9370                           fsr2h	equ	0xFDA
  9371                           fsr2l	equ	0xFD9
  9372                           status	equ	0xFD8
  9373                           
  9374 ;; *************** function _strcpy *****************
  9375 ;; Defined at:
  9376 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
  9377 ;; Parameters:    Size  Location     Type
  9378 ;;  to              2    6[BANK0 ] PTR unsigned char 
  9379 ;;		 -> inputEntry@fastenerString(32), 
  9380 ;;  from            2    8[BANK0 ] PTR const unsigned char 
  9381 ;;		 -> inputEntryQuestions(132), 
  9382 ;; Auto vars:     Size  Location     Type
  9383 ;;  cp              2   10[BANK0 ] PTR unsigned char 
  9384 ;;		 -> inputEntry@fastenerString(32), 
  9385 ;; Return value:  Size  Location     Type
  9386 ;;                  2    6[BANK0 ] PTR unsigned char 
  9387 ;; Registers used:
  9388 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9389 ;; Tracked objects:
  9390 ;;		On entry : 0/0
  9391 ;;		On exit  : 0/0
  9392 ;;		Unchanged: 0/0
  9393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9394 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9395 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9397 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9398 ;;Total ram usage:        6 bytes
  9399 ;; Hardware stack levels used:    1
  9400 ;; Hardware stack levels required when called:    4
  9401 ;; This function calls:
  9402 ;;		Nothing
  9403 ;; This function is called by:
  9404 ;;		_inputEntry
  9405 ;; This function uses a non-reentrant model
  9406 ;;
  9407                           
  9408                           	psect	text15
  9409  003D9C                     __ptext15:
  9410                           	opt stack 0
  9411  003D9C                     _strcpy:
  9412                           	opt stack 24
  9413                           
  9414                           ; BSR set to: 1
  9415                           ;incstack = 0
  9416  003D9C  C086  F08A         	movff	strcpy@to,strcpy@cp
  9417  003DA0  C087  F08B         	movff	strcpy@to+1,strcpy@cp+1
  9418  003DA4  D005               	goto	l1532
  9419  003DA6  0100               	movlb	0	; () banked
  9420  003DA8  4B8A               	infsnz	strcpy@cp& (0+255),f,b
  9421  003DAA  2B8B               	incf	(strcpy@cp+1)& (0+255),f,b
  9422  003DAC  4B88               	infsnz	strcpy@from& (0+255),f,b
  9423  003DAE  2B89               	incf	(strcpy@from+1)& (0+255),f,b
  9424  003DB0                     l1532:
  9425                           
  9426                           ; BSR set to: 0
  9427  003DB0  C088  FFF6         	movff	strcpy@from,tblptrl
  9428  003DB4  C089  FFF7         	movff	strcpy@from+1,tblptrh
  9429  003DB8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9430  003DB8  6AF8               	clrf	tblptru,c
  9431  003DBA                     	endif
  9432  003DBA                     	if	0	;tblptru may be non-zero
  9433  003DBA                     	endif
  9434  003DBA  C08A  FFD9         	movff	strcpy@cp,fsr2l
  9435  003DBE  C08B  FFDA         	movff	strcpy@cp+1,fsr2h
  9436  003DC2  0008               	tblrd		*
  9437  003DC4  CFF5 FFDF          	movff	tablat,indf2
  9438  003DC8  50DF               	movf	indf2,w,c
  9439  003DCA  B4D8               	btfsc	status,2,c
  9440  003DCC  0012               	return	
  9441  003DCE  D7EB               	goto	l1533
  9442  003DD0                     __end_of_strcpy:
  9443                           	opt stack 0
  9444                           tosu	equ	0xFFF
  9445                           tosh	equ	0xFFE
  9446                           tosl	equ	0xFFD
  9447                           pclath	equ	0xFFA
  9448                           tblptru	equ	0xFF8
  9449                           tblptrh	equ	0xFF7
  9450                           tblptrl	equ	0xFF6
  9451                           tablat	equ	0xFF5
  9452                           prodh	equ	0xFF4
  9453                           prodl	equ	0xFF3
  9454                           intcon	equ	0xFF2
  9455                           indf0	equ	0xFEF
  9456                           postinc0	equ	0xFEE
  9457                           fsr0h	equ	0xFEA
  9458                           fsr0l	equ	0xFE9
  9459                           wreg	equ	0xFE8
  9460                           postdec1	equ	0xFE5
  9461                           plusw1	equ	0xFE3
  9462                           fsr1l	equ	0xFE1
  9463                           indf2	equ	0xFDF
  9464                           postinc2	equ	0xFDE
  9465                           postdec2	equ	0xFDD
  9466                           plusw2	equ	0xFDB
  9467                           fsr2h	equ	0xFDA
  9468                           fsr2l	equ	0xFD9
  9469                           status	equ	0xFD8
  9470                           
  9471 ;; *************** function _printErrorLCD *****************
  9472 ;; Defined at:
  9473 ;;		line 62 in file "helpers.c"
  9474 ;; Parameters:    Size  Location     Type
  9475 ;;  string          2   21[BANK0 ] PTR unsigned char 
  9476 ;;		 -> errMsgs.noFasteners(32), errMsgs.tooManySpacers(32), errMsgs.tooManyWashers(32), errMsgs.tooManyNuts(32), 
  9477 ;;		 -> errMsgs.tooManyBolts(32), errMsgs.tooManyFasteners(32), errMsgs.badEntry(32), errMsgs(224), 
  9478 ;; Auto vars:     Size  Location     Type
  9479 ;;		None
  9480 ;; Return value:  Size  Location     Type
  9481 ;;                  1    wreg      void 
  9482 ;; Registers used:
  9483 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9484 ;; Tracked objects:
  9485 ;;		On entry : 0/0
  9486 ;;		On exit  : 0/0
  9487 ;;		Unchanged: 0/0
  9488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9489 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9491 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9492 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9493 ;;Total ram usage:        4 bytes
  9494 ;; Hardware stack levels used:    1
  9495 ;; Hardware stack levels required when called:    7
  9496 ;; This function calls:
  9497 ;;		_printStringLCD
  9498 ;; This function is called by:
  9499 ;;		_inputEntry
  9500 ;; This function uses a non-reentrant model
  9501 ;;
  9502                           
  9503                           	psect	text16
  9504  003E80                     __ptext16:
  9505                           	opt stack 0
  9506  003E80                     _printErrorLCD:
  9507                           	opt stack 21
  9508                           
  9509                           ;helpers.c: 63: printStringLCD(string);
  9510                           
  9511                           ;incstack = 0
  9512  003E80  C095  F086         	movff	printErrorLCD@string,printStringLCD@string
  9513  003E84  C096  F087         	movff	printErrorLCD@string+1,printStringLCD@string+1
  9514  003E88  ECBD  F011         	call	_printStringLCD	;wreg free
  9515                           
  9516                           ;helpers.c: 64: _delay((unsigned long)((2000)*(40000000/4000.0)));
  9517  003E8C  0E66               	movlw	102
  9518  003E8E  0100               	movlb	0	; () banked
  9519  003E90  6F98               	movwf	(??_printErrorLCD+1)& (0+255),b
  9520  003E92  0E76               	movlw	118
  9521  003E94  6F97               	movwf	??_printErrorLCD& (0+255),b
  9522  003E96  0EC1               	movlw	193
  9523  003E98                     u9867:
  9524  003E98  2EE8               	decfsz	wreg,f,c
  9525  003E9A  D7FE               	bra	u9867
  9526  003E9C  2F97               	decfsz	??_printErrorLCD& (0+255),f,b
  9527  003E9E  D7FC               	bra	u9867
  9528  003EA0  2F98               	decfsz	(??_printErrorLCD+1)& (0+255),f,b
  9529  003EA2  D7FA               	bra	u9867
  9530  003EA4  0012               	return		;funcret
  9531  003EA6                     __end_of_printErrorLCD:
  9532                           	opt stack 0
  9533                           tosu	equ	0xFFF
  9534                           tosh	equ	0xFFE
  9535                           tosl	equ	0xFFD
  9536                           pclath	equ	0xFFA
  9537                           tblptru	equ	0xFF8
  9538                           tblptrh	equ	0xFF7
  9539                           tblptrl	equ	0xFF6
  9540                           tablat	equ	0xFF5
  9541                           prodh	equ	0xFF4
  9542                           prodl	equ	0xFF3
  9543                           intcon	equ	0xFF2
  9544                           indf0	equ	0xFEF
  9545                           postinc0	equ	0xFEE
  9546                           fsr0h	equ	0xFEA
  9547                           fsr0l	equ	0xFE9
  9548                           wreg	equ	0xFE8
  9549                           postdec1	equ	0xFE5
  9550                           plusw1	equ	0xFE3
  9551                           fsr1l	equ	0xFE1
  9552                           indf2	equ	0xFDF
  9553                           postinc2	equ	0xFDE
  9554                           postdec2	equ	0xFDD
  9555                           plusw2	equ	0xFDB
  9556                           fsr2h	equ	0xFDA
  9557                           fsr2l	equ	0xFD9
  9558                           status	equ	0xFD8
  9559                           
  9560 ;; *************** function _lcd_set_cursor *****************
  9561 ;; Defined at:
  9562 ;;		line 81 in file "lcd.c"
  9563 ;; Parameters:    Size  Location     Type
  9564 ;;  x               1    wreg     unsigned char 
  9565 ;;  y               1    6[BANK0 ] unsigned char 
  9566 ;; Auto vars:     Size  Location     Type
  9567 ;;  x               1    9[BANK0 ] unsigned char 
  9568 ;;  i               1    8[BANK0 ] unsigned char 
  9569 ;; Return value:  Size  Location     Type
  9570 ;;                  1    wreg      void 
  9571 ;; Registers used:
  9572 ;;		wreg, status,2, status,0, cstack
  9573 ;; Tracked objects:
  9574 ;;		On entry : 0/0
  9575 ;;		On exit  : 0/0
  9576 ;;		Unchanged: 0/0
  9577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9578 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9579 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9580 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9581 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9582 ;;Total ram usage:        4 bytes
  9583 ;; Hardware stack levels used:    1
  9584 ;; Hardware stack levels required when called:    7
  9585 ;; This function calls:
  9586 ;;		_lcdInst
  9587 ;;		_lcd_shift_cursor
  9588 ;; This function is called by:
  9589 ;;		_inputEntry
  9590 ;; This function uses a non-reentrant model
  9591 ;;
  9592                           
  9593                           	psect	text17
  9594  003C56                     __ptext17:
  9595                           	opt stack 0
  9596  003C56                     _lcd_set_cursor:
  9597                           	opt stack 21
  9598                           
  9599                           ;incstack = 0
  9600                           ;lcd_set_cursor@x stored from wreg
  9601  003C56  0100               	movlb	0	; () banked
  9602  003C58  6F89               	movwf	lcd_set_cursor@x& (0+255),b
  9603                           
  9604                           ;lcd.c: 91: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  9605  003C5A  0E80               	movlw	128
  9606  003C5C  ECB1  F01F         	call	_lcdInst
  9607  003C60  0E41               	movlw	65
  9608  003C62  0100               	movlb	0	; () banked
  9609  003C64  6F87               	movwf	??_lcd_set_cursor& (0+255),b
  9610  003C66  0EEE               	movlw	238
  9611  003C68                     u9877:
  9612  003C68  2EE8               	decfsz	wreg,f,c
  9613  003C6A  D7FE               	bra	u9877
  9614  003C6C  2F87               	decfsz	??_lcd_set_cursor& (0+255),f,b
  9615  003C6E  D7FC               	bra	u9877
  9616  003C70  F000               	nop	
  9617                           
  9618                           ;lcd.c: 92: for(unsigned char i = 0; i < y; i++){lcdInst(0xC0);;}
  9619  003C72  0E00               	movlw	0
  9620  003C74  0100               	movlb	0	; () banked
  9621  003C76  6F88               	movwf	lcd_set_cursor@i& (0+255),b
  9622  003C78  D005               	goto	l280
  9623  003C7A                     
  9624                           ; BSR set to: 0
  9625                           
  9626                           ; BSR set to: 0
  9627  003C7A  0EC0               	movlw	192
  9628  003C7C  ECB1  F01F         	call	_lcdInst
  9629  003C80  0100               	movlb	0	; () banked
  9630  003C82  2B88               	incf	lcd_set_cursor@i& (0+255),f,b
  9631  003C84                     l280:
  9632                           
  9633                           ; BSR set to: 0
  9634                           
  9635                           ; BSR set to: 0
  9636  003C84  5186               	movf	lcd_set_cursor@y& (0+255),w,b
  9637  003C86  5D88               	subwf	lcd_set_cursor@i& (0+255),w,b
  9638  003C88  A0D8               	btfss	status,0,c
  9639  003C8A  D7F7               	goto	l281
  9640                           
  9641                           ; BSR set to: 0
  9642                           ;lcd.c: 93: if(x > 0){
  9643                           
  9644                           ; BSR set to: 0
  9645  003C8C  5189               	movf	lcd_set_cursor@x& (0+255),w,b
  9646  003C8E  B4D8               	btfsc	status,2,c
  9647  003C90  0012               	return	
  9648                           
  9649                           ; BSR set to: 0
  9650                           ;lcd.c: 94: lcd_shift_cursor(x, 1);
  9651  003C92  0E01               	movlw	1
  9652  003C94  6F83               	movwf	lcd_shift_cursor@direction& (0+255),b
  9653  003C96  5189               	movf	lcd_set_cursor@x& (0+255),w,b
  9654  003C98  EC86  F01F         	call	_lcd_shift_cursor
  9655  003C9C  0012               	return	
  9656  003C9E                     __end_of_lcd_set_cursor:
  9657                           	opt stack 0
  9658                           tosu	equ	0xFFF
  9659                           tosh	equ	0xFFE
  9660                           tosl	equ	0xFFD
  9661                           pclath	equ	0xFFA
  9662                           tblptru	equ	0xFF8
  9663                           tblptrh	equ	0xFF7
  9664                           tblptrl	equ	0xFF6
  9665                           tablat	equ	0xFF5
  9666                           prodh	equ	0xFF4
  9667                           prodl	equ	0xFF3
  9668                           intcon	equ	0xFF2
  9669                           indf0	equ	0xFEF
  9670                           postinc0	equ	0xFEE
  9671                           fsr0h	equ	0xFEA
  9672                           fsr0l	equ	0xFE9
  9673                           wreg	equ	0xFE8
  9674                           postdec1	equ	0xFE5
  9675                           plusw1	equ	0xFE3
  9676                           fsr1l	equ	0xFE1
  9677                           indf2	equ	0xFDF
  9678                           postinc2	equ	0xFDE
  9679                           postdec2	equ	0xFDD
  9680                           plusw2	equ	0xFDB
  9681                           fsr2h	equ	0xFDA
  9682                           fsr2l	equ	0xFD9
  9683                           status	equ	0xFD8
  9684                           
  9685 ;; *************** function _lcd_shift_cursor *****************
  9686 ;; Defined at:
  9687 ;;		line 98 in file "lcd.c"
  9688 ;; Parameters:    Size  Location     Type
  9689 ;;  numChars        1    wreg     unsigned char 
  9690 ;;  direction       1    3[BANK0 ] unsigned char 
  9691 ;; Auto vars:     Size  Location     Type
  9692 ;;  numChars        1    4[BANK0 ] unsigned char 
  9693 ;;  n               1    5[BANK0 ] unsigned char 
  9694 ;; Return value:  Size  Location     Type
  9695 ;;                  1    wreg      void 
  9696 ;; Registers used:
  9697 ;;		wreg, status,2, status,0, cstack
  9698 ;; Tracked objects:
  9699 ;;		On entry : 0/0
  9700 ;;		On exit  : 0/0
  9701 ;;		Unchanged: 0/0
  9702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9703 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9704 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9706 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9707 ;;Total ram usage:        3 bytes
  9708 ;; Hardware stack levels used:    1
  9709 ;; Hardware stack levels required when called:    6
  9710 ;; This function calls:
  9711 ;;		_lcdInst
  9712 ;; This function is called by:
  9713 ;;		_lcd_set_cursor
  9714 ;; This function uses a non-reentrant model
  9715 ;;
  9716                           
  9717                           	psect	text18
  9718  003F0C                     __ptext18:
  9719                           	opt stack 0
  9720  003F0C                     _lcd_shift_cursor:
  9721                           	opt stack 21
  9722                           
  9723                           ;incstack = 0
  9724                           ;lcd_shift_cursor@numChars stored from wreg
  9725  003F0C  0100               	movlb	0	; () banked
  9726  003F0E  6F84               	movwf	lcd_shift_cursor@numChars& (0+255),b
  9727                           
  9728                           ;lcd.c: 110: for(unsigned char n = numChars; n > 0; n--){
  9729  003F10  C084  F085         	movff	lcd_shift_cursor@numChars,lcd_shift_cursor@n
  9730  003F14  0100               	movlb	0	; () banked
  9731  003F16  5185               	movf	lcd_shift_cursor@n& (0+255),w,b
  9732  003F18  B4D8               	btfsc	status,2,c
  9733  003F1A  0012               	return	
  9734                           
  9735                           ; BSR set to: 0
  9736                           ;lcd.c: 111: lcdInst((unsigned char)(0x10 | (direction << 2)));
  9737                           
  9738                           ; BSR set to: 0
  9739                           
  9740                           ; BSR set to: 0
  9741  003F1C  4583               	rlncf	lcd_shift_cursor@direction& (0+255),w,b
  9742  003F1E  46E8               	rlncf	wreg,f,c
  9743  003F20  0BFC               	andlw	252
  9744  003F22  0910               	iorlw	16
  9745  003F24  ECB1  F01F         	call	_lcdInst
  9746  003F28  0100               	movlb	0	; () banked
  9747  003F2A  0785               	decf	lcd_shift_cursor@n& (0+255),f,b
  9748  003F2C  D7F4               	goto	L11
  9749  003F2E                     __end_of_lcd_shift_cursor:
  9750                           	opt stack 0
  9751                           tosu	equ	0xFFF
  9752                           tosh	equ	0xFFE
  9753                           tosl	equ	0xFFD
  9754                           pclath	equ	0xFFA
  9755                           tblptru	equ	0xFF8
  9756                           tblptrh	equ	0xFF7
  9757                           tblptrl	equ	0xFF6
  9758                           tablat	equ	0xFF5
  9759                           prodh	equ	0xFF4
  9760                           prodl	equ	0xFF3
  9761                           intcon	equ	0xFF2
  9762                           indf0	equ	0xFEF
  9763                           postinc0	equ	0xFEE
  9764                           fsr0h	equ	0xFEA
  9765                           fsr0l	equ	0xFE9
  9766                           wreg	equ	0xFE8
  9767                           postdec1	equ	0xFE5
  9768                           plusw1	equ	0xFE3
  9769                           fsr1l	equ	0xFE1
  9770                           indf2	equ	0xFDF
  9771                           postinc2	equ	0xFDE
  9772                           postdec2	equ	0xFDD
  9773                           plusw2	equ	0xFDB
  9774                           fsr2h	equ	0xFDA
  9775                           fsr2l	equ	0xFD9
  9776                           status	equ	0xFD8
  9777                           
  9778 ;; *************** function _hibernate *****************
  9779 ;; Defined at:
  9780 ;;		line 12 in file "menu.c"
  9781 ;; Parameters:    Size  Location     Type
  9782 ;;		None
  9783 ;; Auto vars:     Size  Location     Type
  9784 ;;  pressed         2   25[BANK0 ] int 
  9785 ;; Return value:  Size  Location     Type
  9786 ;;                  1    wreg      void 
  9787 ;; Registers used:
  9788 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9789 ;; Tracked objects:
  9790 ;;		On entry : 0/0
  9791 ;;		On exit  : 0/0
  9792 ;;		Unchanged: 0/0
  9793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9795 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9796 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9797 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9798 ;;Total ram usage:        6 bytes
  9799 ;; Hardware stack levels used:    1
  9800 ;; Hardware stack levels required when called:    7
  9801 ;; This function calls:
  9802 ;;		_pollKeypad
  9803 ;;		_printStringLCD
  9804 ;; This function is called by:
  9805 ;;		_main
  9806 ;;		_mainMenu
  9807 ;; This function uses a non-reentrant model
  9808 ;;
  9809                           
  9810                           	psect	text19
  9811  003D26                     __ptext19:
  9812                           	opt stack 0
  9813  003D26                     _hibernate:
  9814                           	opt stack 22
  9815                           
  9816                           ;menu.c: 13: printStringLCD("Press 1 to begin");
  9817                           
  9818                           ; BSR set to: 0
  9819                           ;incstack = 0
  9820  003D26  0E15               	movlw	low STR_15
  9821  003D28  0100               	movlb	0	; () banked
  9822  003D2A  6F86               	movwf	printStringLCD@string& (0+255),b
  9823  003D2C  0EFF               	movlw	high STR_15
  9824  003D2E  6F87               	movwf	(printStringLCD@string+1)& (0+255),b
  9825  003D30  ECBD  F011         	call	_printStringLCD	;wreg free
  9826  003D34                     
  9827                           ;menu.c: 16: pressed = pollKeypad();
  9828  003D34  ECE8  F01E         	call	_pollKeypad	;wreg free
  9829  003D38  0100               	movlb	0	; () banked
  9830  003D3A  6F95               	movwf	??_hibernate& (0+255),b
  9831  003D3C  5195               	movf	??_hibernate& (0+255),w,b
  9832  003D3E  6F99               	movwf	hibernate@pressed& (0+255),b
  9833  003D40  6B9A               	clrf	(hibernate@pressed+1)& (0+255),b
  9834                           
  9835                           ; BSR set to: 0
  9836                           ;menu.c: 17: if (pressed - 48 == 1) {
  9837  003D42  0ED0               	movlw	208
  9838  003D44  6F95               	movwf	??_hibernate& (0+255),b
  9839  003D46  0EFF               	movlw	255
  9840  003D48  6F96               	movwf	(??_hibernate+1)& (0+255),b
  9841  003D4A  C099  F097         	movff	hibernate@pressed,??_hibernate+2
  9842  003D4E  C09A  F098         	movff	hibernate@pressed+1,??_hibernate+3
  9843  003D52  5195               	movf	??_hibernate& (0+255),w,b
  9844  003D54  2797               	addwf	(??_hibernate+2)& (0+255),f,b
  9845  003D56  5196               	movf	(??_hibernate+1)& (0+255),w,b
  9846  003D58  2398               	addwfc	(??_hibernate+3)& (0+255),f,b
  9847  003D5A  0597               	decf	(??_hibernate+2)& (0+255),w,b
  9848  003D5C  1198               	iorwf	(??_hibernate+3)& (0+255),w,b
  9849  003D5E  B4D8               	btfsc	status,2,c
  9850  003D60  0012               	return	
  9851  003D62  D7E8               	goto	l369
  9852  003D64                     __end_of_hibernate:
  9853                           	opt stack 0
  9854                           tosu	equ	0xFFF
  9855                           tosh	equ	0xFFE
  9856                           tosl	equ	0xFFD
  9857                           pclath	equ	0xFFA
  9858                           tblptru	equ	0xFF8
  9859                           tblptrh	equ	0xFF7
  9860                           tblptrl	equ	0xFF6
  9861                           tablat	equ	0xFF5
  9862                           prodh	equ	0xFF4
  9863                           prodl	equ	0xFF3
  9864                           intcon	equ	0xFF2
  9865                           indf0	equ	0xFEF
  9866                           postinc0	equ	0xFEE
  9867                           fsr0h	equ	0xFEA
  9868                           fsr0l	equ	0xFE9
  9869                           wreg	equ	0xFE8
  9870                           postdec1	equ	0xFE5
  9871                           plusw1	equ	0xFE3
  9872                           fsr1l	equ	0xFE1
  9873                           indf2	equ	0xFDF
  9874                           postinc2	equ	0xFDE
  9875                           postdec2	equ	0xFDD
  9876                           plusw2	equ	0xFDB
  9877                           fsr2h	equ	0xFDA
  9878                           fsr2l	equ	0xFD9
  9879                           status	equ	0xFD8
  9880                           
  9881 ;; *************** function _printStringLCD *****************
  9882 ;; Defined at:
  9883 ;;		line 7 in file "helpers.c"
  9884 ;; Parameters:    Size  Location     Type
  9885 ;;  string          2    6[BANK0 ] PTR unsigned char 
  9886 ;;		 -> mainMenu@msg(32), STR_33(14), STR_32(16), mainMenu@summaries(96), 
  9887 ;;		 -> STR_27(25), STR_26(27), STR_25(30), inputEntry@fastenerString(32), 
  9888 ;;		 -> inputEntryQuestions(132), viewLogs@msg(32), viewLogs@msgs(128), STR_17(21), 
  9889 ;;		 -> STR_16(21), STR_15(17), errMsgs.noFasteners(32), errMsgs.tooManySpacers(32), 
  9890 ;;		 -> errMsgs.tooManyWashers(32), errMsgs.tooManyNuts(32), errMsgs.tooManyBolts(32), errMsgs.tooManyFasteners(32), 
  9891 ;;		 -> errMsgs.badEntry(32), errMsgs(224), 
  9892 ;; Auto vars:     Size  Location     Type
  9893 ;;  i               2   19[BANK0 ] int 
  9894 ;;  newlineCharI    2   17[BANK0 ] int 
  9895 ;;  newlineIndex    2   15[BANK0 ] int 
  9896 ;;  spaceIndex      2   13[BANK0 ] int 
  9897 ;;  j               2   11[BANK0 ] int 
  9898 ;; Return value:  Size  Location     Type
  9899 ;;                  1    wreg      void 
  9900 ;; Registers used:
  9901 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9902 ;; Tracked objects:
  9903 ;;		On entry : 0/0
  9904 ;;		On exit  : 0/0
  9905 ;;		Unchanged: 0/0
  9906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9907 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9908 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9909 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9910 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9911 ;;Total ram usage:       15 bytes
  9912 ;; Hardware stack levels used:    1
  9913 ;; Hardware stack levels required when called:    6
  9914 ;; This function calls:
  9915 ;;		_lcdInst
  9916 ;;		_putch
  9917 ;; This function is called by:
  9918 ;;		_hibernate
  9919 ;;		_viewLogs
  9920 ;;		_inputEntry
  9921 ;;		_mainMenu
  9922 ;;		_printErrorLCD
  9923 ;; This function uses a non-reentrant model
  9924 ;;
  9925                           
  9926                           	psect	text20
  9927  00237A                     __ptext20:
  9928                           	opt stack 0
  9929  00237A                     _printStringLCD:
  9930                           	opt stack 22
  9931                           
  9932                           ;helpers.c: 12: int i;
  9933                           ;helpers.c: 13: int j = 1;
  9934                           
  9935                           ; BSR set to: 0
  9936                           ;incstack = 0
  9937  00237A  0E00               	movlw	0
  9938  00237C  0100               	movlb	0	; () banked
  9939  00237E  6F8C               	movwf	(printStringLCD@j+1)& (0+255),b
  9940  002380  0E01               	movlw	1
  9941  002382  6F8B               	movwf	printStringLCD@j& (0+255),b
  9942                           
  9943                           ;helpers.c: 14: int newlineIndex = 16;
  9944  002384  0E00               	movlw	0
  9945  002386  6F90               	movwf	(printStringLCD@newlineIndex+1)& (0+255),b
  9946  002388  0E10               	movlw	16
  9947  00238A  6F8F               	movwf	printStringLCD@newlineIndex& (0+255),b
  9948                           
  9949                           ; BSR set to: 0
  9950                           ;helpers.c: 15: int newlineCharIndex = -1;
  9951  00238C  6991               	setf	printStringLCD@newlineCharIndex& (0+255),b
  9952  00238E  6992               	setf	(printStringLCD@newlineCharIndex+1)& (0+255),b
  9953                           
  9954                           ;helpers.c: 16: int spaceIndex = 0;
  9955  002390  0E00               	movlw	0
  9956  002392  6F8E               	movwf	(printStringLCD@spaceIndex+1)& (0+255),b
  9957  002394  0E00               	movlw	0
  9958  002396  6F8D               	movwf	printStringLCD@spaceIndex& (0+255),b
  9959                           
  9960                           ; BSR set to: 0
  9961                           ;helpers.c: 18: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  9962  002398  0E01               	movlw	1
  9963  00239A  ECB1  F01F         	call	_lcdInst
  9964  00239E  0EC3               	movlw	195
  9965  0023A0  0100               	movlb	0	; () banked
  9966  0023A2  6F88               	movwf	??_printStringLCD& (0+255),b
  9967  0023A4  0ECD               	movlw	205
  9968  0023A6                     u9887:
  9969  0023A6  2EE8               	decfsz	wreg,f,c
  9970  0023A8  D7FE               	bra	u9887
  9971  0023AA  2F88               	decfsz	??_printStringLCD& (0+255),f,b
  9972  0023AC  D7FC               	bra	u9887
  9973                           
  9974                           ;helpers.c: 19: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  9975  0023AE  0E80               	movlw	128
  9976  0023B0  ECB1  F01F         	call	_lcdInst
  9977  0023B4  0E41               	movlw	65
  9978  0023B6  0100               	movlb	0	; () banked
  9979  0023B8  6F88               	movwf	??_printStringLCD& (0+255),b
  9980  0023BA  0EEE               	movlw	238
  9981  0023BC                     u9897:
  9982  0023BC  2EE8               	decfsz	wreg,f,c
  9983  0023BE  D7FE               	bra	u9897
  9984  0023C0  2F88               	decfsz	??_printStringLCD& (0+255),f,b
  9985  0023C2  D7FC               	bra	u9897
  9986  0023C4  F000               	nop	
  9987                           
  9988                           ;helpers.c: 22: for (i = 0; i < 17; i++) {
  9989  0023C6  0E00               	movlw	0
  9990  0023C8  0100               	movlb	0	; () banked
  9991  0023CA  6F94               	movwf	(printStringLCD@i+1)& (0+255),b
  9992  0023CC  0E00               	movlw	0
  9993  0023CE  6F93               	movwf	printStringLCD@i& (0+255),b
  9994                           
  9995                           ; BSR set to: 0
  9996  0023D0  BF94               	btfsc	(printStringLCD@i+1)& (0+255),7,b
  9997  0023D2  D008               	goto	l548
  9998  0023D4  5194               	movf	(printStringLCD@i+1)& (0+255),w,b
  9999  0023D6  E105               	bnz	u7320
 10000  0023D8  0E11               	movlw	17
 10001  0023DA  5D93               	subwf	printStringLCD@i& (0+255),w,b
 10002  0023DC  B0D8               	btfsc	status,0,c
 10003  0023DE  D08D               	goto	u7430
 10004  0023E0  D001               	goto	l548
 10005  0023E2                     u7320:
 10006                           
 10007                           ; BSR set to: 0
 10008  0023E2  D08B               	goto	u7430
 10009  0023E4                     l548:
 10010                           
 10011                           ; BSR set to: 0
 10012                           ;helpers.c: 23: if (string[i] == 0) break;
 10013                           
 10014                           ; BSR set to: 0
 10015  0023E4  5193               	movf	printStringLCD@i& (0+255),w,b
 10016  0023E6  2586               	addwf	printStringLCD@string& (0+255),w,b
 10017  0023E8  6F88               	movwf	??_printStringLCD& (0+255),b
 10018  0023EA  5194               	movf	(printStringLCD@i+1)& (0+255),w,b
 10019  0023EC  2187               	addwfc	(printStringLCD@string+1)& (0+255),w,b
 10020  0023EE  6F89               	movwf	(??_printStringLCD+1)& (0+255),b
 10021  0023F0  C088  FFF6         	movff	??_printStringLCD,tblptrl
 10022  0023F4  C089  FFF7         	movff	??_printStringLCD+1,tblptrh
 10023  0023F8  0E00               	movlw	low (__mediumconst shr (0+16))
 10024  0023FA  6EF8               	movwf	tblptru,c
 10025  0023FC  0E0F               	movlw	(high __ramtop+-1)
 10026  0023FE  64F7               	cpfsgt	tblptrh,c
 10027  002400  D003               	bra	u7337
 10028  002402  0008               	tblrd		*
 10029  002404  50F5               	movf	tablat,w,c
 10030  002406  D005               	bra	u7330
 10031  002408                     u7337:
 10032  002408  CFF6 FFE9          	movff	tblptrl,fsr0l
 10033  00240C  CFF7 FFEA          	movff	tblptrh,fsr0h
 10034  002410  50EF               	movf	indf0,w,c
 10035  002412                     u7330:
 10036  002412  0900               	iorlw	0
 10037  002414  B4D8               	btfsc	status,2,c
 10038  002416  D071               	goto	u7430
 10039                           
 10040                           ;helpers.c: 24: if (string[i] == 32) {
 10041  002418  0100               	movlb	0	; () banked
 10042  00241A  5193               	movf	printStringLCD@i& (0+255),w,b
 10043  00241C  2586               	addwf	printStringLCD@string& (0+255),w,b
 10044  00241E  6F88               	movwf	??_printStringLCD& (0+255),b
 10045  002420  5194               	movf	(printStringLCD@i+1)& (0+255),w,b
 10046  002422  2187               	addwfc	(printStringLCD@string+1)& (0+255),w,b
 10047  002424  6F89               	movwf	(??_printStringLCD+1)& (0+255),b
 10048  002426  C088  FFF6         	movff	??_printStringLCD,tblptrl
 10049  00242A  C089  FFF7         	movff	??_printStringLCD+1,tblptrh
 10050  00242E  0E00               	movlw	low (__mediumconst shr (0+16))
 10051  002430  6EF8               	movwf	tblptru,c
 10052  002432  0E0F               	movlw	(high __ramtop+-1)
 10053  002434  64F7               	cpfsgt	tblptrh,c
 10054  002436  D003               	bra	u7357
 10055  002438  0008               	tblrd		*
 10056  00243A  50F5               	movf	tablat,w,c
 10057  00243C  D005               	bra	u7350
 10058  00243E                     u7357:
 10059  00243E  CFF6 FFE9          	movff	tblptrl,fsr0l
 10060  002442  CFF7 FFEA          	movff	tblptrh,fsr0h
 10061  002446  50EF               	movf	indf0,w,c
 10062  002448                     u7350:
 10063  002448  0A20               	xorlw	32
 10064  00244A  A4D8               	btfss	status,2,c
 10065  00244C  D004               	goto	l551
 10066                           
 10067                           ;helpers.c: 25: spaceIndex = i;
 10068  00244E  C093  F08D         	movff	printStringLCD@i,printStringLCD@spaceIndex
 10069  002452  C094  F08E         	movff	printStringLCD@i+1,printStringLCD@spaceIndex+1
 10070  002456                     l551:
 10071                           
 10072                           ;helpers.c: 26: }
 10073                           ;helpers.c: 28: if (string[i] == 10) {
 10074  002456  0100               	movlb	0	; () banked
 10075  002458  5193               	movf	printStringLCD@i& (0+255),w,b
 10076  00245A  2586               	addwf	printStringLCD@string& (0+255),w,b
 10077  00245C  6F88               	movwf	??_printStringLCD& (0+255),b
 10078  00245E  5194               	movf	(printStringLCD@i+1)& (0+255),w,b
 10079  002460  2187               	addwfc	(printStringLCD@string+1)& (0+255),w,b
 10080  002462  6F89               	movwf	(??_printStringLCD+1)& (0+255),b
 10081  002464  C088  FFF6         	movff	??_printStringLCD,tblptrl
 10082  002468  C089  FFF7         	movff	??_printStringLCD+1,tblptrh
 10083  00246C  0E00               	movlw	low (__mediumconst shr (0+16))
 10084  00246E  6EF8               	movwf	tblptru,c
 10085  002470  0E0F               	movlw	(high __ramtop+-1)
 10086  002472  64F7               	cpfsgt	tblptrh,c
 10087  002474  D003               	bra	u7377
 10088  002476  0008               	tblrd		*
 10089  002478  50F5               	movf	tablat,w,c
 10090  00247A  D005               	bra	u7370
 10091  00247C                     u7377:
 10092  00247C  CFF6 FFE9          	movff	tblptrl,fsr0l
 10093  002480  CFF7 FFEA          	movff	tblptrh,fsr0h
 10094  002484  50EF               	movf	indf0,w,c
 10095  002486                     u7370:
 10096  002486  0A0A               	xorlw	10
 10097  002488  A4D8               	btfss	status,2,c
 10098  00248A  D008               	goto	l552
 10099                           
 10100                           ;helpers.c: 29: newlineCharIndex = i;
 10101  00248C  C093  F091         	movff	printStringLCD@i,printStringLCD@newlineCharIndex
 10102  002490  C094  F092         	movff	printStringLCD@i+1,printStringLCD@newlineCharIndex+1
 10103                           
 10104                           ;helpers.c: 30: newlineIndex = newlineCharIndex;
 10105  002494  C091  F08F         	movff	printStringLCD@newlineCharIndex,printStringLCD@newlineIndex
 10106  002498  C092  F090         	movff	printStringLCD@newlineCharIndex+1,printStringLCD@newlineIndex+1
 10107  00249C                     l552:
 10108                           
 10109                           ;helpers.c: 31: }
 10110                           ;helpers.c: 34: if (i == 16 && string[i] != 32 && newlineCharIndex < 0) {
 10111  00249C  0E10               	movlw	16
 10112  00249E  0100               	movlb	0	; () banked
 10113  0024A0  1993               	xorwf	printStringLCD@i& (0+255),w,b
 10114  0024A2  1194               	iorwf	(printStringLCD@i+1)& (0+255),w,b
 10115  0024A4  A4D8               	btfss	status,2,c
 10116  0024A6  D021               	goto	l553
 10117                           
 10118                           ; BSR set to: 0
 10119  0024A8  5193               	movf	printStringLCD@i& (0+255),w,b
 10120  0024AA  2586               	addwf	printStringLCD@string& (0+255),w,b
 10121  0024AC  6F88               	movwf	??_printStringLCD& (0+255),b
 10122  0024AE  5194               	movf	(printStringLCD@i+1)& (0+255),w,b
 10123  0024B0  2187               	addwfc	(printStringLCD@string+1)& (0+255),w,b
 10124  0024B2  6F89               	movwf	(??_printStringLCD+1)& (0+255),b
 10125  0024B4  C088  FFF6         	movff	??_printStringLCD,tblptrl
 10126  0024B8  C089  FFF7         	movff	??_printStringLCD+1,tblptrh
 10127  0024BC  0E00               	movlw	low (__mediumconst shr (0+16))
 10128  0024BE  6EF8               	movwf	tblptru,c
 10129  0024C0  0E0F               	movlw	(high __ramtop+-1)
 10130  0024C2  64F7               	cpfsgt	tblptrh,c
 10131  0024C4  D003               	bra	u7407
 10132  0024C6  0008               	tblrd		*
 10133  0024C8  50F5               	movf	tablat,w,c
 10134  0024CA  D005               	bra	u7400
 10135  0024CC                     u7407:
 10136  0024CC  CFF6 FFE9          	movff	tblptrl,fsr0l
 10137  0024D0  CFF7 FFEA          	movff	tblptrh,fsr0h
 10138  0024D4  50EF               	movf	indf0,w,c
 10139  0024D6                     u7400:
 10140  0024D6  0A20               	xorlw	32
 10141  0024D8  B4D8               	btfsc	status,2,c
 10142  0024DA  D007               	goto	l553
 10143  0024DC  0100               	movlb	0	; () banked
 10144  0024DE  AF92               	btfss	(printStringLCD@newlineCharIndex+1)& (0+255),7,b
 10145  0024E0  D004               	goto	l553
 10146                           
 10147                           ; BSR set to: 0
 10148                           ;helpers.c: 35: newlineIndex = spaceIndex;
 10149  0024E2  C08D  F08F         	movff	printStringLCD@spaceIndex,printStringLCD@newlineIndex
 10150  0024E6  C08E  F090         	movff	printStringLCD@spaceIndex+1,printStringLCD@newlineIndex+1
 10151  0024EA                     l553:
 10152                           
 10153                           ; BSR set to: 0
 10154  0024EA  0100               	movlb	0	; () banked
 10155  0024EC  4B93               	infsnz	printStringLCD@i& (0+255),f,b
 10156  0024EE  2B94               	incf	(printStringLCD@i+1)& (0+255),f,b
 10157                           
 10158                           ; BSR set to: 0
 10159  0024F0  BF94               	btfsc	(printStringLCD@i+1)& (0+255),7,b
 10160  0024F2  D778               	goto	l548
 10161  0024F4  5194               	movf	(printStringLCD@i+1)& (0+255),w,b
 10162  0024F6  E101               	bnz	l5980
 10163  0024F8  D76F               	goto	L12
 10164  0024FA                     u7430:
 10165  0024FA                     l5980:
 10166                           
 10167                           ;helpers.c: 36: }
 10168                           ;helpers.c: 37: }
 10169                           ;helpers.c: 40: for (i = 0; i < 32; i++) {
 10170  0024FA  0E00               	movlw	0
 10171  0024FC  0100               	movlb	0	; () banked
 10172  0024FE  6F94               	movwf	(printStringLCD@i+1)& (0+255),b
 10173  002500  0E00               	movlw	0
 10174  002502  6F93               	movwf	printStringLCD@i& (0+255),b
 10175                           
 10176                           ; BSR set to: 0
 10177  002504  BF94               	btfsc	(printStringLCD@i+1)& (0+255),7,b
 10178  002506  D008               	goto	l554
 10179  002508  5194               	movf	(printStringLCD@i+1)& (0+255),w,b
 10180  00250A  E105               	bnz	u7440
 10181  00250C  0E20               	movlw	32
 10182  00250E  5D93               	subwf	printStringLCD@i& (0+255),w,b
 10183  002510  B0D8               	btfsc	status,0,c
 10184  002512  0012               	return	
 10185  002514  D001               	goto	l554
 10186  002516                     u7440:
 10187                           
 10188                           ; BSR set to: 0
 10189  002516  0012               	return	
 10190  002518                     l554:
 10191                           
 10192                           ; BSR set to: 0
 10193                           ;helpers.c: 41: if (string[i] == 0) break;
 10194                           
 10195                           ; BSR set to: 0
 10196  002518  5193               	movf	printStringLCD@i& (0+255),w,b
 10197  00251A  2586               	addwf	printStringLCD@string& (0+255),w,b
 10198  00251C  6F88               	movwf	??_printStringLCD& (0+255),b
 10199  00251E  5194               	movf	(printStringLCD@i+1)& (0+255),w,b
 10200  002520  2187               	addwfc	(printStringLCD@string+1)& (0+255),w,b
 10201  002522  6F89               	movwf	(??_printStringLCD+1)& (0+255),b
 10202  002524  C088  FFF6         	movff	??_printStringLCD,tblptrl
 10203  002528  C089  FFF7         	movff	??_printStringLCD+1,tblptrh
 10204  00252C  0E00               	movlw	low (__mediumconst shr (0+16))
 10205  00252E  6EF8               	movwf	tblptru,c
 10206  002530  0E0F               	movlw	(high __ramtop+-1)
 10207  002532  64F7               	cpfsgt	tblptrh,c
 10208  002534  D003               	bra	u7457
 10209  002536  0008               	tblrd		*
 10210  002538  50F5               	movf	tablat,w,c
 10211  00253A  D005               	bra	u7450
 10212  00253C                     u7457:
 10213  00253C  CFF6 FFE9          	movff	tblptrl,fsr0l
 10214  002540  CFF7 FFEA          	movff	tblptrh,fsr0h
 10215  002544  50EF               	movf	indf0,w,c
 10216  002546                     u7450:
 10217  002546  0900               	iorlw	0
 10218  002548  B4D8               	btfsc	status,2,c
 10219  00254A  0012               	return	
 10220                           
 10221                           ;helpers.c: 52: if (i == newlineIndex && j < LCD_SIZE_VERT) {
 10222  00254C  0100               	movlb	0	; () banked
 10223  00254E  518F               	movf	printStringLCD@newlineIndex& (0+255),w,b
 10224  002550  1993               	xorwf	printStringLCD@i& (0+255),w,b
 10225  002552  E153               	bnz	l6002
 10226  002554  5190               	movf	(printStringLCD@newlineIndex+1)& (0+255),w,b
 10227  002556  1994               	xorwf	(printStringLCD@i+1)& (0+255),w,b
 10228  002558  A4D8               	btfss	status,2,c
 10229  00255A  D04F               	goto	l558
 10230                           
 10231                           ; BSR set to: 0
 10232  00255C  0EA6               	movlw	low _LCD_SIZE_VERT
 10233  00255E  6EF6               	movwf	tblptrl,c
 10234  002560                     	if	1	;There is more than 1 active tblptr byte
 10235  002560  0EFB               	movlw	high _LCD_SIZE_VERT
 10236  002562  6EF7               	movwf	tblptrh,c
 10237  002564                     	endif
 10238  002564                     	if	1	;There are 3 active tblptr bytes
 10239  002564  0E00               	movlw	low (_LCD_SIZE_VERT shr (0+16))
 10240  002566  6EF8               	movwf	tblptru,c
 10241  002568                     	endif
 10242  002568  0008               	tblrd		*
 10243  00256A  50F5               	movf	tablat,w,c
 10244  00256C  6F88               	movwf	??_printStringLCD& (0+255),b
 10245  00256E  6B89               	clrf	(??_printStringLCD+1)& (0+255),b
 10246  002570  5188               	movf	??_printStringLCD& (0+255),w,b
 10247  002572  5D8B               	subwf	printStringLCD@j& (0+255),w,b
 10248  002574  518C               	movf	(printStringLCD@j+1)& (0+255),w,b
 10249  002576  0A80               	xorlw	128
 10250  002578  6F8A               	movwf	(??_printStringLCD+2)& (0+255),b
 10251  00257A  5189               	movf	(??_printStringLCD+1)& (0+255),w,b
 10252  00257C  0A80               	xorlw	128
 10253  00257E  598A               	subwfb	(??_printStringLCD+2)& (0+255),w,b
 10254  002580  B0D8               	btfsc	status,0,c
 10255  002582  D03B               	goto	l558
 10256                           
 10257                           ; BSR set to: 0
 10258                           ;helpers.c: 53: j++;
 10259  002584  4B8B               	infsnz	printStringLCD@j& (0+255),f,b
 10260  002586  2B8C               	incf	(printStringLCD@j+1)& (0+255),f,b
 10261                           
 10262                           ; BSR set to: 0
 10263                           ;helpers.c: 54: lcdInst(0xC0);;
 10264  002588  0EC0               	movlw	192
 10265  00258A  ECB1  F01F         	call	_lcdInst
 10266                           
 10267                           ;helpers.c: 55: if (string[i] == 32 || string[i] == 10) continue;
 10268  00258E  0100               	movlb	0	; () banked
 10269  002590  5193               	movf	printStringLCD@i& (0+255),w,b
 10270  002592  2586               	addwf	printStringLCD@string& (0+255),w,b
 10271  002594  6F88               	movwf	??_printStringLCD& (0+255),b
 10272  002596  5194               	movf	(printStringLCD@i+1)& (0+255),w,b
 10273  002598  2187               	addwfc	(printStringLCD@string+1)& (0+255),w,b
 10274  00259A  6F89               	movwf	(??_printStringLCD+1)& (0+255),b
 10275  00259C  C088  FFF6         	movff	??_printStringLCD,tblptrl
 10276  0025A0  C089  FFF7         	movff	??_printStringLCD+1,tblptrh
 10277  0025A4  0E00               	movlw	low (__mediumconst shr (0+16))
 10278  0025A6  6EF8               	movwf	tblptru,c
 10279  0025A8  0E0F               	movlw	(high __ramtop+-1)
 10280  0025AA  64F7               	cpfsgt	tblptrh,c
 10281  0025AC  D003               	bra	u7497
 10282  0025AE  0008               	tblrd		*
 10283  0025B0  50F5               	movf	tablat,w,c
 10284  0025B2  D005               	bra	u7490
 10285  0025B4                     u7497:
 10286  0025B4  CFF6 FFE9          	movff	tblptrl,fsr0l
 10287  0025B8  CFF7 FFEA          	movff	tblptrh,fsr0h
 10288  0025BC  50EF               	movf	indf0,w,c
 10289  0025BE                     u7490:
 10290  0025BE  0A20               	xorlw	32
 10291  0025C0  B4D8               	btfsc	status,2,c
 10292  0025C2  D035               	goto	l561
 10293  0025C4  0100               	movlb	0	; () banked
 10294  0025C6  5193               	movf	printStringLCD@i& (0+255),w,b
 10295  0025C8  2586               	addwf	printStringLCD@string& (0+255),w,b
 10296  0025CA  6F88               	movwf	??_printStringLCD& (0+255),b
 10297  0025CC  5194               	movf	(printStringLCD@i+1)& (0+255),w,b
 10298  0025CE  2187               	addwfc	(printStringLCD@string+1)& (0+255),w,b
 10299  0025D0  6F89               	movwf	(??_printStringLCD+1)& (0+255),b
 10300  0025D2  C088  FFF6         	movff	??_printStringLCD,tblptrl
 10301  0025D6  C089  FFF7         	movff	??_printStringLCD+1,tblptrh
 10302  0025DA  0E00               	movlw	low (__mediumconst shr (0+16))
 10303  0025DC  6EF8               	movwf	tblptru,c
 10304  0025DE  0E0F               	movlw	(high __ramtop+-1)
 10305  0025E0  64F7               	cpfsgt	tblptrh,c
 10306  0025E2  D003               	bra	u7517
 10307  0025E4  0008               	tblrd		*
 10308  0025E6  50F5               	movf	tablat,w,c
 10309  0025E8  D005               	bra	u7510
 10310  0025EA                     u7517:
 10311  0025EA  CFF6 FFE9          	movff	tblptrl,fsr0l
 10312  0025EE  CFF7 FFEA          	movff	tblptrh,fsr0h
 10313  0025F2  50EF               	movf	indf0,w,c
 10314  0025F4                     u7510:
 10315  0025F4  0A0A               	xorlw	10
 10316  0025F6  B4D8               	btfsc	status,2,c
 10317  0025F8  D01A               	goto	l561
 10318  0025FA                     l558:
 10319  0025FA                     l6002:
 10320                           
 10321                           ;helpers.c: 56: }
 10322                           ;helpers.c: 58: putch(string[i]);
 10323  0025FA  0100               	movlb	0	; () banked
 10324  0025FC  5193               	movf	printStringLCD@i& (0+255),w,b
 10325  0025FE  2586               	addwf	printStringLCD@string& (0+255),w,b
 10326  002600  6F88               	movwf	??_printStringLCD& (0+255),b
 10327  002602  5194               	movf	(printStringLCD@i+1)& (0+255),w,b
 10328  002604  2187               	addwfc	(printStringLCD@string+1)& (0+255),w,b
 10329  002606  6F89               	movwf	(??_printStringLCD+1)& (0+255),b
 10330  002608  C088  FFF6         	movff	??_printStringLCD,tblptrl
 10331  00260C  C089  FFF7         	movff	??_printStringLCD+1,tblptrh
 10332  002610  0E00               	movlw	low (__mediumconst shr (0+16))
 10333  002612  6EF8               	movwf	tblptru,c
 10334  002614  0E0F               	movlw	(high __ramtop+-1)
 10335  002616  64F7               	cpfsgt	tblptrh,c
 10336  002618  D003               	bra	u7537
 10337  00261A  0008               	tblrd		*
 10338  00261C  50F5               	movf	tablat,w,c
 10339  00261E  D005               	bra	u7530
 10340  002620                     u7537:
 10341  002620  CFF6 FFE9          	movff	tblptrl,fsr0l
 10342  002624  CFF7 FFEA          	movff	tblptrh,fsr0h
 10343  002628  50EF               	movf	indf0,w,c
 10344  00262A                     u7530:
 10345  00262A  ECA5  F01F         	call	_putch
 10346  00262E                     l561:
 10347  00262E  0100               	movlb	0	; () banked
 10348  002630  4B93               	infsnz	printStringLCD@i& (0+255),f,b
 10349  002632  2B94               	incf	(printStringLCD@i+1)& (0+255),f,b
 10350                           
 10351                           ; BSR set to: 0
 10352  002634  BF94               	btfsc	(printStringLCD@i+1)& (0+255),7,b
 10353  002636  D770               	goto	l554
 10354  002638  5194               	movf	(printStringLCD@i+1)& (0+255),w,b
 10355  00263A  E101               	bnz	l562
 10356  00263C  D767               	goto	L13
 10357  00263E                     l562:
 10358  00263E  0012               	return		;funcret
 10359  002640                     __end_of_printStringLCD:
 10360                           	opt stack 0
 10361                           tosu	equ	0xFFF
 10362                           tosh	equ	0xFFE
 10363                           tosl	equ	0xFFD
 10364                           pclath	equ	0xFFA
 10365                           tblptru	equ	0xFF8
 10366                           tblptrh	equ	0xFF7
 10367                           tblptrl	equ	0xFF6
 10368                           tablat	equ	0xFF5
 10369                           prodh	equ	0xFF4
 10370                           prodl	equ	0xFF3
 10371                           intcon	equ	0xFF2
 10372                           indf0	equ	0xFEF
 10373                           postinc0	equ	0xFEE
 10374                           fsr0h	equ	0xFEA
 10375                           fsr0l	equ	0xFE9
 10376                           wreg	equ	0xFE8
 10377                           postdec1	equ	0xFE5
 10378                           plusw1	equ	0xFE3
 10379                           fsr1l	equ	0xFE1
 10380                           indf2	equ	0xFDF
 10381                           postinc2	equ	0xFDE
 10382                           postdec2	equ	0xFDD
 10383                           plusw2	equ	0xFDB
 10384                           fsr2h	equ	0xFDA
 10385                           fsr2l	equ	0xFD9
 10386                           status	equ	0xFD8
 10387                           
 10388 ;; *************** function _putch *****************
 10389 ;; Defined at:
 10390 ;;		line 25 in file "lcd.c"
 10391 ;; Parameters:    Size  Location     Type
 10392 ;;  data            1    wreg     unsigned char 
 10393 ;; Auto vars:     Size  Location     Type
 10394 ;;  data            1    2[BANK0 ] unsigned char 
 10395 ;; Return value:  Size  Location     Type
 10396 ;;                  1    wreg      void 
 10397 ;; Registers used:
 10398 ;;		wreg, status,2, status,0, cstack
 10399 ;; Tracked objects:
 10400 ;;		On entry : 0/0
 10401 ;;		On exit  : 0/0
 10402 ;;		Unchanged: 0/0
 10403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10405 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10407 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10408 ;;Total ram usage:        1 bytes
 10409 ;; Hardware stack levels used:    1
 10410 ;; Hardware stack levels required when called:    5
 10411 ;; This function calls:
 10412 ;;		_lcdNibble
 10413 ;; This function is called by:
 10414 ;;		_inputEntry
 10415 ;;		_mainMenu
 10416 ;;		_printStringLCD
 10417 ;;		_printf
 10418 ;;		__doprnt
 10419 ;; This function uses a non-reentrant model
 10420 ;;
 10421                           
 10422                           	psect	text21
 10423  003F4A                     __ptext21:
 10424                           	opt stack 0
 10425  003F4A                     _putch:
 10426                           	opt stack 21
 10427                           
 10428                           ;incstack = 0
 10429                           ;putch@data stored from wreg
 10430  003F4A  0100               	movlb	0	; () banked
 10431  003F4C  6F82               	movwf	putch@data& (0+255),b
 10432                           
 10433                           ;lcd.c: 33: LATDbits.LATD2 = 1;
 10434  003F4E  848C               	bsf	3980,2,c	;volatile
 10435                           
 10436                           ;lcd.c: 34: lcdNibble(data);
 10437  003F50  0100               	movlb	0	; () banked
 10438  003F52  5182               	movf	putch@data& (0+255),w,b
 10439  003F54  ECB4  F01C         	call	_lcdNibble
 10440                           
 10441                           ;lcd.c: 35: _delay((unsigned long)((100)*(40000000/4000000.0)));
 10442  003F58  0EC8               	movlw	200
 10443  003F5A                     u9907:
 10444  003F5A  D000               	nop2	
 10445  003F5C  2EE8               	decfsz	wreg,f,c
 10446  003F5E  D7FD               	bra	u9907
 10447  003F60  0012               	return		;funcret
 10448  003F62                     __end_of_putch:
 10449                           	opt stack 0
 10450                           tosu	equ	0xFFF
 10451                           tosh	equ	0xFFE
 10452                           tosl	equ	0xFFD
 10453                           pclath	equ	0xFFA
 10454                           tblptru	equ	0xFF8
 10455                           tblptrh	equ	0xFF7
 10456                           tblptrl	equ	0xFF6
 10457                           tablat	equ	0xFF5
 10458                           prodh	equ	0xFF4
 10459                           prodl	equ	0xFF3
 10460                           intcon	equ	0xFF2
 10461                           indf0	equ	0xFEF
 10462                           postinc0	equ	0xFEE
 10463                           fsr0h	equ	0xFEA
 10464                           fsr0l	equ	0xFE9
 10465                           wreg	equ	0xFE8
 10466                           postdec1	equ	0xFE5
 10467                           plusw1	equ	0xFE3
 10468                           fsr1l	equ	0xFE1
 10469                           indf2	equ	0xFDF
 10470                           postinc2	equ	0xFDE
 10471                           postdec2	equ	0xFDD
 10472                           plusw2	equ	0xFDB
 10473                           fsr2h	equ	0xFDA
 10474                           fsr2l	equ	0xFD9
 10475                           status	equ	0xFD8
 10476                           
 10477 ;; *************** function _pollKeypad *****************
 10478 ;; Defined at:
 10479 ;;		line 68 in file "helpers.c"
 10480 ;; Parameters:    Size  Location     Type
 10481 ;;		None
 10482 ;; Auto vars:     Size  Location     Type
 10483 ;;  keypress        1    0[BANK0 ] unsigned char 
 10484 ;; Return value:  Size  Location     Type
 10485 ;;                  1    wreg      unsigned char 
 10486 ;; Registers used:
 10487 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 10488 ;; Tracked objects:
 10489 ;;		On entry : 0/0
 10490 ;;		On exit  : 0/0
 10491 ;;		Unchanged: 0/0
 10492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10494 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10496 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10497 ;;Total ram usage:        1 bytes
 10498 ;; Hardware stack levels used:    1
 10499 ;; Hardware stack levels required when called:    4
 10500 ;; This function calls:
 10501 ;;		Nothing
 10502 ;; This function is called by:
 10503 ;;		_hibernate
 10504 ;;		_viewLogs
 10505 ;;		_inputEntry
 10506 ;;		_mainMenu
 10507 ;; This function uses a non-reentrant model
 10508 ;;
 10509                           
 10510                           	psect	text22
 10511  003DD0                     __ptext22:
 10512                           	opt stack 0
 10513  003DD0                     _pollKeypad:
 10514                           	opt stack 24
 10515                           
 10516                           ;helpers.c: 70: while (PORTBbits.RB1 == 0) {continue;}
 10517                           
 10518                           ;incstack = 0
 10519  003DD0  A281               	btfss	3969,1,c	;volatile
 10520  003DD2  D7FE               	goto	_pollKeypad
 10521                           
 10522                           ;helpers.c: 73: unsigned char keypress = (unsigned char)(PORTB & 0xF0) >> 4;
 10523  003DD4  3881               	swapf	3969,w,c	;volatile
 10524  003DD6  0B0F               	andlw	15
 10525  003DD8  0B0F               	andlw	15
 10526  003DDA  0100               	movlb	0	; () banked
 10527  003DDC  6F80               	movwf	pollKeypad@keypress& (0+255),b
 10528  003DDE                     
 10529                           ; BSR set to: 0
 10530  003DDE  B281               	btfsc	3969,1,c	;volatile
 10531  003DE0  D7FE               	goto	l572
 10532                           
 10533                           ;helpers.c: 78: __nop();
 10534  003DE2  F000               	nop	
 10535                           
 10536                           ;helpers.c: 80: return keypadChars[keypress];
 10537  003DE4  0100               	movlb	0	; () banked
 10538  003DE6  5180               	movf	pollKeypad@keypress& (0+255),w,b
 10539  003DE8  0D01               	mullw	1
 10540  003DEA  0E73               	movlw	low _keypadChars
 10541  003DEC  24F3               	addwf	prodl,w,c
 10542  003DEE  6EF6               	movwf	tblptrl,c
 10543  003DF0  0EFB               	movlw	high _keypadChars
 10544  003DF2  20F4               	addwfc	prodh,w,c
 10545  003DF4  6EF7               	movwf	tblptrh,c
 10546  003DF6                     	if	1	;There are 3 active tblptr bytes
 10547  003DF6  6AF8               	clrf	tblptru,c
 10548  003DF8  0E00               	movlw	low (__mediumconst shr (0+16))
 10549  003DFA  22F8               	addwfc	tblptru,f,c
 10550  003DFC                     	endif
 10551  003DFC  0008               	tblrd		*
 10552  003DFE  50F5               	movf	tablat,w,c
 10553  003E00  0012               	return	
 10554  003E02                     __end_of_pollKeypad:
 10555                           	opt stack 0
 10556                           tosu	equ	0xFFF
 10557                           tosh	equ	0xFFE
 10558                           tosl	equ	0xFFD
 10559                           pclath	equ	0xFFA
 10560                           tblptru	equ	0xFF8
 10561                           tblptrh	equ	0xFF7
 10562                           tblptrl	equ	0xFF6
 10563                           tablat	equ	0xFF5
 10564                           prodh	equ	0xFF4
 10565                           prodl	equ	0xFF3
 10566                           intcon	equ	0xFF2
 10567                           indf0	equ	0xFEF
 10568                           postinc0	equ	0xFEE
 10569                           fsr0h	equ	0xFEA
 10570                           fsr0l	equ	0xFE9
 10571                           wreg	equ	0xFE8
 10572                           postdec1	equ	0xFE5
 10573                           plusw1	equ	0xFE3
 10574                           fsr1l	equ	0xFE1
 10575                           indf2	equ	0xFDF
 10576                           postinc2	equ	0xFDE
 10577                           postdec2	equ	0xFDD
 10578                           plusw2	equ	0xFDB
 10579                           fsr2h	equ	0xFDA
 10580                           fsr2l	equ	0xFD9
 10581                           status	equ	0xFD8
 10582                           
 10583 ;; *************** function _clearing *****************
 10584 ;; Defined at:
 10585 ;;		line 163 in file "main.c"
 10586 ;; Parameters:    Size  Location     Type
 10587 ;;		None
 10588 ;; Auto vars:     Size  Location     Type
 10589 ;;  startTime       4    0        long 
 10590 ;;  currTime        3   39[BANK0 ] long 
 10591 ;;  debounceTime    3   36[BANK0 ] long 
 10592 ;;  spinTime        3   33[BANK0 ] long 
 10593 ;;  instr           2   31[BANK0 ] unsigned char [2]
 10594 ;;  i               2    0        int 
 10595 ;; Return value:  Size  Location     Type
 10596 ;;                  1    wreg      void 
 10597 ;; Registers used:
 10598 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10599 ;; Tracked objects:
 10600 ;;		On entry : 0/0
 10601 ;;		On exit  : 0/0
 10602 ;;		Unchanged: 0/0
 10603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10605 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10606 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10607 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10608 ;;Total ram usage:       13 bytes
 10609 ;; Hardware stack levels used:    1
 10610 ;; Hardware stack levels required when called:    7
 10611 ;; This function calls:
 10612 ;;		_I2C_Send
 10613 ;;		___ftadd
 10614 ;;		___ftge
 10615 ;;		_motorControl
 10616 ;;		_tic
 10617 ;;		_tock
 10618 ;; This function is called by:
 10619 ;;		_mainMenu
 10620 ;; This function uses a non-reentrant model
 10621 ;;
 10622                           
 10623                           	psect	text23
 10624  000E78                     __ptext23:
 10625                           	opt stack 0
 10626  000E78                     _clearing:
 10627                           	opt stack 22
 10628                           
 10629                           ;main.c: 164: currentMode = WAITING;
 10630                           
 10631                           ; BSR set to: 0
 10632                           ;incstack = 0
 10633  000E78  0E00               	movlw	0
 10634  000E7A  6E4D               	movwf	_currentMode+1,c
 10635  000E7C  0E04               	movlw	4
 10636  000E7E  6E4C               	movwf	_currentMode,c
 10637                           
 10638                           ;main.c: 169: char instr[] = {3, 0};
 10639  000E80  C0E7  F09F         	movff	clearing@F3241,clearing@instr
 10640  000E84  C0E8  F0A0         	movff	clearing@F3241+1,clearing@instr+1
 10641                           
 10642                           ;main.c: 170: I2C_Send(nanoAddr, instr);
 10643  000E88  0E9F               	movlw	low clearing@instr
 10644  000E8A  0100               	movlb	0	; () banked
 10645  000E8C  6F83               	movwf	I2C_Send@data& (0+255),b
 10646  000E8E  0E00               	movlw	high clearing@instr
 10647  000E90  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
 10648  000E92  0EA3               	movlw	low _nanoAddr
 10649  000E94  6EF6               	movwf	tblptrl,c
 10650  000E96                     	if	1	;There is more than 1 active tblptr byte
 10651  000E96  0EFB               	movlw	high _nanoAddr
 10652  000E98  6EF7               	movwf	tblptrh,c
 10653  000E9A                     	endif
 10654  000E9A                     	if	1	;There are 3 active tblptr bytes
 10655  000E9A  0E00               	movlw	low (_nanoAddr shr (0+16))
 10656  000E9C  6EF8               	movwf	tblptru,c
 10657  000E9E                     	endif
 10658  000E9E  0008               	tblrd		*
 10659  000EA0  50F5               	movf	tablat,w,c
 10660  000EA2  ECD9  F01B         	call	_I2C_Send
 10661  000EA6  BA80               	btfsc	3968,5,c	;volatile
 10662  000EA8  D7FE               	goto	l147
 10663                           
 10664                           ;main.c: 173: int i;
 10665                           ;main.c: 174: double spinTime=15.0;
 10666  000EAA  0E00               	movlw	0
 10667  000EAC  0100               	movlb	0	; () banked
 10668  000EAE  6FA1               	movwf	clearing@spinTime& (0+255),b
 10669  000EB0  0E70               	movlw	112
 10670  000EB2  6FA2               	movwf	(clearing@spinTime+1)& (0+255),b
 10671  000EB4  0E41               	movlw	65
 10672  000EB6  6FA3               	movwf	(clearing@spinTime+2)& (0+255),b
 10673                           
 10674                           ;main.c: 175: long startTime;
 10675                           ;main.c: 176: double currTime, debounceTime=0;
 10676  000EB8  0E00               	movlw	0
 10677  000EBA  6FA4               	movwf	clearing@debounceTime& (0+255),b
 10678  000EBC  0E00               	movlw	0
 10679  000EBE  6FA5               	movwf	(clearing@debounceTime+1)& (0+255),b
 10680  000EC0  0E00               	movlw	0
 10681  000EC2  6FA6               	movwf	(clearing@debounceTime+2)& (0+255),b
 10682                           
 10683                           ;main.c: 178: extras.b = 0;
 10684  000EC4  0E00               	movlw	0
 10685  000EC6  6FDE               	movwf	(_extras+1)& (0+255),b
 10686  000EC8  0E00               	movlw	0
 10687  000ECA  6FDD               	movwf	_extras& (0+255),b
 10688                           
 10689                           ;main.c: 179: extras.n = 0;
 10690  000ECC  0E00               	movlw	0
 10691  000ECE  6FE0               	movwf	(_extras+3)& (0+255),b
 10692  000ED0  0E00               	movlw	0
 10693  000ED2  6FDF               	movwf	(_extras+2)& (0+255),b
 10694                           
 10695                           ;main.c: 180: extras.s = 0;
 10696  000ED4  0E00               	movlw	0
 10697  000ED6  6FE2               	movwf	(_extras+5)& (0+255),b
 10698  000ED8  0E00               	movlw	0
 10699  000EDA  6FE1               	movwf	(_extras+4)& (0+255),b
 10700                           
 10701                           ;main.c: 181: extras.w = 0;
 10702  000EDC  0E00               	movlw	0
 10703  000EDE  6FE4               	movwf	(_extras+7)& (0+255),b
 10704  000EE0  0E00               	movlw	0
 10705  000EE2  6FE3               	movwf	(_extras+6)& (0+255),b
 10706                           
 10707                           ; BSR set to: 0
 10708                           ;main.c: 183: tic();
 10709  000EE4  ECF5  F01F         	call	_tic	;wreg free
 10710                           
 10711                           ;main.c: 185: currentMode = CLEARING;
 10712  000EE8  0E00               	movlw	0
 10713  000EEA  6E4D               	movwf	_currentMode+1,c
 10714  000EEC  0E03               	movlw	3
 10715  000EEE  6E4C               	movwf	_currentMode,c
 10716                           
 10717                           ;main.c: 186: motorControl(BOLT, FORWARD);
 10718  000EF0  0E00               	movlw	0
 10719  000EF2  0100               	movlb	0	; () banked
 10720  000EF4  6F80               	movwf	motorControl@dir& (0+255),b
 10721  000EF6  0E00               	movlw	0
 10722  000EF8  ECB1  F019         	call	_motorControl
 10723                           
 10724                           ;main.c: 187: while (extras.b + dispensed.b < 20) {
 10725  000EFC  D051               	goto	l152
 10726  000EFE                     
 10727                           ;main.c: 188: currTime = tock();
 10728  000EFE  ECEE  F01F         	call	_tock	;wreg free
 10729  000F02  C080  F0A7         	movff	?_tock,clearing@currTime
 10730  000F06  C081  F0A8         	movff	?_tock+1,clearing@currTime+1
 10731  000F0A  C082  F0A9         	movff	?_tock+2,clearing@currTime+2
 10732                           
 10733                           ;main.c: 189: if (PORTAbits.RA3 == 0 && currTime > debounceTime + 1) {
 10734  000F0E  B680               	btfsc	3968,3,c	;volatile
 10735  000F10  D036               	goto	l151
 10736  000F12  0E00               	movlw	0
 10737  000F14  0100               	movlb	0	; () banked
 10738  000F16  6F8B               	movwf	___ftadd@f2& (0+255),b
 10739  000F18  0E80               	movlw	128
 10740  000F1A  6F8C               	movwf	(___ftadd@f2+1)& (0+255),b
 10741  000F1C  0E3F               	movlw	63
 10742  000F1E  6F8D               	movwf	(___ftadd@f2+2)& (0+255),b
 10743  000F20  C0A4  F088         	movff	clearing@debounceTime,___ftadd@f1
 10744  000F24  C0A5  F089         	movff	clearing@debounceTime+1,___ftadd@f1+1
 10745  000F28  C0A6  F08A         	movff	clearing@debounceTime+2,___ftadd@f1+2
 10746  000F2C  EC9E  F016         	call	___ftadd	;wreg free
 10747  000F30  C088  F094         	movff	?___ftadd,___ftge@ff1
 10748  000F34  C089  F095         	movff	?___ftadd+1,___ftge@ff1+1
 10749  000F38  C08A  F096         	movff	?___ftadd+2,___ftge@ff1+2
 10750  000F3C  C0A7  F097         	movff	clearing@currTime,___ftge@ff2
 10751  000F40  C0A8  F098         	movff	clearing@currTime+1,___ftge@ff2+1
 10752  000F44  C0A9  F099         	movff	clearing@currTime+2,___ftge@ff2+2
 10753  000F48  EC29  F01C         	call	___ftge	;wreg free
 10754  000F4C  0100               	movlb	0	; () banked
 10755  000F4E  B0D8               	btfsc	status,0,c
 10756  000F50  D016               	goto	l151
 10757                           
 10758                           ; BSR set to: 0
 10759                           ;main.c: 190: debounceTime = currTime;
 10760  000F52  C0A7  F0A4         	movff	clearing@currTime,clearing@debounceTime
 10761  000F56  C0A8  F0A5         	movff	clearing@currTime+1,clearing@debounceTime+1
 10762  000F5A  C0A9  F0A6         	movff	clearing@currTime+2,clearing@debounceTime+2
 10763                           
 10764                           ; BSR set to: 0
 10765                           ;main.c: 191: extras.b++;
 10766  000F5E  4BDD               	infsnz	_extras& (0+255),f,b
 10767  000F60  2BDE               	incf	(_extras+1)& (0+255),f,b
 10768                           
 10769                           ; BSR set to: 0
 10770                           ;main.c: 192: I2C_Send(nanoAddr, "\1Bolt counted\0");
 10771  000F62  0E89               	movlw	low STR_11
 10772  000F64  6F83               	movwf	I2C_Send@data& (0+255),b
 10773  000F66  0EFF               	movlw	high STR_11
 10774  000F68  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
 10775  000F6A  0EA3               	movlw	low _nanoAddr
 10776  000F6C  6EF6               	movwf	tblptrl,c
 10777  000F6E                     	if	1	;There is more than 1 active tblptr byte
 10778  000F6E  0EFB               	movlw	high _nanoAddr
 10779  000F70  6EF7               	movwf	tblptrh,c
 10780  000F72                     	endif
 10781  000F72                     	if	1	;There are 3 active tblptr bytes
 10782  000F72  0E00               	movlw	low (_nanoAddr shr (0+16))
 10783  000F74  6EF8               	movwf	tblptru,c
 10784  000F76                     	endif
 10785  000F76  0008               	tblrd		*
 10786  000F78  50F5               	movf	tablat,w,c
 10787  000F7A  ECD9  F01B         	call	_I2C_Send
 10788  000F7E                     l151:
 10789                           
 10790                           ;main.c: 193: }
 10791                           ;main.c: 195: if (currTime >= spinTime) break;
 10792  000F7E  C0A7  F094         	movff	clearing@currTime,___ftge@ff1
 10793  000F82  C0A8  F095         	movff	clearing@currTime+1,___ftge@ff1+1
 10794  000F86  C0A9  F096         	movff	clearing@currTime+2,___ftge@ff1+2
 10795  000F8A  C0A1  F097         	movff	clearing@spinTime,___ftge@ff2
 10796  000F8E  C0A2  F098         	movff	clearing@spinTime+1,___ftge@ff2+1
 10797  000F92  C0A3  F099         	movff	clearing@spinTime+2,___ftge@ff2+2
 10798  000F96  EC29  F01C         	call	___ftge	;wreg free
 10799  000F9A  0100               	movlb	0	; () banked
 10800  000F9C  B0D8               	btfsc	status,0,c
 10801  000F9E  D00F               	goto	u8640
 10802  000FA0                     l152:
 10803                           
 10804                           ; BSR set to: 0
 10805                           
 10806                           ; BSR set to: 0
 10807  000FA0  0100               	movlb	0	; () banked
 10808  000FA2  51D5               	movf	_dispensed& (0+255),w,b
 10809  000FA4  25DD               	addwf	_extras& (0+255),w,b
 10810  000FA6  6F9D               	movwf	??_clearing& (0+255),b
 10811  000FA8  51D6               	movf	(_dispensed+1)& (0+255),w,b
 10812  000FAA  21DE               	addwfc	(_extras+1)& (0+255),w,b
 10813  000FAC  6F9E               	movwf	(??_clearing+1)& (0+255),b
 10814  000FAE  BF9E               	btfsc	(??_clearing+1)& (0+255),7,b
 10815  000FB0  D7A6               	goto	l150
 10816  000FB2  519E               	movf	(??_clearing+1)& (0+255),w,b
 10817  000FB4  E104               	bnz	l6622
 10818  000FB6  0E14               	movlw	20
 10819  000FB8  5D9D               	subwf	??_clearing& (0+255),w,b
 10820  000FBA  A0D8               	btfss	status,0,c
 10821  000FBC  D7A0               	goto	l150
 10822  000FBE                     u8640:
 10823  000FBE                     l6622:
 10824                           
 10825                           ; BSR set to: 0
 10826                           ;main.c: 196: }
 10827                           ;main.c: 197: motorControl(BOLT, STOPMOTOR);
 10828  000FBE  0E02               	movlw	2
 10829  000FC0  6F80               	movwf	motorControl@dir& (0+255),b
 10830  000FC2  0E00               	movlw	0
 10831  000FC4  ECB1  F019         	call	_motorControl
 10832                           
 10833                           ;main.c: 198: currentMode = WAITING;
 10834  000FC8  0E00               	movlw	0
 10835  000FCA  6E4D               	movwf	_currentMode+1,c
 10836  000FCC  0E04               	movlw	4
 10837  000FCE  6E4C               	movwf	_currentMode,c
 10838                           
 10839                           ;main.c: 200: instr[0] = 4;
 10840  000FD0  0E04               	movlw	4
 10841  000FD2  0100               	movlb	0	; () banked
 10842  000FD4  6F9F               	movwf	clearing@instr& (0+255),b
 10843                           
 10844                           ; BSR set to: 0
 10845                           ;main.c: 201: I2C_Send(nanoAddr, instr);
 10846  000FD6  0E9F               	movlw	low clearing@instr
 10847  000FD8  6F83               	movwf	I2C_Send@data& (0+255),b
 10848  000FDA  0E00               	movlw	high clearing@instr
 10849  000FDC  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
 10850  000FDE  0EA3               	movlw	low _nanoAddr
 10851  000FE0  6EF6               	movwf	tblptrl,c
 10852  000FE2                     	if	1	;There is more than 1 active tblptr byte
 10853  000FE2  0EFB               	movlw	high _nanoAddr
 10854  000FE4  6EF7               	movwf	tblptrh,c
 10855  000FE6                     	endif
 10856  000FE6                     	if	1	;There are 3 active tblptr bytes
 10857  000FE6  0E00               	movlw	low (_nanoAddr shr (0+16))
 10858  000FE8  6EF8               	movwf	tblptru,c
 10859  000FEA                     	endif
 10860  000FEA  0008               	tblrd		*
 10861  000FEC  50F5               	movf	tablat,w,c
 10862  000FEE  ECD9  F01B         	call	_I2C_Send
 10863  000FF2  BA80               	btfsc	3968,5,c	;volatile
 10864  000FF4  D7FE               	goto	l155
 10865                           
 10866                           ;main.c: 204: tic();
 10867  000FF6  ECF5  F01F         	call	_tic	;wreg free
 10868                           
 10869                           ;main.c: 205: debounceTime = 0;
 10870  000FFA  0E00               	movlw	0
 10871  000FFC  0100               	movlb	0	; () banked
 10872  000FFE  6FA4               	movwf	clearing@debounceTime& (0+255),b
 10873  001000  0E00               	movlw	0
 10874  001002  6FA5               	movwf	(clearing@debounceTime+1)& (0+255),b
 10875  001004  0E00               	movlw	0
 10876  001006  6FA6               	movwf	(clearing@debounceTime+2)& (0+255),b
 10877                           
 10878                           ; BSR set to: 0
 10879                           ;main.c: 206: currentMode = CLEARING;
 10880  001008  0E00               	movlw	0
 10881  00100A  6E4D               	movwf	_currentMode+1,c
 10882  00100C  0E03               	movlw	3
 10883  00100E  6E4C               	movwf	_currentMode,c
 10884                           
 10885                           ; BSR set to: 0
 10886                           ;main.c: 207: motorControl(NUT, FORWARD);
 10887  001010  0E00               	movlw	0
 10888  001012  6F80               	movwf	motorControl@dir& (0+255),b
 10889  001014  0E01               	movlw	1
 10890  001016  ECB1  F019         	call	_motorControl
 10891                           
 10892                           ;main.c: 208: while (extras.n + dispensed.n < 25) {
 10893  00101A  D051               	goto	l160
 10894  00101C                     
 10895                           ;main.c: 209: currTime = tock();
 10896  00101C  ECEE  F01F         	call	_tock	;wreg free
 10897  001020  C080  F0A7         	movff	?_tock,clearing@currTime
 10898  001024  C081  F0A8         	movff	?_tock+1,clearing@currTime+1
 10899  001028  C082  F0A9         	movff	?_tock+2,clearing@currTime+2
 10900                           
 10901                           ;main.c: 210: if (PORTAbits.RA1 == 0 && currTime > debounceTime + 1) {
 10902  00102C  B280               	btfsc	3968,1,c	;volatile
 10903  00102E  D036               	goto	l159
 10904  001030  0E00               	movlw	0
 10905  001032  0100               	movlb	0	; () banked
 10906  001034  6F8B               	movwf	___ftadd@f2& (0+255),b
 10907  001036  0E80               	movlw	128
 10908  001038  6F8C               	movwf	(___ftadd@f2+1)& (0+255),b
 10909  00103A  0E3F               	movlw	63
 10910  00103C  6F8D               	movwf	(___ftadd@f2+2)& (0+255),b
 10911  00103E  C0A4  F088         	movff	clearing@debounceTime,___ftadd@f1
 10912  001042  C0A5  F089         	movff	clearing@debounceTime+1,___ftadd@f1+1
 10913  001046  C0A6  F08A         	movff	clearing@debounceTime+2,___ftadd@f1+2
 10914  00104A  EC9E  F016         	call	___ftadd	;wreg free
 10915  00104E  C088  F094         	movff	?___ftadd,___ftge@ff1
 10916  001052  C089  F095         	movff	?___ftadd+1,___ftge@ff1+1
 10917  001056  C08A  F096         	movff	?___ftadd+2,___ftge@ff1+2
 10918  00105A  C0A7  F097         	movff	clearing@currTime,___ftge@ff2
 10919  00105E  C0A8  F098         	movff	clearing@currTime+1,___ftge@ff2+1
 10920  001062  C0A9  F099         	movff	clearing@currTime+2,___ftge@ff2+2
 10921  001066  EC29  F01C         	call	___ftge	;wreg free
 10922  00106A  0100               	movlb	0	; () banked
 10923  00106C  B0D8               	btfsc	status,0,c
 10924  00106E  D016               	goto	l159
 10925                           
 10926                           ; BSR set to: 0
 10927                           ;main.c: 211: debounceTime = currTime;
 10928  001070  C0A7  F0A4         	movff	clearing@currTime,clearing@debounceTime
 10929  001074  C0A8  F0A5         	movff	clearing@currTime+1,clearing@debounceTime+1
 10930  001078  C0A9  F0A6         	movff	clearing@currTime+2,clearing@debounceTime+2
 10931                           
 10932                           ; BSR set to: 0
 10933                           ;main.c: 212: extras.n++;
 10934  00107C  4BDF               	infsnz	(_extras+2)& (0+255),f,b
 10935  00107E  2BE0               	incf	(_extras+3)& (0+255),f,b
 10936                           
 10937                           ; BSR set to: 0
 10938                           ;main.c: 213: I2C_Send(nanoAddr, "\1Nut counted\0");
 10939  001080  0ED1               	movlw	low STR_12
 10940  001082  6F83               	movwf	I2C_Send@data& (0+255),b
 10941  001084  0EFF               	movlw	high STR_12
 10942  001086  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
 10943  001088  0EA3               	movlw	low _nanoAddr
 10944  00108A  6EF6               	movwf	tblptrl,c
 10945  00108C                     	if	1	;There is more than 1 active tblptr byte
 10946  00108C  0EFB               	movlw	high _nanoAddr
 10947  00108E  6EF7               	movwf	tblptrh,c
 10948  001090                     	endif
 10949  001090                     	if	1	;There are 3 active tblptr bytes
 10950  001090  0E00               	movlw	low (_nanoAddr shr (0+16))
 10951  001092  6EF8               	movwf	tblptru,c
 10952  001094                     	endif
 10953  001094  0008               	tblrd		*
 10954  001096  50F5               	movf	tablat,w,c
 10955  001098  ECD9  F01B         	call	_I2C_Send
 10956  00109C                     l159:
 10957                           
 10958                           ;main.c: 214: }
 10959                           ;main.c: 216: if (currTime >= spinTime) break;
 10960  00109C  C0A7  F094         	movff	clearing@currTime,___ftge@ff1
 10961  0010A0  C0A8  F095         	movff	clearing@currTime+1,___ftge@ff1+1
 10962  0010A4  C0A9  F096         	movff	clearing@currTime+2,___ftge@ff1+2
 10963  0010A8  C0A1  F097         	movff	clearing@spinTime,___ftge@ff2
 10964  0010AC  C0A2  F098         	movff	clearing@spinTime+1,___ftge@ff2+1
 10965  0010B0  C0A3  F099         	movff	clearing@spinTime+2,___ftge@ff2+2
 10966  0010B4  EC29  F01C         	call	___ftge	;wreg free
 10967  0010B8  0100               	movlb	0	; () banked
 10968  0010BA  B0D8               	btfsc	status,0,c
 10969  0010BC  D00F               	goto	u8690
 10970  0010BE                     l160:
 10971                           
 10972                           ; BSR set to: 0
 10973                           
 10974                           ; BSR set to: 0
 10975  0010BE  0100               	movlb	0	; () banked
 10976  0010C0  51D7               	movf	(_dispensed+2)& (0+255),w,b
 10977  0010C2  25DF               	addwf	(_extras+2)& (0+255),w,b
 10978  0010C4  6F9D               	movwf	??_clearing& (0+255),b
 10979  0010C6  51D8               	movf	(_dispensed+3)& (0+255),w,b
 10980  0010C8  21E0               	addwfc	(_extras+3)& (0+255),w,b
 10981  0010CA  6F9E               	movwf	(??_clearing+1)& (0+255),b
 10982  0010CC  BF9E               	btfsc	(??_clearing+1)& (0+255),7,b
 10983  0010CE  D7A6               	goto	l158
 10984  0010D0  519E               	movf	(??_clearing+1)& (0+255),w,b
 10985  0010D2  E104               	bnz	l6656
 10986  0010D4  0E19               	movlw	25
 10987  0010D6  5D9D               	subwf	??_clearing& (0+255),w,b
 10988  0010D8  A0D8               	btfss	status,0,c
 10989  0010DA  D7A0               	goto	l158
 10990  0010DC                     u8690:
 10991  0010DC                     l6656:
 10992                           
 10993                           ; BSR set to: 0
 10994                           ;main.c: 217: }
 10995                           ;main.c: 219: motorControl(NUT, STOPMOTOR);
 10996  0010DC  0E02               	movlw	2
 10997  0010DE  6F80               	movwf	motorControl@dir& (0+255),b
 10998  0010E0  0E01               	movlw	1
 10999  0010E2  ECB1  F019         	call	_motorControl
 11000                           
 11001                           ;main.c: 220: currentMode = WAITING;
 11002  0010E6  0E00               	movlw	0
 11003  0010E8  6E4D               	movwf	_currentMode+1,c
 11004  0010EA  0E04               	movlw	4
 11005  0010EC  6E4C               	movwf	_currentMode,c
 11006                           
 11007                           ;main.c: 222: instr[0] = 5;
 11008  0010EE  0E05               	movlw	5
 11009  0010F0  0100               	movlb	0	; () banked
 11010  0010F2  6F9F               	movwf	clearing@instr& (0+255),b
 11011                           
 11012                           ; BSR set to: 0
 11013                           ;main.c: 223: I2C_Send(nanoAddr, instr);
 11014  0010F4  0E9F               	movlw	low clearing@instr
 11015  0010F6  6F83               	movwf	I2C_Send@data& (0+255),b
 11016  0010F8  0E00               	movlw	high clearing@instr
 11017  0010FA  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
 11018  0010FC  0EA3               	movlw	low _nanoAddr
 11019  0010FE  6EF6               	movwf	tblptrl,c
 11020  001100                     	if	1	;There is more than 1 active tblptr byte
 11021  001100  0EFB               	movlw	high _nanoAddr
 11022  001102  6EF7               	movwf	tblptrh,c
 11023  001104                     	endif
 11024  001104                     	if	1	;There are 3 active tblptr bytes
 11025  001104  0E00               	movlw	low (_nanoAddr shr (0+16))
 11026  001106  6EF8               	movwf	tblptru,c
 11027  001108                     	endif
 11028  001108  0008               	tblrd		*
 11029  00110A  50F5               	movf	tablat,w,c
 11030  00110C  ECD9  F01B         	call	_I2C_Send
 11031  001110  BA80               	btfsc	3968,5,c	;volatile
 11032  001112  D7FE               	goto	l163
 11033                           
 11034                           ;main.c: 226: tic();
 11035  001114  ECF5  F01F         	call	_tic	;wreg free
 11036                           
 11037                           ;main.c: 227: debounceTime = 0;
 11038  001118  0E00               	movlw	0
 11039  00111A  0100               	movlb	0	; () banked
 11040  00111C  6FA4               	movwf	clearing@debounceTime& (0+255),b
 11041  00111E  0E00               	movlw	0
 11042  001120  6FA5               	movwf	(clearing@debounceTime+1)& (0+255),b
 11043  001122  0E00               	movlw	0
 11044  001124  6FA6               	movwf	(clearing@debounceTime+2)& (0+255),b
 11045                           
 11046                           ; BSR set to: 0
 11047                           ;main.c: 228: currentMode = CLEARING;
 11048  001126  0E00               	movlw	0
 11049  001128  6E4D               	movwf	_currentMode+1,c
 11050  00112A  0E03               	movlw	3
 11051  00112C  6E4C               	movwf	_currentMode,c
 11052                           
 11053                           ; BSR set to: 0
 11054                           ;main.c: 229: motorControl(SPACER, FORWARD);
 11055  00112E  0E00               	movlw	0
 11056  001130  6F80               	movwf	motorControl@dir& (0+255),b
 11057  001132  0E02               	movlw	2
 11058  001134  ECB1  F019         	call	_motorControl
 11059                           
 11060                           ;main.c: 230: while (extras.s + dispensed.s < 20) {
 11061  001138  D051               	goto	l168
 11062  00113A                     
 11063                           ;main.c: 231: currTime = tock();
 11064  00113A  ECEE  F01F         	call	_tock	;wreg free
 11065  00113E  C080  F0A7         	movff	?_tock,clearing@currTime
 11066  001142  C081  F0A8         	movff	?_tock+1,clearing@currTime+1
 11067  001146  C082  F0A9         	movff	?_tock+2,clearing@currTime+2
 11068                           
 11069                           ;main.c: 232: if (PORTAbits.RA0 == 0 && currTime > debounceTime + 1) {
 11070  00114A  B080               	btfsc	3968,0,c	;volatile
 11071  00114C  D036               	goto	l167
 11072  00114E  0E00               	movlw	0
 11073  001150  0100               	movlb	0	; () banked
 11074  001152  6F8B               	movwf	___ftadd@f2& (0+255),b
 11075  001154  0E80               	movlw	128
 11076  001156  6F8C               	movwf	(___ftadd@f2+1)& (0+255),b
 11077  001158  0E3F               	movlw	63
 11078  00115A  6F8D               	movwf	(___ftadd@f2+2)& (0+255),b
 11079  00115C  C0A4  F088         	movff	clearing@debounceTime,___ftadd@f1
 11080  001160  C0A5  F089         	movff	clearing@debounceTime+1,___ftadd@f1+1
 11081  001164  C0A6  F08A         	movff	clearing@debounceTime+2,___ftadd@f1+2
 11082  001168  EC9E  F016         	call	___ftadd	;wreg free
 11083  00116C  C088  F094         	movff	?___ftadd,___ftge@ff1
 11084  001170  C089  F095         	movff	?___ftadd+1,___ftge@ff1+1
 11085  001174  C08A  F096         	movff	?___ftadd+2,___ftge@ff1+2
 11086  001178  C0A7  F097         	movff	clearing@currTime,___ftge@ff2
 11087  00117C  C0A8  F098         	movff	clearing@currTime+1,___ftge@ff2+1
 11088  001180  C0A9  F099         	movff	clearing@currTime+2,___ftge@ff2+2
 11089  001184  EC29  F01C         	call	___ftge	;wreg free
 11090  001188  0100               	movlb	0	; () banked
 11091  00118A  B0D8               	btfsc	status,0,c
 11092  00118C  D016               	goto	l167
 11093                           
 11094                           ; BSR set to: 0
 11095                           ;main.c: 233: debounceTime = currTime;
 11096  00118E  C0A7  F0A4         	movff	clearing@currTime,clearing@debounceTime
 11097  001192  C0A8  F0A5         	movff	clearing@currTime+1,clearing@debounceTime+1
 11098  001196  C0A9  F0A6         	movff	clearing@currTime+2,clearing@debounceTime+2
 11099                           
 11100                           ; BSR set to: 0
 11101                           ;main.c: 234: extras.s++;
 11102  00119A  4BE1               	infsnz	(_extras+4)& (0+255),f,b
 11103  00119C  2BE2               	incf	(_extras+5)& (0+255),f,b
 11104                           
 11105                           ; BSR set to: 0
 11106                           ;main.c: 235: I2C_Send(nanoAddr, "\1Spacer counted\0");
 11107  00119E  0E48               	movlw	low STR_13
 11108  0011A0  6F83               	movwf	I2C_Send@data& (0+255),b
 11109  0011A2  0EFF               	movlw	high STR_13
 11110  0011A4  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
 11111  0011A6  0EA3               	movlw	low _nanoAddr
 11112  0011A8  6EF6               	movwf	tblptrl,c
 11113  0011AA                     	if	1	;There is more than 1 active tblptr byte
 11114  0011AA  0EFB               	movlw	high _nanoAddr
 11115  0011AC  6EF7               	movwf	tblptrh,c
 11116  0011AE                     	endif
 11117  0011AE                     	if	1	;There are 3 active tblptr bytes
 11118  0011AE  0E00               	movlw	low (_nanoAddr shr (0+16))
 11119  0011B0  6EF8               	movwf	tblptru,c
 11120  0011B2                     	endif
 11121  0011B2  0008               	tblrd		*
 11122  0011B4  50F5               	movf	tablat,w,c
 11123  0011B6  ECD9  F01B         	call	_I2C_Send
 11124  0011BA                     l167:
 11125                           
 11126                           ;main.c: 236: }
 11127                           ;main.c: 238: if (currTime >= spinTime) break;
 11128  0011BA  C0A7  F094         	movff	clearing@currTime,___ftge@ff1
 11129  0011BE  C0A8  F095         	movff	clearing@currTime+1,___ftge@ff1+1
 11130  0011C2  C0A9  F096         	movff	clearing@currTime+2,___ftge@ff1+2
 11131  0011C6  C0A1  F097         	movff	clearing@spinTime,___ftge@ff2
 11132  0011CA  C0A2  F098         	movff	clearing@spinTime+1,___ftge@ff2+1
 11133  0011CE  C0A3  F099         	movff	clearing@spinTime+2,___ftge@ff2+2
 11134  0011D2  EC29  F01C         	call	___ftge	;wreg free
 11135  0011D6  0100               	movlb	0	; () banked
 11136  0011D8  B0D8               	btfsc	status,0,c
 11137  0011DA  D00F               	goto	u8740
 11138  0011DC                     l168:
 11139                           
 11140                           ; BSR set to: 0
 11141                           
 11142                           ; BSR set to: 0
 11143  0011DC  0100               	movlb	0	; () banked
 11144  0011DE  51D9               	movf	(_dispensed+4)& (0+255),w,b
 11145  0011E0  25E1               	addwf	(_extras+4)& (0+255),w,b
 11146  0011E2  6F9D               	movwf	??_clearing& (0+255),b
 11147  0011E4  51DA               	movf	(_dispensed+5)& (0+255),w,b
 11148  0011E6  21E2               	addwfc	(_extras+5)& (0+255),w,b
 11149  0011E8  6F9E               	movwf	(??_clearing+1)& (0+255),b
 11150  0011EA  BF9E               	btfsc	(??_clearing+1)& (0+255),7,b
 11151  0011EC  D7A6               	goto	l166
 11152  0011EE  519E               	movf	(??_clearing+1)& (0+255),w,b
 11153  0011F0  E104               	bnz	l6690
 11154  0011F2  0E14               	movlw	20
 11155  0011F4  5D9D               	subwf	??_clearing& (0+255),w,b
 11156  0011F6  A0D8               	btfss	status,0,c
 11157  0011F8  D7A0               	goto	l166
 11158  0011FA                     u8740:
 11159  0011FA                     l6690:
 11160                           
 11161                           ; BSR set to: 0
 11162                           ;main.c: 239: }
 11163                           ;main.c: 241: motorControl(SPACER, STOPMOTOR);
 11164  0011FA  0E02               	movlw	2
 11165  0011FC  6F80               	movwf	motorControl@dir& (0+255),b
 11166  0011FE  0E02               	movlw	2
 11167  001200  ECB1  F019         	call	_motorControl
 11168                           
 11169                           ;main.c: 242: currentMode = WAITING;
 11170  001204  0E00               	movlw	0
 11171  001206  6E4D               	movwf	_currentMode+1,c
 11172  001208  0E04               	movlw	4
 11173  00120A  6E4C               	movwf	_currentMode,c
 11174                           
 11175                           ;main.c: 244: instr[0] = 6;
 11176  00120C  0E06               	movlw	6
 11177  00120E  0100               	movlb	0	; () banked
 11178  001210  6F9F               	movwf	clearing@instr& (0+255),b
 11179                           
 11180                           ; BSR set to: 0
 11181                           ;main.c: 245: I2C_Send(nanoAddr, instr);
 11182  001212  0E9F               	movlw	low clearing@instr
 11183  001214  6F83               	movwf	I2C_Send@data& (0+255),b
 11184  001216  0E00               	movlw	high clearing@instr
 11185  001218  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
 11186  00121A  0EA3               	movlw	low _nanoAddr
 11187  00121C  6EF6               	movwf	tblptrl,c
 11188  00121E                     	if	1	;There is more than 1 active tblptr byte
 11189  00121E  0EFB               	movlw	high _nanoAddr
 11190  001220  6EF7               	movwf	tblptrh,c
 11191  001222                     	endif
 11192  001222                     	if	1	;There are 3 active tblptr bytes
 11193  001222  0E00               	movlw	low (_nanoAddr shr (0+16))
 11194  001224  6EF8               	movwf	tblptru,c
 11195  001226                     	endif
 11196  001226  0008               	tblrd		*
 11197  001228  50F5               	movf	tablat,w,c
 11198  00122A  ECD9  F01B         	call	_I2C_Send
 11199  00122E  BA80               	btfsc	3968,5,c	;volatile
 11200  001230  D7FE               	goto	l171
 11201                           
 11202                           ;main.c: 248: tic();
 11203  001232  ECF5  F01F         	call	_tic	;wreg free
 11204                           
 11205                           ;main.c: 249: debounceTime = 0;
 11206  001236  0E00               	movlw	0
 11207  001238  0100               	movlb	0	; () banked
 11208  00123A  6FA4               	movwf	clearing@debounceTime& (0+255),b
 11209  00123C  0E00               	movlw	0
 11210  00123E  6FA5               	movwf	(clearing@debounceTime+1)& (0+255),b
 11211  001240  0E00               	movlw	0
 11212  001242  6FA6               	movwf	(clearing@debounceTime+2)& (0+255),b
 11213                           
 11214                           ; BSR set to: 0
 11215                           ;main.c: 250: currentMode = CLEARING;
 11216  001244  0E00               	movlw	0
 11217  001246  6E4D               	movwf	_currentMode+1,c
 11218  001248  0E03               	movlw	3
 11219  00124A  6E4C               	movwf	_currentMode,c
 11220                           
 11221                           ; BSR set to: 0
 11222                           ;main.c: 251: motorControl(WASHER, FORWARD);
 11223  00124C  0E00               	movlw	0
 11224  00124E  6F80               	movwf	motorControl@dir& (0+255),b
 11225  001250  0E03               	movlw	3
 11226  001252  ECB1  F019         	call	_motorControl
 11227                           
 11228                           ;main.c: 252: while (extras.w + dispensed.w < 35) {
 11229  001256  D051               	goto	l176
 11230  001258                     
 11231                           ;main.c: 253: currTime = tock();
 11232  001258  ECEE  F01F         	call	_tock	;wreg free
 11233  00125C  C080  F0A7         	movff	?_tock,clearing@currTime
 11234  001260  C081  F0A8         	movff	?_tock+1,clearing@currTime+1
 11235  001264  C082  F0A9         	movff	?_tock+2,clearing@currTime+2
 11236                           
 11237                           ;main.c: 254: if (PORTAbits.RA2 == 0 && currTime > debounceTime + 1) {
 11238  001268  B480               	btfsc	3968,2,c	;volatile
 11239  00126A  D036               	goto	l175
 11240  00126C  0E00               	movlw	0
 11241  00126E  0100               	movlb	0	; () banked
 11242  001270  6F8B               	movwf	___ftadd@f2& (0+255),b
 11243  001272  0E80               	movlw	128
 11244  001274  6F8C               	movwf	(___ftadd@f2+1)& (0+255),b
 11245  001276  0E3F               	movlw	63
 11246  001278  6F8D               	movwf	(___ftadd@f2+2)& (0+255),b
 11247  00127A  C0A4  F088         	movff	clearing@debounceTime,___ftadd@f1
 11248  00127E  C0A5  F089         	movff	clearing@debounceTime+1,___ftadd@f1+1
 11249  001282  C0A6  F08A         	movff	clearing@debounceTime+2,___ftadd@f1+2
 11250  001286  EC9E  F016         	call	___ftadd	;wreg free
 11251  00128A  C088  F094         	movff	?___ftadd,___ftge@ff1
 11252  00128E  C089  F095         	movff	?___ftadd+1,___ftge@ff1+1
 11253  001292  C08A  F096         	movff	?___ftadd+2,___ftge@ff1+2
 11254  001296  C0A7  F097         	movff	clearing@currTime,___ftge@ff2
 11255  00129A  C0A8  F098         	movff	clearing@currTime+1,___ftge@ff2+1
 11256  00129E  C0A9  F099         	movff	clearing@currTime+2,___ftge@ff2+2
 11257  0012A2  EC29  F01C         	call	___ftge	;wreg free
 11258  0012A6  0100               	movlb	0	; () banked
 11259  0012A8  B0D8               	btfsc	status,0,c
 11260  0012AA  D016               	goto	l175
 11261                           
 11262                           ; BSR set to: 0
 11263                           ;main.c: 255: debounceTime = currTime;
 11264  0012AC  C0A7  F0A4         	movff	clearing@currTime,clearing@debounceTime
 11265  0012B0  C0A8  F0A5         	movff	clearing@currTime+1,clearing@debounceTime+1
 11266  0012B4  C0A9  F0A6         	movff	clearing@currTime+2,clearing@debounceTime+2
 11267                           
 11268                           ; BSR set to: 0
 11269                           ;main.c: 256: extras.w++;
 11270  0012B8  4BE3               	infsnz	(_extras+6)& (0+255),f,b
 11271  0012BA  2BE4               	incf	(_extras+7)& (0+255),f,b
 11272                           
 11273                           ; BSR set to: 0
 11274                           ;main.c: 257: I2C_Send(nanoAddr, "\1Washer counted\0");
 11275  0012BC  0E59               	movlw	low STR_14
 11276  0012BE  6F83               	movwf	I2C_Send@data& (0+255),b
 11277  0012C0  0EFF               	movlw	high STR_14
 11278  0012C2  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
 11279  0012C4  0EA3               	movlw	low _nanoAddr
 11280  0012C6  6EF6               	movwf	tblptrl,c
 11281  0012C8                     	if	1	;There is more than 1 active tblptr byte
 11282  0012C8  0EFB               	movlw	high _nanoAddr
 11283  0012CA  6EF7               	movwf	tblptrh,c
 11284  0012CC                     	endif
 11285  0012CC                     	if	1	;There are 3 active tblptr bytes
 11286  0012CC  0E00               	movlw	low (_nanoAddr shr (0+16))
 11287  0012CE  6EF8               	movwf	tblptru,c
 11288  0012D0                     	endif
 11289  0012D0  0008               	tblrd		*
 11290  0012D2  50F5               	movf	tablat,w,c
 11291  0012D4  ECD9  F01B         	call	_I2C_Send
 11292  0012D8                     l175:
 11293                           
 11294                           ;main.c: 258: }
 11295                           ;main.c: 260: if (currTime >= spinTime) break;
 11296  0012D8  C0A7  F094         	movff	clearing@currTime,___ftge@ff1
 11297  0012DC  C0A8  F095         	movff	clearing@currTime+1,___ftge@ff1+1
 11298  0012E0  C0A9  F096         	movff	clearing@currTime+2,___ftge@ff1+2
 11299  0012E4  C0A1  F097         	movff	clearing@spinTime,___ftge@ff2
 11300  0012E8  C0A2  F098         	movff	clearing@spinTime+1,___ftge@ff2+1
 11301  0012EC  C0A3  F099         	movff	clearing@spinTime+2,___ftge@ff2+2
 11302  0012F0  EC29  F01C         	call	___ftge	;wreg free
 11303  0012F4  0100               	movlb	0	; () banked
 11304  0012F6  B0D8               	btfsc	status,0,c
 11305  0012F8  D00F               	goto	u8790
 11306  0012FA                     l176:
 11307                           
 11308                           ; BSR set to: 0
 11309                           
 11310                           ; BSR set to: 0
 11311  0012FA  0100               	movlb	0	; () banked
 11312  0012FC  51DB               	movf	(_dispensed+6)& (0+255),w,b
 11313  0012FE  25E3               	addwf	(_extras+6)& (0+255),w,b
 11314  001300  6F9D               	movwf	??_clearing& (0+255),b
 11315  001302  51DC               	movf	(_dispensed+7)& (0+255),w,b
 11316  001304  21E4               	addwfc	(_extras+7)& (0+255),w,b
 11317  001306  6F9E               	movwf	(??_clearing+1)& (0+255),b
 11318  001308  BF9E               	btfsc	(??_clearing+1)& (0+255),7,b
 11319  00130A  D7A6               	goto	l174
 11320  00130C  519E               	movf	(??_clearing+1)& (0+255),w,b
 11321  00130E  E104               	bnz	l6724
 11322  001310  0E23               	movlw	35
 11323  001312  5D9D               	subwf	??_clearing& (0+255),w,b
 11324  001314  A0D8               	btfss	status,0,c
 11325  001316  D7A0               	goto	l174
 11326  001318                     u8790:
 11327  001318                     l6724:
 11328                           
 11329                           ; BSR set to: 0
 11330                           ;main.c: 261: }
 11331                           ;main.c: 263: motorControl(WASHER, STOPMOTOR);
 11332  001318  0E02               	movlw	2
 11333  00131A  6F80               	movwf	motorControl@dir& (0+255),b
 11334  00131C  0E03               	movlw	3
 11335  00131E  ECB1  F019         	call	_motorControl
 11336                           
 11337                           ;main.c: 264: currentMode = WAITING;
 11338  001322  0E00               	movlw	0
 11339  001324  6E4D               	movwf	_currentMode+1,c
 11340  001326  0E04               	movlw	4
 11341  001328  6E4C               	movwf	_currentMode,c
 11342                           
 11343                           ;main.c: 266: instr[0] = 7;
 11344  00132A  0E07               	movlw	7
 11345  00132C  0100               	movlb	0	; () banked
 11346  00132E  6F9F               	movwf	clearing@instr& (0+255),b
 11347                           
 11348                           ; BSR set to: 0
 11349                           ;main.c: 267: I2C_Send(nanoAddr, instr);
 11350  001330  0E9F               	movlw	low clearing@instr
 11351  001332  6F83               	movwf	I2C_Send@data& (0+255),b
 11352  001334  0E00               	movlw	high clearing@instr
 11353  001336  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
 11354  001338  0EA3               	movlw	low _nanoAddr
 11355  00133A  6EF6               	movwf	tblptrl,c
 11356  00133C                     	if	1	;There is more than 1 active tblptr byte
 11357  00133C  0EFB               	movlw	high _nanoAddr
 11358  00133E  6EF7               	movwf	tblptrh,c
 11359  001340                     	endif
 11360  001340                     	if	1	;There are 3 active tblptr bytes
 11361  001340  0E00               	movlw	low (_nanoAddr shr (0+16))
 11362  001342  6EF8               	movwf	tblptru,c
 11363  001344                     	endif
 11364  001344  0008               	tblrd		*
 11365  001346  50F5               	movf	tablat,w,c
 11366  001348  ECD9  F01B         	call	_I2C_Send
 11367  00134C  AA80               	btfss	3968,5,c	;volatile
 11368  00134E  0012               	return	
 11369  001350  D7FD               	goto	l179
 11370  001352                     __end_of_clearing:
 11371                           	opt stack 0
 11372                           tosu	equ	0xFFF
 11373                           tosh	equ	0xFFE
 11374                           tosl	equ	0xFFD
 11375                           pclath	equ	0xFFA
 11376                           tblptru	equ	0xFF8
 11377                           tblptrh	equ	0xFF7
 11378                           tblptrl	equ	0xFF6
 11379                           tablat	equ	0xFF5
 11380                           prodh	equ	0xFF4
 11381                           prodl	equ	0xFF3
 11382                           intcon	equ	0xFF2
 11383                           indf0	equ	0xFEF
 11384                           postinc0	equ	0xFEE
 11385                           fsr0h	equ	0xFEA
 11386                           fsr0l	equ	0xFE9
 11387                           wreg	equ	0xFE8
 11388                           postdec1	equ	0xFE5
 11389                           plusw1	equ	0xFE3
 11390                           fsr1l	equ	0xFE1
 11391                           indf2	equ	0xFDF
 11392                           postinc2	equ	0xFDE
 11393                           postdec2	equ	0xFDD
 11394                           plusw2	equ	0xFDB
 11395                           fsr2h	equ	0xFDA
 11396                           fsr2l	equ	0xFD9
 11397                           status	equ	0xFD8
 11398                           
 11399 ;; *************** function _tock *****************
 11400 ;; Defined at:
 11401 ;;		line 69 in file "timer.c"
 11402 ;; Parameters:    Size  Location     Type
 11403 ;;		None
 11404 ;; Auto vars:     Size  Location     Type
 11405 ;;		None
 11406 ;; Return value:  Size  Location     Type
 11407 ;;                  3    0[BANK0 ] void 
 11408 ;; Registers used:
 11409 ;;		None
 11410 ;; Tracked objects:
 11411 ;;		On entry : 0/0
 11412 ;;		On exit  : 0/0
 11413 ;;		Unchanged: 0/0
 11414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11415 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11418 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11419 ;;Total ram usage:        3 bytes
 11420 ;; Hardware stack levels used:    1
 11421 ;; Hardware stack levels required when called:    4
 11422 ;; This function calls:
 11423 ;;		Nothing
 11424 ;; This function is called by:
 11425 ;;		_packageCompartment
 11426 ;;		_clearing
 11427 ;; This function uses a non-reentrant model
 11428 ;;
 11429                           
 11430                           	psect	text24
 11431  003FDC                     __ptext24:
 11432                           	opt stack 0
 11433  003FDC                     _tock:
 11434                           	opt stack 23
 11435                           
 11436                           ;timer.c: 74: return timeSinceLastTic;
 11437                           
 11438                           ;incstack = 0
 11439  003FDC  C05D  F080         	movff	_timeSinceLastTic,?_tock	;volatile
 11440  003FE0  C05E  F081         	movff	_timeSinceLastTic+1,?_tock+1	;volatile
 11441  003FE4  C05F  F082         	movff	_timeSinceLastTic+2,?_tock+2	;volatile
 11442  003FE8  0012               	return		;funcret
 11443  003FEA                     __end_of_tock:
 11444                           	opt stack 0
 11445                           tosu	equ	0xFFF
 11446                           tosh	equ	0xFFE
 11447                           tosl	equ	0xFFD
 11448                           pclath	equ	0xFFA
 11449                           tblptru	equ	0xFF8
 11450                           tblptrh	equ	0xFF7
 11451                           tblptrl	equ	0xFF6
 11452                           tablat	equ	0xFF5
 11453                           prodh	equ	0xFF4
 11454                           prodl	equ	0xFF3
 11455                           intcon	equ	0xFF2
 11456                           indf0	equ	0xFEF
 11457                           postinc0	equ	0xFEE
 11458                           fsr0h	equ	0xFEA
 11459                           fsr0l	equ	0xFE9
 11460                           wreg	equ	0xFE8
 11461                           postdec1	equ	0xFE5
 11462                           plusw1	equ	0xFE3
 11463                           fsr1l	equ	0xFE1
 11464                           indf2	equ	0xFDF
 11465                           postinc2	equ	0xFDE
 11466                           postdec2	equ	0xFDD
 11467                           plusw2	equ	0xFDB
 11468                           fsr2h	equ	0xFDA
 11469                           fsr2l	equ	0xFD9
 11470                           status	equ	0xFD8
 11471                           
 11472 ;; *************** function _tic *****************
 11473 ;; Defined at:
 11474 ;;		line 61 in file "timer.c"
 11475 ;; Parameters:    Size  Location     Type
 11476 ;;		None
 11477 ;; Auto vars:     Size  Location     Type
 11478 ;;		None
 11479 ;; Return value:  Size  Location     Type
 11480 ;;                  1    wreg      void 
 11481 ;; Registers used:
 11482 ;;		wreg, status,2
 11483 ;; Tracked objects:
 11484 ;;		On entry : 0/0
 11485 ;;		On exit  : 0/0
 11486 ;;		Unchanged: 0/0
 11487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11491 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11492 ;;Total ram usage:        0 bytes
 11493 ;; Hardware stack levels used:    1
 11494 ;; Hardware stack levels required when called:    4
 11495 ;; This function calls:
 11496 ;;		Nothing
 11497 ;; This function is called by:
 11498 ;;		_packageCompartment
 11499 ;;		_clearing
 11500 ;; This function uses a non-reentrant model
 11501 ;;
 11502                           
 11503                           	psect	text25
 11504  003FEA                     __ptext25:
 11505                           	opt stack 0
 11506  003FEA                     _tic:
 11507                           	opt stack 23
 11508                           
 11509                           ;timer.c: 66: timeSinceLastTic = 0;
 11510                           
 11511                           ;incstack = 0
 11512  003FEA  0E00               	movlw	0
 11513  003FEC  6E5D               	movwf	_timeSinceLastTic,c	;volatile
 11514  003FEE  0E00               	movlw	0
 11515  003FF0  6E5E               	movwf	_timeSinceLastTic+1,c	;volatile
 11516  003FF2  0E00               	movlw	0
 11517  003FF4  6E5F               	movwf	_timeSinceLastTic+2,c	;volatile
 11518  003FF6  0012               	return		;funcret
 11519  003FF8                     __end_of_tic:
 11520                           	opt stack 0
 11521                           tosu	equ	0xFFF
 11522                           tosh	equ	0xFFE
 11523                           tosl	equ	0xFFD
 11524                           pclath	equ	0xFFA
 11525                           tblptru	equ	0xFF8
 11526                           tblptrh	equ	0xFF7
 11527                           tblptrl	equ	0xFF6
 11528                           tablat	equ	0xFF5
 11529                           prodh	equ	0xFF4
 11530                           prodl	equ	0xFF3
 11531                           intcon	equ	0xFF2
 11532                           indf0	equ	0xFEF
 11533                           postinc0	equ	0xFEE
 11534                           fsr0h	equ	0xFEA
 11535                           fsr0l	equ	0xFE9
 11536                           wreg	equ	0xFE8
 11537                           postdec1	equ	0xFE5
 11538                           plusw1	equ	0xFE3
 11539                           fsr1l	equ	0xFE1
 11540                           indf2	equ	0xFDF
 11541                           postinc2	equ	0xFDE
 11542                           postdec2	equ	0xFDD
 11543                           plusw2	equ	0xFDB
 11544                           fsr2h	equ	0xFDA
 11545                           fsr2l	equ	0xFD9
 11546                           status	equ	0xFD8
 11547                           
 11548 ;; *************** function _motorControl *****************
 11549 ;; Defined at:
 11550 ;;		line 7 in file "motors.c"
 11551 ;; Parameters:    Size  Location     Type
 11552 ;;  motor           1    wreg     enum E2968
 11553 ;;  dir             1    0[BANK0 ] enum E2974
 11554 ;; Auto vars:     Size  Location     Type
 11555 ;;  motor           1    1[BANK0 ] enum E2968
 11556 ;; Return value:  Size  Location     Type
 11557 ;;                  1    wreg      void 
 11558 ;; Registers used:
 11559 ;;		wreg, status,2, status,0
 11560 ;; Tracked objects:
 11561 ;;		On entry : 0/0
 11562 ;;		On exit  : 0/0
 11563 ;;		Unchanged: 0/0
 11564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11565 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11566 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11568 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11569 ;;Total ram usage:        2 bytes
 11570 ;; Hardware stack levels used:    1
 11571 ;; Hardware stack levels required when called:    4
 11572 ;; This function calls:
 11573 ;;		Nothing
 11574 ;; This function is called by:
 11575 ;;		_packageCompartment
 11576 ;;		_clearing
 11577 ;;		_main
 11578 ;; This function uses a non-reentrant model
 11579 ;;
 11580                           
 11581                           	psect	text26
 11582  003362                     __ptext26:
 11583                           	opt stack 0
 11584  003362                     _motorControl:
 11585                           	opt stack 26
 11586                           
 11587                           ;incstack = 0
 11588                           ;motorControl@motor stored from wreg
 11589  003362  0100               	movlb	0	; () banked
 11590  003364  6F81               	movwf	motorControl@motor& (0+255),b
 11591                           
 11592                           ;motors.c: 8: switch(motor) {
 11593  003366  D051               	goto	l788
 11594  003368                     
 11595                           ;motors.c: 10: if (dir == FORWARD) {
 11596  003368  0100               	movlb	0	; () banked
 11597  00336A  5180               	movf	motorControl@dir& (0+255),w,b
 11598  00336C  A4D8               	btfss	status,2,c
 11599  00336E  D003               	goto	l790
 11600                           
 11601                           ; BSR set to: 0
 11602                           ;motors.c: 11: LATBbits.LATB3 = 1;
 11603  003370  868A               	bsf	3978,3,c	;volatile
 11604                           
 11605                           ;motors.c: 12: LATCbits.LATC0 = 0;
 11606  003372  908B               	bcf	3979,0,c	;volatile
 11607                           
 11608                           ;motors.c: 13: } else if (dir == REVERSE) {
 11609  003374  D00B               	goto	l794
 11610  003376                     l790:
 11611                           
 11612                           ; BSR set to: 0
 11613                           
 11614                           ; BSR set to: 0
 11615  003376  0580               	decf	motorControl@dir& (0+255),w,b
 11616  003378  A4D8               	btfss	status,2,c
 11617  00337A  D002               	goto	l792
 11618                           
 11619                           ; BSR set to: 0
 11620                           ;motors.c: 14: LATBbits.LATB3 = 0;
 11621  00337C  968A               	bcf	3978,3,c	;volatile
 11622  00337E  D005               	goto	L14
 11623  003380                     l792:
 11624                           
 11625                           ; BSR set to: 0
 11626                           
 11627                           ; BSR set to: 0
 11628  003380  0E02               	movlw	2
 11629  003382  1980               	xorwf	motorControl@dir& (0+255),w,b
 11630  003384  A4D8               	btfss	status,2,c
 11631  003386  D002               	goto	l794
 11632                           
 11633                           ; BSR set to: 0
 11634                           ;motors.c: 17: LATBbits.LATB3 = 1;
 11635  003388  868A               	bsf	3978,3,c	;volatile
 11636  00338A                     L14:
 11637                           
 11638                           ;motors.c: 18: LATCbits.LATC0 = 1;
 11639  00338A  808B               	bsf	3979,0,c	;volatile
 11640  00338C                     l794:
 11641                           
 11642                           ; BSR set to: 0
 11643                           ;motors.c: 19: }
 11644                           ;motors.c: 20: currentMotorDir.s = dir;
 11645                           
 11646                           ; BSR set to: 0
 11647                           
 11648                           ; BSR set to: 0
 11649  00338C  C080  F05B         	movff	motorControl@dir,_currentMotorDir+2
 11650                           
 11651                           ;motors.c: 21: break;
 11652  003390  0012               	return	
 11653  003392                     
 11654                           ; BSR set to: 0
 11655                           ;motors.c: 23: if (dir == FORWARD) {
 11656                           
 11657                           ; BSR set to: 0
 11658  003392  5180               	movf	motorControl@dir& (0+255),w,b
 11659  003394  A4D8               	btfss	status,2,c
 11660  003396  D003               	goto	l797
 11661                           
 11662                           ; BSR set to: 0
 11663                           ;motors.c: 24: LATCbits.LATC1 = 1;
 11664  003398  828B               	bsf	3979,1,c	;volatile
 11665                           
 11666                           ;motors.c: 25: LATCbits.LATC2 = 0;
 11667  00339A  948B               	bcf	3979,2,c	;volatile
 11668                           
 11669                           ;motors.c: 26: } else if (dir == REVERSE) {
 11670  00339C  D00B               	goto	l801
 11671  00339E                     l797:
 11672                           
 11673                           ; BSR set to: 0
 11674                           
 11675                           ; BSR set to: 0
 11676  00339E  0580               	decf	motorControl@dir& (0+255),w,b
 11677  0033A0  A4D8               	btfss	status,2,c
 11678  0033A2  D002               	goto	l799
 11679                           
 11680                           ; BSR set to: 0
 11681                           ;motors.c: 27: LATCbits.LATC1 = 0;
 11682  0033A4  928B               	bcf	3979,1,c	;volatile
 11683  0033A6  D005               	goto	L15
 11684  0033A8                     l799:
 11685                           
 11686                           ; BSR set to: 0
 11687                           
 11688                           ; BSR set to: 0
 11689  0033A8  0E02               	movlw	2
 11690  0033AA  1980               	xorwf	motorControl@dir& (0+255),w,b
 11691  0033AC  A4D8               	btfss	status,2,c
 11692  0033AE  D002               	goto	l801
 11693                           
 11694                           ; BSR set to: 0
 11695                           ;motors.c: 30: LATCbits.LATC1 = 1;
 11696  0033B0  828B               	bsf	3979,1,c	;volatile
 11697  0033B2                     L15:
 11698                           
 11699                           ;motors.c: 31: LATCbits.LATC2 = 1;
 11700  0033B2  848B               	bsf	3979,2,c	;volatile
 11701  0033B4                     l801:
 11702                           
 11703                           ; BSR set to: 0
 11704                           ;motors.c: 32: }
 11705                           ;motors.c: 33: currentMotorDir.n = dir;
 11706                           
 11707                           ; BSR set to: 0
 11708                           
 11709                           ; BSR set to: 0
 11710  0033B4  C080  F05A         	movff	motorControl@dir,_currentMotorDir+1
 11711                           
 11712                           ;motors.c: 34: break;
 11713  0033B8  0012               	return	
 11714  0033BA                     
 11715                           ; BSR set to: 0
 11716                           ;motors.c: 36: if (dir == FORWARD) {
 11717                           
 11718                           ; BSR set to: 0
 11719  0033BA  5180               	movf	motorControl@dir& (0+255),w,b
 11720  0033BC  A4D8               	btfss	status,2,c
 11721  0033BE  D003               	goto	l803
 11722                           
 11723                           ; BSR set to: 0
 11724                           ;motors.c: 37: LATCbits.LATC5 = 1;
 11725  0033C0  8A8B               	bsf	3979,5,c	;volatile
 11726                           
 11727                           ;motors.c: 38: LATCbits.LATC6 = 0;
 11728  0033C2  9C8B               	bcf	3979,6,c	;volatile
 11729                           
 11730                           ;motors.c: 39: } else if (dir == REVERSE) {
 11731  0033C4  D00B               	goto	l807
 11732  0033C6                     l803:
 11733                           
 11734                           ; BSR set to: 0
 11735                           
 11736                           ; BSR set to: 0
 11737  0033C6  0580               	decf	motorControl@dir& (0+255),w,b
 11738  0033C8  A4D8               	btfss	status,2,c
 11739  0033CA  D002               	goto	l805
 11740                           
 11741                           ; BSR set to: 0
 11742                           ;motors.c: 40: LATCbits.LATC5 = 0;
 11743  0033CC  9A8B               	bcf	3979,5,c	;volatile
 11744  0033CE  D005               	goto	L16
 11745  0033D0                     l805:
 11746                           
 11747                           ; BSR set to: 0
 11748                           
 11749                           ; BSR set to: 0
 11750  0033D0  0E02               	movlw	2
 11751  0033D2  1980               	xorwf	motorControl@dir& (0+255),w,b
 11752  0033D4  A4D8               	btfss	status,2,c
 11753  0033D6  D002               	goto	l807
 11754                           
 11755                           ; BSR set to: 0
 11756                           ;motors.c: 43: LATCbits.LATC5 = 1;
 11757  0033D8  8A8B               	bsf	3979,5,c	;volatile
 11758  0033DA                     L16:
 11759                           
 11760                           ;motors.c: 44: LATCbits.LATC6 = 1;
 11761  0033DA  8C8B               	bsf	3979,6,c	;volatile
 11762  0033DC                     l807:
 11763                           
 11764                           ; BSR set to: 0
 11765                           ;motors.c: 45: }
 11766                           ;motors.c: 46: currentMotorDir.w = dir;
 11767                           
 11768                           ; BSR set to: 0
 11769                           
 11770                           ; BSR set to: 0
 11771  0033DC  C080  F05C         	movff	motorControl@dir,_currentMotorDir+3
 11772                           
 11773                           ;motors.c: 47: break;
 11774  0033E0  0012               	return	
 11775  0033E2                     
 11776                           ; BSR set to: 0
 11777                           ;motors.c: 49: if (dir == FORWARD) {
 11778                           
 11779                           ; BSR set to: 0
 11780  0033E2  5180               	movf	motorControl@dir& (0+255),w,b
 11781  0033E4  A4D8               	btfss	status,2,c
 11782  0033E6  D003               	goto	l809
 11783                           
 11784                           ; BSR set to: 0
 11785                           ;motors.c: 50: LATCbits.LATC7 = 1;
 11786  0033E8  8E8B               	bsf	3979,7,c	;volatile
 11787                           
 11788                           ;motors.c: 51: LATEbits.LATE0 = 0;
 11789  0033EA  908D               	bcf	3981,0,c	;volatile
 11790                           
 11791                           ;motors.c: 52: } else if (dir == REVERSE) {
 11792  0033EC  D00B               	goto	l813
 11793  0033EE                     l809:
 11794                           
 11795                           ; BSR set to: 0
 11796                           
 11797                           ; BSR set to: 0
 11798  0033EE  0580               	decf	motorControl@dir& (0+255),w,b
 11799  0033F0  A4D8               	btfss	status,2,c
 11800  0033F2  D002               	goto	l811
 11801                           
 11802                           ; BSR set to: 0
 11803                           ;motors.c: 53: LATCbits.LATC7 = 0;
 11804  0033F4  9E8B               	bcf	3979,7,c	;volatile
 11805  0033F6  D005               	goto	L17
 11806  0033F8                     l811:
 11807                           
 11808                           ; BSR set to: 0
 11809                           
 11810                           ; BSR set to: 0
 11811  0033F8  0E02               	movlw	2
 11812  0033FA  1980               	xorwf	motorControl@dir& (0+255),w,b
 11813  0033FC  A4D8               	btfss	status,2,c
 11814  0033FE  D002               	goto	l813
 11815                           
 11816                           ; BSR set to: 0
 11817                           ;motors.c: 56: LATCbits.LATC7 = 1;
 11818  003400  8E8B               	bsf	3979,7,c	;volatile
 11819  003402                     L17:
 11820                           
 11821                           ;motors.c: 57: LATEbits.LATE0 = 1;
 11822  003402  808D               	bsf	3981,0,c	;volatile
 11823  003404                     l813:
 11824                           
 11825                           ; BSR set to: 0
 11826                           ;motors.c: 58: }
 11827                           ;motors.c: 59: currentMotorDir.b = dir;
 11828                           
 11829                           ; BSR set to: 0
 11830                           
 11831                           ; BSR set to: 0
 11832  003404  C080  F059         	movff	motorControl@dir,_currentMotorDir
 11833                           
 11834                           ; BSR set to: 0
 11835                           ;motors.c: 63: }
 11836                           
 11837                           ; BSR set to: 0
 11838                           ;motors.c: 62: break;
 11839                           
 11840                           ;motors.c: 61: default:
 11841                           
 11842                           ;motors.c: 60: break;
 11843  003408  0012               	return	
 11844  00340A                     l788:
 11845                           
 11846                           ; BSR set to: 0
 11847  00340A  0100               	movlb	0	; () banked
 11848  00340C  5181               	movf	motorControl@motor& (0+255),w,b
 11849                           
 11850                           ; Switch size 1, requested type "space"
 11851                           ; Number of cases is 4, Range of values is 0 to 3
 11852                           ; switch strategies available:
 11853                           ; Name         Instructions Cycles
 11854                           ; simple_byte           13     7 (average)
 11855                           ;	Chosen strategy is simple_byte
 11856  00340E  0A00               	xorlw	0	; case 0
 11857  003410  B4D8               	btfsc	status,2,c
 11858  003412  D7E7               	goto	l808
 11859  003414  0A01               	xorlw	1	; case 1
 11860  003416  B4D8               	btfsc	status,2,c
 11861  003418  D7BC               	goto	l796
 11862  00341A  0A03               	xorlw	3	; case 2
 11863  00341C  B4D8               	btfsc	status,2,c
 11864  00341E  D7A4               	goto	l789
 11865  003420  0A01               	xorlw	1	; case 3
 11866  003422  A4D8               	btfss	status,2,c
 11867  003424  0012               	return	
 11868  003426  D7C9               	goto	l802
 11869  003428                     __end_of_motorControl:
 11870                           	opt stack 0
 11871                           tosu	equ	0xFFF
 11872                           tosh	equ	0xFFE
 11873                           tosl	equ	0xFFD
 11874                           pclath	equ	0xFFA
 11875                           tblptru	equ	0xFF8
 11876                           tblptrh	equ	0xFF7
 11877                           tblptrl	equ	0xFF6
 11878                           tablat	equ	0xFF5
 11879                           prodh	equ	0xFF4
 11880                           prodl	equ	0xFF3
 11881                           intcon	equ	0xFF2
 11882                           indf0	equ	0xFEF
 11883                           postinc0	equ	0xFEE
 11884                           fsr0h	equ	0xFEA
 11885                           fsr0l	equ	0xFE9
 11886                           wreg	equ	0xFE8
 11887                           postdec1	equ	0xFE5
 11888                           plusw1	equ	0xFE3
 11889                           fsr1l	equ	0xFE1
 11890                           indf2	equ	0xFDF
 11891                           postinc2	equ	0xFDE
 11892                           postdec2	equ	0xFDD
 11893                           plusw2	equ	0xFDB
 11894                           fsr2h	equ	0xFDA
 11895                           fsr2l	equ	0xFD9
 11896                           status	equ	0xFD8
 11897                           
 11898 ;; *************** function ___ftge *****************
 11899 ;; Defined at:
 11900 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 11901 ;; Parameters:    Size  Location     Type
 11902 ;;  ff1             3   20[BANK0 ] float 
 11903 ;;  ff2             3   23[BANK0 ] float 
 11904 ;; Auto vars:     Size  Location     Type
 11905 ;;		None
 11906 ;; Return value:  Size  Location     Type
 11907 ;;		None               void
 11908 ;; Registers used:
 11909 ;;		wreg, status,2, status,0
 11910 ;; Tracked objects:
 11911 ;;		On entry : 0/0
 11912 ;;		On exit  : 0/0
 11913 ;;		Unchanged: 0/0
 11914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11915 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11917 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11918 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11919 ;;Total ram usage:        9 bytes
 11920 ;; Hardware stack levels used:    1
 11921 ;; Hardware stack levels required when called:    4
 11922 ;; This function calls:
 11923 ;;		Nothing
 11924 ;; This function is called by:
 11925 ;;		_packageCompartment
 11926 ;;		_clearing
 11927 ;; This function uses a non-reentrant model
 11928 ;;
 11929                           
 11930                           	psect	text27
 11931  003852                     __ptext27:
 11932                           	opt stack 0
 11933  003852                     ___ftge:
 11934                           	opt stack 23
 11935                           
 11936                           ; BSR set to: 0
 11937                           ;incstack = 0
 11938  003852  0100               	movlb	0	; () banked
 11939  003854  AF96               	btfss	(___ftge@ff1+2)& (0+255),7,b
 11940  003856  D016               	goto	l1250
 11941                           
 11942                           ; BSR set to: 0
 11943  003858  C094  F09A         	movff	___ftge@ff1,??___ftge
 11944  00385C  C095  F09B         	movff	___ftge@ff1+1,??___ftge+1
 11945  003860  C096  F09C         	movff	___ftge@ff1+2,??___ftge+2
 11946  003864  1F9A               	comf	??___ftge& (0+255),f,b
 11947  003866  1F9B               	comf	(??___ftge+1)& (0+255),f,b
 11948  003868  1F9C               	comf	(??___ftge+2)& (0+255),f,b
 11949  00386A  2B9A               	incf	??___ftge& (0+255),f,b
 11950  00386C  0E00               	movlw	0
 11951  00386E  239B               	addwfc	(??___ftge+1)& (0+255),f,b
 11952  003870  239C               	addwfc	(??___ftge+2)& (0+255),f,b
 11953  003872  0E00               	movlw	0
 11954  003874  259A               	addwf	??___ftge& (0+255),w,b
 11955  003876  6F94               	movwf	___ftge@ff1& (0+255),b
 11956  003878  0E00               	movlw	0
 11957  00387A  219B               	addwfc	(??___ftge+1)& (0+255),w,b
 11958  00387C  6F95               	movwf	(___ftge@ff1+1)& (0+255),b
 11959  00387E  0E80               	movlw	128
 11960  003880  219C               	addwfc	(??___ftge+2)& (0+255),w,b
 11961  003882  6F96               	movwf	(___ftge@ff1+2)& (0+255),b
 11962  003884                     l1250:
 11963                           
 11964                           ; BSR set to: 0
 11965                           
 11966                           ; BSR set to: 0
 11967  003884  AF99               	btfss	(___ftge@ff2+2)& (0+255),7,b
 11968  003886  D016               	goto	l1251
 11969                           
 11970                           ; BSR set to: 0
 11971  003888  C097  F09A         	movff	___ftge@ff2,??___ftge
 11972  00388C  C098  F09B         	movff	___ftge@ff2+1,??___ftge+1
 11973  003890  C099  F09C         	movff	___ftge@ff2+2,??___ftge+2
 11974  003894  1F9A               	comf	??___ftge& (0+255),f,b
 11975  003896  1F9B               	comf	(??___ftge+1)& (0+255),f,b
 11976  003898  1F9C               	comf	(??___ftge+2)& (0+255),f,b
 11977  00389A  2B9A               	incf	??___ftge& (0+255),f,b
 11978  00389C  0E00               	movlw	0
 11979  00389E  239B               	addwfc	(??___ftge+1)& (0+255),f,b
 11980  0038A0  239C               	addwfc	(??___ftge+2)& (0+255),f,b
 11981  0038A2  0E00               	movlw	0
 11982  0038A4  259A               	addwf	??___ftge& (0+255),w,b
 11983  0038A6  6F97               	movwf	___ftge@ff2& (0+255),b
 11984  0038A8  0E00               	movlw	0
 11985  0038AA  219B               	addwfc	(??___ftge+1)& (0+255),w,b
 11986  0038AC  6F98               	movwf	(___ftge@ff2+1)& (0+255),b
 11987  0038AE  0E80               	movlw	128
 11988  0038B0  219C               	addwfc	(??___ftge+2)& (0+255),w,b
 11989  0038B2  6F99               	movwf	(___ftge@ff2+2)& (0+255),b
 11990  0038B4                     l1251:
 11991                           
 11992                           ; BSR set to: 0
 11993                           
 11994                           ; BSR set to: 0
 11995  0038B4  0E00               	movlw	0
 11996  0038B6  1B94               	xorwf	___ftge@ff1& (0+255),f,b
 11997  0038B8  0E00               	movlw	0
 11998  0038BA  1B95               	xorwf	(___ftge@ff1+1)& (0+255),f,b
 11999  0038BC  0E80               	movlw	128
 12000  0038BE  1B96               	xorwf	(___ftge@ff1+2)& (0+255),f,b
 12001                           
 12002                           ; BSR set to: 0
 12003  0038C0  0E00               	movlw	0
 12004  0038C2  1B97               	xorwf	___ftge@ff2& (0+255),f,b
 12005  0038C4  0E00               	movlw	0
 12006  0038C6  1B98               	xorwf	(___ftge@ff2+1)& (0+255),f,b
 12007  0038C8  0E80               	movlw	128
 12008  0038CA  1B99               	xorwf	(___ftge@ff2+2)& (0+255),f,b
 12009  0038CC  5197               	movf	___ftge@ff2& (0+255),w,b
 12010  0038CE  5D94               	subwf	___ftge@ff1& (0+255),w,b
 12011  0038D0  5198               	movf	(___ftge@ff2+1)& (0+255),w,b
 12012  0038D2  5995               	subwfb	(___ftge@ff1+1)& (0+255),w,b
 12013  0038D4  5199               	movf	(___ftge@ff2+2)& (0+255),w,b
 12014  0038D6  5996               	subwfb	(___ftge@ff1+2)& (0+255),w,b
 12015  0038D8  B0D8               	btfsc	status,0,c
 12016  0038DA  D002               	goto	l5678
 12017                           
 12018                           ; BSR set to: 0
 12019  0038DC  90D8               	bcf	status,0,c
 12020  0038DE  0012               	return	
 12021  0038E0                     l5678:
 12022                           
 12023                           ; BSR set to: 0
 12024                           
 12025                           ; BSR set to: 0
 12026  0038E0  80D8               	bsf	status,0,c
 12027                           
 12028                           ; BSR set to: 0
 12029  0038E2  0012               	return	
 12030  0038E4                     __end_of___ftge:
 12031                           	opt stack 0
 12032                           tosu	equ	0xFFF
 12033                           tosh	equ	0xFFE
 12034                           tosl	equ	0xFFD
 12035                           pclath	equ	0xFFA
 12036                           tblptru	equ	0xFF8
 12037                           tblptrh	equ	0xFF7
 12038                           tblptrl	equ	0xFF6
 12039                           tablat	equ	0xFF5
 12040                           prodh	equ	0xFF4
 12041                           prodl	equ	0xFF3
 12042                           intcon	equ	0xFF2
 12043                           indf0	equ	0xFEF
 12044                           postinc0	equ	0xFEE
 12045                           fsr0h	equ	0xFEA
 12046                           fsr0l	equ	0xFE9
 12047                           wreg	equ	0xFE8
 12048                           postdec1	equ	0xFE5
 12049                           plusw1	equ	0xFE3
 12050                           fsr1l	equ	0xFE1
 12051                           indf2	equ	0xFDF
 12052                           postinc2	equ	0xFDE
 12053                           postdec2	equ	0xFDD
 12054                           plusw2	equ	0xFDB
 12055                           fsr2h	equ	0xFDA
 12056                           fsr2l	equ	0xFD9
 12057                           status	equ	0xFD8
 12058                           
 12059 ;; *************** function ___ftadd *****************
 12060 ;; Defined at:
 12061 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 12062 ;; Parameters:    Size  Location     Type
 12063 ;;  f1              3    8[BANK0 ] float 
 12064 ;;  f2              3   11[BANK0 ] float 
 12065 ;; Auto vars:     Size  Location     Type
 12066 ;;  exp1            1   19[BANK0 ] unsigned char 
 12067 ;;  exp2            1   18[BANK0 ] unsigned char 
 12068 ;;  sign            1   17[BANK0 ] unsigned char 
 12069 ;; Return value:  Size  Location     Type
 12070 ;;                  3    8[BANK0 ] float 
 12071 ;; Registers used:
 12072 ;;		wreg, status,2, status,0, cstack
 12073 ;; Tracked objects:
 12074 ;;		On entry : 0/0
 12075 ;;		On exit  : 0/0
 12076 ;;		Unchanged: 0/0
 12077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12078 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12079 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12080 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12081 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12082 ;;Total ram usage:       12 bytes
 12083 ;; Hardware stack levels used:    1
 12084 ;; Hardware stack levels required when called:    5
 12085 ;; This function calls:
 12086 ;;		___ftpack
 12087 ;; This function is called by:
 12088 ;;		_packageCompartment
 12089 ;;		_clearing
 12090 ;; This function uses a non-reentrant model
 12091 ;;
 12092                           
 12093                           	psect	text28
 12094  002D3C                     __ptext28:
 12095                           	opt stack 0
 12096  002D3C                     ___ftadd:
 12097                           	opt stack 22
 12098                           
 12099                           ; BSR set to: 0
 12100                           ;incstack = 0
 12101  002D3C  C08A  F08E         	movff	___ftadd@f1+2,??___ftadd
 12102  002D40  0100               	movlb	0	; () banked
 12103  002D42  6B8F               	clrf	(??___ftadd+1)& (0+255),b
 12104  002D44  6B90               	clrf	(??___ftadd+2)& (0+255),b
 12105  002D46  3589               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 12106  002D48  378E               	rlcf	??___ftadd& (0+255),f,b
 12107  002D4A  E301               	bnc	u8001
 12108  002D4C  818F               	bsf	(??___ftadd+1)& (0+255),0,b
 12109  002D4E                     u8001:
 12110  002D4E  518E               	movf	??___ftadd& (0+255),w,b
 12111  002D50  6F93               	movwf	___ftadd@exp1& (0+255),b
 12112  002D52  C08D  F08E         	movff	___ftadd@f2+2,??___ftadd
 12113  002D56  6B8F               	clrf	(??___ftadd+1)& (0+255),b
 12114  002D58  6B90               	clrf	(??___ftadd+2)& (0+255),b
 12115  002D5A  358C               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 12116  002D5C  378E               	rlcf	??___ftadd& (0+255),f,b
 12117  002D5E  E301               	bnc	u8011
 12118  002D60  818F               	bsf	(??___ftadd+1)& (0+255),0,b
 12119  002D62                     u8011:
 12120  002D62  518E               	movf	??___ftadd& (0+255),w,b
 12121  002D64  6F92               	movwf	___ftadd@exp2& (0+255),b
 12122                           
 12123                           ; BSR set to: 0
 12124  002D66  5193               	movf	___ftadd@exp1& (0+255),w,b
 12125  002D68  B4D8               	btfsc	status,2,c
 12126  002D6A  D00B               	goto	u8040
 12127                           
 12128                           ; BSR set to: 0
 12129  002D6C  5192               	movf	___ftadd@exp2& (0+255),w,b
 12130  002D6E  5D93               	subwf	___ftadd@exp1& (0+255),w,b
 12131  002D70  B0D8               	btfsc	status,0,c
 12132  002D72  D00E               	goto	l1209
 12133                           
 12134                           ; BSR set to: 0
 12135  002D74  5193               	movf	___ftadd@exp1& (0+255),w,b
 12136  002D76  0800               	sublw	0
 12137  002D78  2592               	addwf	___ftadd@exp2& (0+255),w,b
 12138  002D7A  6F8E               	movwf	??___ftadd& (0+255),b
 12139  002D7C  0E18               	movlw	24
 12140  002D7E  658E               	cpfsgt	??___ftadd& (0+255),b
 12141  002D80  D007               	goto	l1209
 12142  002D82                     u8040:
 12143                           
 12144                           ; BSR set to: 0
 12145  002D82  C08B  F088         	movff	___ftadd@f2,?___ftadd
 12146  002D86  C08C  F089         	movff	___ftadd@f2+1,?___ftadd+1
 12147  002D8A  C08D  F08A         	movff	___ftadd@f2+2,?___ftadd+2
 12148  002D8E  0012               	return	
 12149  002D90                     l1209:
 12150                           
 12151                           ; BSR set to: 0
 12152                           
 12153                           ; BSR set to: 0
 12154  002D90  5192               	movf	___ftadd@exp2& (0+255),w,b
 12155  002D92  B4D8               	btfsc	status,2,c
 12156  002D94  D00B               	goto	u8070
 12157                           
 12158                           ; BSR set to: 0
 12159  002D96  5193               	movf	___ftadd@exp1& (0+255),w,b
 12160  002D98  5D92               	subwf	___ftadd@exp2& (0+255),w,b
 12161  002D9A  B0D8               	btfsc	status,0,c
 12162  002D9C  D00E               	goto	l1213
 12163                           
 12164                           ; BSR set to: 0
 12165  002D9E  5192               	movf	___ftadd@exp2& (0+255),w,b
 12166  002DA0  0800               	sublw	0
 12167  002DA2  2593               	addwf	___ftadd@exp1& (0+255),w,b
 12168  002DA4  6F8E               	movwf	??___ftadd& (0+255),b
 12169  002DA6  0E18               	movlw	24
 12170  002DA8  658E               	cpfsgt	??___ftadd& (0+255),b
 12171  002DAA  D007               	goto	l1213
 12172  002DAC                     u8070:
 12173                           
 12174                           ; BSR set to: 0
 12175  002DAC  C088  F088         	movff	___ftadd@f1,?___ftadd
 12176  002DB0  C089  F089         	movff	___ftadd@f1+1,?___ftadd+1
 12177  002DB4  C08A  F08A         	movff	___ftadd@f1+2,?___ftadd+2
 12178  002DB8  0012               	return	
 12179  002DBA                     l1213:
 12180                           
 12181                           ; BSR set to: 0
 12182                           
 12183                           ; BSR set to: 0
 12184  002DBA  0E06               	movlw	6
 12185  002DBC  6F91               	movwf	___ftadd@sign& (0+255),b
 12186                           
 12187                           ; BSR set to: 0
 12188  002DBE  BF8A               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 12189                           
 12190                           ; BSR set to: 0
 12191  002DC0  8F91               	bsf	___ftadd@sign& (0+255),7,b
 12192                           
 12193                           ; BSR set to: 0
 12194                           
 12195                           ; BSR set to: 0
 12196  002DC2  BF8D               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 12197                           
 12198                           ; BSR set to: 0
 12199  002DC4  8D91               	bsf	___ftadd@sign& (0+255),6,b
 12200                           
 12201                           ; BSR set to: 0
 12202  002DC6  8F89               	bsf	(___ftadd@f1+1)& (0+255),7,b
 12203                           
 12204                           ; BSR set to: 0
 12205  002DC8  0EFF               	movlw	255
 12206  002DCA  1788               	andwf	___ftadd@f1& (0+255),f,b
 12207  002DCC  0EFF               	movlw	255
 12208  002DCE  1789               	andwf	(___ftadd@f1+1)& (0+255),f,b
 12209  002DD0  0E00               	movlw	0
 12210  002DD2  178A               	andwf	(___ftadd@f1+2)& (0+255),f,b
 12211  002DD4  8F8C               	bsf	(___ftadd@f2+1)& (0+255),7,b
 12212                           
 12213                           ; BSR set to: 0
 12214  002DD6  0EFF               	movlw	255
 12215  002DD8  178B               	andwf	___ftadd@f2& (0+255),f,b
 12216  002DDA  0EFF               	movlw	255
 12217  002DDC  178C               	andwf	(___ftadd@f2+1)& (0+255),f,b
 12218  002DDE  0E00               	movlw	0
 12219  002DE0  178D               	andwf	(___ftadd@f2+2)& (0+255),f,b
 12220                           
 12221                           ; BSR set to: 0
 12222  002DE2  5192               	movf	___ftadd@exp2& (0+255),w,b
 12223  002DE4  5D93               	subwf	___ftadd@exp1& (0+255),w,b
 12224  002DE6  B0D8               	btfsc	status,0,c
 12225  002DE8  D01B               	goto	l1218
 12226  002DEA                     u8100:
 12227                           
 12228                           ; BSR set to: 0
 12229                           
 12230                           ; BSR set to: 0
 12231  002DEA  90D8               	bcf	status,0,c
 12232  002DEC  378B               	rlcf	___ftadd@f2& (0+255),f,b
 12233  002DEE  378C               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 12234  002DF0  378D               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 12235  002DF2  0792               	decf	___ftadd@exp2& (0+255),f,b
 12236                           
 12237                           ; BSR set to: 0
 12238  002DF4  5193               	movf	___ftadd@exp1& (0+255),w,b
 12239  002DF6  1992               	xorwf	___ftadd@exp2& (0+255),w,b
 12240  002DF8  B4D8               	btfsc	status,2,c
 12241  002DFA  D00D               	goto	l1223
 12242                           
 12243                           ; BSR set to: 0
 12244  002DFC  0791               	decf	___ftadd@sign& (0+255),f,b
 12245  002DFE  C091  F08E         	movff	___ftadd@sign,??___ftadd
 12246  002E02  0E07               	movlw	7
 12247  002E04  178E               	andwf	??___ftadd& (0+255),f,b
 12248  002E06  B4D8               	btfsc	status,2,c
 12249  002E08  D006               	goto	l1223
 12250  002E0A  D7EF               	goto	u8100
 12251  002E0C                     
 12252                           ; BSR set to: 0
 12253                           
 12254                           ; BSR set to: 0
 12255  002E0C  90D8               	bcf	status,0,c
 12256  002E0E  338A               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 12257  002E10  3389               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 12258  002E12  3388               	rrcf	___ftadd@f1& (0+255),f,b
 12259  002E14  2B93               	incf	___ftadd@exp1& (0+255),f,b
 12260  002E16                     l1223:
 12261                           
 12262                           ; BSR set to: 0
 12263                           
 12264                           ; BSR set to: 0
 12265  002E16  5192               	movf	___ftadd@exp2& (0+255),w,b
 12266  002E18  1993               	xorwf	___ftadd@exp1& (0+255),w,b
 12267  002E1A  B4D8               	btfsc	status,2,c
 12268  002E1C  D01F               	goto	u8170
 12269  002E1E  D7F6               	goto	l1224
 12270  002E20                     l1218:
 12271                           
 12272                           ; BSR set to: 0
 12273                           
 12274                           ; BSR set to: 0
 12275  002E20  5193               	movf	___ftadd@exp1& (0+255),w,b
 12276  002E22  5D92               	subwf	___ftadd@exp2& (0+255),w,b
 12277  002E24  B0D8               	btfsc	status,0,c
 12278  002E26  D01A               	goto	u8170
 12279  002E28                     u8140:
 12280                           
 12281                           ; BSR set to: 0
 12282                           
 12283                           ; BSR set to: 0
 12284  002E28  90D8               	bcf	status,0,c
 12285  002E2A  3788               	rlcf	___ftadd@f1& (0+255),f,b
 12286  002E2C  3789               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 12287  002E2E  378A               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 12288  002E30  0793               	decf	___ftadd@exp1& (0+255),f,b
 12289                           
 12290                           ; BSR set to: 0
 12291  002E32  5193               	movf	___ftadd@exp1& (0+255),w,b
 12292  002E34  1992               	xorwf	___ftadd@exp2& (0+255),w,b
 12293  002E36  B4D8               	btfsc	status,2,c
 12294  002E38  D00D               	goto	l1232
 12295                           
 12296                           ; BSR set to: 0
 12297  002E3A  0791               	decf	___ftadd@sign& (0+255),f,b
 12298  002E3C  C091  F08E         	movff	___ftadd@sign,??___ftadd
 12299  002E40  0E07               	movlw	7
 12300  002E42  178E               	andwf	??___ftadd& (0+255),f,b
 12301  002E44  B4D8               	btfsc	status,2,c
 12302  002E46  D006               	goto	l1232
 12303  002E48  D7EF               	goto	u8140
 12304  002E4A                     
 12305                           ; BSR set to: 0
 12306                           
 12307                           ; BSR set to: 0
 12308  002E4A  90D8               	bcf	status,0,c
 12309  002E4C  338D               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 12310  002E4E  338C               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 12311  002E50  338B               	rrcf	___ftadd@f2& (0+255),f,b
 12312  002E52  2B92               	incf	___ftadd@exp2& (0+255),f,b
 12313  002E54                     l1232:
 12314                           
 12315                           ; BSR set to: 0
 12316                           
 12317                           ; BSR set to: 0
 12318  002E54  5192               	movf	___ftadd@exp2& (0+255),w,b
 12319  002E56  1993               	xorwf	___ftadd@exp1& (0+255),w,b
 12320  002E58  A4D8               	btfss	status,2,c
 12321  002E5A  D7F7               	goto	l1233
 12322  002E5C                     u8170:
 12323                           
 12324                           ; BSR set to: 0
 12325                           
 12326                           ; BSR set to: 0
 12327                           
 12328                           ; BSR set to: 0
 12329  002E5C  AF91               	btfss	___ftadd@sign& (0+255),7,b
 12330  002E5E  D00C               	goto	l1235
 12331                           
 12332                           ; BSR set to: 0
 12333  002E60  0EFF               	movlw	255
 12334  002E62  1B88               	xorwf	___ftadd@f1& (0+255),f,b
 12335  002E64  0EFF               	movlw	255
 12336  002E66  1B89               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 12337  002E68  0EFF               	movlw	255
 12338  002E6A  1B8A               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 12339  002E6C  0E01               	movlw	1
 12340  002E6E  2788               	addwf	___ftadd@f1& (0+255),f,b
 12341  002E70  0E00               	movlw	0
 12342  002E72  2389               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 12343  002E74  0E00               	movlw	0
 12344  002E76  238A               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 12345  002E78                     l1235:
 12346                           
 12347                           ; BSR set to: 0
 12348  002E78  AD91               	btfss	___ftadd@sign& (0+255),6,b
 12349  002E7A  D00C               	goto	l1236
 12350                           
 12351                           ; BSR set to: 0
 12352  002E7C  0EFF               	movlw	255
 12353  002E7E  1B8B               	xorwf	___ftadd@f2& (0+255),f,b
 12354  002E80  0EFF               	movlw	255
 12355  002E82  1B8C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 12356  002E84  0EFF               	movlw	255
 12357  002E86  1B8D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 12358  002E88  0E01               	movlw	1
 12359  002E8A  278B               	addwf	___ftadd@f2& (0+255),f,b
 12360  002E8C  0E00               	movlw	0
 12361  002E8E  238C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 12362  002E90  0E00               	movlw	0
 12363  002E92  238D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 12364  002E94                     l1236:
 12365                           
 12366                           ; BSR set to: 0
 12367                           
 12368                           ; BSR set to: 0
 12369  002E94  0E00               	movlw	0
 12370  002E96  6F91               	movwf	___ftadd@sign& (0+255),b
 12371                           
 12372                           ; BSR set to: 0
 12373  002E98  5188               	movf	___ftadd@f1& (0+255),w,b
 12374  002E9A  278B               	addwf	___ftadd@f2& (0+255),f,b
 12375  002E9C  5189               	movf	(___ftadd@f1+1)& (0+255),w,b
 12376  002E9E  238C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 12377  002EA0  518A               	movf	(___ftadd@f1+2)& (0+255),w,b
 12378  002EA2  238D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 12379                           
 12380                           ; BSR set to: 0
 12381  002EA4  AF8D               	btfss	(___ftadd@f2+2)& (0+255),7,b
 12382  002EA6  D00E               	goto	l1237
 12383                           
 12384                           ; BSR set to: 0
 12385  002EA8  0EFF               	movlw	255
 12386  002EAA  1B8B               	xorwf	___ftadd@f2& (0+255),f,b
 12387  002EAC  0EFF               	movlw	255
 12388  002EAE  1B8C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 12389  002EB0  0EFF               	movlw	255
 12390  002EB2  1B8D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 12391  002EB4  0E01               	movlw	1
 12392  002EB6  278B               	addwf	___ftadd@f2& (0+255),f,b
 12393  002EB8  0E00               	movlw	0
 12394  002EBA  238C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 12395  002EBC  0E00               	movlw	0
 12396  002EBE  238D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 12397                           
 12398                           ; BSR set to: 0
 12399  002EC0  0E01               	movlw	1
 12400  002EC2  6F91               	movwf	___ftadd@sign& (0+255),b
 12401  002EC4                     l1237:
 12402                           
 12403                           ; BSR set to: 0
 12404                           
 12405                           ; BSR set to: 0
 12406  002EC4  C08B  F080         	movff	___ftadd@f2,___ftpack@arg
 12407  002EC8  C08C  F081         	movff	___ftadd@f2+1,___ftpack@arg+1
 12408  002ECC  C08D  F082         	movff	___ftadd@f2+2,___ftpack@arg+2
 12409  002ED0  C093  F083         	movff	___ftadd@exp1,___ftpack@exp
 12410  002ED4  C091  F084         	movff	___ftadd@sign,___ftpack@sign
 12411  002ED8  EC2A  F01B         	call	___ftpack	;wreg free
 12412  002EDC  C080  F088         	movff	?___ftpack,?___ftadd
 12413  002EE0  C081  F089         	movff	?___ftpack+1,?___ftadd+1
 12414  002EE4  C082  F08A         	movff	?___ftpack+2,?___ftadd+2
 12415  002EE8  0012               	return	
 12416  002EEA                     __end_of___ftadd:
 12417                           	opt stack 0
 12418                           tosu	equ	0xFFF
 12419                           tosh	equ	0xFFE
 12420                           tosl	equ	0xFFD
 12421                           pclath	equ	0xFFA
 12422                           tblptru	equ	0xFF8
 12423                           tblptrh	equ	0xFF7
 12424                           tblptrl	equ	0xFF6
 12425                           tablat	equ	0xFF5
 12426                           prodh	equ	0xFF4
 12427                           prodl	equ	0xFF3
 12428                           intcon	equ	0xFF2
 12429                           indf0	equ	0xFEF
 12430                           postinc0	equ	0xFEE
 12431                           fsr0h	equ	0xFEA
 12432                           fsr0l	equ	0xFE9
 12433                           wreg	equ	0xFE8
 12434                           postdec1	equ	0xFE5
 12435                           plusw1	equ	0xFE3
 12436                           fsr1l	equ	0xFE1
 12437                           indf2	equ	0xFDF
 12438                           postinc2	equ	0xFDE
 12439                           postdec2	equ	0xFDD
 12440                           plusw2	equ	0xFDB
 12441                           fsr2h	equ	0xFDA
 12442                           fsr2l	equ	0xFD9
 12443                           status	equ	0xFD8
 12444                           
 12445 ;; *************** function ___ftpack *****************
 12446 ;; Defined at:
 12447 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 12448 ;; Parameters:    Size  Location     Type
 12449 ;;  arg             3    0[BANK0 ] unsigned um
 12450 ;;  exp             1    3[BANK0 ] unsigned char 
 12451 ;;  sign            1    4[BANK0 ] unsigned char 
 12452 ;; Auto vars:     Size  Location     Type
 12453 ;;		None
 12454 ;; Return value:  Size  Location     Type
 12455 ;;                  3    0[BANK0 ] float 
 12456 ;; Registers used:
 12457 ;;		wreg, status,2, status,0
 12458 ;; Tracked objects:
 12459 ;;		On entry : 0/0
 12460 ;;		On exit  : 0/0
 12461 ;;		Unchanged: 0/0
 12462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12463 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12465 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12466 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12467 ;;Total ram usage:        8 bytes
 12468 ;; Hardware stack levels used:    1
 12469 ;; Hardware stack levels required when called:    4
 12470 ;; This function calls:
 12471 ;;		Nothing
 12472 ;; This function is called by:
 12473 ;;		___ftadd
 12474 ;; This function uses a non-reentrant model
 12475 ;;
 12476                           
 12477                           	psect	text29
 12478  003654                     __ptext29:
 12479                           	opt stack 0
 12480  003654                     ___ftpack:
 12481                           	opt stack 22
 12482                           
 12483                           ;incstack = 0
 12484  003654  0100               	movlb	0	; () banked
 12485  003656  5183               	movf	___ftpack@exp& (0+255),w,b
 12486  003658  B4D8               	btfsc	status,2,c
 12487  00365A  D005               	goto	u7010
 12488                           
 12489                           ; BSR set to: 0
 12490  00365C  5180               	movf	___ftpack@arg& (0+255),w,b
 12491  00365E  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 12492  003660  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 12493  003662  A4D8               	btfss	status,2,c
 12494  003664  D00C               	goto	l1178
 12495  003666                     u7010:
 12496                           
 12497                           ; BSR set to: 0
 12498                           
 12499                           ; BSR set to: 0
 12500  003666  0E00               	movlw	0
 12501  003668  6F80               	movwf	?___ftpack& (0+255),b
 12502  00366A  0E00               	movlw	0
 12503  00366C  6F81               	movwf	(?___ftpack+1)& (0+255),b
 12504  00366E  0E00               	movlw	0
 12505  003670  6F82               	movwf	(?___ftpack+2)& (0+255),b
 12506                           
 12507                           ; BSR set to: 0
 12508  003672  0012               	return	
 12509  003674                     
 12510                           ; BSR set to: 0
 12511                           
 12512                           ; BSR set to: 0
 12513  003674  2B83               	incf	___ftpack@exp& (0+255),f,b
 12514  003676  90D8               	bcf	status,0,c
 12515  003678  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 12516  00367A  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 12517  00367C  3380               	rrcf	___ftpack@arg& (0+255),f,b
 12518  00367E                     l1178:
 12519                           
 12520                           ; BSR set to: 0
 12521                           
 12522                           ; BSR set to: 0
 12523  00367E  0E00               	movlw	0
 12524  003680  1580               	andwf	___ftpack@arg& (0+255),w,b
 12525  003682  6F85               	movwf	??___ftpack& (0+255),b
 12526  003684  0E00               	movlw	0
 12527  003686  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
 12528  003688  6F86               	movwf	(??___ftpack+1)& (0+255),b
 12529  00368A  0EFE               	movlw	254
 12530  00368C  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
 12531  00368E  6F87               	movwf	(??___ftpack+2)& (0+255),b
 12532  003690  5185               	movf	??___ftpack& (0+255),w,b
 12533  003692  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
 12534  003694  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
 12535  003696  B4D8               	btfsc	status,2,c
 12536  003698  D00C               	goto	l1181
 12537  00369A  D7EC               	goto	l1179
 12538  00369C                     
 12539                           ; BSR set to: 0
 12540                           
 12541                           ; BSR set to: 0
 12542  00369C  2B83               	incf	___ftpack@exp& (0+255),f,b
 12543                           
 12544                           ; BSR set to: 0
 12545  00369E  0E01               	movlw	1
 12546  0036A0  2780               	addwf	___ftpack@arg& (0+255),f,b
 12547  0036A2  0E00               	movlw	0
 12548  0036A4  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 12549  0036A6  0E00               	movlw	0
 12550  0036A8  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 12551  0036AA  90D8               	bcf	status,0,c
 12552  0036AC  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 12553  0036AE  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 12554  0036B0  3380               	rrcf	___ftpack@arg& (0+255),f,b
 12555  0036B2                     l1181:
 12556                           
 12557                           ; BSR set to: 0
 12558                           
 12559                           ; BSR set to: 0
 12560  0036B2  0E00               	movlw	0
 12561  0036B4  1580               	andwf	___ftpack@arg& (0+255),w,b
 12562  0036B6  6F85               	movwf	??___ftpack& (0+255),b
 12563  0036B8  0E00               	movlw	0
 12564  0036BA  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
 12565  0036BC  6F86               	movwf	(??___ftpack+1)& (0+255),b
 12566  0036BE  0EFF               	movlw	255
 12567  0036C0  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
 12568  0036C2  6F87               	movwf	(??___ftpack+2)& (0+255),b
 12569  0036C4  5185               	movf	??___ftpack& (0+255),w,b
 12570  0036C6  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
 12571  0036C8  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
 12572  0036CA  B4D8               	btfsc	status,2,c
 12573  0036CC  D006               	goto	l1184
 12574  0036CE  D7E6               	goto	l1182
 12575  0036D0                     
 12576                           ; BSR set to: 0
 12577                           
 12578                           ; BSR set to: 0
 12579  0036D0  0783               	decf	___ftpack@exp& (0+255),f,b
 12580  0036D2  90D8               	bcf	status,0,c
 12581  0036D4  3780               	rlcf	___ftpack@arg& (0+255),f,b
 12582  0036D6  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 12583  0036D8  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 12584  0036DA                     l1184:
 12585                           
 12586                           ; BSR set to: 0
 12587                           
 12588                           ; BSR set to: 0
 12589  0036DA  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
 12590  0036DC  D003               	goto	u7050
 12591                           
 12592                           ; BSR set to: 0
 12593  0036DE  0E02               	movlw	2
 12594  0036E0  6183               	cpfslt	___ftpack@exp& (0+255),b
 12595  0036E2  D7F6               	goto	l1185
 12596  0036E4                     u7050:
 12597                           
 12598                           ; BSR set to: 0
 12599                           
 12600                           ; BSR set to: 0
 12601  0036E4  A183               	btfss	___ftpack@exp& (0+255),0,b
 12602                           
 12603                           ; BSR set to: 0
 12604  0036E6  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
 12605                           
 12606                           ; BSR set to: 0
 12607                           
 12608                           ; BSR set to: 0
 12609  0036E8  90D8               	bcf	status,0,c
 12610  0036EA  3383               	rrcf	___ftpack@exp& (0+255),f,b
 12611  0036EC  5183               	movf	___ftpack@exp& (0+255),w,b
 12612  0036EE  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 12613                           
 12614                           ; BSR set to: 0
 12615  0036F0  5184               	movf	___ftpack@sign& (0+255),w,b
 12616  0036F2  A4D8               	btfss	status,2,c
 12617                           
 12618                           ; BSR set to: 0
 12619  0036F4  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
 12620                           
 12621                           ; BSR set to: 0
 12622                           
 12623                           ; BSR set to: 0
 12624  0036F6  C080  F080         	movff	___ftpack@arg,?___ftpack
 12625  0036FA  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
 12626  0036FE  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
 12627  003702  0012               	return	
 12628  003704                     __end_of___ftpack:
 12629                           	opt stack 0
 12630                           tosu	equ	0xFFF
 12631                           tosh	equ	0xFFE
 12632                           tosl	equ	0xFFD
 12633                           pclath	equ	0xFFA
 12634                           tblptru	equ	0xFF8
 12635                           tblptrh	equ	0xFF7
 12636                           tblptrl	equ	0xFF6
 12637                           tablat	equ	0xFF5
 12638                           prodh	equ	0xFF4
 12639                           prodl	equ	0xFF3
 12640                           intcon	equ	0xFF2
 12641                           indf0	equ	0xFEF
 12642                           postinc0	equ	0xFEE
 12643                           fsr0h	equ	0xFEA
 12644                           fsr0l	equ	0xFE9
 12645                           wreg	equ	0xFE8
 12646                           postdec1	equ	0xFE5
 12647                           plusw1	equ	0xFE3
 12648                           fsr1l	equ	0xFE1
 12649                           indf2	equ	0xFDF
 12650                           postinc2	equ	0xFDE
 12651                           postdec2	equ	0xFDD
 12652                           plusw2	equ	0xFDB
 12653                           fsr2h	equ	0xFDA
 12654                           fsr2l	equ	0xFD9
 12655                           status	equ	0xFD8
 12656                           
 12657 ;; *************** function _I2C_Send *****************
 12658 ;; Defined at:
 12659 ;;		line 83 in file "helpers.c"
 12660 ;; Parameters:    Size  Location     Type
 12661 ;;  address         1    wreg     unsigned char 
 12662 ;;  data            2    3[BANK0 ] PTR unsigned char 
 12663 ;;		 -> STR_28(21), STR_24(14), inputEntry@msg(24), STR_23(25), 
 12664 ;;		 -> STR_14(17), STR_13(17), STR_12(14), STR_11(15), 
 12665 ;;		 -> clearing@instr(2), packaging@msg3(50), packaging@msg2(32), packaging@instr_324(2), 
 12666 ;;		 -> packaging@msg(34), packaging@instr(2), STR_7(33), packageCompartment@instr(2), 
 12667 ;;		 -> STR_6(28), STR_5(19), STR_4(17), STR_3(17), 
 12668 ;;		 -> STR_2(14), STR_1(15), 
 12669 ;; Auto vars:     Size  Location     Type
 12670 ;;  address         1    8[BANK0 ] unsigned char 
 12671 ;;  i               2    9[BANK0 ] int 
 12672 ;; Return value:  Size  Location     Type
 12673 ;;                  1    wreg      void 
 12674 ;; Registers used:
 12675 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12676 ;; Tracked objects:
 12677 ;;		On entry : 0/0
 12678 ;;		On exit  : 0/0
 12679 ;;		Unchanged: 0/0
 12680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12681 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12682 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12683 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12684 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12685 ;;Total ram usage:        8 bytes
 12686 ;; Hardware stack levels used:    1
 12687 ;; Hardware stack levels required when called:    6
 12688 ;; This function calls:
 12689 ;;		_I2C_Master_Start
 12690 ;;		_I2C_Master_Stop
 12691 ;;		_I2C_Master_Write
 12692 ;; This function is called by:
 12693 ;;		_packageCompartment
 12694 ;;		_packaging
 12695 ;;		_clearing
 12696 ;;		_inputEntry
 12697 ;;		_mainMenu
 12698 ;; This function uses a non-reentrant model
 12699 ;;
 12700                           
 12701                           	psect	text30
 12702  0037B2                     __ptext30:
 12703                           	opt stack 0
 12704  0037B2                     _I2C_Send:
 12705                           	opt stack 21
 12706                           
 12707                           ; BSR set to: 0
 12708                           ;incstack = 0
 12709                           ;I2C_Send@address stored from wreg
 12710  0037B2  0100               	movlb	0	; () banked
 12711  0037B4  6F88               	movwf	I2C_Send@address& (0+255),b
 12712                           
 12713                           ;helpers.c: 88: int i=0;
 12714  0037B6  0E00               	movlw	0
 12715  0037B8  0100               	movlb	0	; () banked
 12716  0037BA  6F8A               	movwf	(I2C_Send@i+1)& (0+255),b
 12717  0037BC  0E00               	movlw	0
 12718  0037BE  6F89               	movwf	I2C_Send@i& (0+255),b
 12719                           
 12720                           ; BSR set to: 0
 12721                           ;helpers.c: 90: I2C_Master_Start();
 12722  0037C0  EC05  F020         	call	_I2C_Master_Start	;wreg free
 12723                           
 12724                           ;helpers.c: 91: I2C_Master_Write(address);
 12725  0037C4  C088  F081         	movff	I2C_Send@address,I2C_Master_Write@byteToWrite
 12726  0037C8  0100               	movlb	0	; () banked
 12727  0037CA  6B82               	clrf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
 12728  0037CC  ECFC  F01F         	call	_I2C_Master_Write	;wreg free
 12729                           
 12730                           ;helpers.c: 93: while (data[i] != 0) {
 12731  0037D0  D022               	goto	l577
 12732  0037D2                     
 12733                           ;helpers.c: 94: I2C_Master_Write(data[i]);
 12734  0037D2  0100               	movlb	0	; () banked
 12735  0037D4  5189               	movf	I2C_Send@i& (0+255),w,b
 12736  0037D6  2583               	addwf	I2C_Send@data& (0+255),w,b
 12737  0037D8  6F85               	movwf	??_I2C_Send& (0+255),b
 12738  0037DA  518A               	movf	(I2C_Send@i+1)& (0+255),w,b
 12739  0037DC  2184               	addwfc	(I2C_Send@data+1)& (0+255),w,b
 12740  0037DE  6F86               	movwf	(??_I2C_Send+1)& (0+255),b
 12741  0037E0  C085  FFF6         	movff	??_I2C_Send,tblptrl
 12742  0037E4  C086  FFF7         	movff	??_I2C_Send+1,tblptrh
 12743  0037E8  0E00               	movlw	low (__mediumconst shr (0+16))
 12744  0037EA  6EF8               	movwf	tblptru,c
 12745  0037EC  0E0F               	movlw	(high __ramtop+-1)
 12746  0037EE  64F7               	cpfsgt	tblptrh,c
 12747  0037F0  D003               	bra	u7267
 12748  0037F2  0008               	tblrd		*
 12749  0037F4  50F5               	movf	tablat,w,c
 12750  0037F6  D005               	bra	u7260
 12751  0037F8                     u7267:
 12752  0037F8  CFF6 FFE9          	movff	tblptrl,fsr0l
 12753  0037FC  CFF7 FFEA          	movff	tblptrh,fsr0h
 12754  003800  50EF               	movf	indf0,w,c
 12755  003802                     u7260:
 12756  003802  0100               	movlb	0	; () banked
 12757  003804  6F87               	movwf	(??_I2C_Send+2)& (0+255),b
 12758  003806  5187               	movf	(??_I2C_Send+2)& (0+255),w,b
 12759  003808  6F81               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
 12760  00380A  6B82               	clrf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
 12761  00380C  ECFC  F01F         	call	_I2C_Master_Write	;wreg free
 12762                           
 12763                           ;helpers.c: 95: i++;
 12764  003810  0100               	movlb	0	; () banked
 12765  003812  4B89               	infsnz	I2C_Send@i& (0+255),f,b
 12766  003814  2B8A               	incf	(I2C_Send@i+1)& (0+255),f,b
 12767  003816                     l577:
 12768                           
 12769                           ; BSR set to: 0
 12770  003816  0100               	movlb	0	; () banked
 12771  003818  5189               	movf	I2C_Send@i& (0+255),w,b
 12772  00381A  2583               	addwf	I2C_Send@data& (0+255),w,b
 12773  00381C  6F85               	movwf	??_I2C_Send& (0+255),b
 12774  00381E  518A               	movf	(I2C_Send@i+1)& (0+255),w,b
 12775  003820  2184               	addwfc	(I2C_Send@data+1)& (0+255),w,b
 12776  003822  6F86               	movwf	(??_I2C_Send+1)& (0+255),b
 12777  003824  C085  FFF6         	movff	??_I2C_Send,tblptrl
 12778  003828  C086  FFF7         	movff	??_I2C_Send+1,tblptrh
 12779  00382C  0E00               	movlw	low (__mediumconst shr (0+16))
 12780  00382E  6EF8               	movwf	tblptru,c
 12781  003830  0E0F               	movlw	(high __ramtop+-1)
 12782  003832  64F7               	cpfsgt	tblptrh,c
 12783  003834  D003               	bra	u7277
 12784  003836  0008               	tblrd		*
 12785  003838  50F5               	movf	tablat,w,c
 12786  00383A  D005               	bra	u7270
 12787  00383C                     u7277:
 12788  00383C  CFF6 FFE9          	movff	tblptrl,fsr0l
 12789  003840  CFF7 FFEA          	movff	tblptrh,fsr0h
 12790  003844  50EF               	movf	indf0,w,c
 12791  003846                     u7270:
 12792  003846  0900               	iorlw	0
 12793  003848  A4D8               	btfss	status,2,c
 12794  00384A  D7C3               	goto	l578
 12795                           
 12796                           ;helpers.c: 96: }
 12797                           ;helpers.c: 98: I2C_Master_Stop();
 12798  00384C  EC01  F020         	call	_I2C_Master_Stop	;wreg free
 12799  003850  0012               	return	
 12800  003852                     __end_of_I2C_Send:
 12801                           	opt stack 0
 12802                           tosu	equ	0xFFF
 12803                           tosh	equ	0xFFE
 12804                           tosl	equ	0xFFD
 12805                           pclath	equ	0xFFA
 12806                           tblptru	equ	0xFF8
 12807                           tblptrh	equ	0xFF7
 12808                           tblptrl	equ	0xFF6
 12809                           tablat	equ	0xFF5
 12810                           prodh	equ	0xFF4
 12811                           prodl	equ	0xFF3
 12812                           intcon	equ	0xFF2
 12813                           indf0	equ	0xFEF
 12814                           postinc0	equ	0xFEE
 12815                           fsr0h	equ	0xFEA
 12816                           fsr0l	equ	0xFE9
 12817                           wreg	equ	0xFE8
 12818                           postdec1	equ	0xFE5
 12819                           plusw1	equ	0xFE3
 12820                           fsr1l	equ	0xFE1
 12821                           indf2	equ	0xFDF
 12822                           postinc2	equ	0xFDE
 12823                           postdec2	equ	0xFDD
 12824                           plusw2	equ	0xFDB
 12825                           fsr2h	equ	0xFDA
 12826                           fsr2l	equ	0xFD9
 12827                           status	equ	0xFD8
 12828                           
 12829 ;; *************** function ___aldiv *****************
 12830 ;; Defined at:
 12831 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
 12832 ;; Parameters:    Size  Location     Type
 12833 ;;  dividend        4    0[BANK0 ] long 
 12834 ;;  divisor         4    4[BANK0 ] long 
 12835 ;; Auto vars:     Size  Location     Type
 12836 ;;  quotient        4   10[BANK0 ] long 
 12837 ;;  sign            1    9[BANK0 ] unsigned char 
 12838 ;;  counter         1    8[BANK0 ] unsigned char 
 12839 ;; Return value:  Size  Location     Type
 12840 ;;                  4    0[BANK0 ] long 
 12841 ;; Registers used:
 12842 ;;		wreg, status,2, status,0
 12843 ;; Tracked objects:
 12844 ;;		On entry : 0/0
 12845 ;;		On exit  : 0/0
 12846 ;;		Unchanged: 0/0
 12847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12848 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12849 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12851 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12852 ;;Total ram usage:       14 bytes
 12853 ;; Hardware stack levels used:    1
 12854 ;; Hardware stack levels required when called:    4
 12855 ;; This function calls:
 12856 ;;		Nothing
 12857 ;; This function is called by:
 12858 ;;		_mainMenu
 12859 ;; This function uses a non-reentrant model
 12860 ;;
 12861                           
 12862                           	psect	text31
 12863  003294                     __ptext31:
 12864                           	opt stack 0
 12865  003294                     ___aldiv:
 12866                           	opt stack 25
 12867                           
 12868                           ;incstack = 0
 12869  003294  0E00               	movlw	0
 12870  003296  0100               	movlb	0	; () banked
 12871  003298  6F89               	movwf	___aldiv@sign& (0+255),b
 12872                           
 12873                           ; BSR set to: 0
 12874  00329A  AF87               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 12875  00329C  D00A               	goto	l1019
 12876                           
 12877                           ; BSR set to: 0
 12878  00329E  1F87               	comf	(___aldiv@divisor+3)& (0+255),f,b
 12879  0032A0  1F86               	comf	(___aldiv@divisor+2)& (0+255),f,b
 12880  0032A2  1F85               	comf	(___aldiv@divisor+1)& (0+255),f,b
 12881  0032A4  6D84               	negf	___aldiv@divisor& (0+255),b
 12882  0032A6  0E00               	movlw	0
 12883  0032A8  2385               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
 12884  0032AA  2386               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
 12885  0032AC  2387               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
 12886                           
 12887                           ; BSR set to: 0
 12888  0032AE  0E01               	movlw	1
 12889  0032B0  6F89               	movwf	___aldiv@sign& (0+255),b
 12890  0032B2                     l1019:
 12891                           
 12892                           ; BSR set to: 0
 12893                           
 12894                           ; BSR set to: 0
 12895  0032B2  AF83               	btfss	(___aldiv@dividend+3)& (0+255),7,b
 12896  0032B4  D00A               	goto	l1020
 12897                           
 12898                           ; BSR set to: 0
 12899  0032B6  1F83               	comf	(___aldiv@dividend+3)& (0+255),f,b
 12900  0032B8  1F82               	comf	(___aldiv@dividend+2)& (0+255),f,b
 12901  0032BA  1F81               	comf	(___aldiv@dividend+1)& (0+255),f,b
 12902  0032BC  6D80               	negf	___aldiv@dividend& (0+255),b
 12903  0032BE  0E00               	movlw	0
 12904  0032C0  2381               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
 12905  0032C2  2382               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
 12906  0032C4  2383               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
 12907                           
 12908                           ; BSR set to: 0
 12909  0032C6  0E01               	movlw	1
 12910  0032C8  1B89               	xorwf	___aldiv@sign& (0+255),f,b
 12911  0032CA                     l1020:
 12912                           
 12913                           ; BSR set to: 0
 12914                           
 12915                           ; BSR set to: 0
 12916  0032CA  0E00               	movlw	0
 12917  0032CC  6F8A               	movwf	___aldiv@quotient& (0+255),b
 12918  0032CE  0E00               	movlw	0
 12919  0032D0  6F8B               	movwf	(___aldiv@quotient+1)& (0+255),b
 12920  0032D2  0E00               	movlw	0
 12921  0032D4  6F8C               	movwf	(___aldiv@quotient+2)& (0+255),b
 12922  0032D6  0E00               	movlw	0
 12923  0032D8  6F8D               	movwf	(___aldiv@quotient+3)& (0+255),b
 12924                           
 12925                           ; BSR set to: 0
 12926  0032DA  5184               	movf	___aldiv@divisor& (0+255),w,b
 12927  0032DC  1185               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
 12928  0032DE  1186               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
 12929  0032E0  1187               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
 12930  0032E2  B4D8               	btfsc	status,2,c
 12931  0032E4  D02A               	goto	l1027
 12932                           
 12933                           ; BSR set to: 0
 12934  0032E6  0E01               	movlw	1
 12935  0032E8  6F88               	movwf	___aldiv@counter& (0+255),b
 12936  0032EA  D006               	goto	l1022
 12937  0032EC                     
 12938                           ; BSR set to: 0
 12939                           
 12940                           ; BSR set to: 0
 12941  0032EC  90D8               	bcf	status,0,c
 12942  0032EE  3784               	rlcf	___aldiv@divisor& (0+255),f,b
 12943  0032F0  3785               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
 12944  0032F2  3786               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
 12945  0032F4  3787               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
 12946  0032F6  2B88               	incf	___aldiv@counter& (0+255),f,b
 12947  0032F8                     l1022:
 12948                           
 12949                           ; BSR set to: 0
 12950                           
 12951                           ; BSR set to: 0
 12952  0032F8  AF87               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 12953  0032FA  D7F8               	goto	l1023
 12954  0032FC                     u9430:
 12955                           
 12956                           ; BSR set to: 0
 12957                           
 12958                           ; BSR set to: 0
 12959                           
 12960                           ; BSR set to: 0
 12961  0032FC  90D8               	bcf	status,0,c
 12962  0032FE  378A               	rlcf	___aldiv@quotient& (0+255),f,b
 12963  003300  378B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
 12964  003302  378C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
 12965  003304  378D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
 12966                           
 12967                           ; BSR set to: 0
 12968  003306  5184               	movf	___aldiv@divisor& (0+255),w,b
 12969  003308  5D80               	subwf	___aldiv@dividend& (0+255),w,b
 12970  00330A  5185               	movf	(___aldiv@divisor+1)& (0+255),w,b
 12971  00330C  5981               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
 12972  00330E  5186               	movf	(___aldiv@divisor+2)& (0+255),w,b
 12973  003310  5982               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
 12974  003312  5187               	movf	(___aldiv@divisor+3)& (0+255),w,b
 12975  003314  5983               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
 12976  003316  A0D8               	btfss	status,0,c
 12977  003318  D009               	goto	l1026
 12978                           
 12979                           ; BSR set to: 0
 12980  00331A  5184               	movf	___aldiv@divisor& (0+255),w,b
 12981  00331C  5F80               	subwf	___aldiv@dividend& (0+255),f,b
 12982  00331E  5185               	movf	(___aldiv@divisor+1)& (0+255),w,b
 12983  003320  5B81               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
 12984  003322  5186               	movf	(___aldiv@divisor+2)& (0+255),w,b
 12985  003324  5B82               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
 12986  003326  5187               	movf	(___aldiv@divisor+3)& (0+255),w,b
 12987  003328  5B83               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
 12988                           
 12989                           ; BSR set to: 0
 12990  00332A  818A               	bsf	___aldiv@quotient& (0+255),0,b
 12991  00332C                     l1026:
 12992                           
 12993                           ; BSR set to: 0
 12994                           
 12995                           ; BSR set to: 0
 12996  00332C  90D8               	bcf	status,0,c
 12997  00332E  3387               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
 12998  003330  3386               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
 12999  003332  3385               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
 13000  003334  3384               	rrcf	___aldiv@divisor& (0+255),f,b
 13001                           
 13002                           ; BSR set to: 0
 13003  003336  2F88               	decfsz	___aldiv@counter& (0+255),f,b
 13004  003338  D7E1               	goto	u9430
 13005  00333A                     l1027:
 13006                           
 13007                           ; BSR set to: 0
 13008                           
 13009                           ; BSR set to: 0
 13010                           
 13011                           ; BSR set to: 0
 13012  00333A  5189               	movf	___aldiv@sign& (0+255),w,b
 13013  00333C  B4D8               	btfsc	status,2,c
 13014  00333E  D008               	goto	l1028
 13015                           
 13016                           ; BSR set to: 0
 13017  003340  1F8D               	comf	(___aldiv@quotient+3)& (0+255),f,b
 13018  003342  1F8C               	comf	(___aldiv@quotient+2)& (0+255),f,b
 13019  003344  1F8B               	comf	(___aldiv@quotient+1)& (0+255),f,b
 13020  003346  6D8A               	negf	___aldiv@quotient& (0+255),b
 13021  003348  0E00               	movlw	0
 13022  00334A  238B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
 13023  00334C  238C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
 13024  00334E  238D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
 13025  003350                     l1028:
 13026                           
 13027                           ; BSR set to: 0
 13028                           
 13029                           ; BSR set to: 0
 13030  003350  C08A  F080         	movff	___aldiv@quotient,?___aldiv
 13031  003354  C08B  F081         	movff	___aldiv@quotient+1,?___aldiv+1
 13032  003358  C08C  F082         	movff	___aldiv@quotient+2,?___aldiv+2
 13033  00335C  C08D  F083         	movff	___aldiv@quotient+3,?___aldiv+3
 13034  003360  0012               	return	
 13035  003362                     __end_of___aldiv:
 13036                           	opt stack 0
 13037                           tosu	equ	0xFFF
 13038                           tosh	equ	0xFFE
 13039                           tosl	equ	0xFFD
 13040                           pclath	equ	0xFFA
 13041                           tblptru	equ	0xFF8
 13042                           tblptrh	equ	0xFF7
 13043                           tblptrl	equ	0xFF6
 13044                           tablat	equ	0xFF5
 13045                           prodh	equ	0xFF4
 13046                           prodl	equ	0xFF3
 13047                           intcon	equ	0xFF2
 13048                           indf0	equ	0xFEF
 13049                           postinc0	equ	0xFEE
 13050                           fsr0h	equ	0xFEA
 13051                           fsr0l	equ	0xFE9
 13052                           wreg	equ	0xFE8
 13053                           postdec1	equ	0xFE5
 13054                           plusw1	equ	0xFE3
 13055                           fsr1l	equ	0xFE1
 13056                           indf2	equ	0xFDF
 13057                           postinc2	equ	0xFDE
 13058                           postdec2	equ	0xFDD
 13059                           plusw2	equ	0xFDB
 13060                           fsr2h	equ	0xFDA
 13061                           fsr2l	equ	0xFD9
 13062                           status	equ	0xFD8
 13063                           
 13064 ;; *************** function _RTC_startOperation *****************
 13065 ;; Defined at:
 13066 ;;		line 55 in file "RTC.c"
 13067 ;; Parameters:    Size  Location     Type
 13068 ;;		None
 13069 ;; Auto vars:     Size  Location     Type
 13070 ;;  time            7    8[BANK0 ] unsigned char [7]
 13071 ;; Return value:  Size  Location     Type
 13072 ;;                  1    wreg      void 
 13073 ;; Registers used:
 13074 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13075 ;; Tracked objects:
 13076 ;;		On entry : 0/0
 13077 ;;		On exit  : 0/0
 13078 ;;		Unchanged: 0/0
 13079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13081 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13082 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13083 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13084 ;;Total ram usage:        9 bytes
 13085 ;; Hardware stack levels used:    1
 13086 ;; Hardware stack levels required when called:    7
 13087 ;; This function calls:
 13088 ;;		_RTC_getTime
 13089 ;; This function is called by:
 13090 ;;		_mainMenu
 13091 ;; This function uses a non-reentrant model
 13092 ;;
 13093                           
 13094                           	psect	text32
 13095  0038E4                     __ptext32:
 13096                           	opt stack 0
 13097  0038E4                     _RTC_startOperation:
 13098                           	opt stack 22
 13099                           
 13100                           ;RTC.c: 57: char time[7];
 13101                           ;RTC.c: 58: RTC_getTime(time);
 13102                           
 13103                           ; BSR set to: 0
 13104                           ;incstack = 0
 13105  0038E4  0E88               	movlw	low RTC_startOperation@time
 13106  0038E6  0100               	movlb	0	; () banked
 13107  0038E8  6F83               	movwf	RTC_getTime@time& (0+255),b
 13108  0038EA  0E00               	movlw	high RTC_startOperation@time
 13109  0038EC  6F84               	movwf	(RTC_getTime@time+1)& (0+255),b
 13110  0038EE  EC38  F01D         	call	_RTC_getTime	;wreg free
 13111                           
 13112                           ;RTC.c: 59: startTime.h = (time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10;
 13113  0038F2  C08A  F086         	movff	RTC_startOperation@time+2,??_RTC_startOperation
 13114  0038F6  0100               	movlb	0	; () banked
 13115  0038F8  3B86               	swapf	??_RTC_startOperation& (0+255),f,b
 13116  0038FA  0E0F               	movlw	15
 13117  0038FC  1786               	andwf	??_RTC_startOperation& (0+255),f,b
 13118  0038FE  0E0F               	movlw	15
 13119  003900  1786               	andwf	??_RTC_startOperation& (0+255),f,b
 13120  003902  5186               	movf	??_RTC_startOperation& (0+255),w,b
 13121  003904  0D0A               	mullw	10
 13122  003906  C08A  F087         	movff	RTC_startOperation@time+2,??_RTC_startOperation+1
 13123  00390A  0E0F               	movlw	15
 13124  00390C  1787               	andwf	(??_RTC_startOperation+1)& (0+255),f,b
 13125  00390E  5187               	movf	(??_RTC_startOperation+1)& (0+255),w,b
 13126  003910  24F3               	addwf	prodl,w,c
 13127  003912  6E3A               	movwf	_startTime,c
 13128  003914  0E00               	movlw	0
 13129  003916  20F4               	addwfc	prodh,w,c
 13130  003918  6E3B               	movwf	_startTime+1,c
 13131                           
 13132                           ; BSR set to: 0
 13133                           ;RTC.c: 60: startTime.m = (time[1] & 0x0F) + ((time[1] & 0xF0)>>4)*10;
 13134  00391A  C089  F086         	movff	RTC_startOperation@time+1,??_RTC_startOperation
 13135  00391E  3B86               	swapf	??_RTC_startOperation& (0+255),f,b
 13136  003920  0E0F               	movlw	15
 13137  003922  1786               	andwf	??_RTC_startOperation& (0+255),f,b
 13138  003924  0E0F               	movlw	15
 13139  003926  1786               	andwf	??_RTC_startOperation& (0+255),f,b
 13140  003928  5186               	movf	??_RTC_startOperation& (0+255),w,b
 13141  00392A  0D0A               	mullw	10
 13142  00392C  C089  F087         	movff	RTC_startOperation@time+1,??_RTC_startOperation+1
 13143  003930  0E0F               	movlw	15
 13144  003932  1787               	andwf	(??_RTC_startOperation+1)& (0+255),f,b
 13145  003934  5187               	movf	(??_RTC_startOperation+1)& (0+255),w,b
 13146  003936  24F3               	addwf	prodl,w,c
 13147  003938  6E3C               	movwf	_startTime+2,c
 13148  00393A  0E00               	movlw	0
 13149  00393C  20F4               	addwfc	prodh,w,c
 13150  00393E  6E3D               	movwf	_startTime+3,c
 13151                           
 13152                           ; BSR set to: 0
 13153                           ;RTC.c: 61: startTime.s = (time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10;
 13154  003940  C088  F086         	movff	RTC_startOperation@time,??_RTC_startOperation
 13155  003944  3B86               	swapf	??_RTC_startOperation& (0+255),f,b
 13156  003946  0E0F               	movlw	15
 13157  003948  1786               	andwf	??_RTC_startOperation& (0+255),f,b
 13158  00394A  0E0F               	movlw	15
 13159  00394C  1786               	andwf	??_RTC_startOperation& (0+255),f,b
 13160  00394E  5186               	movf	??_RTC_startOperation& (0+255),w,b
 13161  003950  0D0A               	mullw	10
 13162  003952  C088  F087         	movff	RTC_startOperation@time,??_RTC_startOperation+1
 13163  003956  0E0F               	movlw	15
 13164  003958  1787               	andwf	(??_RTC_startOperation+1)& (0+255),f,b
 13165  00395A  5187               	movf	(??_RTC_startOperation+1)& (0+255),w,b
 13166  00395C  24F3               	addwf	prodl,w,c
 13167  00395E  6E3E               	movwf	_startTime+4,c
 13168  003960  0E00               	movlw	0
 13169  003962  20F4               	addwfc	prodh,w,c
 13170  003964  6E3F               	movwf	_startTime+5,c
 13171                           
 13172                           ; BSR set to: 0
 13173  003966  0012               	return		;funcret
 13174  003968                     __end_of_RTC_startOperation:
 13175                           	opt stack 0
 13176                           tosu	equ	0xFFF
 13177                           tosh	equ	0xFFE
 13178                           tosl	equ	0xFFD
 13179                           pclath	equ	0xFFA
 13180                           tblptru	equ	0xFF8
 13181                           tblptrh	equ	0xFF7
 13182                           tblptrl	equ	0xFF6
 13183                           tablat	equ	0xFF5
 13184                           prodh	equ	0xFF4
 13185                           prodl	equ	0xFF3
 13186                           intcon	equ	0xFF2
 13187                           indf0	equ	0xFEF
 13188                           postinc0	equ	0xFEE
 13189                           fsr0h	equ	0xFEA
 13190                           fsr0l	equ	0xFE9
 13191                           wreg	equ	0xFE8
 13192                           postdec1	equ	0xFE5
 13193                           plusw1	equ	0xFE3
 13194                           fsr1l	equ	0xFE1
 13195                           indf2	equ	0xFDF
 13196                           postinc2	equ	0xFDE
 13197                           postdec2	equ	0xFDD
 13198                           plusw2	equ	0xFDB
 13199                           fsr2h	equ	0xFDA
 13200                           fsr2l	equ	0xFD9
 13201                           status	equ	0xFD8
 13202                           
 13203 ;; *************** function _RTC_getOperatingTime *****************
 13204 ;; Defined at:
 13205 ;;		line 64 in file "RTC.c"
 13206 ;; Parameters:    Size  Location     Type
 13207 ;;		None
 13208 ;; Auto vars:     Size  Location     Type
 13209 ;;  time            7   10[BANK0 ] unsigned char [7]
 13210 ;;  operatingTim    6   19[BANK0 ] struct time
 13211 ;;  res             2   17[BANK0 ] int 
 13212 ;; Return value:  Size  Location     Type
 13213 ;;                  2    6[BANK0 ] int 
 13214 ;; Registers used:
 13215 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13216 ;; Tracked objects:
 13217 ;;		On entry : 0/0
 13218 ;;		On exit  : 0/0
 13219 ;;		Unchanged: 0/0
 13220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13221 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13222 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13223 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13224 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13225 ;;Total ram usage:       19 bytes
 13226 ;; Hardware stack levels used:    1
 13227 ;; Hardware stack levels required when called:    7
 13228 ;; This function calls:
 13229 ;;		_RTC_getTime
 13230 ;;		___wmul
 13231 ;; This function is called by:
 13232 ;;		_mainMenu
 13233 ;; This function uses a non-reentrant model
 13234 ;;
 13235                           
 13236                           	psect	text33
 13237  003096                     __ptext33:
 13238                           	opt stack 0
 13239  003096                     _RTC_getOperatingTime:
 13240                           	opt stack 22
 13241                           
 13242                           ;RTC.c: 66: char time[7];
 13243                           ;RTC.c: 67: RTC_getTime(time);
 13244                           
 13245                           ; BSR set to: 0
 13246                           ;incstack = 0
 13247  003096  0E8A               	movlw	low RTC_getOperatingTime@time
 13248  003098  0100               	movlb	0	; () banked
 13249  00309A  6F83               	movwf	RTC_getTime@time& (0+255),b
 13250  00309C  0E00               	movlw	high RTC_getOperatingTime@time
 13251  00309E  6F84               	movwf	(RTC_getTime@time+1)& (0+255),b
 13252  0030A0  EC38  F01D         	call	_RTC_getTime	;wreg free
 13253                           
 13254                           ;RTC.c: 68: endTime.h = (time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10;
 13255  0030A4  C08C  F088         	movff	RTC_getOperatingTime@time+2,??_RTC_getOperatingTime
 13256  0030A8  0100               	movlb	0	; () banked
 13257  0030AA  3B88               	swapf	??_RTC_getOperatingTime& (0+255),f,b
 13258  0030AC  0E0F               	movlw	15
 13259  0030AE  1788               	andwf	??_RTC_getOperatingTime& (0+255),f,b
 13260  0030B0  0E0F               	movlw	15
 13261  0030B2  1788               	andwf	??_RTC_getOperatingTime& (0+255),f,b
 13262  0030B4  5188               	movf	??_RTC_getOperatingTime& (0+255),w,b
 13263  0030B6  0D0A               	mullw	10
 13264  0030B8  C08C  F089         	movff	RTC_getOperatingTime@time+2,??_RTC_getOperatingTime+1
 13265  0030BC  0E0F               	movlw	15
 13266  0030BE  1789               	andwf	(??_RTC_getOperatingTime+1)& (0+255),f,b
 13267  0030C0  5189               	movf	(??_RTC_getOperatingTime+1)& (0+255),w,b
 13268  0030C2  24F3               	addwf	prodl,w,c
 13269  0030C4  6E34               	movwf	_endTime,c
 13270  0030C6  0E00               	movlw	0
 13271  0030C8  20F4               	addwfc	prodh,w,c
 13272  0030CA  6E35               	movwf	_endTime+1,c
 13273                           
 13274                           ; BSR set to: 0
 13275                           ;RTC.c: 69: endTime.m = (time[1] & 0x0F) + ((time[1] & 0xF0)>>4)*10;
 13276  0030CC  C08B  F088         	movff	RTC_getOperatingTime@time+1,??_RTC_getOperatingTime
 13277  0030D0  3B88               	swapf	??_RTC_getOperatingTime& (0+255),f,b
 13278  0030D2  0E0F               	movlw	15
 13279  0030D4  1788               	andwf	??_RTC_getOperatingTime& (0+255),f,b
 13280  0030D6  0E0F               	movlw	15
 13281  0030D8  1788               	andwf	??_RTC_getOperatingTime& (0+255),f,b
 13282  0030DA  5188               	movf	??_RTC_getOperatingTime& (0+255),w,b
 13283  0030DC  0D0A               	mullw	10
 13284  0030DE  C08B  F089         	movff	RTC_getOperatingTime@time+1,??_RTC_getOperatingTime+1
 13285  0030E2  0E0F               	movlw	15
 13286  0030E4  1789               	andwf	(??_RTC_getOperatingTime+1)& (0+255),f,b
 13287  0030E6  5189               	movf	(??_RTC_getOperatingTime+1)& (0+255),w,b
 13288  0030E8  24F3               	addwf	prodl,w,c
 13289  0030EA  6E36               	movwf	_endTime+2,c
 13290  0030EC  0E00               	movlw	0
 13291  0030EE  20F4               	addwfc	prodh,w,c
 13292  0030F0  6E37               	movwf	_endTime+3,c
 13293                           
 13294                           ; BSR set to: 0
 13295                           ;RTC.c: 70: endTime.s = (time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10;
 13296  0030F2  C08A  F088         	movff	RTC_getOperatingTime@time,??_RTC_getOperatingTime
 13297  0030F6  3B88               	swapf	??_RTC_getOperatingTime& (0+255),f,b
 13298  0030F8  0E0F               	movlw	15
 13299  0030FA  1788               	andwf	??_RTC_getOperatingTime& (0+255),f,b
 13300  0030FC  0E0F               	movlw	15
 13301  0030FE  1788               	andwf	??_RTC_getOperatingTime& (0+255),f,b
 13302  003100  5188               	movf	??_RTC_getOperatingTime& (0+255),w,b
 13303  003102  0D0A               	mullw	10
 13304  003104  C08A  F089         	movff	RTC_getOperatingTime@time,??_RTC_getOperatingTime+1
 13305  003108  0E0F               	movlw	15
 13306  00310A  1789               	andwf	(??_RTC_getOperatingTime+1)& (0+255),f,b
 13307  00310C  5189               	movf	(??_RTC_getOperatingTime+1)& (0+255),w,b
 13308  00310E  24F3               	addwf	prodl,w,c
 13309  003110  6E38               	movwf	_endTime+4,c
 13310  003112  0E00               	movlw	0
 13311  003114  20F4               	addwfc	prodh,w,c
 13312  003116  6E39               	movwf	_endTime+5,c
 13313                           
 13314                           ; BSR set to: 0
 13315                           ;RTC.c: 72: Time operatingTimeLocal;
 13316                           ;RTC.c: 73: operatingTimeLocal.h = endTime.h - startTime.h;
 13317  003118  C03A  F088         	movff	_startTime,??_RTC_getOperatingTime
 13318  00311C  C03B  F089         	movff	_startTime+1,??_RTC_getOperatingTime+1
 13319  003120  1F88               	comf	??_RTC_getOperatingTime& (0+255),f,b
 13320  003122  1F89               	comf	(??_RTC_getOperatingTime+1)& (0+255),f,b
 13321  003124  4B88               	infsnz	??_RTC_getOperatingTime& (0+255),f,b
 13322  003126  2B89               	incf	(??_RTC_getOperatingTime+1)& (0+255),f,b
 13323  003128  5034               	movf	_endTime,w,c
 13324  00312A  2588               	addwf	??_RTC_getOperatingTime& (0+255),w,b
 13325  00312C  6F93               	movwf	RTC_getOperatingTime@operatingTimeLocal& (0+255),b
 13326  00312E  5035               	movf	_endTime+1,w,c
 13327  003130  2189               	addwfc	(??_RTC_getOperatingTime+1)& (0+255),w,b
 13328  003132  6F94               	movwf	(RTC_getOperatingTime@operatingTimeLocal+1)& (0+255),b
 13329                           
 13330                           ; BSR set to: 0
 13331                           ;RTC.c: 74: operatingTimeLocal.m = endTime.m - startTime.m;
 13332  003134  EE20  F03C         	lfsr	2,_startTime+2
 13333  003138  CFDE F088          	movff	postinc2,??_RTC_getOperatingTime
 13334  00313C  CFDD F089          	movff	postdec2,??_RTC_getOperatingTime+1
 13335  003140  1F88               	comf	??_RTC_getOperatingTime& (0+255),f,b
 13336  003142  1F89               	comf	(??_RTC_getOperatingTime+1)& (0+255),f,b
 13337  003144  4B88               	infsnz	??_RTC_getOperatingTime& (0+255),f,b
 13338  003146  2B89               	incf	(??_RTC_getOperatingTime+1)& (0+255),f,b
 13339  003148  5036               	movf	_endTime+2,w,c
 13340  00314A  2588               	addwf	??_RTC_getOperatingTime& (0+255),w,b
 13341  00314C  6F95               	movwf	(RTC_getOperatingTime@operatingTimeLocal+2)& (0+255),b
 13342  00314E  5037               	movf	_endTime+3,w,c
 13343  003150  2189               	addwfc	(??_RTC_getOperatingTime+1)& (0+255),w,b
 13344  003152  6F96               	movwf	(RTC_getOperatingTime@operatingTimeLocal+3)& (0+255),b
 13345                           
 13346                           ; BSR set to: 0
 13347                           ;RTC.c: 75: operatingTimeLocal.s = endTime.s - startTime.s;
 13348  003154  EE20  F03E         	lfsr	2,_startTime+4
 13349  003158  CFDE F088          	movff	postinc2,??_RTC_getOperatingTime
 13350  00315C  CFDD F089          	movff	postdec2,??_RTC_getOperatingTime+1
 13351  003160  1F88               	comf	??_RTC_getOperatingTime& (0+255),f,b
 13352  003162  1F89               	comf	(??_RTC_getOperatingTime+1)& (0+255),f,b
 13353  003164  4B88               	infsnz	??_RTC_getOperatingTime& (0+255),f,b
 13354  003166  2B89               	incf	(??_RTC_getOperatingTime+1)& (0+255),f,b
 13355  003168  5038               	movf	_endTime+4,w,c
 13356  00316A  2588               	addwf	??_RTC_getOperatingTime& (0+255),w,b
 13357  00316C  6F97               	movwf	(RTC_getOperatingTime@operatingTimeLocal+4)& (0+255),b
 13358  00316E  5039               	movf	_endTime+5,w,c
 13359  003170  2189               	addwfc	(??_RTC_getOperatingTime+1)& (0+255),w,b
 13360  003172  6F98               	movwf	(RTC_getOperatingTime@operatingTimeLocal+5)& (0+255),b
 13361                           
 13362                           ; BSR set to: 0
 13363                           ;RTC.c: 77: int res = 60*60*operatingTimeLocal.h + 60*operatingTimeLocal.m + operatingTi
      +                          meLocal.s;
 13364  003174  C093  F080         	movff	RTC_getOperatingTime@operatingTimeLocal,___wmul@multiplier
 13365  003178  C094  F081         	movff	RTC_getOperatingTime@operatingTimeLocal+1,___wmul@multiplier+1
 13366  00317C  0E0E               	movlw	14
 13367  00317E  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13368  003180  0E10               	movlw	16
 13369  003182  6F82               	movwf	___wmul@multiplicand& (0+255),b
 13370  003184  EC2C  F01F         	call	___wmul	;wreg free
 13371  003188  C080  F088         	movff	?___wmul,??_RTC_getOperatingTime
 13372  00318C  C081  F089         	movff	?___wmul+1,??_RTC_getOperatingTime+1
 13373  003190  C095  F080         	movff	RTC_getOperatingTime@operatingTimeLocal+2,___wmul@multiplier
 13374  003194  C096  F081         	movff	RTC_getOperatingTime@operatingTimeLocal+3,___wmul@multiplier+1
 13375  003198  0E00               	movlw	0
 13376  00319A  0100               	movlb	0	; () banked
 13377  00319C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13378  00319E  0E3C               	movlw	60
 13379  0031A0  6F82               	movwf	___wmul@multiplicand& (0+255),b
 13380  0031A2  EC2C  F01F         	call	___wmul	;wreg free
 13381  0031A6  0100               	movlb	0	; () banked
 13382  0031A8  5180               	movf	?___wmul& (0+255),w,b
 13383  0031AA  2788               	addwf	??_RTC_getOperatingTime& (0+255),f,b
 13384  0031AC  5181               	movf	(?___wmul+1)& (0+255),w,b
 13385  0031AE  2389               	addwfc	(??_RTC_getOperatingTime+1)& (0+255),f,b
 13386  0031B0  5197               	movf	(RTC_getOperatingTime@operatingTimeLocal+4)& (0+255),w,b
 13387  0031B2  2588               	addwf	??_RTC_getOperatingTime& (0+255),w,b
 13388  0031B4  6F91               	movwf	RTC_getOperatingTime@res& (0+255),b
 13389  0031B6  5198               	movf	(RTC_getOperatingTime@operatingTimeLocal+5)& (0+255),w,b
 13390  0031B8  2189               	addwfc	(??_RTC_getOperatingTime+1)& (0+255),w,b
 13391  0031BA  6F92               	movwf	(RTC_getOperatingTime@res+1)& (0+255),b
 13392                           
 13393                           ; BSR set to: 0
 13394                           ;RTC.c: 78: return res;
 13395  0031BC  C091  F086         	movff	RTC_getOperatingTime@res,?_RTC_getOperatingTime
 13396  0031C0  C092  F087         	movff	RTC_getOperatingTime@res+1,?_RTC_getOperatingTime+1
 13397  0031C4  0012               	return	
 13398  0031C6                     __end_of_RTC_getOperatingTime:
 13399                           	opt stack 0
 13400                           tosu	equ	0xFFF
 13401                           tosh	equ	0xFFE
 13402                           tosl	equ	0xFFD
 13403                           pclath	equ	0xFFA
 13404                           tblptru	equ	0xFF8
 13405                           tblptrh	equ	0xFF7
 13406                           tblptrl	equ	0xFF6
 13407                           tablat	equ	0xFF5
 13408                           prodh	equ	0xFF4
 13409                           prodl	equ	0xFF3
 13410                           intcon	equ	0xFF2
 13411                           indf0	equ	0xFEF
 13412                           postinc0	equ	0xFEE
 13413                           fsr0h	equ	0xFEA
 13414                           fsr0l	equ	0xFE9
 13415                           wreg	equ	0xFE8
 13416                           postdec1	equ	0xFE5
 13417                           plusw1	equ	0xFE3
 13418                           fsr1l	equ	0xFE1
 13419                           indf2	equ	0xFDF
 13420                           postinc2	equ	0xFDE
 13421                           postdec2	equ	0xFDD
 13422                           plusw2	equ	0xFDB
 13423                           fsr2h	equ	0xFDA
 13424                           fsr2l	equ	0xFD9
 13425                           status	equ	0xFD8
 13426                           
 13427 ;; *************** function ___wmul *****************
 13428 ;; Defined at:
 13429 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 13430 ;; Parameters:    Size  Location     Type
 13431 ;;  multiplier      2    0[BANK0 ] unsigned int 
 13432 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 13433 ;; Auto vars:     Size  Location     Type
 13434 ;;  product         2    4[BANK0 ] unsigned int 
 13435 ;; Return value:  Size  Location     Type
 13436 ;;                  2    0[BANK0 ] unsigned int 
 13437 ;; Registers used:
 13438 ;;		wreg, status,2, status,0, prodl, prodh
 13439 ;; Tracked objects:
 13440 ;;		On entry : 0/0
 13441 ;;		On exit  : 0/0
 13442 ;;		Unchanged: 0/0
 13443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13444 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13445 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13447 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13448 ;;Total ram usage:        6 bytes
 13449 ;; Hardware stack levels used:    1
 13450 ;; Hardware stack levels required when called:    4
 13451 ;; This function calls:
 13452 ;;		Nothing
 13453 ;; This function is called by:
 13454 ;;		_packaging
 13455 ;;		_inputEntry
 13456 ;;		_mainMenu
 13457 ;;		_RTC_getOperatingTime
 13458 ;;		__doprnt
 13459 ;;		_RTC_getSeconds
 13460 ;; This function uses a non-reentrant model
 13461 ;;
 13462                           
 13463                           	psect	text34
 13464  003E58                     __ptext34:
 13465                           	opt stack 0
 13466  003E58                     ___wmul:
 13467                           	opt stack 22
 13468                           
 13469                           ; BSR set to: 0
 13470                           ;incstack = 0
 13471  003E58  0100               	movlb	0	; () banked
 13472  003E5A  5180               	movf	___wmul@multiplier& (0+255),w,b
 13473  003E5C  0382               	mulwf	___wmul@multiplicand& (0+255),b
 13474  003E5E  CFF3 F084          	movff	prodl,___wmul@product
 13475  003E62  CFF4 F085          	movff	prodh,___wmul@product+1
 13476  003E66  5180               	movf	___wmul@multiplier& (0+255),w,b
 13477  003E68  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 13478  003E6A  50F3               	movf	prodl,w,c
 13479  003E6C  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 13480  003E6E  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 13481  003E70  0382               	mulwf	___wmul@multiplicand& (0+255),b
 13482  003E72  50F3               	movf	prodl,w,c
 13483  003E74  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 13484                           
 13485                           ; BSR set to: 0
 13486  003E76  C084  F080         	movff	___wmul@product,?___wmul
 13487  003E7A  C085  F081         	movff	___wmul@product+1,?___wmul+1
 13488  003E7E  0012               	return	
 13489  003E80                     __end_of___wmul:
 13490                           	opt stack 0
 13491                           tosu	equ	0xFFF
 13492                           tosh	equ	0xFFE
 13493                           tosl	equ	0xFFD
 13494                           pclath	equ	0xFFA
 13495                           tblptru	equ	0xFF8
 13496                           tblptrh	equ	0xFF7
 13497                           tblptrl	equ	0xFF6
 13498                           tablat	equ	0xFF5
 13499                           prodh	equ	0xFF4
 13500                           prodl	equ	0xFF3
 13501                           intcon	equ	0xFF2
 13502                           indf0	equ	0xFEF
 13503                           postinc0	equ	0xFEE
 13504                           fsr0h	equ	0xFEA
 13505                           fsr0l	equ	0xFE9
 13506                           wreg	equ	0xFE8
 13507                           postdec1	equ	0xFE5
 13508                           plusw1	equ	0xFE3
 13509                           fsr1l	equ	0xFE1
 13510                           indf2	equ	0xFDF
 13511                           postinc2	equ	0xFDE
 13512                           postdec2	equ	0xFDD
 13513                           plusw2	equ	0xFDB
 13514                           fsr2h	equ	0xFDA
 13515                           fsr2l	equ	0xFD9
 13516                           status	equ	0xFD8
 13517                           
 13518 ;; *************** function _RTC_getTime *****************
 13519 ;; Defined at:
 13520 ;;		line 22 in file "RTC.c"
 13521 ;; Parameters:    Size  Location     Type
 13522 ;;  time            2    3[BANK0 ] PTR unsigned char 
 13523 ;;		 -> RTC_getOperatingTime@time(7), RTC_startOperation@time(7), RTC_getSeconds@time(7), mainMenu@time(7), 
 13524 ;; Auto vars:     Size  Location     Type
 13525 ;;  i               1    5[BANK0 ] unsigned char 
 13526 ;; Return value:  Size  Location     Type
 13527 ;;                  1    wreg      void 
 13528 ;; Registers used:
 13529 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13530 ;; Tracked objects:
 13531 ;;		On entry : 0/0
 13532 ;;		On exit  : 0/0
 13533 ;;		Unchanged: 0/0
 13534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13535 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13536 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13538 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13539 ;;Total ram usage:        3 bytes
 13540 ;; Hardware stack levels used:    1
 13541 ;; Hardware stack levels required when called:    6
 13542 ;; This function calls:
 13543 ;;		_I2C_Master_Read
 13544 ;;		_I2C_Master_Start
 13545 ;;		_I2C_Master_Stop
 13546 ;;		_I2C_Master_Write
 13547 ;; This function is called by:
 13548 ;;		_mainMenu
 13549 ;;		_RTC_startOperation
 13550 ;;		_RTC_getOperatingTime
 13551 ;;		_RTC_getSeconds
 13552 ;; This function uses a non-reentrant model
 13553 ;;
 13554                           
 13555                           	psect	text35
 13556  003A70                     __ptext35:
 13557                           	opt stack 0
 13558  003A70                     _RTC_getTime:
 13559                           	opt stack 22
 13560                           
 13561                           ;RTC.c: 24: I2C_Master_Start();
 13562                           
 13563                           ; BSR set to: 0
 13564                           ;incstack = 0
 13565  003A70  EC05  F020         	call	_I2C_Master_Start	;wreg free
 13566                           
 13567                           ;RTC.c: 25: I2C_Master_Write(0b11010000);
 13568  003A74  0E00               	movlw	0
 13569  003A76  0100               	movlb	0	; () banked
 13570  003A78  6F82               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
 13571  003A7A  0ED0               	movlw	208
 13572  003A7C  6F81               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
 13573  003A7E  ECFC  F01F         	call	_I2C_Master_Write	;wreg free
 13574                           
 13575                           ;RTC.c: 26: I2C_Master_Write(0x00);
 13576  003A82  0E00               	movlw	0
 13577  003A84  0100               	movlb	0	; () banked
 13578  003A86  6F82               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
 13579  003A88  0E00               	movlw	0
 13580  003A8A  6F81               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
 13581  003A8C  ECFC  F01F         	call	_I2C_Master_Write	;wreg free
 13582                           
 13583                           ;RTC.c: 27: I2C_Master_Stop();
 13584  003A90  EC01  F020         	call	_I2C_Master_Stop	;wreg free
 13585                           
 13586                           ;RTC.c: 30: char i;
 13587                           ;RTC.c: 32: I2C_Master_Start();
 13588  003A94  EC05  F020         	call	_I2C_Master_Start	;wreg free
 13589                           
 13590                           ;RTC.c: 33: I2C_Master_Write(0b11010001);
 13591  003A98  0E00               	movlw	0
 13592  003A9A  0100               	movlb	0	; () banked
 13593  003A9C  6F82               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
 13594  003A9E  0ED1               	movlw	209
 13595  003AA0  6F81               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
 13596  003AA2  ECFC  F01F         	call	_I2C_Master_Write	;wreg free
 13597                           
 13598                           ;RTC.c: 35: for (i = 0; i < 6; i++) {
 13599  003AA6  0E00               	movlw	0
 13600  003AA8  0100               	movlb	0	; () banked
 13601  003AAA  6F85               	movwf	RTC_getTime@i& (0+255),b
 13602  003AAC                     l6494:
 13603                           
 13604                           ; BSR set to: 0
 13605  003AAC  0E05               	movlw	5
 13606  003AAE  6585               	cpfsgt	RTC_getTime@i& (0+255),b
 13607  003AB0  D001               	goto	l619
 13608  003AB2  D00F               	goto	u8520
 13609  003AB4                     l619:
 13610                           
 13611                           ; BSR set to: 0
 13612                           ;RTC.c: 36: time[i] = I2C_Master_Read(0);
 13613                           
 13614                           ; BSR set to: 0
 13615  003AB4  5185               	movf	RTC_getTime@i& (0+255),w,b
 13616  003AB6  0D01               	mullw	1
 13617  003AB8  50F3               	movf	prodl,w,c
 13618  003ABA  2583               	addwf	RTC_getTime@time& (0+255),w,b
 13619  003ABC  6ED9               	movwf	fsr2l,c
 13620  003ABE  50F4               	movf	prodh,w,c
 13621  003AC0  2184               	addwfc	(RTC_getTime@time+1)& (0+255),w,b
 13622  003AC2  6EDA               	movwf	fsr2h,c
 13623  003AC4  0E00               	movlw	0
 13624  003AC6  EC17  F01F         	call	_I2C_Master_Read
 13625  003ACA  6EDF               	movwf	indf2,c
 13626  003ACC  0100               	movlb	0	; () banked
 13627  003ACE  2B85               	incf	RTC_getTime@i& (0+255),f,b
 13628  003AD0  D7ED               	goto	l6494
 13629  003AD2                     u8520:
 13630                           
 13631                           ; BSR set to: 0
 13632                           ;RTC.c: 37: }
 13633                           ;RTC.c: 38: time[6] = I2C_Master_Read(1);
 13634                           
 13635                           ; BSR set to: 0
 13636  003AD2  EE20 F006          	lfsr	2,6
 13637  003AD6  5183               	movf	RTC_getTime@time& (0+255),w,b
 13638  003AD8  26D9               	addwf	fsr2l,f,c
 13639  003ADA  5184               	movf	(RTC_getTime@time+1)& (0+255),w,b
 13640  003ADC  22DA               	addwfc	fsr2h,f,c
 13641  003ADE  0E01               	movlw	1
 13642  003AE0  EC17  F01F         	call	_I2C_Master_Read
 13643  003AE4  6EDF               	movwf	indf2,c
 13644                           
 13645                           ;RTC.c: 39: I2C_Master_Stop();
 13646  003AE6  EC01  F020         	call	_I2C_Master_Stop	;wreg free
 13647  003AEA  0012               	return		;funcret
 13648  003AEC                     __end_of_RTC_getTime:
 13649                           	opt stack 0
 13650                           tosu	equ	0xFFF
 13651                           tosh	equ	0xFFE
 13652                           tosl	equ	0xFFD
 13653                           pclath	equ	0xFFA
 13654                           tblptru	equ	0xFF8
 13655                           tblptrh	equ	0xFF7
 13656                           tblptrl	equ	0xFF6
 13657                           tablat	equ	0xFF5
 13658                           prodh	equ	0xFF4
 13659                           prodl	equ	0xFF3
 13660                           intcon	equ	0xFF2
 13661                           indf0	equ	0xFEF
 13662                           postinc0	equ	0xFEE
 13663                           fsr0h	equ	0xFEA
 13664                           fsr0l	equ	0xFE9
 13665                           wreg	equ	0xFE8
 13666                           postdec1	equ	0xFE5
 13667                           plusw1	equ	0xFE3
 13668                           fsr1l	equ	0xFE1
 13669                           indf2	equ	0xFDF
 13670                           postinc2	equ	0xFDE
 13671                           postdec2	equ	0xFDD
 13672                           plusw2	equ	0xFDB
 13673                           fsr2h	equ	0xFDA
 13674                           fsr2l	equ	0xFD9
 13675                           status	equ	0xFD8
 13676                           
 13677 ;; *************** function _I2C_Master_Write *****************
 13678 ;; Defined at:
 13679 ;;		line 108 in file "I2C.c"
 13680 ;; Parameters:    Size  Location     Type
 13681 ;;  byteToWrite     2    1[BANK0 ] unsigned int 
 13682 ;; Auto vars:     Size  Location     Type
 13683 ;;		None
 13684 ;; Return value:  Size  Location     Type
 13685 ;;                  1    wreg      void 
 13686 ;; Registers used:
 13687 ;;		wreg, status,2, status,0, cstack
 13688 ;; Tracked objects:
 13689 ;;		On entry : 0/0
 13690 ;;		On exit  : 0/0
 13691 ;;		Unchanged: 0/0
 13692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13693 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13694 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13696 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13697 ;;Total ram usage:        2 bytes
 13698 ;; Hardware stack levels used:    1
 13699 ;; Hardware stack levels required when called:    5
 13700 ;; This function calls:
 13701 ;;		_I2C_Master_Wait
 13702 ;; This function is called by:
 13703 ;;		_I2C_Send
 13704 ;;		_RTC_getTime
 13705 ;; This function uses a non-reentrant model
 13706 ;;
 13707                           
 13708                           	psect	text36
 13709  003FF8                     __ptext36:
 13710                           	opt stack 0
 13711  003FF8                     _I2C_Master_Write:
 13712                           	opt stack 21
 13713                           
 13714                           ;I2C.c: 116: I2C_Master_Wait();
 13715                           
 13716                           ;incstack = 0
 13717  003FF8  ECC8  F01F         	call	_I2C_Master_Wait	;wreg free
 13718                           
 13719                           ;I2C.c: 117: SSPBUF = byteToWrite;
 13720  003FFC  C081  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
 13721  004000  0012               	return		;funcret
 13722  004002                     __end_of_I2C_Master_Write:
 13723                           	opt stack 0
 13724                           tosu	equ	0xFFF
 13725                           tosh	equ	0xFFE
 13726                           tosl	equ	0xFFD
 13727                           pclath	equ	0xFFA
 13728                           tblptru	equ	0xFF8
 13729                           tblptrh	equ	0xFF7
 13730                           tblptrl	equ	0xFF6
 13731                           tablat	equ	0xFF5
 13732                           prodh	equ	0xFF4
 13733                           prodl	equ	0xFF3
 13734                           intcon	equ	0xFF2
 13735                           indf0	equ	0xFEF
 13736                           postinc0	equ	0xFEE
 13737                           fsr0h	equ	0xFEA
 13738                           fsr0l	equ	0xFE9
 13739                           wreg	equ	0xFE8
 13740                           postdec1	equ	0xFE5
 13741                           plusw1	equ	0xFE3
 13742                           fsr1l	equ	0xFE1
 13743                           indf2	equ	0xFDF
 13744                           postinc2	equ	0xFDE
 13745                           postdec2	equ	0xFDD
 13746                           plusw2	equ	0xFDB
 13747                           fsr2h	equ	0xFDA
 13748                           fsr2l	equ	0xFD9
 13749                           status	equ	0xFD8
 13750                           
 13751 ;; *************** function _I2C_Master_Stop *****************
 13752 ;; Defined at:
 13753 ;;		line 95 in file "I2C.c"
 13754 ;; Parameters:    Size  Location     Type
 13755 ;;		None
 13756 ;; Auto vars:     Size  Location     Type
 13757 ;;		None
 13758 ;; Return value:  Size  Location     Type
 13759 ;;                  1    wreg      void 
 13760 ;; Registers used:
 13761 ;;		wreg, status,2, status,0, cstack
 13762 ;; Tracked objects:
 13763 ;;		On entry : 0/0
 13764 ;;		On exit  : 0/0
 13765 ;;		Unchanged: 0/0
 13766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13771 ;;Total ram usage:        0 bytes
 13772 ;; Hardware stack levels used:    1
 13773 ;; Hardware stack levels required when called:    5
 13774 ;; This function calls:
 13775 ;;		_I2C_Master_Wait
 13776 ;; This function is called by:
 13777 ;;		_I2C_Send
 13778 ;;		_RTC_getTime
 13779 ;; This function uses a non-reentrant model
 13780 ;;
 13781                           
 13782                           	psect	text37
 13783  004002                     __ptext37:
 13784                           	opt stack 0
 13785  004002                     _I2C_Master_Stop:
 13786                           	opt stack 21
 13787                           
 13788                           ;I2C.c: 104: I2C_Master_Wait();
 13789                           
 13790                           ;incstack = 0
 13791  004002  ECC8  F01F         	call	_I2C_Master_Wait	;wreg free
 13792                           
 13793                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
 13794  004006  84C5               	bsf	4037,2,c	;volatile
 13795  004008  0012               	return		;funcret
 13796  00400A                     __end_of_I2C_Master_Stop:
 13797                           	opt stack 0
 13798                           tosu	equ	0xFFF
 13799                           tosh	equ	0xFFE
 13800                           tosl	equ	0xFFD
 13801                           pclath	equ	0xFFA
 13802                           tblptru	equ	0xFF8
 13803                           tblptrh	equ	0xFF7
 13804                           tblptrl	equ	0xFF6
 13805                           tablat	equ	0xFF5
 13806                           prodh	equ	0xFF4
 13807                           prodl	equ	0xFF3
 13808                           intcon	equ	0xFF2
 13809                           indf0	equ	0xFEF
 13810                           postinc0	equ	0xFEE
 13811                           fsr0h	equ	0xFEA
 13812                           fsr0l	equ	0xFE9
 13813                           wreg	equ	0xFE8
 13814                           postdec1	equ	0xFE5
 13815                           plusw1	equ	0xFE3
 13816                           fsr1l	equ	0xFE1
 13817                           indf2	equ	0xFDF
 13818                           postinc2	equ	0xFDE
 13819                           postdec2	equ	0xFDD
 13820                           plusw2	equ	0xFDB
 13821                           fsr2h	equ	0xFDA
 13822                           fsr2l	equ	0xFD9
 13823                           status	equ	0xFD8
 13824                           
 13825 ;; *************** function _I2C_Master_Start *****************
 13826 ;; Defined at:
 13827 ;;		line 69 in file "I2C.c"
 13828 ;; Parameters:    Size  Location     Type
 13829 ;;		None
 13830 ;; Auto vars:     Size  Location     Type
 13831 ;;		None
 13832 ;; Return value:  Size  Location     Type
 13833 ;;                  1    wreg      void 
 13834 ;; Registers used:
 13835 ;;		wreg, status,2, status,0, cstack
 13836 ;; Tracked objects:
 13837 ;;		On entry : 0/0
 13838 ;;		On exit  : 0/0
 13839 ;;		Unchanged: 0/0
 13840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13844 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13845 ;;Total ram usage:        0 bytes
 13846 ;; Hardware stack levels used:    1
 13847 ;; Hardware stack levels required when called:    5
 13848 ;; This function calls:
 13849 ;;		_I2C_Master_Wait
 13850 ;; This function is called by:
 13851 ;;		_I2C_Send
 13852 ;;		_RTC_getTime
 13853 ;; This function uses a non-reentrant model
 13854 ;;
 13855                           
 13856                           	psect	text38
 13857  00400A                     __ptext38:
 13858                           	opt stack 0
 13859  00400A                     _I2C_Master_Start:
 13860                           	opt stack 21
 13861                           
 13862                           ;I2C.c: 78: I2C_Master_Wait();
 13863                           
 13864                           ;incstack = 0
 13865  00400A  ECC8  F01F         	call	_I2C_Master_Wait	;wreg free
 13866                           
 13867                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
 13868  00400E  80C5               	bsf	4037,0,c	;volatile
 13869  004010  0012               	return		;funcret
 13870  004012                     __end_of_I2C_Master_Start:
 13871                           	opt stack 0
 13872                           tosu	equ	0xFFF
 13873                           tosh	equ	0xFFE
 13874                           tosl	equ	0xFFD
 13875                           pclath	equ	0xFFA
 13876                           tblptru	equ	0xFF8
 13877                           tblptrh	equ	0xFF7
 13878                           tblptrl	equ	0xFF6
 13879                           tablat	equ	0xFF5
 13880                           prodh	equ	0xFF4
 13881                           prodl	equ	0xFF3
 13882                           intcon	equ	0xFF2
 13883                           indf0	equ	0xFEF
 13884                           postinc0	equ	0xFEE
 13885                           fsr0h	equ	0xFEA
 13886                           fsr0l	equ	0xFE9
 13887                           wreg	equ	0xFE8
 13888                           postdec1	equ	0xFE5
 13889                           plusw1	equ	0xFE3
 13890                           fsr1l	equ	0xFE1
 13891                           indf2	equ	0xFDF
 13892                           postinc2	equ	0xFDE
 13893                           postdec2	equ	0xFDD
 13894                           plusw2	equ	0xFDB
 13895                           fsr2h	equ	0xFDA
 13896                           fsr2l	equ	0xFD9
 13897                           status	equ	0xFD8
 13898                           
 13899 ;; *************** function _I2C_Master_Read *****************
 13900 ;; Defined at:
 13901 ;;		line 120 in file "I2C.c"
 13902 ;; Parameters:    Size  Location     Type
 13903 ;;  ackBit          1    wreg     unsigned char 
 13904 ;; Auto vars:     Size  Location     Type
 13905 ;;  ackBit          1    1[BANK0 ] unsigned char 
 13906 ;;  receivedByte    1    2[BANK0 ] unsigned char 
 13907 ;; Return value:  Size  Location     Type
 13908 ;;                  1    wreg      unsigned char 
 13909 ;; Registers used:
 13910 ;;		wreg, status,2, status,0, cstack
 13911 ;; Tracked objects:
 13912 ;;		On entry : 0/0
 13913 ;;		On exit  : 0/0
 13914 ;;		Unchanged: 0/0
 13915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13917 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13919 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13920 ;;Total ram usage:        2 bytes
 13921 ;; Hardware stack levels used:    1
 13922 ;; Hardware stack levels required when called:    5
 13923 ;; This function calls:
 13924 ;;		_I2C_Master_Wait
 13925 ;; This function is called by:
 13926 ;;		_RTC_getTime
 13927 ;; This function uses a non-reentrant model
 13928 ;;
 13929                           
 13930                           	psect	text39
 13931  003E2E                     __ptext39:
 13932                           	opt stack 0
 13933  003E2E                     _I2C_Master_Read:
 13934                           	opt stack 22
 13935                           
 13936                           ;incstack = 0
 13937                           ;I2C_Master_Read@ackBit stored from wreg
 13938  003E2E  0100               	movlb	0	; () banked
 13939  003E30  6F81               	movwf	I2C_Master_Read@ackBit& (0+255),b
 13940                           
 13941                           ;I2C.c: 130: unsigned char receivedByte;
 13942                           ;I2C.c: 132: I2C_Master_Wait();
 13943  003E32  ECC8  F01F         	call	_I2C_Master_Wait	;wreg free
 13944                           
 13945                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
 13946  003E36  86C5               	bsf	4037,3,c	;volatile
 13947                           
 13948                           ;I2C.c: 135: I2C_Master_Wait();
 13949  003E38  ECC8  F01F         	call	_I2C_Master_Wait	;wreg free
 13950                           
 13951                           ;I2C.c: 136: receivedByte = SSPBUF;
 13952  003E3C  CFC9 F082          	movff	4041,I2C_Master_Read@receivedByte	;volatile
 13953                           
 13954                           ;I2C.c: 138: I2C_Master_Wait();
 13955  003E40  ECC8  F01F         	call	_I2C_Master_Wait	;wreg free
 13956                           
 13957                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
 13958  003E44  0100               	movlb	0	; () banked
 13959  003E46  B181               	btfsc	I2C_Master_Read@ackBit& (0+255),0,b
 13960  003E48  D002               	bra	u7295
 13961  003E4A  9AC5               	bcf	4037,5,c	;volatile
 13962  003E4C  D001               	bra	u7296
 13963  003E4E                     u7295:
 13964  003E4E  8AC5               	bsf	4037,5,c	;volatile
 13965  003E50                     u7296:
 13966                           
 13967                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
 13968  003E50  88C5               	bsf	4037,4,c	;volatile
 13969                           
 13970                           ;I2C.c: 142: return receivedByte;
 13971  003E52  0100               	movlb	0	; () banked
 13972  003E54  5182               	movf	I2C_Master_Read@receivedByte& (0+255),w,b
 13973  003E56  0012               	return	
 13974  003E58                     __end_of_I2C_Master_Read:
 13975                           	opt stack 0
 13976                           tosu	equ	0xFFF
 13977                           tosh	equ	0xFFE
 13978                           tosl	equ	0xFFD
 13979                           pclath	equ	0xFFA
 13980                           tblptru	equ	0xFF8
 13981                           tblptrh	equ	0xFF7
 13982                           tblptrl	equ	0xFF6
 13983                           tablat	equ	0xFF5
 13984                           prodh	equ	0xFF4
 13985                           prodl	equ	0xFF3
 13986                           intcon	equ	0xFF2
 13987                           indf0	equ	0xFEF
 13988                           postinc0	equ	0xFEE
 13989                           fsr0h	equ	0xFEA
 13990                           fsr0l	equ	0xFE9
 13991                           wreg	equ	0xFE8
 13992                           postdec1	equ	0xFE5
 13993                           plusw1	equ	0xFE3
 13994                           fsr1l	equ	0xFE1
 13995                           indf2	equ	0xFDF
 13996                           postinc2	equ	0xFDE
 13997                           postdec2	equ	0xFDD
 13998                           plusw2	equ	0xFDB
 13999                           fsr2h	equ	0xFDA
 14000                           fsr2l	equ	0xFD9
 14001                           status	equ	0xFD8
 14002                           
 14003 ;; *************** function _I2C_Master_Wait *****************
 14004 ;; Defined at:
 14005 ;;		line 51 in file "I2C.c"
 14006 ;; Parameters:    Size  Location     Type
 14007 ;;		None
 14008 ;; Auto vars:     Size  Location     Type
 14009 ;;		None
 14010 ;; Return value:  Size  Location     Type
 14011 ;;                  1    wreg      void 
 14012 ;; Registers used:
 14013 ;;		wreg, status,2, status,0
 14014 ;; Tracked objects:
 14015 ;;		On entry : 0/0
 14016 ;;		On exit  : 0/0
 14017 ;;		Unchanged: 0/0
 14018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14021 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14022 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14023 ;;Total ram usage:        1 bytes
 14024 ;; Hardware stack levels used:    1
 14025 ;; Hardware stack levels required when called:    4
 14026 ;; This function calls:
 14027 ;;		Nothing
 14028 ;; This function is called by:
 14029 ;;		_I2C_Master_Start
 14030 ;;		_I2C_Master_Stop
 14031 ;;		_I2C_Master_Write
 14032 ;;		_I2C_Master_Read
 14033 ;;		_I2C_Master_RepeatedStart
 14034 ;; This function uses a non-reentrant model
 14035 ;;
 14036                           
 14037                           	psect	text40
 14038  003F90                     __ptext40:
 14039                           	opt stack 0
 14040  003F90                     _I2C_Master_Wait:
 14041                           	opt stack 21
 14042                           
 14043                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 14044                           
 14045                           ; BSR set to: 0
 14046                           ;incstack = 0
 14047  003F90  B4C7               	btfsc	4039,2,c	;volatile
 14048  003F92  D7FE               	goto	_I2C_Master_Wait
 14049  003F94  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
 14050  003F98  0E1F               	movlw	31
 14051  003F9A  0100               	movlb	0	; () banked
 14052  003F9C  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
 14053  003F9E  B4D8               	btfsc	status,2,c
 14054  003FA0  0012               	return	
 14055  003FA2  D7F6               	goto	_I2C_Master_Wait
 14056  003FA4                     __end_of_I2C_Master_Wait:
 14057                           	opt stack 0
 14058                           tosu	equ	0xFFF
 14059                           tosh	equ	0xFFE
 14060                           tosl	equ	0xFFD
 14061                           pclath	equ	0xFFA
 14062                           tblptru	equ	0xFF8
 14063                           tblptrh	equ	0xFF7
 14064                           tblptrl	equ	0xFF6
 14065                           tablat	equ	0xFF5
 14066                           prodh	equ	0xFF4
 14067                           prodl	equ	0xFF3
 14068                           intcon	equ	0xFF2
 14069                           indf0	equ	0xFEF
 14070                           postinc0	equ	0xFEE
 14071                           fsr0h	equ	0xFEA
 14072                           fsr0l	equ	0xFE9
 14073                           wreg	equ	0xFE8
 14074                           postdec1	equ	0xFE5
 14075                           plusw1	equ	0xFE3
 14076                           fsr1l	equ	0xFE1
 14077                           indf2	equ	0xFDF
 14078                           postinc2	equ	0xFDE
 14079                           postdec2	equ	0xFDD
 14080                           plusw2	equ	0xFDB
 14081                           fsr2h	equ	0xFDA
 14082                           fsr2l	equ	0xFD9
 14083                           status	equ	0xFD8
 14084                           
 14085 ;; *************** function _EEPROM_logOperation *****************
 14086 ;; Defined at:
 14087 ;;		line 45 in file "EEPROM.c"
 14088 ;; Parameters:    Size  Location     Type
 14089 ;;  data            2    3[BANK0 ] PTR struct operationInfo
 14090 ;;		 -> mainMenu@run(13), 
 14091 ;; Auto vars:     Size  Location     Type
 14092 ;;  address         2   17[BANK0 ] unsigned int 
 14093 ;;  line7           1   16[BANK0 ] unsigned char 
 14094 ;;  line6           1   15[BANK0 ] unsigned char 
 14095 ;;  line5           1   14[BANK0 ] unsigned char 
 14096 ;;  line4           1   13[BANK0 ] unsigned char 
 14097 ;;  line3           1   12[BANK0 ] unsigned char 
 14098 ;;  line2           1   11[BANK0 ] unsigned char 
 14099 ;;  line1           1   10[BANK0 ] unsigned char 
 14100 ;;  line0           1    9[BANK0 ] unsigned char 
 14101 ;; Return value:  Size  Location     Type
 14102 ;;                  1    wreg      void 
 14103 ;; Registers used:
 14104 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14105 ;; Tracked objects:
 14106 ;;		On entry : 0/0
 14107 ;;		On exit  : 0/0
 14108 ;;		Unchanged: 0/0
 14109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14110 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14111 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14112 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14113 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14114 ;;Total ram usage:       16 bytes
 14115 ;; Hardware stack levels used:    1
 14116 ;; Hardware stack levels required when called:    5
 14117 ;; This function calls:
 14118 ;;		_EEPROM_write
 14119 ;; This function is called by:
 14120 ;;		_mainMenu
 14121 ;; This function uses a non-reentrant model
 14122 ;;
 14123                           
 14124                           	psect	text41
 14125  002640                     __ptext41:
 14126                           	opt stack 0
 14127  002640                     _EEPROM_logOperation:
 14128                           	opt stack 24
 14129                           
 14130                           ;EEPROM.c: 47: unsigned char line0 = (data->year << 3) | ((data->day & 0b00011111) >> 2)
      +                          ;
 14131                           
 14132                           ; BSR set to: 0
 14133                           ;incstack = 0
 14134  002640  0100               	movlb	0	; () banked
 14135  002642  EE20 F001          	lfsr	2,1
 14136  002646  5183               	movf	EEPROM_logOperation@data& (0+255),w,b
 14137  002648  26D9               	addwf	fsr2l,f,c
 14138  00264A  5184               	movf	(EEPROM_logOperation@data+1)& (0+255),w,b
 14139  00264C  22DA               	addwfc	fsr2h,f,c
 14140  00264E  50DF               	movf	indf2,w,c
 14141  002650  6F85               	movwf	??_EEPROM_logOperation& (0+255),b
 14142  002652  90D8               	bcf	status,0,c
 14143  002654  3385               	rrcf	??_EEPROM_logOperation& (0+255),f,b
 14144  002656  90D8               	bcf	status,0,c
 14145  002658  3385               	rrcf	??_EEPROM_logOperation& (0+255),f,b
 14146  00265A  0E07               	movlw	7
 14147  00265C  1785               	andwf	??_EEPROM_logOperation& (0+255),f,b
 14148  00265E  C083  FFD9         	movff	EEPROM_logOperation@data,fsr2l
 14149  002662  C084  FFDA         	movff	EEPROM_logOperation@data+1,fsr2h
 14150  002666  50DF               	movf	indf2,w,c
 14151  002668  6F86               	movwf	(??_EEPROM_logOperation+1)& (0+255),b
 14152  00266A  90D8               	bcf	status,0,c
 14153  00266C  3786               	rlcf	(??_EEPROM_logOperation+1)& (0+255),f,b
 14154  00266E  90D8               	bcf	status,0,c
 14155  002670  3786               	rlcf	(??_EEPROM_logOperation+1)& (0+255),f,b
 14156  002672  90D8               	bcf	status,0,c
 14157  002674  3586               	rlcf	(??_EEPROM_logOperation+1)& (0+255),w,b
 14158  002676  1185               	iorwf	??_EEPROM_logOperation& (0+255),w,b
 14159  002678  6F89               	movwf	EEPROM_logOperation@line0& (0+255),b
 14160                           
 14161                           ;EEPROM.c: 48: unsigned char line1 = (data->day << 6) | ((data->month & 0b00001111) << 2
      +                          ) | ((data->packagedN & 0b00011111) >> 3);
 14162  00267A  EE20 F006          	lfsr	2,6
 14163  00267E  5183               	movf	EEPROM_logOperation@data& (0+255),w,b
 14164  002680  26D9               	addwf	fsr2l,f,c
 14165  002682  5184               	movf	(EEPROM_logOperation@data+1)& (0+255),w,b
 14166  002684  22DA               	addwfc	fsr2h,f,c
 14167  002686  50DF               	movf	indf2,w,c
 14168  002688  6F85               	movwf	??_EEPROM_logOperation& (0+255),b
 14169  00268A  90D8               	bcf	status,0,c
 14170  00268C  3385               	rrcf	??_EEPROM_logOperation& (0+255),f,b
 14171  00268E  90D8               	bcf	status,0,c
 14172  002690  3385               	rrcf	??_EEPROM_logOperation& (0+255),f,b
 14173  002692  90D8               	bcf	status,0,c
 14174  002694  3385               	rrcf	??_EEPROM_logOperation& (0+255),f,b
 14175  002696  0E03               	movlw	3
 14176  002698  1785               	andwf	??_EEPROM_logOperation& (0+255),f,b
 14177  00269A  EE20 F002          	lfsr	2,2
 14178  00269E  5183               	movf	EEPROM_logOperation@data& (0+255),w,b
 14179  0026A0  26D9               	addwf	fsr2l,f,c
 14180  0026A2  5184               	movf	(EEPROM_logOperation@data+1)& (0+255),w,b
 14181  0026A4  22DA               	addwfc	fsr2h,f,c
 14182  0026A6  50DF               	movf	indf2,w,c
 14183  0026A8  6F86               	movwf	(??_EEPROM_logOperation+1)& (0+255),b
 14184  0026AA  0E0F               	movlw	15
 14185  0026AC  1786               	andwf	(??_EEPROM_logOperation+1)& (0+255),f,b
 14186  0026AE  90D8               	bcf	status,0,c
 14187  0026B0  3786               	rlcf	(??_EEPROM_logOperation+1)& (0+255),f,b
 14188  0026B2  90D8               	bcf	status,0,c
 14189  0026B4  3786               	rlcf	(??_EEPROM_logOperation+1)& (0+255),f,b
 14190  0026B6  EE20 F001          	lfsr	2,1
 14191  0026BA  5183               	movf	EEPROM_logOperation@data& (0+255),w,b
 14192  0026BC  26D9               	addwf	fsr2l,f,c
 14193  0026BE  5184               	movf	(EEPROM_logOperation@data+1)& (0+255),w,b
 14194  0026C0  22DA               	addwfc	fsr2h,f,c
 14195  0026C2  50DF               	movf	indf2,w,c
 14196  0026C4  6F87               	movwf	(??_EEPROM_logOperation+2)& (0+255),b
 14197  0026C6  0E06               	movlw	6
 14198  0026C8  6F88               	movwf	(??_EEPROM_logOperation+3)& (0+255),b
 14199  0026CA                     u9355:
 14200  0026CA  90D8               	bcf	status,0,c
 14201  0026CC  3787               	rlcf	(??_EEPROM_logOperation+2)& (0+255),f,b
 14202  0026CE  2F88               	decfsz	(??_EEPROM_logOperation+3)& (0+255),f,b
 14203  0026D0  D7FC               	goto	u9355
 14204  0026D2  5187               	movf	(??_EEPROM_logOperation+2)& (0+255),w,b
 14205  0026D4  1186               	iorwf	(??_EEPROM_logOperation+1)& (0+255),w,b
 14206  0026D6  1185               	iorwf	??_EEPROM_logOperation& (0+255),w,b
 14207  0026D8  6F8A               	movwf	EEPROM_logOperation@line1& (0+255),b
 14208                           
 14209                           ;EEPROM.c: 49: unsigned char line2 = (data->packagedN << 5) | (data->packagedW & 0b00011
      +                          111);
 14210  0026DA  EE20 F008          	lfsr	2,8
 14211  0026DE  5183               	movf	EEPROM_logOperation@data& (0+255),w,b
 14212  0026E0  26D9               	addwf	fsr2l,f,c
 14213  0026E2  5184               	movf	(EEPROM_logOperation@data+1)& (0+255),w,b
 14214  0026E4  22DA               	addwfc	fsr2h,f,c
 14215  0026E6  50DF               	movf	indf2,w,c
 14216  0026E8  6F85               	movwf	??_EEPROM_logOperation& (0+255),b
 14217  0026EA  0E1F               	movlw	31
 14218  0026EC  1785               	andwf	??_EEPROM_logOperation& (0+255),f,b
 14219  0026EE  EE20 F006          	lfsr	2,6
 14220  0026F2  5183               	movf	EEPROM_logOperation@data& (0+255),w,b
 14221  0026F4  26D9               	addwf	fsr2l,f,c
 14222  0026F6  5184               	movf	(EEPROM_logOperation@data+1)& (0+255),w,b
 14223  0026F8  22DA               	addwfc	fsr2h,f,c
 14224  0026FA  50DF               	movf	indf2,w,c
 14225  0026FC  6F86               	movwf	(??_EEPROM_logOperation+1)& (0+255),b
 14226  0026FE  0E05               	movlw	5
 14227  002700  6F87               	movwf	(??_EEPROM_logOperation+2)& (0+255),b
 14228  002702                     u9365:
 14229  002702  90D8               	bcf	status,0,c
 14230  002704  3786               	rlcf	(??_EEPROM_logOperation+1)& (0+255),f,b
 14231  002706  2F87               	decfsz	(??_EEPROM_logOperation+2)& (0+255),f,b
 14232  002708  D7FC               	goto	u9365
 14233  00270A  5186               	movf	(??_EEPROM_logOperation+1)& (0+255),w,b
 14234  00270C  1185               	iorwf	??_EEPROM_logOperation& (0+255),w,b
 14235  00270E  6F8B               	movwf	EEPROM_logOperation@line2& (0+255),b
 14236                           
 14237                           ;EEPROM.c: 50: unsigned char line3 = (data->packagedB << 4) | (data->packagedS & 0b00001
      +                          111);
 14238  002710  EE20 F007          	lfsr	2,7
 14239  002714  5183               	movf	EEPROM_logOperation@data& (0+255),w,b
 14240  002716  26D9               	addwf	fsr2l,f,c
 14241  002718  5184               	movf	(EEPROM_logOperation@data+1)& (0+255),w,b
 14242  00271A  22DA               	addwfc	fsr2h,f,c
 14243  00271C  50DF               	movf	indf2,w,c
 14244  00271E  6F85               	movwf	??_EEPROM_logOperation& (0+255),b
 14245  002720  0E0F               	movlw	15
 14246  002722  1785               	andwf	??_EEPROM_logOperation& (0+255),f,b
 14247  002724  EE20 F005          	lfsr	2,5
 14248  002728  5183               	movf	EEPROM_logOperation@data& (0+255),w,b
 14249  00272A  26D9               	addwf	fsr2l,f,c
 14250  00272C  5184               	movf	(EEPROM_logOperation@data+1)& (0+255),w,b
 14251  00272E  22DA               	addwfc	fsr2h,f,c
 14252  002730  50DF               	movf	indf2,w,c
 14253  002732  6F86               	movwf	(??_EEPROM_logOperation+1)& (0+255),b
 14254  002734  3986               	swapf	(??_EEPROM_logOperation+1)& (0+255),w,b
 14255  002736  0BF0               	andlw	240
 14256  002738  1185               	iorwf	??_EEPROM_logOperation& (0+255),w,b
 14257  00273A  6F8C               	movwf	EEPROM_logOperation@line3& (0+255),b
 14258                           
 14259                           ;EEPROM.c: 51: unsigned char line4 = (data->remainingB << 4) | ((data->remainingN &0b000
      +                          11111) >> 2);
 14260  00273C  EE20 F00A          	lfsr	2,10
 14261  002740  5183               	movf	EEPROM_logOperation@data& (0+255),w,b
 14262  002742  26D9               	addwf	fsr2l,f,c
 14263  002744  5184               	movf	(EEPROM_logOperation@data+1)& (0+255),w,b
 14264  002746  22DA               	addwfc	fsr2h,f,c
 14265  002748  50DF               	movf	indf2,w,c
 14266  00274A  6F85               	movwf	??_EEPROM_logOperation& (0+255),b
 14267  00274C  90D8               	bcf	status,0,c
 14268  00274E  3385               	rrcf	??_EEPROM_logOperation& (0+255),f,b
 14269  002750  90D8               	bcf	status,0,c
 14270  002752  3385               	rrcf	??_EEPROM_logOperation& (0+255),f,b
 14271  002754  0E07               	movlw	7
 14272  002756  1785               	andwf	??_EEPROM_logOperation& (0+255),f,b
 14273  002758  EE20 F009          	lfsr	2,9
 14274  00275C  5183               	movf	EEPROM_logOperation@data& (0+255),w,b
 14275  00275E  26D9               	addwf	fsr2l,f,c
 14276  002760  5184               	movf	(EEPROM_logOperation@data+1)& (0+255),w,b
 14277  002762  22DA               	addwfc	fsr2h,f,c
 14278  002764  50DF               	movf	indf2,w,c
 14279  002766  6F86               	movwf	(??_EEPROM_logOperation+1)& (0+255),b
 14280  002768  3986               	swapf	(??_EEPROM_logOperation+1)& (0+255),w,b
 14281  00276A  0BF0               	andlw	240
 14282  00276C  1185               	iorwf	??_EEPROM_logOperation& (0+255),w,b
 14283  00276E  6F8D               	movwf	EEPROM_logOperation@line4& (0+255),b
 14284                           
 14285                           ;EEPROM.c: 52: unsigned char line5 = (data->remainingN << 6) | ((data->remainingS & 0b00
      +                          011111) << 1) | ((data->remainingW & 0b00011111) >> 5);
 14286  002770  EE20 F00B          	lfsr	2,11
 14287  002774  5183               	movf	EEPROM_logOperation@data& (0+255),w,b
 14288  002776  26D9               	addwf	fsr2l,f,c
 14289  002778  5184               	movf	(EEPROM_logOperation@data+1)& (0+255),w,b
 14290  00277A  22DA               	addwfc	fsr2h,f,c
 14291  00277C  50DF               	movf	indf2,w,c
 14292  00277E  6F85               	movwf	??_EEPROM_logOperation& (0+255),b
 14293  002780  0E1F               	movlw	31
 14294  002782  1785               	andwf	??_EEPROM_logOperation& (0+255),f,b
 14295  002784  90D8               	bcf	status,0,c
 14296  002786  3585               	rlcf	??_EEPROM_logOperation& (0+255),w,b
 14297  002788  6F86               	movwf	(??_EEPROM_logOperation+1)& (0+255),b
 14298  00278A  EE20 F00A          	lfsr	2,10
 14299  00278E  5183               	movf	EEPROM_logOperation@data& (0+255),w,b
 14300  002790  26D9               	addwf	fsr2l,f,c
 14301  002792  5184               	movf	(EEPROM_logOperation@data+1)& (0+255),w,b
 14302  002794  22DA               	addwfc	fsr2h,f,c
 14303  002796  50DF               	movf	indf2,w,c
 14304  002798  6F87               	movwf	(??_EEPROM_logOperation+2)& (0+255),b
 14305  00279A  0E06               	movlw	6
 14306  00279C  6F88               	movwf	(??_EEPROM_logOperation+3)& (0+255),b
 14307  00279E                     u9375:
 14308  00279E  90D8               	bcf	status,0,c
 14309  0027A0  3787               	rlcf	(??_EEPROM_logOperation+2)& (0+255),f,b
 14310  0027A2  2F88               	decfsz	(??_EEPROM_logOperation+3)& (0+255),f,b
 14311  0027A4  D7FC               	goto	u9375
 14312  0027A6  5187               	movf	(??_EEPROM_logOperation+2)& (0+255),w,b
 14313  0027A8  1186               	iorwf	(??_EEPROM_logOperation+1)& (0+255),w,b
 14314  0027AA  6F8E               	movwf	EEPROM_logOperation@line5& (0+255),b
 14315                           
 14316                           ;EEPROM.c: 53: unsigned char line6 = (data->remainingW << 3) | (data->minutes & 0b000001
      +                          11);
 14317  0027AC  EE20 F003          	lfsr	2,3
 14318  0027B0  5183               	movf	EEPROM_logOperation@data& (0+255),w,b
 14319  0027B2  26D9               	addwf	fsr2l,f,c
 14320  0027B4  5184               	movf	(EEPROM_logOperation@data+1)& (0+255),w,b
 14321  0027B6  22DA               	addwfc	fsr2h,f,c
 14322  0027B8  50DF               	movf	indf2,w,c
 14323  0027BA  6F85               	movwf	??_EEPROM_logOperation& (0+255),b
 14324  0027BC  0E07               	movlw	7
 14325  0027BE  1785               	andwf	??_EEPROM_logOperation& (0+255),f,b
 14326  0027C0  EE20 F00C          	lfsr	2,12
 14327  0027C4  5183               	movf	EEPROM_logOperation@data& (0+255),w,b
 14328  0027C6  26D9               	addwf	fsr2l,f,c
 14329  0027C8  5184               	movf	(EEPROM_logOperation@data+1)& (0+255),w,b
 14330  0027CA  22DA               	addwfc	fsr2h,f,c
 14331  0027CC  50DF               	movf	indf2,w,c
 14332  0027CE  6F86               	movwf	(??_EEPROM_logOperation+1)& (0+255),b
 14333  0027D0  90D8               	bcf	status,0,c
 14334  0027D2  3786               	rlcf	(??_EEPROM_logOperation+1)& (0+255),f,b
 14335  0027D4  90D8               	bcf	status,0,c
 14336  0027D6  3786               	rlcf	(??_EEPROM_logOperation+1)& (0+255),f,b
 14337  0027D8  90D8               	bcf	status,0,c
 14338  0027DA  3586               	rlcf	(??_EEPROM_logOperation+1)& (0+255),w,b
 14339  0027DC  1185               	iorwf	??_EEPROM_logOperation& (0+255),w,b
 14340  0027DE  6F8F               	movwf	EEPROM_logOperation@line6& (0+255),b
 14341                           
 14342                           ;EEPROM.c: 54: unsigned char line7 = (data->seconds << 2) | 0b1;
 14343  0027E0  EE20 F004          	lfsr	2,4
 14344  0027E4  5183               	movf	EEPROM_logOperation@data& (0+255),w,b
 14345  0027E6  26D9               	addwf	fsr2l,f,c
 14346  0027E8  5184               	movf	(EEPROM_logOperation@data+1)& (0+255),w,b
 14347  0027EA  22DA               	addwfc	fsr2h,f,c
 14348  0027EC  50DF               	movf	indf2,w,c
 14349  0027EE  6F85               	movwf	??_EEPROM_logOperation& (0+255),b
 14350  0027F0  90D8               	bcf	status,0,c
 14351  0027F2  3785               	rlcf	??_EEPROM_logOperation& (0+255),f,b
 14352  0027F4  90D8               	bcf	status,0,c
 14353  0027F6  3585               	rlcf	??_EEPROM_logOperation& (0+255),w,b
 14354  0027F8  0901               	iorlw	1
 14355  0027FA  6F90               	movwf	EEPROM_logOperation@line7& (0+255),b
 14356                           
 14357                           ; BSR set to: 0
 14358                           ;EEPROM.c: 57: unsigned int address;
 14359                           ;EEPROM.c: 58: for (address = 0; address < 1016; address+=8) {
 14360  0027FC  0E00               	movlw	0
 14361  0027FE  6F92               	movwf	(EEPROM_logOperation@address+1)& (0+255),b
 14362  002800  0E00               	movlw	0
 14363  002802  6F91               	movwf	EEPROM_logOperation@address& (0+255),b
 14364  002804                     l7044:
 14365                           
 14366                           ; BSR set to: 0
 14367  002804  0EF8               	movlw	248
 14368  002806  5D91               	subwf	EEPROM_logOperation@address& (0+255),w,b
 14369  002808  0E03               	movlw	3
 14370  00280A  5992               	subwfb	(EEPROM_logOperation@address+1)& (0+255),w,b
 14371  00280C  B0D8               	btfsc	status,0,c
 14372  00280E  D005               	goto	u9390
 14373                           
 14374                           ; BSR set to: 0
 14375                           
 14376                           ; BSR set to: 0
 14377                           
 14378                           ; BSR set to: 0
 14379                           
 14380                           ; BSR set to: 0
 14381                           ;EEPROM.c: 59: if (EEPROM_read(address+7) & 0b00000001 == 0) break;
 14382                           
 14383                           ; BSR set to: 0
 14384  002810  0E08               	movlw	8
 14385  002812  2791               	addwf	EEPROM_logOperation@address& (0+255),f,b
 14386  002814  0E00               	movlw	0
 14387  002816  2392               	addwfc	(EEPROM_logOperation@address+1)& (0+255),f,b
 14388  002818  D7F5               	goto	l7044
 14389  00281A                     u9390:
 14390                           
 14391                           ; BSR set to: 0
 14392                           ;EEPROM.c: 60: }
 14393                           ;EEPROM.c: 63: EEPROM_write(address, line0);
 14394                           
 14395                           ; BSR set to: 0
 14396  00281A  C091  F080         	movff	EEPROM_logOperation@address,EEPROM_write@address
 14397  00281E  C092  F081         	movff	EEPROM_logOperation@address+1,EEPROM_write@address+1
 14398  002822  C089  F082         	movff	EEPROM_logOperation@line0,EEPROM_write@data
 14399  002826  EC01  F01F         	call	_EEPROM_write	;wreg free
 14400                           
 14401                           ;EEPROM.c: 64: EEPROM_write(address+1, line1);
 14402  00282A  0E01               	movlw	1
 14403  00282C  0100               	movlb	0	; () banked
 14404  00282E  2591               	addwf	EEPROM_logOperation@address& (0+255),w,b
 14405  002830  6F80               	movwf	EEPROM_write@address& (0+255),b
 14406  002832  0E00               	movlw	0
 14407  002834  2192               	addwfc	(EEPROM_logOperation@address+1)& (0+255),w,b
 14408  002836  6F81               	movwf	(EEPROM_write@address+1)& (0+255),b
 14409  002838  C08A  F082         	movff	EEPROM_logOperation@line1,EEPROM_write@data
 14410  00283C  EC01  F01F         	call	_EEPROM_write	;wreg free
 14411                           
 14412                           ;EEPROM.c: 65: EEPROM_write(address+2, line2);
 14413  002840  0E02               	movlw	2
 14414  002842  0100               	movlb	0	; () banked
 14415  002844  2591               	addwf	EEPROM_logOperation@address& (0+255),w,b
 14416  002846  6F80               	movwf	EEPROM_write@address& (0+255),b
 14417  002848  0E00               	movlw	0
 14418  00284A  2192               	addwfc	(EEPROM_logOperation@address+1)& (0+255),w,b
 14419  00284C  6F81               	movwf	(EEPROM_write@address+1)& (0+255),b
 14420  00284E  C08B  F082         	movff	EEPROM_logOperation@line2,EEPROM_write@data
 14421  002852  EC01  F01F         	call	_EEPROM_write	;wreg free
 14422                           
 14423                           ;EEPROM.c: 66: EEPROM_write(address+3, line3);
 14424  002856  0E03               	movlw	3
 14425  002858  0100               	movlb	0	; () banked
 14426  00285A  2591               	addwf	EEPROM_logOperation@address& (0+255),w,b
 14427  00285C  6F80               	movwf	EEPROM_write@address& (0+255),b
 14428  00285E  0E00               	movlw	0
 14429  002860  2192               	addwfc	(EEPROM_logOperation@address+1)& (0+255),w,b
 14430  002862  6F81               	movwf	(EEPROM_write@address+1)& (0+255),b
 14431  002864  C08C  F082         	movff	EEPROM_logOperation@line3,EEPROM_write@data
 14432  002868  EC01  F01F         	call	_EEPROM_write	;wreg free
 14433                           
 14434                           ;EEPROM.c: 67: EEPROM_write(address+4, line4);
 14435  00286C  0E04               	movlw	4
 14436  00286E  0100               	movlb	0	; () banked
 14437  002870  2591               	addwf	EEPROM_logOperation@address& (0+255),w,b
 14438  002872  6F80               	movwf	EEPROM_write@address& (0+255),b
 14439  002874  0E00               	movlw	0
 14440  002876  2192               	addwfc	(EEPROM_logOperation@address+1)& (0+255),w,b
 14441  002878  6F81               	movwf	(EEPROM_write@address+1)& (0+255),b
 14442  00287A  C08D  F082         	movff	EEPROM_logOperation@line4,EEPROM_write@data
 14443  00287E  EC01  F01F         	call	_EEPROM_write	;wreg free
 14444                           
 14445                           ;EEPROM.c: 68: EEPROM_write(address+5, line5);
 14446  002882  0E05               	movlw	5
 14447  002884  0100               	movlb	0	; () banked
 14448  002886  2591               	addwf	EEPROM_logOperation@address& (0+255),w,b
 14449  002888  6F80               	movwf	EEPROM_write@address& (0+255),b
 14450  00288A  0E00               	movlw	0
 14451  00288C  2192               	addwfc	(EEPROM_logOperation@address+1)& (0+255),w,b
 14452  00288E  6F81               	movwf	(EEPROM_write@address+1)& (0+255),b
 14453  002890  C08E  F082         	movff	EEPROM_logOperation@line5,EEPROM_write@data
 14454  002894  EC01  F01F         	call	_EEPROM_write	;wreg free
 14455                           
 14456                           ;EEPROM.c: 69: EEPROM_write(address+6, line6);
 14457  002898  0E06               	movlw	6
 14458  00289A  0100               	movlb	0	; () banked
 14459  00289C  2591               	addwf	EEPROM_logOperation@address& (0+255),w,b
 14460  00289E  6F80               	movwf	EEPROM_write@address& (0+255),b
 14461  0028A0  0E00               	movlw	0
 14462  0028A2  2192               	addwfc	(EEPROM_logOperation@address+1)& (0+255),w,b
 14463  0028A4  6F81               	movwf	(EEPROM_write@address+1)& (0+255),b
 14464  0028A6  C08F  F082         	movff	EEPROM_logOperation@line6,EEPROM_write@data
 14465  0028AA  EC01  F01F         	call	_EEPROM_write	;wreg free
 14466                           
 14467                           ;EEPROM.c: 70: EEPROM_write(address+7, line7);
 14468  0028AE  0E07               	movlw	7
 14469  0028B0  0100               	movlb	0	; () banked
 14470  0028B2  2591               	addwf	EEPROM_logOperation@address& (0+255),w,b
 14471  0028B4  6F80               	movwf	EEPROM_write@address& (0+255),b
 14472  0028B6  0E00               	movlw	0
 14473  0028B8  2192               	addwfc	(EEPROM_logOperation@address+1)& (0+255),w,b
 14474  0028BA  6F81               	movwf	(EEPROM_write@address+1)& (0+255),b
 14475  0028BC  C090  F082         	movff	EEPROM_logOperation@line7,EEPROM_write@data
 14476  0028C0  EC01  F01F         	call	_EEPROM_write	;wreg free
 14477  0028C4  0012               	return		;funcret
 14478  0028C6                     __end_of_EEPROM_logOperation:
 14479                           	opt stack 0
 14480                           tosu	equ	0xFFF
 14481                           tosh	equ	0xFFE
 14482                           tosl	equ	0xFFD
 14483                           pclath	equ	0xFFA
 14484                           tblptru	equ	0xFF8
 14485                           tblptrh	equ	0xFF7
 14486                           tblptrl	equ	0xFF6
 14487                           tablat	equ	0xFF5
 14488                           prodh	equ	0xFF4
 14489                           prodl	equ	0xFF3
 14490                           intcon	equ	0xFF2
 14491                           indf0	equ	0xFEF
 14492                           postinc0	equ	0xFEE
 14493                           fsr0h	equ	0xFEA
 14494                           fsr0l	equ	0xFE9
 14495                           wreg	equ	0xFE8
 14496                           postdec1	equ	0xFE5
 14497                           plusw1	equ	0xFE3
 14498                           fsr1l	equ	0xFE1
 14499                           indf2	equ	0xFDF
 14500                           postinc2	equ	0xFDE
 14501                           postdec2	equ	0xFDD
 14502                           plusw2	equ	0xFDB
 14503                           fsr2h	equ	0xFDA
 14504                           fsr2l	equ	0xFD9
 14505                           status	equ	0xFD8
 14506                           
 14507 ;; *************** function _EEPROM_write *****************
 14508 ;; Defined at:
 14509 ;;		line 9 in file "EEPROM.c"
 14510 ;; Parameters:    Size  Location     Type
 14511 ;;  address         2    0[BANK0 ] unsigned int 
 14512 ;;  data            1    2[BANK0 ] unsigned char 
 14513 ;; Auto vars:     Size  Location     Type
 14514 ;;		None
 14515 ;; Return value:  Size  Location     Type
 14516 ;;                  1    wreg      void 
 14517 ;; Registers used:
 14518 ;;		wreg, status,2
 14519 ;; Tracked objects:
 14520 ;;		On entry : 0/0
 14521 ;;		On exit  : 0/0
 14522 ;;		Unchanged: 0/0
 14523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14524 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14527 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14528 ;;Total ram usage:        3 bytes
 14529 ;; Hardware stack levels used:    1
 14530 ;; Hardware stack levels required when called:    4
 14531 ;; This function calls:
 14532 ;;		Nothing
 14533 ;; This function is called by:
 14534 ;;		_EEPROM_logOperation
 14535 ;;		_EEPROM_clear
 14536 ;; This function uses a non-reentrant model
 14537 ;;
 14538                           
 14539                           	psect	text42
 14540  003E02                     __ptext42:
 14541                           	opt stack 0
 14542  003E02                     _EEPROM_write:
 14543                           	opt stack 24
 14544                           
 14545                           ;EEPROM.c: 10: EECON1bits.WREN = 1;
 14546                           
 14547                           ;incstack = 0
 14548  003E02  84A6               	bsf	4006,2,c	;volsfr
 14549                           
 14550                           ;EEPROM.c: 13: EEADRH = (unsigned char)(address >> 8);
 14551  003E04  0100               	movlb	0	; () banked
 14552  003E06  5181               	movf	(EEPROM_write@address+1)& (0+255),w,b
 14553  003E08  6EAA               	movwf	4010,c	;volatile
 14554                           
 14555                           ; BSR set to: 0
 14556                           ;EEPROM.c: 14: EEADR = (unsigned char)address;
 14557  003E0A  C080  FFA9         	movff	EEPROM_write@address,4009	;volatile
 14558                           
 14559                           ; BSR set to: 0
 14560                           ;EEPROM.c: 16: EEDATA = data;
 14561  003E0E  C082  FFA8         	movff	EEPROM_write@data,4008	;volatile
 14562                           
 14563                           ; BSR set to: 0
 14564                           ;EEPROM.c: 17: EECON1bits.EEPGD = 0;
 14565  003E12  9EA6               	bcf	4006,7,c	;volsfr
 14566                           
 14567                           ; BSR set to: 0
 14568                           ;EEPROM.c: 18: EECON1bits.CFGS = 0;
 14569  003E14  9CA6               	bcf	4006,6,c	;volsfr
 14570                           
 14571                           ; BSR set to: 0
 14572                           ;EEPROM.c: 20: (INTCONbits.GIE = 0);
 14573  003E16  9EF2               	bcf	intcon,7,c	;volatile
 14574                           
 14575                           ;EEPROM.c: 21: EECON2 = 0x55;
 14576  003E18  0E55               	movlw	85
 14577  003E1A  6EA7               	movwf	4007,c	;volsfr
 14578                           
 14579                           ;EEPROM.c: 22: EECON2 = 0x0AA;
 14580  003E1C  0EAA               	movlw	170
 14581  003E1E  6EA7               	movwf	4007,c	;volsfr
 14582                           
 14583                           ; BSR set to: 0
 14584                           ;EEPROM.c: 23: EECON1bits.WR = 1;
 14585  003E20  82A6               	bsf	4006,1,c	;volsfr
 14586                           
 14587                           ; BSR set to: 0
 14588                           ;EEPROM.c: 24: (INTCONbits.GIE = 1);
 14589  003E22  8EF2               	bsf	intcon,7,c	;volatile
 14590  003E24                     
 14591                           ; BSR set to: 0
 14592  003E24  A8A1               	btfss	4001,4,c	;volatile
 14593  003E26  D7FE               	goto	l859
 14594                           
 14595                           ;EEPROM.c: 28: PIR2bits.EEIF = 0;
 14596  003E28  98A1               	bcf	4001,4,c	;volatile
 14597                           
 14598                           ;EEPROM.c: 29: EECON1bits.WREN = 0;
 14599  003E2A  94A6               	bcf	4006,2,c	;volsfr
 14600  003E2C  0012               	return		;funcret
 14601  003E2E                     __end_of_EEPROM_write:
 14602                           	opt stack 0
 14603                           tosu	equ	0xFFF
 14604                           tosh	equ	0xFFE
 14605                           tosl	equ	0xFFD
 14606                           pclath	equ	0xFFA
 14607                           tblptru	equ	0xFF8
 14608                           tblptrh	equ	0xFF7
 14609                           tblptrl	equ	0xFF6
 14610                           tablat	equ	0xFF5
 14611                           prodh	equ	0xFF4
 14612                           prodl	equ	0xFF3
 14613                           intcon	equ	0xFF2
 14614                           indf0	equ	0xFEF
 14615                           postinc0	equ	0xFEE
 14616                           fsr0h	equ	0xFEA
 14617                           fsr0l	equ	0xFE9
 14618                           wreg	equ	0xFE8
 14619                           postdec1	equ	0xFE5
 14620                           plusw1	equ	0xFE3
 14621                           fsr1l	equ	0xFE1
 14622                           indf2	equ	0xFDF
 14623                           postinc2	equ	0xFDE
 14624                           postdec2	equ	0xFDD
 14625                           plusw2	equ	0xFDB
 14626                           fsr2h	equ	0xFDA
 14627                           fsr2l	equ	0xFD9
 14628                           status	equ	0xFD8
 14629                           
 14630 ;; *************** function _initLCD *****************
 14631 ;; Defined at:
 14632 ;;		line 61 in file "lcd.c"
 14633 ;; Parameters:    Size  Location     Type
 14634 ;;		None
 14635 ;; Auto vars:     Size  Location     Type
 14636 ;;		None
 14637 ;; Return value:  Size  Location     Type
 14638 ;;                  1    wreg      void 
 14639 ;; Registers used:
 14640 ;;		wreg, status,2, status,0, cstack
 14641 ;; Tracked objects:
 14642 ;;		On entry : 0/0
 14643 ;;		On exit  : 0/0
 14644 ;;		Unchanged: 0/0
 14645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14648 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14649 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14650 ;;Total ram usage:        1 bytes
 14651 ;; Hardware stack levels used:    1
 14652 ;; Hardware stack levels required when called:    6
 14653 ;; This function calls:
 14654 ;;		_lcdInst
 14655 ;; This function is called by:
 14656 ;;		_main
 14657 ;; This function uses a non-reentrant model
 14658 ;;
 14659                           
 14660                           	psect	text43
 14661  003C0A                     __ptext43:
 14662                           	opt stack 0
 14663  003C0A                     _initLCD:
 14664                           	opt stack 24
 14665                           
 14666                           ;lcd.c: 69: _delay((unsigned long)((15)*(40000000/4000.0)));
 14667                           
 14668                           ;incstack = 0
 14669  003C0A  0EC3               	movlw	195
 14670  003C0C  0100               	movlb	0	; () banked
 14671  003C0E  6F83               	movwf	??_initLCD& (0+255),b
 14672  003C10  0ECD               	movlw	205
 14673  003C12                     u9917:
 14674  003C12  2EE8               	decfsz	wreg,f,c
 14675  003C14  D7FE               	bra	u9917
 14676  003C16  2F83               	decfsz	??_initLCD& (0+255),f,b
 14677  003C18  D7FC               	bra	u9917
 14678                           
 14679                           ;lcd.c: 70: lcdInst(0b00110011);
 14680  003C1A  0E33               	movlw	51
 14681  003C1C  ECB1  F01F         	call	_lcdInst
 14682                           
 14683                           ;lcd.c: 71: lcdInst(0b00110010);
 14684  003C20  0E32               	movlw	50
 14685  003C22  ECB1  F01F         	call	_lcdInst
 14686                           
 14687                           ;lcd.c: 72: lcdInst(0b00101000);
 14688  003C26  0E28               	movlw	40
 14689  003C28  ECB1  F01F         	call	_lcdInst
 14690                           
 14691                           ;lcd.c: 73: lcdInst(0b00001111);
 14692  003C2C  0E0F               	movlw	15
 14693  003C2E  ECB1  F01F         	call	_lcdInst
 14694                           
 14695                           ;lcd.c: 74: lcdInst(0b00000110);
 14696  003C32  0E06               	movlw	6
 14697  003C34  ECB1  F01F         	call	_lcdInst
 14698                           
 14699                           ;lcd.c: 75: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 14700  003C38  0E01               	movlw	1
 14701  003C3A  ECB1  F01F         	call	_lcdInst
 14702  003C3E  0EC3               	movlw	195
 14703  003C40  0100               	movlb	0	; () banked
 14704  003C42  6F83               	movwf	??_initLCD& (0+255),b
 14705  003C44  0ECD               	movlw	205
 14706  003C46                     u9927:
 14707  003C46  2EE8               	decfsz	wreg,f,c
 14708  003C48  D7FE               	bra	u9927
 14709  003C4A  2F83               	decfsz	??_initLCD& (0+255),f,b
 14710  003C4C  D7FC               	bra	u9927
 14711                           
 14712                           ;lcd.c: 78: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
 14713  003C4E  0E0F               	movlw	15
 14714  003C50  ECB1  F01F         	call	_lcdInst
 14715  003C54  0012               	return		;funcret
 14716  003C56                     __end_of_initLCD:
 14717                           	opt stack 0
 14718                           tosu	equ	0xFFF
 14719                           tosh	equ	0xFFE
 14720                           tosl	equ	0xFFD
 14721                           pclath	equ	0xFFA
 14722                           tblptru	equ	0xFF8
 14723                           tblptrh	equ	0xFF7
 14724                           tblptrl	equ	0xFF6
 14725                           tablat	equ	0xFF5
 14726                           prodh	equ	0xFF4
 14727                           prodl	equ	0xFF3
 14728                           intcon	equ	0xFF2
 14729                           indf0	equ	0xFEF
 14730                           postinc0	equ	0xFEE
 14731                           fsr0h	equ	0xFEA
 14732                           fsr0l	equ	0xFE9
 14733                           wreg	equ	0xFE8
 14734                           postdec1	equ	0xFE5
 14735                           plusw1	equ	0xFE3
 14736                           fsr1l	equ	0xFE1
 14737                           indf2	equ	0xFDF
 14738                           postinc2	equ	0xFDE
 14739                           postdec2	equ	0xFDD
 14740                           plusw2	equ	0xFDB
 14741                           fsr2h	equ	0xFDA
 14742                           fsr2l	equ	0xFD9
 14743                           status	equ	0xFD8
 14744                           
 14745 ;; *************** function _lcdInst *****************
 14746 ;; Defined at:
 14747 ;;		line 12 in file "lcd.c"
 14748 ;; Parameters:    Size  Location     Type
 14749 ;;  data            1    wreg     unsigned char 
 14750 ;; Auto vars:     Size  Location     Type
 14751 ;;  data            1    2[BANK0 ] unsigned char 
 14752 ;; Return value:  Size  Location     Type
 14753 ;;                  1    wreg      void 
 14754 ;; Registers used:
 14755 ;;		wreg, status,2, status,0, cstack
 14756 ;; Tracked objects:
 14757 ;;		On entry : 0/0
 14758 ;;		On exit  : 0/0
 14759 ;;		Unchanged: 0/0
 14760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14762 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14764 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14765 ;;Total ram usage:        1 bytes
 14766 ;; Hardware stack levels used:    1
 14767 ;; Hardware stack levels required when called:    5
 14768 ;; This function calls:
 14769 ;;		_lcdNibble
 14770 ;; This function is called by:
 14771 ;;		_packaging
 14772 ;;		_main
 14773 ;;		_initLCD
 14774 ;;		_lcd_set_cursor
 14775 ;;		_lcd_shift_cursor
 14776 ;;		_inputEntry
 14777 ;;		_printStringLCD
 14778 ;;		_lcd_shift_display
 14779 ;; This function uses a non-reentrant model
 14780 ;;
 14781                           
 14782                           	psect	text44
 14783  003F62                     __ptext44:
 14784                           	opt stack 0
 14785  003F62                     _lcdInst:
 14786                           	opt stack 22
 14787                           
 14788                           ;incstack = 0
 14789                           ;lcdInst@data stored from wreg
 14790  003F62  0100               	movlb	0	; () banked
 14791  003F64  6F82               	movwf	lcdInst@data& (0+255),b
 14792                           
 14793                           ;lcd.c: 20: LATDbits.LATD2 = 0;
 14794  003F66  948C               	bcf	3980,2,c	;volatile
 14795                           
 14796                           ;lcd.c: 21: lcdNibble(data);
 14797  003F68  0100               	movlb	0	; () banked
 14798  003F6A  5182               	movf	lcdInst@data& (0+255),w,b
 14799  003F6C  ECB4  F01C         	call	_lcdNibble
 14800                           
 14801                           ;lcd.c: 22: _delay((unsigned long)((100)*(40000000/4000000.0)));
 14802  003F70  0EC8               	movlw	200
 14803  003F72                     u9937:
 14804  003F72  D000               	nop2	
 14805  003F74  2EE8               	decfsz	wreg,f,c
 14806  003F76  D7FD               	bra	u9937
 14807  003F78  0012               	return		;funcret
 14808  003F7A                     __end_of_lcdInst:
 14809                           	opt stack 0
 14810                           tosu	equ	0xFFF
 14811                           tosh	equ	0xFFE
 14812                           tosl	equ	0xFFD
 14813                           pclath	equ	0xFFA
 14814                           tblptru	equ	0xFF8
 14815                           tblptrh	equ	0xFF7
 14816                           tblptrl	equ	0xFF6
 14817                           tablat	equ	0xFF5
 14818                           prodh	equ	0xFF4
 14819                           prodl	equ	0xFF3
 14820                           intcon	equ	0xFF2
 14821                           indf0	equ	0xFEF
 14822                           postinc0	equ	0xFEE
 14823                           fsr0h	equ	0xFEA
 14824                           fsr0l	equ	0xFE9
 14825                           wreg	equ	0xFE8
 14826                           postdec1	equ	0xFE5
 14827                           plusw1	equ	0xFE3
 14828                           fsr1l	equ	0xFE1
 14829                           indf2	equ	0xFDF
 14830                           postinc2	equ	0xFDE
 14831                           postdec2	equ	0xFDD
 14832                           plusw2	equ	0xFDB
 14833                           fsr2h	equ	0xFDA
 14834                           fsr2l	equ	0xFD9
 14835                           status	equ	0xFD8
 14836                           
 14837 ;; *************** function _lcdNibble *****************
 14838 ;; Defined at:
 14839 ;;		line 38 in file "lcd.c"
 14840 ;; Parameters:    Size  Location     Type
 14841 ;;  data            1    wreg     unsigned char 
 14842 ;; Auto vars:     Size  Location     Type
 14843 ;;  data            1    1[BANK0 ] unsigned char 
 14844 ;;  temp            1    0[BANK0 ] unsigned char 
 14845 ;; Return value:  Size  Location     Type
 14846 ;;                  1    wreg      void 
 14847 ;; Registers used:
 14848 ;;		wreg, status,2, status,0
 14849 ;; Tracked objects:
 14850 ;;		On entry : 0/0
 14851 ;;		On exit  : 0/0
 14852 ;;		Unchanged: 0/0
 14853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14855 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14857 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14858 ;;Total ram usage:        2 bytes
 14859 ;; Hardware stack levels used:    1
 14860 ;; Hardware stack levels required when called:    4
 14861 ;; This function calls:
 14862 ;;		Nothing
 14863 ;; This function is called by:
 14864 ;;		_lcdInst
 14865 ;;		_putch
 14866 ;; This function uses a non-reentrant model
 14867 ;;
 14868                           
 14869                           	psect	text45
 14870  003968                     __ptext45:
 14871                           	opt stack 0
 14872  003968                     _lcdNibble:
 14873                           	opt stack 21
 14874                           
 14875                           ;incstack = 0
 14876                           ;lcdNibble@data stored from wreg
 14877  003968  0100               	movlb	0	; () banked
 14878  00396A  6F81               	movwf	lcdNibble@data& (0+255),b
 14879                           
 14880                           ;lcd.c: 46: char temp = (unsigned char) (data & 0xF0);
 14881  00396C  0100               	movlb	0	; () banked
 14882  00396E  5181               	movf	lcdNibble@data& (0+255),w,b
 14883  003970  0BF0               	andlw	240
 14884  003972  6F80               	movwf	lcdNibble@temp& (0+255),b
 14885                           
 14886                           ;lcd.c: 47: LATD = (unsigned char) (LATD & 0x0F);
 14887  003974  508C               	movf	3980,w,c	;volatile
 14888  003976  0B0F               	andlw	15
 14889  003978  6E8C               	movwf	3980,c	;volatile
 14890                           
 14891                           ;lcd.c: 48: LATD = (unsigned char) (temp | LATD);
 14892  00397A  5180               	movf	lcdNibble@temp& (0+255),w,b
 14893  00397C  108C               	iorwf	3980,w,c	;volatile
 14894  00397E  6E8C               	movwf	3980,c	;volatile
 14895                           
 14896                           ; BSR set to: 0
 14897                           ;lcd.c: 50: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 14898  003980  0E00               	movlw	0
 14899  003982  BEF2               	btfsc	intcon,7,c	;volatile
 14900  003984  0E01               	movlw	1
 14901  003986  6E50               	movwf	_LCDinterruptState,c
 14902                           
 14903                           ; BSR set to: 0
 14904  003988  9EF2               	bcf	intcon,7,c	;volatile
 14905                           
 14906                           ; BSR set to: 0
 14907  00398A  868C               	bsf	3980,3,c	;volatile
 14908                           
 14909                           ; BSR set to: 0
 14910  00398C  0E53               	movlw	83
 14911  00398E                     u9947:
 14912  00398E  2EE8               	decfsz	wreg,f,c
 14913  003990  D7FE               	bra	u9947
 14914  003992  F000               	nop	
 14915  003994  968C               	bcf	3980,3,c	;volatile
 14916  003996  0EC8               	movlw	200
 14917  003998                     u9957:
 14918  003998  D000               	nop2	
 14919  00399A  2EE8               	decfsz	wreg,f,c
 14920  00399C  D7FD               	bra	u9957
 14921  00399E  B050               	btfsc	_LCDinterruptState,0,c
 14922  0039A0  D002               	bra	u6965
 14923  0039A2  9EF2               	bcf	intcon,7,c	;volatile
 14924  0039A4  D001               	bra	u6966
 14925  0039A6                     u6965:
 14926  0039A6  8EF2               	bsf	intcon,7,c	;volatile
 14927  0039A8                     u6966:
 14928                           
 14929                           ;lcd.c: 53: data = (unsigned char) (data << 4);
 14930  0039A8  0100               	movlb	0	; () banked
 14931  0039AA  3981               	swapf	lcdNibble@data& (0+255),w,b
 14932  0039AC  0BF0               	andlw	240
 14933  0039AE  6F81               	movwf	lcdNibble@data& (0+255),b
 14934                           
 14935                           ; BSR set to: 0
 14936                           ;lcd.c: 54: temp = (unsigned char) (data & 0xF0);
 14937  0039B0  5181               	movf	lcdNibble@data& (0+255),w,b
 14938  0039B2  0BF0               	andlw	240
 14939  0039B4  6F80               	movwf	lcdNibble@temp& (0+255),b
 14940                           
 14941                           ; BSR set to: 0
 14942                           ;lcd.c: 55: LATD = (unsigned char) (LATD & 0x0F);
 14943  0039B6  508C               	movf	3980,w,c	;volatile
 14944  0039B8  0B0F               	andlw	15
 14945  0039BA  6E8C               	movwf	3980,c	;volatile
 14946                           
 14947                           ; BSR set to: 0
 14948                           ;lcd.c: 56: LATD = (unsigned char) (temp | LATD);
 14949  0039BC  5180               	movf	lcdNibble@temp& (0+255),w,b
 14950  0039BE  108C               	iorwf	3980,w,c	;volatile
 14951  0039C0  6E8C               	movwf	3980,c	;volatile
 14952                           
 14953                           ; BSR set to: 0
 14954                           ;lcd.c: 58: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 14955  0039C2  0E00               	movlw	0
 14956  0039C4  BEF2               	btfsc	intcon,7,c	;volatile
 14957  0039C6  0E01               	movlw	1
 14958  0039C8  6E50               	movwf	_LCDinterruptState,c
 14959                           
 14960                           ; BSR set to: 0
 14961  0039CA  9EF2               	bcf	intcon,7,c	;volatile
 14962                           
 14963                           ; BSR set to: 0
 14964  0039CC  868C               	bsf	3980,3,c	;volatile
 14965                           
 14966                           ; BSR set to: 0
 14967  0039CE  0E53               	movlw	83
 14968  0039D0                     u9967:
 14969  0039D0  2EE8               	decfsz	wreg,f,c
 14970  0039D2  D7FE               	bra	u9967
 14971  0039D4  F000               	nop	
 14972  0039D6  968C               	bcf	3980,3,c	;volatile
 14973  0039D8  0EC8               	movlw	200
 14974  0039DA                     u9977:
 14975  0039DA  D000               	nop2	
 14976  0039DC  2EE8               	decfsz	wreg,f,c
 14977  0039DE  D7FD               	bra	u9977
 14978  0039E0  B050               	btfsc	_LCDinterruptState,0,c
 14979  0039E2  D002               	bra	u6975
 14980  0039E4  9EF2               	bcf	intcon,7,c	;volatile
 14981  0039E6  D001               	bra	u6976
 14982  0039E8                     u6975:
 14983  0039E8  8EF2               	bsf	intcon,7,c	;volatile
 14984  0039EA                     u6976:
 14985  0039EA  0012               	return		;funcret
 14986  0039EC                     __end_of_lcdNibble:
 14987                           	opt stack 0
 14988                           tosu	equ	0xFFF
 14989                           tosh	equ	0xFFE
 14990                           tosl	equ	0xFFD
 14991                           pclath	equ	0xFFA
 14992                           tblptru	equ	0xFF8
 14993                           tblptrh	equ	0xFF7
 14994                           tblptrl	equ	0xFF6
 14995                           tablat	equ	0xFF5
 14996                           prodh	equ	0xFF4
 14997                           prodl	equ	0xFF3
 14998                           intcon	equ	0xFF2
 14999                           indf0	equ	0xFEF
 15000                           postinc0	equ	0xFEE
 15001                           fsr0h	equ	0xFEA
 15002                           fsr0l	equ	0xFE9
 15003                           wreg	equ	0xFE8
 15004                           postdec1	equ	0xFE5
 15005                           plusw1	equ	0xFE3
 15006                           fsr1l	equ	0xFE1
 15007                           indf2	equ	0xFDF
 15008                           postinc2	equ	0xFDE
 15009                           postdec2	equ	0xFDD
 15010                           plusw2	equ	0xFDB
 15011                           fsr2h	equ	0xFDA
 15012                           fsr2l	equ	0xFD9
 15013                           status	equ	0xFD8
 15014                           
 15015 ;; *************** function _I2C_Master_Init *****************
 15016 ;; Defined at:
 15017 ;;		line 14 in file "I2C.c"
 15018 ;; Parameters:    Size  Location     Type
 15019 ;;  clockFreq       4   13[BANK0 ] const unsigned long 
 15020 ;; Auto vars:     Size  Location     Type
 15021 ;;		None
 15022 ;; Return value:  Size  Location     Type
 15023 ;;                  1    wreg      void 
 15024 ;; Registers used:
 15025 ;;		wreg, status,2, status,0, cstack
 15026 ;; Tracked objects:
 15027 ;;		On entry : 0/0
 15028 ;;		On exit  : 0/0
 15029 ;;		Unchanged: 0/0
 15030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15031 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15033 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15034 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15035 ;;Total ram usage:        8 bytes
 15036 ;; Hardware stack levels used:    1
 15037 ;; Hardware stack levels required when called:    5
 15038 ;; This function calls:
 15039 ;;		___lldiv
 15040 ;; This function is called by:
 15041 ;;		_main
 15042 ;; This function uses a non-reentrant model
 15043 ;;
 15044                           
 15045                           	psect	text46
 15046  003B56                     __ptext46:
 15047                           	opt stack 0
 15048  003B56                     _I2C_Master_Init:
 15049                           	opt stack 25
 15050                           
 15051                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
 15052                           
 15053                           ;incstack = 0
 15054  003B56  9AC6               	bcf	4038,5,c	;volatile
 15055                           
 15056                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
 15057  003B58  8694               	bsf	3988,3,c	;volatile
 15058                           
 15059                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
 15060  003B5A  8894               	bsf	3988,4,c	;volatile
 15061                           
 15062                           ;I2C.c: 41: SSPSTAT = 0b10000000;
 15063  003B5C  0E80               	movlw	128
 15064  003B5E  6EC7               	movwf	4039,c	;volatile
 15065                           
 15066                           ;I2C.c: 42: SSPCON1 = 0b00101000;
 15067  003B60  0E28               	movlw	40
 15068  003B62  6EC6               	movwf	4038,c	;volatile
 15069                           
 15070                           ;I2C.c: 43: SSPCON2 = 0b00000000;
 15071  003B64  0E00               	movlw	0
 15072  003B66  6EC5               	movwf	4037,c	;volatile
 15073                           
 15074                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
 15075  003B68  0E00               	movlw	0
 15076  003B6A  0100               	movlb	0	; () banked
 15077  003B6C  6F80               	movwf	___lldiv@dividend& (0+255),b
 15078  003B6E  0E5A               	movlw	90
 15079  003B70  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
 15080  003B72  0E62               	movlw	98
 15081  003B74  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
 15082  003B76  0E02               	movlw	2
 15083  003B78  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
 15084  003B7A  C08D  F091         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
 15085  003B7E  C08E  F092         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
 15086  003B82  C08F  F093         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
 15087  003B86  C090  F094         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
 15088  003B8A  0E02               	movlw	2
 15089  003B8C                     u9495:
 15090  003B8C  90D8               	bcf	status,0,c
 15091  003B8E  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
 15092  003B90  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
 15093  003B92  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
 15094  003B94  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
 15095  003B96  2EE8               	decfsz	wreg,f,c
 15096  003B98  D7F9               	goto	u9495
 15097  003B9A  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
 15098  003B9E  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 15099  003BA2  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 15100  003BA6  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 15101  003BAA  ECF6  F01C         	call	___lldiv	;wreg free
 15102  003BAE  0100               	movlb	0	; () banked
 15103  003BB0  0580               	decf	?___lldiv& (0+255),w,b
 15104  003BB2  6EC8               	movwf	4040,c	;volatile
 15105                           
 15106                           ; BSR set to: 0
 15107  003BB4  0012               	return		;funcret
 15108  003BB6                     __end_of_I2C_Master_Init:
 15109                           	opt stack 0
 15110                           tosu	equ	0xFFF
 15111                           tosh	equ	0xFFE
 15112                           tosl	equ	0xFFD
 15113                           pclath	equ	0xFFA
 15114                           tblptru	equ	0xFF8
 15115                           tblptrh	equ	0xFF7
 15116                           tblptrl	equ	0xFF6
 15117                           tablat	equ	0xFF5
 15118                           prodh	equ	0xFF4
 15119                           prodl	equ	0xFF3
 15120                           intcon	equ	0xFF2
 15121                           indf0	equ	0xFEF
 15122                           postinc0	equ	0xFEE
 15123                           fsr0h	equ	0xFEA
 15124                           fsr0l	equ	0xFE9
 15125                           wreg	equ	0xFE8
 15126                           postdec1	equ	0xFE5
 15127                           plusw1	equ	0xFE3
 15128                           fsr1l	equ	0xFE1
 15129                           indf2	equ	0xFDF
 15130                           postinc2	equ	0xFDE
 15131                           postdec2	equ	0xFDD
 15132                           plusw2	equ	0xFDB
 15133                           fsr2h	equ	0xFDA
 15134                           fsr2l	equ	0xFD9
 15135                           status	equ	0xFD8
 15136                           
 15137 ;; *************** function ___lldiv *****************
 15138 ;; Defined at:
 15139 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 15140 ;; Parameters:    Size  Location     Type
 15141 ;;  dividend        4    0[BANK0 ] unsigned long 
 15142 ;;  divisor         4    4[BANK0 ] unsigned long 
 15143 ;; Auto vars:     Size  Location     Type
 15144 ;;  quotient        4    8[BANK0 ] unsigned long 
 15145 ;;  counter         1   12[BANK0 ] unsigned char 
 15146 ;; Return value:  Size  Location     Type
 15147 ;;                  4    0[BANK0 ] unsigned long 
 15148 ;; Registers used:
 15149 ;;		wreg, status,2, status,0
 15150 ;; Tracked objects:
 15151 ;;		On entry : 0/0
 15152 ;;		On exit  : 0/0
 15153 ;;		Unchanged: 0/0
 15154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15155 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15156 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15158 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15159 ;;Total ram usage:       13 bytes
 15160 ;; Hardware stack levels used:    1
 15161 ;; Hardware stack levels required when called:    4
 15162 ;; This function calls:
 15163 ;;		Nothing
 15164 ;; This function is called by:
 15165 ;;		_I2C_Master_Init
 15166 ;; This function uses a non-reentrant model
 15167 ;;
 15168                           
 15169                           	psect	text47
 15170  0039EC                     __ptext47:
 15171                           	opt stack 0
 15172  0039EC                     ___lldiv:
 15173                           	opt stack 25
 15174                           
 15175                           ; BSR set to: 0
 15176                           ;incstack = 0
 15177  0039EC  0E00               	movlw	0
 15178  0039EE  0100               	movlb	0	; () banked
 15179  0039F0  6F88               	movwf	___lldiv@quotient& (0+255),b
 15180  0039F2  0E00               	movlw	0
 15181  0039F4  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
 15182  0039F6  0E00               	movlw	0
 15183  0039F8  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
 15184  0039FA  0E00               	movlw	0
 15185  0039FC  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
 15186                           
 15187                           ; BSR set to: 0
 15188  0039FE  5184               	movf	___lldiv@divisor& (0+255),w,b
 15189  003A00  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 15190  003A02  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 15191  003A04  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 15192  003A06  B4D8               	btfsc	status,2,c
 15193  003A08  D02A               	goto	l1324
 15194                           
 15195                           ; BSR set to: 0
 15196  003A0A  0E01               	movlw	1
 15197  003A0C  6F8C               	movwf	___lldiv@counter& (0+255),b
 15198  003A0E  D006               	goto	l1319
 15199  003A10                     
 15200                           ; BSR set to: 0
 15201                           
 15202                           ; BSR set to: 0
 15203  003A10  90D8               	bcf	status,0,c
 15204  003A12  3784               	rlcf	___lldiv@divisor& (0+255),f,b
 15205  003A14  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 15206  003A16  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 15207  003A18  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 15208  003A1A  2B8C               	incf	___lldiv@counter& (0+255),f,b
 15209  003A1C                     l1319:
 15210                           
 15211                           ; BSR set to: 0
 15212                           
 15213                           ; BSR set to: 0
 15214  003A1C  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 15215  003A1E  D7F8               	goto	l1320
 15216  003A20                     u9470:
 15217                           
 15218                           ; BSR set to: 0
 15219                           
 15220                           ; BSR set to: 0
 15221                           
 15222                           ; BSR set to: 0
 15223  003A20  90D8               	bcf	status,0,c
 15224  003A22  3788               	rlcf	___lldiv@quotient& (0+255),f,b
 15225  003A24  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 15226  003A26  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 15227  003A28  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 15228                           
 15229                           ; BSR set to: 0
 15230  003A2A  5184               	movf	___lldiv@divisor& (0+255),w,b
 15231  003A2C  5D80               	subwf	___lldiv@dividend& (0+255),w,b
 15232  003A2E  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 15233  003A30  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 15234  003A32  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 15235  003A34  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 15236  003A36  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 15237  003A38  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 15238  003A3A  A0D8               	btfss	status,0,c
 15239  003A3C  D009               	goto	l1323
 15240                           
 15241                           ; BSR set to: 0
 15242  003A3E  5184               	movf	___lldiv@divisor& (0+255),w,b
 15243  003A40  5F80               	subwf	___lldiv@dividend& (0+255),f,b
 15244  003A42  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 15245  003A44  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 15246  003A46  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 15247  003A48  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 15248  003A4A  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 15249  003A4C  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 15250                           
 15251                           ; BSR set to: 0
 15252  003A4E  8188               	bsf	___lldiv@quotient& (0+255),0,b
 15253  003A50                     l1323:
 15254                           
 15255                           ; BSR set to: 0
 15256                           
 15257                           ; BSR set to: 0
 15258  003A50  90D8               	bcf	status,0,c
 15259  003A52  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 15260  003A54  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 15261  003A56  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 15262  003A58  3384               	rrcf	___lldiv@divisor& (0+255),f,b
 15263                           
 15264                           ; BSR set to: 0
 15265  003A5A  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
 15266  003A5C  D7E1               	goto	u9470
 15267  003A5E                     l1324:
 15268                           
 15269                           ; BSR set to: 0
 15270                           
 15271                           ; BSR set to: 0
 15272  003A5E  C088  F080         	movff	___lldiv@quotient,?___lldiv
 15273  003A62  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
 15274  003A66  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
 15275  003A6A  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
 15276                           
 15277                           ; BSR set to: 0
 15278  003A6E  0012               	return		;funcret
 15279  003A70                     __end_of___lldiv:
 15280                           	opt stack 0
 15281                           tosu	equ	0xFFF
 15282                           tosh	equ	0xFFE
 15283                           tosl	equ	0xFFD
 15284                           pclath	equ	0xFFA
 15285                           tblptru	equ	0xFF8
 15286                           tblptrh	equ	0xFF7
 15287                           tblptrl	equ	0xFF6
 15288                           tablat	equ	0xFF5
 15289                           prodh	equ	0xFF4
 15290                           prodl	equ	0xFF3
 15291                           intcon	equ	0xFF2
 15292                           indf0	equ	0xFEF
 15293                           postinc0	equ	0xFEE
 15294                           fsr0h	equ	0xFEA
 15295                           fsr0l	equ	0xFE9
 15296                           wreg	equ	0xFE8
 15297                           postdec1	equ	0xFE5
 15298                           plusw1	equ	0xFE3
 15299                           fsr1l	equ	0xFE1
 15300                           indf2	equ	0xFDF
 15301                           postinc2	equ	0xFDE
 15302                           postdec2	equ	0xFDD
 15303                           plusw2	equ	0xFDB
 15304                           fsr2h	equ	0xFDA
 15305                           fsr2l	equ	0xFD9
 15306                           status	equ	0xFD8
 15307                           
 15308 ;; *************** function _interruptHandler *****************
 15309 ;; Defined at:
 15310 ;;		line 272 in file "main.c"
 15311 ;; Parameters:    Size  Location     Type
 15312 ;;		None
 15313 ;; Auto vars:     Size  Location     Type
 15314 ;;		None
 15315 ;; Return value:  Size  Location     Type
 15316 ;;                  1    wreg      void 
 15317 ;; Registers used:
 15318 ;;		wreg, status,2, status,0, cstack
 15319 ;; Tracked objects:
 15320 ;;		On entry : 0/0
 15321 ;;		On exit  : 0/0
 15322 ;;		Unchanged: 0/0
 15323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15326 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15327 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15328 ;;Total ram usage:       18 bytes
 15329 ;; Hardware stack levels used:    1
 15330 ;; Hardware stack levels required when called:    3
 15331 ;; This function calls:
 15332 ;;		_tmr0_ISR
 15333 ;; This function is called by:
 15334 ;;		Interrupt level 2
 15335 ;; This function uses a non-reentrant model
 15336 ;;
 15337                           
 15338                           	psect	intcode
 15339  000008                     __pintcode:
 15340                           	opt stack 0
 15341  000008                     _interruptHandler:
 15342                           	opt stack 21
 15343                           
 15344                           ; BSR set to: 0
 15345                           ;incstack = 0
 15346  000008  8264               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 15347  00000A  ED74  F01A         	call	int_func,f	;refresh shadow registers
 15348                           tosu	equ	0xFFF
 15349                           tosh	equ	0xFFE
 15350                           tosl	equ	0xFFD
 15351                           pclath	equ	0xFFA
 15352                           tblptru	equ	0xFF8
 15353                           tblptrh	equ	0xFF7
 15354                           tblptrl	equ	0xFF6
 15355                           tablat	equ	0xFF5
 15356                           prodh	equ	0xFF4
 15357                           prodl	equ	0xFF3
 15358                           intcon	equ	0xFF2
 15359                           indf0	equ	0xFEF
 15360                           postinc0	equ	0xFEE
 15361                           fsr0h	equ	0xFEA
 15362                           fsr0l	equ	0xFE9
 15363                           wreg	equ	0xFE8
 15364                           postdec1	equ	0xFE5
 15365                           plusw1	equ	0xFE3
 15366                           fsr1l	equ	0xFE1
 15367                           indf2	equ	0xFDF
 15368                           postinc2	equ	0xFDE
 15369                           postdec2	equ	0xFDD
 15370                           plusw2	equ	0xFDB
 15371                           fsr2h	equ	0xFDA
 15372                           fsr2l	equ	0xFD9
 15373                           status	equ	0xFD8
 15374                           
 15375                           	psect	intcode_body
 15376  0034E8                     __pintcode_body:
 15377                           	opt stack 21
 15378  0034E8                     int_func:
 15379                           	opt stack 21
 15380  0034E8  0006               	pop		; remove dummy address from shadow register refresh
 15381  0034EA  CFFA F022          	movff	pclath,??_interruptHandler
 15382  0034EE  CFFB F023          	movff	pclatu,??_interruptHandler+1
 15383  0034F2  CFE9 F024          	movff	fsr0l,??_interruptHandler+2
 15384  0034F6  CFEA F025          	movff	fsr0h,??_interruptHandler+3
 15385  0034FA  CFE1 F026          	movff	fsr1l,??_interruptHandler+4
 15386  0034FE  CFE2 F027          	movff	fsr1h,??_interruptHandler+5
 15387  003502  CFD9 F028          	movff	fsr2l,??_interruptHandler+6
 15388  003506  CFDA F029          	movff	fsr2h,??_interruptHandler+7
 15389  00350A  CFF3 F02A          	movff	prodl,??_interruptHandler+8
 15390  00350E  CFF4 F02B          	movff	prodh,??_interruptHandler+9
 15391  003512  CFF6 F02C          	movff	tblptrl,??_interruptHandler+10
 15392  003516  CFF7 F02D          	movff	tblptrh,??_interruptHandler+11
 15393  00351A  CFF8 F02E          	movff	tblptru,??_interruptHandler+12
 15394  00351E  CFF5 F02F          	movff	tablat,??_interruptHandler+13
 15395  003522  C064  F030         	movff	btemp,??_interruptHandler+14
 15396  003526  C065  F031         	movff	btemp+1,??_interruptHandler+15
 15397  00352A  C066  F032         	movff	btemp+2,??_interruptHandler+16
 15398  00352E  C067  F033         	movff	btemp+3,??_interruptHandler+17
 15399                           
 15400                           ;main.c: 273: if (T0IE && T0IF) {
 15401  003532  BAF2               	btfsc	intcon,5,c	;volatile
 15402  003534  A4F2               	btfss	intcon,2,c	;volatile
 15403  003536  D003               	goto	i2l186
 15404                           
 15405                           ;main.c: 274: T0IF = 0;
 15406  003538  94F2               	bcf	intcon,2,c	;volatile
 15407                           
 15408                           ;main.c: 275: tmr0_ISR();
 15409  00353A  ECE5  F00F         	call	_tmr0_ISR	;wreg free
 15410  00353E                     i2l186:
 15411                           
 15412                           ;main.c: 276: }
 15413                           ;main.c: 277: if (INT1IF) {
 15414  00353E  A0F0               	btfss	intcon3,0,c	;volatile
 15415  003540  D009               	goto	i2l187
 15416                           
 15417                           ;main.c: 278: if (currentMode == LOGS) {
 15418  003542  044C               	decf	_currentMode,w,c
 15419  003544  104D               	iorwf	_currentMode+1,w,c
 15420  003546  A4D8               	btfss	status,2,c
 15421  003548  D004               	goto	i2l188
 15422                           
 15423                           ;main.c: 279: interruptKeypress = (PORTB & 0xF0) >> 4;
 15424  00354A  3881               	swapf	3969,w,c	;volatile
 15425  00354C  0B0F               	andlw	15
 15426  00354E  0B0F               	andlw	15
 15427  003550  6E63               	movwf	_interruptKeypress,c	;volatile
 15428  003552                     i2l188:
 15429                           
 15430                           ;main.c: 280: }
 15431                           ;main.c: 281: INT1IF = 0;
 15432  003552  90F0               	bcf	intcon3,0,c	;volatile
 15433  003554                     i2l187:
 15434  003554  C033  F067         	movff	??_interruptHandler+17,btemp+3
 15435  003558  C032  F066         	movff	??_interruptHandler+16,btemp+2
 15436  00355C  C031  F065         	movff	??_interruptHandler+15,btemp+1
 15437  003560  C030  F064         	movff	??_interruptHandler+14,btemp
 15438  003564  C02F  FFF5         	movff	??_interruptHandler+13,tablat
 15439  003568  C02E  FFF8         	movff	??_interruptHandler+12,tblptru
 15440  00356C  C02D  FFF7         	movff	??_interruptHandler+11,tblptrh
 15441  003570  C02C  FFF6         	movff	??_interruptHandler+10,tblptrl
 15442  003574  C02B  FFF4         	movff	??_interruptHandler+9,prodh
 15443  003578  C02A  FFF3         	movff	??_interruptHandler+8,prodl
 15444  00357C  C029  FFDA         	movff	??_interruptHandler+7,fsr2h
 15445  003580  C028  FFD9         	movff	??_interruptHandler+6,fsr2l
 15446  003584  C027  FFE2         	movff	??_interruptHandler+5,fsr1h
 15447  003588  C026  FFE1         	movff	??_interruptHandler+4,fsr1l
 15448  00358C  C025  FFEA         	movff	??_interruptHandler+3,fsr0h
 15449  003590  C024  FFE9         	movff	??_interruptHandler+2,fsr0l
 15450  003594  C023  FFFB         	movff	??_interruptHandler+1,pclatu
 15451  003598  C022  FFFA         	movff	??_interruptHandler,pclath
 15452  00359C  9264               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15453  00359E  0011               	retfie		f
 15454  0035A0                     __end_of_interruptHandler:
 15455                           	opt stack 0
 15456                           tosu	equ	0xFFF
 15457                           tosh	equ	0xFFE
 15458                           tosl	equ	0xFFD
 15459                           pclatu	equ	0xFFB
 15460                           pclath	equ	0xFFA
 15461                           tblptru	equ	0xFF8
 15462                           tblptrh	equ	0xFF7
 15463                           tblptrl	equ	0xFF6
 15464                           tablat	equ	0xFF5
 15465                           prodh	equ	0xFF4
 15466                           prodl	equ	0xFF3
 15467                           intcon	equ	0xFF2
 15468                           intcon3	equ	0xFF0
 15469                           indf0	equ	0xFEF
 15470                           postinc0	equ	0xFEE
 15471                           fsr0h	equ	0xFEA
 15472                           fsr0l	equ	0xFE9
 15473                           wreg	equ	0xFE8
 15474                           postdec1	equ	0xFE5
 15475                           plusw1	equ	0xFE3
 15476                           fsr1h	equ	0xFE2
 15477                           fsr1l	equ	0xFE1
 15478                           indf2	equ	0xFDF
 15479                           postinc2	equ	0xFDE
 15480                           postdec2	equ	0xFDD
 15481                           plusw2	equ	0xFDB
 15482                           fsr2h	equ	0xFDA
 15483                           fsr2l	equ	0xFD9
 15484                           status	equ	0xFD8
 15485                           
 15486 ;; *************** function _tmr0_ISR *****************
 15487 ;; Defined at:
 15488 ;;		line 103 in file "timer.c"
 15489 ;; Parameters:    Size  Location     Type
 15490 ;;		None
 15491 ;; Auto vars:     Size  Location     Type
 15492 ;;  motorControl    2   31[COMRAM] unsigned int 
 15493 ;;  motorControl    2   29[COMRAM] unsigned int 
 15494 ;;  motorControl    2   27[COMRAM] unsigned int 
 15495 ;;  motorControl    2   25[COMRAM] unsigned int 
 15496 ;; Return value:  Size  Location     Type
 15497 ;;                  1    wreg      void 
 15498 ;; Registers used:
 15499 ;;		wreg, status,2, status,0, cstack
 15500 ;; Tracked objects:
 15501 ;;		On entry : 0/0
 15502 ;;		On exit  : 0/0
 15503 ;;		Unchanged: 0/0
 15504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15506 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15507 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15508 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15509 ;;Total ram usage:       13 bytes
 15510 ;; Hardware stack levels used:    1
 15511 ;; Hardware stack levels required when called:    2
 15512 ;; This function calls:
 15513 ;;		_inverseDir
 15514 ;;		_resetMotorTimer
 15515 ;;		i2___ftadd
 15516 ;;		i2_motorControl
 15517 ;; This function is called by:
 15518 ;;		_interruptHandler
 15519 ;; This function uses a non-reentrant model
 15520 ;;
 15521                           
 15522                           	psect	text49
 15523  001FCA                     __ptext49:
 15524                           	opt stack 0
 15525  001FCA                     _tmr0_ISR:
 15526                           	opt stack 21
 15527                           
 15528                           ;timer.c: 104: timeSinceLastTic += 0.1;
 15529                           
 15530                           ;incstack = 0
 15531  001FCA  C05D  F009         	movff	_timeSinceLastTic,i2___ftadd@f1	;volatile
 15532  001FCE  C05E  F00A         	movff	_timeSinceLastTic+1,i2___ftadd@f1+1	;volatile
 15533  001FD2  C05F  F00B         	movff	_timeSinceLastTic+2,i2___ftadd@f1+2	;volatile
 15534  001FD6  0ECD               	movlw	205
 15535  001FD8  6E0C               	movwf	i2___ftadd@f2,c
 15536  001FDA  0ECC               	movlw	204
 15537  001FDC  6E0D               	movwf	i2___ftadd@f2+1,c
 15538  001FDE  0E3D               	movlw	61
 15539  001FE0  6E0E               	movwf	i2___ftadd@f2+2,c
 15540  001FE2  EC75  F017         	call	i2___ftadd	;wreg free
 15541  001FE6  C009  F05D         	movff	?i2___ftadd,_timeSinceLastTic	;volatile
 15542  001FEA  C00A  F05E         	movff	?i2___ftadd+1,_timeSinceLastTic+1	;volatile
 15543  001FEE  C00B  F05F         	movff	?i2___ftadd+2,_timeSinceLastTic+2	;volatile
 15544                           
 15545                           ;timer.c: 105: test++;
 15546  001FF2  0E01               	movlw	1
 15547  001FF4  2644               	addwf	_test,f,c	;volatile
 15548  001FF6  0E00               	movlw	0
 15549  001FF8  2245               	addwfc	_test+1,f,c	;volatile
 15550  001FFA  2246               	addwfc	_test+2,f,c	;volatile
 15551  001FFC  2247               	addwfc	_test+3,f,c	;volatile
 15552                           
 15553                           ;timer.c: 106: if (operating) operatingTime += 0.1;
 15554  001FFE  504F               	movf	_operating,w,c
 15555  002000  B4D8               	btfsc	status,2,c
 15556  002002  D014               	goto	i2l713
 15557  002004  C060  F009         	movff	timer@operatingTime,i2___ftadd@f1	;volatile
 15558  002008  C061  F00A         	movff	timer@operatingTime+1,i2___ftadd@f1+1	;volatile
 15559  00200C  C062  F00B         	movff	timer@operatingTime+2,i2___ftadd@f1+2	;volatile
 15560  002010  0ECD               	movlw	205
 15561  002012  6E0C               	movwf	i2___ftadd@f2,c
 15562  002014  0ECC               	movlw	204
 15563  002016  6E0D               	movwf	i2___ftadd@f2+1,c
 15564  002018  0E3D               	movlw	61
 15565  00201A  6E0E               	movwf	i2___ftadd@f2+2,c
 15566  00201C  EC75  F017         	call	i2___ftadd	;wreg free
 15567  002020  C009  F060         	movff	?i2___ftadd,timer@operatingTime	;volatile
 15568  002024  C00A  F061         	movff	?i2___ftadd+1,timer@operatingTime+1	;volatile
 15569  002028  C00B  F062         	movff	?i2___ftadd+2,timer@operatingTime+2	;volatile
 15570  00202C                     i2l713:
 15571                           
 15572                           ;timer.c: 107: TMR0H = 0xF9;
 15573  00202C  0EF9               	movlw	249
 15574  00202E  6ED7               	movwf	4055,c	;volatile
 15575                           
 15576                           ;timer.c: 108: TMR0L = 0x5F;
 15577  002030  0E5F               	movlw	95
 15578  002032  6ED6               	movwf	4054,c	;volatile
 15579                           
 15580                           ;timer.c: 109: unsigned int motorControlTimerB = (motorControlTimerB > longTolerance) ? 
      +                          0 : motorControlTimerB + 1;
 15581  002034  501A               	movf	tmr0_ISR@motorControlTimerB,w,c
 15582  002036  6E15               	movwf	??_tmr0_ISR& (0+255),c
 15583  002038  501B               	movf	tmr0_ISR@motorControlTimerB+1,w,c
 15584  00203A  6E16               	movwf	(??_tmr0_ISR+1)& (0+255),c
 15585  00203C  6A17               	clrf	(??_tmr0_ISR+2)& (0+255),c
 15586  00203E  6A18               	clrf	(??_tmr0_ISR+3)& (0+255),c
 15587  002040  5015               	movf	??_tmr0_ISR,w,c
 15588  002042  5C55               	subwf	_longTolerance,w,c
 15589  002044  5016               	movf	??_tmr0_ISR+1,w,c
 15590  002046  5856               	subwfb	_longTolerance+1,w,c
 15591  002048  5017               	movf	??_tmr0_ISR+2,w,c
 15592  00204A  5857               	subwfb	_longTolerance+2,w,c
 15593  00204C  5058               	movf	_longTolerance+3,w,c
 15594  00204E  0A80               	xorlw	128
 15595  002050  6E19               	movwf	(??_tmr0_ISR+4)& (0+255),c
 15596  002052  5018               	movf	??_tmr0_ISR+3,w,c
 15597  002054  0A80               	xorlw	128
 15598  002056  5819               	subwfb	(??_tmr0_ISR+4)& (0+255),w,c
 15599  002058  A0D8               	btfss	status,0,c
 15600  00205A  D007               	goto	i2l715
 15601  00205C  0E01               	movlw	1
 15602  00205E  241A               	addwf	tmr0_ISR@motorControlTimerB,w,c
 15603  002060  6E1A               	movwf	tmr0_ISR@motorControlTimerB,c
 15604  002062  0E00               	movlw	0
 15605  002064  201B               	addwfc	tmr0_ISR@motorControlTimerB+1,w,c
 15606  002066  6E1B               	movwf	tmr0_ISR@motorControlTimerB+1,c
 15607  002068  D004               	goto	i2l717
 15608  00206A                     i2l715:
 15609  00206A  0E00               	movlw	0
 15610  00206C  6E1B               	movwf	tmr0_ISR@motorControlTimerB+1,c
 15611  00206E  0E00               	movlw	0
 15612  002070  6E1A               	movwf	tmr0_ISR@motorControlTimerB,c
 15613  002072                     i2l717:
 15614                           
 15615                           ;timer.c: 110: unsigned int motorControlTimerN = (motorControlTimerN > longTolerance) ? 
      +                          0 : motorControlTimerN + 1;
 15616  002072  501C               	movf	tmr0_ISR@motorControlTimerN,w,c
 15617  002074  6E15               	movwf	??_tmr0_ISR& (0+255),c
 15618  002076  501D               	movf	tmr0_ISR@motorControlTimerN+1,w,c
 15619  002078  6E16               	movwf	(??_tmr0_ISR+1)& (0+255),c
 15620  00207A  6A17               	clrf	(??_tmr0_ISR+2)& (0+255),c
 15621  00207C  6A18               	clrf	(??_tmr0_ISR+3)& (0+255),c
 15622  00207E  5015               	movf	??_tmr0_ISR,w,c
 15623  002080  5C55               	subwf	_longTolerance,w,c
 15624  002082  5016               	movf	??_tmr0_ISR+1,w,c
 15625  002084  5856               	subwfb	_longTolerance+1,w,c
 15626  002086  5017               	movf	??_tmr0_ISR+2,w,c
 15627  002088  5857               	subwfb	_longTolerance+2,w,c
 15628  00208A  5058               	movf	_longTolerance+3,w,c
 15629  00208C  0A80               	xorlw	128
 15630  00208E  6E19               	movwf	(??_tmr0_ISR+4)& (0+255),c
 15631  002090  5018               	movf	??_tmr0_ISR+3,w,c
 15632  002092  0A80               	xorlw	128
 15633  002094  5819               	subwfb	(??_tmr0_ISR+4)& (0+255),w,c
 15634  002096  A0D8               	btfss	status,0,c
 15635  002098  D007               	goto	i2l719
 15636  00209A  0E01               	movlw	1
 15637  00209C  241C               	addwf	tmr0_ISR@motorControlTimerN,w,c
 15638  00209E  6E1C               	movwf	tmr0_ISR@motorControlTimerN,c
 15639  0020A0  0E00               	movlw	0
 15640  0020A2  201D               	addwfc	tmr0_ISR@motorControlTimerN+1,w,c
 15641  0020A4  6E1D               	movwf	tmr0_ISR@motorControlTimerN+1,c
 15642  0020A6  D004               	goto	i2l721
 15643  0020A8                     i2l719:
 15644  0020A8  0E00               	movlw	0
 15645  0020AA  6E1D               	movwf	tmr0_ISR@motorControlTimerN+1,c
 15646  0020AC  0E00               	movlw	0
 15647  0020AE  6E1C               	movwf	tmr0_ISR@motorControlTimerN,c
 15648  0020B0                     i2l721:
 15649                           
 15650                           ;timer.c: 111: unsigned int motorControlTimerS = (motorControlTimerS > longTolerance) ? 
      +                          0 : motorControlTimerS + 1;
 15651  0020B0  501E               	movf	tmr0_ISR@motorControlTimerS,w,c
 15652  0020B2  6E15               	movwf	??_tmr0_ISR& (0+255),c
 15653  0020B4  501F               	movf	tmr0_ISR@motorControlTimerS+1,w,c
 15654  0020B6  6E16               	movwf	(??_tmr0_ISR+1)& (0+255),c
 15655  0020B8  6A17               	clrf	(??_tmr0_ISR+2)& (0+255),c
 15656  0020BA  6A18               	clrf	(??_tmr0_ISR+3)& (0+255),c
 15657  0020BC  5015               	movf	??_tmr0_ISR,w,c
 15658  0020BE  5C55               	subwf	_longTolerance,w,c
 15659  0020C0  5016               	movf	??_tmr0_ISR+1,w,c
 15660  0020C2  5856               	subwfb	_longTolerance+1,w,c
 15661  0020C4  5017               	movf	??_tmr0_ISR+2,w,c
 15662  0020C6  5857               	subwfb	_longTolerance+2,w,c
 15663  0020C8  5058               	movf	_longTolerance+3,w,c
 15664  0020CA  0A80               	xorlw	128
 15665  0020CC  6E19               	movwf	(??_tmr0_ISR+4)& (0+255),c
 15666  0020CE  5018               	movf	??_tmr0_ISR+3,w,c
 15667  0020D0  0A80               	xorlw	128
 15668  0020D2  5819               	subwfb	(??_tmr0_ISR+4)& (0+255),w,c
 15669  0020D4  A0D8               	btfss	status,0,c
 15670  0020D6  D007               	goto	i2l723
 15671  0020D8  0E01               	movlw	1
 15672  0020DA  241E               	addwf	tmr0_ISR@motorControlTimerS,w,c
 15673  0020DC  6E1E               	movwf	tmr0_ISR@motorControlTimerS,c
 15674  0020DE  0E00               	movlw	0
 15675  0020E0  201F               	addwfc	tmr0_ISR@motorControlTimerS+1,w,c
 15676  0020E2  6E1F               	movwf	tmr0_ISR@motorControlTimerS+1,c
 15677  0020E4  D004               	goto	i2l725
 15678  0020E6                     i2l723:
 15679  0020E6  0E00               	movlw	0
 15680  0020E8  6E1F               	movwf	tmr0_ISR@motorControlTimerS+1,c
 15681  0020EA  0E00               	movlw	0
 15682  0020EC  6E1E               	movwf	tmr0_ISR@motorControlTimerS,c
 15683  0020EE                     i2l725:
 15684                           
 15685                           ;timer.c: 112: unsigned int motorControlTimerW = (motorControlTimerW > longTolerance) ? 
      +                          0 : motorControlTimerW + 1;
 15686  0020EE  5020               	movf	tmr0_ISR@motorControlTimerW,w,c
 15687  0020F0  6E15               	movwf	??_tmr0_ISR& (0+255),c
 15688  0020F2  5021               	movf	tmr0_ISR@motorControlTimerW+1,w,c
 15689  0020F4  6E16               	movwf	(??_tmr0_ISR+1)& (0+255),c
 15690  0020F6  6A17               	clrf	(??_tmr0_ISR+2)& (0+255),c
 15691  0020F8  6A18               	clrf	(??_tmr0_ISR+3)& (0+255),c
 15692  0020FA  5015               	movf	??_tmr0_ISR,w,c
 15693  0020FC  5C55               	subwf	_longTolerance,w,c
 15694  0020FE  5016               	movf	??_tmr0_ISR+1,w,c
 15695  002100  5856               	subwfb	_longTolerance+1,w,c
 15696  002102  5017               	movf	??_tmr0_ISR+2,w,c
 15697  002104  5857               	subwfb	_longTolerance+2,w,c
 15698  002106  5058               	movf	_longTolerance+3,w,c
 15699  002108  0A80               	xorlw	128
 15700  00210A  6E19               	movwf	(??_tmr0_ISR+4)& (0+255),c
 15701  00210C  5018               	movf	??_tmr0_ISR+3,w,c
 15702  00210E  0A80               	xorlw	128
 15703  002110  5819               	subwfb	(??_tmr0_ISR+4)& (0+255),w,c
 15704  002112  A0D8               	btfss	status,0,c
 15705  002114  D007               	goto	i2l727
 15706  002116  0E01               	movlw	1
 15707  002118  2420               	addwf	tmr0_ISR@motorControlTimerW,w,c
 15708  00211A  6E20               	movwf	tmr0_ISR@motorControlTimerW,c
 15709  00211C  0E00               	movlw	0
 15710  00211E  2021               	addwfc	tmr0_ISR@motorControlTimerW+1,w,c
 15711  002120  6E21               	movwf	tmr0_ISR@motorControlTimerW+1,c
 15712  002122  D11A               	goto	i2l730
 15713  002124                     i2l727:
 15714  002124  0E00               	movlw	0
 15715  002126  6E21               	movwf	tmr0_ISR@motorControlTimerW+1,c
 15716  002128  0E00               	movlw	0
 15717  00212A  6E20               	movwf	tmr0_ISR@motorControlTimerW,c
 15718                           
 15719                           ;timer.c: 169: switch (currentMode) {
 15720  00212C  D115               	goto	i2l730
 15721  00212E                     
 15722                           ;timer.c: 171: case CLEARING:
 15723                           ;timer.c: 172: if (currentMotorDir.w != STOPMOTOR) {
 15724  00212E  0E02               	movlw	2
 15725  002130  185C               	xorwf	_currentMotorDir+3,w,c
 15726  002132  B4D8               	btfsc	status,2,c
 15727  002134  D03F               	goto	i2l737
 15728                           
 15729                           ;timer.c: 173: if (!motorGoingBackwards.w) {
 15730  002136  5043               	movf	_motorGoingBackwards+3,w,c	;volatile
 15731  002138  A4D8               	btfss	status,2,c
 15732  00213A  D01C               	goto	i2l734
 15733                           
 15734                           ;timer.c: 174: if (motorControlTimerW == longTolerance) {
 15735  00213C  5020               	movf	tmr0_ISR@motorControlTimerW,w,c
 15736  00213E  6E15               	movwf	??_tmr0_ISR& (0+255),c
 15737  002140  5021               	movf	tmr0_ISR@motorControlTimerW+1,w,c
 15738  002142  6E16               	movwf	(??_tmr0_ISR+1)& (0+255),c
 15739  002144  6A17               	clrf	(??_tmr0_ISR+2)& (0+255),c
 15740  002146  6A18               	clrf	(??_tmr0_ISR+3)& (0+255),c
 15741  002148  5055               	movf	_longTolerance,w,c
 15742  00214A  1815               	xorwf	??_tmr0_ISR,w,c
 15743  00214C  E133               	bnz	i2l5336
 15744  00214E  5056               	movf	_longTolerance+1,w,c
 15745  002150  1816               	xorwf	??_tmr0_ISR+1,w,c
 15746  002152  E130               	bnz	i2l5336
 15747  002154  5057               	movf	_longTolerance+2,w,c
 15748  002156  1817               	xorwf	??_tmr0_ISR+2,w,c
 15749  002158  E12D               	bnz	i2l5336
 15750  00215A  5058               	movf	_longTolerance+3,w,c
 15751  00215C  1818               	xorwf	??_tmr0_ISR+3,w,c
 15752  00215E  A4D8               	btfss	status,2,c
 15753  002160  D029               	goto	i2l737
 15754                           
 15755                           ;timer.c: 175: motorControl(WASHER, inverseDir(currentMotorDir.w));
 15756  002162  505C               	movf	_currentMotorDir+3,w,c
 15757  002164  ECE6  F01F         	call	_inverseDir
 15758  002168  6E02               	movwf	i2motorControl@dir,c
 15759  00216A  0E03               	movlw	3
 15760  00216C  EC14  F01A         	call	i2_motorControl
 15761                           
 15762                           ;timer.c: 176: motorGoingBackwards.w = 1;
 15763  002170  0E01               	movlw	1
 15764  002172  D01B               	goto	L18
 15765  002174                     i2l734:
 15766                           
 15767                           ;timer.c: 180: if (motorControlTimerW == shortTolerance) {
 15768  002174  5020               	movf	tmr0_ISR@motorControlTimerW,w,c
 15769  002176  6E15               	movwf	??_tmr0_ISR& (0+255),c
 15770  002178  5021               	movf	tmr0_ISR@motorControlTimerW+1,w,c
 15771  00217A  6E16               	movwf	(??_tmr0_ISR+1)& (0+255),c
 15772  00217C  6A17               	clrf	(??_tmr0_ISR+2)& (0+255),c
 15773  00217E  6A18               	clrf	(??_tmr0_ISR+3)& (0+255),c
 15774  002180  5051               	movf	_shortTolerance,w,c
 15775  002182  1815               	xorwf	??_tmr0_ISR,w,c
 15776  002184  E117               	bnz	i2l5336
 15777  002186  5052               	movf	_shortTolerance+1,w,c
 15778  002188  1816               	xorwf	??_tmr0_ISR+1,w,c
 15779  00218A  E114               	bnz	i2l5336
 15780  00218C  5053               	movf	_shortTolerance+2,w,c
 15781  00218E  1817               	xorwf	??_tmr0_ISR+2,w,c
 15782  002190  E111               	bnz	i2l5336
 15783  002192  5054               	movf	_shortTolerance+3,w,c
 15784  002194  1818               	xorwf	??_tmr0_ISR+3,w,c
 15785  002196  A4D8               	btfss	status,2,c
 15786  002198  D00D               	goto	i2l737
 15787                           
 15788                           ;timer.c: 181: motorControl(WASHER, inverseDir(currentMotorDir.w));
 15789  00219A  505C               	movf	_currentMotorDir+3,w,c
 15790  00219C  ECE6  F01F         	call	_inverseDir
 15791  0021A0  6E02               	movwf	i2motorControl@dir,c
 15792  0021A2  0E03               	movlw	3
 15793  0021A4  EC14  F01A         	call	i2_motorControl
 15794                           
 15795                           ;timer.c: 182: motorGoingBackwards.w = 0;
 15796  0021A8  0E00               	movlw	0
 15797  0021AA                     L18:
 15798  0021AA  6E43               	movwf	_motorGoingBackwards+3,c	;volatile
 15799                           
 15800                           ;timer.c: 183: motorControlTimerW = 0;
 15801  0021AC  0E00               	movlw	0
 15802  0021AE  6E21               	movwf	tmr0_ISR@motorControlTimerW+1,c
 15803  0021B0  0E00               	movlw	0
 15804  0021B2  6E20               	movwf	tmr0_ISR@motorControlTimerW,c
 15805  0021B4                     i2l737:
 15806  0021B4                     i2l5336:
 15807                           
 15808                           ;timer.c: 184: }
 15809                           ;timer.c: 185: }
 15810                           ;timer.c: 186: }
 15811                           ;timer.c: 192: if (currentMotorDir.b != STOPMOTOR) {
 15812  0021B4  0E02               	movlw	2
 15813  0021B6  1859               	xorwf	_currentMotorDir,w,c
 15814  0021B8  B4D8               	btfsc	status,2,c
 15815  0021BA  D03F               	goto	i2l742
 15816                           
 15817                           ;timer.c: 193: if (!motorGoingBackwards.b) {
 15818  0021BC  5040               	movf	_motorGoingBackwards,w,c	;volatile
 15819  0021BE  A4D8               	btfss	status,2,c
 15820  0021C0  D01C               	goto	i2l739
 15821                           
 15822                           ;timer.c: 194: if (motorControlTimerB == longTolerance) {
 15823  0021C2  501A               	movf	tmr0_ISR@motorControlTimerB,w,c
 15824  0021C4  6E15               	movwf	??_tmr0_ISR& (0+255),c
 15825  0021C6  501B               	movf	tmr0_ISR@motorControlTimerB+1,w,c
 15826  0021C8  6E16               	movwf	(??_tmr0_ISR+1)& (0+255),c
 15827  0021CA  6A17               	clrf	(??_tmr0_ISR+2)& (0+255),c
 15828  0021CC  6A18               	clrf	(??_tmr0_ISR+3)& (0+255),c
 15829  0021CE  5055               	movf	_longTolerance,w,c
 15830  0021D0  1815               	xorwf	??_tmr0_ISR,w,c
 15831  0021D2  E133               	bnz	i2l5356
 15832  0021D4  5056               	movf	_longTolerance+1,w,c
 15833  0021D6  1816               	xorwf	??_tmr0_ISR+1,w,c
 15834  0021D8  E130               	bnz	i2l5356
 15835  0021DA  5057               	movf	_longTolerance+2,w,c
 15836  0021DC  1817               	xorwf	??_tmr0_ISR+2,w,c
 15837  0021DE  E12D               	bnz	i2l5356
 15838  0021E0  5058               	movf	_longTolerance+3,w,c
 15839  0021E2  1818               	xorwf	??_tmr0_ISR+3,w,c
 15840  0021E4  A4D8               	btfss	status,2,c
 15841  0021E6  D029               	goto	i2l742
 15842                           
 15843                           ;timer.c: 195: motorControl(BOLT, inverseDir(currentMotorDir.b));
 15844  0021E8  5059               	movf	_currentMotorDir,w,c
 15845  0021EA  ECE6  F01F         	call	_inverseDir
 15846  0021EE  6E02               	movwf	i2motorControl@dir,c
 15847  0021F0  0E00               	movlw	0
 15848  0021F2  EC14  F01A         	call	i2_motorControl
 15849                           
 15850                           ;timer.c: 196: motorGoingBackwards.b = 1;
 15851  0021F6  0E01               	movlw	1
 15852  0021F8  D01B               	goto	L19
 15853  0021FA                     i2l739:
 15854                           
 15855                           ;timer.c: 200: if (motorControlTimerB == shortTolerance) {
 15856  0021FA  501A               	movf	tmr0_ISR@motorControlTimerB,w,c
 15857  0021FC  6E15               	movwf	??_tmr0_ISR& (0+255),c
 15858  0021FE  501B               	movf	tmr0_ISR@motorControlTimerB+1,w,c
 15859  002200  6E16               	movwf	(??_tmr0_ISR+1)& (0+255),c
 15860  002202  6A17               	clrf	(??_tmr0_ISR+2)& (0+255),c
 15861  002204  6A18               	clrf	(??_tmr0_ISR+3)& (0+255),c
 15862  002206  5051               	movf	_shortTolerance,w,c
 15863  002208  1815               	xorwf	??_tmr0_ISR,w,c
 15864  00220A  E117               	bnz	i2l5356
 15865  00220C  5052               	movf	_shortTolerance+1,w,c
 15866  00220E  1816               	xorwf	??_tmr0_ISR+1,w,c
 15867  002210  E114               	bnz	i2l5356
 15868  002212  5053               	movf	_shortTolerance+2,w,c
 15869  002214  1817               	xorwf	??_tmr0_ISR+2,w,c
 15870  002216  E111               	bnz	i2l5356
 15871  002218  5054               	movf	_shortTolerance+3,w,c
 15872  00221A  1818               	xorwf	??_tmr0_ISR+3,w,c
 15873  00221C  A4D8               	btfss	status,2,c
 15874  00221E  D00D               	goto	i2l742
 15875                           
 15876                           ;timer.c: 201: motorControl(BOLT, inverseDir(currentMotorDir.b));
 15877  002220  5059               	movf	_currentMotorDir,w,c
 15878  002222  ECE6  F01F         	call	_inverseDir
 15879  002226  6E02               	movwf	i2motorControl@dir,c
 15880  002228  0E00               	movlw	0
 15881  00222A  EC14  F01A         	call	i2_motorControl
 15882                           
 15883                           ;timer.c: 202: motorGoingBackwards.b = 0;
 15884  00222E  0E00               	movlw	0
 15885  002230                     L19:
 15886  002230  6E40               	movwf	_motorGoingBackwards,c	;volatile
 15887                           
 15888                           ;timer.c: 203: motorControlTimerB = 0;
 15889  002232  0E00               	movlw	0
 15890  002234  6E1B               	movwf	tmr0_ISR@motorControlTimerB+1,c
 15891  002236  0E00               	movlw	0
 15892  002238  6E1A               	movwf	tmr0_ISR@motorControlTimerB,c
 15893  00223A                     i2l742:
 15894  00223A                     i2l5356:
 15895                           
 15896                           ;timer.c: 204: }
 15897                           ;timer.c: 205: }
 15898                           ;timer.c: 206: }
 15899                           ;timer.c: 208: if (currentMotorDir.n != STOPMOTOR) {
 15900  00223A  0E02               	movlw	2
 15901  00223C  185A               	xorwf	_currentMotorDir+1,w,c
 15902  00223E  B4D8               	btfsc	status,2,c
 15903  002240  D03F               	goto	i2l747
 15904                           
 15905                           ;timer.c: 209: if (!motorGoingBackwards.n) {
 15906  002242  5041               	movf	_motorGoingBackwards+1,w,c	;volatile
 15907  002244  A4D8               	btfss	status,2,c
 15908  002246  D01C               	goto	i2l744
 15909                           
 15910                           ;timer.c: 210: if (motorControlTimerN == longTolerance) {
 15911  002248  501C               	movf	tmr0_ISR@motorControlTimerN,w,c
 15912  00224A  6E15               	movwf	??_tmr0_ISR& (0+255),c
 15913  00224C  501D               	movf	tmr0_ISR@motorControlTimerN+1,w,c
 15914  00224E  6E16               	movwf	(??_tmr0_ISR+1)& (0+255),c
 15915  002250  6A17               	clrf	(??_tmr0_ISR+2)& (0+255),c
 15916  002252  6A18               	clrf	(??_tmr0_ISR+3)& (0+255),c
 15917  002254  5055               	movf	_longTolerance,w,c
 15918  002256  1815               	xorwf	??_tmr0_ISR,w,c
 15919  002258  E133               	bnz	i2l5376
 15920  00225A  5056               	movf	_longTolerance+1,w,c
 15921  00225C  1816               	xorwf	??_tmr0_ISR+1,w,c
 15922  00225E  E130               	bnz	i2l5376
 15923  002260  5057               	movf	_longTolerance+2,w,c
 15924  002262  1817               	xorwf	??_tmr0_ISR+2,w,c
 15925  002264  E12D               	bnz	i2l5376
 15926  002266  5058               	movf	_longTolerance+3,w,c
 15927  002268  1818               	xorwf	??_tmr0_ISR+3,w,c
 15928  00226A  A4D8               	btfss	status,2,c
 15929  00226C  D029               	goto	i2l747
 15930                           
 15931                           ;timer.c: 211: motorControl(NUT, inverseDir(currentMotorDir.n));
 15932  00226E  505A               	movf	_currentMotorDir+1,w,c
 15933  002270  ECE6  F01F         	call	_inverseDir
 15934  002274  6E02               	movwf	i2motorControl@dir,c
 15935  002276  0E01               	movlw	1
 15936  002278  EC14  F01A         	call	i2_motorControl
 15937                           
 15938                           ;timer.c: 212: motorGoingBackwards.n = 1;
 15939  00227C  0E01               	movlw	1
 15940  00227E  D01B               	goto	L20
 15941  002280                     i2l744:
 15942                           
 15943                           ;timer.c: 216: if (motorControlTimerN == shortTolerance) {
 15944  002280  501C               	movf	tmr0_ISR@motorControlTimerN,w,c
 15945  002282  6E15               	movwf	??_tmr0_ISR& (0+255),c
 15946  002284  501D               	movf	tmr0_ISR@motorControlTimerN+1,w,c
 15947  002286  6E16               	movwf	(??_tmr0_ISR+1)& (0+255),c
 15948  002288  6A17               	clrf	(??_tmr0_ISR+2)& (0+255),c
 15949  00228A  6A18               	clrf	(??_tmr0_ISR+3)& (0+255),c
 15950  00228C  5051               	movf	_shortTolerance,w,c
 15951  00228E  1815               	xorwf	??_tmr0_ISR,w,c
 15952  002290  E117               	bnz	i2l5376
 15953  002292  5052               	movf	_shortTolerance+1,w,c
 15954  002294  1816               	xorwf	??_tmr0_ISR+1,w,c
 15955  002296  E114               	bnz	i2l5376
 15956  002298  5053               	movf	_shortTolerance+2,w,c
 15957  00229A  1817               	xorwf	??_tmr0_ISR+2,w,c
 15958  00229C  E111               	bnz	i2l5376
 15959  00229E  5054               	movf	_shortTolerance+3,w,c
 15960  0022A0  1818               	xorwf	??_tmr0_ISR+3,w,c
 15961  0022A2  A4D8               	btfss	status,2,c
 15962  0022A4  D00D               	goto	i2l747
 15963                           
 15964                           ;timer.c: 217: motorControl(NUT, inverseDir(currentMotorDir.b));
 15965  0022A6  5059               	movf	_currentMotorDir,w,c
 15966  0022A8  ECE6  F01F         	call	_inverseDir
 15967  0022AC  6E02               	movwf	i2motorControl@dir,c
 15968  0022AE  0E01               	movlw	1
 15969  0022B0  EC14  F01A         	call	i2_motorControl
 15970                           
 15971                           ;timer.c: 218: motorGoingBackwards.n = 0;
 15972  0022B4  0E00               	movlw	0
 15973  0022B6                     L20:
 15974  0022B6  6E41               	movwf	_motorGoingBackwards+1,c	;volatile
 15975                           
 15976                           ;timer.c: 219: motorControlTimerN = 0;
 15977  0022B8  0E00               	movlw	0
 15978  0022BA  6E1D               	movwf	tmr0_ISR@motorControlTimerN+1,c
 15979  0022BC  0E00               	movlw	0
 15980  0022BE  6E1C               	movwf	tmr0_ISR@motorControlTimerN,c
 15981  0022C0                     i2l747:
 15982  0022C0                     i2l5376:
 15983                           
 15984                           ;timer.c: 220: }
 15985                           ;timer.c: 221: }
 15986                           ;timer.c: 222: }
 15987                           ;timer.c: 224: if (currentMotorDir.s != STOPMOTOR) {
 15988  0022C0  0E02               	movlw	2
 15989  0022C2  185B               	xorwf	_currentMotorDir+2,w,c
 15990  0022C4  B4D8               	btfsc	status,2,c
 15991  0022C6  0012               	return	
 15992                           
 15993                           ;timer.c: 225: if (!motorGoingBackwards.s) {
 15994  0022C8  5042               	movf	_motorGoingBackwards+2,w,c	;volatile
 15995  0022CA  A4D8               	btfss	status,2,c
 15996  0022CC  D021               	goto	i2l749
 15997                           
 15998                           ;timer.c: 226: if (motorControlTimerS == longTolerance) {
 15999  0022CE  501E               	movf	tmr0_ISR@motorControlTimerS,w,c
 16000  0022D0  6E15               	movwf	??_tmr0_ISR& (0+255),c
 16001  0022D2  501F               	movf	tmr0_ISR@motorControlTimerS+1,w,c
 16002  0022D4  6E16               	movwf	(??_tmr0_ISR+1)& (0+255),c
 16003  0022D6  6A17               	clrf	(??_tmr0_ISR+2)& (0+255),c
 16004  0022D8  6A18               	clrf	(??_tmr0_ISR+3)& (0+255),c
 16005  0022DA  5055               	movf	_longTolerance,w,c
 16006  0022DC  1815               	xorwf	??_tmr0_ISR,w,c
 16007  0022DE  E14C               	bnz	i2l755
 16008  0022E0  5056               	movf	_longTolerance+1,w,c
 16009  0022E2  1816               	xorwf	??_tmr0_ISR+1,w,c
 16010  0022E4  E149               	bnz	i2l755
 16011  0022E6  5057               	movf	_longTolerance+2,w,c
 16012  0022E8  1817               	xorwf	??_tmr0_ISR+2,w,c
 16013  0022EA  E146               	bnz	i2l755
 16014  0022EC  5058               	movf	_longTolerance+3,w,c
 16015  0022EE  1818               	xorwf	??_tmr0_ISR+3,w,c
 16016  0022F0  A4D8               	btfss	status,2,c
 16017  0022F2  0012               	return	
 16018                           
 16019                           ;timer.c: 227: motorControl(SPACER, inverseDir(currentMotorDir.s));
 16020  0022F4  505B               	movf	_currentMotorDir+2,w,c
 16021  0022F6  ECE6  F01F         	call	_inverseDir
 16022  0022FA  6E02               	movwf	i2motorControl@dir,c
 16023  0022FC  0E02               	movlw	2
 16024  0022FE  EC14  F01A         	call	i2_motorControl
 16025                           
 16026                           ;timer.c: 228: motorGoingBackwards.s = 1;
 16027  002302  0E01               	movlw	1
 16028  002304  6E42               	movwf	_motorGoingBackwards+2,c	;volatile
 16029                           
 16030                           ;timer.c: 229: motorControlTimerS = 0;
 16031  002306  0E00               	movlw	0
 16032  002308  6E1F               	movwf	tmr0_ISR@motorControlTimerS+1,c
 16033  00230A  0E00               	movlw	0
 16034  00230C  6E1E               	movwf	tmr0_ISR@motorControlTimerS,c
 16035                           
 16036                           ;timer.c: 230: }
 16037                           ;timer.c: 231: } else {
 16038  00230E  0012               	return	
 16039  002310                     i2l749:
 16040                           
 16041                           ;timer.c: 232: if (motorControlTimerS == shortTolerance) {
 16042  002310  501E               	movf	tmr0_ISR@motorControlTimerS,w,c
 16043  002312  6E15               	movwf	??_tmr0_ISR& (0+255),c
 16044  002314  501F               	movf	tmr0_ISR@motorControlTimerS+1,w,c
 16045  002316  6E16               	movwf	(??_tmr0_ISR+1)& (0+255),c
 16046  002318  6A17               	clrf	(??_tmr0_ISR+2)& (0+255),c
 16047  00231A  6A18               	clrf	(??_tmr0_ISR+3)& (0+255),c
 16048  00231C  5051               	movf	_shortTolerance,w,c
 16049  00231E  1815               	xorwf	??_tmr0_ISR,w,c
 16050  002320  E12B               	bnz	i2l755
 16051  002322  5052               	movf	_shortTolerance+1,w,c
 16052  002324  1816               	xorwf	??_tmr0_ISR+1,w,c
 16053  002326  E128               	bnz	i2l755
 16054  002328  5053               	movf	_shortTolerance+2,w,c
 16055  00232A  1817               	xorwf	??_tmr0_ISR+2,w,c
 16056  00232C  E125               	bnz	i2l755
 16057  00232E  5054               	movf	_shortTolerance+3,w,c
 16058  002330  1818               	xorwf	??_tmr0_ISR+3,w,c
 16059  002332  A4D8               	btfss	status,2,c
 16060  002334  0012               	return	
 16061                           
 16062                           ;timer.c: 233: motorControl(SPACER, inverseDir(currentMotorDir.s));
 16063  002336  505B               	movf	_currentMotorDir+2,w,c
 16064  002338  ECE6  F01F         	call	_inverseDir
 16065  00233C  6E02               	movwf	i2motorControl@dir,c
 16066  00233E  0E02               	movlw	2
 16067  002340  EC14  F01A         	call	i2_motorControl
 16068                           
 16069                           ;timer.c: 234: motorGoingBackwards.s = 0;
 16070  002344  0E00               	movlw	0
 16071  002346  6E42               	movwf	_motorGoingBackwards+2,c	;volatile
 16072                           
 16073                           ;timer.c: 235: motorControlTimerS = 0;
 16074  002348  0E00               	movlw	0
 16075  00234A  6E1F               	movwf	tmr0_ISR@motorControlTimerS+1,c
 16076  00234C  0E00               	movlw	0
 16077  00234E  6E1E               	movwf	tmr0_ISR@motorControlTimerS,c
 16078                           
 16079                           ;timer.c: 236: }
 16080                           ;timer.c: 237: }
 16081                           ;timer.c: 238: }
 16082                           ;timer.c: 239: break;
 16083  002350  0012               	return	
 16084  002352                     
 16085                           ;timer.c: 241: resetMotorTimer();
 16086  002352  ECD2  F01F         	call	_resetMotorTimer	;wreg free
 16087                           
 16088                           ;timer.c: 243: }
 16089                           
 16090                           ;timer.c: 242: break;
 16091  002356  0012               	return	
 16092  002358                     i2l730:
 16093  002358  C04C  F015         	movff	_currentMode,??_tmr0_ISR
 16094  00235C  C04D  F016         	movff	_currentMode+1,??_tmr0_ISR+1
 16095                           
 16096                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16097                           ; Switch size 1, requested type "space"
 16098                           ; Number of cases is 1, Range of values is 0 to 0
 16099                           ; switch strategies available:
 16100                           ; Name         Instructions Cycles
 16101                           ; simple_byte            4     3 (average)
 16102                           ;	Chosen strategy is simple_byte
 16103  002360  5016               	movf	??_tmr0_ISR+1,w,c
 16104  002362  0A00               	xorlw	0	; case 0
 16105  002364  A4D8               	btfss	status,2,c
 16106  002366  D7F5               	goto	i2l754
 16107                           
 16108                           ; Switch size 1, requested type "space"
 16109                           ; Number of cases is 2, Range of values is 2 to 3
 16110                           ; switch strategies available:
 16111                           ; Name         Instructions Cycles
 16112                           ; simple_byte            7     4 (average)
 16113                           ;	Chosen strategy is simple_byte
 16114  002368  5015               	movf	??_tmr0_ISR,w,c
 16115  00236A  0A02               	xorlw	2	; case 2
 16116  00236C  B4D8               	btfsc	status,2,c
 16117  00236E  D6DF               	goto	i2l731
 16118  002370  0A01               	xorlw	1	; case 3
 16119  002372  B4D8               	btfsc	status,2,c
 16120  002374  D6DC               	goto	i2l731
 16121  002376  D7ED               	goto	i2l754
 16122  002378                     i2l755:
 16123  002378  0012               	return		;funcret
 16124  00237A                     __end_of_tmr0_ISR:
 16125                           	opt stack 0
 16126                           tosu	equ	0xFFF
 16127                           tosh	equ	0xFFE
 16128                           tosl	equ	0xFFD
 16129                           pclatu	equ	0xFFB
 16130                           pclath	equ	0xFFA
 16131                           tblptru	equ	0xFF8
 16132                           tblptrh	equ	0xFF7
 16133                           tblptrl	equ	0xFF6
 16134                           tablat	equ	0xFF5
 16135                           prodh	equ	0xFF4
 16136                           prodl	equ	0xFF3
 16137                           intcon	equ	0xFF2
 16138                           intcon3	equ	0xFF0
 16139                           indf0	equ	0xFEF
 16140                           postinc0	equ	0xFEE
 16141                           fsr0h	equ	0xFEA
 16142                           fsr0l	equ	0xFE9
 16143                           wreg	equ	0xFE8
 16144                           postdec1	equ	0xFE5
 16145                           plusw1	equ	0xFE3
 16146                           fsr1h	equ	0xFE2
 16147                           fsr1l	equ	0xFE1
 16148                           indf2	equ	0xFDF
 16149                           postinc2	equ	0xFDE
 16150                           postdec2	equ	0xFDD
 16151                           plusw2	equ	0xFDB
 16152                           fsr2h	equ	0xFDA
 16153                           fsr2l	equ	0xFD9
 16154                           status	equ	0xFD8
 16155                           
 16156 ;; *************** function i2_motorControl *****************
 16157 ;; Defined at:
 16158 ;;		line 7 in file "motors.c"
 16159 ;; Parameters:    Size  Location     Type
 16160 ;;  motor           1    wreg     enum E2968
 16161 ;;  dir             1    1[COMRAM] enum E2974
 16162 ;; Auto vars:     Size  Location     Type
 16163 ;;  motor           1    2[COMRAM] enum E2968
 16164 ;; Return value:  Size  Location     Type
 16165 ;;                  1    wreg      void 
 16166 ;; Registers used:
 16167 ;;		wreg, status,2, status,0
 16168 ;; Tracked objects:
 16169 ;;		On entry : 0/0
 16170 ;;		On exit  : 0/0
 16171 ;;		Unchanged: 0/0
 16172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16173 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16174 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16176 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16177 ;;Total ram usage:        2 bytes
 16178 ;; Hardware stack levels used:    1
 16179 ;; This function calls:
 16180 ;;		Nothing
 16181 ;; This function is called by:
 16182 ;;		_tmr0_ISR
 16183 ;; This function uses a non-reentrant model
 16184 ;;
 16185                           
 16186                           	psect	text50
 16187  003428                     __ptext50:
 16188                           	opt stack 0
 16189  003428                     i2_motorControl:
 16190                           	opt stack 22
 16191                           
 16192                           ;incstack = 0
 16193                           ;i2motorControl@motor stored from wreg
 16194  003428  6E03               	movwf	i2motorControl@motor,c
 16195                           
 16196                           ;motors.c: 8: switch(motor) {
 16197  00342A  D050               	goto	i2l788
 16198  00342C                     
 16199                           ;motors.c: 10: if (dir == FORWARD) {
 16200  00342C  5002               	movf	i2motorControl@dir,w,c
 16201  00342E  A4D8               	btfss	status,2,c
 16202  003430  D003               	goto	i2l790
 16203                           
 16204                           ;motors.c: 11: LATBbits.LATB3 = 1;
 16205  003432  868A               	bsf	3978,3,c	;volatile
 16206                           
 16207                           ;motors.c: 12: LATCbits.LATC0 = 0;
 16208  003434  908B               	bcf	3979,0,c	;volatile
 16209                           
 16210                           ;motors.c: 13: } else if (dir == REVERSE) {
 16211  003436  D00B               	goto	i2l794
 16212  003438                     i2l790:
 16213  003438  0402               	decf	i2motorControl@dir,w,c
 16214  00343A  A4D8               	btfss	status,2,c
 16215  00343C  D002               	goto	i2l792
 16216                           
 16217                           ;motors.c: 14: LATBbits.LATB3 = 0;
 16218  00343E  968A               	bcf	3978,3,c	;volatile
 16219  003440  D005               	goto	L21
 16220  003442                     i2l792:
 16221  003442  0E02               	movlw	2
 16222  003444  1802               	xorwf	i2motorControl@dir,w,c
 16223  003446  A4D8               	btfss	status,2,c
 16224  003448  D002               	goto	i2l794
 16225                           
 16226                           ;motors.c: 17: LATBbits.LATB3 = 1;
 16227  00344A  868A               	bsf	3978,3,c	;volatile
 16228  00344C                     L21:
 16229                           
 16230                           ;motors.c: 18: LATCbits.LATC0 = 1;
 16231  00344C  808B               	bsf	3979,0,c	;volatile
 16232  00344E                     i2l794:
 16233                           
 16234                           ;motors.c: 19: }
 16235                           ;motors.c: 20: currentMotorDir.s = dir;
 16236  00344E  C002  F05B         	movff	i2motorControl@dir,_currentMotorDir+2
 16237                           
 16238                           ;motors.c: 21: break;
 16239  003452  0012               	return	
 16240  003454                     
 16241                           ;motors.c: 23: if (dir == FORWARD) {
 16242  003454  5002               	movf	i2motorControl@dir,w,c
 16243  003456  A4D8               	btfss	status,2,c
 16244  003458  D003               	goto	i2l797
 16245                           
 16246                           ;motors.c: 24: LATCbits.LATC1 = 1;
 16247  00345A  828B               	bsf	3979,1,c	;volatile
 16248                           
 16249                           ;motors.c: 25: LATCbits.LATC2 = 0;
 16250  00345C  948B               	bcf	3979,2,c	;volatile
 16251                           
 16252                           ;motors.c: 26: } else if (dir == REVERSE) {
 16253  00345E  D00B               	goto	i2l801
 16254  003460                     i2l797:
 16255  003460  0402               	decf	i2motorControl@dir,w,c
 16256  003462  A4D8               	btfss	status,2,c
 16257  003464  D002               	goto	i2l799
 16258                           
 16259                           ;motors.c: 27: LATCbits.LATC1 = 0;
 16260  003466  928B               	bcf	3979,1,c	;volatile
 16261  003468  D005               	goto	L22
 16262  00346A                     i2l799:
 16263  00346A  0E02               	movlw	2
 16264  00346C  1802               	xorwf	i2motorControl@dir,w,c
 16265  00346E  A4D8               	btfss	status,2,c
 16266  003470  D002               	goto	i2l801
 16267                           
 16268                           ;motors.c: 30: LATCbits.LATC1 = 1;
 16269  003472  828B               	bsf	3979,1,c	;volatile
 16270  003474                     L22:
 16271                           
 16272                           ;motors.c: 31: LATCbits.LATC2 = 1;
 16273  003474  848B               	bsf	3979,2,c	;volatile
 16274  003476                     i2l801:
 16275                           
 16276                           ;motors.c: 32: }
 16277                           ;motors.c: 33: currentMotorDir.n = dir;
 16278  003476  C002  F05A         	movff	i2motorControl@dir,_currentMotorDir+1
 16279                           
 16280                           ;motors.c: 34: break;
 16281  00347A  0012               	return	
 16282  00347C                     
 16283                           ;motors.c: 36: if (dir == FORWARD) {
 16284  00347C  5002               	movf	i2motorControl@dir,w,c
 16285  00347E  A4D8               	btfss	status,2,c
 16286  003480  D003               	goto	i2l803
 16287                           
 16288                           ;motors.c: 37: LATCbits.LATC5 = 1;
 16289  003482  8A8B               	bsf	3979,5,c	;volatile
 16290                           
 16291                           ;motors.c: 38: LATCbits.LATC6 = 0;
 16292  003484  9C8B               	bcf	3979,6,c	;volatile
 16293                           
 16294                           ;motors.c: 39: } else if (dir == REVERSE) {
 16295  003486  D00B               	goto	i2l807
 16296  003488                     i2l803:
 16297  003488  0402               	decf	i2motorControl@dir,w,c
 16298  00348A  A4D8               	btfss	status,2,c
 16299  00348C  D002               	goto	i2l805
 16300                           
 16301                           ;motors.c: 40: LATCbits.LATC5 = 0;
 16302  00348E  9A8B               	bcf	3979,5,c	;volatile
 16303  003490  D005               	goto	L23
 16304  003492                     i2l805:
 16305  003492  0E02               	movlw	2
 16306  003494  1802               	xorwf	i2motorControl@dir,w,c
 16307  003496  A4D8               	btfss	status,2,c
 16308  003498  D002               	goto	i2l807
 16309                           
 16310                           ;motors.c: 43: LATCbits.LATC5 = 1;
 16311  00349A  8A8B               	bsf	3979,5,c	;volatile
 16312  00349C                     L23:
 16313                           
 16314                           ;motors.c: 44: LATCbits.LATC6 = 1;
 16315  00349C  8C8B               	bsf	3979,6,c	;volatile
 16316  00349E                     i2l807:
 16317                           
 16318                           ;motors.c: 45: }
 16319                           ;motors.c: 46: currentMotorDir.w = dir;
 16320  00349E  C002  F05C         	movff	i2motorControl@dir,_currentMotorDir+3
 16321                           
 16322                           ;motors.c: 47: break;
 16323  0034A2  0012               	return	
 16324  0034A4                     
 16325                           ;motors.c: 49: if (dir == FORWARD) {
 16326  0034A4  5002               	movf	i2motorControl@dir,w,c
 16327  0034A6  A4D8               	btfss	status,2,c
 16328  0034A8  D003               	goto	i2l809
 16329                           
 16330                           ;motors.c: 50: LATCbits.LATC7 = 1;
 16331  0034AA  8E8B               	bsf	3979,7,c	;volatile
 16332                           
 16333                           ;motors.c: 51: LATEbits.LATE0 = 0;
 16334  0034AC  908D               	bcf	3981,0,c	;volatile
 16335                           
 16336                           ;motors.c: 52: } else if (dir == REVERSE) {
 16337  0034AE  D00B               	goto	i2l813
 16338  0034B0                     i2l809:
 16339  0034B0  0402               	decf	i2motorControl@dir,w,c
 16340  0034B2  A4D8               	btfss	status,2,c
 16341  0034B4  D002               	goto	i2l811
 16342                           
 16343                           ;motors.c: 53: LATCbits.LATC7 = 0;
 16344  0034B6  9E8B               	bcf	3979,7,c	;volatile
 16345  0034B8  D005               	goto	L24
 16346  0034BA                     i2l811:
 16347  0034BA  0E02               	movlw	2
 16348  0034BC  1802               	xorwf	i2motorControl@dir,w,c
 16349  0034BE  A4D8               	btfss	status,2,c
 16350  0034C0  D002               	goto	i2l813
 16351                           
 16352                           ;motors.c: 56: LATCbits.LATC7 = 1;
 16353  0034C2  8E8B               	bsf	3979,7,c	;volatile
 16354  0034C4                     L24:
 16355                           
 16356                           ;motors.c: 57: LATEbits.LATE0 = 1;
 16357  0034C4  808D               	bsf	3981,0,c	;volatile
 16358  0034C6                     i2l813:
 16359                           
 16360                           ;motors.c: 58: }
 16361                           ;motors.c: 59: currentMotorDir.b = dir;
 16362  0034C6  C002  F059         	movff	i2motorControl@dir,_currentMotorDir
 16363                           
 16364                           ;motors.c: 63: }
 16365                           
 16366                           ;motors.c: 62: break;
 16367                           
 16368                           ;motors.c: 61: default:
 16369                           
 16370                           ;motors.c: 60: break;
 16371  0034CA  0012               	return	
 16372  0034CC                     i2l788:
 16373  0034CC  5003               	movf	i2motorControl@motor,w,c
 16374                           
 16375                           ; Switch size 1, requested type "space"
 16376                           ; Number of cases is 4, Range of values is 0 to 3
 16377                           ; switch strategies available:
 16378                           ; Name         Instructions Cycles
 16379                           ; simple_byte           13     7 (average)
 16380                           ;	Chosen strategy is simple_byte
 16381  0034CE  0A00               	xorlw	0	; case 0
 16382  0034D0  B4D8               	btfsc	status,2,c
 16383  0034D2  D7E8               	goto	i2l808
 16384  0034D4  0A01               	xorlw	1	; case 1
 16385  0034D6  B4D8               	btfsc	status,2,c
 16386  0034D8  D7BD               	goto	i2l796
 16387  0034DA  0A03               	xorlw	3	; case 2
 16388  0034DC  B4D8               	btfsc	status,2,c
 16389  0034DE  D7A6               	goto	i2l789
 16390  0034E0  0A01               	xorlw	1	; case 3
 16391  0034E2  A4D8               	btfss	status,2,c
 16392  0034E4  0012               	return	
 16393  0034E6  D7CA               	goto	i2l802
 16394  0034E8                     __end_ofi2_motorControl:
 16395                           	opt stack 0
 16396                           tosu	equ	0xFFF
 16397                           tosh	equ	0xFFE
 16398                           tosl	equ	0xFFD
 16399                           pclatu	equ	0xFFB
 16400                           pclath	equ	0xFFA
 16401                           tblptru	equ	0xFF8
 16402                           tblptrh	equ	0xFF7
 16403                           tblptrl	equ	0xFF6
 16404                           tablat	equ	0xFF5
 16405                           prodh	equ	0xFF4
 16406                           prodl	equ	0xFF3
 16407                           intcon	equ	0xFF2
 16408                           intcon3	equ	0xFF0
 16409                           indf0	equ	0xFEF
 16410                           postinc0	equ	0xFEE
 16411                           fsr0h	equ	0xFEA
 16412                           fsr0l	equ	0xFE9
 16413                           wreg	equ	0xFE8
 16414                           postdec1	equ	0xFE5
 16415                           plusw1	equ	0xFE3
 16416                           fsr1h	equ	0xFE2
 16417                           fsr1l	equ	0xFE1
 16418                           indf2	equ	0xFDF
 16419                           postinc2	equ	0xFDE
 16420                           postdec2	equ	0xFDD
 16421                           plusw2	equ	0xFDB
 16422                           fsr2h	equ	0xFDA
 16423                           fsr2l	equ	0xFD9
 16424                           status	equ	0xFD8
 16425                           
 16426 ;; *************** function i2___ftadd *****************
 16427 ;; Defined at:
 16428 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 16429 ;; Parameters:    Size  Location     Type
 16430 ;;  f1              3    8[COMRAM] float 
 16431 ;;  f2              3   11[COMRAM] float 
 16432 ;; Auto vars:     Size  Location     Type
 16433 ;;  __ftadd         1   19[COMRAM] unsigned char 
 16434 ;;  __ftadd         1   18[COMRAM] unsigned char 
 16435 ;;  __ftadd         1   17[COMRAM] unsigned char 
 16436 ;; Return value:  Size  Location     Type
 16437 ;;                  3    8[COMRAM] float 
 16438 ;; Registers used:
 16439 ;;		wreg, status,2, status,0, cstack
 16440 ;; Tracked objects:
 16441 ;;		On entry : 0/0
 16442 ;;		On exit  : 0/0
 16443 ;;		Unchanged: 0/0
 16444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16445 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16446 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16447 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16448 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16449 ;;Total ram usage:       12 bytes
 16450 ;; Hardware stack levels used:    1
 16451 ;; Hardware stack levels required when called:    1
 16452 ;; This function calls:
 16453 ;;		i2___ftpack
 16454 ;; This function is called by:
 16455 ;;		_tmr0_ISR
 16456 ;; This function uses a non-reentrant model
 16457 ;;
 16458                           
 16459                           	psect	text51
 16460  002EEA                     __ptext51:
 16461                           	opt stack 0
 16462  002EEA                     i2___ftadd:
 16463                           	opt stack 21
 16464                           
 16465                           ;incstack = 0
 16466  002EEA  C00B  F00F         	movff	i2___ftadd@f1+2,??i2___ftadd
 16467  002EEE  6A10               	clrf	(??i2___ftadd+1)& (0+255),c
 16468  002EF0  6A11               	clrf	(??i2___ftadd+2)& (0+255),c
 16469  002EF2  340A               	rlcf	i2___ftadd@f1+1,w,c
 16470  002EF4  360F               	rlcf	??i2___ftadd& (0+255),f,c
 16471  002EF6  E301               	bnc	u624_41
 16472  002EF8  8010               	bsf	(??i2___ftadd+1)& (0+255),0,c
 16473  002EFA                     u624_41:
 16474  002EFA  500F               	movf	??i2___ftadd,w,c
 16475  002EFC  6E14               	movwf	i2___ftadd@exp1,c
 16476  002EFE  C00E  F00F         	movff	i2___ftadd@f2+2,??i2___ftadd
 16477  002F02  6A10               	clrf	(??i2___ftadd+1)& (0+255),c
 16478  002F04  6A11               	clrf	(??i2___ftadd+2)& (0+255),c
 16479  002F06  340D               	rlcf	i2___ftadd@f2+1,w,c
 16480  002F08  360F               	rlcf	??i2___ftadd& (0+255),f,c
 16481  002F0A  E301               	bnc	u625_41
 16482  002F0C  8010               	bsf	(??i2___ftadd+1)& (0+255),0,c
 16483  002F0E                     u625_41:
 16484  002F0E  500F               	movf	??i2___ftadd,w,c
 16485  002F10  6E13               	movwf	i2___ftadd@exp2,c
 16486  002F12  5014               	movf	i2___ftadd@exp1,w,c
 16487  002F14  B4D8               	btfsc	status,2,c
 16488  002F16  D00B               	goto	i2u628_40
 16489  002F18  5013               	movf	i2___ftadd@exp2,w,c
 16490  002F1A  5C14               	subwf	i2___ftadd@exp1,w,c
 16491  002F1C  B0D8               	btfsc	status,0,c
 16492  002F1E  D00E               	goto	i2l1209
 16493  002F20  5014               	movf	i2___ftadd@exp1,w,c
 16494  002F22  0800               	sublw	0
 16495  002F24  2413               	addwf	i2___ftadd@exp2,w,c
 16496  002F26  6E0F               	movwf	??i2___ftadd& (0+255),c
 16497  002F28  0E18               	movlw	24
 16498  002F2A  640F               	cpfsgt	??i2___ftadd,c
 16499  002F2C  D007               	goto	i2l1209
 16500  002F2E                     i2u628_40:
 16501  002F2E  C00C  F009         	movff	i2___ftadd@f2,?i2___ftadd
 16502  002F32  C00D  F00A         	movff	i2___ftadd@f2+1,?i2___ftadd+1
 16503  002F36  C00E  F00B         	movff	i2___ftadd@f2+2,?i2___ftadd+2
 16504  002F3A  0012               	return	
 16505  002F3C                     i2l1209:
 16506  002F3C  5013               	movf	i2___ftadd@exp2,w,c
 16507  002F3E  B4D8               	btfsc	status,2,c
 16508  002F40  D00B               	goto	i2u631_40
 16509  002F42  5014               	movf	i2___ftadd@exp1,w,c
 16510  002F44  5C13               	subwf	i2___ftadd@exp2,w,c
 16511  002F46  B0D8               	btfsc	status,0,c
 16512  002F48  D00E               	goto	i2l1213
 16513  002F4A  5013               	movf	i2___ftadd@exp2,w,c
 16514  002F4C  0800               	sublw	0
 16515  002F4E  2414               	addwf	i2___ftadd@exp1,w,c
 16516  002F50  6E0F               	movwf	??i2___ftadd& (0+255),c
 16517  002F52  0E18               	movlw	24
 16518  002F54  640F               	cpfsgt	??i2___ftadd,c
 16519  002F56  D007               	goto	i2l1213
 16520  002F58                     i2u631_40:
 16521  002F58  C009  F009         	movff	i2___ftadd@f1,?i2___ftadd
 16522  002F5C  C00A  F00A         	movff	i2___ftadd@f1+1,?i2___ftadd+1
 16523  002F60  C00B  F00B         	movff	i2___ftadd@f1+2,?i2___ftadd+2
 16524  002F64  0012               	return	
 16525  002F66                     i2l1213:
 16526  002F66  0E06               	movlw	6
 16527  002F68  6E12               	movwf	i2___ftadd@sign,c
 16528  002F6A  BE0B               	btfsc	i2___ftadd@f1+2,7,c
 16529  002F6C  8E12               	bsf	i2___ftadd@sign,7,c
 16530  002F6E  BE0E               	btfsc	i2___ftadd@f2+2,7,c
 16531  002F70  8C12               	bsf	i2___ftadd@sign,6,c
 16532  002F72  8E0A               	bsf	i2___ftadd@f1+1,7,c
 16533  002F74  0EFF               	movlw	255
 16534  002F76  1609               	andwf	i2___ftadd@f1,f,c
 16535  002F78  0EFF               	movlw	255
 16536  002F7A  160A               	andwf	i2___ftadd@f1+1,f,c
 16537  002F7C  0E00               	movlw	0
 16538  002F7E  160B               	andwf	i2___ftadd@f1+2,f,c
 16539  002F80  8E0D               	bsf	i2___ftadd@f2+1,7,c
 16540  002F82  0EFF               	movlw	255
 16541  002F84  160C               	andwf	i2___ftadd@f2,f,c
 16542  002F86  0EFF               	movlw	255
 16543  002F88  160D               	andwf	i2___ftadd@f2+1,f,c
 16544  002F8A  0E00               	movlw	0
 16545  002F8C  160E               	andwf	i2___ftadd@f2+2,f,c
 16546  002F8E  5013               	movf	i2___ftadd@exp2,w,c
 16547  002F90  5C14               	subwf	i2___ftadd@exp1,w,c
 16548  002F92  B0D8               	btfsc	status,0,c
 16549  002F94  D01B               	goto	i2l1218
 16550  002F96                     i2u634_40:
 16551  002F96  90D8               	bcf	status,0,c
 16552  002F98  360C               	rlcf	i2___ftadd@f2,f,c
 16553  002F9A  360D               	rlcf	i2___ftadd@f2+1,f,c
 16554  002F9C  360E               	rlcf	i2___ftadd@f2+2,f,c
 16555  002F9E  0613               	decf	i2___ftadd@exp2,f,c
 16556  002FA0  5014               	movf	i2___ftadd@exp1,w,c
 16557  002FA2  1813               	xorwf	i2___ftadd@exp2,w,c
 16558  002FA4  B4D8               	btfsc	status,2,c
 16559  002FA6  D00D               	goto	i2l1223
 16560  002FA8  0612               	decf	i2___ftadd@sign,f,c
 16561  002FAA  C012  F00F         	movff	i2___ftadd@sign,??i2___ftadd
 16562  002FAE  0E07               	movlw	7
 16563  002FB0  160F               	andwf	??i2___ftadd,f,c
 16564  002FB2  B4D8               	btfsc	status,2,c
 16565  002FB4  D006               	goto	i2l1223
 16566  002FB6  D7EF               	goto	i2u634_40
 16567  002FB8  90D8               	bcf	status,0,c
 16568  002FBA  320B               	rrcf	i2___ftadd@f1+2,f,c
 16569  002FBC  320A               	rrcf	i2___ftadd@f1+1,f,c
 16570  002FBE  3209               	rrcf	i2___ftadd@f1,f,c
 16571  002FC0  2A14               	incf	i2___ftadd@exp1,f,c
 16572  002FC2                     i2l1223:
 16573  002FC2  5013               	movf	i2___ftadd@exp2,w,c
 16574  002FC4  1814               	xorwf	i2___ftadd@exp1,w,c
 16575  002FC6  B4D8               	btfsc	status,2,c
 16576  002FC8  D01F               	goto	i2u641_40
 16577  002FCA  D7F6               	goto	i2l1224
 16578  002FCC                     i2l1218:
 16579  002FCC  5014               	movf	i2___ftadd@exp1,w,c
 16580  002FCE  5C13               	subwf	i2___ftadd@exp2,w,c
 16581  002FD0  B0D8               	btfsc	status,0,c
 16582  002FD2  D01A               	goto	i2u641_40
 16583  002FD4                     i2u638_40:
 16584  002FD4  90D8               	bcf	status,0,c
 16585  002FD6  3609               	rlcf	i2___ftadd@f1,f,c
 16586  002FD8  360A               	rlcf	i2___ftadd@f1+1,f,c
 16587  002FDA  360B               	rlcf	i2___ftadd@f1+2,f,c
 16588  002FDC  0614               	decf	i2___ftadd@exp1,f,c
 16589  002FDE  5014               	movf	i2___ftadd@exp1,w,c
 16590  002FE0  1813               	xorwf	i2___ftadd@exp2,w,c
 16591  002FE2  B4D8               	btfsc	status,2,c
 16592  002FE4  D00D               	goto	i2l1232
 16593  002FE6  0612               	decf	i2___ftadd@sign,f,c
 16594  002FE8  C012  F00F         	movff	i2___ftadd@sign,??i2___ftadd
 16595  002FEC  0E07               	movlw	7
 16596  002FEE  160F               	andwf	??i2___ftadd,f,c
 16597  002FF0  B4D8               	btfsc	status,2,c
 16598  002FF2  D006               	goto	i2l1232
 16599  002FF4  D7EF               	goto	i2u638_40
 16600  002FF6  90D8               	bcf	status,0,c
 16601  002FF8  320E               	rrcf	i2___ftadd@f2+2,f,c
 16602  002FFA  320D               	rrcf	i2___ftadd@f2+1,f,c
 16603  002FFC  320C               	rrcf	i2___ftadd@f2,f,c
 16604  002FFE  2A13               	incf	i2___ftadd@exp2,f,c
 16605  003000                     i2l1232:
 16606  003000  5013               	movf	i2___ftadd@exp2,w,c
 16607  003002  1814               	xorwf	i2___ftadd@exp1,w,c
 16608  003004  A4D8               	btfss	status,2,c
 16609  003006  D7F7               	goto	i2l1233
 16610  003008                     i2u641_40:
 16611  003008  AE12               	btfss	i2___ftadd@sign,7,c
 16612  00300A  D00C               	goto	i2l1235
 16613  00300C  0EFF               	movlw	255
 16614  00300E  1A09               	xorwf	i2___ftadd@f1,f,c
 16615  003010  0EFF               	movlw	255
 16616  003012  1A0A               	xorwf	i2___ftadd@f1+1,f,c
 16617  003014  0EFF               	movlw	255
 16618  003016  1A0B               	xorwf	i2___ftadd@f1+2,f,c
 16619  003018  0E01               	movlw	1
 16620  00301A  2609               	addwf	i2___ftadd@f1,f,c
 16621  00301C  0E00               	movlw	0
 16622  00301E  220A               	addwfc	i2___ftadd@f1+1,f,c
 16623  003020  0E00               	movlw	0
 16624  003022  220B               	addwfc	i2___ftadd@f1+2,f,c
 16625  003024                     i2l1235:
 16626  003024  AC12               	btfss	i2___ftadd@sign,6,c
 16627  003026  D00C               	goto	i2l1236
 16628  003028  0EFF               	movlw	255
 16629  00302A  1A0C               	xorwf	i2___ftadd@f2,f,c
 16630  00302C  0EFF               	movlw	255
 16631  00302E  1A0D               	xorwf	i2___ftadd@f2+1,f,c
 16632  003030  0EFF               	movlw	255
 16633  003032  1A0E               	xorwf	i2___ftadd@f2+2,f,c
 16634  003034  0E01               	movlw	1
 16635  003036  260C               	addwf	i2___ftadd@f2,f,c
 16636  003038  0E00               	movlw	0
 16637  00303A  220D               	addwfc	i2___ftadd@f2+1,f,c
 16638  00303C  0E00               	movlw	0
 16639  00303E  220E               	addwfc	i2___ftadd@f2+2,f,c
 16640  003040                     i2l1236:
 16641  003040  0E00               	movlw	0
 16642  003042  6E12               	movwf	i2___ftadd@sign,c
 16643  003044  5009               	movf	i2___ftadd@f1,w,c
 16644  003046  260C               	addwf	i2___ftadd@f2,f,c
 16645  003048  500A               	movf	i2___ftadd@f1+1,w,c
 16646  00304A  220D               	addwfc	i2___ftadd@f2+1,f,c
 16647  00304C  500B               	movf	i2___ftadd@f1+2,w,c
 16648  00304E  220E               	addwfc	i2___ftadd@f2+2,f,c
 16649  003050  AE0E               	btfss	i2___ftadd@f2+2,7,c
 16650  003052  D00E               	goto	i2l1237
 16651  003054  0EFF               	movlw	255
 16652  003056  1A0C               	xorwf	i2___ftadd@f2,f,c
 16653  003058  0EFF               	movlw	255
 16654  00305A  1A0D               	xorwf	i2___ftadd@f2+1,f,c
 16655  00305C  0EFF               	movlw	255
 16656  00305E  1A0E               	xorwf	i2___ftadd@f2+2,f,c
 16657  003060  0E01               	movlw	1
 16658  003062  260C               	addwf	i2___ftadd@f2,f,c
 16659  003064  0E00               	movlw	0
 16660  003066  220D               	addwfc	i2___ftadd@f2+1,f,c
 16661  003068  0E00               	movlw	0
 16662  00306A  220E               	addwfc	i2___ftadd@f2+2,f,c
 16663  00306C  0E01               	movlw	1
 16664  00306E  6E12               	movwf	i2___ftadd@sign,c
 16665  003070                     i2l1237:
 16666  003070  C00C  F001         	movff	i2___ftadd@f2,i2___ftpack@arg
 16667  003074  C00D  F002         	movff	i2___ftadd@f2+1,i2___ftpack@arg+1
 16668  003078  C00E  F003         	movff	i2___ftadd@f2+2,i2___ftpack@arg+2
 16669  00307C  C014  F004         	movff	i2___ftadd@exp1,i2___ftpack@exp
 16670  003080  C012  F005         	movff	i2___ftadd@sign,i2___ftpack@sign
 16671  003084  EC82  F01B         	call	i2___ftpack	;wreg free
 16672  003088  C001  F009         	movff	?i2___ftpack,?i2___ftadd
 16673  00308C  C002  F00A         	movff	?i2___ftpack+1,?i2___ftadd+1
 16674  003090  C003  F00B         	movff	?i2___ftpack+2,?i2___ftadd+2
 16675  003094  0012               	return	
 16676  003096                     __end_ofi2___ftadd:
 16677                           	opt stack 0
 16678                           tosu	equ	0xFFF
 16679                           tosh	equ	0xFFE
 16680                           tosl	equ	0xFFD
 16681                           pclatu	equ	0xFFB
 16682                           pclath	equ	0xFFA
 16683                           tblptru	equ	0xFF8
 16684                           tblptrh	equ	0xFF7
 16685                           tblptrl	equ	0xFF6
 16686                           tablat	equ	0xFF5
 16687                           prodh	equ	0xFF4
 16688                           prodl	equ	0xFF3
 16689                           intcon	equ	0xFF2
 16690                           intcon3	equ	0xFF0
 16691                           indf0	equ	0xFEF
 16692                           postinc0	equ	0xFEE
 16693                           fsr0h	equ	0xFEA
 16694                           fsr0l	equ	0xFE9
 16695                           wreg	equ	0xFE8
 16696                           postdec1	equ	0xFE5
 16697                           plusw1	equ	0xFE3
 16698                           fsr1h	equ	0xFE2
 16699                           fsr1l	equ	0xFE1
 16700                           indf2	equ	0xFDF
 16701                           postinc2	equ	0xFDE
 16702                           postdec2	equ	0xFDD
 16703                           plusw2	equ	0xFDB
 16704                           fsr2h	equ	0xFDA
 16705                           fsr2l	equ	0xFD9
 16706                           status	equ	0xFD8
 16707                           
 16708 ;; *************** function i2___ftpack *****************
 16709 ;; Defined at:
 16710 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 16711 ;; Parameters:    Size  Location     Type
 16712 ;;  arg             3    0[COMRAM] unsigned um
 16713 ;;  exp             1    3[COMRAM] unsigned char 
 16714 ;;  sign            1    4[COMRAM] unsigned char 
 16715 ;; Auto vars:     Size  Location     Type
 16716 ;;		None
 16717 ;; Return value:  Size  Location     Type
 16718 ;;                  3    0[COMRAM] float 
 16719 ;; Registers used:
 16720 ;;		wreg, status,2, status,0
 16721 ;; Tracked objects:
 16722 ;;		On entry : 0/0
 16723 ;;		On exit  : 0/0
 16724 ;;		Unchanged: 0/0
 16725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16726 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16728 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16729 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16730 ;;Total ram usage:        8 bytes
 16731 ;; Hardware stack levels used:    1
 16732 ;; This function calls:
 16733 ;;		Nothing
 16734 ;; This function is called by:
 16735 ;;		i2___ftadd
 16736 ;; This function uses a non-reentrant model
 16737 ;;
 16738                           
 16739                           	psect	text52
 16740  003704                     __ptext52:
 16741                           	opt stack 0
 16742  003704                     i2___ftpack:
 16743                           	opt stack 21
 16744                           
 16745                           ;incstack = 0
 16746  003704  5004               	movf	i2___ftpack@exp,w,c
 16747  003706  B4D8               	btfsc	status,2,c
 16748  003708  D005               	goto	i2u510_40
 16749  00370A  5001               	movf	i2___ftpack@arg,w,c
 16750  00370C  1002               	iorwf	i2___ftpack@arg+1,w,c
 16751  00370E  1003               	iorwf	i2___ftpack@arg+2,w,c
 16752  003710  A4D8               	btfss	status,2,c
 16753  003712  D00C               	goto	i2l1178
 16754  003714                     i2u510_40:
 16755  003714  0E00               	movlw	0
 16756  003716  6E01               	movwf	?i2___ftpack,c
 16757  003718  0E00               	movlw	0
 16758  00371A  6E02               	movwf	?i2___ftpack+1,c
 16759  00371C  0E00               	movlw	0
 16760  00371E  6E03               	movwf	?i2___ftpack+2,c
 16761  003720  0012               	return	
 16762  003722  2A04               	incf	i2___ftpack@exp,f,c
 16763  003724  90D8               	bcf	status,0,c
 16764  003726  3203               	rrcf	i2___ftpack@arg+2,f,c
 16765  003728  3202               	rrcf	i2___ftpack@arg+1,f,c
 16766  00372A  3201               	rrcf	i2___ftpack@arg,f,c
 16767  00372C                     i2l1178:
 16768  00372C  0E00               	movlw	0
 16769  00372E  1401               	andwf	i2___ftpack@arg,w,c
 16770  003730  6E06               	movwf	??i2___ftpack& (0+255),c
 16771  003732  0E00               	movlw	0
 16772  003734  1402               	andwf	i2___ftpack@arg+1,w,c
 16773  003736  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 16774  003738  0EFE               	movlw	254
 16775  00373A  1403               	andwf	i2___ftpack@arg+2,w,c
 16776  00373C  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 16777  00373E  5006               	movf	??i2___ftpack,w,c
 16778  003740  1007               	iorwf	??i2___ftpack+1,w,c
 16779  003742  1008               	iorwf	??i2___ftpack+2,w,c
 16780  003744  B4D8               	btfsc	status,2,c
 16781  003746  D00C               	goto	i2l1181
 16782  003748  D7EC               	goto	i2l1179
 16783  00374A  2A04               	incf	i2___ftpack@exp,f,c
 16784  00374C  0E01               	movlw	1
 16785  00374E  2601               	addwf	i2___ftpack@arg,f,c
 16786  003750  0E00               	movlw	0
 16787  003752  2202               	addwfc	i2___ftpack@arg+1,f,c
 16788  003754  0E00               	movlw	0
 16789  003756  2203               	addwfc	i2___ftpack@arg+2,f,c
 16790  003758  90D8               	bcf	status,0,c
 16791  00375A  3203               	rrcf	i2___ftpack@arg+2,f,c
 16792  00375C  3202               	rrcf	i2___ftpack@arg+1,f,c
 16793  00375E  3201               	rrcf	i2___ftpack@arg,f,c
 16794  003760                     i2l1181:
 16795  003760  0E00               	movlw	0
 16796  003762  1401               	andwf	i2___ftpack@arg,w,c
 16797  003764  6E06               	movwf	??i2___ftpack& (0+255),c
 16798  003766  0E00               	movlw	0
 16799  003768  1402               	andwf	i2___ftpack@arg+1,w,c
 16800  00376A  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 16801  00376C  0EFF               	movlw	255
 16802  00376E  1403               	andwf	i2___ftpack@arg+2,w,c
 16803  003770  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 16804  003772  5006               	movf	??i2___ftpack,w,c
 16805  003774  1007               	iorwf	??i2___ftpack+1,w,c
 16806  003776  1008               	iorwf	??i2___ftpack+2,w,c
 16807  003778  B4D8               	btfsc	status,2,c
 16808  00377A  D006               	goto	i2l1184
 16809  00377C  D7E6               	goto	i2l1182
 16810  00377E  0604               	decf	i2___ftpack@exp,f,c
 16811  003780  90D8               	bcf	status,0,c
 16812  003782  3601               	rlcf	i2___ftpack@arg,f,c
 16813  003784  3602               	rlcf	i2___ftpack@arg+1,f,c
 16814  003786  3603               	rlcf	i2___ftpack@arg+2,f,c
 16815  003788                     i2l1184:
 16816  003788  BE02               	btfsc	i2___ftpack@arg+1,7,c
 16817  00378A  D003               	goto	i2u514_40
 16818  00378C  0E02               	movlw	2
 16819  00378E  6004               	cpfslt	i2___ftpack@exp,c
 16820  003790  D7F6               	goto	i2l1185
 16821  003792                     i2u514_40:
 16822  003792  A004               	btfss	i2___ftpack@exp,0,c
 16823  003794  9E02               	bcf	i2___ftpack@arg+1,7,c
 16824  003796  90D8               	bcf	status,0,c
 16825  003798  3204               	rrcf	i2___ftpack@exp,f,c
 16826  00379A  5004               	movf	i2___ftpack@exp,w,c
 16827  00379C  1203               	iorwf	i2___ftpack@arg+2,f,c
 16828  00379E  5005               	movf	i2___ftpack@sign,w,c
 16829  0037A0  A4D8               	btfss	status,2,c
 16830  0037A2  8E03               	bsf	i2___ftpack@arg+2,7,c
 16831  0037A4  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 16832  0037A8  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 16833  0037AC  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 16834  0037B0  0012               	return	
 16835  0037B2                     __end_ofi2___ftpack:
 16836                           	opt stack 0
 16837                           tosu	equ	0xFFF
 16838                           tosh	equ	0xFFE
 16839                           tosl	equ	0xFFD
 16840                           pclatu	equ	0xFFB
 16841                           pclath	equ	0xFFA
 16842                           tblptru	equ	0xFF8
 16843                           tblptrh	equ	0xFF7
 16844                           tblptrl	equ	0xFF6
 16845                           tablat	equ	0xFF5
 16846                           prodh	equ	0xFF4
 16847                           prodl	equ	0xFF3
 16848                           intcon	equ	0xFF2
 16849                           intcon3	equ	0xFF0
 16850                           indf0	equ	0xFEF
 16851                           postinc0	equ	0xFEE
 16852                           fsr0h	equ	0xFEA
 16853                           fsr0l	equ	0xFE9
 16854                           wreg	equ	0xFE8
 16855                           postdec1	equ	0xFE5
 16856                           plusw1	equ	0xFE3
 16857                           fsr1h	equ	0xFE2
 16858                           fsr1l	equ	0xFE1
 16859                           indf2	equ	0xFDF
 16860                           postinc2	equ	0xFDE
 16861                           postdec2	equ	0xFDD
 16862                           plusw2	equ	0xFDB
 16863                           fsr2h	equ	0xFDA
 16864                           fsr2l	equ	0xFD9
 16865                           status	equ	0xFD8
 16866                           
 16867 ;; *************** function _resetMotorTimer *****************
 16868 ;; Defined at:
 16869 ;;		line 99 in file "timer.c"
 16870 ;; Parameters:    Size  Location     Type
 16871 ;;		None
 16872 ;; Auto vars:     Size  Location     Type
 16873 ;;		None
 16874 ;; Return value:  Size  Location     Type
 16875 ;;                  1    wreg      void 
 16876 ;; Registers used:
 16877 ;;		wreg, status,2
 16878 ;; Tracked objects:
 16879 ;;		On entry : 0/0
 16880 ;;		On exit  : 0/0
 16881 ;;		Unchanged: 0/0
 16882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16886 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16887 ;;Total ram usage:        0 bytes
 16888 ;; Hardware stack levels used:    1
 16889 ;; This function calls:
 16890 ;;		Nothing
 16891 ;; This function is called by:
 16892 ;;		_tmr0_ISR
 16893 ;; This function uses a non-reentrant model
 16894 ;;
 16895                           
 16896                           	psect	text53
 16897  003FA4                     __ptext53:
 16898                           	opt stack 0
 16899  003FA4                     _resetMotorTimer:
 16900                           	opt stack 22
 16901                           
 16902                           ;timer.c: 100: motorControlTimer = 0;
 16903                           
 16904                           ;incstack = 0
 16905  003FA4  0E00               	movlw	0
 16906  003FA6  0101               	movlb	1	; () banked
 16907  003FA8  6FD1               	movwf	_motorControlTimer& (0+255),b	;volatile
 16908  003FAA  0E00               	movlw	0
 16909  003FAC  6FD2               	movwf	(_motorControlTimer+1)& (0+255),b	;volatile
 16910  003FAE  0E00               	movlw	0
 16911  003FB0  6FD3               	movwf	(_motorControlTimer+2)& (0+255),b	;volatile
 16912  003FB2  0E00               	movlw	0
 16913  003FB4  6FD4               	movwf	(_motorControlTimer+3)& (0+255),b	;volatile
 16914                           
 16915                           ; BSR set to: 1
 16916  003FB6  0012               	return		;funcret
 16917  003FB8                     __end_of_resetMotorTimer:
 16918                           	opt stack 0
 16919                           tosu	equ	0xFFF
 16920                           tosh	equ	0xFFE
 16921                           tosl	equ	0xFFD
 16922                           pclatu	equ	0xFFB
 16923                           pclath	equ	0xFFA
 16924                           tblptru	equ	0xFF8
 16925                           tblptrh	equ	0xFF7
 16926                           tblptrl	equ	0xFF6
 16927                           tablat	equ	0xFF5
 16928                           prodh	equ	0xFF4
 16929                           prodl	equ	0xFF3
 16930                           intcon	equ	0xFF2
 16931                           intcon3	equ	0xFF0
 16932                           indf0	equ	0xFEF
 16933                           postinc0	equ	0xFEE
 16934                           fsr0h	equ	0xFEA
 16935                           fsr0l	equ	0xFE9
 16936                           wreg	equ	0xFE8
 16937                           postdec1	equ	0xFE5
 16938                           plusw1	equ	0xFE3
 16939                           fsr1h	equ	0xFE2
 16940                           fsr1l	equ	0xFE1
 16941                           indf2	equ	0xFDF
 16942                           postinc2	equ	0xFDE
 16943                           postdec2	equ	0xFDD
 16944                           plusw2	equ	0xFDB
 16945                           fsr2h	equ	0xFDA
 16946                           fsr2l	equ	0xFD9
 16947                           status	equ	0xFD8
 16948                           
 16949 ;; *************** function _inverseDir *****************
 16950 ;; Defined at:
 16951 ;;		line 66 in file "motors.c"
 16952 ;; Parameters:    Size  Location     Type
 16953 ;;  dir             1    wreg     enum E2974
 16954 ;; Auto vars:     Size  Location     Type
 16955 ;;  dir             1    0[COMRAM] enum E2974
 16956 ;; Return value:  Size  Location     Type
 16957 ;;                  1    wreg      enum E2980
 16958 ;; Registers used:
 16959 ;;		wreg, status,2
 16960 ;; Tracked objects:
 16961 ;;		On entry : 0/0
 16962 ;;		On exit  : 0/0
 16963 ;;		Unchanged: 0/0
 16964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16966 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16968 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16969 ;;Total ram usage:        1 bytes
 16970 ;; Hardware stack levels used:    1
 16971 ;; This function calls:
 16972 ;;		Nothing
 16973 ;; This function is called by:
 16974 ;;		_tmr0_ISR
 16975 ;; This function uses a non-reentrant model
 16976 ;;
 16977                           
 16978                           	psect	text54
 16979  003FCC                     __ptext54:
 16980                           	opt stack 0
 16981  003FCC                     _inverseDir:
 16982                           	opt stack 22
 16983                           
 16984                           ; BSR set to: 1
 16985                           ;incstack = 0
 16986                           ;inverseDir@dir stored from wreg
 16987  003FCC  6E01               	movwf	inverseDir@dir,c
 16988                           
 16989                           ;motors.c: 67: return (dir == FORWARD) ? REVERSE : FORWARD;
 16990  003FCE  5001               	movf	inverseDir@dir,w,c
 16991  003FD0  A4D8               	btfss	status,2,c
 16992  003FD2  D002               	goto	i2u255_40
 16993  003FD4  0E01               	movlw	1
 16994  003FD6  0012               	return	
 16995  003FD8                     i2u255_40:
 16996  003FD8  0E00               	movlw	0
 16997  003FDA  0012               	return	
 16998  003FDC                     __end_of_inverseDir:
 16999                           	opt stack 0
 17000                           tosu	equ	0xFFF
 17001                           tosh	equ	0xFFE
 17002                           tosl	equ	0xFFD
 17003                           pclatu	equ	0xFFB
 17004                           pclath	equ	0xFFA
 17005                           tblptru	equ	0xFF8
 17006                           tblptrh	equ	0xFF7
 17007                           tblptrl	equ	0xFF6
 17008                           tablat	equ	0xFF5
 17009                           prodh	equ	0xFF4
 17010                           prodl	equ	0xFF3
 17011                           intcon	equ	0xFF2
 17012                           intcon3	equ	0xFF0
 17013                           indf0	equ	0xFEF
 17014                           postinc0	equ	0xFEE
 17015                           fsr0h	equ	0xFEA
 17016                           fsr0l	equ	0xFE9
 17017                           wreg	equ	0xFE8
 17018                           postdec1	equ	0xFE5
 17019                           plusw1	equ	0xFE3
 17020                           fsr1h	equ	0xFE2
 17021                           fsr1l	equ	0xFE1
 17022                           indf2	equ	0xFDF
 17023                           postinc2	equ	0xFDE
 17024                           postdec2	equ	0xFDD
 17025                           plusw2	equ	0xFDB
 17026                           fsr2h	equ	0xFDA
 17027                           fsr2l	equ	0xFD9
 17028                           status	equ	0xFD8
 17029                           tosu	equ	0xFFF
 17030                           tosh	equ	0xFFE
 17031                           tosl	equ	0xFFD
 17032                           pclatu	equ	0xFFB
 17033                           pclath	equ	0xFFA
 17034                           tblptru	equ	0xFF8
 17035                           tblptrh	equ	0xFF7
 17036                           tblptrl	equ	0xFF6
 17037                           tablat	equ	0xFF5
 17038                           prodh	equ	0xFF4
 17039                           prodl	equ	0xFF3
 17040                           intcon	equ	0xFF2
 17041                           intcon3	equ	0xFF0
 17042                           indf0	equ	0xFEF
 17043                           postinc0	equ	0xFEE
 17044                           fsr0h	equ	0xFEA
 17045                           fsr0l	equ	0xFE9
 17046                           wreg	equ	0xFE8
 17047                           postdec1	equ	0xFE5
 17048                           plusw1	equ	0xFE3
 17049                           fsr1h	equ	0xFE2
 17050                           fsr1l	equ	0xFE1
 17051                           indf2	equ	0xFDF
 17052                           postinc2	equ	0xFDE
 17053                           postdec2	equ	0xFDD
 17054                           plusw2	equ	0xFDB
 17055                           fsr2h	equ	0xFDA
 17056                           fsr2l	equ	0xFD9
 17057                           status	equ	0xFD8
 17058                           
 17059                           	psect	text55
 17060  000000                     __ptext55:
 17061                           	opt stack 0
 17062                           tosu	equ	0xFFF
 17063                           tosh	equ	0xFFE
 17064                           tosl	equ	0xFFD
 17065                           pclatu	equ	0xFFB
 17066                           pclath	equ	0xFFA
 17067                           tblptru	equ	0xFF8
 17068                           tblptrh	equ	0xFF7
 17069                           tblptrl	equ	0xFF6
 17070                           tablat	equ	0xFF5
 17071                           prodh	equ	0xFF4
 17072                           prodl	equ	0xFF3
 17073                           intcon	equ	0xFF2
 17074                           intcon3	equ	0xFF0
 17075                           indf0	equ	0xFEF
 17076                           postinc0	equ	0xFEE
 17077                           fsr0h	equ	0xFEA
 17078                           fsr0l	equ	0xFE9
 17079                           wreg	equ	0xFE8
 17080                           postdec1	equ	0xFE5
 17081                           plusw1	equ	0xFE3
 17082                           fsr1h	equ	0xFE2
 17083                           fsr1l	equ	0xFE1
 17084                           indf2	equ	0xFDF
 17085                           postinc2	equ	0xFDE
 17086                           postdec2	equ	0xFDD
 17087                           plusw2	equ	0xFDB
 17088                           fsr2h	equ	0xFDA
 17089                           fsr2l	equ	0xFD9
 17090                           status	equ	0xFD8
 17091                           
 17092                           	psect	rparam
 17093  0000                     tosu	equ	0xFFF
 17094                           tosh	equ	0xFFE
 17095                           tosl	equ	0xFFD
 17096                           pclatu	equ	0xFFB
 17097                           pclath	equ	0xFFA
 17098                           tblptru	equ	0xFF8
 17099                           tblptrh	equ	0xFF7
 17100                           tblptrl	equ	0xFF6
 17101                           tablat	equ	0xFF5
 17102                           prodh	equ	0xFF4
 17103                           prodl	equ	0xFF3
 17104                           intcon	equ	0xFF2
 17105                           intcon3	equ	0xFF0
 17106                           indf0	equ	0xFEF
 17107                           postinc0	equ	0xFEE
 17108                           fsr0h	equ	0xFEA
 17109                           fsr0l	equ	0xFE9
 17110                           wreg	equ	0xFE8
 17111                           postdec1	equ	0xFE5
 17112                           plusw1	equ	0xFE3
 17113                           fsr1h	equ	0xFE2
 17114                           fsr1l	equ	0xFE1
 17115                           indf2	equ	0xFDF
 17116                           postinc2	equ	0xFDE
 17117                           postdec2	equ	0xFDD
 17118                           plusw2	equ	0xFDB
 17119                           fsr2h	equ	0xFDA
 17120                           fsr2l	equ	0xFD9
 17121                           status	equ	0xFD8
 17122                           
 17123                           	psect	temp
 17124  000064                     btemp:
 17125                           	opt stack 0
 17126  000064                     	ds	1
 17127  0000                     int$flags	set	btemp
 17128  0000                     wtemp6	set	btemp+1
 17129                           tosu	equ	0xFFF
 17130                           tosh	equ	0xFFE
 17131                           tosl	equ	0xFFD
 17132                           pclatu	equ	0xFFB
 17133                           pclath	equ	0xFFA
 17134                           tblptru	equ	0xFF8
 17135                           tblptrh	equ	0xFF7
 17136                           tblptrl	equ	0xFF6
 17137                           tablat	equ	0xFF5
 17138                           prodh	equ	0xFF4
 17139                           prodl	equ	0xFF3
 17140                           intcon	equ	0xFF2
 17141                           intcon3	equ	0xFF0
 17142                           indf0	equ	0xFEF
 17143                           postinc0	equ	0xFEE
 17144                           fsr0h	equ	0xFEA
 17145                           fsr0l	equ	0xFE9
 17146                           wreg	equ	0xFE8
 17147                           postdec1	equ	0xFE5
 17148                           plusw1	equ	0xFE3
 17149                           fsr1h	equ	0xFE2
 17150                           fsr1l	equ	0xFE1
 17151                           indf2	equ	0xFDF
 17152                           postinc2	equ	0xFDE
 17153                           postdec2	equ	0xFDD
 17154                           plusw2	equ	0xFDB
 17155                           fsr2h	equ	0xFDA
 17156                           fsr2l	equ	0xFD9
 17157                           status	equ	0xFD8


Data Sizes:
    Strings     668
    Constant    495
    Data        192
    BSS         75
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     51      99
    BANK0           128     85     107
    BANK1           256    183     241
    BANK2           256    166     200
    BANK3           256      0     105
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 132
		 -> inputEntryQuestions(CODE[132]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 32
		 -> inputEntry@fastenerString(BANK1[32]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 32
		 -> inputEntry@fastenerString(BANK1[32]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 36
		 -> STR_34(CODE[12]), STR_31(CODE[22]), STR_30(CODE[27]), STR_29(CODE[32]), 
		 -> STR_22(CODE[18]), STR_21(CODE[12]), STR_20(CODE[27]), STR_19(CODE[26]), 
		 -> STR_18(CODE[23]), STR_10(CODE[36]), STR_8(CODE[22]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 128
		 -> mainMenu@msg(BANK2[32]), mainMenu@summaries(BANK2[96]), viewLogs@msg(BANK1[32]), viewLogs@msgs(BANK1[128]), 
		 -> packaging@msg3(BANK1[50]), packaging@msg2(BANK1[32]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 128
		 -> NULL(NULL[0]), mainMenu@msg(BANK2[32]), mainMenu@summaries(BANK2[96]), viewLogs@msg(BANK1[32]), 
		 -> viewLogs@msgs(BANK1[128]), packaging@msg3(BANK1[50]), packaging@msg2(BANK1[32]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_9(CODE[15]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 128
		 -> NULL(NULL[0]), mainMenu@msg(BANK2[32]), mainMenu@summaries(BANK2[96]), viewLogs@msg(BANK1[32]), 
		 -> viewLogs@msgs(BANK1[128]), packaging@msg3(BANK1[50]), packaging@msg2(BANK1[32]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), printf@ap(BANK0[2]), 

    _doprnt@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), NULL(NULL[0]), STR_35(CODE[7]), 
		 -> fSLookup(BANK3[105]), mainMenu@msg(BANK2[32]), mainMenu@summaries(BANK2[96]), viewLogs@msg(BANK1[32]), 
		 -> viewLogs@msgs(BANK1[128]), packaging@msg3(BANK1[50]), packaging@msg2(BANK1[32]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 36
		 -> STR_34(CODE[12]), STR_31(CODE[22]), STR_30(CODE[27]), STR_29(CODE[32]), 
		 -> STR_22(CODE[18]), STR_21(CODE[12]), STR_20(CODE[27]), STR_19(CODE[26]), 
		 -> STR_18(CODE[23]), STR_10(CODE[36]), STR_9(CODE[15]), STR_8(CODE[22]), 

    S1684__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S1684__prbuf$ptr	PTR unsigned char  size(2) Largest target is 128
		 -> NULL(NULL[0]), mainMenu@msg(BANK2[32]), mainMenu@summaries(BANK2[96]), viewLogs@msg(BANK1[32]), 
		 -> viewLogs@msgs(BANK1[128]), packaging@msg3(BANK1[50]), packaging@msg2(BANK1[32]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 128
		 -> NULL(NULL[0]), mainMenu@msg(BANK2[32]), mainMenu@summaries(BANK2[96]), viewLogs@msg(BANK1[32]), 
		 -> viewLogs@msgs(BANK1[128]), packaging@msg3(BANK1[50]), packaging@msg2(BANK1[32]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(BANK0[4]), printf@pb(BANK0[4]), 

    EEPROM_readLog@data	PTR struct operationInfo size(2) Largest target is 13
		 -> viewLogs@run(BANK1[13]), 

    EEPROM_logOperation@data	PTR struct operationInfo size(2) Largest target is 13
		 -> mainMenu@run(BANK2[13]), 

    RTC_getTime@time	PTR unsigned char  size(2) Largest target is 7
		 -> RTC_getOperatingTime@time(BANK0[7]), RTC_startOperation@time(BANK0[7]), RTC_getSeconds@time(COMRAM[7]), mainMenu@time(BANK2[7]), 

    I2C_Send@data	PTR unsigned char  size(2) Largest target is 50
		 -> STR_28(CODE[21]), STR_24(CODE[14]), inputEntry@msg(BANK1[24]), STR_23(CODE[25]), 
		 -> STR_14(CODE[17]), STR_13(CODE[17]), STR_12(CODE[14]), STR_11(CODE[15]), 
		 -> clearing@instr(BANK0[2]), packaging@msg3(BANK1[50]), packaging@msg2(BANK1[32]), packaging@instr_324(BANK1[2]), 
		 -> packaging@msg(BANK1[34]), packaging@instr(BANK1[2]), STR_7(CODE[33]), packageCompartment@instr(BANK0[2]), 
		 -> STR_6(CODE[28]), STR_5(CODE[19]), STR_4(CODE[17]), STR_3(CODE[17]), 
		 -> STR_2(CODE[14]), STR_1(CODE[15]), 

    printErrorLCD@string	PTR unsigned char  size(2) Largest target is 224
		 -> errMsgs.noFasteners(CODE[32]), errMsgs.tooManySpacers(CODE[32]), errMsgs.tooManyWashers(CODE[32]), errMsgs.tooManyNuts(CODE[32]), 
		 -> errMsgs.tooManyBolts(CODE[32]), errMsgs.tooManyFasteners(CODE[32]), errMsgs.badEntry(CODE[32]), errMsgs(CODE[224]), 

    printStringLCD@string	PTR unsigned char  size(2) Largest target is 224
		 -> mainMenu@msg(BANK2[32]), STR_33(CODE[14]), STR_32(CODE[16]), mainMenu@summaries(BANK2[96]), 
		 -> STR_27(CODE[25]), STR_26(CODE[27]), STR_25(CODE[30]), inputEntry@fastenerString(BANK1[32]), 
		 -> inputEntryQuestions(CODE[132]), viewLogs@msg(BANK1[32]), viewLogs@msgs(BANK1[128]), STR_17(CODE[21]), 
		 -> STR_16(CODE[21]), STR_15(CODE[17]), errMsgs.noFasteners(CODE[32]), errMsgs.tooManySpacers(CODE[32]), 
		 -> errMsgs.tooManyWashers(CODE[32]), errMsgs.tooManyNuts(CODE[32]), errMsgs.tooManyBolts(CODE[32]), errMsgs.tooManyFasteners(CODE[32]), 
		 -> errMsgs.badEntry(CODE[32]), errMsgs(CODE[224]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 32
		 -> inputEntry@fastenerString(BANK1[32]), 

    packaging@set	PTR unsigned char  size(2) Largest target is 84
		 -> fastenerMatrix(CODE[84]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _interruptHandler in COMRAM

    _interruptHandler->_tmr0_ISR
    _tmr0_ISR->i2___ftadd
    i2_motorControl->_inverseDir
    i2___ftadd->i2___ftpack

Critical Paths under _main in BANK0

    _main->_mainMenu
    _mainMenu->_packaging
    _viewLogs->_sprintf
    _EEPROM_readLog->_EEPROM_read
    _packaging->_packageCompartment
    _sprintf->__doprnt
    _printf->__doprnt
    __doprnt->___lwmod
    ___lwmod->___lwdiv
    _packageCompartment->___ftge
    _inputEntry->_printErrorLCD
    _strcpy->___wmul
    _printErrorLCD->_printStringLCD
    _lcd_set_cursor->_lcd_shift_cursor
    _lcd_shift_cursor->_lcdInst
    _hibernate->_printStringLCD
    _printStringLCD->___wmul
    _putch->_lcdNibble
    _clearing->___ftge
    ___ftge->___ftadd
    ___ftadd->___ftpack
    _I2C_Send->_I2C_Master_Write
    _RTC_startOperation->_RTC_getTime
    _RTC_getOperatingTime->_RTC_getTime
    _RTC_getOperatingTime->___wmul
    _RTC_getTime->_I2C_Master_Read
    _RTC_getTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _EEPROM_logOperation->_EEPROM_write
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    _mainMenu->_viewLogs

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_mainMenu

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  131108
                                             84 BANK0      1     1      0
                    _I2C_Master_Init
                          _hibernate
                            _initLCD
                            _lcdInst
                           _mainMenu
                       _motorControl
                           _tmr0Init
 ---------------------------------------------------------------------------------
 (1) _tmr0Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _mainMenu                                           175   175      0  124393
                                             75 BANK0      9     9      0
                                              0 BANK2    166   166      0
                _EEPROM_logOperation
                           _I2C_Send
               _RTC_getOperatingTime
                        _RTC_getTime
                 _RTC_startOperation
                            ___aldiv
                             ___wmul
                           _clearing
                          _hibernate
                         _inputEntry
                          _packaging
                         _pollKeypad
                     _printStringLCD
                              _putch
                            _sprintf
                           _viewLogs
 ---------------------------------------------------------------------------------
 (2) _viewLogs                                           187   187      0   16622
                                             51 BANK0      4     4      0
                                              0 BANK1    183   183      0
                     _EEPROM_readLog
                         _pollKeypad
                     _printStringLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _EEPROM_readLog                                      17    13      4    2316
                                              2 BANK0     17    13      4
                        _EEPROM_read
 ---------------------------------------------------------------------------------
 (4) _EEPROM_read                                          2     0      2     869
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _packaging                                          140   140      0   40646
                                             69 BANK0      6     6      0
                                              0 BANK1    134   134      0
                           _I2C_Send
                             ___wmul
                            _lcdInst
                 _packageCompartment
                             _printf
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             18     6     12    9859
                                             33 BANK0     18     6     12
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) _printf                                              10     6      4    7893
                                             33 BANK0     10     6      4
                            __doprnt
 ---------------------------------------------------------------------------------
 (4) __doprnt                                             25    19      6    7529
                                             12 BANK0     21    15      6
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch *
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     412
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     421
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _packageCompartment                                  40    37      3   15114
                                             29 BANK0     40    37      3
                           _I2C_Send
                            ___ftadd
                             ___ftge
                       _motorControl
                                _tic
                               _tock
 ---------------------------------------------------------------------------------
 (2) _inputEntry                                          94    94      0   17044
                                             25 BANK0      4     4      0
                                              0 BANK1     88    88      0
                           _I2C_Send
                             ___wmul
                            _lcdInst
                     _lcd_set_cursor
                         _pollKeypad
                      _printErrorLCD
                     _printStringLCD
                              _putch
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _strcpy                                               6     2      4     289
                                              6 BANK0      6     2      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _printErrorLCD                                        4     2      2    3699
                                             21 BANK0      4     2      2
                     _printStringLCD
 ---------------------------------------------------------------------------------
 (3) _lcd_set_cursor                                       4     3      1     920
                                              6 BANK0      4     3      1
                            _lcdInst
                   _lcd_shift_cursor
 ---------------------------------------------------------------------------------
 (4) _lcd_shift_cursor                                     3     2      1     415
                                              3 BANK0      3     2      1
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _hibernate                                            6     6      0    3016
                                             21 BANK0      6     6      0
                         _pollKeypad
                     _printStringLCD
 ---------------------------------------------------------------------------------
 (3) _printStringLCD                                      15    13      2    2948
                                              6 BANK0     15    13      2
                             ___wmul (ARG)
                            _lcdInst
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _pollKeypad                                           1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _clearing                                            19    19      0   14820
                                             29 BANK0     13    13      0
                           _I2C_Send
                            ___ftadd
                             ___ftge
                       _motorControl
                                _tic
                               _tock
 ---------------------------------------------------------------------------------
 (4) _tock                                                 3     0      3       0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _tic                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _motorControl                                         2     1      1    2767
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6    2358
                                             20 BANK0      9     3      6
                            ___ftadd (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    5878
                                              8 BANK0     12     6      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2713
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _I2C_Send                                             8     6      2    2982
                                              3 BANK0      8     6      2
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     625
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _RTC_startOperation                                   9     9      0    1308
                                              6 BANK0      9     9      0
                        _RTC_getTime
 ---------------------------------------------------------------------------------
 (2) _RTC_getOperatingTime                                19    17      2    4810
                                              6 BANK0     19    17      2
                        _RTC_getTime
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    3292
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _RTC_getTime                                          3     1      2    1067
                                              3 BANK0      3     1      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     481
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Read                                      2     2      0      65
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _EEPROM_logOperation                                 16    14      2    2887
                                              3 BANK0     16    14      2
                       _EEPROM_write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_write                                         3     0      3    1713
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (4) _lcdInst                                              1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (6) _lcdNibble                                            2     2      0     164
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     542
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     421
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _interruptHandler                                    18    18      0    2218
                                             33 COMRAM    18    18      0
                           _tmr0_ISR
 ---------------------------------------------------------------------------------
 (8) _tmr0_ISR                                            13    13      0    2218
                                             20 COMRAM    13    13      0
                         _inverseDir
                    _resetMotorTimer
                          i2___ftadd
                     i2_motorControl
 ---------------------------------------------------------------------------------
 (9) i2_motorControl                                       2     1      1     582
                                              1 COMRAM     2     1      1
                         _inverseDir (ARG)
 ---------------------------------------------------------------------------------
 (9) i2___ftadd                                           12     6      6    1253
                                              8 COMRAM    12     6      6
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (10) i2___ftpack                                          8     3      5     309
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) _resetMotorTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _inverseDir                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _hibernate
     _pollKeypad
     _printStringLCD
       ___wmul (ARG)
       _lcdInst (ARG)
         _lcdNibble
       _putch (ARG)
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _mainMenu
     _EEPROM_logOperation
       _EEPROM_write
     _I2C_Send
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _RTC_getOperatingTime
       _RTC_getTime
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       ___wmul
     _RTC_getTime
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _RTC_startOperation
       _RTC_getTime
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
     ___aldiv
     ___wmul
     _clearing
       _I2C_Send
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       ___ftadd
         ___ftpack
       ___ftge
         ___ftadd (ARG)
           ___ftpack
       _motorControl
       _tic
       _tock
     _hibernate
       _pollKeypad
       _printStringLCD
         ___wmul (ARG)
         _lcdInst (ARG)
           _lcdNibble
         _putch (ARG)
           _lcdNibble
     _inputEntry
       _I2C_Send
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       ___wmul
       _lcdInst
         _lcdNibble
       _lcd_set_cursor
         _lcdInst
           _lcdNibble
         _lcd_shift_cursor
           _lcdInst
             _lcdNibble
       _pollKeypad
       _printErrorLCD
         _printStringLCD
           ___wmul (ARG)
           _lcdInst (ARG)
             _lcdNibble
           _putch (ARG)
             _lcdNibble
       _printStringLCD
         ___wmul (ARG)
         _lcdInst (ARG)
           _lcdNibble
         _putch (ARG)
           _lcdNibble
       _putch
         _lcdNibble
       _strcpy
         ___wmul (ARG)
     _packaging
       _I2C_Send
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       ___wmul
       _lcdInst
         _lcdNibble
       _packageCompartment
         _I2C_Send
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         ___ftadd
           ___ftpack
         ___ftge
           ___ftadd (ARG)
             ___ftpack
         _motorControl
         _tic
         _tock
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble
     _pollKeypad
     _printStringLCD
       ___wmul (ARG)
       _lcdInst (ARG)
         _lcdNibble
       _putch (ARG)
         _lcdNibble
     _putch
       _lcdNibble
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
           _lcdNibble
     _viewLogs
       _EEPROM_readLog
         _EEPROM_read
       _pollKeypad
       _printStringLCD
         ___wmul (ARG)
         _lcdInst (ARG)
           _lcdNibble
         _putch (ARG)
           _lcdNibble
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble
   _motorControl
   _tmr0Init

 _interruptHandler (ROOT)
   _tmr0_ISR
     _inverseDir
     _resetMotorTimer
     i2___ftadd
       i2___ftpack
     i2_motorControl
       _inverseDir (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      69      11       41.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     A6      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100     B7      F1       7       94.1%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     55      6B       5       83.6%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     33      63       1       78.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2F0      34        0.0%
DATA                 0      0     2F0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Apr 02 17:16:02 2018

                   _motorGoingBackwards 0040                     printErrorLCD@string 0095  
                   ___wmul@multiplicand 0082                             __CFG_BORV$3 000000  
                    EEPROM_read@address 0080                              i2___ftpack 3704  
                          __CFG_CP0$OFF 000000                             _RTC_getTime 3A70  
                          __CFG_CP1$OFF 000000                            __CFG_CP2$OFF 000000  
                          __CFG_CP3$OFF 000000                            ___ftadd@exp1 0093  
                          ___ftadd@exp2 0092                            ___ftadd@sign 0091  
                                   l110 1AC0                                     l111 1AEE  
                                   l120 1BE2                                     l112 1B1C  
                                   l113 1B4A                                     l105 18B0  
                                   l106 1934                                     l130 1C68  
                                   l107 19A8                                     l108 1A1C  
                                   l140 1FB6                                     l109 1A90  
                                   l150 0EFE                                     l134 1CF4  
                                   l151 0F7E                                     l160 10BE  
                                   l152 0FA0                                     l128 1C4C  
                                   l138 1CEE                                     l171 122E  
                                   l163 1110                                     l155 0FF2  
                                   l147 0EA6                                     l411 075A  
                                   l412 0180                                     l500 16B6  
                                   l421 025A                                     l501 16D0  
                                   l174 1258                                     l166 113A  
                                   l158 101C                                     l422 02C6  
                                   l406 0082                                     l175 12D8  
                                   l167 11BA                                     l159 109C  
                                   l415 06F4                                     l431 02C0  
                                   l407 0126                                     l503 1788  
                                   l176 12FA                                     l168 11DC  
                                   l280 3C84                                     l408 0116  
                                   l281 3C7A                                     l441 033C  
                                   l433 02F8                                     l425 0298  
                                   l450 053C                                     l194 364A  
                                   l179 134C                                     l443 0480  
                                   l427 02A6                                     l419 01DE  
                                   l460 0690                                     l452 05C2  
                                   l444 04A8                                     l380 2B7E  
                                   l445 04B2                                     l429 02B4  
                                   l462 06C4                                     l454 05F4  
                                   l438 0308                                     l470 135C  
                                   l551 2456                                     l463 06E8  
                                   l471 137E                                     l552 249C  
                                   l456 0628                                     l448 04C4  
                                   l392 2BA4                                     l384 2B74  
                                   l376 2B32                                     l472 13BC  
                                   l801 33B4                                     l561 262E  
                                   l553 24EA                                     l369 3D34  
                                   l465 0720                                     l802 33BA  
                                   l554 2518                                     l562 263E  
                                   l458 065C                                     l394 2BB0  
                                   l474 17D2                                     l619 3AB4  
                                   l811 33F8                                     l803 33C6  
                                   l395 2BC8                                     l491 15CE  
                                   l483 159C                                     l572 3DDE  
                                   l548 23E4                                     l476 13F6  
                                   l813 3404                                     l805 33D0  
                                   l397 2D0E                                     l558 25FA  
                                   l910 0AB4                                     l478 156C  
                                   l807 33DC                                     l911 0890  
                                   l903 082A                                     l487 15DC  
                                   l479 15A6                                     l808 33E2  
                                   l920 0970                                     l912 08CA  
                                   l577 3816                                     l809 33EE  
                                   l905 0A7C                                     l921 099A  
                                   l913 08DA                                     l578 37D2  
                                   l930 0AF4                                     l914 08D4  
                                   l499 1690                                     l932 0B1C  
                                   l924 09AE                                     l916 0926  
                                   l941 0BE8                                     l925 0A16  
                                   l790 3376                                     l942 0C12  
                                   l926 0A66                                     l951 0CD8  
                                   l919 0930                                     l792 3380  
                                   l960 0E46                                     l952 0D02  
                                   l936 0B6C                                     l945 0C5C  
                                   l937 0B90                                     l929 0A78  
                                   l865 3F88                                     l794 338C  
                                   l946 0C86                                     l938 0B98  
                                   l859 3E24                                     l955 0D5E  
                                   l939 0C90                                     l788 340A  
                                   l796 3392                                     l956 0D88  
                                   l892 0768                                     l876 2994  
                                   l797 339E                                     l789 3368  
                                   l893 07DE                                     l958 0D8E  
                                   l894 07B2                                     l799 33A8  
                                   l959 0E1C                                     l897 07F6  
                                   l898 07EE                            __CFG_CPB$OFF 000000  
                          __CFG_CPD$OFF 000000                                     _tic 3FEA  
                                   prod 000FF3                        ?_resetMotorTimer 0001  
                                   tosl 000FFD                                     wreg 000FE8  
                          viewLogs@msgs 0100                         ?_lcd_set_cursor 0086  
                          __CFG_LVP$OFF 000000                            __CFG_WDT$OFF 000000  
                                  l1020 32CA                                    l1022 32F8  
                                  l1023 32EC                                    l1026 332C  
                                  l1027 333A                                    l1019 32B2  
                                  l1028 3350                                    l1213 2DBA  
                                  l1223 2E16                                    l1320 3A10  
                                  l1232 2E54                                    l1224 2E0C  
                                  l1233 2E4A                                    l1209 2D90  
                                  l1218 2E20                                    l1250 3884  
                                  l1323 3A50                                    l1235 2E78  
                                  l1251 38B4                                    l1324 3A5E  
                                  l1236 2E94                                    l1181 36B2  
                                  l1237 2EC4                                    l1182 369C  
                                  l1319 3A1C                                    l1184 36DA  
                                  l1185 36D0                                    l1178 367E  
                                  l1179 3674                                    l1532 3DB0  
                                  l1372 3BD6                                    l1533 3DA6  
                                  l1373 3BCE                                    l1293 3F04  
                                  l1382 3CFA                                    l1383 3CF2  
                                  l1376 3BF6                                    l1377 3C00  
                                  l1386 3D12                                    l1387 3D1C  
                                  l6002 25FA                                    l6112 0B20  
                                  l7006 0734                                    l6070 0930  
                                  l6080 09AE                                    l7044 2804  
                                  l6540 1C68                                    l7308 1788  
                                  l6622 0FBE                                    l7246 15CE  
                                  l6724 1318                                    l6494 3AAC  
                                  l5678 38E0                                    l6656 10DC  
                                  l6690 11FA                                    l6906 0318  
                                  l6826 0116                                    l5980 24FA  
                                  l6924 0480                                    ?_tic 0001  
                                  l6960 052C                                    l6928 0490  
                                  l6970 058E                                    l6978 05F4  
                                  STR_1 FF7A                                    STR_2 FFC3  
                                  STR_3 FF26                                    STR_4 FF37  
                                  STR_5 FEF0                                    STR_6 FDE5  
                                  STR_7 FD86                                    STR_8 FEB0  
                                  STR_9 FF98                                    _T0IE 007F95  
                                  _T0IF 007F92                                    _LATA 000F89  
                                  _LATB 000F8A                                    _LATC 000F8B  
                                  _LATD 000F8C                                    _LATE 000F8D  
                                  u7010 3666                                    u7120 3CFE  
                                  u8001 2D4E                                    u7050 36E4  
                                  u8011 2D62                                    u8100 2DEA  
                                  u8040 2D82                                    u7400 24D6  
                                  u7320 23E2                                    u7330 2412  
                                  u7090 3BDA                                    u7260 3802  
                                  u8140 2E28                                    u7270 3846  
                                  u8070 2DAC                                    u7510 25F4  
                                  u7430 24FA                                    u7350 2448  
                                  u9030 0282                                    u7407 24CC  
                                  u7440 2516                                    u9200 0490  
                                  u9120 02EE                                    u7337 2408  
                                  u8170 2E5C                                    u7530 262A  
                                  u7450 2546                                    u7370 2486  
                                  u7267 37F8                                    u9300 0682  
                                  u9220 04BC                                    u7700 0A0C  
                                  u7620 0908                                    u7277 383C  
                                  u7517 25EA                                    u7357 243E  
                                  u9310 06B6                                    u9150 033A  
                                  u7710 0A50                                    u7295 3E4E  
                                  u7296 3E50                                    u8520 3AD2  
                                  u7537 2620                                    u7457 253C  
                                  u7377 247C                                    u9161 0380  
                                  u7490 25BE                                    u9330 0734  
                                  u9250 058E                                    u7707 0A02  
                                  u7627 08FE                                    u9260 05B4  
                                  u7717 0A46                                    u9430 32FC  
                                  u9270 05E6                                    u8640 0FBE  
                                  u9280 061A                                    u7920 0D12  
                                  u9600 15C4                                    u7497 25B4  
                                  u8561 1C72                                    u8465 29B8  
                                  u9290 064E                                    u7770 0B52  
                                  u9355 26CA                                    u8475 29FE  
                                  u8740 11FA                                    u7668 095C  
                                  u7588 079E                                    u6965 39A6  
                                  u9365 2702                                    u8485 2A7C  
                                  u9470 3A20                                    u6966 39A8  
                                  u9390 281A                                    u7918 0CC4  
                                  u6975 39E8                                    u9375 279E  
                                  u8591 1FC8                                    u8495 2AD4  
                                  u6976 39EA                                    u7848 0BD4  
                                  u8840 2B60                                    u9560 1584  
                                  u8690 10DC                                    u8930 00F8  
                                  u7890 0C98                                    u7698 09DA  
                                  u8850 2B6C                                    u9650 16E0  
                                  u9570 1594                                    u7699 0A0E  
                                  u8915 2CF0                                    u8940 0108  
                                  u7980 0E50                                    u9660 16F0  
                                  u8790 1318                                    u7990 0E6C  
                                  u7958 0D4A                                    u7878 0C48  
                                  u8870 2B92                                    u9670 179A  
                                  u9590 15B6                                    u9495 3B8C  
                                  u9807 1FAC                                    u8960 017E  
                    EEPROM_readLog@data 0084                                    u9817 1BB0  
                                  u7978 0E08                                    u9907 3F5A  
                                  u9827 0020                                    u9747 35FA  
                                  u9917 3C12                                    u9837 0036  
                                  u9685 17AE                                    u9757 3610  
                                  u8974 0192                                    u9927 3C46  
                                  u8991 01A6                                    u8975 018E  
                                  u9847 00D8                                    u9767 1682  
                                  u9937 3F72                                    u9857 050C  
                                  u9777 16AA                                    u9947 398E  
                                  u9867 3E98                                    u9787 1E9A  
                                  u9957 3998                                    u9877 3C68  
                                  u9797 1EB0                                    u9967 39D0  
                                  u9887 23A6                                    u9977 39DA  
                                  u9897 23BC                                    _main 35A0  
              __end_of_interruptHandler 35A0                            ___ftpack@arg 0080  
                  _RTC_getOperatingTime 3096                            ___ftpack@exp 0083  
                                  _tock 3FDC                                    _test 0044  
          __end_of_assemblyStepEncoding FBA3                                    fsr0h 000FEA  
                                  fsr1h 000FE2                                    indf0 000FEF  
                                  fsr2h 000FDA                                    fsr0l 000FE9  
                                  indf2 000FDF                                    fsr1l 000FE1  
                                  fsr2l 000FD9                        __end_of_I2C_Send 3852  
                                  btemp 0064                            i2___ftadd@f1 0009  
                          i2___ftadd@f2 000C                                    prodh 000FF4  
                                  prodl 000FF3                                    start 000E  
                         __CFG_IESO$OFF 000000                 __size_of_EEPROM_readLog 024C  
                         viewLogs@entry 01A4                           __CFG_MCLRE$ON 000000  
                           mainMenu@msg 0260                            ___param_bank 000000  
                           mainMenu@run 0299                        __end_of_LCD_LEFT FBA5  
                                 ??_tic 0080                         ??_printErrorLCD 0097  
                 I2C_Master_Read@ackBit 0081                        ?_I2C_Master_Init 008D  
                      ?_I2C_Master_Read 0001                        ?_I2C_Master_Wait 0001  
                      ?_I2C_Master_Stop 0001                    __end_of_EEPROM_write 3E2E  
                       __end_of___aldiv 3362                                   ?_main 0001  
                                 _EEADR 000FA9                         __end_of___ftadd 2EEA  
                                 STR_10 FD62                                   STR_11 FF89  
                                 STR_12 FFD1                                   STR_20 FE01  
                                 STR_21 FFDF                                   STR_13 FF48  
                                 STR_30 FE01                                   STR_14 FF59  
                                 STR_22 FF03                                   STR_15 FF15  
                                 STR_31 FE9A                                   STR_23 FE51  
                                 STR_24 FFA7                                   STR_32 FF6A  
                                 STR_16 FEDB                                   STR_17 FEDB  
                                 STR_33 FFB5                                   STR_25 FDC7  
                                 STR_34 FFEB                                   STR_18 FE83  
                                 STR_26 FE1C                                   STR_35 FFF7  
                                 STR_27 FE6A                                   STR_19 FE37  
                                 STR_28 FEC6                                   STR_29 FDA7  
                                 ?_tock 0080                         __end_of___lldiv 3A70  
                       __end_of___lwdiv 3C0A                         __end_of___lwmod 3D26  
                                 i2l186 353E                                   i2l187 3554  
                                 i2l188 3552                                   i2l801 3476  
                                 i2l721 20B0                                   i2l713 202C  
                                 i2l802 347C                                   i2l730 2358  
                                 i2l811 34BA                                   i2l803 3488  
                                 i2l731 212E                                   i2l723 20E6  
                                 i2l715 206A                                   i2l813 34C6  
                                 i2l805 3492                                   i2l725 20EE  
                                 i2l717 2072                                   i2l742 223A  
                                 i2l734 2174                                   i2l807 349E  
                                 i2l727 2124                                   i2l719 20A8  
                                 i2l808 34A4                                   i2l744 2280  
                                 i2l809 34B0                                   i2l737 21B4  
                                 i2l754 2352                                   i2l755 2378  
                                 i2l747 22C0                                   i2l739 21FA  
                                 i2l749 2310                                   i2l790 3438  
                                 i2l792 3442                                   i2l794 344E  
                                 i2l788 34CC                                   i2l796 3454  
                                 i2l797 3460                                   i2l789 342C  
                                 i2l799 346A                          i2_motorControl 3428  
                                 _TMR0H 000FD7                                   _TMR0L 000FD6  
                                 _PORTB 000F81                         __end_of__doprnt 0E78  
                                 _TRISA 000F92                                   _TRISB 000F93  
                                 _TRISC 000F94                                   _TRISD 000F95  
                                 _TRISE 000F96                    printStringLCD@string 0086  
                   EEPROM_readLog@line0 0089                     EEPROM_readLog@line1 008F  
                   EEPROM_readLog@line2 008A                     EEPROM_readLog@line3 008B  
                   EEPROM_readLog@line4 008C                     EEPROM_readLog@line5 0090  
                   EEPROM_readLog@line6 008D                     EEPROM_readLog@line7 008E  
                       mainMenu@pressed 0294                           __CFG_PWRT$OFF 000000  
                         __CFG_WRT0$OFF 000000                           __CFG_WRT1$OFF 000000  
                         __CFG_WRT2$OFF 000000                           __CFG_WRT3$OFF 000000  
                       __end_of_lcdInst 3F7A                          __CFG_EBTR0$OFF 000000  
                        __CFG_FCMEN$OFF 000000                          __CFG_EBTR1$OFF 000000  
                        __CFG_EBTR2$OFF 000000                          __CFG_EBTR3$OFF 000000  
                         __CFG_WRTB$OFF 000000                           __CFG_WRTC$OFF 000000  
                         __CFG_WRTD$OFF 000000                         __end_of_errMsgs FC8A  
                       __end_of_initLCD 3C56                          __CFG_EBTRB$OFF 000000  
                       __end_of_dpowers FB9E                         __end_of_isdigit 3F0C  
                         ___ftpack@sign 0084                                   _putch 3F4A  
                                 pclath 000FFA                                   tablat 000FF5  
                     _LCDinterruptState 0050                                   plusw1 000FE3  
                                 plusw2 000FDB                   ?_RTC_getOperatingTime 0086  
                                 status 000FD8             I2C_Master_Read@receivedByte 0082  
                                 wtemp6 0065                         __end_of_sprintf 3CE2  
                    __size_ofi2___ftadd 01AC                    __size_of_EEPROM_read 0016  
                      _timeSinceLastTic 005D                         __initialization 31C6  
                          mainMenu@time 0280                            __end_of_main 3654  
                          __end_of_tock 3FEA                       ?_lcd_shift_cursor 0083  
                        __CFG_OSC$HSPLL 000000                             ?i2___ftpack 0001  
                __end_ofi2_motorControl 34E8                       __end_of_LCD_RIGHT FBA6  
                                ??_main 00D4                                  ??_tock 0083  
                    ??_lcd_shift_cursor 0084                           __activetblptr 000003  
                        packaging@F3231 01ED                          packaging@F3227 01EF  
                        packaging@F3229 02A6                       ?_I2C_Master_Start 0001  
                   EEPROM_write@address 0080                       ?_I2C_Master_Write 0081  
                             I2C_Send@i 0089                      ??_I2C_Master_Start 0081  
                                _ADCON0 000FC2                                  _ADCON1 000FC1  
                    ??_I2C_Master_Write 0083                                  _EEADRH 000FAA  
                                _EEDATA 000FA8                                  _EECON2 000FA7  
           __size_of_RTC_startOperation 0084                                  ?_putch 0001  
                      __end_of___ftpack 3704                                  _INT1IF 007F80  
                                i2l1213 2F66                                  i2l1223 2FC2  
                                i2l1232 3000                                  i2l1224 2FB8  
                                i2l1233 2FF6                                  i2l1209 2F3C  
                                i2l1218 2FCC                                  i2l1235 3024  
                                i2l1236 3040                                  i2l1181 3760  
                                i2l1237 3070                                  i2l1182 374A  
                                i2l1184 3788                                  i2l1185 377E  
                                i2l1178 372C                                  i2l1179 3722  
                                i2l5336 21B4                                  i2l5356 223A  
                                i2l5376 22C0            __size_of_EEPROM_logOperation 0286  
                                u624_41 2EFA                                  u625_41 2F0E  
                         inputEntry@msg 0100                                  _TMR0IE 007F95  
                         inputEntry@sum 0145                                  _SSPADD 000FC8  
                        packaging@instr 0174                                  _SSPBUF 000FC9  
                  EEPROM_readLog@logNum 0082                        __end_of_clearing 1352  
                        __CFG_XINST$OFF 000000                                  ___ftge 3852  
                      __end_of_mainMenu 17FC                               ??___aldiv 0088  
                          RTC_getTime@i 0085                         motorControl@dir 0080  
                                ___wmul 3E58                               ??___ftadd 008E  
                        __CFG_STVREN$ON 000000                        __end_of_nanoAddr FBA4  
                             ??___lldiv 0088                               ??___lwdiv 0084  
                             ??___lwmod 008B                               ??__doprnt 0092  
                                _params 01B7                                  clear_0 326C  
                                clear_1 3278                                  clear_2 3284  
                                _extras 00DD                           inverseDir@dir 0001  
                          __doprnt@flag 009D                        ??_printStringLCD 0088  
                             ??_lcdInst 0082                                  _printf 3D64  
                       ?i2_motorControl 0002                        __end_of_tmr0_ISR 237A  
                          __doprnt@prec 0096                        __end_of_tmr0Init 3EEA  
                                _strcpy 3D9C                               ??_initLCD 0083  
                       _currentMotorDir 0059                    _assemblyStepEncoding FB9E  
                          __pdataCOMRAM 0051                               ??_isdigit 0080  
                             ?_I2C_Send 0083                       __end_ofi2___ftadd 3096  
                        i2___ftadd@exp1 0014                          i2___ftadd@exp2 0013  
                        i2___ftadd@sign 0012                            __mediumconst FB72  
                      __end_of_viewLogs 2D3C                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                             ??_sprintf 00AD                    __end_of_LCDMenuIcons FB94  
                ??_RTC_getOperatingTime 0088                    clearing@debounceTime 00A4  
                            __accesstop 0080                 __end_of__initialization 328A  
                       __CFG_PBADEN$OFF 000000                              ___ftadd@f1 0088  
                            ___ftadd@f2 008B                     __size_ofi2___ftpack 00AE  
                            ___ftge@ff1 0094                              ___ftge@ff2 0097  
                     _motorControlTimer 01D1                           ___rparam_used 000001  
                        i2___ftpack@arg 0001                          _EEPROM_readLog 28C6  
                        i2___ftpack@exp 0004              packageCompartment@currTime 00C2  
                        __pcstackCOMRAM 0001                   __size_of_EEPROM_write 002C  
                          __pidataBANK0 4012                            __pidataBANK1 3F2E  
                          __pidataBANK2 3EA6                            __pidataBANK3 3AEC  
                       viewLogs@pressed 01A6                         viewLogs@success 01A0  
            __end_of_packageCompartment 1BE8                           __end_of_putch 3F62  
                          ?_RTC_getTime 0083                        ??_lcd_set_cursor 0087  
                    __size_of_lcdNibble 0084                              ??_I2C_Send 0085  
                           inputEntry@i 0155                            packaging@msg 0100  
                          packaging@set 0180                      __size_of_hibernate 003E  
                        _packaging$2365 0178                          _packaging$2366 017A  
                        _packaging$2367 017C                          _packaging$2368 017E  
                            __doprnt@ap 0090                              __doprnt@cp 009B  
                            __doprnt@pb 008C                                 ??_putch 0082  
                            __pbssBANK0 00D5                              __pbssBANK1 01B7  
                    __size_of_packaging 03E2                            _EEPROM_write 3E02  
                   mainMenu@needToPrint 028E                  __end_of_EEPROM_readLog 2B12  
                     ?_interruptHandler 0001                      ??_interruptHandler 0022  
                   _inputEntryQuestions FC8A                                 ?___ftge 0094  
                               ?___wmul 0080                               ?___ftpack 0080  
                               ?_printf 00A1                            I2C_Send@data 0083  
                               ?_strcpy 0086                          inputEntry@done 013B  
                             ?_clearing 0001                          inputEntry@numB 0147  
                 EEPROM_readLog@address 0091                          inputEntry@numN 0149  
                        inputEntry@numS 014B                          inputEntry@numW 014D  
                               _SSPCON1 000FC6                                 _SSPCON2 000FC5  
                               _SSPSTAT 000FC7                               ?_mainMenu 0001  
              __size_of_resetMotorTimer 0014                      timer@operatingTime 0060  
                       ?_EEPROM_readLog 0082                               ?_tmr0_ISR 0001  
                     __end_of_lcdNibble 39EC                               ?_tmr0Init 0001  
                      EEPROM_write@data 0082                                 __Hparam 0000  
                               __Lparam 0000                       __end_of_hibernate 3D64  
                     mainMenu@summaries 0200                               ?_viewLogs 0001  
                               ___aldiv 3294                         __size_of___ftge 0092  
                               ___ftadd 2D3C                                 ___lldiv 39EC  
                       __size_of___wmul 0028                                 ___lwdiv 3BB6  
                               ___lwmod 3CE2                                 __doprnt 0766  
               RTC_getOperatingTime@res 0091                           ?_motorControl 0080  
                   _EEPROM_logOperation 2640                                 __pcinit 31C6  
                          ??i2___ftpack 0006                mainMenu@operationMinutes 0292  
              mainMenu@operationSeconds 0290                              ??___ftpack 0085  
                               __ramtop 1000                                 _endTime 0034  
                 __end_of_printErrorLCD 3EA6                                 _lcdInst 3F62  
                     __end_of_packaging 1FCA                                 __ptext0 35A0  
                               __ptext1 3EC8                                 __ptext2 1352  
                               __ptext3 2B12                                 __ptext4 28C6  
                               __ptext5 3F7A                                 __ptext6 1BE8  
                               __ptext7 3C9E                                 __ptext8 3D64  
                               __ptext9 0766                         __size_of_printf 0038  
                             _T0CONbits 000FD5                                 _errMsgs FBAA  
                       __size_of_strcpy 0034                                 _initLCD 3C0A  
                               _dpowers FB94              printStringLCD@newlineIndex 008F  
                               _isdigit 3EEA                            __size_of_tic 000E  
                      ___aldiv@dividend 0080                               _LCD_RIGHT FBA5  
                            _inputEntry 0012                __size_of_I2C_Master_Init 0060  
              __size_of_I2C_Master_Read 002A                              ??_clearing 009D  
              __size_of_I2C_Master_Wait 0014                              _inverseDir 3FCC  
              __size_of_I2C_Master_Stop 0008                printStringLCD@spaceIndex 008D  
                       printStringLCD@i 0093                         printStringLCD@j 008B  
                               _sprintf 3C9E                           __doprnt@width 009E  
                        __pintcode_body 34E8               __size_of_lcd_shift_cursor 0022  
                  end_of_initialization 328A                              ??_mainMenu 00CB  
                  ?_EEPROM_logOperation 0083                   __end_of_LCD_SIZE_HORZ FBA8  
                 __end_of_LCD_SIZE_VERT FBA7                inputEntry@fastenerString 0118  
                               int_func 34E8                           ??_EEPROM_read 0082  
                    __end_ofi2___ftpack 37B2                              ??_tmr0_ISR 0015  
                            ??_tmr0Init 0080               __size_of_I2C_Master_Start 0008  
             __size_of_I2C_Master_Write 000A                         ___lldiv@divisor 0084  
                       ___lldiv@counter 008C                              _pollKeypad 3DD0  
                packageCompartment@numB 00B2                  packageCompartment@numN 00B4  
                packageCompartment@numS 00B6                  packageCompartment@numW 00B8  
                               printf@f 00A1                        ??i2_motorControl 0003  
                      ___aldiv@quotient 008A                                 postdec1 000FE5  
                               postdec2 000FDD                              ??_viewLogs 00B3  
                               postinc0 000FEE                                 postinc2 000FDE  
                        ??_motorControl 0081               inputEntry@doneCompartment 0143  
                          _LCDMenuIcons FB84                           _longTolerance 0055  
                             _PORTAbits 000F80                               _PORTBbits 000F81  
                  __size_of_RTC_getTime 007C                               _TRISCbits 000F94  
            __end_of_RTC_startOperation 3968                       __size_of_I2C_Send 00A0  
                             i2___ftadd 2EEA            inputEntry@compartmentsToFill 013A  
                 ??_EEPROM_logOperation 0085                             viewLogs@msg 0180  
                           viewLogs@run 01AA                     mainMenu@pressed_843 0296  
             lcd_shift_cursor@direction 0083                     i2motorControl@motor 0003  
                       i2___ftpack@sign 0005                       ??_resetMotorTimer 0001  
                   __end_of_EEPROM_read 3F90                          __end_of___ftge 38E4  
                        __end_of___wmul 3E80                           __pidataCOMRAM 3FB8  
                    pollKeypad@keypress 0080                          __end_of_printf 3D9C  
                   packageCompartment@b 00A5                     packageCompartment@n 009D  
                   packageCompartment@s 009E                     packageCompartment@w 009F  
                        __end_of_strcpy 3DD0                     start_initialization 31C6  
                           ?_inputEntry 0001                             ?_inverseDir 0001  
                    _packageCompartment 17FC                             __end_of_tic 3FF8  
                            ?i2___ftadd 0009                    inputEntry@numPressed 0151  
                     ??_I2C_Master_Init 0091                       ??_I2C_Master_Read 0081  
                   ?_packageCompartment 009D                       ??_I2C_Master_Wait 0080  
                     ??_I2C_Master_Stop 0081           __size_of_RTC_getOperatingTime 0130  
                         packaging@msg2 0154                           packaging@msg3 0122  
                         packaging@mult 0182                 packaging@compartmentNum 0184  
                           ?_pollKeypad 0001                           clearing@F3241 00E7  
                              ??___ftge 009A                                ??___wmul 0084  
                           __doprnt@len 0097                             __doprnt@val 0099  
              I2C_Master_Init@clockFreq 008D                             __pdataBANK0 00E5  
                           __pdataBANK1 01D5                             __pdataBANK2 02A6  
                           __pdataBANK3 0300                        __CFG_LPT1OSC$OFF 000000  
                  ??_packageCompartment 00A0                                ??_printf 00A5  
             __size_of_interruptHandler 3598                                ??_strcpy 008A  
                         clearing@instr 009F                       __size_of___ftpack 00B0  
                           __pbssCOMRAM 0034                        hibernate@pressed 0099  
                         __pcstackBANK0 0080                           __pcstackBANK1 0100  
                         __pcstackBANK2 0200                            _isdigit$1941 0081  
                RTC_startOperation@time 0088                        ??_EEPROM_readLog 0086  
              inputEntry@inputEntryStep 014F                        _lcd_shift_cursor 3F0C  
               __size_of_printStringLCD 02C6                       __size_of_clearing 04DA  
                       RTC_getTime@time 0083                EEPROM_logOperation@line0 0089  
              EEPROM_logOperation@line1 008A                EEPROM_logOperation@line2 008B  
              EEPROM_logOperation@line3 008C                EEPROM_logOperation@line4 008D  
              EEPROM_logOperation@line5 008E                EEPROM_logOperation@line6 008F  
              EEPROM_logOperation@line7 0090                    __end_of_motorControl 3428  
                             __doprnt@c 00A0                               __doprnt@f 008E  
                     __size_of_mainMenu 04AA                             _EEPROM_read 3F7A  
                      _I2C_Master_Start 400A                       _interruptKeypress 0063  
                      _I2C_Master_Write 3FF8                        ___lwdiv@dividend 0080  
                     __CFG_CCP2MX$PORTC 000000                       __size_of_tmr0_ISR 03B0  
                     __size_of_tmr0Init 0022                     __size_of_inputEntry 0754  
                             __pintcode 0008                           __pmediumconst FB72  
                             _lcdNibble 3968                                ?___aldiv 0080  
                   __size_of_inverseDir 0010                                ?___ftadd 0088  
                              ?___lldiv 0080                                ?___lwdiv 0080  
                              ?___lwmod 0087                                ?__doprnt 008C  
                     __size_of_viewLogs 022A                               _hibernate 3D26  
                              ?_lcdInst 0001                               _dispensed 00D5  
                              ?_initLCD 0001                                ?_isdigit 0001  
                              _I2C_Send 37B2                               _packaging 1BE8  
                   __size_of_pollKeypad 0032                        ___lwdiv@quotient 0085  
                           ??i2___ftadd 000F                                ?_sprintf 00A1  
                        __size_of_putch 0018                         inputEntry@F3225 00E5  
                       inputEntry@F3246 01D5                     __end_of_keypadChars FB84  
                              _LCD_LEFT FBA4                 __size_of_lcd_set_cursor 0048  
                       ___aldiv@divisor 0084                         ___aldiv@counter 0088  
                        _fastenerMatrix FD0E                          ___wmul@product 0084  
                              _LATBbits 000F8A                                _LATCbits 000F8B  
            inputEntry@compartmentLabel 0138                                _LATDbits 000F8C  
                              _LATEbits 000F8D                           _operatingTime 0048  
                       lcd_set_cursor@i 0088                         lcd_set_cursor@x 0089  
                       lcd_set_cursor@y 0086                                i2u510_40 3714  
                              i2u255_40 3FD8                                i2u514_40 3792  
                              _PIR2bits 000FA1                               _operating 004F  
                              i2u631_40 2F58                                i2u641_40 3008  
                              i2u634_40 2F96                                i2u628_40 2F2E  
                              i2u638_40 2FD4                         inputEntry@found 013D  
                      __CFG_WDTPS$32768 000000                              ?_lcdNibble 0001  
              inputEntry@compartmentNum 0153                               _timerInit 004E  
           __end_of_inputEntryQuestions FD0E                              ?_hibernate 0001  
                     ___wmul@multiplier 0080                               _startTime 003A  
                         lcdNibble@data 0081              EEPROM_logOperation@address 0091  
                         lcdNibble@temp 0080                              ?_packaging 0001  
                             mainMenu@i 0297                          _LCD_HORZ_LIMIT FBA9  
                   inputEntry@setIsGood 013F                               copy_data0 31DA  
                             copy_data1 31FA                               copy_data2 321A  
                             copy_data3 323A                               copy_data4 325A  
                __end_of_fastenerMatrix FD62                         _resetMotorTimer 3FA4  
               inputEntry@doneMultiples 0141                   mainMenu@savedToEEPROM 0287  
                    mainMenu@startPress 0288                  __size_of_printErrorLCD 0026  
                            _EECON1bits 000FA6                      _RTC_startOperation 38E4  
                              __Hrparam 0000                                __Lrparam 0000  
                    __CFG_BOREN$SBORDIS 000000                                _fSLookup 0300  
                   ?_RTC_startOperation 0001                        __size_of___aldiv 00CE  
                       I2C_Send@address 0088                        __size_of___ftadd 01AE  
                      __size_of___lldiv 0084                        __size_of___lwdiv 0054  
                      __size_of___lwmod 0044                           ??_RTC_getTime 0085  
                              ___ftpack 3654                        __size_of__doprnt 0712  
                      _interruptHandler 0008                 EEPROM_logOperation@data 0083  
                      __size_of_lcdInst 0018                       motorControl@motor 0081  
                           _currentMode 004C                         _I2C_Master_Init 3B56  
                       _I2C_Master_Read 3E2E                        __size_of_initLCD 004C  
                       _I2C_Master_Wait 3F90             __end_of_EEPROM_logOperation 28C6  
                        _shortTolerance 0051                RTC_getOperatingTime@time 008A  
                       _I2C_Master_Stop 4002                  __end_of_LCD_HORZ_LIMIT FBAA  
                          ??_inputEntry 0099                        __size_of_isdigit 0022  
                           _keypadChars FB73                            ??_inverseDir 0001  
                       ___lwdiv@divisor 0082                   __size_of_motorControl 00C6  
                              _clearing 0E78                         ___lwdiv@counter 0084  
                              __ptext10 3EEA                                __ptext11 3CE2  
                              __ptext20 237A                                __ptext12 3BB6  
                              __ptext21 3F4A                                __ptext13 17FC  
                              __ptext30 37B2                                __ptext22 3DD0  
                              __ptext14 0012                                __ptext31 3294  
                              __ptext23 0E78                                __ptext15 3D9C  
                              __ptext40 3F90                                __ptext32 38E4  
                              __ptext24 3FDC                                __ptext16 3E80  
                              __ptext41 2640                                __ptext33 3096  
                              __ptext25 3FEA                                __ptext17 3C56  
                              __ptext50 3428                                __ptext42 3E02  
                              __ptext34 3E58                                __ptext26 3362  
                              __ptext18 3F0C                                __ptext51 2EEA  
                              __ptext43 3C0A                                __ptext35 3A70  
                              __ptext27 3852                                __ptext19 3D26  
                              __ptext52 3704                                __ptext44 3F62  
                              __ptext36 3FF8                                __ptext28 2D3C  
                              __ptext53 3FA4                                __ptext45 3968  
                              __ptext37 4002                                __ptext29 3654  
                              __ptext54 3FCC                                __ptext46 3B56  
                              __ptext38 400A                                __ptext55 0000  
                              __ptext47 39EC                                __ptext39 3E2E  
                              __ptext49 1FCA                          _printStringLCD 237A  
                  ??_RTC_startOperation 0086                          _LCD_VERT_LIMIT FBA8  
                              _mainMenu 1352                        __size_of_sprintf 0044  
                              _nanoAddr FBA3                              strcpy@from 0088  
                         ?_EEPROM_write 0080                           __size_of_main 00B4  
                         __size_of_tock 000E                                _tmr0_ISR 1FCA  
                              _tmr0Init 3EC8                            ??_pollKeypad 0080  
                           ??_lcdNibble 0080                                _viewLogs 2B12  
                    __end_of_inputEntry 0766                                int$flags 0064  
                    __end_of_inverseDir 3FDC                __end_of_lcd_shift_cursor 3F2E  
                             viewLogs@i 01A8                               viewLogs@j 01A2  
                     i2motorControl@dir 0002                             ??_hibernate 0095  
          __end_of_RTC_getOperatingTime 31C6                            _motorControl 3362  
           I2C_Master_Write@byteToWrite 0081                           _printErrorLCD 3E80  
                     lcd_shift_cursor@n 0085                               putch@data 0082  
              __end_of_I2C_Master_Start 4012                __end_of_I2C_Master_Write 4002  
                            _INTCONbits 000FF2                 __end_of_resetMotorTimer 3FB8  
               __size_ofi2_motorControl 00C0                             ??_packaging 00C5  
                __end_of_printStringLCD 2640                  __end_of_LCD_VERT_LIMIT FBA9  
                   __end_of_RTC_getTime 3AEC          printStringLCD@newlineCharIndex 0091  
                              isdigit@c 0082                      __end_of_pollKeypad 3E02  
                              intlevel2 0000                          _lcd_set_cursor 3C56  
                             sprintf@ap 00AD                               sprintf@pb 00AF  
                             sprintf@wh 00A1                 packageCompartment@F3223 00E9  
                        ??_EEPROM_write 0083                           _LCD_SIZE_HORZ FBA7  
                      ___lwmod@dividend 0087                           _LCD_SIZE_VERT FBA6  
                      ___lldiv@dividend 0080                            ?_EEPROM_read 0080  
            tmr0_ISR@motorControlTimerB 001A              tmr0_ISR@motorControlTimerN 001C  
            tmr0_ISR@motorControlTimerS 001E              tmr0_ISR@motorControlTimerW 0020  
                 mainMenu@operationTime 028A                 packageCompartment@doneB 00BA  
               packageCompartment@doneN 00BC                 packageCompartment@doneS 00BE  
               packageCompartment@doneW 00C0                 packageCompartment@instr 00A3  
               packageCompartment@timeB 00A6                 packageCompartment@timeN 00A9  
               packageCompartment@timeS 00AC                 packageCompartment@timeW 00AF  
                              printf@ap 00A5                                printf@pb 00A7  
               __end_of_I2C_Master_Init 3BB6                 __end_of_I2C_Master_Read 3E58  
               __end_of_I2C_Master_Wait 3FA4                 __end_of_I2C_Master_Stop 400A  
                           lcdInst@data 0082                       inputEntry@pressed 0157  
                        ?_printErrorLCD 0095             __size_of_packageCompartment 03EC  
                              sprintf@f 00A3                        ___lldiv@quotient 0088  
                       ___lwmod@divisor 0089                                strcpy@cp 008A  
                              strcpy@to 0086                         ___lwmod@counter 008B  
                          ___aldiv@sign 0089                         ?_printStringLCD 0086  
                           _SSPCON1bits 000FC6                             _SSPCON2bits 000FC5  
                __end_of_lcd_set_cursor 3C9E                        clearing@currTime 00A7  
                    packaging@instr_324 0176                lcd_shift_cursor@numChars 0084  
                      clearing@spinTime 00A1  RTC_getOperatingTime@operatingTimeLocal 0093  
