

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Mar 31 15:56:17 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    69                           	psect	text48,global,reloc=2,class=CODE,delta=1
    70                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    71                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    72  0000                     
    73                           ; Version 1.45
    74                           ; Generated 16/11/2017 GMT
    75                           ; 
    76                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    77                           ; All rights reserved.
    78                           ; 
    79                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    80                           ; 
    81                           ; Redistribution and use in source and binary forms, with or without modification, are
    82                           ; permitted provided that the following conditions are met:
    83                           ; 
    84                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    85                           ;        conditions and the following disclaimer.
    86                           ; 
    87                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    88                           ;        of conditions and the following disclaimer in the documentation and/or other
    89                           ;        materials provided with the distribution.
    90                           ; 
    91                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    92                           ;        software without specific prior written permission.
    93                           ; 
    94                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    95                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    96                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    97                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    98                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    99                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   100                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   101                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   102                           ; 
   103                           ; 
   104                           ; Code-generator required, PIC18F4620 Definitions
   105                           ; 
   106                           ; SFR Addresses
   107  0000                     
   108                           	psect	idataCOMRAM
   109  0032D6                     __pidataCOMRAM:
   110                           	opt stack 0
   111                           
   112                           ;initializer for _shortTolerance
   113  0032D6  0012               	dw	18
   114  0032D8  0000               	dw	0
   115                           
   116                           ;initializer for _longTolerance
   117  0032DA  003C               	dw	60
   118  0032DC  0000               	dw	0
   119                           
   120                           ;initializer for _currentMotorDir
   121  0032DE  02                 	db	2
   122  0032DF  02                 	db	2
   123  0032E0  02                 	db	2
   124  0032E1  02                 	db	2
   125                           
   126                           ;initializer for _timeSinceLastTic
   127  0032E2  00                 	db	0
   128  0032E3  80                 	db	128
   129  0032E4  BF                 	db	191
   130                           
   131                           ;initializer for timer@operatingTime
   132  0032E5  00                 	db	0
   133  0032E6  80                 	db	128
   134  0032E7  BF                 	db	191
   135                           
   136                           ;initializer for inputEntry@F3189
   137  0032E8  43                 	db	67
   138  0032E9  30                 	db	48
   139                           
   140                           ;initializer for clearing@F3240
   141  0032EA  03                 	db	3
   142  0032EB  00                 	db	0
   143                           
   144                           ;initializer for packageCompartment@F3222
   145  0032EC  02                 	db	2
   146  0032ED  00                 	db	0
   147                           
   148                           	psect	idataBANK1
   149  0030D8                     __pidataBANK1:
   150                           	opt stack 0
   151                           
   152                           ;initializer for packaging@F3228
   153  0030D8  01                 	db	1
   154  0030D9  53                 	db	83
   155  0030DA  74                 	db	116
   156  0030DB  61                 	db	97
   157  0030DC  72                 	db	114
   158  0030DD  74                 	db	116
   159  0030DE  65                 	db	101
   160  0030DF  64                 	db	100
   161  0030E0  20                 	db	32
   162  0030E1  70                 	db	112
   163  0030E2  61                 	db	97
   164  0030E3  63                 	db	99
   165  0030E4  6B                 	db	107
   166  0030E5  61                 	db	97
   167  0030E6  67                 	db	103
   168  0030E7  69                 	db	105
   169  0030E8  6E                 	db	110
   170  0030E9  67                 	db	103
   171  0030EA  20                 	db	32
   172  0030EB  63                 	db	99
   173  0030EC  6F                 	db	111
   174  0030ED  6D                 	db	109
   175  0030EE  70                 	db	112
   176  0030EF  61                 	db	97
   177  0030F0  72                 	db	114
   178  0030F1  74                 	db	116
   179  0030F2  6D                 	db	109
   180  0030F3  65                 	db	101
   181  0030F4  6E                 	db	110
   182  0030F5  74                 	db	116
   183  0030F6  20                 	db	32
   184  0030F7  78                 	db	120
   185  0030F8  00                 	db	0
   186  0030F9  00                 	db	0
   187                           
   188                           ;initializer for inputEntry@F3210
   189  0030FA  01                 	db	1
   190  0030FB  53                 	db	83
   191  0030FC  74                 	db	116
   192  0030FD  61                 	db	97
   193  0030FE  72                 	db	114
   194  0030FF  74                 	db	116
   195  003100  65                 	db	101
   196  003101  64                 	db	100
   197  003102  20                 	db	32
   198  003103  63                 	db	99
   199  003104  6F                 	db	111
   200  003105  6D                 	db	109
   201  003106  70                 	db	112
   202  003107  61                 	db	97
   203  003108  72                 	db	114
   204  003109  74                 	db	116
   205  00310A  6D                 	db	109
   206  00310B  65                 	db	101
   207  00310C  6E                 	db	110
   208  00310D  74                 	db	116
   209  00310E  20                 	db	32
   210  00310F  78                 	db	120
   211  003110  00                 	db	0
   212  003111  00                 	db	0
   213                           
   214                           ;initializer for packaging@F3230
   215  003112  02                 	db	2
   216  003113  00                 	db	0
   217                           
   218                           ;initializer for packaging@F3226
   219  003114  08                 	db	8
   220  003115  00                 	db	0
   221                           
   222                           	psect	idataBANK2
   223  002ECE                     __pidataBANK2:
   224                           	opt stack 0
   225                           
   226                           ;initializer for _fSLookup
   227  002ECE  4E                 	db	78
   228  002ECF  4F                 	db	79
   229  002ED0  4E                 	db	78
   230  002ED1  45                 	db	69
   231  002ED2  00                 	db	0
   232  002ED3  42                 	db	66
   233  002ED4  00                 	db	0
   234  002ED5  00                 	db	0
   235  002ED6  00                 	db	0
   236  002ED7  00                 	db	0
   237  002ED8  4E                 	db	78
   238  002ED9  00                 	db	0
   239  002EDA  00                 	db	0
   240  002EDB  00                 	db	0
   241  002EDC  00                 	db	0
   242  002EDD  53                 	db	83
   243  002EDE  00                 	db	0
   244  002EDF  00                 	db	0
   245  002EE0  00                 	db	0
   246  002EE1  00                 	db	0
   247  002EE2  57                 	db	87
   248  002EE3  00                 	db	0
   249  002EE4  00                 	db	0
   250  002EE5  00                 	db	0
   251  002EE6  00                 	db	0
   252  002EE7  42                 	db	66
   253  002EE8  4E                 	db	78
   254  002EE9  00                 	db	0
   255  002EEA  00                 	db	0
   256  002EEB  00                 	db	0
   257  002EEC  42                 	db	66
   258  002EED  53                 	db	83
   259  002EEE  00                 	db	0
   260  002EEF  00                 	db	0
   261  002EF0  00                 	db	0
   262  002EF1  42                 	db	66
   263  002EF2  57                 	db	87
   264  002EF3  00                 	db	0
   265  002EF4  00                 	db	0
   266  002EF5  00                 	db	0
   267  002EF6  42                 	db	66
   268  002EF7  42                 	db	66
   269  002EF8  4E                 	db	78
   270  002EF9  00                 	db	0
   271  002EFA  00                 	db	0
   272  002EFB  42                 	db	66
   273  002EFC  42                 	db	66
   274  002EFD  53                 	db	83
   275  002EFE  00                 	db	0
   276  002EFF  00                 	db	0
   277  002F00  42                 	db	66
   278  002F01  42                 	db	66
   279  002F02  57                 	db	87
   280  002F03  00                 	db	0
   281  002F04  00                 	db	0
   282  002F05  42                 	db	66
   283  002F06  4E                 	db	78
   284  002F07  57                 	db	87
   285  002F08  00                 	db	0
   286  002F09  00                 	db	0
   287  002F0A  42                 	db	66
   288  002F0B  53                 	db	83
   289  002F0C  57                 	db	87
   290  002F0D  00                 	db	0
   291  002F0E  00                 	db	0
   292  002F0F  42                 	db	66
   293  002F10  57                 	db	87
   294  002F11  57                 	db	87
   295  002F12  00                 	db	0
   296  002F13  00                 	db	0
   297  002F14  42                 	db	66
   298  002F15  4E                 	db	78
   299  002F16  4E                 	db	78
   300  002F17  57                 	db	87
   301  002F18  00                 	db	0
   302  002F19  42                 	db	66
   303  002F1A  53                 	db	83
   304  002F1B  57                 	db	87
   305  002F1C  57                 	db	87
   306  002F1D  00                 	db	0
   307  002F1E  42                 	db	66
   308  002F1F  42                 	db	66
   309  002F20  53                 	db	83
   310  002F21  57                 	db	87
   311  002F22  00                 	db	0
   312  002F23  42                 	db	66
   313  002F24  42                 	db	66
   314  002F25  4E                 	db	78
   315  002F26  57                 	db	87
   316  002F27  00                 	db	0
   317  002F28  42                 	db	66
   318  002F29  4E                 	db	78
   319  002F2A  4E                 	db	78
   320  002F2B  57                 	db	87
   321  002F2C  00                 	db	0
   322  002F2D  42                 	db	66
   323  002F2E  4E                 	db	78
   324  002F2F  4E                 	db	78
   325  002F30  4E                 	db	78
   326  002F31  00                 	db	0
   327  002F32  42                 	db	66
   328  002F33  57                 	db	87
   329  002F34  57                 	db	87
   330  002F35  57                 	db	87
   331  002F36  00                 	db	0
   332                           
   333                           	psect	mediumconst
   334  00FBF0                     __pmediumconst:
   335                           	opt stack 0
   336  00FBF0  00                 	db	0
   337  00FBF1                     _dpowers:
   338                           	opt stack 0
   339  00FBF1  0001               	dw	1
   340  00FBF3  0000               	dw	0
   341  00FBF5  000A               	dw	10
   342  00FBF7  0000               	dw	0
   343  00FBF9  0064               	dw	100
   344  00FBFB  0000               	dw	0
   345  00FBFD  03E8               	dw	1000
   346  00FBFF  0000               	dw	0
   347  00FC01  2710               	dw	10000
   348  00FC03  0000               	dw	0
   349  00FC05  86A0               	dw	34464
   350  00FC07  0001               	dw	1
   351  00FC09  4240               	dw	16960
   352  00FC0B  000F               	dw	15
   353  00FC0D  9680               	dw	38528
   354  00FC0F  0098               	dw	152
   355  00FC11  E100               	dw	57600
   356  00FC13  05F5               	dw	1525
   357  00FC15  CA00               	dw	51712
   358  00FC17  3B9A               	dw	15258
   359  00FC19                     __end_of_dpowers:
   360                           	opt stack 0
   361  00FC19                     _keypadChars:
   362                           	opt stack 0
   363  00FC19  31                 	db	49
   364  00FC1A  32                 	db	50
   365  00FC1B  33                 	db	51
   366  00FC1C  42                 	db	66
   367  00FC1D  34                 	db	52
   368  00FC1E  35                 	db	53
   369  00FC1F  36                 	db	54
   370  00FC20  4E                 	db	78
   371  00FC21  37                 	db	55
   372  00FC22  38                 	db	56
   373  00FC23  39                 	db	57
   374  00FC24  53                 	db	83
   375  00FC25  2A                 	db	42
   376  00FC26  30                 	db	48
   377  00FC27  23                 	db	35
   378  00FC28  57                 	db	87
   379  00FC29  00                 	db	0
   380  00FC2A                     __end_of_keypadChars:
   381                           	opt stack 0
   382  00FC2A                     _LCDMenuIcons:
   383                           	opt stack 0
   384  00FC2A  2A                 	db	42
   385  00FC2B  3C                 	db	60
   386  00FC2C  2D                 	db	45
   387  00FC2D  20                 	db	32
   388  00FC2E  20                 	db	32
   389  00FC2F  20                 	db	32
   390  00FC30  28                 	db	40
   391  00FC31  20                 	db	32
   392  00FC32  2D                 	db	45
   393  00FC33  20                 	db	32
   394  00FC34  29                 	db	41
   395  00FC35  20                 	db	32
   396  00FC36  20                 	db	32
   397  00FC37  20                 	db	32
   398  00FC38  20                 	db	32
   399  00FC39  00                 	db	0
   400  00FC3A                     __end_of_LCDMenuIcons:
   401                           	opt stack 0
   402  00FC3A                     _assemblyStepEncoding:
   403                           	opt stack 0
   404  00FC3A  55                 	db	85
   405  00FC3B  5B                 	db	91
   406  00FC3C  77                 	db	119
   407  00FC3D  7F                 	db	127
   408  00FC3E  FF                 	db	255
   409  00FC3F                     __end_of_assemblyStepEncoding:
   410                           	opt stack 0
   411  00FC3F                     _nanoAddr:
   412                           	opt stack 0
   413  00FC3F  10                 	db	16
   414  00FC40                     __end_of_nanoAddr:
   415                           	opt stack 0
   416  00FC40                     _LCD_LEFT:
   417                           	opt stack 0
   418  00FC40  00                 	db	0
   419  00FC41                     __end_of_LCD_LEFT:
   420                           	opt stack 0
   421  00FC41                     _LCD_RIGHT:
   422                           	opt stack 0
   423  00FC41  01                 	db	1
   424  00FC42                     __end_of_LCD_RIGHT:
   425                           	opt stack 0
   426  00FC42                     _LCD_SIZE_VERT:
   427                           	opt stack 0
   428  00FC42  02                 	db	2
   429  00FC43                     __end_of_LCD_SIZE_VERT:
   430                           	opt stack 0
   431  00FC43                     _LCD_SIZE_HORZ:
   432                           	opt stack 0
   433  00FC43  10                 	db	16
   434  00FC44                     __end_of_LCD_SIZE_HORZ:
   435                           	opt stack 0
   436  00FC44                     _LCD_VERT_LIMIT:
   437                           	opt stack 0
   438  00FC44  02                 	db	2
   439  00FC45                     __end_of_LCD_VERT_LIMIT:
   440                           	opt stack 0
   441  00FC45                     _LCD_HORZ_LIMIT:
   442                           	opt stack 0
   443  00FC45  28                 	db	40
   444  00FC46                     __end_of_LCD_HORZ_LIMIT:
   445                           	opt stack 0
   446  00FC46                     _errMsgs:
   447                           	opt stack 0
   448  00FC46  49                 	db	73
   449  00FC47  6E                 	db	110
   450  00FC48  76                 	db	118
   451  00FC49  61                 	db	97
   452  00FC4A  6C                 	db	108
   453  00FC4B  69                 	db	105
   454  00FC4C  64                 	db	100
   455  00FC4D  20                 	db	32
   456  00FC4E  65                 	db	101
   457  00FC4F  6E                 	db	110
   458  00FC50  74                 	db	116
   459  00FC51  72                 	db	114
   460  00FC52  79                 	db	121
   461  00FC53  0A                 	db	10
   462  00FC54  50                 	db	80
   463  00FC55  6C                 	db	108
   464  00FC56  65                 	db	101
   465  00FC57  61                 	db	97
   466  00FC58  73                 	db	115
   467  00FC59  65                 	db	101
   468  00FC5A  20                 	db	32
   469  00FC5B  74                 	db	116
   470  00FC5C  72                 	db	114
   471  00FC5D  79                 	db	121
   472  00FC5E  20                 	db	32
   473  00FC5F  61                 	db	97
   474  00FC60  67                 	db	103
   475  00FC61  61                 	db	97
   476  00FC62  69                 	db	105
   477  00FC63  6E                 	db	110
   478  00FC64  00                 	db	0
   479  00FC65  00                 	db	0
   480  00FC66  54                 	db	84
   481  00FC67  6F                 	db	111
   482  00FC68  6F                 	db	111
   483  00FC69  20                 	db	32
   484  00FC6A  6D                 	db	109
   485  00FC6B  61                 	db	97
   486  00FC6C  6E                 	db	110
   487  00FC6D  79                 	db	121
   488  00FC6E  20                 	db	32
   489  00FC6F  66                 	db	102
   490  00FC70  61                 	db	97
   491  00FC71  73                 	db	115
   492  00FC72  74                 	db	116
   493  00FC73  65                 	db	101
   494  00FC74  6E                 	db	110
   495  00FC75  65                 	db	101
   496  00FC76  72                 	db	114
   497  00FC77  73                 	db	115
   498  00FC78  00                 	db	0
   499  00FC79  00                 	db	0
   500  00FC7A  00                 	db	0
   501  00FC7B  00                 	db	0
   502  00FC7C  00                 	db	0
   503  00FC7D  00                 	db	0
   504  00FC7E  00                 	db	0
   505  00FC7F  00                 	db	0
   506  00FC80  00                 	db	0
   507  00FC81  00                 	db	0
   508  00FC82  00                 	db	0
   509  00FC83  00                 	db	0
   510  00FC84  00                 	db	0
   511  00FC85  00                 	db	0
   512  00FC86  54                 	db	84
   513  00FC87  6F                 	db	111
   514  00FC88  6F                 	db	111
   515  00FC89  20                 	db	32
   516  00FC8A  6D                 	db	109
   517  00FC8B  61                 	db	97
   518  00FC8C  6E                 	db	110
   519  00FC8D  79                 	db	121
   520  00FC8E  20                 	db	32
   521  00FC8F  62                 	db	98
   522  00FC90  6F                 	db	111
   523  00FC91  6C                 	db	108
   524  00FC92  74                 	db	116
   525  00FC93  73                 	db	115
   526  00FC94  00                 	db	0
   527  00FC95  00                 	db	0
   528  00FC96  00                 	db	0
   529  00FC97  00                 	db	0
   530  00FC98  00                 	db	0
   531  00FC99  00                 	db	0
   532  00FC9A  00                 	db	0
   533  00FC9B  00                 	db	0
   534  00FC9C  00                 	db	0
   535  00FC9D  00                 	db	0
   536  00FC9E  00                 	db	0
   537  00FC9F  00                 	db	0
   538  00FCA0  00                 	db	0
   539  00FCA1  00                 	db	0
   540  00FCA2  00                 	db	0
   541  00FCA3  00                 	db	0
   542  00FCA4  00                 	db	0
   543  00FCA5  00                 	db	0
   544  00FCA6  54                 	db	84
   545  00FCA7  6F                 	db	111
   546  00FCA8  6F                 	db	111
   547  00FCA9  20                 	db	32
   548  00FCAA  6D                 	db	109
   549  00FCAB  61                 	db	97
   550  00FCAC  6E                 	db	110
   551  00FCAD  79                 	db	121
   552  00FCAE  20                 	db	32
   553  00FCAF  6E                 	db	110
   554  00FCB0  75                 	db	117
   555  00FCB1  74                 	db	116
   556  00FCB2  73                 	db	115
   557  00FCB3  00                 	db	0
   558  00FCB4  00                 	db	0
   559  00FCB5  00                 	db	0
   560  00FCB6  00                 	db	0
   561  00FCB7  00                 	db	0
   562  00FCB8  00                 	db	0
   563  00FCB9  00                 	db	0
   564  00FCBA  00                 	db	0
   565  00FCBB  00                 	db	0
   566  00FCBC  00                 	db	0
   567  00FCBD  00                 	db	0
   568  00FCBE  00                 	db	0
   569  00FCBF  00                 	db	0
   570  00FCC0  00                 	db	0
   571  00FCC1  00                 	db	0
   572  00FCC2  00                 	db	0
   573  00FCC3  00                 	db	0
   574  00FCC4  00                 	db	0
   575  00FCC5  00                 	db	0
   576  00FCC6  54                 	db	84
   577  00FCC7  6F                 	db	111
   578  00FCC8  6F                 	db	111
   579  00FCC9  20                 	db	32
   580  00FCCA  6D                 	db	109
   581  00FCCB  61                 	db	97
   582  00FCCC  6E                 	db	110
   583  00FCCD  79                 	db	121
   584  00FCCE  20                 	db	32
   585  00FCCF  77                 	db	119
   586  00FCD0  61                 	db	97
   587  00FCD1  73                 	db	115
   588  00FCD2  68                 	db	104
   589  00FCD3  65                 	db	101
   590  00FCD4  72                 	db	114
   591  00FCD5  73                 	db	115
   592  00FCD6  00                 	db	0
   593  00FCD7  00                 	db	0
   594  00FCD8  00                 	db	0
   595  00FCD9  00                 	db	0
   596  00FCDA  00                 	db	0
   597  00FCDB  00                 	db	0
   598  00FCDC  00                 	db	0
   599  00FCDD  00                 	db	0
   600  00FCDE  00                 	db	0
   601  00FCDF  00                 	db	0
   602  00FCE0  00                 	db	0
   603  00FCE1  00                 	db	0
   604  00FCE2  00                 	db	0
   605  00FCE3  00                 	db	0
   606  00FCE4  00                 	db	0
   607  00FCE5  00                 	db	0
   608  00FCE6  54                 	db	84
   609  00FCE7  6F                 	db	111
   610  00FCE8  6F                 	db	111
   611  00FCE9  20                 	db	32
   612  00FCEA  6D                 	db	109
   613  00FCEB  61                 	db	97
   614  00FCEC  6E                 	db	110
   615  00FCED  79                 	db	121
   616  00FCEE  20                 	db	32
   617  00FCEF  73                 	db	115
   618  00FCF0  70                 	db	112
   619  00FCF1  61                 	db	97
   620  00FCF2  63                 	db	99
   621  00FCF3  65                 	db	101
   622  00FCF4  72                 	db	114
   623  00FCF5  73                 	db	115
   624  00FCF6  00                 	db	0
   625  00FCF7  00                 	db	0
   626  00FCF8  00                 	db	0
   627  00FCF9  00                 	db	0
   628  00FCFA  00                 	db	0
   629  00FCFB  00                 	db	0
   630  00FCFC  00                 	db	0
   631  00FCFD  00                 	db	0
   632  00FCFE  00                 	db	0
   633  00FCFF  00                 	db	0
   634  00FD00  00                 	db	0
   635  00FD01  00                 	db	0
   636  00FD02  00                 	db	0
   637  00FD03  00                 	db	0
   638  00FD04  00                 	db	0
   639  00FD05  00                 	db	0
   640  00FD06  4E                 	db	78
   641  00FD07  6F                 	db	111
   642  00FD08  20                 	db	32
   643  00FD09  66                 	db	102
   644  00FD0A  61                 	db	97
   645  00FD0B  73                 	db	115
   646  00FD0C  74                 	db	116
   647  00FD0D  65                 	db	101
   648  00FD0E  6E                 	db	110
   649  00FD0F  65                 	db	101
   650  00FD10  72                 	db	114
   651  00FD11  73                 	db	115
   652  00FD12  20                 	db	32
   653  00FD13  73                 	db	115
   654  00FD14  65                 	db	101
   655  00FD15  6C                 	db	108
   656  00FD16  65                 	db	101
   657  00FD17  63                 	db	99
   658  00FD18  74                 	db	116
   659  00FD19  65                 	db	101
   660  00FD1A  64                 	db	100
   661  00FD1B  00                 	db	0
   662  00FD1C  00                 	db	0
   663  00FD1D  00                 	db	0
   664  00FD1E  00                 	db	0
   665  00FD1F  00                 	db	0
   666  00FD20  00                 	db	0
   667  00FD21  00                 	db	0
   668  00FD22  00                 	db	0
   669  00FD23  00                 	db	0
   670  00FD24  00                 	db	0
   671  00FD25  00                 	db	0
   672  00FD26                     __end_of_errMsgs:
   673                           	opt stack 0
   674  00FD26                     _inputEntryQuestions:
   675                           	opt stack 0
   676  00FD26  41                 	db	65
   677  00FD27  73                 	db	115
   678  00FD28  73                 	db	115
   679  00FD29  65                 	db	101
   680  00FD2A  6D                 	db	109
   681  00FD2B  62                 	db	98
   682  00FD2C  6C                 	db	108
   683  00FD2D  79                 	db	121
   684  00FD2E  20                 	db	32
   685  00FD2F  73                 	db	115
   686  00FD30  74                 	db	116
   687  00FD31  65                 	db	101
   688  00FD32  70                 	db	112
   689  00FD33  73                 	db	115
   690  00FD34  0A                 	db	10
   691  00FD35  2A                 	db	42
   692  00FD36  3C                 	db	60
   693  00FD37  2D                 	db	45
   694  00FD38  20                 	db	32
   695  00FD39  20                 	db	32
   696  00FD3A  28                 	db	40
   697  00FD3B  34                 	db	52
   698  00FD3C  2D                 	db	45
   699  00FD3D  38                 	db	56
   700  00FD3E  29                 	db	41
   701  00FD3F  20                 	db	32
   702  00FD40  20                 	db	32
   703  00FD41  20                 	db	32
   704  00FD42  20                 	db	32
   705  00FD43  20                 	db	32
   706  00FD44  00                 	db	0
   707  00FD45  00                 	db	0
   708  00FD46  00                 	db	0
   709  00FD47  46                 	db	70
   710  00FD48  61                 	db	97
   711  00FD49  73                 	db	115
   712  00FD4A  74                 	db	116
   713  00FD4B  65                 	db	101
   714  00FD4C  6E                 	db	110
   715  00FD4D  65                 	db	101
   716  00FD4E  72                 	db	114
   717  00FD4F  73                 	db	115
   718  00FD50  20                 	db	32
   719  00FD51  69                 	db	105
   720  00FD52  6E                 	db	110
   721  00FD53  20                 	db	32
   722  00FD54  43                 	db	67
   723  00FD55  78                 	db	120
   724  00FD56  0A                 	db	10
   725  00FD57  2A                 	db	42
   726  00FD58  3C                 	db	60
   727  00FD59  2D                 	db	45
   728  00FD5A  28                 	db	40
   729  00FD5B  42                 	db	66
   730  00FD5C  4E                 	db	78
   731  00FD5D  53                 	db	83
   732  00FD5E  57                 	db	87
   733  00FD5F  29                 	db	41
   734  00FD60  20                 	db	32
   735  00FD61  20                 	db	32
   736  00FD62  20                 	db	32
   737  00FD63  20                 	db	32
   738  00FD64  2D                 	db	45
   739  00FD65  3E                 	db	62
   740  00FD66  23                 	db	35
   741  00FD67  00                 	db	0
   742  00FD68  48                 	db	72
   743  00FD69  6F                 	db	111
   744  00FD6A  77                 	db	119
   745  00FD6B  20                 	db	32
   746  00FD6C  6D                 	db	109
   747  00FD6D  61                 	db	97
   748  00FD6E  6E                 	db	110
   749  00FD6F  79                 	db	121
   750  00FD70  20                 	db	32
   751  00FD71  73                 	db	115
   752  00FD72  65                 	db	101
   753  00FD73  74                 	db	116
   754  00FD74  73                 	db	115
   755  00FD75  3F                 	db	63
   756  00FD76  0A                 	db	10
   757  00FD77  2A                 	db	42
   758  00FD78  3C                 	db	60
   759  00FD79  2D                 	db	45
   760  00FD7A  20                 	db	32
   761  00FD7B  20                 	db	32
   762  00FD7C  28                 	db	40
   763  00FD7D  31                 	db	49
   764  00FD7E  2D                 	db	45
   765  00FD7F  34                 	db	52
   766  00FD80  29                 	db	41
   767  00FD81  20                 	db	32
   768  00FD82  20                 	db	32
   769  00FD83  20                 	db	32
   770  00FD84  20                 	db	32
   771  00FD85  20                 	db	32
   772  00FD86  00                 	db	0
   773  00FD87  00                 	db	0
   774  00FD88  00                 	db	0
   775  00FD89  43                 	db	67
   776  00FD8A  6F                 	db	111
   777  00FD8B  6E                 	db	110
   778  00FD8C  66                 	db	102
   779  00FD8D  69                 	db	105
   780  00FD8E  72                 	db	114
   781  00FD8F  6D                 	db	109
   782  00FD90  3F                 	db	63
   783  00FD91  0A                 	db	10
   784  00FD92  2A                 	db	42
   785  00FD93  3C                 	db	60
   786  00FD94  2D                 	db	45
   787  00FD95  20                 	db	32
   788  00FD96  20                 	db	32
   789  00FD97  28                 	db	40
   790  00FD98  41                 	db	65
   791  00FD99  3A                 	db	58
   792  00FD9A  59                 	db	89
   793  00FD9B  2F                 	db	47
   794  00FD9C  42                 	db	66
   795  00FD9D  3A                 	db	58
   796  00FD9E  4E                 	db	78
   797  00FD9F  29                 	db	41
   798  00FDA0  20                 	db	32
   799  00FDA1  00                 	db	0
   800  00FDA2  00                 	db	0
   801  00FDA3  00                 	db	0
   802  00FDA4  00                 	db	0
   803  00FDA5  00                 	db	0
   804  00FDA6  00                 	db	0
   805  00FDA7  00                 	db	0
   806  00FDA8  00                 	db	0
   807  00FDA9  00                 	db	0
   808  00FDAA                     __end_of_inputEntryQuestions:
   809                           	opt stack 0
   810  00FDAA                     _fastenerMatrix:
   811                           	opt stack 0
   812  00FDAA  00                 	db	0
   813  00FDAB  00                 	db	0
   814  00FDAC  00                 	db	0
   815  00FDAD  00                 	db	0
   816  00FDAE  01                 	db	1
   817  00FDAF  00                 	db	0
   818  00FDB0  00                 	db	0
   819  00FDB1  00                 	db	0
   820  00FDB2  00                 	db	0
   821  00FDB3  01                 	db	1
   822  00FDB4  00                 	db	0
   823  00FDB5  00                 	db	0
   824  00FDB6  00                 	db	0
   825  00FDB7  00                 	db	0
   826  00FDB8  01                 	db	1
   827  00FDB9  00                 	db	0
   828  00FDBA  00                 	db	0
   829  00FDBB  00                 	db	0
   830  00FDBC  00                 	db	0
   831  00FDBD  01                 	db	1
   832  00FDBE  01                 	db	1
   833  00FDBF  01                 	db	1
   834  00FDC0  00                 	db	0
   835  00FDC1  00                 	db	0
   836  00FDC2  01                 	db	1
   837  00FDC3  00                 	db	0
   838  00FDC4  01                 	db	1
   839  00FDC5  00                 	db	0
   840  00FDC6  01                 	db	1
   841  00FDC7  00                 	db	0
   842  00FDC8  00                 	db	0
   843  00FDC9  01                 	db	1
   844  00FDCA  02                 	db	2
   845  00FDCB  01                 	db	1
   846  00FDCC  00                 	db	0
   847  00FDCD  00                 	db	0
   848  00FDCE  02                 	db	2
   849  00FDCF  00                 	db	0
   850  00FDD0  01                 	db	1
   851  00FDD1  00                 	db	0
   852  00FDD2  02                 	db	2
   853  00FDD3  00                 	db	0
   854  00FDD4  00                 	db	0
   855  00FDD5  01                 	db	1
   856  00FDD6  01                 	db	1
   857  00FDD7  01                 	db	1
   858  00FDD8  00                 	db	0
   859  00FDD9  01                 	db	1
   860  00FDDA  01                 	db	1
   861  00FDDB  00                 	db	0
   862  00FDDC  01                 	db	1
   863  00FDDD  01                 	db	1
   864  00FDDE  01                 	db	1
   865  00FDDF  00                 	db	0
   866  00FDE0  00                 	db	0
   867  00FDE1  02                 	db	2
   868  00FDE2  01                 	db	1
   869  00FDE3  01                 	db	1
   870  00FDE4  00                 	db	0
   871  00FDE5  02                 	db	2
   872  00FDE6  01                 	db	1
   873  00FDE7  00                 	db	0
   874  00FDE8  01                 	db	1
   875  00FDE9  02                 	db	2
   876  00FDEA  02                 	db	2
   877  00FDEB  00                 	db	0
   878  00FDEC  01                 	db	1
   879  00FDED  01                 	db	1
   880  00FDEE  02                 	db	2
   881  00FDEF  01                 	db	1
   882  00FDF0  00                 	db	0
   883  00FDF1  01                 	db	1
   884  00FDF2  01                 	db	1
   885  00FDF3  02                 	db	2
   886  00FDF4  00                 	db	0
   887  00FDF5  01                 	db	1
   888  00FDF6  01                 	db	1
   889  00FDF7  03                 	db	3
   890  00FDF8  00                 	db	0
   891  00FDF9  00                 	db	0
   892  00FDFA  01                 	db	1
   893  00FDFB  00                 	db	0
   894  00FDFC  00                 	db	0
   895  00FDFD  03                 	db	3
   896  00FDFE                     __end_of_fastenerMatrix:
   897                           	opt stack 0
   898  0000                     _PIR2bits	set	4001
   899  0000                     _EECON2	set	4007
   900  0000                     _EEDATA	set	4008
   901  0000                     _EEADR	set	4009
   902  0000                     _EEADRH	set	4010
   903  0000                     _EECON1bits	set	4006
   904  0000                     _LATEbits	set	3981
   905  0000                     _LATCbits	set	3979
   906  0000                     _LATBbits	set	3978
   907  0000                     _TMR0L	set	4054
   908  0000                     _TMR0H	set	4055
   909  0000                     _T0CONbits	set	4053
   910  0000                     _PORTB	set	3969
   911  0000                     _PORTBbits	set	3969
   912  0000                     _INTCONbits	set	4082
   913  0000                     _LATDbits	set	3980
   914  0000                     _SSPBUF	set	4041
   915  0000                     _SSPCON2bits	set	4037
   916  0000                     _SSPADD	set	4040
   917  0000                     _SSPCON2	set	4037
   918  0000                     _SSPCON1	set	4038
   919  0000                     _SSPSTAT	set	4039
   920  0000                     _TRISCbits	set	3988
   921  0000                     _SSPCON1bits	set	4038
   922  0000                     _ADCON1	set	4033
   923  0000                     _ADCON0	set	4034
   924  0000                     _TRISE	set	3990
   925  0000                     _TRISD	set	3989
   926  0000                     _TRISC	set	3988
   927  0000                     _TRISB	set	3987
   928  0000                     _LATE	set	3981
   929  0000                     _LATD	set	3980
   930  0000                     _LATC	set	3979
   931  0000                     _LATB	set	3978
   932  0000                     _LATA	set	3977
   933  0000                     _PORTAbits	set	3968
   934  0000                     _TRISA	set	3986
   935  0000                     _TMR0IE	set	32661
   936  0000                     _T0IF	set	32658
   937  0000                     _T0IE	set	32661
   938  00FDFE                     STR_10:
   939  00FDFE  01                 	db	1
   940  00FDFF  46                 	db	70	;'F'
   941  00FE00  69                 	db	105	;'i'
   942  00FE01  6E                 	db	110	;'n'
   943  00FE02  69                 	db	105	;'i'
   944  00FE03  73                 	db	115	;'s'
   945  00FE04  68                 	db	104	;'h'
   946  00FE05  65                 	db	101	;'e'
   947  00FE06  64                 	db	100	;'d'
   948  00FE07  20                 	db	32
   949  00FE08  70                 	db	112	;'p'
   950  00FE09  61                 	db	97	;'a'
   951  00FE0A  63                 	db	99	;'c'
   952  00FE0B  6B                 	db	107	;'k'
   953  00FE0C  61                 	db	97	;'a'
   954  00FE0D  67                 	db	103	;'g'
   955  00FE0E  69                 	db	105	;'i'
   956  00FE0F  6E                 	db	110	;'n'
   957  00FE10  67                 	db	103	;'g'
   958  00FE11  20                 	db	32
   959  00FE12  63                 	db	99	;'c'
   960  00FE13  6F                 	db	111	;'o'
   961  00FE14  6D                 	db	109	;'m'
   962  00FE15  70                 	db	112	;'p'
   963  00FE16  61                 	db	97	;'a'
   964  00FE17  72                 	db	114	;'r'
   965  00FE18  74                 	db	116	;'t'
   966  00FE19  6D                 	db	109	;'m'
   967  00FE1A  65                 	db	101	;'e'
   968  00FE1B  6E                 	db	110	;'n'
   969  00FE1C  74                 	db	116	;'t'
   970  00FE1D  20                 	db	32
   971  00FE1E  25                 	db	37
   972  00FE1F  64                 	db	100	;'d'
   973  00FE20  00                 	db	0
   974  00FE21  00                 	db	0
   975  00FE22                     STR_7:
   976  00FE22  01                 	db	1
   977  00FE23  45                 	db	69	;'E'
   978  00FE24  6E                 	db	110	;'n'
   979  00FE25  74                 	db	116	;'t'
   980  00FE26  65                 	db	101	;'e'
   981  00FE27  72                 	db	114	;'r'
   982  00FE28  65                 	db	101	;'e'
   983  00FE29  64                 	db	100	;'d'
   984  00FE2A  20                 	db	32
   985  00FE2B  74                 	db	116	;'t'
   986  00FE2C  68                 	db	104	;'h'
   987  00FE2D  65                 	db	101	;'e'
   988  00FE2E  20                 	db	32
   989  00FE2F  70                 	db	112	;'p'
   990  00FE30  61                 	db	97	;'a'
   991  00FE31  63                 	db	99	;'c'
   992  00FE32  6B                 	db	107	;'k'
   993  00FE33  61                 	db	97	;'a'
   994  00FE34  67                 	db	103	;'g'
   995  00FE35  69                 	db	105	;'i'
   996  00FE36  6E                 	db	110	;'n'
   997  00FE37  67                 	db	103	;'g'
   998  00FE38  20                 	db	32
   999  00FE39  66                 	db	102	;'f'
  1000  00FE3A  75                 	db	117	;'u'
  1001  00FE3B  6E                 	db	110	;'n'
  1002  00FE3C  63                 	db	99	;'c'
  1003  00FE3D  74                 	db	116	;'t'
  1004  00FE3E  69                 	db	105	;'i'
  1005  00FE3F  6F                 	db	111	;'o'
  1006  00FE40  6E                 	db	110	;'n'
  1007  00FE41  00                 	db	0
  1008  00FE42  00                 	db	0
  1009  00FE43                     STR_19:
  1010  00FE43  30                 	db	48	;'0'
  1011  00FE44  3A                 	db	58	;':'
  1012  00FE45  53                 	db	83	;'S'
  1013  00FE46  6C                 	db	108	;'l'
  1014  00FE47  65                 	db	101	;'e'
  1015  00FE48  65                 	db	101	;'e'
  1016  00FE49  70                 	db	112	;'p'
  1017  00FE4A  20                 	db	32
  1018  00FE4B  31                 	db	49	;'1'
  1019  00FE4C  3A                 	db	58	;':'
  1020  00FE4D  42                 	db	66	;'B'
  1021  00FE4E  65                 	db	101	;'e'
  1022  00FE4F  67                 	db	103	;'g'
  1023  00FE50  69                 	db	105	;'i'
  1024  00FE51  6E                 	db	110	;'n'
  1025  00FE52  20                 	db	32
  1026  00FE53  0A                 	db	10
  1027  00FE54  32                 	db	50	;'2'
  1028  00FE55  3A                 	db	58	;':'
  1029  00FE56  20                 	db	32
  1030  00FE57  56                 	db	86	;'V'
  1031  00FE58  69                 	db	105	;'i'
  1032  00FE59  65                 	db	101	;'e'
  1033  00FE5A  77                 	db	119	;'w'
  1034  00FE5B  20                 	db	32
  1035  00FE5C  4C                 	db	76	;'L'
  1036  00FE5D  6F                 	db	111	;'o'
  1037  00FE5E  67                 	db	103	;'g'
  1038  00FE5F  73                 	db	115	;'s'
  1039  00FE60  00                 	db	0
  1040  00FE61                     STR_6:
  1041  00FE61  01                 	db	1
  1042  00FE62  4F                 	db	79	;'O'
  1043  00FE63  75                 	db	117	;'u'
  1044  00FE64  74                 	db	116	;'t'
  1045  00FE65  20                 	db	32
  1046  00FE66  6F                 	db	111	;'o'
  1047  00FE67  66                 	db	102	;'f'
  1048  00FE68  20                 	db	32
  1049  00FE69  74                 	db	116	;'t'
  1050  00FE6A  68                 	db	104	;'h'
  1051  00FE6B  65                 	db	101	;'e'
  1052  00FE6C  20                 	db	32
  1053  00FE6D  70                 	db	112	;'p'
  1054  00FE6E  61                 	db	97	;'a'
  1055  00FE6F  63                 	db	99	;'c'
  1056  00FE70  6B                 	db	107	;'k'
  1057  00FE71  61                 	db	97	;'a'
  1058  00FE72  67                 	db	103	;'g'
  1059  00FE73  69                 	db	105	;'i'
  1060  00FE74  6E                 	db	110	;'n'
  1061  00FE75  67                 	db	103	;'g'
  1062  00FE76  20                 	db	32
  1063  00FE77  6C                 	db	108	;'l'
  1064  00FE78  6F                 	db	111	;'o'
  1065  00FE79  6F                 	db	111	;'o'
  1066  00FE7A  70                 	db	112	;'p'
  1067  00FE7B  00                 	db	0
  1068  00FE7C  00                 	db	0
  1069  00FE7D                     STR_16:
  1070  00FE7D  4E                 	db	78	;'N'
  1071  00FE7E  6F                 	db	111	;'o'
  1072  00FE7F  74                 	db	116	;'t'
  1073  00FE80  20                 	db	32
  1074  00FE81  74                 	db	116	;'t'
  1075  00FE82  68                 	db	104	;'h'
  1076  00FE83  65                 	db	101	;'e'
  1077  00FE84  72                 	db	114	;'r'
  1078  00FE85  65                 	db	101	;'e'
  1079  00FE86  20                 	db	32
  1080  00FE87  79                 	db	121	;'y'
  1081  00FE88  65                 	db	101	;'e'
  1082  00FE89  74                 	db	116	;'t'
  1083  00FE8A  0A                 	db	10
  1084  00FE8B  2A                 	db	42
  1085  00FE8C  20                 	db	32
  1086  00FE8D  74                 	db	116	;'t'
  1087  00FE8E  6F                 	db	111	;'o'
  1088  00FE8F  20                 	db	32
  1089  00FE90  72                 	db	114	;'r'
  1090  00FE91  65                 	db	101	;'e'
  1091  00FE92  74                 	db	116	;'t'
  1092  00FE93  75                 	db	117	;'u'
  1093  00FE94  72                 	db	114	;'r'
  1094  00FE95  6E                 	db	110	;'n'
  1095  00FE96  00                 	db	0
  1096  00FE97                     STR_17:
  1097  00FE97  53                 	db	83	;'S'
  1098  00FE98  74                 	db	116	;'t'
  1099  00FE99  61                 	db	97	;'a'
  1100  00FE9A  72                 	db	114	;'r'
  1101  00FE9B  74                 	db	116	;'t'
  1102  00FE9C  65                 	db	101	;'e'
  1103  00FE9D  64                 	db	100	;'d'
  1104  00FE9E  20                 	db	32
  1105  00FE9F  69                 	db	105	;'i'
  1106  00FEA0  6E                 	db	110	;'n'
  1107  00FEA1  70                 	db	112	;'p'
  1108  00FEA2  75                 	db	117	;'u'
  1109  00FEA3  74                 	db	116	;'t'
  1110  00FEA4  20                 	db	32
  1111  00FEA5  65                 	db	101	;'e'
  1112  00FEA6  6E                 	db	110	;'n'
  1113  00FEA7  74                 	db	116	;'t'
  1114  00FEA8  72                 	db	114	;'r'
  1115  00FEA9  79                 	db	121	;'y'
  1116  00FEAA  2C                 	db	44
  1117  00FEAB  20                 	db	32
  1118  00FEAC  68                 	db	104	;'h'
  1119  00FEAD  69                 	db	105	;'i'
  1120  00FEAE  00                 	db	0
  1121  00FEAF  00                 	db	0
  1122  00FEB0                     STR_8:
  1123  00FEB0  01                 	db	1
  1124  00FEB1  42                 	db	66	;'B'
  1125  00FEB2  3A                 	db	58	;':'
  1126  00FEB3  25                 	db	37
  1127  00FEB4  64                 	db	100	;'d'
  1128  00FEB5  20                 	db	32
  1129  00FEB6  4E                 	db	78	;'N'
  1130  00FEB7  3A                 	db	58	;':'
  1131  00FEB8  25                 	db	37
  1132  00FEB9  64                 	db	100	;'d'
  1133  00FEBA  20                 	db	32
  1134  00FEBB  53                 	db	83	;'S'
  1135  00FEBC  3A                 	db	58	;':'
  1136  00FEBD  25                 	db	37
  1137  00FEBE  64                 	db	100	;'d'
  1138  00FEBF  20                 	db	32
  1139  00FEC0  57                 	db	87	;'W'
  1140  00FEC1  3A                 	db	58	;':'
  1141  00FEC2  25                 	db	37
  1142  00FEC3  64                 	db	100	;'d'
  1143  00FEC4  00                 	db	0
  1144  00FEC5  00                 	db	0
  1145  00FEC6                     STR_23:
  1146  00FEC6  01                 	db	1
  1147  00FEC7  53                 	db	83	;'S'
  1148  00FEC8  74                 	db	116	;'t'
  1149  00FEC9  61                 	db	97	;'a'
  1150  00FECA  72                 	db	114	;'r'
  1151  00FECB  74                 	db	116	;'t'
  1152  00FECC  69                 	db	105	;'i'
  1153  00FECD  6E                 	db	110	;'n'
  1154  00FECE  67                 	db	103	;'g'
  1155  00FECF  20                 	db	32
  1156  00FED0  70                 	db	112	;'p'
  1157  00FED1  61                 	db	97	;'a'
  1158  00FED2  63                 	db	99	;'c'
  1159  00FED3  6B                 	db	107	;'k'
  1160  00FED4  61                 	db	97	;'a'
  1161  00FED5  67                 	db	103	;'g'
  1162  00FED6  69                 	db	105	;'i'
  1163  00FED7  6E                 	db	110	;'n'
  1164  00FED8  67                 	db	103	;'g'
  1165  00FED9  00                 	db	0
  1166  00FEDA  00                 	db	0
  1167  00FEDB                     STR_22:
  1168  00FEDB  53                 	db	83	;'S'
  1169  00FEDC  74                 	db	116	;'t'
  1170  00FEDD  61                 	db	97	;'a'
  1171  00FEDE  72                 	db	114	;'r'
  1172  00FEDF  74                 	db	116	;'t'
  1173  00FEE0  69                 	db	105	;'i'
  1174  00FEE1  6E                 	db	110	;'n'
  1175  00FEE2  67                 	db	103	;'g'
  1176  00FEE3  20                 	db	32
  1177  00FEE4  70                 	db	112	;'p'
  1178  00FEE5  61                 	db	97	;'a'
  1179  00FEE6  63                 	db	99	;'c'
  1180  00FEE7  6B                 	db	107	;'k'
  1181  00FEE8  61                 	db	97	;'a'
  1182  00FEE9  67                 	db	103	;'g'
  1183  00FEEA  69                 	db	105	;'i'
  1184  00FEEB  6E                 	db	110	;'n'
  1185  00FEEC  67                 	db	103	;'g'
  1186  00FEED  00                 	db	0
  1187  00FEEE                     STR_5:
  1188  00FEEE  01                 	db	1
  1189  00FEEF  44                 	db	68	;'D'
  1190  00FEF0  6F                 	db	111	;'o'
  1191  00FEF1  6E                 	db	110	;'n'
  1192  00FEF2  65                 	db	101	;'e'
  1193  00FEF3  20                 	db	32
  1194  00FEF4  63                 	db	99	;'c'
  1195  00FEF5  6F                 	db	111	;'o'
  1196  00FEF6  6D                 	db	109	;'m'
  1197  00FEF7  70                 	db	112	;'p'
  1198  00FEF8  61                 	db	97	;'a'
  1199  00FEF9  72                 	db	114	;'r'
  1200  00FEFA  74                 	db	116	;'t'
  1201  00FEFB  6D                 	db	109	;'m'
  1202  00FEFC  65                 	db	101	;'e'
  1203  00FEFD  6E                 	db	110	;'n'
  1204  00FEFE  74                 	db	116	;'t'
  1205  00FEFF  00                 	db	0
  1206  00FF00  00                 	db	0
  1207  00FF01                     STR_15:
  1208  00FF01  50                 	db	80	;'P'
  1209  00FF02  72                 	db	114	;'r'
  1210  00FF03  65                 	db	101	;'e'
  1211  00FF04  73                 	db	115	;'s'
  1212  00FF05  73                 	db	115	;'s'
  1213  00FF06  20                 	db	32
  1214  00FF07  31                 	db	49	;'1'
  1215  00FF08  20                 	db	32
  1216  00FF09  74                 	db	116	;'t'
  1217  00FF0A  6F                 	db	111	;'o'
  1218  00FF0B  20                 	db	32
  1219  00FF0C  62                 	db	98	;'b'
  1220  00FF0D  65                 	db	101	;'e'
  1221  00FF0E  67                 	db	103	;'g'
  1222  00FF0F  69                 	db	105	;'i'
  1223  00FF10  6E                 	db	110	;'n'
  1224  00FF11  00                 	db	0
  1225  00FF12                     STR_20:
  1226  00FF12  50                 	db	80	;'P'
  1227  00FF13  72                 	db	114	;'r'
  1228  00FF14  65                 	db	101	;'e'
  1229  00FF15  73                 	db	115	;'s'
  1230  00FF16  73                 	db	115	;'s'
  1231  00FF17  20                 	db	32
  1232  00FF18  31                 	db	49	;'1'
  1233  00FF19  20                 	db	32
  1234  00FF1A  74                 	db	116	;'t'
  1235  00FF1B  6F                 	db	111	;'o'
  1236  00FF1C  20                 	db	32
  1237  00FF1D  73                 	db	115	;'s'
  1238  00FF1E  74                 	db	116	;'t'
  1239  00FF1F  61                 	db	97	;'a'
  1240  00FF20  72                 	db	114	;'r'
  1241  00FF21  74                 	db	116	;'t'
  1242  00FF22  00                 	db	0
  1243  00FF23                     STR_3:
  1244  00FF23  01                 	db	1
  1245  00FF24  53                 	db	83	;'S'
  1246  00FF25  70                 	db	112	;'p'
  1247  00FF26  61                 	db	97	;'a'
  1248  00FF27  63                 	db	99	;'c'
  1249  00FF28  65                 	db	101	;'e'
  1250  00FF29  72                 	db	114	;'r'
  1251  00FF2A  20                 	db	32
  1252  00FF2B  43                 	db	67	;'C'
  1253  00FF2C  6F                 	db	111	;'o'
  1254  00FF2D  75                 	db	117	;'u'
  1255  00FF2E  6E                 	db	110	;'n'
  1256  00FF2F  74                 	db	116	;'t'
  1257  00FF30  65                 	db	101	;'e'
  1258  00FF31  64                 	db	100	;'d'
  1259  00FF32  00                 	db	0
  1260  00FF33  00                 	db	0
  1261  00FF34                     STR_4:
  1262  00FF34  01                 	db	1
  1263  00FF35  57                 	db	87	;'W'
  1264  00FF36  61                 	db	97	;'a'
  1265  00FF37  73                 	db	115	;'s'
  1266  00FF38  68                 	db	104	;'h'
  1267  00FF39  65                 	db	101	;'e'
  1268  00FF3A  72                 	db	114	;'r'
  1269  00FF3B  20                 	db	32
  1270  00FF3C  43                 	db	67	;'C'
  1271  00FF3D  6F                 	db	111	;'o'
  1272  00FF3E  75                 	db	117	;'u'
  1273  00FF3F  6E                 	db	110	;'n'
  1274  00FF40  74                 	db	116	;'t'
  1275  00FF41  65                 	db	101	;'e'
  1276  00FF42  64                 	db	100	;'d'
  1277  00FF43  00                 	db	0
  1278  00FF44  00                 	db	0
  1279  00FF45                     STR_13:
  1280  00FF45  01                 	db	1
  1281  00FF46  53                 	db	83	;'S'
  1282  00FF47  70                 	db	112	;'p'
  1283  00FF48  61                 	db	97	;'a'
  1284  00FF49  63                 	db	99	;'c'
  1285  00FF4A  65                 	db	101	;'e'
  1286  00FF4B  72                 	db	114	;'r'
  1287  00FF4C  20                 	db	32
  1288  00FF4D  63                 	db	99	;'c'
  1289  00FF4E  6F                 	db	111	;'o'
  1290  00FF4F  75                 	db	117	;'u'
  1291  00FF50  6E                 	db	110	;'n'
  1292  00FF51  74                 	db	116	;'t'
  1293  00FF52  65                 	db	101	;'e'
  1294  00FF53  64                 	db	100	;'d'
  1295  00FF54  00                 	db	0
  1296  00FF55  00                 	db	0
  1297  00FF56                     STR_14:
  1298  00FF56  01                 	db	1
  1299  00FF57  57                 	db	87	;'W'
  1300  00FF58  61                 	db	97	;'a'
  1301  00FF59  73                 	db	115	;'s'
  1302  00FF5A  68                 	db	104	;'h'
  1303  00FF5B  65                 	db	101	;'e'
  1304  00FF5C  72                 	db	114	;'r'
  1305  00FF5D  20                 	db	32
  1306  00FF5E  63                 	db	99	;'c'
  1307  00FF5F  6F                 	db	111	;'o'
  1308  00FF60  75                 	db	117	;'u'
  1309  00FF61  6E                 	db	110	;'n'
  1310  00FF62  74                 	db	116	;'t'
  1311  00FF63  65                 	db	101	;'e'
  1312  00FF64  64                 	db	100	;'d'
  1313  00FF65  00                 	db	0
  1314  00FF66  00                 	db	0
  1315  00FF67                     STR_27:
  1316  00FF67  42                 	db	66	;'B'
  1317  00FF68  25                 	db	37
  1318  00FF69  64                 	db	100	;'d'
  1319  00FF6A  20                 	db	32
  1320  00FF6B  4E                 	db	78	;'N'
  1321  00FF6C  25                 	db	37
  1322  00FF6D  64                 	db	100	;'d'
  1323  00FF6E  20                 	db	32
  1324  00FF6F  53                 	db	83	;'S'
  1325  00FF70  25                 	db	37
  1326  00FF71  64                 	db	100	;'d'
  1327  00FF72  20                 	db	32
  1328  00FF73  57                 	db	87	;'W'
  1329  00FF74  25                 	db	37
  1330  00FF75  64                 	db	100	;'d'
  1331  00FF76  00                 	db	0
  1332  00FF77                     STR_1:
  1333  00FF77  01                 	db	1
  1334  00FF78  42                 	db	66	;'B'
  1335  00FF79  6F                 	db	111	;'o'
  1336  00FF7A  6C                 	db	108	;'l'
  1337  00FF7B  74                 	db	116	;'t'
  1338  00FF7C  20                 	db	32
  1339  00FF7D  43                 	db	67	;'C'
  1340  00FF7E  6F                 	db	111	;'o'
  1341  00FF7F  75                 	db	117	;'u'
  1342  00FF80  6E                 	db	110	;'n'
  1343  00FF81  74                 	db	116	;'t'
  1344  00FF82  65                 	db	101	;'e'
  1345  00FF83  64                 	db	100	;'d'
  1346  00FF84  00                 	db	0
  1347  00FF85  00                 	db	0
  1348  00FF86                     STR_11:
  1349  00FF86  01                 	db	1
  1350  00FF87  42                 	db	66	;'B'
  1351  00FF88  6F                 	db	111	;'o'
  1352  00FF89  6C                 	db	108	;'l'
  1353  00FF8A  74                 	db	116	;'t'
  1354  00FF8B  20                 	db	32
  1355  00FF8C  63                 	db	99	;'c'
  1356  00FF8D  6F                 	db	111	;'o'
  1357  00FF8E  75                 	db	117	;'u'
  1358  00FF8F  6E                 	db	110	;'n'
  1359  00FF90  74                 	db	116	;'t'
  1360  00FF91  65                 	db	101	;'e'
  1361  00FF92  64                 	db	100	;'d'
  1362  00FF93  00                 	db	0
  1363  00FF94  00                 	db	0
  1364  00FF95                     STR_9:
  1365  00FF95  43                 	db	67	;'C'
  1366  00FF96  6F                 	db	111	;'o'
  1367  00FF97  6D                 	db	109	;'m'
  1368  00FF98  70                 	db	112	;'p'
  1369  00FF99  61                 	db	97	;'a'
  1370  00FF9A  72                 	db	114	;'r'
  1371  00FF9B  74                 	db	116	;'t'
  1372  00FF9C  6D                 	db	109	;'m'
  1373  00FF9D  65                 	db	101	;'e'
  1374  00FF9E  6E                 	db	110	;'n'
  1375  00FF9F  74                 	db	116	;'t'
  1376  00FFA0  20                 	db	32
  1377  00FFA1  25                 	db	37
  1378  00FFA2  64                 	db	100	;'d'
  1379  00FFA3  00                 	db	0
  1380  00FFA4                     STR_18:
  1381  00FFA4  01                 	db	1
  1382  00FFA5  44                 	db	68	;'D'
  1383  00FFA6  6F                 	db	111	;'o'
  1384  00FFA7  6E                 	db	110	;'n'
  1385  00FFA8  65                 	db	101	;'e'
  1386  00FFA9  20                 	db	32
  1387  00FFAA  69                 	db	105	;'i'
  1388  00FFAB  6E                 	db	110	;'n'
  1389  00FFAC  70                 	db	112	;'p'
  1390  00FFAD  75                 	db	117	;'u'
  1391  00FFAE  74                 	db	116	;'t'
  1392  00FFAF  73                 	db	115	;'s'
  1393  00FFB0  00                 	db	0
  1394  00FFB1  00                 	db	0
  1395  00FFB2                     STR_2:
  1396  00FFB2  01                 	db	1
  1397  00FFB3  4E                 	db	78	;'N'
  1398  00FFB4  75                 	db	117	;'u'
  1399  00FFB5  74                 	db	116	;'t'
  1400  00FFB6  20                 	db	32
  1401  00FFB7  43                 	db	67	;'C'
  1402  00FFB8  6F                 	db	111	;'o'
  1403  00FFB9  75                 	db	117	;'u'
  1404  00FFBA  6E                 	db	110	;'n'
  1405  00FFBB  74                 	db	116	;'t'
  1406  00FFBC  65                 	db	101	;'e'
  1407  00FFBD  64                 	db	100	;'d'
  1408  00FFBE  00                 	db	0
  1409  00FFBF  00                 	db	0
  1410  00FFC0                     STR_12:
  1411  00FFC0  01                 	db	1
  1412  00FFC1  4E                 	db	78	;'N'
  1413  00FFC2  75                 	db	117	;'u'
  1414  00FFC3  74                 	db	116	;'t'
  1415  00FFC4  20                 	db	32
  1416  00FFC5  63                 	db	99	;'c'
  1417  00FFC6  6F                 	db	111	;'o'
  1418  00FFC7  75                 	db	117	;'u'
  1419  00FFC8  6E                 	db	110	;'n'
  1420  00FFC9  74                 	db	116	;'t'
  1421  00FFCA  65                 	db	101	;'e'
  1422  00FFCB  64                 	db	100	;'d'
  1423  00FFCC  00                 	db	0
  1424  00FFCD  00                 	db	0
  1425  00FFCE                     STR_25:
  1426  00FFCE  43                 	db	67	;'C'
  1427  00FFCF  25                 	db	37
  1428  00FFD0  64                 	db	100	;'d'
  1429  00FFD1  3A                 	db	58	;':'
  1430  00FFD2  20                 	db	32
  1431  00FFD3  25                 	db	37
  1432  00FFD4  73                 	db	115	;'s'
  1433  00FFD5  20                 	db	32
  1434  00FFD6  78                 	db	120	;'x'
  1435  00FFD7  25                 	db	37
  1436  00FFD8  64                 	db	100	;'d'
  1437  00FFD9  00                 	db	0
  1438  00FFDA                     STR_26:
  1439  00FFDA  52                 	db	82	;'R'
  1440  00FFDB  65                 	db	101	;'e'
  1441  00FFDC  6D                 	db	109	;'m'
  1442  00FFDD  61                 	db	97	;'a'
  1443  00FFDE  69                 	db	105	;'i'
  1444  00FFDF  6E                 	db	110	;'n'
  1445  00FFE0  69                 	db	105	;'i'
  1446  00FFE1  6E                 	db	110	;'n'
  1447  00FFE2  67                 	db	103	;'g'
  1448  00FFE3  3A                 	db	58	;':'
  1449  00FFE4  00                 	db	0
  1450  00FFE5                     STR_24:
  1451  00FFE5  53                 	db	83	;'S'
  1452  00FFE6  75                 	db	117	;'u'
  1453  00FFE7  6D                 	db	109	;'m'
  1454  00FFE8  6D                 	db	109	;'m'
  1455  00FFE9  61                 	db	97	;'a'
  1456  00FFEA  72                 	db	114	;'r'
  1457  00FFEB  79                 	db	121	;'y'
  1458  00FFEC  3A                 	db	58	;':'
  1459  00FFED  00                 	db	0
  1460  00FFEE                     STR_30:
  1461  00FFEE  28                 	db	40
  1462  00FFEF  6E                 	db	110	;'n'
  1463  00FFF0  75                 	db	117	;'u'
  1464  00FFF1  6C                 	db	108	;'l'
  1465  00FFF2  6C                 	db	108	;'l'
  1466  00FFF3  29                 	db	41
  1467  00FFF4  00                 	db	0
  1468  00FFF5                     STR_28:
  1469  00FFF5  54                 	db	84	;'T'
  1470  00FFF6  69                 	db	105	;'i'
  1471  00FFF7  6D                 	db	109	;'m'
  1472  00FFF8  65                 	db	101	;'e'
  1473  00FFF9  3A                 	db	58	;':'
  1474  00FFFA  00                 	db	0
  1475  00FFFB                     STR_29:
  1476  00FFFB  25                 	db	37
  1477  00FFFC  6C                 	db	108	;'l'
  1478  00FFFD  64                 	db	100	;'d'
  1479  00FFFE  00                 	db	0
  1480  0000                     
  1481                           ; #config settings
  1482  00FFFF  00                 	db	0	; dummy byte at the end
  1483  0000                     
  1484                           	psect	cinit
  1485  002C38                     __pcinit:
  1486                           	opt stack 0
  1487  002C38                     start_initialization:
  1488                           	opt stack 0
  1489  002C38                     __initialization:
  1490                           	opt stack 0
  1491                           
  1492                           ; Initialize objects allocated to BANK2 (105 bytes)
  1493                           ; load TBLPTR registers with __pidataBANK2
  1494  002C38  0ECE               	movlw	low __pidataBANK2
  1495  002C3A  6EF6               	movwf	tblptrl,c
  1496  002C3C  0E2E               	movlw	high __pidataBANK2
  1497  002C3E  6EF7               	movwf	tblptrh,c
  1498  002C40  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  1499  002C42  6EF8               	movwf	tblptru,c
  1500  002C44  EE02  F000         	lfsr	0,__pdataBANK2
  1501  002C48  EE10 F069          	lfsr	1,105
  1502  002C4C                     copy_data0:
  1503  002C4C  0009               	tblrd		*+
  1504  002C4E  CFF5 FFEE          	movff	tablat,postinc0
  1505  002C52  50E5               	movf	postdec1,w,c
  1506  002C54  50E1               	movf	fsr1l,w,c
  1507  002C56  E1FA               	bnz	copy_data0
  1508                           
  1509                           ; Initialize objects allocated to BANK1 (62 bytes)
  1510                           ; load TBLPTR registers with __pidataBANK1
  1511  002C58  0ED8               	movlw	low __pidataBANK1
  1512  002C5A  6EF6               	movwf	tblptrl,c
  1513  002C5C  0E30               	movlw	high __pidataBANK1
  1514  002C5E  6EF7               	movwf	tblptrh,c
  1515  002C60  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1516  002C62  6EF8               	movwf	tblptru,c
  1517  002C64  EE01  F07E         	lfsr	0,__pdataBANK1
  1518  002C68  EE10 F03E          	lfsr	1,62
  1519  002C6C                     copy_data1:
  1520  002C6C  0009               	tblrd		*+
  1521  002C6E  CFF5 FFEE          	movff	tablat,postinc0
  1522  002C72  50E5               	movf	postdec1,w,c
  1523  002C74  50E1               	movf	fsr1l,w,c
  1524  002C76  E1FA               	bnz	copy_data1
  1525                           
  1526                           ; Initialize objects allocated to COMRAM (24 bytes)
  1527                           ; load TBLPTR registers with __pidataCOMRAM
  1528  002C78  0ED6               	movlw	low __pidataCOMRAM
  1529  002C7A  6EF6               	movwf	tblptrl,c
  1530  002C7C  0E32               	movlw	high __pidataCOMRAM
  1531  002C7E  6EF7               	movwf	tblptrh,c
  1532  002C80  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1533  002C82  6EF8               	movwf	tblptru,c
  1534  002C84  EE00  F04D         	lfsr	0,__pdataCOMRAM
  1535  002C88  EE10 F018          	lfsr	1,24
  1536  002C8C                     copy_data2:
  1537  002C8C  0009               	tblrd		*+
  1538  002C8E  CFF5 FFEE          	movff	tablat,postinc0
  1539  002C92  50E5               	movf	postdec1,w,c
  1540  002C94  50E1               	movf	fsr1l,w,c
  1541  002C96  E1FA               	bnz	copy_data2
  1542                           
  1543                           ; Clear objects allocated to BANK1 (34 bytes)
  1544  002C98  EE01  F0BC         	lfsr	0,__pbssBANK1
  1545  002C9C  0E22               	movlw	34
  1546  002C9E                     clear_0:
  1547  002C9E  6AEE               	clrf	postinc0,c
  1548  002CA0  06E8               	decf	wreg,f,c
  1549  002CA2  E1FD               	bnz	clear_0
  1550                           
  1551                           ; Clear objects allocated to BANK0 (16 bytes)
  1552  002CA4  EE00  F0DC         	lfsr	0,__pbssBANK0
  1553  002CA8  0E10               	movlw	16
  1554  002CAA                     clear_1:
  1555  002CAA  6AEE               	clrf	postinc0,c
  1556  002CAC  06E8               	decf	wreg,f,c
  1557  002CAE  E1FD               	bnz	clear_1
  1558                           
  1559                           ; Clear objects allocated to COMRAM (25 bytes)
  1560  002CB0  EE00  F034         	lfsr	0,__pbssCOMRAM
  1561  002CB4  0E19               	movlw	25
  1562  002CB6                     clear_2:
  1563  002CB6  6AEE               	clrf	postinc0,c
  1564  002CB8  06E8               	decf	wreg,f,c
  1565  002CBA  E1FD               	bnz	clear_2
  1566  002CBC                     end_of_initialization:
  1567                           	opt stack 0
  1568  002CBC                     __end_of__initialization:
  1569                           	opt stack 0
  1570  002CBC  9065               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1571  002CBE  9265               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1572  002CC0  0100               	movlb	0
  1573  002CC2  EF29  F014         	goto	_main	;jump to C main() function
  1574                           tblptru	equ	0xFF8
  1575                           tblptrh	equ	0xFF7
  1576                           tblptrl	equ	0xFF6
  1577                           tablat	equ	0xFF5
  1578                           postinc0	equ	0xFEE
  1579                           wreg	equ	0xFE8
  1580                           postdec1	equ	0xFE5
  1581                           fsr1l	equ	0xFE1
  1582                           
  1583                           	psect	bssCOMRAM
  1584  000034                     __pbssCOMRAM:
  1585                           	opt stack 0
  1586  000034                     _endTime:
  1587                           	opt stack 0
  1588  000034                     	ds	6
  1589  00003A                     _startTime:
  1590                           	opt stack 0
  1591  00003A                     	ds	6
  1592  000040                     _motorGoingBackwards:
  1593                           	opt stack 0
  1594  000040                     	ds	4
  1595  000044                     	ds	4
  1596  000048                     _currentMode:
  1597                           	opt stack 0
  1598  000048                     	ds	2
  1599  00004A                     _timerInit:
  1600                           	opt stack 0
  1601  00004A                     	ds	1
  1602  00004B                     _operating:
  1603                           	opt stack 0
  1604  00004B                     	ds	1
  1605  00004C                     _LCDinterruptState:
  1606                           	opt stack 0
  1607  00004C                     	ds	1
  1608                           tblptru	equ	0xFF8
  1609                           tblptrh	equ	0xFF7
  1610                           tblptrl	equ	0xFF6
  1611                           tablat	equ	0xFF5
  1612                           postinc0	equ	0xFEE
  1613                           wreg	equ	0xFE8
  1614                           postdec1	equ	0xFE5
  1615                           fsr1l	equ	0xFE1
  1616                           
  1617                           	psect	dataCOMRAM
  1618  00004D                     __pdataCOMRAM:
  1619                           	opt stack 0
  1620  00004D                     _shortTolerance:
  1621                           	opt stack 0
  1622  00004D                     	ds	4
  1623  000051                     _longTolerance:
  1624                           	opt stack 0
  1625  000051                     	ds	4
  1626  000055                     _currentMotorDir:
  1627                           	opt stack 0
  1628  000055                     	ds	4
  1629  000059                     _timeSinceLastTic:
  1630                           	opt stack 0
  1631  000059                     	ds	3
  1632  00005C                     timer@operatingTime:
  1633                           	opt stack 0
  1634  00005C                     	ds	3
  1635  00005F                     inputEntry@F3189:
  1636                           	opt stack 0
  1637  00005F                     	ds	2
  1638  000061                     clearing@F3240:
  1639                           	opt stack 0
  1640  000061                     	ds	2
  1641  000063                     packageCompartment@F3222:
  1642                           	opt stack 0
  1643  000063                     	ds	2
  1644                           tblptru	equ	0xFF8
  1645                           tblptrh	equ	0xFF7
  1646                           tblptrl	equ	0xFF6
  1647                           tablat	equ	0xFF5
  1648                           postinc0	equ	0xFEE
  1649                           wreg	equ	0xFE8
  1650                           postdec1	equ	0xFE5
  1651                           fsr1l	equ	0xFE1
  1652                           
  1653                           	psect	bssBANK0
  1654  0000DC                     __pbssBANK0:
  1655                           	opt stack 0
  1656  0000DC                     _dispensed:
  1657                           	opt stack 0
  1658  0000DC                     	ds	8
  1659  0000E4                     _extras:
  1660                           	opt stack 0
  1661  0000E4                     	ds	8
  1662                           tblptru	equ	0xFF8
  1663                           tblptrh	equ	0xFF7
  1664                           tblptrl	equ	0xFF6
  1665                           tablat	equ	0xFF5
  1666                           postinc0	equ	0xFEE
  1667                           wreg	equ	0xFE8
  1668                           postdec1	equ	0xFE5
  1669                           fsr1l	equ	0xFE1
  1670                           
  1671                           	psect	bssBANK1
  1672  0001BC                     __pbssBANK1:
  1673                           	opt stack 0
  1674  0001BC                     _params:
  1675                           	opt stack 0
  1676  0001BC                     	ds	26
  1677  0001D6                     _motorControlTimer:
  1678                           	opt stack 0
  1679  0001D6                     	ds	4
  1680  0001DA                     _test:
  1681                           	opt stack 0
  1682  0001DA                     	ds	4
  1683                           tblptru	equ	0xFF8
  1684                           tblptrh	equ	0xFF7
  1685                           tblptrl	equ	0xFF6
  1686                           tablat	equ	0xFF5
  1687                           postinc0	equ	0xFEE
  1688                           wreg	equ	0xFE8
  1689                           postdec1	equ	0xFE5
  1690                           fsr1l	equ	0xFE1
  1691                           
  1692                           	psect	dataBANK1
  1693  00017E                     __pdataBANK1:
  1694                           	opt stack 0
  1695  00017E                     packaging@F3228:
  1696                           	opt stack 0
  1697  00017E                     	ds	34
  1698  0001A0                     inputEntry@F3210:
  1699                           	opt stack 0
  1700  0001A0                     	ds	24
  1701  0001B8                     packaging@F3230:
  1702                           	opt stack 0
  1703  0001B8                     	ds	2
  1704  0001BA                     packaging@F3226:
  1705                           	opt stack 0
  1706  0001BA                     	ds	2
  1707                           tblptru	equ	0xFF8
  1708                           tblptrh	equ	0xFF7
  1709                           tblptrl	equ	0xFF6
  1710                           tablat	equ	0xFF5
  1711                           postinc0	equ	0xFEE
  1712                           wreg	equ	0xFE8
  1713                           postdec1	equ	0xFE5
  1714                           fsr1l	equ	0xFE1
  1715                           
  1716                           	psect	dataBANK2
  1717  000200                     __pdataBANK2:
  1718                           	opt stack 0
  1719  000200                     _fSLookup:
  1720                           	opt stack 0
  1721  000200                     	ds	105
  1722                           tblptru	equ	0xFF8
  1723                           tblptrh	equ	0xFF7
  1724                           tblptrl	equ	0xFF6
  1725                           tablat	equ	0xFF5
  1726                           postinc0	equ	0xFEE
  1727                           wreg	equ	0xFE8
  1728                           postdec1	equ	0xFE5
  1729                           fsr1l	equ	0xFE1
  1730                           
  1731                           	psect	cstackBANK1
  1732  000100                     __pcstackBANK1:
  1733                           	opt stack 0
  1734  000100                     inputEntry@msg:
  1735                           	opt stack 0
  1736  000100                     packaging@msg:
  1737                           	opt stack 0
  1738                           
  1739                           ; 34 bytes @ 0x0
  1740  000100                     	ds	24
  1741  000118                     inputEntry@fastenerString:
  1742                           	opt stack 0
  1743                           
  1744                           ; 32 bytes @ 0x18
  1745  000118                     	ds	10
  1746  000122                     packaging@msg3:
  1747                           	opt stack 0
  1748                           
  1749                           ; 50 bytes @ 0x22
  1750  000122                     	ds	22
  1751  000138                     inputEntry@compartmentLabel:
  1752                           	opt stack 0
  1753                           
  1754                           ; 2 bytes @ 0x38
  1755  000138                     	ds	2
  1756  00013A                     inputEntry@compartmentsToFill:
  1757                           	opt stack 0
  1758                           
  1759                           ; 1 bytes @ 0x3A
  1760  00013A                     	ds	1
  1761  00013B                     inputEntry@done:
  1762                           	opt stack 0
  1763                           
  1764                           ; 2 bytes @ 0x3B
  1765  00013B                     	ds	2
  1766  00013D                     inputEntry@found:
  1767                           	opt stack 0
  1768                           
  1769                           ; 2 bytes @ 0x3D
  1770  00013D                     	ds	2
  1771  00013F                     inputEntry@setIsGood:
  1772                           	opt stack 0
  1773                           
  1774                           ; 2 bytes @ 0x3F
  1775  00013F                     	ds	2
  1776  000141                     inputEntry@doneMultiples:
  1777                           	opt stack 0
  1778                           
  1779                           ; 2 bytes @ 0x41
  1780  000141                     	ds	2
  1781  000143                     inputEntry@doneCompartment:
  1782                           	opt stack 0
  1783                           
  1784                           ; 2 bytes @ 0x43
  1785  000143                     	ds	2
  1786  000145                     inputEntry@sum:
  1787                           	opt stack 0
  1788                           
  1789                           ; 2 bytes @ 0x45
  1790  000145                     	ds	2
  1791  000147                     inputEntry@numB:
  1792                           	opt stack 0
  1793                           
  1794                           ; 2 bytes @ 0x47
  1795  000147                     	ds	2
  1796  000149                     inputEntry@numN:
  1797                           	opt stack 0
  1798                           
  1799                           ; 2 bytes @ 0x49
  1800  000149                     	ds	2
  1801  00014B                     inputEntry@numS:
  1802                           	opt stack 0
  1803                           
  1804                           ; 2 bytes @ 0x4B
  1805  00014B                     	ds	2
  1806  00014D                     inputEntry@numW:
  1807                           	opt stack 0
  1808                           
  1809                           ; 2 bytes @ 0x4D
  1810  00014D                     	ds	2
  1811  00014F                     inputEntry@inputEntryStep:
  1812                           	opt stack 0
  1813                           
  1814                           ; 2 bytes @ 0x4F
  1815  00014F                     	ds	2
  1816  000151                     inputEntry@numPressed:
  1817                           	opt stack 0
  1818                           
  1819                           ; 2 bytes @ 0x51
  1820  000151                     	ds	2
  1821  000153                     inputEntry@compartmentNum:
  1822                           	opt stack 0
  1823                           
  1824                           ; 2 bytes @ 0x53
  1825  000153                     	ds	1
  1826  000154                     packaging@msg2:
  1827                           	opt stack 0
  1828                           
  1829                           ; 32 bytes @ 0x54
  1830  000154                     	ds	1
  1831  000155                     inputEntry@i:
  1832                           	opt stack 0
  1833                           
  1834                           ; 2 bytes @ 0x55
  1835  000155                     	ds	2
  1836  000157                     inputEntry@pressed:
  1837                           	opt stack 0
  1838                           
  1839                           ; 1 bytes @ 0x57
  1840  000157                     	ds	29
  1841  000174                     packaging@instr:
  1842                           	opt stack 0
  1843                           
  1844                           ; 2 bytes @ 0x74
  1845  000174                     	ds	2
  1846  000176                     packaging@instr_321:
  1847                           	opt stack 0
  1848                           
  1849                           ; 2 bytes @ 0x76
  1850  000176                     	ds	2
  1851  000178                     packaging@set:
  1852                           	opt stack 0
  1853                           
  1854                           ; 2 bytes @ 0x78
  1855  000178                     	ds	2
  1856  00017A                     packaging@mult:
  1857                           	opt stack 0
  1858                           
  1859                           ; 2 bytes @ 0x7A
  1860  00017A                     	ds	2
  1861  00017C                     packaging@compartmentNum:
  1862                           	opt stack 0
  1863                           
  1864                           ; 2 bytes @ 0x7C
  1865  00017C                     	ds	2
  1866                           tblptru	equ	0xFF8
  1867                           tblptrh	equ	0xFF7
  1868                           tblptrl	equ	0xFF6
  1869                           tablat	equ	0xFF5
  1870                           postinc0	equ	0xFEE
  1871                           wreg	equ	0xFE8
  1872                           postdec1	equ	0xFE5
  1873                           fsr1l	equ	0xFE1
  1874                           
  1875                           	psect	cstackBANK0
  1876  000080                     __pcstackBANK0:
  1877                           	opt stack 0
  1878  000080                     ??_I2C_Master_Wait:
  1879  000080                     ?___wmul:
  1880                           	opt stack 0
  1881  000080                     ?_tock:
  1882                           	opt stack 0
  1883  000080                     ?___ftpack:
  1884                           	opt stack 0
  1885  000080                     ?___lldiv:
  1886                           	opt stack 0
  1887  000080                     lcdNibble@temp:
  1888                           	opt stack 0
  1889  000080                     pollKeypad@keypress:
  1890                           	opt stack 0
  1891  000080                     motorControl@dir:
  1892                           	opt stack 0
  1893  000080                     ___wmul@multiplier:
  1894                           	opt stack 0
  1895  000080                     ___ftpack@arg:
  1896                           	opt stack 0
  1897  000080                     ___lldiv@dividend:
  1898                           	opt stack 0
  1899                           
  1900                           ; 4 bytes @ 0x0
  1901  000080                     	ds	1
  1902  000081                     I2C_Master_Read@ackBit:
  1903                           	opt stack 0
  1904  000081                     lcdNibble@data:
  1905                           	opt stack 0
  1906  000081                     motorControl@motor:
  1907                           	opt stack 0
  1908  000081                     I2C_Master_Write@byteToWrite:
  1909                           	opt stack 0
  1910                           
  1911                           ; 2 bytes @ 0x1
  1912  000081                     	ds	1
  1913  000082                     I2C_Master_Read@receivedByte:
  1914                           	opt stack 0
  1915  000082                     lcdInst@data:
  1916                           	opt stack 0
  1917  000082                     putch@data:
  1918                           	opt stack 0
  1919  000082                     ___wmul@multiplicand:
  1920                           	opt stack 0
  1921                           
  1922                           ; 2 bytes @ 0x2
  1923  000082                     	ds	1
  1924  000083                     ??_initLCD:
  1925  000083                     lcd_shift_cursor@direction:
  1926                           	opt stack 0
  1927  000083                     ___ftpack@exp:
  1928                           	opt stack 0
  1929  000083                     I2C_Send@data:
  1930                           	opt stack 0
  1931  000083                     RTC_getTime@time:
  1932                           	opt stack 0
  1933                           
  1934                           ; 2 bytes @ 0x3
  1935  000083                     	ds	1
  1936  000084                     lcd_shift_cursor@numChars:
  1937                           	opt stack 0
  1938  000084                     ___ftpack@sign:
  1939                           	opt stack 0
  1940  000084                     ___wmul@product:
  1941                           	opt stack 0
  1942  000084                     ___lldiv@divisor:
  1943                           	opt stack 0
  1944                           
  1945                           ; 4 bytes @ 0x4
  1946  000084                     	ds	1
  1947  000085                     ??_I2C_Send:
  1948  000085                     ??___ftpack:
  1949  000085                     lcd_shift_cursor@n:
  1950                           	opt stack 0
  1951  000085                     RTC_getTime@i:
  1952                           	opt stack 0
  1953                           
  1954                           ; 1 bytes @ 0x5
  1955  000085                     	ds	1
  1956  000086                     ??_RTC_startOperation:
  1957  000086                     ?_RTC_getOperatingTime:
  1958                           	opt stack 0
  1959  000086                     lcd_set_cursor@y:
  1960                           	opt stack 0
  1961  000086                     printStringLCD@string:
  1962                           	opt stack 0
  1963  000086                     strcpy@to:
  1964                           	opt stack 0
  1965                           
  1966                           ; 2 bytes @ 0x6
  1967  000086                     	ds	1
  1968  000087                     ??_lcd_set_cursor:
  1969                           
  1970                           ; 1 bytes @ 0x7
  1971  000087                     	ds	1
  1972  000088                     ??_printStringLCD:
  1973  000088                     ??_RTC_getOperatingTime:
  1974  000088                     ?___ftadd:
  1975                           	opt stack 0
  1976  000088                     lcd_set_cursor@i:
  1977                           	opt stack 0
  1978  000088                     I2C_Send@address:
  1979                           	opt stack 0
  1980  000088                     strcpy@from:
  1981                           	opt stack 0
  1982  000088                     ___ftadd@f1:
  1983                           	opt stack 0
  1984  000088                     ___lldiv@quotient:
  1985                           	opt stack 0
  1986  000088                     RTC_startOperation@time:
  1987                           	opt stack 0
  1988                           
  1989                           ; 7 bytes @ 0x8
  1990  000088                     	ds	1
  1991  000089                     lcd_set_cursor@x:
  1992                           	opt stack 0
  1993  000089                     I2C_Send@i:
  1994                           	opt stack 0
  1995                           
  1996                           ; 2 bytes @ 0x9
  1997  000089                     	ds	1
  1998  00008A                     strcpy@cp:
  1999                           	opt stack 0
  2000  00008A                     RTC_getOperatingTime@time:
  2001                           	opt stack 0
  2002                           
  2003                           ; 7 bytes @ 0xA
  2004  00008A                     	ds	1
  2005  00008B                     printStringLCD@j:
  2006                           	opt stack 0
  2007  00008B                     ___ftadd@f2:
  2008                           	opt stack 0
  2009                           
  2010                           ; 3 bytes @ 0xB
  2011  00008B                     	ds	1
  2012  00008C                     ___lldiv@counter:
  2013                           	opt stack 0
  2014                           
  2015                           ; 1 bytes @ 0xC
  2016  00008C                     	ds	1
  2017  00008D                     ?___llmod:
  2018                           	opt stack 0
  2019  00008D                     printStringLCD@spaceIndex:
  2020                           	opt stack 0
  2021  00008D                     I2C_Master_Init@clockFreq:
  2022                           	opt stack 0
  2023  00008D                     ___llmod@dividend:
  2024                           	opt stack 0
  2025                           
  2026                           ; 4 bytes @ 0xD
  2027  00008D                     	ds	1
  2028  00008E                     ??___ftadd:
  2029                           
  2030                           ; 1 bytes @ 0xE
  2031  00008E                     	ds	1
  2032  00008F                     printStringLCD@newlineIndex:
  2033                           	opt stack 0
  2034                           
  2035                           ; 2 bytes @ 0xF
  2036  00008F                     	ds	2
  2037  000091                     ??_I2C_Master_Init:
  2038  000091                     ___ftadd@sign:
  2039                           	opt stack 0
  2040  000091                     printStringLCD@newlineCharIndex:
  2041                           	opt stack 0
  2042  000091                     RTC_getOperatingTime@res:
  2043                           	opt stack 0
  2044  000091                     ___llmod@divisor:
  2045                           	opt stack 0
  2046                           
  2047                           ; 4 bytes @ 0x11
  2048  000091                     	ds	1
  2049  000092                     ___ftadd@exp2:
  2050                           	opt stack 0
  2051                           
  2052                           ; 1 bytes @ 0x12
  2053  000092                     	ds	1
  2054  000093                     ___ftadd@exp1:
  2055                           	opt stack 0
  2056  000093                     printStringLCD@i:
  2057                           	opt stack 0
  2058  000093                     RTC_getOperatingTime@operatingTime:
  2059                           	opt stack 0
  2060                           
  2061                           ; 6 bytes @ 0x13
  2062  000093                     	ds	1
  2063  000094                     ___ftge@ff1:
  2064                           	opt stack 0
  2065                           
  2066                           ; 3 bytes @ 0x14
  2067  000094                     	ds	1
  2068  000095                     ??_hibernate:
  2069  000095                     ??_viewLogs:
  2070  000095                     ___llmod@counter:
  2071                           	opt stack 0
  2072  000095                     printErrorLCD@string:
  2073                           	opt stack 0
  2074                           
  2075                           ; 2 bytes @ 0x15
  2076  000095                     	ds	1
  2077  000096                     ?__doprnt:
  2078                           	opt stack 0
  2079  000096                     viewLogs@pressed:
  2080                           	opt stack 0
  2081  000096                     __doprnt@pb:
  2082                           	opt stack 0
  2083                           
  2084                           ; 2 bytes @ 0x16
  2085  000096                     	ds	1
  2086  000097                     ??_printErrorLCD:
  2087  000097                     ___ftge@ff2:
  2088                           	opt stack 0
  2089                           
  2090                           ; 3 bytes @ 0x17
  2091  000097                     	ds	1
  2092  000098                     __doprnt@f:
  2093                           	opt stack 0
  2094                           
  2095                           ; 2 bytes @ 0x18
  2096  000098                     	ds	1
  2097  000099                     ??_inputEntry:
  2098  000099                     hibernate@pressed:
  2099                           	opt stack 0
  2100                           
  2101                           ; 2 bytes @ 0x19
  2102  000099                     	ds	1
  2103  00009A                     ??___ftge:
  2104  00009A                     __doprnt@ap:
  2105                           	opt stack 0
  2106                           
  2107                           ; 2 bytes @ 0x1A
  2108  00009A                     	ds	2
  2109  00009C                     ??__doprnt:
  2110                           
  2111                           ; 1 bytes @ 0x1C
  2112  00009C                     	ds	1
  2113  00009D                     ??_clearing:
  2114  00009D                     packageCompartment@n:
  2115                           	opt stack 0
  2116                           
  2117                           ; 1 bytes @ 0x1D
  2118  00009D                     	ds	1
  2119  00009E                     packageCompartment@s:
  2120                           	opt stack 0
  2121  00009E                     __doprnt@prec:
  2122                           	opt stack 0
  2123                           
  2124                           ; 2 bytes @ 0x1E
  2125  00009E                     	ds	1
  2126  00009F                     packageCompartment@w:
  2127                           	opt stack 0
  2128  00009F                     clearing@instr:
  2129                           	opt stack 0
  2130                           
  2131                           ; 2 bytes @ 0x1F
  2132  00009F                     	ds	1
  2133  0000A0                     ??_packageCompartment:
  2134  0000A0                     __doprnt@flag:
  2135                           	opt stack 0
  2136                           
  2137                           ; 1 bytes @ 0x20
  2138  0000A0                     	ds	1
  2139  0000A1                     clearing@spinTime:
  2140                           	opt stack 0
  2141  0000A1                     __doprnt@val:
  2142                           	opt stack 0
  2143                           
  2144                           ; 4 bytes @ 0x21
  2145  0000A1                     	ds	2
  2146  0000A3                     packageCompartment@instr:
  2147                           	opt stack 0
  2148                           
  2149                           ; 2 bytes @ 0x23
  2150  0000A3                     	ds	1
  2151  0000A4                     clearing@debounceTime:
  2152                           	opt stack 0
  2153                           
  2154                           ; 3 bytes @ 0x24
  2155  0000A4                     	ds	1
  2156  0000A5                     packageCompartment@b:
  2157                           	opt stack 0
  2158  0000A5                     __doprnt@cp:
  2159                           	opt stack 0
  2160                           
  2161                           ; 2 bytes @ 0x25
  2162  0000A5                     	ds	1
  2163  0000A6                     packageCompartment@timeB:
  2164                           	opt stack 0
  2165                           
  2166                           ; 3 bytes @ 0x26
  2167  0000A6                     	ds	1
  2168  0000A7                     __doprnt@c:
  2169                           	opt stack 0
  2170  0000A7                     clearing@currTime:
  2171                           	opt stack 0
  2172                           
  2173                           ; 3 bytes @ 0x27
  2174  0000A7                     	ds	1
  2175  0000A8                     ?_sprintf:
  2176                           	opt stack 0
  2177  0000A8                     ?_printf:
  2178                           	opt stack 0
  2179  0000A8                     printf@f:
  2180                           	opt stack 0
  2181  0000A8                     sprintf@wh:
  2182                           	opt stack 0
  2183                           
  2184                           ; 2 bytes @ 0x28
  2185  0000A8                     	ds	1
  2186  0000A9                     packageCompartment@timeN:
  2187                           	opt stack 0
  2188                           
  2189                           ; 3 bytes @ 0x29
  2190  0000A9                     	ds	1
  2191  0000AA                     sprintf@f:
  2192                           	opt stack 0
  2193                           
  2194                           ; 2 bytes @ 0x2A
  2195  0000AA                     	ds	2
  2196  0000AC                     packageCompartment@timeS:
  2197                           	opt stack 0
  2198                           
  2199                           ; 3 bytes @ 0x2C
  2200  0000AC                     	ds	3
  2201  0000AF                     packageCompartment@timeW:
  2202                           	opt stack 0
  2203                           
  2204                           ; 3 bytes @ 0x2F
  2205  0000AF                     	ds	3
  2206  0000B2                     packageCompartment@numB:
  2207                           	opt stack 0
  2208  0000B2                     printf@ap:
  2209                           	opt stack 0
  2210                           
  2211                           ; 2 bytes @ 0x32
  2212  0000B2                     	ds	2
  2213  0000B4                     packageCompartment@numN:
  2214                           	opt stack 0
  2215  0000B4                     sprintf@ap:
  2216                           	opt stack 0
  2217  0000B4                     printf@pb:
  2218                           	opt stack 0
  2219                           
  2220                           ; 4 bytes @ 0x34
  2221  0000B4                     	ds	2
  2222  0000B6                     packageCompartment@numS:
  2223                           	opt stack 0
  2224  0000B6                     sprintf@pb:
  2225                           	opt stack 0
  2226                           
  2227                           ; 4 bytes @ 0x36
  2228  0000B6                     	ds	2
  2229  0000B8                     packageCompartment@numW:
  2230                           	opt stack 0
  2231                           
  2232                           ; 2 bytes @ 0x38
  2233  0000B8                     	ds	2
  2234  0000BA                     packageCompartment@doneB:
  2235                           	opt stack 0
  2236                           
  2237                           ; 2 bytes @ 0x3A
  2238  0000BA                     	ds	2
  2239  0000BC                     packageCompartment@doneN:
  2240                           	opt stack 0
  2241                           
  2242                           ; 2 bytes @ 0x3C
  2243  0000BC                     	ds	2
  2244  0000BE                     packageCompartment@doneS:
  2245                           	opt stack 0
  2246                           
  2247                           ; 2 bytes @ 0x3E
  2248  0000BE                     	ds	2
  2249  0000C0                     packageCompartment@doneW:
  2250                           	opt stack 0
  2251                           
  2252                           ; 2 bytes @ 0x40
  2253  0000C0                     	ds	2
  2254  0000C2                     packageCompartment@currTime:
  2255                           	opt stack 0
  2256                           
  2257                           ; 3 bytes @ 0x42
  2258  0000C2                     	ds	3
  2259  0000C5                     ??_packaging:
  2260                           
  2261                           ; 1 bytes @ 0x45
  2262  0000C5                     	ds	6
  2263  0000CB                     ??_mainMenu:
  2264                           
  2265                           ; 1 bytes @ 0x4B
  2266  0000CB                     	ds	4
  2267  0000CF                     mainMenu@operationTime:
  2268                           	opt stack 0
  2269                           
  2270                           ; 4 bytes @ 0x4F
  2271  0000CF                     	ds	4
  2272  0000D3                     mainMenu@startPress:
  2273                           	opt stack 0
  2274                           
  2275                           ; 2 bytes @ 0x53
  2276  0000D3                     	ds	2
  2277  0000D5                     mainMenu@needToPrint:
  2278                           	opt stack 0
  2279                           
  2280                           ; 2 bytes @ 0x55
  2281  0000D5                     	ds	2
  2282  0000D7                     mainMenu@pressed:
  2283                           	opt stack 0
  2284                           
  2285                           ; 2 bytes @ 0x57
  2286  0000D7                     	ds	2
  2287  0000D9                     mainMenu@i:
  2288                           	opt stack 0
  2289                           
  2290                           ; 2 bytes @ 0x59
  2291  0000D9                     	ds	2
  2292  0000DB                     ??_main:
  2293                           
  2294                           ; 1 bytes @ 0x5B
  2295  0000DB                     	ds	1
  2296                           tblptru	equ	0xFF8
  2297                           tblptrh	equ	0xFF7
  2298                           tblptrl	equ	0xFF6
  2299                           tablat	equ	0xFF5
  2300                           postinc0	equ	0xFEE
  2301                           wreg	equ	0xFE8
  2302                           postdec1	equ	0xFE5
  2303                           fsr1l	equ	0xFE1
  2304                           
  2305                           	psect	cstackCOMRAM
  2306  000001                     __pcstackCOMRAM:
  2307                           	opt stack 0
  2308  000001                     ?i2___ftpack:
  2309                           	opt stack 0
  2310  000001                     inverseDir@dir:
  2311                           	opt stack 0
  2312  000001                     i2___ftpack@arg:
  2313                           	opt stack 0
  2314                           
  2315                           ; 3 bytes @ 0x0
  2316  000001                     	ds	1
  2317  000002                     i2motorControl@dir:
  2318                           	opt stack 0
  2319                           
  2320                           ; 1 bytes @ 0x1
  2321  000002                     	ds	1
  2322  000003                     i2motorControl@motor:
  2323                           	opt stack 0
  2324                           
  2325                           ; 1 bytes @ 0x2
  2326  000003                     	ds	1
  2327  000004                     i2___ftpack@exp:
  2328                           	opt stack 0
  2329                           
  2330                           ; 1 bytes @ 0x3
  2331  000004                     	ds	1
  2332  000005                     i2___ftpack@sign:
  2333                           	opt stack 0
  2334                           
  2335                           ; 1 bytes @ 0x4
  2336  000005                     	ds	1
  2337  000006                     ??i2___ftpack:
  2338                           
  2339                           ; 1 bytes @ 0x5
  2340  000006                     	ds	3
  2341  000009                     ?i2___ftadd:
  2342                           	opt stack 0
  2343  000009                     i2___ftadd@f1:
  2344                           	opt stack 0
  2345                           
  2346                           ; 3 bytes @ 0x8
  2347  000009                     	ds	3
  2348  00000C                     i2___ftadd@f2:
  2349                           	opt stack 0
  2350                           
  2351                           ; 3 bytes @ 0xB
  2352  00000C                     	ds	3
  2353  00000F                     ??i2___ftadd:
  2354                           
  2355                           ; 1 bytes @ 0xE
  2356  00000F                     	ds	3
  2357  000012                     i2___ftadd@sign:
  2358                           	opt stack 0
  2359                           
  2360                           ; 1 bytes @ 0x11
  2361  000012                     	ds	1
  2362  000013                     i2___ftadd@exp2:
  2363                           	opt stack 0
  2364                           
  2365                           ; 1 bytes @ 0x12
  2366  000013                     	ds	1
  2367  000014                     i2___ftadd@exp1:
  2368                           	opt stack 0
  2369                           
  2370                           ; 1 bytes @ 0x13
  2371  000014                     	ds	1
  2372  000015                     ??_tmr0_ISR:
  2373                           
  2374                           ; 1 bytes @ 0x14
  2375  000015                     	ds	5
  2376  00001A                     tmr0_ISR@motorControlTimerB:
  2377                           	opt stack 0
  2378                           
  2379                           ; 2 bytes @ 0x19
  2380  00001A                     	ds	2
  2381  00001C                     tmr0_ISR@motorControlTimerN:
  2382                           	opt stack 0
  2383                           
  2384                           ; 2 bytes @ 0x1B
  2385  00001C                     	ds	2
  2386  00001E                     tmr0_ISR@motorControlTimerS:
  2387                           	opt stack 0
  2388                           
  2389                           ; 2 bytes @ 0x1D
  2390  00001E                     	ds	2
  2391  000020                     tmr0_ISR@motorControlTimerW:
  2392                           	opt stack 0
  2393                           
  2394                           ; 2 bytes @ 0x1F
  2395  000020                     	ds	2
  2396  000022                     ??_interruptHandler:
  2397                           
  2398                           ; 1 bytes @ 0x21
  2399  000022                     	ds	18
  2400                           tblptru	equ	0xFF8
  2401                           tblptrh	equ	0xFF7
  2402                           tblptrl	equ	0xFF6
  2403                           tablat	equ	0xFF5
  2404                           postinc0	equ	0xFEE
  2405                           wreg	equ	0xFE8
  2406                           postdec1	equ	0xFE5
  2407                           fsr1l	equ	0xFE1
  2408                           
  2409 ;;
  2410 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2411 ;;
  2412 ;; *************** function _main *****************
  2413 ;; Defined at:
  2414 ;;		line 279 in file "main.c"
  2415 ;; Parameters:    Size  Location     Type
  2416 ;;		None
  2417 ;; Auto vars:     Size  Location     Type
  2418 ;;		None
  2419 ;; Return value:  Size  Location     Type
  2420 ;;                  1    wreg      void 
  2421 ;; Registers used:
  2422 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2423 ;; Tracked objects:
  2424 ;;		On entry : 0/0
  2425 ;;		On exit  : 0/0
  2426 ;;		Unchanged: 0/0
  2427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2430 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2431 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2432 ;;Total ram usage:        1 bytes
  2433 ;; Hardware stack levels required when called:   10
  2434 ;; This function calls:
  2435 ;;		_I2C_Master_Init
  2436 ;;		_hibernate
  2437 ;;		_initLCD
  2438 ;;		_lcdInst
  2439 ;;		_mainMenu
  2440 ;;		_motorControl
  2441 ;;		_tmr0Init
  2442 ;; This function is called by:
  2443 ;;		Startup code after reset
  2444 ;; This function uses a non-reentrant model
  2445 ;;
  2446                           
  2447                           	psect	text0
  2448  002852                     __ptext0:
  2449                           	opt stack 0
  2450  002852                     _main:
  2451                           	opt stack 21
  2452                           
  2453                           ;main.c: 284: LATA = 0x00;
  2454                           
  2455                           ;incstack = 0
  2456  002852  0E00               	movlw	0
  2457  002854  6E89               	movwf	3977,c	;volatile
  2458                           
  2459                           ;main.c: 285: LATB = 0x00;
  2460  002856  0E00               	movlw	0
  2461  002858  6E8A               	movwf	3978,c	;volatile
  2462                           
  2463                           ;main.c: 286: LATC = 0x00;
  2464  00285A  0E00               	movlw	0
  2465  00285C  6E8B               	movwf	3979,c	;volatile
  2466                           
  2467                           ;main.c: 287: LATD = 0x00;
  2468  00285E  0E00               	movlw	0
  2469  002860  6E8C               	movwf	3980,c	;volatile
  2470                           
  2471                           ;main.c: 288: LATE = 0x00;
  2472  002862  0E00               	movlw	0
  2473  002864  6E8D               	movwf	3981,c	;volatile
  2474                           
  2475                           ;main.c: 291: TRISA = 0xFF;
  2476  002866  6892               	setf	3986,c	;volatile
  2477                           
  2478                           ;main.c: 292: TRISB = 0b11110111;
  2479  002868  0EF7               	movlw	247
  2480  00286A  6E93               	movwf	3987,c	;volatile
  2481                           
  2482                           ;main.c: 293: TRISC = 0x00;
  2483  00286C  0E00               	movlw	0
  2484  00286E  6E94               	movwf	3988,c	;volatile
  2485                           
  2486                           ;main.c: 294: TRISD = 0x00;
  2487  002870  0E00               	movlw	0
  2488  002872  6E95               	movwf	3989,c	;volatile
  2489                           
  2490                           ;main.c: 295: TRISE = 0x00;
  2491  002874  0E00               	movlw	0
  2492  002876  6E96               	movwf	3990,c	;volatile
  2493                           
  2494                           ;main.c: 297: ADCON0 = 0x00;
  2495  002878  0E00               	movlw	0
  2496  00287A  6EC2               	movwf	4034,c	;volatile
  2497                           
  2498                           ;main.c: 298: ADCON1 = 0x0F;
  2499  00287C  0E0F               	movlw	15
  2500  00287E  6EC1               	movwf	4033,c	;volatile
  2501                           
  2502                           ;main.c: 301: I2C_Master_Init(100000);
  2503  002880  0EA0               	movlw	160
  2504  002882  0100               	movlb	0	; () banked
  2505  002884  6F8D               	movwf	I2C_Master_Init@clockFreq& (0+255),b
  2506  002886  0E86               	movlw	134
  2507  002888  6F8E               	movwf	(I2C_Master_Init@clockFreq+1)& (0+255),b
  2508  00288A  0E01               	movlw	1
  2509  00288C  6F8F               	movwf	(I2C_Master_Init@clockFreq+2)& (0+255),b
  2510  00288E  0E00               	movlw	0
  2511  002890  6F90               	movwf	(I2C_Master_Init@clockFreq+3)& (0+255),b
  2512  002892  ECD0  F017         	call	_I2C_Master_Init	;wreg free
  2513                           
  2514                           ;main.c: 302: tmr0Init();
  2515  002896  EC49  F019         	call	_tmr0Init	;wreg free
  2516                           
  2517                           ;main.c: 303: initLCD();
  2518  00289A  EC00  F018         	call	_initLCD	;wreg free
  2519                           
  2520                           ;main.c: 305: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2521  00289E  0E01               	movlw	1
  2522  0028A0  EC83  F019         	call	_lcdInst
  2523  0028A4  0EC3               	movlw	195
  2524  0028A6  0100               	movlb	0	; () banked
  2525  0028A8  6FDB               	movwf	??_main& (0+255),b
  2526  0028AA  0ECD               	movlw	205
  2527  0028AC                     u7787:
  2528  0028AC  2EE8               	decfsz	wreg,f,c
  2529  0028AE  D7FE               	bra	u7787
  2530  0028B0  2FDB               	decfsz	??_main& (0+255),f,b
  2531  0028B2  D7FC               	bra	u7787
  2532                           
  2533                           ;main.c: 306: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2534  0028B4  0E80               	movlw	128
  2535  0028B6  EC83  F019         	call	_lcdInst
  2536  0028BA  0E41               	movlw	65
  2537  0028BC  0100               	movlb	0	; () banked
  2538  0028BE  6FDB               	movwf	??_main& (0+255),b
  2539  0028C0  0EEE               	movlw	238
  2540  0028C2                     u7797:
  2541  0028C2  2EE8               	decfsz	wreg,f,c
  2542  0028C4  D7FE               	bra	u7797
  2543  0028C6  2FDB               	decfsz	??_main& (0+255),f,b
  2544  0028C8  D7FC               	bra	u7797
  2545  0028CA  F000               	nop	
  2546                           
  2547                           ;main.c: 309: motorControl(BOLT, STOPMOTOR);
  2548  0028CC  0E02               	movlw	2
  2549  0028CE  0100               	movlb	0	; () banked
  2550  0028D0  6F80               	movwf	motorControl@dir& (0+255),b
  2551  0028D2  0E00               	movlw	0
  2552  0028D4  EC66  F013         	call	_motorControl
  2553                           
  2554                           ;main.c: 310: motorControl(NUT, STOPMOTOR);
  2555  0028D8  0E02               	movlw	2
  2556  0028DA  0100               	movlb	0	; () banked
  2557  0028DC  6F80               	movwf	motorControl@dir& (0+255),b
  2558  0028DE  0E01               	movlw	1
  2559  0028E0  EC66  F013         	call	_motorControl
  2560                           
  2561                           ;main.c: 311: motorControl(SPACER, STOPMOTOR);
  2562  0028E4  0E02               	movlw	2
  2563  0028E6  0100               	movlb	0	; () banked
  2564  0028E8  6F80               	movwf	motorControl@dir& (0+255),b
  2565  0028EA  0E02               	movlw	2
  2566  0028EC  EC66  F013         	call	_motorControl
  2567                           
  2568                           ;main.c: 312: motorControl(WASHER, STOPMOTOR);
  2569  0028F0  0E02               	movlw	2
  2570  0028F2  0100               	movlb	0	; () banked
  2571  0028F4  6F80               	movwf	motorControl@dir& (0+255),b
  2572  0028F6  0E03               	movlw	3
  2573  0028F8  EC66  F013         	call	_motorControl
  2574                           
  2575                           ;main.c: 321: hibernate();
  2576  0028FC  EC8B  F018         	call	_hibernate	;wreg free
  2577                           
  2578                           ;main.c: 322: mainMenu();
  2579  002900  ECF1  F00D         	call	_mainMenu	;wreg free
  2580  002904                     l186:
  2581  002904  D7FF               	goto	l186
  2582  002906                     __end_of_main:
  2583                           	opt stack 0
  2584                           tblptru	equ	0xFF8
  2585                           tblptrh	equ	0xFF7
  2586                           tblptrl	equ	0xFF6
  2587                           tablat	equ	0xFF5
  2588                           postinc0	equ	0xFEE
  2589                           wreg	equ	0xFE8
  2590                           postdec1	equ	0xFE5
  2591                           fsr1l	equ	0xFE1
  2592                           
  2593 ;; *************** function _tmr0Init *****************
  2594 ;; Defined at:
  2595 ;;		line 32 in file "timer.c"
  2596 ;; Parameters:    Size  Location     Type
  2597 ;;		None
  2598 ;; Auto vars:     Size  Location     Type
  2599 ;;		None
  2600 ;; Return value:  Size  Location     Type
  2601 ;;                  1    wreg      void 
  2602 ;; Registers used:
  2603 ;;		wreg, status,2
  2604 ;; Tracked objects:
  2605 ;;		On entry : 0/0
  2606 ;;		On exit  : 0/0
  2607 ;;		Unchanged: 0/0
  2608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2612 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2613 ;;Total ram usage:        0 bytes
  2614 ;; Hardware stack levels used:    1
  2615 ;; Hardware stack levels required when called:    4
  2616 ;; This function calls:
  2617 ;;		Nothing
  2618 ;; This function is called by:
  2619 ;;		_main
  2620 ;;		_Timer_startOperation
  2621 ;; This function uses a non-reentrant model
  2622 ;;
  2623                           
  2624                           	psect	text1
  2625  003292                     __ptext1:
  2626                           	opt stack 0
  2627  003292                     _tmr0Init:
  2628                           	opt stack 26
  2629                           
  2630                           ;timer.c: 41: if (!timerInit) {
  2631                           
  2632                           ;incstack = 0
  2633  003292  504A               	movf	_timerInit,w,c
  2634  003294  A4D8               	btfss	status,2,c
  2635  003296  0012               	return	
  2636                           
  2637                           ;timer.c: 42: T0CONbits.T08BIT = 0;
  2638  003298  9CD5               	bcf	4053,6,c	;volatile
  2639                           
  2640                           ;timer.c: 43: T0CONbits.T0CS = 0;
  2641  00329A  9AD5               	bcf	4053,5,c	;volatile
  2642                           
  2643                           ;timer.c: 44: T0CONbits.PSA = 0;
  2644  00329C  96D5               	bcf	4053,3,c	;volatile
  2645                           
  2646                           ;timer.c: 47: T0CONbits.T0PS2 = 1;
  2647  00329E  84D5               	bsf	4053,2,c	;volatile
  2648                           
  2649                           ;timer.c: 48: T0CONbits.T0PS1 = 1;
  2650  0032A0  82D5               	bsf	4053,1,c	;volatile
  2651                           
  2652                           ;timer.c: 49: T0CONbits.T0PS0 = 1;
  2653  0032A2  80D5               	bsf	4053,0,c	;volatile
  2654                           
  2655                           ;timer.c: 52: TMR0H = 0xF9;
  2656  0032A4  0EF9               	movlw	249
  2657  0032A6  6ED7               	movwf	4055,c	;volatile
  2658                           
  2659                           ;timer.c: 53: TMR0L = 0x5F;
  2660  0032A8  0E5F               	movlw	95
  2661  0032AA  6ED6               	movwf	4054,c	;volatile
  2662                           
  2663                           ;timer.c: 54: T0CONbits.TMR0ON = 1;
  2664  0032AC  8ED5               	bsf	4053,7,c	;volatile
  2665                           
  2666                           ;timer.c: 55: TMR0IE = 1;
  2667  0032AE  8AF2               	bsf	intcon,5,c	;volatile
  2668                           
  2669                           ;timer.c: 58: (INTCONbits.GIE = 1);
  2670  0032B0  8EF2               	bsf	intcon,7,c	;volatile
  2671  0032B2  0012               	return	
  2672  0032B4                     __end_of_tmr0Init:
  2673                           	opt stack 0
  2674                           tblptru	equ	0xFF8
  2675                           tblptrh	equ	0xFF7
  2676                           tblptrl	equ	0xFF6
  2677                           tablat	equ	0xFF5
  2678                           intcon	equ	0xFF2
  2679                           postinc0	equ	0xFEE
  2680                           wreg	equ	0xFE8
  2681                           postdec1	equ	0xFE5
  2682                           fsr1l	equ	0xFE1
  2683                           status	equ	0xFD8
  2684                           
  2685 ;; *************** function _mainMenu *****************
  2686 ;; Defined at:
  2687 ;;		line 174 in file "menu.c"
  2688 ;; Parameters:    Size  Location     Type
  2689 ;;		None
  2690 ;; Auto vars:     Size  Location     Type
  2691 ;;  operationTim    4   79[BANK0 ] long 
  2692 ;;  i               2   89[BANK0 ] int 
  2693 ;;  startPress      2   83[BANK0 ] int 
  2694 ;;  pressed         2   87[BANK0 ] int 
  2695 ;;  needToPrint     2   85[BANK0 ] int 
  2696 ;; Return value:  Size  Location     Type
  2697 ;;                  1    wreg      void 
  2698 ;; Registers used:
  2699 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2700 ;; Tracked objects:
  2701 ;;		On entry : 0/0
  2702 ;;		On exit  : 0/0
  2703 ;;		Unchanged: 0/0
  2704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2706 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2707 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2708 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2709 ;;Total ram usage:       16 bytes
  2710 ;; Hardware stack levels used:    1
  2711 ;; Hardware stack levels required when called:    9
  2712 ;; This function calls:
  2713 ;;		_I2C_Send
  2714 ;;		_RTC_getOperatingTime
  2715 ;;		_RTC_startOperation
  2716 ;;		_clearing
  2717 ;;		_hibernate
  2718 ;;		_inputEntry
  2719 ;;		_lcdInst
  2720 ;;		_packaging
  2721 ;;		_pollKeypad
  2722 ;;		_printStringLCD
  2723 ;;		_printf
  2724 ;;		_putch
  2725 ;;		_viewLogs
  2726 ;; This function is called by:
  2727 ;;		_main
  2728 ;; This function uses a non-reentrant model
  2729 ;;
  2730                           
  2731                           	psect	text2
  2732  001BE2                     __ptext2:
  2733                           	opt stack 0
  2734  001BE2                     _mainMenu:
  2735                           	opt stack 21
  2736                           
  2737                           ;menu.c: 175: int pressed;
  2738                           ;menu.c: 176: int needToPrint = 1;
  2739                           
  2740                           ;incstack = 0
  2741  001BE2  0E00               	movlw	0
  2742  001BE4  0100               	movlb	0	; () banked
  2743  001BE6  6FD6               	movwf	(mainMenu@needToPrint+1)& (0+255),b
  2744  001BE8  0E01               	movlw	1
  2745  001BEA  6FD5               	movwf	mainMenu@needToPrint& (0+255),b
  2746  001BEC                     
  2747                           ;menu.c: 179: if (needToPrint) {
  2748                           
  2749                           ; BSR set to: 0
  2750  001BEC  0100               	movlb	0	; () banked
  2751  001BEE  51D5               	movf	mainMenu@needToPrint& (0+255),w,b
  2752  001BF0  11D6               	iorwf	(mainMenu@needToPrint+1)& (0+255),w,b
  2753  001BF2  B4D8               	btfsc	status,2,c
  2754  001BF4  D00B               	goto	l435
  2755                           
  2756                           ; BSR set to: 0
  2757                           ;menu.c: 180: printStringLCD("0:Sleep 1:Begin \n2: View Logs");
  2758  001BF6  0E43               	movlw	low STR_19
  2759  001BF8  6F86               	movwf	printStringLCD@string& (0+255),b
  2760  001BFA  0EFE               	movlw	high STR_19
  2761  001BFC  6F87               	movwf	(printStringLCD@string+1)& (0+255),b
  2762  001BFE  ECBE  F00F         	call	_printStringLCD	;wreg free
  2763                           
  2764                           ;menu.c: 181: needToPrint = 0;
  2765  001C02  0E00               	movlw	0
  2766  001C04  0100               	movlb	0	; () banked
  2767  001C06  6FD6               	movwf	(mainMenu@needToPrint+1)& (0+255),b
  2768  001C08  0E00               	movlw	0
  2769  001C0A  6FD5               	movwf	mainMenu@needToPrint& (0+255),b
  2770  001C0C                     l435:
  2771                           
  2772                           ; BSR set to: 0
  2773                           ;menu.c: 182: }
  2774                           ;menu.c: 183: pressed = pollKeypad();
  2775                           
  2776                           ; BSR set to: 0
  2777  001C0C  ECE0  F018         	call	_pollKeypad	;wreg free
  2778  001C10  0100               	movlb	0	; () banked
  2779  001C12  6FCB               	movwf	??_mainMenu& (0+255),b
  2780  001C14  51CB               	movf	??_mainMenu& (0+255),w,b
  2781  001C16  6FD7               	movwf	mainMenu@pressed& (0+255),b
  2782  001C18  6BD8               	clrf	(mainMenu@pressed+1)& (0+255),b
  2783                           
  2784                           ; BSR set to: 0
  2785                           ;menu.c: 184: putch(pressed);
  2786  001C1A  51D7               	movf	mainMenu@pressed& (0+255),w,b
  2787  001C1C  EC77  F019         	call	_putch
  2788                           
  2789                           ;menu.c: 185: if (pressed - 48 == 0) {
  2790  001C20  0ED0               	movlw	208
  2791  001C22  0100               	movlb	0	; () banked
  2792  001C24  6FCB               	movwf	??_mainMenu& (0+255),b
  2793  001C26  0EFF               	movlw	255
  2794  001C28  6FCC               	movwf	(??_mainMenu+1)& (0+255),b
  2795  001C2A  C0D7  F0CD         	movff	mainMenu@pressed,??_mainMenu+2
  2796  001C2E  C0D8  F0CE         	movff	mainMenu@pressed+1,??_mainMenu+3
  2797  001C32  51CB               	movf	??_mainMenu& (0+255),w,b
  2798  001C34  27CD               	addwf	(??_mainMenu+2)& (0+255),f,b
  2799  001C36  51CC               	movf	(??_mainMenu+1)& (0+255),w,b
  2800  001C38  23CE               	addwfc	(??_mainMenu+3)& (0+255),f,b
  2801  001C3A  51CD               	movf	(??_mainMenu+2)& (0+255),w,b
  2802  001C3C  11CE               	iorwf	(??_mainMenu+3)& (0+255),w,b
  2803  001C3E  A4D8               	btfss	status,2,c
  2804  001C40  D003               	goto	l436
  2805                           
  2806                           ; BSR set to: 0
  2807                           ;menu.c: 186: hibernate();
  2808  001C42  EC8B  F018         	call	_hibernate	;wreg free
  2809  001C46  D7CD               	goto	_mainMenu
  2810  001C48                     l436:
  2811                           
  2812                           ; BSR set to: 0
  2813                           
  2814                           ; BSR set to: 0
  2815  001C48  0ED0               	movlw	208
  2816  001C4A  6FCB               	movwf	??_mainMenu& (0+255),b
  2817  001C4C  0EFF               	movlw	255
  2818  001C4E  6FCC               	movwf	(??_mainMenu+1)& (0+255),b
  2819  001C50  C0D7  F0CD         	movff	mainMenu@pressed,??_mainMenu+2
  2820  001C54  C0D8  F0CE         	movff	mainMenu@pressed+1,??_mainMenu+3
  2821  001C58  51CB               	movf	??_mainMenu& (0+255),w,b
  2822  001C5A  27CD               	addwf	(??_mainMenu+2)& (0+255),f,b
  2823  001C5C  51CC               	movf	(??_mainMenu+1)& (0+255),w,b
  2824  001C5E  23CE               	addwfc	(??_mainMenu+3)& (0+255),f,b
  2825  001C60  05CD               	decf	(??_mainMenu+2)& (0+255),w,b
  2826  001C62  11CE               	iorwf	(??_mainMenu+3)& (0+255),w,b
  2827  001C64  A4D8               	btfss	status,2,c
  2828  001C66  D175               	goto	l438
  2829                           
  2830                           ; BSR set to: 0
  2831                           ;menu.c: 189: inputEntry();
  2832  001C68  EC09  F000         	call	_inputEntry	;wreg free
  2833                           
  2834                           ;menu.c: 190: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2835  001C6C  0E01               	movlw	1
  2836  001C6E  EC83  F019         	call	_lcdInst
  2837  001C72  0EC3               	movlw	195
  2838  001C74  0100               	movlb	0	; () banked
  2839  001C76  6FCB               	movwf	??_mainMenu& (0+255),b
  2840  001C78  0ECD               	movlw	205
  2841  001C7A                     u7807:
  2842  001C7A  2EE8               	decfsz	wreg,f,c
  2843  001C7C  D7FE               	bra	u7807
  2844  001C7E  2FCB               	decfsz	??_mainMenu& (0+255),f,b
  2845  001C80  D7FC               	bra	u7807
  2846                           
  2847                           ;menu.c: 191: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2848  001C82  0E80               	movlw	128
  2849  001C84  EC83  F019         	call	_lcdInst
  2850  001C88  0E41               	movlw	65
  2851  001C8A  0100               	movlb	0	; () banked
  2852  001C8C  6FCB               	movwf	??_mainMenu& (0+255),b
  2853  001C8E  0EEE               	movlw	238
  2854  001C90                     u7817:
  2855  001C90  2EE8               	decfsz	wreg,f,c
  2856  001C92  D7FE               	bra	u7817
  2857  001C94  2FCB               	decfsz	??_mainMenu& (0+255),f,b
  2858  001C96  D7FC               	bra	u7817
  2859  001C98  F000               	nop	
  2860                           
  2861                           ;menu.c: 192: printf("Press 1 to start");
  2862  001C9A  0E12               	movlw	low STR_20
  2863  001C9C  0100               	movlb	0	; () banked
  2864  001C9E  6FA8               	movwf	printf@f& (0+255),b
  2865  001CA0  0EFF               	movlw	high STR_20
  2866  001CA2  6FA9               	movwf	(printf@f+1)& (0+255),b
  2867  001CA4  ECAA  F018         	call	_printf	;wreg free
  2868                           
  2869                           ;menu.c: 193: lcdInst(0xC0);;
  2870  001CA8  0EC0               	movlw	192
  2871  001CAA  EC83  F019         	call	_lcdInst
  2872                           
  2873                           ;menu.c: 194: printf("packaging");
  2874  001CAE  0EE4               	movlw	low (STR_22+9)
  2875  001CB0  0100               	movlb	0	; () banked
  2876  001CB2  6FA8               	movwf	printf@f& (0+255),b
  2877  001CB4  0EFE               	movlw	high (STR_22+9)
  2878  001CB6  6FA9               	movwf	(printf@f+1)& (0+255),b
  2879  001CB8  ECAA  F018         	call	_printf	;wreg free
  2880                           
  2881                           ;menu.c: 195: int startPress = pollKeypad();
  2882  001CBC  ECE0  F018         	call	_pollKeypad	;wreg free
  2883  001CC0  D002               	goto	L1
  2884  001CC2                     
  2885                           ; BSR set to: 0
  2886                           ;menu.c: 197: startPress = pollKeypad();
  2887                           
  2888                           ; BSR set to: 0
  2889  001CC2  ECE0  F018         	call	_pollKeypad	;wreg free
  2890  001CC6                     L1:
  2891  001CC6  0100               	movlb	0	; () banked
  2892  001CC8  6FCB               	movwf	??_mainMenu& (0+255),b
  2893  001CCA  51CB               	movf	??_mainMenu& (0+255),w,b
  2894  001CCC  6FD3               	movwf	mainMenu@startPress& (0+255),b
  2895  001CCE  6BD4               	clrf	(mainMenu@startPress+1)& (0+255),b
  2896                           
  2897                           ; BSR set to: 0
  2898                           
  2899                           ; BSR set to: 0
  2900  001CD0  0ED0               	movlw	208
  2901  001CD2  6FCB               	movwf	??_mainMenu& (0+255),b
  2902  001CD4  0EFF               	movlw	255
  2903  001CD6  6FCC               	movwf	(??_mainMenu+1)& (0+255),b
  2904  001CD8  C0D3  F0CD         	movff	mainMenu@startPress,??_mainMenu+2
  2905  001CDC  C0D4  F0CE         	movff	mainMenu@startPress+1,??_mainMenu+3
  2906  001CE0  51CB               	movf	??_mainMenu& (0+255),w,b
  2907  001CE2  27CD               	addwf	(??_mainMenu+2)& (0+255),f,b
  2908  001CE4  51CC               	movf	(??_mainMenu+1)& (0+255),w,b
  2909  001CE6  23CE               	addwfc	(??_mainMenu+3)& (0+255),f,b
  2910  001CE8  05CD               	decf	(??_mainMenu+2)& (0+255),w,b
  2911  001CEA  11CE               	iorwf	(??_mainMenu+3)& (0+255),w,b
  2912  001CEC  A4D8               	btfss	status,2,c
  2913  001CEE  D7E9               	goto	l440
  2914                           
  2915                           ; BSR set to: 0
  2916                           ;menu.c: 198: }
  2917                           ;menu.c: 199: RTC_startOperation();
  2918                           
  2919                           ; BSR set to: 0
  2920  001CF0  EC63  F016         	call	_RTC_startOperation	;wreg free
  2921                           
  2922                           ;menu.c: 200: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2923  001CF4  0E01               	movlw	1
  2924  001CF6  EC83  F019         	call	_lcdInst
  2925  001CFA  0EC3               	movlw	195
  2926  001CFC  0100               	movlb	0	; () banked
  2927  001CFE  6FCB               	movwf	??_mainMenu& (0+255),b
  2928  001D00  0ECD               	movlw	205
  2929  001D02                     u7827:
  2930  001D02  2EE8               	decfsz	wreg,f,c
  2931  001D04  D7FE               	bra	u7827
  2932  001D06  2FCB               	decfsz	??_mainMenu& (0+255),f,b
  2933  001D08  D7FC               	bra	u7827
  2934                           
  2935                           ;menu.c: 201: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2936  001D0A  0E80               	movlw	128
  2937  001D0C  EC83  F019         	call	_lcdInst
  2938  001D10  0E41               	movlw	65
  2939  001D12  0100               	movlb	0	; () banked
  2940  001D14  6FCB               	movwf	??_mainMenu& (0+255),b
  2941  001D16  0EEE               	movlw	238
  2942  001D18                     u7837:
  2943  001D18  2EE8               	decfsz	wreg,f,c
  2944  001D1A  D7FE               	bra	u7837
  2945  001D1C  2FCB               	decfsz	??_mainMenu& (0+255),f,b
  2946  001D1E  D7FC               	bra	u7837
  2947  001D20  F000               	nop	
  2948                           
  2949                           ;menu.c: 202: printf("Starting packaging");
  2950  001D22  0EDB               	movlw	low STR_22
  2951  001D24  0100               	movlb	0	; () banked
  2952  001D26  6FA8               	movwf	printf@f& (0+255),b
  2953  001D28  0EFE               	movlw	high STR_22
  2954  001D2A  6FA9               	movwf	(printf@f+1)& (0+255),b
  2955  001D2C  ECAA  F018         	call	_printf	;wreg free
  2956                           
  2957                           ;menu.c: 203: I2C_Send(nanoAddr, "\1Starting packaging\0");
  2958  001D30  0EC6               	movlw	low STR_23
  2959  001D32  0100               	movlb	0	; () banked
  2960  001D34  6F83               	movwf	I2C_Send@data& (0+255),b
  2961  001D36  0EFE               	movlw	high STR_23
  2962  001D38  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  2963  001D3A  0E3F               	movlw	low _nanoAddr
  2964  001D3C  6EF6               	movwf	tblptrl,c
  2965  001D3E                     	if	1	;There is more than 1 active tblptr byte
  2966  001D3E  0EFC               	movlw	high _nanoAddr
  2967  001D40  6EF7               	movwf	tblptrh,c
  2968  001D42                     	endif
  2969  001D42                     	if	1	;There are 3 active tblptr bytes
  2970  001D42  0E00               	movlw	low (_nanoAddr shr (0+16))
  2971  001D44  6EF8               	movwf	tblptru,c
  2972  001D46                     	endif
  2973  001D46  0008               	tblrd		*
  2974  001D48  50F5               	movf	tablat,w,c
  2975  001D4A  EC83  F015         	call	_I2C_Send
  2976                           
  2977                           ;menu.c: 204: packaging();
  2978  001D4E  EC38  F00A         	call	_packaging	;wreg free
  2979                           
  2980                           ;menu.c: 205: clearing();
  2981  001D52  ECB3  F003         	call	_clearing	;wreg free
  2982                           
  2983                           ;menu.c: 206: long operationTime = RTC_getOperatingTime();
  2984  001D56  ECCE  F012         	call	_RTC_getOperatingTime	;wreg free
  2985  001D5A  0100               	movlb	0	; () banked
  2986  001D5C  C086  F0CF         	movff	?_RTC_getOperatingTime,mainMenu@operationTime
  2987  001D60  C087  F0D0         	movff	?_RTC_getOperatingTime+1,mainMenu@operationTime+1
  2988  001D64  0E00               	movlw	0
  2989  001D66  BFD0               	btfsc	(mainMenu@operationTime+1)& (0+255),7,b
  2990  001D68  0EFF               	movlw	-1
  2991  001D6A  6FD1               	movwf	(mainMenu@operationTime+2)& (0+255),b
  2992  001D6C  6FD2               	movwf	(mainMenu@operationTime+3)& (0+255),b
  2993                           
  2994                           ; BSR set to: 0
  2995                           ;menu.c: 208: printf("Summary:");
  2996  001D6E  0EE5               	movlw	low STR_24
  2997  001D70  6FA8               	movwf	printf@f& (0+255),b
  2998  001D72  0EFF               	movlw	high STR_24
  2999  001D74  6FA9               	movwf	(printf@f+1)& (0+255),b
  3000  001D76  ECAA  F018         	call	_printf	;wreg free
  3001                           
  3002                           ;menu.c: 209: _delay((unsigned long)((1000)*(40000000/4000.0)));
  3003  001D7A  0E33               	movlw	51
  3004  001D7C  0100               	movlb	0	; () banked
  3005  001D7E  6FCC               	movwf	(??_mainMenu+1)& (0+255),b
  3006  001D80  0EBB               	movlw	187
  3007  001D82  6FCB               	movwf	??_mainMenu& (0+255),b
  3008  001D84  0EDF               	movlw	223
  3009  001D86                     u7847:
  3010  001D86  2EE8               	decfsz	wreg,f,c
  3011  001D88  D7FE               	bra	u7847
  3012  001D8A  2FCB               	decfsz	??_mainMenu& (0+255),f,b
  3013  001D8C  D7FC               	bra	u7847
  3014  001D8E  2FCC               	decfsz	(??_mainMenu+1)& (0+255),f,b
  3015  001D90  D7FA               	bra	u7847
  3016  001D92  D000               	nop2	
  3017  001D94                     
  3018                           ;menu.c: 212: for (i = 0; i < 8; i++) {
  3019  001D94  0E00               	movlw	0
  3020  001D96  0100               	movlb	0	; () banked
  3021  001D98  6FDA               	movwf	(mainMenu@i+1)& (0+255),b
  3022  001D9A  0E00               	movlw	0
  3023  001D9C  6FD9               	movwf	mainMenu@i& (0+255),b
  3024  001D9E                     l6208:
  3025                           
  3026                           ; BSR set to: 0
  3027  001D9E  BFDA               	btfsc	(mainMenu@i+1)& (0+255),7,b
  3028  001DA0  D006               	goto	l443
  3029  001DA2  51DA               	movf	(mainMenu@i+1)& (0+255),w,b
  3030  001DA4  E155               	bnz	l6226
  3031  001DA6  0E08               	movlw	8
  3032  001DA8  5DD9               	subwf	mainMenu@i& (0+255),w,b
  3033  001DAA  B0D8               	btfsc	status,0,c
  3034  001DAC  D051               	goto	u7740
  3035  001DAE                     l443:
  3036                           
  3037                           ; BSR set to: 0
  3038                           ;menu.c: 213: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3039                           
  3040                           ; BSR set to: 0
  3041  001DAE  0E01               	movlw	1
  3042  001DB0  EC83  F019         	call	_lcdInst
  3043  001DB4  0EC3               	movlw	195
  3044  001DB6  0100               	movlb	0	; () banked
  3045  001DB8  6FCB               	movwf	??_mainMenu& (0+255),b
  3046  001DBA  0ECD               	movlw	205
  3047  001DBC                     u7857:
  3048  001DBC  2EE8               	decfsz	wreg,f,c
  3049  001DBE  D7FE               	bra	u7857
  3050  001DC0  2FCB               	decfsz	??_mainMenu& (0+255),f,b
  3051  001DC2  D7FC               	bra	u7857
  3052                           
  3053                           ;menu.c: 214: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3054  001DC4  0E80               	movlw	128
  3055  001DC6  EC83  F019         	call	_lcdInst
  3056  001DCA  0E41               	movlw	65
  3057  001DCC  0100               	movlb	0	; () banked
  3058  001DCE  6FCB               	movwf	??_mainMenu& (0+255),b
  3059  001DD0  0EEE               	movlw	238
  3060  001DD2                     u7867:
  3061  001DD2  2EE8               	decfsz	wreg,f,c
  3062  001DD4  D7FE               	bra	u7867
  3063  001DD6  2FCB               	decfsz	??_mainMenu& (0+255),f,b
  3064  001DD8  D7FC               	bra	u7867
  3065  001DDA  F000               	nop	
  3066                           
  3067                           ;menu.c: 215: printf("C%d: %s x%d", i+1, fSLookup[params.toFill[i]], params.setMultiple[
      +                          i]);
  3068  001DDC  0ECE               	movlw	low STR_25
  3069  001DDE  0100               	movlb	0	; () banked
  3070  001DE0  6FA8               	movwf	printf@f& (0+255),b
  3071  001DE2  0EFF               	movlw	high STR_25
  3072  001DE4  6FA9               	movwf	(printf@f+1)& (0+255),b
  3073  001DE6  0E01               	movlw	1
  3074  001DE8  25D9               	addwf	mainMenu@i& (0+255),w,b
  3075  001DEA  6FAA               	movwf	(?_printf+2)& (0+255),b
  3076  001DEC  0E00               	movlw	0
  3077  001DEE  21DA               	addwfc	(mainMenu@i+1)& (0+255),w,b
  3078  001DF0  6FAB               	movwf	(?_printf+3)& (0+255),b
  3079  001DF2  0EBE               	movlw	low (_params+2)
  3080  001DF4  25D9               	addwf	mainMenu@i& (0+255),w,b
  3081  001DF6  6ED9               	movwf	fsr2l,c
  3082  001DF8  0E01               	movlw	high (_params+2)
  3083  001DFA  21DA               	addwfc	(mainMenu@i+1)& (0+255),w,b
  3084  001DFC  6EDA               	movwf	fsr2h,c
  3085  001DFE  50DF               	movf	indf2,w,c
  3086  001E00  6FCB               	movwf	??_mainMenu& (0+255),b
  3087  001E02  51CB               	movf	??_mainMenu& (0+255),w,b
  3088  001E04  0D05               	mullw	5
  3089  001E06  0E00               	movlw	low _fSLookup
  3090  001E08  24F3               	addwf	prodl,w,c
  3091  001E0A  6FAC               	movwf	(?_printf+4)& (0+255),b
  3092  001E0C  0E02               	movlw	high _fSLookup
  3093  001E0E  20F4               	addwfc	prodh,w,c
  3094  001E10  6FAD               	movwf	(?_printf+5)& (0+255),b
  3095  001E12  90D8               	bcf	status,0,c
  3096  001E14  35D9               	rlcf	mainMenu@i& (0+255),w,b
  3097  001E16  6ED9               	movwf	fsr2l,c
  3098  001E18  35DA               	rlcf	(mainMenu@i+1)& (0+255),w,b
  3099  001E1A  6EDA               	movwf	fsr2h,c
  3100  001E1C  0EC6               	movlw	low (_params+10)
  3101  001E1E  26D9               	addwf	fsr2l,f,c
  3102  001E20  0E01               	movlw	high (_params+10)
  3103  001E22  22DA               	addwfc	fsr2h,f,c
  3104  001E24  CFDE F0AE          	movff	postinc2,?_printf+6
  3105  001E28  CFDD F0AF          	movff	postdec2,?_printf+7
  3106  001E2C  ECAA  F018         	call	_printf	;wreg free
  3107                           
  3108                           ;menu.c: 216: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3109  001E30  0E66               	movlw	102
  3110  001E32  0100               	movlb	0	; () banked
  3111  001E34  6FCC               	movwf	(??_mainMenu+1)& (0+255),b
  3112  001E36  0E76               	movlw	118
  3113  001E38  6FCB               	movwf	??_mainMenu& (0+255),b
  3114  001E3A  0EC1               	movlw	193
  3115  001E3C                     u7877:
  3116  001E3C  2EE8               	decfsz	wreg,f,c
  3117  001E3E  D7FE               	bra	u7877
  3118  001E40  2FCB               	decfsz	??_mainMenu& (0+255),f,b
  3119  001E42  D7FC               	bra	u7877
  3120  001E44  2FCC               	decfsz	(??_mainMenu+1)& (0+255),f,b
  3121  001E46  D7FA               	bra	u7877
  3122  001E48  0100               	movlb	0	; () banked
  3123  001E4A  4BD9               	infsnz	mainMenu@i& (0+255),f,b
  3124  001E4C  2BDA               	incf	(mainMenu@i+1)& (0+255),f,b
  3125  001E4E  D7A7               	goto	l6208
  3126  001E50                     u7740:
  3127  001E50                     l6226:
  3128                           
  3129                           ; BSR set to: 0
  3130                           ;menu.c: 217: }
  3131                           ;menu.c: 219: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3132  001E50  0E01               	movlw	1
  3133  001E52  EC83  F019         	call	_lcdInst
  3134  001E56  0EC3               	movlw	195
  3135  001E58  0100               	movlb	0	; () banked
  3136  001E5A  6FCB               	movwf	??_mainMenu& (0+255),b
  3137  001E5C  0ECD               	movlw	205
  3138  001E5E                     u7887:
  3139  001E5E  2EE8               	decfsz	wreg,f,c
  3140  001E60  D7FE               	bra	u7887
  3141  001E62  2FCB               	decfsz	??_mainMenu& (0+255),f,b
  3142  001E64  D7FC               	bra	u7887
  3143                           
  3144                           ;menu.c: 220: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3145  001E66  0E80               	movlw	128
  3146  001E68  EC83  F019         	call	_lcdInst
  3147  001E6C  0E41               	movlw	65
  3148  001E6E  0100               	movlb	0	; () banked
  3149  001E70  6FCB               	movwf	??_mainMenu& (0+255),b
  3150  001E72  0EEE               	movlw	238
  3151  001E74                     u7897:
  3152  001E74  2EE8               	decfsz	wreg,f,c
  3153  001E76  D7FE               	bra	u7897
  3154  001E78  2FCB               	decfsz	??_mainMenu& (0+255),f,b
  3155  001E7A  D7FC               	bra	u7897
  3156  001E7C  F000               	nop	
  3157                           
  3158                           ;menu.c: 221: printf("Remaining:");
  3159  001E7E  0EDA               	movlw	low STR_26
  3160  001E80  0100               	movlb	0	; () banked
  3161  001E82  6FA8               	movwf	printf@f& (0+255),b
  3162  001E84  0EFF               	movlw	high STR_26
  3163  001E86  6FA9               	movwf	(printf@f+1)& (0+255),b
  3164  001E88  ECAA  F018         	call	_printf	;wreg free
  3165                           
  3166                           ;menu.c: 222: lcdInst(0xC0);;
  3167  001E8C  0EC0               	movlw	192
  3168  001E8E  EC83  F019         	call	_lcdInst
  3169                           
  3170                           ;menu.c: 223: printf("B%d N%d S%d W%d", extras.b, extras.n, extras.s, extras.w);
  3171  001E92  0E67               	movlw	low STR_27
  3172  001E94  0100               	movlb	0	; () banked
  3173  001E96  6FA8               	movwf	printf@f& (0+255),b
  3174  001E98  0EFF               	movlw	high STR_27
  3175  001E9A  6FA9               	movwf	(printf@f+1)& (0+255),b
  3176  001E9C  C0E4  F0AA         	movff	_extras,?_printf+2
  3177  001EA0  C0E5  F0AB         	movff	_extras+1,?_printf+3
  3178  001EA4  C0E6  F0AC         	movff	_extras+2,?_printf+4
  3179  001EA8  C0E7  F0AD         	movff	_extras+3,?_printf+5
  3180  001EAC  C0E8  F0AE         	movff	_extras+4,?_printf+6
  3181  001EB0  C0E9  F0AF         	movff	_extras+5,?_printf+7
  3182  001EB4  C0EA  F0B0         	movff	_extras+6,?_printf+8
  3183  001EB8  C0EB  F0B1         	movff	_extras+7,?_printf+9
  3184  001EBC  ECAA  F018         	call	_printf	;wreg free
  3185                           
  3186                           ;menu.c: 224: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3187  001EC0  0E66               	movlw	102
  3188  001EC2  0100               	movlb	0	; () banked
  3189  001EC4  6FCC               	movwf	(??_mainMenu+1)& (0+255),b
  3190  001EC6  0E76               	movlw	118
  3191  001EC8  6FCB               	movwf	??_mainMenu& (0+255),b
  3192  001ECA  0EC1               	movlw	193
  3193  001ECC                     u7907:
  3194  001ECC  2EE8               	decfsz	wreg,f,c
  3195  001ECE  D7FE               	bra	u7907
  3196  001ED0  2FCB               	decfsz	??_mainMenu& (0+255),f,b
  3197  001ED2  D7FC               	bra	u7907
  3198  001ED4  2FCC               	decfsz	(??_mainMenu+1)& (0+255),f,b
  3199  001ED6  D7FA               	bra	u7907
  3200                           
  3201                           ;menu.c: 225: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3202  001ED8  0E01               	movlw	1
  3203  001EDA  EC83  F019         	call	_lcdInst
  3204  001EDE  0EC3               	movlw	195
  3205  001EE0  0100               	movlb	0	; () banked
  3206  001EE2  6FCB               	movwf	??_mainMenu& (0+255),b
  3207  001EE4  0ECD               	movlw	205
  3208  001EE6                     u7917:
  3209  001EE6  2EE8               	decfsz	wreg,f,c
  3210  001EE8  D7FE               	bra	u7917
  3211  001EEA  2FCB               	decfsz	??_mainMenu& (0+255),f,b
  3212  001EEC  D7FC               	bra	u7917
  3213                           
  3214                           ;menu.c: 226: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3215  001EEE  0E80               	movlw	128
  3216  001EF0  EC83  F019         	call	_lcdInst
  3217  001EF4  0E41               	movlw	65
  3218  001EF6  0100               	movlb	0	; () banked
  3219  001EF8  6FCB               	movwf	??_mainMenu& (0+255),b
  3220  001EFA  0EEE               	movlw	238
  3221  001EFC                     u7927:
  3222  001EFC  2EE8               	decfsz	wreg,f,c
  3223  001EFE  D7FE               	bra	u7927
  3224  001F00  2FCB               	decfsz	??_mainMenu& (0+255),f,b
  3225  001F02  D7FC               	bra	u7927
  3226  001F04  F000               	nop	
  3227                           
  3228                           ;menu.c: 227: printf("Time:");
  3229  001F06  0EF5               	movlw	low STR_28
  3230  001F08  0100               	movlb	0	; () banked
  3231  001F0A  6FA8               	movwf	printf@f& (0+255),b
  3232  001F0C  0EFF               	movlw	high STR_28
  3233  001F0E  6FA9               	movwf	(printf@f+1)& (0+255),b
  3234  001F10  ECAA  F018         	call	_printf	;wreg free
  3235                           
  3236                           ;menu.c: 228: lcdInst(0xC0);;
  3237  001F14  0EC0               	movlw	192
  3238  001F16  EC83  F019         	call	_lcdInst
  3239                           
  3240                           ;menu.c: 229: printf("%ld", operationTime);
  3241  001F1A  0EFB               	movlw	low STR_29
  3242  001F1C  0100               	movlb	0	; () banked
  3243  001F1E  6FA8               	movwf	printf@f& (0+255),b
  3244  001F20  0EFF               	movlw	high STR_29
  3245  001F22  6FA9               	movwf	(printf@f+1)& (0+255),b
  3246  001F24  C0CF  F0AA         	movff	mainMenu@operationTime,?_printf+2
  3247  001F28  C0D0  F0AB         	movff	mainMenu@operationTime+1,?_printf+3
  3248  001F2C  C0D1  F0AC         	movff	mainMenu@operationTime+2,?_printf+4
  3249  001F30  C0D2  F0AD         	movff	mainMenu@operationTime+3,?_printf+5
  3250  001F34  ECAA  F018         	call	_printf	;wreg free
  3251                           
  3252                           ;menu.c: 230: _delay((unsigned long)((2000)*(40000000/4000.0)));
  3253  001F38  0E66               	movlw	102
  3254  001F3A  0100               	movlb	0	; () banked
  3255  001F3C  6FCC               	movwf	(??_mainMenu+1)& (0+255),b
  3256  001F3E  0E76               	movlw	118
  3257  001F40  6FCB               	movwf	??_mainMenu& (0+255),b
  3258  001F42  0EC1               	movlw	193
  3259  001F44                     u7937:
  3260  001F44  2EE8               	decfsz	wreg,f,c
  3261  001F46  D7FE               	bra	u7937
  3262  001F48  2FCB               	decfsz	??_mainMenu& (0+255),f,b
  3263  001F4A  D7FC               	bra	u7937
  3264  001F4C  2FCC               	decfsz	(??_mainMenu+1)& (0+255),f,b
  3265  001F4E  D7FA               	bra	u7937
  3266  001F50  D721               	goto	l442
  3267  001F52                     l438:
  3268  001F52  0ED0               	movlw	208
  3269  001F54  0100               	movlb	0	; () banked
  3270  001F56  6FCB               	movwf	??_mainMenu& (0+255),b
  3271  001F58  0EFF               	movlw	255
  3272  001F5A  6FCC               	movwf	(??_mainMenu+1)& (0+255),b
  3273  001F5C  C0D7  F0CD         	movff	mainMenu@pressed,??_mainMenu+2
  3274  001F60  C0D8  F0CE         	movff	mainMenu@pressed+1,??_mainMenu+3
  3275  001F64  51CB               	movf	??_mainMenu& (0+255),w,b
  3276  001F66  27CD               	addwf	(??_mainMenu+2)& (0+255),f,b
  3277  001F68  51CC               	movf	(??_mainMenu+1)& (0+255),w,b
  3278  001F6A  23CE               	addwfc	(??_mainMenu+3)& (0+255),f,b
  3279  001F6C  0E02               	movlw	2
  3280  001F6E  19CD               	xorwf	(??_mainMenu+2)& (0+255),w,b
  3281  001F70  11CE               	iorwf	(??_mainMenu+3)& (0+255),w,b
  3282  001F72  A4D8               	btfss	status,2,c
  3283  001F74  D63B               	goto	l434
  3284                           
  3285                           ; BSR set to: 0
  3286                           ;menu.c: 234: viewLogs();
  3287  001F76  EC0E  F019         	call	_viewLogs	;wreg free
  3288  001F7A  D633               	goto	_mainMenu
  3289  001F7C                     __end_of_mainMenu:
  3290                           	opt stack 0
  3291                           tblptru	equ	0xFF8
  3292                           tblptrh	equ	0xFF7
  3293                           tblptrl	equ	0xFF6
  3294                           tablat	equ	0xFF5
  3295                           prodh	equ	0xFF4
  3296                           prodl	equ	0xFF3
  3297                           intcon	equ	0xFF2
  3298                           postinc0	equ	0xFEE
  3299                           wreg	equ	0xFE8
  3300                           postdec1	equ	0xFE5
  3301                           fsr1l	equ	0xFE1
  3302                           indf2	equ	0xFDF
  3303                           postinc2	equ	0xFDE
  3304                           postdec2	equ	0xFDD
  3305                           fsr2h	equ	0xFDA
  3306                           fsr2l	equ	0xFD9
  3307                           status	equ	0xFD8
  3308                           
  3309 ;; *************** function _viewLogs *****************
  3310 ;; Defined at:
  3311 ;;		line 22 in file "menu.c"
  3312 ;; Parameters:    Size  Location     Type
  3313 ;;		None
  3314 ;; Auto vars:     Size  Location     Type
  3315 ;;  pressed         2   22[BANK0 ] int 
  3316 ;; Return value:  Size  Location     Type
  3317 ;;                  1    wreg      void 
  3318 ;; Registers used:
  3319 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3320 ;; Tracked objects:
  3321 ;;		On entry : 0/0
  3322 ;;		On exit  : 0/0
  3323 ;;		Unchanged: 0/0
  3324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3326 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3327 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3328 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3329 ;;Total ram usage:        3 bytes
  3330 ;; Hardware stack levels used:    1
  3331 ;; Hardware stack levels required when called:    7
  3332 ;; This function calls:
  3333 ;;		_pollKeypad
  3334 ;;		_printStringLCD
  3335 ;; This function is called by:
  3336 ;;		_mainMenu
  3337 ;; This function uses a non-reentrant model
  3338 ;;
  3339                           
  3340                           	psect	text3
  3341  00321C                     __ptext3:
  3342                           	opt stack 0
  3343  00321C                     _viewLogs:
  3344                           	opt stack 22
  3345                           
  3346                           ;menu.c: 23: printStringLCD("Not there yet\n* to return");
  3347                           
  3348                           ; BSR set to: 0
  3349                           ;incstack = 0
  3350  00321C  0E7D               	movlw	low STR_16
  3351  00321E  0100               	movlb	0	; () banked
  3352  003220  6F86               	movwf	printStringLCD@string& (0+255),b
  3353  003222  0EFE               	movlw	high STR_16
  3354  003224  6F87               	movwf	(printStringLCD@string+1)& (0+255),b
  3355  003226  ECBE  F00F         	call	_printStringLCD	;wreg free
  3356  00322A                     
  3357                           ;menu.c: 25: int pressed = pollKeypad();
  3358  00322A  ECE0  F018         	call	_pollKeypad	;wreg free
  3359  00322E  0100               	movlb	0	; () banked
  3360  003230  6F95               	movwf	??_viewLogs& (0+255),b
  3361  003232  5195               	movf	??_viewLogs& (0+255),w,b
  3362  003234  6F96               	movwf	viewLogs@pressed& (0+255),b
  3363  003236  6B97               	clrf	(viewLogs@pressed+1)& (0+255),b
  3364                           
  3365                           ; BSR set to: 0
  3366                           ;menu.c: 26: if (pressed == 42) return;
  3367  003238  0E2A               	movlw	42
  3368  00323A  1996               	xorwf	viewLogs@pressed& (0+255),w,b
  3369  00323C  1197               	iorwf	(viewLogs@pressed+1)& (0+255),w,b
  3370  00323E  B4D8               	btfsc	status,2,c
  3371  003240  0012               	return	
  3372  003242  D7F3               	goto	l360
  3373  003244                     __end_of_viewLogs:
  3374                           	opt stack 0
  3375                           tblptru	equ	0xFF8
  3376                           tblptrh	equ	0xFF7
  3377                           tblptrl	equ	0xFF6
  3378                           tablat	equ	0xFF5
  3379                           prodh	equ	0xFF4
  3380                           prodl	equ	0xFF3
  3381                           intcon	equ	0xFF2
  3382                           postinc0	equ	0xFEE
  3383                           wreg	equ	0xFE8
  3384                           postdec1	equ	0xFE5
  3385                           fsr1l	equ	0xFE1
  3386                           indf2	equ	0xFDF
  3387                           postinc2	equ	0xFDE
  3388                           postdec2	equ	0xFDD
  3389                           fsr2h	equ	0xFDA
  3390                           fsr2l	equ	0xFD9
  3391                           status	equ	0xFD8
  3392                           
  3393 ;; *************** function _packaging *****************
  3394 ;; Defined at:
  3395 ;;		line 116 in file "main.c"
  3396 ;; Parameters:    Size  Location     Type
  3397 ;;		None
  3398 ;; Auto vars:     Size  Location     Type
  3399 ;;  instr           2  118[BANK1 ] unsigned char [2]
  3400 ;;  msg3           50   34[BANK1 ] unsigned char [50]
  3401 ;;  msg            34    0[BANK1 ] unsigned char [34]
  3402 ;;  msg2           32   84[BANK1 ] unsigned char [32]
  3403 ;;  mult            2  122[BANK1 ] int 
  3404 ;;  set             2  120[BANK1 ] PTR unsigned char 
  3405 ;;		 -> fastenerMatrix(84), 
  3406 ;;  compartmentN    2  124[BANK1 ] int 
  3407 ;;  instr           2  116[BANK1 ] unsigned char [2]
  3408 ;; Return value:  Size  Location     Type
  3409 ;;                  1    wreg      void 
  3410 ;; Registers used:
  3411 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3412 ;; Tracked objects:
  3413 ;;		On entry : 0/0
  3414 ;;		On exit  : 0/0
  3415 ;;		Unchanged: 0/0
  3416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3418 ;;      Locals:         0       0     126       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3419 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3420 ;;      Totals:         0       6     126       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3421 ;;Total ram usage:      132 bytes
  3422 ;; Hardware stack levels used:    1
  3423 ;; Hardware stack levels required when called:    8
  3424 ;; This function calls:
  3425 ;;		_I2C_Send
  3426 ;;		___wmul
  3427 ;;		_lcdInst
  3428 ;;		_packageCompartment
  3429 ;;		_printf
  3430 ;;		_sprintf
  3431 ;; This function is called by:
  3432 ;;		_mainMenu
  3433 ;; This function uses a non-reentrant model
  3434 ;;
  3435                           
  3436                           	psect	text4
  3437  001470                     __ptext4:
  3438                           	opt stack 0
  3439  001470                     _packaging:
  3440                           	opt stack 21
  3441                           
  3442                           ;main.c: 117: int compartmentNum;
  3443                           ;main.c: 122: dispensed.b = 0;
  3444                           
  3445                           ; BSR set to: 0
  3446                           ;incstack = 0
  3447  001470  0E00               	movlw	0
  3448  001472  0100               	movlb	0	; () banked
  3449  001474  6FDD               	movwf	(_dispensed+1)& (0+255),b
  3450  001476  0E00               	movlw	0
  3451  001478  6FDC               	movwf	_dispensed& (0+255),b
  3452                           
  3453                           ;main.c: 123: dispensed.n = 0;
  3454  00147A  0E00               	movlw	0
  3455  00147C  6FDF               	movwf	(_dispensed+3)& (0+255),b
  3456  00147E  0E00               	movlw	0
  3457  001480  6FDE               	movwf	(_dispensed+2)& (0+255),b
  3458                           
  3459                           ;main.c: 124: dispensed.s = 0;
  3460  001482  0E00               	movlw	0
  3461  001484  6FE1               	movwf	(_dispensed+5)& (0+255),b
  3462  001486  0E00               	movlw	0
  3463  001488  6FE0               	movwf	(_dispensed+4)& (0+255),b
  3464                           
  3465                           ;main.c: 125: dispensed.w = 0;
  3466  00148A  0E00               	movlw	0
  3467  00148C  6FE3               	movwf	(_dispensed+7)& (0+255),b
  3468  00148E  0E00               	movlw	0
  3469  001490  6FE2               	movwf	(_dispensed+6)& (0+255),b
  3470                           
  3471                           ; BSR set to: 0
  3472                           ;main.c: 127: I2C_Send(nanoAddr, "\1Entered the packaging function\0");
  3473  001492  0E22               	movlw	low STR_7
  3474  001494  6F83               	movwf	I2C_Send@data& (0+255),b
  3475  001496  0EFE               	movlw	high STR_7
  3476  001498  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  3477  00149A  0E3F               	movlw	low _nanoAddr
  3478  00149C  6EF6               	movwf	tblptrl,c
  3479  00149E                     	if	1	;There is more than 1 active tblptr byte
  3480  00149E  0EFC               	movlw	high _nanoAddr
  3481  0014A0  6EF7               	movwf	tblptrh,c
  3482  0014A2                     	endif
  3483  0014A2                     	if	1	;There are 3 active tblptr bytes
  3484  0014A2  0E00               	movlw	low (_nanoAddr shr (0+16))
  3485  0014A4  6EF8               	movwf	tblptru,c
  3486  0014A6                     	endif
  3487  0014A6  0008               	tblrd		*
  3488  0014A8  50F5               	movf	tablat,w,c
  3489  0014AA  EC83  F015         	call	_I2C_Send
  3490                           
  3491                           ;main.c: 128: char instr[2] = {8, 0};
  3492  0014AE  C1BA  F174         	movff	packaging@F3226,packaging@instr
  3493  0014B2  C1BB  F175         	movff	packaging@F3226+1,packaging@instr+1
  3494                           
  3495                           ;main.c: 129: I2C_Send(nanoAddr, &instr);
  3496  0014B6  0E74               	movlw	low packaging@instr
  3497  0014B8  0100               	movlb	0	; () banked
  3498  0014BA  6F83               	movwf	I2C_Send@data& (0+255),b
  3499  0014BC  0E01               	movlw	high packaging@instr
  3500  0014BE  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  3501  0014C0  0E3F               	movlw	low _nanoAddr
  3502  0014C2  6EF6               	movwf	tblptrl,c
  3503  0014C4                     	if	1	;There is more than 1 active tblptr byte
  3504  0014C4  0EFC               	movlw	high _nanoAddr
  3505  0014C6  6EF7               	movwf	tblptrh,c
  3506  0014C8                     	endif
  3507  0014C8                     	if	1	;There are 3 active tblptr bytes
  3508  0014C8  0E00               	movlw	low (_nanoAddr shr (0+16))
  3509  0014CA  6EF8               	movwf	tblptru,c
  3510  0014CC                     	endif
  3511  0014CC  0008               	tblrd		*
  3512  0014CE  50F5               	movf	tablat,w,c
  3513  0014D0  EC83  F015         	call	_I2C_Send
  3514  0014D4  BA80               	btfsc	3968,5,c	;volatile
  3515  0014D6  D7FE               	goto	l122
  3516                           
  3517                           ;main.c: 133: for (compartmentNum = 8; compartmentNum > 0; compartmentNum--) {
  3518  0014D8  0E00               	movlw	0
  3519  0014DA  0101               	movlb	1	; () banked
  3520  0014DC  6F7D               	movwf	(packaging@compartmentNum+1)& (0+255),b
  3521  0014DE  0E08               	movlw	8
  3522  0014E0  6F7C               	movwf	packaging@compartmentNum& (0+255),b
  3523                           
  3524                           ; BSR set to: 1
  3525  0014E2  BF7D               	btfsc	(packaging@compartmentNum+1)& (0+255),7,b
  3526  0014E4  0012               	return	
  3527  0014E6  517D               	movf	(packaging@compartmentNum+1)& (0+255),w,b
  3528  0014E8  E103               	bnz	l5656
  3529  0014EA  057C               	decf	packaging@compartmentNum& (0+255),w,b
  3530  0014EC  A0D8               	btfss	status,0,c
  3531  0014EE  0012               	return	
  3532  0014F0                     l5656:
  3533                           
  3534                           ; BSR set to: 1
  3535                           ;main.c: 134: char msg[] = "\1Started packaging compartment x\0";
  3536  0014F0  EE21  F07E         	lfsr	2,packaging@F3228
  3537  0014F4  EE11  F000         	lfsr	1,packaging@msg
  3538  0014F8  0E21               	movlw	33
  3539  0014FA                     u6971:
  3540  0014FA  CFDB FFE3          	movff	plusw2,plusw1
  3541  0014FE  06E8               	decf	wreg,f,c
  3542  001500  E2FC               	bc	u6971
  3543                           
  3544                           ; BSR set to: 1
  3545                           ;main.c: 135: msg[31] = compartmentNum + 48;
  3546  001502  517C               	movf	packaging@compartmentNum& (0+255),w,b
  3547  001504  0F30               	addlw	48
  3548  001506  6F1F               	movwf	(packaging@msg+31)& (0+255),b
  3549                           
  3550                           ; BSR set to: 1
  3551                           ;main.c: 136: I2C_Send(nanoAddr, msg);
  3552  001508  0E00               	movlw	low packaging@msg
  3553  00150A  0100               	movlb	0	; () banked
  3554  00150C  6F83               	movwf	I2C_Send@data& (0+255),b
  3555  00150E  0E01               	movlw	high packaging@msg
  3556  001510  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  3557  001512  0E3F               	movlw	low _nanoAddr
  3558  001514  6EF6               	movwf	tblptrl,c
  3559  001516                     	if	1	;There is more than 1 active tblptr byte
  3560  001516  0EFC               	movlw	high _nanoAddr
  3561  001518  6EF7               	movwf	tblptrh,c
  3562  00151A                     	endif
  3563  00151A                     	if	1	;There are 3 active tblptr bytes
  3564  00151A  0E00               	movlw	low (_nanoAddr shr (0+16))
  3565  00151C  6EF8               	movwf	tblptru,c
  3566  00151E                     	endif
  3567  00151E  0008               	tblrd		*
  3568  001520  50F5               	movf	tablat,w,c
  3569  001522  EC83  F015         	call	_I2C_Send
  3570                           
  3571                           ;main.c: 138: if (params.toFill[compartmentNum-1] == 0) {
  3572  001526  0EFF               	movlw	255
  3573  001528  0100               	movlb	0	; () banked
  3574  00152A  6FC5               	movwf	??_packaging& (0+255),b
  3575  00152C  0EFF               	movlw	255
  3576  00152E  6FC6               	movwf	(??_packaging+1)& (0+255),b
  3577  001530  C17C  F0C7         	movff	packaging@compartmentNum,??_packaging+2
  3578  001534  C17D  F0C8         	movff	packaging@compartmentNum+1,??_packaging+3
  3579  001538  51C5               	movf	??_packaging& (0+255),w,b
  3580  00153A  27C7               	addwf	(??_packaging+2)& (0+255),f,b
  3581  00153C  51C6               	movf	(??_packaging+1)& (0+255),w,b
  3582  00153E  23C8               	addwfc	(??_packaging+3)& (0+255),f,b
  3583  001540  0EBE               	movlw	low (_params+2)
  3584  001542  25C7               	addwf	(??_packaging+2)& (0+255),w,b
  3585  001544  6ED9               	movwf	fsr2l,c
  3586  001546  0E01               	movlw	high (_params+2)
  3587  001548  21C8               	addwfc	(??_packaging+3)& (0+255),w,b
  3588  00154A  6EDA               	movwf	fsr2h,c
  3589  00154C  50DF               	movf	indf2,w,c
  3590  00154E  A4D8               	btfss	status,2,c
  3591  001550  D015               	goto	l128
  3592                           
  3593                           ; BSR set to: 0
  3594                           ;main.c: 141: char instr[] = {2, 0};
  3595  001552  C1B8  F176         	movff	packaging@F3230,packaging@instr_321
  3596  001556  C1B9  F177         	movff	packaging@F3230+1,packaging@instr_321+1
  3597                           
  3598                           ; BSR set to: 0
  3599                           ;main.c: 142: I2C_Send(nanoAddr, instr);
  3600  00155A  0E76               	movlw	low packaging@instr_321
  3601  00155C  6F83               	movwf	I2C_Send@data& (0+255),b
  3602  00155E  0E01               	movlw	high packaging@instr_321
  3603  001560  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  3604  001562  0E3F               	movlw	low _nanoAddr
  3605  001564  6EF6               	movwf	tblptrl,c
  3606  001566                     	if	1	;There is more than 1 active tblptr byte
  3607  001566  0EFC               	movlw	high _nanoAddr
  3608  001568  6EF7               	movwf	tblptrh,c
  3609  00156A                     	endif
  3610  00156A                     	if	1	;There are 3 active tblptr bytes
  3611  00156A  0E00               	movlw	low (_nanoAddr shr (0+16))
  3612  00156C  6EF8               	movwf	tblptru,c
  3613  00156E                     	endif
  3614  00156E  0008               	tblrd		*
  3615  001570  50F5               	movf	tablat,w,c
  3616  001572  EC83  F015         	call	_I2C_Send
  3617  001576  AA80               	btfss	3968,5,c	;volatile
  3618  001578  D151               	goto	l134
  3619  00157A  D7FD               	goto	l132
  3620  00157C                     l128:
  3621                           
  3622                           ;main.c: 145: };
  3623                           ;main.c: 146: char * set = fastenerMatrix[params.toFill[compartmentNum-1]];
  3624  00157C  0EFF               	movlw	255
  3625  00157E  0100               	movlb	0	; () banked
  3626  001580  6FC5               	movwf	??_packaging& (0+255),b
  3627  001582  0EFF               	movlw	255
  3628  001584  6FC6               	movwf	(??_packaging+1)& (0+255),b
  3629  001586  C17C  F0C7         	movff	packaging@compartmentNum,??_packaging+2
  3630  00158A  C17D  F0C8         	movff	packaging@compartmentNum+1,??_packaging+3
  3631  00158E  51C5               	movf	??_packaging& (0+255),w,b
  3632  001590  27C7               	addwf	(??_packaging+2)& (0+255),f,b
  3633  001592  51C6               	movf	(??_packaging+1)& (0+255),w,b
  3634  001594  23C8               	addwfc	(??_packaging+3)& (0+255),f,b
  3635  001596  0EBE               	movlw	low (_params+2)
  3636  001598  25C7               	addwf	(??_packaging+2)& (0+255),w,b
  3637  00159A  6ED9               	movwf	fsr2l,c
  3638  00159C  0E01               	movlw	high (_params+2)
  3639  00159E  21C8               	addwfc	(??_packaging+3)& (0+255),w,b
  3640  0015A0  6EDA               	movwf	fsr2h,c
  3641  0015A2  50DF               	movf	indf2,w,c
  3642  0015A4  6FC9               	movwf	(??_packaging+4)& (0+255),b
  3643  0015A6  51C9               	movf	(??_packaging+4)& (0+255),w,b
  3644  0015A8  0D04               	mullw	4
  3645  0015AA  0EAA               	movlw	low _fastenerMatrix
  3646  0015AC  24F3               	addwf	prodl,w,c
  3647  0015AE  0101               	movlb	1	; () banked
  3648  0015B0  6F78               	movwf	packaging@set& (0+255),b
  3649  0015B2  0EFD               	movlw	high _fastenerMatrix
  3650  0015B4  20F4               	addwfc	prodh,w,c
  3651  0015B6  6F79               	movwf	(packaging@set+1)& (0+255),b
  3652                           
  3653                           ; BSR set to: 1
  3654                           ;main.c: 147: char msg2[32];
  3655                           ;main.c: 148: int mult = params.setMultiple[compartmentNum - 1];
  3656  0015B8  0EFE               	movlw	254
  3657  0015BA  0100               	movlb	0	; () banked
  3658  0015BC  6FC5               	movwf	??_packaging& (0+255),b
  3659  0015BE  0EFF               	movlw	255
  3660  0015C0  6FC6               	movwf	(??_packaging+1)& (0+255),b
  3661  0015C2  C17C  F0C7         	movff	packaging@compartmentNum,??_packaging+2
  3662  0015C6  C17D  F0C8         	movff	packaging@compartmentNum+1,??_packaging+3
  3663  0015CA  90D8               	bcf	status,0,c
  3664  0015CC  37C7               	rlcf	(??_packaging+2)& (0+255),f,b
  3665  0015CE  37C8               	rlcf	(??_packaging+3)& (0+255),f,b
  3666  0015D0  51C5               	movf	??_packaging& (0+255),w,b
  3667  0015D2  27C7               	addwf	(??_packaging+2)& (0+255),f,b
  3668  0015D4  51C6               	movf	(??_packaging+1)& (0+255),w,b
  3669  0015D6  23C8               	addwfc	(??_packaging+3)& (0+255),f,b
  3670  0015D8  0EC6               	movlw	low (_params+10)
  3671  0015DA  25C7               	addwf	(??_packaging+2)& (0+255),w,b
  3672  0015DC  6ED9               	movwf	fsr2l,c
  3673  0015DE  0E01               	movlw	high (_params+10)
  3674  0015E0  21C8               	addwfc	(??_packaging+3)& (0+255),w,b
  3675  0015E2  6EDA               	movwf	fsr2h,c
  3676  0015E4  CFDE F17A          	movff	postinc2,packaging@mult
  3677  0015E8  CFDD F17B          	movff	postdec2,packaging@mult+1
  3678                           
  3679                           ; BSR set to: 0
  3680                           ;main.c: 149: sprintf(msg2, "\1B:%d N:%d S:%d W:%d\0", set[0]*mult, set[1]*mult, set[2]*
      +                          mult, set[3]*mult);
  3681  0015EC  0E54               	movlw	low packaging@msg2
  3682  0015EE  6FA8               	movwf	sprintf@wh& (0+255),b
  3683  0015F0  0E01               	movlw	high packaging@msg2
  3684  0015F2  6FA9               	movwf	(sprintf@wh+1)& (0+255),b
  3685  0015F4  0EB0               	movlw	low STR_8
  3686  0015F6  6FAA               	movwf	sprintf@f& (0+255),b
  3687  0015F8  0EFE               	movlw	high STR_8
  3688  0015FA  6FAB               	movwf	(sprintf@f+1)& (0+255),b
  3689  0015FC  C178  FFF6         	movff	packaging@set,tblptrl
  3690  001600  C179  FFF7         	movff	packaging@set+1,tblptrh
  3691  001604                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3692  001604  6AF8               	clrf	tblptru,c
  3693  001606                     	endif
  3694  001606                     	if	0	;tblptru may be non-zero
  3695  001606                     	endif
  3696  001606  0008               	tblrd		*
  3697  001608  50F5               	movf	tablat,w,c
  3698  00160A  6F80               	movwf	___wmul@multiplier& (0+255),b
  3699  00160C  6B81               	clrf	(___wmul@multiplier+1)& (0+255),b
  3700  00160E  C17A  F082         	movff	packaging@mult,___wmul@multiplicand
  3701  001612  C17B  F083         	movff	packaging@mult+1,___wmul@multiplicand+1
  3702  001616  EC22  F019         	call	___wmul	;wreg free
  3703  00161A  C080  F0AC         	movff	?___wmul,?_sprintf+4
  3704  00161E  C081  F0AD         	movff	?___wmul+1,?_sprintf+5
  3705  001622  0E01               	movlw	1
  3706  001624  0101               	movlb	1	; () banked
  3707  001626  2578               	addwf	packaging@set& (0+255),w,b
  3708  001628  0100               	movlb	0	; () banked
  3709  00162A  6FC5               	movwf	??_packaging& (0+255),b
  3710  00162C  0E00               	movlw	0
  3711  00162E  0101               	movlb	1	; () banked
  3712  001630  2179               	addwfc	(packaging@set+1)& (0+255),w,b
  3713  001632  0100               	movlb	0	; () banked
  3714  001634  6FC6               	movwf	(??_packaging+1)& (0+255),b
  3715  001636  C0C5  FFF6         	movff	??_packaging,tblptrl
  3716  00163A  C0C6  FFF7         	movff	??_packaging+1,tblptrh
  3717  00163E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3718  00163E  6AF8               	clrf	tblptru,c
  3719  001640                     	endif
  3720  001640                     	if	0	;tblptru may be non-zero
  3721  001640                     	endif
  3722  001640  0008               	tblrd		*
  3723  001642  50F5               	movf	tablat,w,c
  3724  001644  6F80               	movwf	___wmul@multiplier& (0+255),b
  3725  001646  6B81               	clrf	(___wmul@multiplier+1)& (0+255),b
  3726  001648  C17A  F082         	movff	packaging@mult,___wmul@multiplicand
  3727  00164C  C17B  F083         	movff	packaging@mult+1,___wmul@multiplicand+1
  3728  001650  EC22  F019         	call	___wmul	;wreg free
  3729  001654  C080  F0AE         	movff	?___wmul,?_sprintf+6
  3730  001658  C081  F0AF         	movff	?___wmul+1,?_sprintf+7
  3731  00165C  0E02               	movlw	2
  3732  00165E  0101               	movlb	1	; () banked
  3733  001660  2578               	addwf	packaging@set& (0+255),w,b
  3734  001662  0100               	movlb	0	; () banked
  3735  001664  6FC7               	movwf	(??_packaging+2)& (0+255),b
  3736  001666  0E00               	movlw	0
  3737  001668  0101               	movlb	1	; () banked
  3738  00166A  2179               	addwfc	(packaging@set+1)& (0+255),w,b
  3739  00166C  0100               	movlb	0	; () banked
  3740  00166E  6FC8               	movwf	(??_packaging+3)& (0+255),b
  3741  001670  C0C7  FFF6         	movff	??_packaging+2,tblptrl
  3742  001674  C0C8  FFF7         	movff	??_packaging+3,tblptrh
  3743  001678                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3744  001678  6AF8               	clrf	tblptru,c
  3745  00167A                     	endif
  3746  00167A                     	if	0	;tblptru may be non-zero
  3747  00167A                     	endif
  3748  00167A  0008               	tblrd		*
  3749  00167C  50F5               	movf	tablat,w,c
  3750  00167E  6F80               	movwf	___wmul@multiplier& (0+255),b
  3751  001680  6B81               	clrf	(___wmul@multiplier+1)& (0+255),b
  3752  001682  C17A  F082         	movff	packaging@mult,___wmul@multiplicand
  3753  001686  C17B  F083         	movff	packaging@mult+1,___wmul@multiplicand+1
  3754  00168A  EC22  F019         	call	___wmul	;wreg free
  3755  00168E  C080  F0B0         	movff	?___wmul,?_sprintf+8
  3756  001692  C081  F0B1         	movff	?___wmul+1,?_sprintf+9
  3757  001696  0E03               	movlw	3
  3758  001698  0101               	movlb	1	; () banked
  3759  00169A  2578               	addwf	packaging@set& (0+255),w,b
  3760  00169C  0100               	movlb	0	; () banked
  3761  00169E  6FC9               	movwf	(??_packaging+4)& (0+255),b
  3762  0016A0  0E00               	movlw	0
  3763  0016A2  0101               	movlb	1	; () banked
  3764  0016A4  2179               	addwfc	(packaging@set+1)& (0+255),w,b
  3765  0016A6  0100               	movlb	0	; () banked
  3766  0016A8  6FCA               	movwf	(??_packaging+5)& (0+255),b
  3767  0016AA  C0C9  FFF6         	movff	??_packaging+4,tblptrl
  3768  0016AE  C0CA  FFF7         	movff	??_packaging+5,tblptrh
  3769  0016B2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3770  0016B2  6AF8               	clrf	tblptru,c
  3771  0016B4                     	endif
  3772  0016B4                     	if	0	;tblptru may be non-zero
  3773  0016B4                     	endif
  3774  0016B4  0008               	tblrd		*
  3775  0016B6  50F5               	movf	tablat,w,c
  3776  0016B8  6F80               	movwf	___wmul@multiplier& (0+255),b
  3777  0016BA  6B81               	clrf	(___wmul@multiplier+1)& (0+255),b
  3778  0016BC  C17A  F082         	movff	packaging@mult,___wmul@multiplicand
  3779  0016C0  C17B  F083         	movff	packaging@mult+1,___wmul@multiplicand+1
  3780  0016C4  EC22  F019         	call	___wmul	;wreg free
  3781  0016C8  C080  F0B2         	movff	?___wmul,?_sprintf+10
  3782  0016CC  C081  F0B3         	movff	?___wmul+1,?_sprintf+11
  3783  0016D0  EC4A  F018         	call	_sprintf	;wreg free
  3784                           
  3785                           ;main.c: 150: I2C_Send(nanoAddr, msg2);
  3786  0016D4  0E54               	movlw	low packaging@msg2
  3787  0016D6  0100               	movlb	0	; () banked
  3788  0016D8  6F83               	movwf	I2C_Send@data& (0+255),b
  3789  0016DA  0E01               	movlw	high packaging@msg2
  3790  0016DC  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  3791  0016DE  0E3F               	movlw	low _nanoAddr
  3792  0016E0  6EF6               	movwf	tblptrl,c
  3793  0016E2                     	if	1	;There is more than 1 active tblptr byte
  3794  0016E2  0EFC               	movlw	high _nanoAddr
  3795  0016E4  6EF7               	movwf	tblptrh,c
  3796  0016E6                     	endif
  3797  0016E6                     	if	1	;There are 3 active tblptr bytes
  3798  0016E6  0E00               	movlw	low (_nanoAddr shr (0+16))
  3799  0016E8  6EF8               	movwf	tblptru,c
  3800  0016EA                     	endif
  3801  0016EA  0008               	tblrd		*
  3802  0016EC  50F5               	movf	tablat,w,c
  3803  0016EE  EC83  F015         	call	_I2C_Send
  3804                           
  3805                           ;main.c: 151: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3806  0016F2  0E01               	movlw	1
  3807  0016F4  EC83  F019         	call	_lcdInst
  3808  0016F8  0EC3               	movlw	195
  3809  0016FA  0100               	movlb	0	; () banked
  3810  0016FC  6FC5               	movwf	??_packaging& (0+255),b
  3811  0016FE  0ECD               	movlw	205
  3812  001700                     u7947:
  3813  001700  2EE8               	decfsz	wreg,f,c
  3814  001702  D7FE               	bra	u7947
  3815  001704  2FC5               	decfsz	??_packaging& (0+255),f,b
  3816  001706  D7FC               	bra	u7947
  3817                           
  3818                           ;main.c: 152: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3819  001708  0E80               	movlw	128
  3820  00170A  EC83  F019         	call	_lcdInst
  3821  00170E  0E41               	movlw	65
  3822  001710  0100               	movlb	0	; () banked
  3823  001712  6FC5               	movwf	??_packaging& (0+255),b
  3824  001714  0EEE               	movlw	238
  3825  001716                     u7957:
  3826  001716  2EE8               	decfsz	wreg,f,c
  3827  001718  D7FE               	bra	u7957
  3828  00171A  2FC5               	decfsz	??_packaging& (0+255),f,b
  3829  00171C  D7FC               	bra	u7957
  3830  00171E  F000               	nop	
  3831                           
  3832                           ;main.c: 153: printf("Compartment %d", compartmentNum);
  3833  001720  0E95               	movlw	low STR_9
  3834  001722  0100               	movlb	0	; () banked
  3835  001724  6FA8               	movwf	printf@f& (0+255),b
  3836  001726  0EFF               	movlw	high STR_9
  3837  001728  6FA9               	movwf	(printf@f+1)& (0+255),b
  3838  00172A  C17C  F0AA         	movff	packaging@compartmentNum,?_printf+2
  3839  00172E  C17D  F0AB         	movff	packaging@compartmentNum+1,?_printf+3
  3840  001732  ECAA  F018         	call	_printf	;wreg free
  3841                           
  3842                           ;main.c: 154: packageCompartment(set[0]*mult, set[1]*mult, set[2]*mult, set[3]*mult);
  3843  001736  0E01               	movlw	1
  3844  001738  0101               	movlb	1	; () banked
  3845  00173A  2578               	addwf	packaging@set& (0+255),w,b
  3846  00173C  0100               	movlb	0	; () banked
  3847  00173E  6FC5               	movwf	??_packaging& (0+255),b
  3848  001740  0E00               	movlw	0
  3849  001742  0101               	movlb	1	; () banked
  3850  001744  2179               	addwfc	(packaging@set+1)& (0+255),w,b
  3851  001746  0100               	movlb	0	; () banked
  3852  001748  6FC6               	movwf	(??_packaging+1)& (0+255),b
  3853  00174A  C0C5  FFF6         	movff	??_packaging,tblptrl
  3854  00174E  C0C6  FFF7         	movff	??_packaging+1,tblptrh
  3855  001752                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3856  001752  6AF8               	clrf	tblptru,c
  3857  001754                     	endif
  3858  001754                     	if	0	;tblptru may be non-zero
  3859  001754                     	endif
  3860  001754  0008               	tblrd		*
  3861  001756  50F5               	movf	tablat,w,c
  3862  001758  0101               	movlb	1	; () banked
  3863  00175A  037A               	mulwf	packaging@mult& (0+255),b
  3864  00175C  CFF3 F09D          	movff	prodl,packageCompartment@n
  3865  001760  0E02               	movlw	2
  3866  001762  2578               	addwf	packaging@set& (0+255),w,b
  3867  001764  0100               	movlb	0	; () banked
  3868  001766  6FC7               	movwf	(??_packaging+2)& (0+255),b
  3869  001768  0E00               	movlw	0
  3870  00176A  0101               	movlb	1	; () banked
  3871  00176C  2179               	addwfc	(packaging@set+1)& (0+255),w,b
  3872  00176E  0100               	movlb	0	; () banked
  3873  001770  6FC8               	movwf	(??_packaging+3)& (0+255),b
  3874  001772  C0C7  FFF6         	movff	??_packaging+2,tblptrl
  3875  001776  C0C8  FFF7         	movff	??_packaging+3,tblptrh
  3876  00177A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3877  00177A  6AF8               	clrf	tblptru,c
  3878  00177C                     	endif
  3879  00177C                     	if	0	;tblptru may be non-zero
  3880  00177C                     	endif
  3881  00177C  0008               	tblrd		*
  3882  00177E  50F5               	movf	tablat,w,c
  3883  001780  0101               	movlb	1	; () banked
  3884  001782  037A               	mulwf	packaging@mult& (0+255),b
  3885  001784  CFF3 F09E          	movff	prodl,packageCompartment@s
  3886  001788  0E03               	movlw	3
  3887  00178A  2578               	addwf	packaging@set& (0+255),w,b
  3888  00178C  0100               	movlb	0	; () banked
  3889  00178E  6FC9               	movwf	(??_packaging+4)& (0+255),b
  3890  001790  0E00               	movlw	0
  3891  001792  0101               	movlb	1	; () banked
  3892  001794  2179               	addwfc	(packaging@set+1)& (0+255),w,b
  3893  001796  0100               	movlb	0	; () banked
  3894  001798  6FCA               	movwf	(??_packaging+5)& (0+255),b
  3895  00179A  C0C9  FFF6         	movff	??_packaging+4,tblptrl
  3896  00179E  C0CA  FFF7         	movff	??_packaging+5,tblptrh
  3897  0017A2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3898  0017A2  6AF8               	clrf	tblptru,c
  3899  0017A4                     	endif
  3900  0017A4                     	if	0	;tblptru may be non-zero
  3901  0017A4                     	endif
  3902  0017A4  0008               	tblrd		*
  3903  0017A6  50F5               	movf	tablat,w,c
  3904  0017A8  0101               	movlb	1	; () banked
  3905  0017AA  037A               	mulwf	packaging@mult& (0+255),b
  3906  0017AC  CFF3 F09F          	movff	prodl,packageCompartment@w
  3907  0017B0  C178  FFF6         	movff	packaging@set,tblptrl
  3908  0017B4  C179  FFF7         	movff	packaging@set+1,tblptrh
  3909  0017B8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3910  0017B8  6AF8               	clrf	tblptru,c
  3911  0017BA                     	endif
  3912  0017BA                     	if	0	;tblptru may be non-zero
  3913  0017BA                     	endif
  3914  0017BA  0008               	tblrd		*
  3915  0017BC  50F5               	movf	tablat,w,c
  3916  0017BE  037A               	mulwf	packaging@mult& (0+255),b
  3917  0017C0  50F3               	movf	prodl,w,c
  3918  0017C2  EC42  F008         	call	_packageCompartment
  3919                           
  3920                           ;main.c: 155: char msg3[50];
  3921                           ;main.c: 156: sprintf(msg3, "\1Finished packaging compartment %d\0", compartmentNum);
  3922  0017C6  0E22               	movlw	low packaging@msg3
  3923  0017C8  0100               	movlb	0	; () banked
  3924  0017CA  6FA8               	movwf	sprintf@wh& (0+255),b
  3925  0017CC  0E01               	movlw	high packaging@msg3
  3926  0017CE  6FA9               	movwf	(sprintf@wh+1)& (0+255),b
  3927  0017D0  0EFE               	movlw	low STR_10
  3928  0017D2  6FAA               	movwf	sprintf@f& (0+255),b
  3929  0017D4  0EFD               	movlw	high STR_10
  3930  0017D6  6FAB               	movwf	(sprintf@f+1)& (0+255),b
  3931  0017D8  C17C  F0AC         	movff	packaging@compartmentNum,?_sprintf+4
  3932  0017DC  C17D  F0AD         	movff	packaging@compartmentNum+1,?_sprintf+5
  3933  0017E0  EC4A  F018         	call	_sprintf	;wreg free
  3934                           
  3935                           ;main.c: 157: I2C_Send(nanoAddr, msg3);
  3936  0017E4  0E22               	movlw	low packaging@msg3
  3937  0017E6  0100               	movlb	0	; () banked
  3938  0017E8  6F83               	movwf	I2C_Send@data& (0+255),b
  3939  0017EA  0E01               	movlw	high packaging@msg3
  3940  0017EC  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  3941  0017EE  0E3F               	movlw	low _nanoAddr
  3942  0017F0  6EF6               	movwf	tblptrl,c
  3943  0017F2                     	if	1	;There is more than 1 active tblptr byte
  3944  0017F2  0EFC               	movlw	high _nanoAddr
  3945  0017F4  6EF7               	movwf	tblptrh,c
  3946  0017F6                     	endif
  3947  0017F6                     	if	1	;There are 3 active tblptr bytes
  3948  0017F6  0E00               	movlw	low (_nanoAddr shr (0+16))
  3949  0017F8  6EF8               	movwf	tblptru,c
  3950  0017FA                     	endif
  3951  0017FA  0008               	tblrd		*
  3952  0017FC  50F5               	movf	tablat,w,c
  3953  0017FE  EC83  F015         	call	_I2C_Send
  3954                           
  3955                           ;main.c: 158: currentMode = WAITING;
  3956  001802  0E00               	movlw	0
  3957  001804  6E49               	movwf	_currentMode+1,c
  3958  001806  0E04               	movlw	4
  3959  001808  6E48               	movwf	_currentMode,c
  3960                           
  3961                           ;main.c: 159: _delay((unsigned long)((10)*(40000000/4000.0)));
  3962  00180A  0E82               	movlw	130
  3963  00180C  0100               	movlb	0	; () banked
  3964  00180E  6FC5               	movwf	??_packaging& (0+255),b
  3965  001810  0EDD               	movlw	221
  3966  001812                     u7967:
  3967  001812  2EE8               	decfsz	wreg,f,c
  3968  001814  D7FE               	bra	u7967
  3969  001816  2FC5               	decfsz	??_packaging& (0+255),f,b
  3970  001818  D7FC               	bra	u7967
  3971  00181A  D000               	nop2	
  3972  00181C                     l134:
  3973  00181C  0101               	movlb	1	; () banked
  3974  00181E  077C               	decf	packaging@compartmentNum& (0+255),f,b
  3975  001820  A0D8               	btfss	status,0,c
  3976  001822  077D               	decf	(packaging@compartmentNum+1)& (0+255),f,b
  3977                           
  3978                           ; BSR set to: 1
  3979  001824  BF7D               	btfsc	(packaging@compartmentNum+1)& (0+255),7,b
  3980  001826  0012               	return	
  3981  001828  517D               	movf	(packaging@compartmentNum+1)& (0+255),w,b
  3982  00182A  E101               	bnz	u7001
  3983  00182C  D65E               	goto	L2
  3984  00182E                     u7001:
  3985  00182E  D660               	goto	l124
  3986  001830                     __end_of_packaging:
  3987                           	opt stack 0
  3988                           tblptru	equ	0xFF8
  3989                           tblptrh	equ	0xFF7
  3990                           tblptrl	equ	0xFF6
  3991                           tablat	equ	0xFF5
  3992                           prodh	equ	0xFF4
  3993                           prodl	equ	0xFF3
  3994                           intcon	equ	0xFF2
  3995                           postinc0	equ	0xFEE
  3996                           wreg	equ	0xFE8
  3997                           postdec1	equ	0xFE5
  3998                           plusw1	equ	0xFE3
  3999                           fsr1l	equ	0xFE1
  4000                           indf2	equ	0xFDF
  4001                           postinc2	equ	0xFDE
  4002                           postdec2	equ	0xFDD
  4003                           plusw2	equ	0xFDB
  4004                           fsr2h	equ	0xFDA
  4005                           fsr2l	equ	0xFD9
  4006                           status	equ	0xFD8
  4007                           
  4008 ;; *************** function _sprintf *****************
  4009 ;; Defined at:
  4010 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprintf.c"
  4011 ;; Parameters:    Size  Location     Type
  4012 ;;  wh              2   40[BANK0 ] PTR unsigned char 
  4013 ;;		 -> packaging@msg3(50), packaging@msg2(32), 
  4014 ;;  f               2   42[BANK0 ] PTR const unsigned char 
  4015 ;;		 -> STR_10(36), STR_8(22), 
  4016 ;; Auto vars:     Size  Location     Type
  4017 ;;  pb              4   54[BANK0 ] struct __prbuf
  4018 ;;  ap              2   52[BANK0 ] PTR void [1]
  4019 ;;		 -> ?_sprintf(2), ?_printf(2), 
  4020 ;; Return value:  Size  Location     Type
  4021 ;;                  2   40[BANK0 ] int 
  4022 ;; Registers used:
  4023 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4024 ;; Tracked objects:
  4025 ;;		On entry : 0/0
  4026 ;;		On exit  : 0/0
  4027 ;;		Unchanged: 0/0
  4028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4029 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4030 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4032 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4033 ;;Total ram usage:       18 bytes
  4034 ;; Hardware stack levels used:    1
  4035 ;; Hardware stack levels required when called:    7
  4036 ;; This function calls:
  4037 ;;		__doprnt
  4038 ;; This function is called by:
  4039 ;;		_packaging
  4040 ;; This function uses a non-reentrant model
  4041 ;;
  4042                           
  4043                           	psect	text5
  4044  003094                     __ptext5:
  4045                           	opt stack 0
  4046  003094                     _sprintf:
  4047                           	opt stack 21
  4048                           
  4049                           ; BSR set to: 1
  4050                           ;incstack = 0
  4051  003094  C0A8  F0B6         	movff	sprintf@wh,sprintf@pb
  4052  003098  C0A9  F0B7         	movff	sprintf@wh+1,sprintf@pb+1
  4053  00309C  0E00               	movlw	0
  4054  00309E  0100               	movlb	0	; () banked
  4055  0030A0  6FB8               	movwf	(sprintf@pb+2)& (0+255),b
  4056  0030A2  0E00               	movlw	0
  4057  0030A4  6FB9               	movwf	(sprintf@pb+3)& (0+255),b
  4058  0030A6  0EAC               	movlw	low (?_sprintf+4)
  4059  0030A8  6FB4               	movwf	sprintf@ap& (0+255),b
  4060  0030AA  0E00               	movlw	high (?_sprintf+4)
  4061  0030AC  6FB5               	movwf	(sprintf@ap+1)& (0+255),b
  4062                           
  4063                           ; BSR set to: 0
  4064  0030AE  0EB6               	movlw	low sprintf@pb
  4065  0030B0  6F96               	movwf	__doprnt@pb& (0+255),b
  4066  0030B2  0E00               	movlw	high sprintf@pb
  4067  0030B4  6F97               	movwf	(__doprnt@pb+1)& (0+255),b
  4068  0030B6  C0AA  F098         	movff	sprintf@f,__doprnt@f
  4069  0030BA  C0AB  F099         	movff	sprintf@f+1,__doprnt@f+1
  4070  0030BE  0EB4               	movlw	low sprintf@ap
  4071  0030C0  6F9A               	movwf	__doprnt@ap& (0+255),b
  4072  0030C2  0E00               	movlw	high sprintf@ap
  4073  0030C4  6F9B               	movwf	(__doprnt@ap+1)& (0+255),b
  4074  0030C6  EC20  F006         	call	__doprnt	;wreg free
  4075  0030CA  C0B6  FFD9         	movff	sprintf@pb,fsr2l
  4076  0030CE  C0B7  FFDA         	movff	sprintf@pb+1,fsr2h
  4077  0030D2  0E00               	movlw	0
  4078  0030D4  6EDF               	movwf	indf2,c
  4079  0030D6  0012               	return	
  4080  0030D8                     __end_of_sprintf:
  4081                           	opt stack 0
  4082                           tblptru	equ	0xFF8
  4083                           tblptrh	equ	0xFF7
  4084                           tblptrl	equ	0xFF6
  4085                           tablat	equ	0xFF5
  4086                           prodh	equ	0xFF4
  4087                           prodl	equ	0xFF3
  4088                           intcon	equ	0xFF2
  4089                           postinc0	equ	0xFEE
  4090                           wreg	equ	0xFE8
  4091                           postdec1	equ	0xFE5
  4092                           plusw1	equ	0xFE3
  4093                           fsr1l	equ	0xFE1
  4094                           indf2	equ	0xFDF
  4095                           postinc2	equ	0xFDE
  4096                           postdec2	equ	0xFDD
  4097                           plusw2	equ	0xFDB
  4098                           fsr2h	equ	0xFDA
  4099                           fsr2l	equ	0xFD9
  4100                           status	equ	0xFD8
  4101                           
  4102 ;; *************** function _printf *****************
  4103 ;; Defined at:
  4104 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\printf.c"
  4105 ;; Parameters:    Size  Location     Type
  4106 ;;  f               2   40[BANK0 ] PTR const unsigned char 
  4107 ;;		 -> STR_29(4), STR_28(6), STR_27(16), STR_26(11), 
  4108 ;;		 -> STR_25(12), STR_24(9), STR_22(19), STR_21(10), 
  4109 ;;		 -> STR_20(17), STR_9(15), 
  4110 ;; Auto vars:     Size  Location     Type
  4111 ;;  pb              4   52[BANK0 ] struct __prbuf
  4112 ;;  ap              2   50[BANK0 ] PTR void [1]
  4113 ;;		 -> ?_sprintf(2), ?_printf(2), 
  4114 ;; Return value:  Size  Location     Type
  4115 ;;                  2   40[BANK0 ] int 
  4116 ;; Registers used:
  4117 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4118 ;; Tracked objects:
  4119 ;;		On entry : 0/0
  4120 ;;		On exit  : 0/0
  4121 ;;		Unchanged: 0/0
  4122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4123 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4124 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4126 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4127 ;;Total ram usage:       16 bytes
  4128 ;; Hardware stack levels used:    1
  4129 ;; Hardware stack levels required when called:    7
  4130 ;; This function calls:
  4131 ;;		__doprnt
  4132 ;; This function is called by:
  4133 ;;		_packaging
  4134 ;;		_mainMenu
  4135 ;; This function uses a non-reentrant model
  4136 ;;
  4137                           
  4138                           	psect	text6
  4139  003154                     __ptext6:
  4140                           	opt stack 0
  4141  003154                     _printf:
  4142                           	opt stack 22
  4143                           
  4144                           ;incstack = 0
  4145  003154  0E00               	movlw	0
  4146  003156  0100               	movlb	0	; () banked
  4147  003158  6FB4               	movwf	printf@pb& (0+255),b
  4148  00315A  0E00               	movlw	0
  4149  00315C  6FB5               	movwf	(printf@pb+1)& (0+255),b
  4150  00315E  0EEE               	movlw	low _putch
  4151  003160  6FB6               	movwf	(printf@pb+2)& (0+255),b
  4152  003162  0E32               	movlw	high _putch
  4153  003164  6FB7               	movwf	(printf@pb+3)& (0+255),b
  4154  003166  0EAA               	movlw	low (?_printf+2)
  4155  003168  6FB2               	movwf	printf@ap& (0+255),b
  4156  00316A  0E00               	movlw	high (?_printf+2)
  4157  00316C  6FB3               	movwf	(printf@ap+1)& (0+255),b
  4158                           
  4159                           ; BSR set to: 0
  4160                           ;	Return value of _printf is never used
  4161  00316E  0EB4               	movlw	low printf@pb
  4162  003170  6F96               	movwf	__doprnt@pb& (0+255),b
  4163  003172  0E00               	movlw	high printf@pb
  4164  003174  6F97               	movwf	(__doprnt@pb+1)& (0+255),b
  4165  003176  C0A8  F098         	movff	printf@f,__doprnt@f
  4166  00317A  C0A9  F099         	movff	printf@f+1,__doprnt@f+1
  4167  00317E  0EB2               	movlw	low printf@ap
  4168  003180  6F9A               	movwf	__doprnt@ap& (0+255),b
  4169  003182  0E00               	movlw	high printf@ap
  4170  003184  6F9B               	movwf	(__doprnt@ap+1)& (0+255),b
  4171  003186  EC20  F006         	call	__doprnt	;wreg free
  4172  00318A  0012               	return	
  4173  00318C                     __end_of_printf:
  4174                           	opt stack 0
  4175                           tblptru	equ	0xFF8
  4176                           tblptrh	equ	0xFF7
  4177                           tblptrl	equ	0xFF6
  4178                           tablat	equ	0xFF5
  4179                           prodh	equ	0xFF4
  4180                           prodl	equ	0xFF3
  4181                           intcon	equ	0xFF2
  4182                           postinc0	equ	0xFEE
  4183                           wreg	equ	0xFE8
  4184                           postdec1	equ	0xFE5
  4185                           plusw1	equ	0xFE3
  4186                           fsr1l	equ	0xFE1
  4187                           indf2	equ	0xFDF
  4188                           postinc2	equ	0xFDE
  4189                           postdec2	equ	0xFDD
  4190                           plusw2	equ	0xFDB
  4191                           fsr2h	equ	0xFDA
  4192                           fsr2l	equ	0xFD9
  4193                           status	equ	0xFD8
  4194                           
  4195 ;; *************** function __doprnt *****************
  4196 ;; Defined at:
  4197 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  4198 ;; Parameters:    Size  Location     Type
  4199 ;;  pb              2   22[BANK0 ] PTR struct __prbuf
  4200 ;;		 -> sprintf@pb(4), printf@pb(4), 
  4201 ;;  f               2   24[BANK0 ] PTR const unsigned char 
  4202 ;;		 -> STR_29(4), STR_28(6), STR_27(16), STR_26(11), 
  4203 ;;		 -> STR_25(12), STR_24(9), STR_22(19), STR_21(10), 
  4204 ;;		 -> STR_20(17), STR_10(36), STR_9(15), STR_8(22), 
  4205 ;;  ap              2   26[BANK0 ] PTR PTR void 
  4206 ;;		 -> sprintf@ap(2), printf@ap(2), 
  4207 ;; Auto vars:     Size  Location     Type
  4208 ;;  val             4   33[BANK0 ] unsigned long 
  4209 ;;  tmpval          4    0        struct .
  4210 ;;  cp              2   37[BANK0 ] PTR const unsigned char 
  4211 ;;		 -> ?_sprintf(2), ?_printf(2), NULL(0), STR_30(7), 
  4212 ;;		 -> fSLookup(105), packaging@msg3(50), packaging@msg2(32), 
  4213 ;;  prec            2   30[BANK0 ] int 
  4214 ;;  len             2    0        unsigned int 
  4215 ;;  c               1   39[BANK0 ] char 
  4216 ;;  flag            1   32[BANK0 ] unsigned char 
  4217 ;; Return value:  Size  Location     Type
  4218 ;;                  2   22[BANK0 ] int 
  4219 ;; Registers used:
  4220 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4221 ;; Tracked objects:
  4222 ;;		On entry : 0/0
  4223 ;;		On exit  : 0/0
  4224 ;;		Unchanged: 0/0
  4225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4226 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4227 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4228 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4229 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4230 ;;Total ram usage:       18 bytes
  4231 ;; Hardware stack levels used:    1
  4232 ;; Hardware stack levels required when called:    6
  4233 ;; This function calls:
  4234 ;;		Absolute function
  4235 ;;		___lldiv
  4236 ;;		___llmod
  4237 ;;		_putch
  4238 ;; This function is called by:
  4239 ;;		_printf
  4240 ;;		_sprintf
  4241 ;; This function uses a non-reentrant model
  4242 ;;
  4243                           
  4244                           	psect	text7
  4245  000C40                     __ptext7:
  4246                           	opt stack 0
  4247  000C40                     __doprnt:
  4248                           	opt stack 22
  4249                           
  4250                           ;doprnt.c: 499: signed char c;
  4251                           ;doprnt.c: 504: int prec;
  4252                           ;doprnt.c: 508: unsigned char flag;
  4253                           ;doprnt.c: 523: union {
  4254                           ;doprnt.c: 524: unsigned long vd;
  4255                           ;doprnt.c: 525: double integ;
  4256                           ;doprnt.c: 526: } tmpval;
  4257                           ;doprnt.c: 528: unsigned long val;
  4258                           ;doprnt.c: 529: unsigned len;
  4259                           ;doprnt.c: 530: const char * cp;
  4260                           ;doprnt.c: 536: while(c = *f++) {
  4261                           
  4262                           ;incstack = 0
  4263  000C40  D20E               	goto	u6450
  4264  000C42                     
  4265                           ;doprnt.c: 538: if(c != '%')
  4266  000C42  0E25               	movlw	37
  4267  000C44  0100               	movlb	0	; () banked
  4268  000C46  19A7               	xorwf	__doprnt@c& (0+255),w,b
  4269  000C48  B4D8               	btfsc	status,2,c
  4270  000C4A  D036               	goto	l830
  4271                           
  4272                           ; BSR set to: 0
  4273                           ;doprnt.c: 540: {
  4274                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  4275  000C4C  EE20 F002          	lfsr	2,2
  4276  000C50  5196               	movf	__doprnt@pb& (0+255),w,b
  4277  000C52  26D9               	addwf	fsr2l,f,c
  4278  000C54  5197               	movf	(__doprnt@pb+1)& (0+255),w,b
  4279  000C56  22DA               	addwfc	fsr2h,f,c
  4280  000C58  50DE               	movf	postinc2,w,c
  4281  000C5A  10DE               	iorwf	postinc2,w,c
  4282  000C5C  B4D8               	btfsc	status,2,c
  4283  000C5E  D016               	goto	l831
  4284                           
  4285                           ; BSR set to: 0
  4286  000C60  EE20 F002          	lfsr	2,2
  4287  000C64  5196               	movf	__doprnt@pb& (0+255),w,b
  4288  000C66  26D9               	addwf	fsr2l,f,c
  4289  000C68  5197               	movf	(__doprnt@pb+1)& (0+255),w,b
  4290  000C6A  22DA               	addwfc	fsr2h,f,c
  4291  000C6C  CFDE F09C          	movff	postinc2,??__doprnt
  4292  000C70  CFDD F09D          	movff	postdec2,??__doprnt+1
  4293  000C74  D801               	call	u6278
  4294  000C76  D1F3               	goto	u6450
  4295  000C78                     u6278:
  4296  000C78  0005               	push	
  4297  000C7A  6EFA               	movwf	pclath,c
  4298  000C7C  519C               	movf	??__doprnt& (0+255),w,b
  4299  000C7E  6EFD               	movwf	tosl,c
  4300  000C80  519D               	movf	(??__doprnt+1)& (0+255),w,b
  4301  000C82  6EFE               	movwf	tosh,c
  4302  000C84  6AFF               	clrf	tosu,c
  4303  000C86  50FA               	movf	pclath,w,c
  4304  000C88  51A7               	movf	__doprnt@c& (0+255),w,b
  4305  000C8A  0012               	return		;indir
  4306  000C8C                     l831:
  4307  000C8C  C096  FFD9         	movff	__doprnt@pb,fsr2l
  4308  000C90  C097  FFDA         	movff	__doprnt@pb+1,fsr2h
  4309  000C94  CFDE F09C          	movff	postinc2,??__doprnt
  4310  000C98  CFDD F09D          	movff	postdec2,??__doprnt+1
  4311  000C9C  C09C  FFD9         	movff	??__doprnt,fsr2l
  4312  000CA0  C09D  FFDA         	movff	??__doprnt+1,fsr2h
  4313  000CA4  C0A7  FFDF         	movff	__doprnt@c,indf2
  4314  000CA8  C096  FFD9         	movff	__doprnt@pb,fsr2l
  4315  000CAC  C097  FFDA         	movff	__doprnt@pb+1,fsr2h
  4316  000CB0  2ADE               	incf	postinc2,f,c
  4317  000CB2  0E00               	movlw	0
  4318  000CB4  22DD               	addwfc	postdec2,f,c
  4319                           
  4320                           ;doprnt.c: 542: continue;
  4321  000CB6  D1D3               	goto	u6450
  4322  000CB8                     l830:
  4323                           
  4324                           ;doprnt.c: 543: }
  4325                           ;doprnt.c: 548: flag = 0;
  4326  000CB8  0E00               	movlw	0
  4327  000CBA  0100               	movlb	0	; () banked
  4328  000CBC  6FA0               	movwf	__doprnt@flag& (0+255),b
  4329                           
  4330                           ; BSR set to: 0
  4331                           ;doprnt.c: 635: switch(c = *f++) {
  4332                           
  4333                           ;doprnt.c: 633: loop:
  4334  000CBE  D091               	goto	l834
  4335  000CC0                     
  4336                           ; BSR set to: 0
  4337                           ;doprnt.c: 643: flag |= 0x10;
  4338                           
  4339                           ; BSR set to: 0
  4340  000CC0  89A0               	bsf	__doprnt@flag& (0+255),4,b
  4341                           
  4342                           ;doprnt.c: 644: goto loop;
  4343  000CC2  D08F               	goto	l834
  4344  000CC4                     
  4345                           ; BSR set to: 0
  4346                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4347                           
  4348                           ; BSR set to: 0
  4349  000CC4  C09A  FFD9         	movff	__doprnt@ap,fsr2l
  4350  000CC8  C09B  FFDA         	movff	__doprnt@ap+1,fsr2h
  4351  000CCC  CFDF F09C          	movff	indf2,??__doprnt
  4352  000CD0  0E02               	movlw	2
  4353  000CD2  26DE               	addwf	postinc2,f,c
  4354  000CD4  CFDF F09D          	movff	indf2,??__doprnt+1
  4355  000CD8  0E00               	movlw	0
  4356  000CDA  22DD               	addwfc	postdec2,f,c
  4357  000CDC  C09C  FFD9         	movff	??__doprnt,fsr2l
  4358  000CE0  C09D  FFDA         	movff	??__doprnt+1,fsr2h
  4359  000CE4  CFDE F0A5          	movff	postinc2,__doprnt@cp
  4360  000CE8  CFDD F0A6          	movff	postdec2,__doprnt@cp+1
  4361                           
  4362                           ; BSR set to: 0
  4363                           ;doprnt.c: 740: if(!cp)
  4364  000CEC  51A5               	movf	__doprnt@cp& (0+255),w,b
  4365  000CEE  11A6               	iorwf	(__doprnt@cp+1)& (0+255),w,b
  4366  000CF0  A4D8               	btfss	status,2,c
  4367  000CF2  D062               	goto	l846
  4368                           
  4369                           ; BSR set to: 0
  4370                           ;doprnt.c: 741: cp = "(null)";
  4371  000CF4  0EEE               	movlw	low STR_30
  4372  000CF6  6FA5               	movwf	__doprnt@cp& (0+255),b
  4373  000CF8  0EFF               	movlw	high STR_30
  4374  000CFA  6FA6               	movwf	(__doprnt@cp+1)& (0+255),b
  4375                           
  4376                           ; BSR set to: 0
  4377                           ;doprnt.c: 777: while(*cp)
  4378  000CFC  D05D               	goto	l846
  4379  000CFE                     
  4380                           ;doprnt.c: 778: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
  4381                           
  4382                           ; BSR set to: 0
  4383  000CFE  0100               	movlb	0	; () banked
  4384  000D00  EE20 F002          	lfsr	2,2
  4385  000D04  5196               	movf	__doprnt@pb& (0+255),w,b
  4386  000D06  26D9               	addwf	fsr2l,f,c
  4387  000D08  5197               	movf	(__doprnt@pb+1)& (0+255),w,b
  4388  000D0A  22DA               	addwfc	fsr2h,f,c
  4389  000D0C  50DE               	movf	postinc2,w,c
  4390  000D0E  10DE               	iorwf	postinc2,w,c
  4391  000D10  B4D8               	btfsc	status,2,c
  4392  000D12  D02A               	goto	l845
  4393                           
  4394                           ; BSR set to: 0
  4395  000D14  EE20 F002          	lfsr	2,2
  4396  000D18  5196               	movf	__doprnt@pb& (0+255),w,b
  4397  000D1A  26D9               	addwf	fsr2l,f,c
  4398  000D1C  5197               	movf	(__doprnt@pb+1)& (0+255),w,b
  4399  000D1E  22DA               	addwfc	fsr2h,f,c
  4400  000D20  CFDE F09C          	movff	postinc2,??__doprnt
  4401  000D24  CFDD F09D          	movff	postdec2,??__doprnt+1
  4402  000D28  D801               	call	u6308
  4403  000D2A  D01A               	goto	u6309
  4404  000D2C                     u6308:
  4405  000D2C  0005               	push	
  4406  000D2E  6EFA               	movwf	pclath,c
  4407  000D30  519C               	movf	??__doprnt& (0+255),w,b
  4408  000D32  6EFD               	movwf	tosl,c
  4409  000D34  519D               	movf	(??__doprnt+1)& (0+255),w,b
  4410  000D36  6EFE               	movwf	tosh,c
  4411  000D38  6AFF               	clrf	tosu,c
  4412  000D3A  50FA               	movf	pclath,w,c
  4413  000D3C  C0A5  FFF6         	movff	__doprnt@cp,tblptrl
  4414  000D40  C0A6  FFF7         	movff	__doprnt@cp+1,tblptrh
  4415  000D44  0E00               	movlw	low (__mediumconst shr (0+16))
  4416  000D46  6EF8               	movwf	tblptru,c
  4417  000D48  0E0F               	movlw	(high __ramtop+-1)
  4418  000D4A  64F7               	cpfsgt	tblptrh,c
  4419  000D4C  D003               	bra	u6317
  4420  000D4E  0008               	tblrd		*
  4421  000D50  50F5               	movf	tablat,w,c
  4422  000D52  D005               	bra	u6310
  4423  000D54                     u6317:
  4424  000D54  CFF6 FFE9          	movff	tblptrl,fsr0l
  4425  000D58  CFF7 FFEA          	movff	tblptrh,fsr0h
  4426  000D5C  50EF               	movf	indf0,w,c
  4427  000D5E                     u6310:
  4428  000D5E  0012               	return		;indir
  4429  000D60                     u6309:
  4430  000D60  0100               	movlb	0	; () banked
  4431  000D62  4BA5               	infsnz	__doprnt@cp& (0+255),f,b
  4432  000D64  2BA6               	incf	(__doprnt@cp+1)& (0+255),f,b
  4433  000D66  D028               	goto	l846
  4434  000D68                     l845:
  4435                           
  4436                           ; BSR set to: 0
  4437                           
  4438                           ; BSR set to: 0
  4439  000D68  C0A5  FFF6         	movff	__doprnt@cp,tblptrl
  4440  000D6C  C0A6  FFF7         	movff	__doprnt@cp+1,tblptrh
  4441  000D70  0E00               	movlw	low (__mediumconst shr (0+16))
  4442  000D72  6EF8               	movwf	tblptru,c
  4443  000D74  C096  FFD9         	movff	__doprnt@pb,fsr2l
  4444  000D78  C097  FFDA         	movff	__doprnt@pb+1,fsr2h
  4445  000D7C  CFDE F09C          	movff	postinc2,??__doprnt
  4446  000D80  CFDD F09D          	movff	postdec2,??__doprnt+1
  4447  000D84  C09C  FFD9         	movff	??__doprnt,fsr2l
  4448  000D88  C09D  FFDA         	movff	??__doprnt+1,fsr2h
  4449  000D8C  0E0F               	movlw	(high __ramtop+-1)
  4450  000D8E  64F7               	cpfsgt	tblptrh,c
  4451  000D90  D003               	bra	u6327
  4452  000D92  0008               	tblrd		*
  4453  000D94  50F5               	movf	tablat,w,c
  4454  000D96  D005               	bra	u6320
  4455  000D98                     u6327:
  4456  000D98  CFF6 FFE9          	movff	tblptrl,fsr0l
  4457  000D9C  CFF7 FFEA          	movff	tblptrh,fsr0h
  4458  000DA0  50EF               	movf	indf0,w,c
  4459  000DA2                     u6320:
  4460  000DA2  6EDF               	movwf	indf2,c
  4461  000DA4  0100               	movlb	0	; () banked
  4462  000DA6  4BA5               	infsnz	__doprnt@cp& (0+255),f,b
  4463  000DA8  2BA6               	incf	(__doprnt@cp+1)& (0+255),f,b
  4464                           
  4465                           ; BSR set to: 0
  4466  000DAA  C096  FFD9         	movff	__doprnt@pb,fsr2l
  4467  000DAE  C097  FFDA         	movff	__doprnt@pb+1,fsr2h
  4468  000DB2  2ADE               	incf	postinc2,f,c
  4469  000DB4  0E00               	movlw	0
  4470  000DB6  22DD               	addwfc	postdec2,f,c
  4471  000DB8                     l846:
  4472                           
  4473                           ; BSR set to: 0
  4474                           
  4475                           ; BSR set to: 0
  4476                           
  4477                           ; BSR set to: 0
  4478  000DB8  C0A5  FFF6         	movff	__doprnt@cp,tblptrl
  4479  000DBC  C0A6  FFF7         	movff	__doprnt@cp+1,tblptrh
  4480  000DC0  0E00               	movlw	low (__mediumconst shr (0+16))
  4481  000DC2  6EF8               	movwf	tblptru,c
  4482  000DC4  0E0F               	movlw	(high __ramtop+-1)
  4483  000DC6  64F7               	cpfsgt	tblptrh,c
  4484  000DC8  D003               	bra	u6337
  4485  000DCA  0008               	tblrd		*
  4486  000DCC  50F5               	movf	tablat,w,c
  4487  000DCE  D005               	bra	u6330
  4488  000DD0                     u6337:
  4489  000DD0  CFF6 FFE9          	movff	tblptrl,fsr0l
  4490  000DD4  CFF7 FFEA          	movff	tblptrh,fsr0h
  4491  000DD8  50EF               	movf	indf0,w,c
  4492  000DDA                     u6330:
  4493  000DDA  0900               	iorlw	0
  4494  000DDC  B4D8               	btfsc	status,2,c
  4495  000DDE  D13F               	goto	u6450
  4496  000DE0  D78E               	goto	l844
  4497  000DE2                     l834:
  4498  000DE2  C098  FFF6         	movff	__doprnt@f,tblptrl
  4499  000DE6  C099  FFF7         	movff	__doprnt@f+1,tblptrh
  4500  000DEA  0100               	movlb	0	; () banked
  4501  000DEC  4B98               	infsnz	__doprnt@f& (0+255),f,b
  4502  000DEE  2B99               	incf	(__doprnt@f+1)& (0+255),f,b
  4503  000DF0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4504  000DF0  6AF8               	clrf	tblptru,c
  4505  000DF2                     	endif
  4506  000DF2                     	if	0	;tblptru may be non-zero
  4507  000DF2                     	endif
  4508  000DF2  0008               	tblrd		*
  4509  000DF4  CFF5 F0A7          	movff	tablat,__doprnt@c
  4510  000DF8  51A7               	movf	__doprnt@c& (0+255),w,b
  4511                           
  4512                           ; Switch size 1, requested type "space"
  4513                           ; Number of cases is 5, Range of values is 0 to 115
  4514                           ; switch strategies available:
  4515                           ; Name         Instructions Cycles
  4516                           ; simple_byte           16     9 (average)
  4517                           ;	Chosen strategy is simple_byte
  4518  000DFA  0A00               	xorlw	0	; case 0
  4519  000DFC  B4D8               	btfsc	status,2,c
  4520  000DFE  D13D               	goto	u6460
  4521  000E00  0A64               	xorlw	100	; case 100
  4522  000E02  B4D8               	btfsc	status,2,c
  4523  000E04  D00A               	goto	l840
  4524  000E06  0A0D               	xorlw	13	; case 105
  4525  000E08  B4D8               	btfsc	status,2,c
  4526  000E0A  D007               	goto	l840
  4527  000E0C  0A05               	xorlw	5	; case 108
  4528  000E0E  B4D8               	btfsc	status,2,c
  4529  000E10  D757               	goto	l837
  4530  000E12  0A1F               	xorlw	31	; case 115
  4531  000E14  B4D8               	btfsc	status,2,c
  4532  000E16  D756               	goto	l841
  4533  000E18  D122               	goto	u6450
  4534  000E1A                     l840:
  4535                           
  4536                           ;doprnt.c: 1253: {
  4537                           ;doprnt.c: 1255: if(flag & 0x10)
  4538  000E1A  0100               	movlb	0	; () banked
  4539  000E1C  A9A0               	btfss	__doprnt@flag& (0+255),4,b
  4540  000E1E  D019               	goto	l849
  4541                           
  4542                           ; BSR set to: 0
  4543                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  4544  000E20  C09A  FFD9         	movff	__doprnt@ap,fsr2l
  4545  000E24  C09B  FFDA         	movff	__doprnt@ap+1,fsr2h
  4546  000E28  CFDF F09C          	movff	indf2,??__doprnt
  4547  000E2C  0E04               	movlw	4
  4548  000E2E  26DE               	addwf	postinc2,f,c
  4549  000E30  CFDF F09D          	movff	indf2,??__doprnt+1
  4550  000E34  0E00               	movlw	0
  4551  000E36  22DD               	addwfc	postdec2,f,c
  4552  000E38  C09C  FFD9         	movff	??__doprnt,fsr2l
  4553  000E3C  C09D  FFDA         	movff	??__doprnt+1,fsr2h
  4554  000E40  CFDE F0A1          	movff	postinc2,__doprnt@val
  4555  000E44  CFDE F0A2          	movff	postinc2,__doprnt@val+1
  4556  000E48  CFDE F0A3          	movff	postinc2,__doprnt@val+2
  4557  000E4C  CFDE F0A4          	movff	postinc2,__doprnt@val+3
  4558  000E50  D019               	goto	l850
  4559  000E52                     l849:
  4560                           
  4561                           ; BSR set to: 0
  4562                           ;doprnt.c: 1257: else
  4563                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4564                           
  4565                           ; BSR set to: 0
  4566  000E52  C09A  FFD9         	movff	__doprnt@ap,fsr2l
  4567  000E56  C09B  FFDA         	movff	__doprnt@ap+1,fsr2h
  4568  000E5A  CFDF F09C          	movff	indf2,??__doprnt
  4569  000E5E  0E02               	movlw	2
  4570  000E60  26DE               	addwf	postinc2,f,c
  4571  000E62  CFDF F09D          	movff	indf2,??__doprnt+1
  4572  000E66  0E00               	movlw	0
  4573  000E68  22DD               	addwfc	postdec2,f,c
  4574  000E6A  C09C  FFD9         	movff	??__doprnt,fsr2l
  4575  000E6E  C09D  FFDA         	movff	??__doprnt+1,fsr2h
  4576  000E72  CFDE F0A1          	movff	postinc2,__doprnt@val
  4577  000E76  CFDD F0A2          	movff	postdec2,__doprnt@val+1
  4578  000E7A  0E00               	movlw	0
  4579  000E7C  BFA2               	btfsc	(__doprnt@val+1)& (0+255),7,b
  4580  000E7E  0EFF               	movlw	-1
  4581  000E80  6FA3               	movwf	(__doprnt@val+2)& (0+255),b
  4582  000E82  6FA4               	movwf	(__doprnt@val+3)& (0+255),b
  4583  000E84                     l850:
  4584                           
  4585                           ; BSR set to: 0
  4586                           ;doprnt.c: 1261: if((long)val < 0) {
  4587                           
  4588                           ; BSR set to: 0
  4589  000E84  AFA4               	btfss	(__doprnt@val+3)& (0+255),7,b
  4590  000E86  D00A               	goto	l851
  4591                           
  4592                           ; BSR set to: 0
  4593                           ;doprnt.c: 1262: flag |= 0x03;
  4594  000E88  0E03               	movlw	3
  4595  000E8A  13A0               	iorwf	__doprnt@flag& (0+255),f,b
  4596                           
  4597                           ; BSR set to: 0
  4598                           ;doprnt.c: 1263: val = -val;
  4599  000E8C  1FA4               	comf	(__doprnt@val+3)& (0+255),f,b
  4600  000E8E  1FA3               	comf	(__doprnt@val+2)& (0+255),f,b
  4601  000E90  1FA2               	comf	(__doprnt@val+1)& (0+255),f,b
  4602  000E92  6DA1               	negf	__doprnt@val& (0+255),b
  4603  000E94  0E00               	movlw	0
  4604  000E96  23A2               	addwfc	(__doprnt@val+1)& (0+255),f,b
  4605  000E98  23A3               	addwfc	(__doprnt@val+2)& (0+255),f,b
  4606  000E9A  23A4               	addwfc	(__doprnt@val+3)& (0+255),f,b
  4607  000E9C                     l851:
  4608                           
  4609                           ; BSR set to: 0
  4610                           ;doprnt.c: 1264: }
  4611                           ;doprnt.c: 1266: }
  4612                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4613                           
  4614                           ; BSR set to: 0
  4615  000E9C  0E01               	movlw	1
  4616  000E9E  6FA7               	movwf	__doprnt@c& (0+255),b
  4617  000EA0                     l5318:
  4618                           
  4619                           ; BSR set to: 0
  4620  000EA0  0E0A               	movlw	10
  4621  000EA2  19A7               	xorwf	__doprnt@c& (0+255),w,b
  4622  000EA4  B4D8               	btfsc	status,2,c
  4623  000EA6  D01B               	goto	u6390
  4624                           
  4625                           ; BSR set to: 0
  4626                           ;doprnt.c: 1306: if(val < dpowers[c])
  4627                           
  4628                           ; BSR set to: 0
  4629                           
  4630                           ; BSR set to: 0
  4631  000EA8  51A7               	movf	__doprnt@c& (0+255),w,b
  4632  000EAA  0D04               	mullw	4
  4633  000EAC  0EF1               	movlw	low _dpowers
  4634  000EAE  24F3               	addwf	prodl,w,c
  4635  000EB0  6EF6               	movwf	tblptrl,c
  4636  000EB2  0EFB               	movlw	high _dpowers
  4637  000EB4  20F4               	addwfc	prodh,w,c
  4638  000EB6  6EF7               	movwf	tblptrh,c
  4639  000EB8                     	if	1	;There are 3 active tblptr bytes
  4640  000EB8  6AF8               	clrf	tblptru,c
  4641  000EBA  0E00               	movlw	low (__mediumconst shr (0+16))
  4642  000EBC  22F8               	addwfc	tblptru,f,c
  4643  000EBE                     	endif
  4644  000EBE  0009               	tblrd		*+
  4645  000EC0  50F5               	movf	tablat,w,c
  4646  000EC2  5DA1               	subwf	__doprnt@val& (0+255),w,b
  4647  000EC4  0009               	tblrd		*+
  4648  000EC6  50F5               	movf	tablat,w,c
  4649  000EC8  59A2               	subwfb	(__doprnt@val+1)& (0+255),w,b
  4650  000ECA  0009               	tblrd		*+
  4651  000ECC  50F5               	movf	tablat,w,c
  4652  000ECE  59A3               	subwfb	(__doprnt@val+2)& (0+255),w,b
  4653  000ED0  0009               	tblrd		*+
  4654  000ED2  50F5               	movf	tablat,w,c
  4655  000ED4  59A4               	subwfb	(__doprnt@val+3)& (0+255),w,b
  4656  000ED6  A0D8               	btfss	status,0,c
  4657  000ED8  D002               	goto	u6390
  4658                           
  4659                           ; BSR set to: 0
  4660                           
  4661                           ; BSR set to: 0
  4662                           
  4663                           ; BSR set to: 0
  4664                           ;doprnt.c: 1307: break;
  4665  000EDA  2BA7               	incf	__doprnt@c& (0+255),f,b
  4666  000EDC  D7E1               	goto	l5318
  4667  000EDE                     u6390:
  4668                           
  4669                           ; BSR set to: 0
  4670                           ;doprnt.c: 1422: {
  4671                           ;doprnt.c: 1438: if(flag & 0x03)
  4672                           
  4673                           ; BSR set to: 0
  4674  000EDE  C0A0  F09C         	movff	__doprnt@flag,??__doprnt
  4675  000EE2  0E03               	movlw	3
  4676  000EE4  179C               	andwf	??__doprnt& (0+255),f,b
  4677  000EE6  B4D8               	btfsc	status,2,c
  4678  000EE8  D035               	goto	l857
  4679                           
  4680                           ; BSR set to: 0
  4681                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  4682  000EEA  EE20 F002          	lfsr	2,2
  4683  000EEE  5196               	movf	__doprnt@pb& (0+255),w,b
  4684  000EF0  26D9               	addwf	fsr2l,f,c
  4685  000EF2  5197               	movf	(__doprnt@pb+1)& (0+255),w,b
  4686  000EF4  22DA               	addwfc	fsr2h,f,c
  4687  000EF6  50DE               	movf	postinc2,w,c
  4688  000EF8  10DE               	iorwf	postinc2,w,c
  4689  000EFA  B4D8               	btfsc	status,2,c
  4690  000EFC  D016               	goto	l856
  4691                           
  4692                           ; BSR set to: 0
  4693  000EFE  EE20 F002          	lfsr	2,2
  4694  000F02  5196               	movf	__doprnt@pb& (0+255),w,b
  4695  000F04  26D9               	addwf	fsr2l,f,c
  4696  000F06  5197               	movf	(__doprnt@pb+1)& (0+255),w,b
  4697  000F08  22DA               	addwfc	fsr2h,f,c
  4698  000F0A  CFDE F09C          	movff	postinc2,??__doprnt
  4699  000F0E  CFDD F09D          	movff	postdec2,??__doprnt+1
  4700  000F12  D801               	call	u6428
  4701  000F14  D01F               	goto	l857
  4702  000F16                     u6428:
  4703  000F16  0005               	push	
  4704  000F18  6EFA               	movwf	pclath,c
  4705  000F1A  519C               	movf	??__doprnt& (0+255),w,b
  4706  000F1C  6EFD               	movwf	tosl,c
  4707  000F1E  519D               	movf	(??__doprnt+1)& (0+255),w,b
  4708  000F20  6EFE               	movwf	tosh,c
  4709  000F22  6AFF               	clrf	tosu,c
  4710  000F24  50FA               	movf	pclath,w,c
  4711  000F26  0E2D               	movlw	45
  4712  000F28  0012               	return		;indir
  4713  000F2A                     l856:
  4714  000F2A  C096  FFD9         	movff	__doprnt@pb,fsr2l
  4715  000F2E  C097  FFDA         	movff	__doprnt@pb+1,fsr2h
  4716  000F32  CFDE F09C          	movff	postinc2,??__doprnt
  4717  000F36  CFDD F09D          	movff	postdec2,??__doprnt+1
  4718  000F3A  C09C  FFD9         	movff	??__doprnt,fsr2l
  4719  000F3E  C09D  FFDA         	movff	??__doprnt+1,fsr2h
  4720  000F42  0E2D               	movlw	45
  4721  000F44  6EDF               	movwf	indf2,c
  4722  000F46  C096  FFD9         	movff	__doprnt@pb,fsr2l
  4723  000F4A  C097  FFDA         	movff	__doprnt@pb+1,fsr2h
  4724  000F4E  2ADE               	incf	postinc2,f,c
  4725  000F50  0E00               	movlw	0
  4726  000F52  22DD               	addwfc	postdec2,f,c
  4727  000F54                     l857:
  4728                           
  4729                           ;doprnt.c: 1469: }
  4730                           ;doprnt.c: 1472: prec = c;
  4731  000F54  0100               	movlb	0	; () banked
  4732  000F56  51A7               	movf	__doprnt@c& (0+255),w,b
  4733  000F58  6F9E               	movwf	__doprnt@prec& (0+255),b
  4734  000F5A  6B9F               	clrf	(__doprnt@prec+1)& (0+255),b
  4735  000F5C  BF9E               	btfsc	__doprnt@prec& (0+255),7,b
  4736  000F5E  079F               	decf	(__doprnt@prec+1)& (0+255),f,b
  4737                           
  4738                           ;doprnt.c: 1474: while(prec--) {
  4739  000F60  D075               	goto	l861
  4740  000F62                     l5342:
  4741                           
  4742                           ; BSR set to: 0
  4743                           ;doprnt.c: 1478: {
  4744                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4745  000F62  C09E  F09C         	movff	__doprnt@prec,??__doprnt
  4746  000F66  C09F  F09D         	movff	__doprnt@prec+1,??__doprnt+1
  4747  000F6A  90D8               	bcf	status,0,c
  4748  000F6C  379C               	rlcf	??__doprnt& (0+255),f,b
  4749  000F6E  379D               	rlcf	(??__doprnt+1)& (0+255),f,b
  4750  000F70  90D8               	bcf	status,0,c
  4751  000F72  379C               	rlcf	??__doprnt& (0+255),f,b
  4752  000F74  379D               	rlcf	(??__doprnt+1)& (0+255),f,b
  4753  000F76  0EF1               	movlw	low _dpowers
  4754  000F78  259C               	addwf	??__doprnt& (0+255),w,b
  4755  000F7A  6EF6               	movwf	tblptrl,c
  4756  000F7C  0EFB               	movlw	high _dpowers
  4757  000F7E  219D               	addwfc	(??__doprnt+1)& (0+255),w,b
  4758  000F80  6EF7               	movwf	tblptrh,c
  4759  000F82                     	if	1	;There are 3 active tblptr bytes
  4760  000F82  6AF8               	clrf	tblptru,c
  4761  000F84  0E00               	movlw	low (__mediumconst shr (0+16))
  4762  000F86  22F8               	addwfc	tblptru,f,c
  4763  000F88                     	endif
  4764  000F88  0009               	tblrd		*+
  4765  000F8A  CFF5 F084          	movff	tablat,___lldiv@divisor
  4766  000F8E  0009               	tblrd		*+
  4767  000F90  CFF5 F085          	movff	tablat,___lldiv@divisor+1
  4768  000F94  0009               	tblrd		*+
  4769  000F96  CFF5 F086          	movff	tablat,___lldiv@divisor+2
  4770  000F9A  000A               	tblrd		*-
  4771  000F9C  CFF5 F087          	movff	tablat,___lldiv@divisor+3
  4772  000FA0  C0A1  F080         	movff	__doprnt@val,___lldiv@dividend
  4773  000FA4  C0A2  F081         	movff	__doprnt@val+1,___lldiv@dividend+1
  4774  000FA8  C0A3  F082         	movff	__doprnt@val+2,___lldiv@dividend+2
  4775  000FAC  C0A4  F083         	movff	__doprnt@val+3,___lldiv@dividend+3
  4776  000FB0  ECE7  F016         	call	___lldiv
  4777  000FB4  C080  F08D         	movff	?___lldiv,___llmod@dividend
  4778  000FB8  C081  F08E         	movff	?___lldiv+1,___llmod@dividend+1
  4779  000FBC  C082  F08F         	movff	?___lldiv+2,___llmod@dividend+2
  4780  000FC0  C083  F090         	movff	?___lldiv+3,___llmod@dividend+3
  4781  000FC4  0E0A               	movlw	10
  4782  000FC6  0100               	movlb	0	; () banked
  4783  000FC8  6F91               	movwf	___llmod@divisor& (0+255),b
  4784  000FCA  0E00               	movlw	0
  4785  000FCC  6F92               	movwf	(___llmod@divisor+1)& (0+255),b
  4786  000FCE  0E00               	movlw	0
  4787  000FD0  6F93               	movwf	(___llmod@divisor+2)& (0+255),b
  4788  000FD2  0E00               	movlw	0
  4789  000FD4  6F94               	movwf	(___llmod@divisor+3)& (0+255),b
  4790  000FD6  EC9C  F017         	call	___llmod	;wreg free
  4791  000FDA  0100               	movlb	0	; () banked
  4792  000FDC  518D               	movf	?___llmod& (0+255),w,b
  4793  000FDE  0F30               	addlw	48
  4794  000FE0  6FA7               	movwf	__doprnt@c& (0+255),b
  4795                           
  4796                           ; BSR set to: 0
  4797                           ;doprnt.c: 1523: }
  4798                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  4799  000FE2  EE20 F002          	lfsr	2,2
  4800  000FE6  5196               	movf	__doprnt@pb& (0+255),w,b
  4801  000FE8  26D9               	addwf	fsr2l,f,c
  4802  000FEA  5197               	movf	(__doprnt@pb+1)& (0+255),w,b
  4803  000FEC  22DA               	addwfc	fsr2h,f,c
  4804  000FEE  50DE               	movf	postinc2,w,c
  4805  000FF0  10DE               	iorwf	postinc2,w,c
  4806  000FF2  B4D8               	btfsc	status,2,c
  4807  000FF4  D016               	goto	l860
  4808                           
  4809                           ; BSR set to: 0
  4810  000FF6  EE20 F002          	lfsr	2,2
  4811  000FFA  5196               	movf	__doprnt@pb& (0+255),w,b
  4812  000FFC  26D9               	addwf	fsr2l,f,c
  4813  000FFE  5197               	movf	(__doprnt@pb+1)& (0+255),w,b
  4814  001000  22DA               	addwfc	fsr2h,f,c
  4815  001002  CFDE F09C          	movff	postinc2,??__doprnt
  4816  001006  CFDD F09D          	movff	postdec2,??__doprnt+1
  4817  00100A  D801               	call	u6448
  4818  00100C  D01F               	goto	l861
  4819  00100E                     u6448:
  4820  00100E  0005               	push	
  4821  001010  6EFA               	movwf	pclath,c
  4822  001012  519C               	movf	??__doprnt& (0+255),w,b
  4823  001014  6EFD               	movwf	tosl,c
  4824  001016  519D               	movf	(??__doprnt+1)& (0+255),w,b
  4825  001018  6EFE               	movwf	tosh,c
  4826  00101A  6AFF               	clrf	tosu,c
  4827  00101C  50FA               	movf	pclath,w,c
  4828  00101E  51A7               	movf	__doprnt@c& (0+255),w,b
  4829  001020  0012               	return		;indir
  4830  001022                     l860:
  4831  001022  C096  FFD9         	movff	__doprnt@pb,fsr2l
  4832  001026  C097  FFDA         	movff	__doprnt@pb+1,fsr2h
  4833  00102A  CFDE F09C          	movff	postinc2,??__doprnt
  4834  00102E  CFDD F09D          	movff	postdec2,??__doprnt+1
  4835  001032  C09C  FFD9         	movff	??__doprnt,fsr2l
  4836  001036  C09D  FFDA         	movff	??__doprnt+1,fsr2h
  4837  00103A  C0A7  FFDF         	movff	__doprnt@c,indf2
  4838  00103E  C096  FFD9         	movff	__doprnt@pb,fsr2l
  4839  001042  C097  FFDA         	movff	__doprnt@pb+1,fsr2h
  4840  001046  2ADE               	incf	postinc2,f,c
  4841  001048  0E00               	movlw	0
  4842  00104A  22DD               	addwfc	postdec2,f,c
  4843  00104C                     l861:
  4844  00104C  0100               	movlb	0	; () banked
  4845  00104E  079E               	decf	__doprnt@prec& (0+255),f,b
  4846  001050  A0D8               	btfss	status,0,c
  4847  001052  079F               	decf	(__doprnt@prec+1)& (0+255),f,b
  4848  001054  299E               	incf	__doprnt@prec& (0+255),w,b
  4849  001056  E185               	bnz	l5342
  4850  001058  299F               	incf	(__doprnt@prec+1)& (0+255),w,b
  4851  00105A  A4D8               	btfss	status,2,c
  4852  00105C  D782               	goto	l859
  4853  00105E                     u6450:
  4854                           
  4855                           ; BSR set to: 0
  4856                           
  4857                           ; BSR set to: 0
  4858  00105E  C098  FFF6         	movff	__doprnt@f,tblptrl
  4859  001062  C099  FFF7         	movff	__doprnt@f+1,tblptrh
  4860  001066  0100               	movlb	0	; () banked
  4861  001068  4B98               	infsnz	__doprnt@f& (0+255),f,b
  4862  00106A  2B99               	incf	(__doprnt@f+1)& (0+255),f,b
  4863  00106C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4864  00106C  6AF8               	clrf	tblptru,c
  4865  00106E                     	endif
  4866  00106E                     	if	0	;tblptru may be non-zero
  4867  00106E                     	endif
  4868  00106E  0008               	tblrd		*
  4869  001070  CFF5 F0A7          	movff	tablat,__doprnt@c
  4870  001074  51A7               	movf	__doprnt@c& (0+255),w,b
  4871  001076  A4D8               	btfss	status,2,c
  4872  001078  D5E4               	goto	l829
  4873  00107A                     u6460:
  4874                           
  4875                           ; BSR set to: 0
  4876                           ;doprnt.c: 1540: return 0;
  4877                           
  4878                           ; BSR set to: 0
  4879                           
  4880                           ;doprnt.c: 1525: }
  4881                           ;doprnt.c: 1533: }
  4882                           ;doprnt.c: 1535: alldone:
  4883                           
  4884                           ; BSR set to: 0
  4885  00107A  0E00               	movlw	0
  4886  00107C  6F97               	movwf	(?__doprnt+1)& (0+255),b
  4887  00107E  0E00               	movlw	0
  4888  001080  6F96               	movwf	?__doprnt& (0+255),b
  4889  001082  0012               	return	
  4890  001084                     __end_of__doprnt:
  4891                           	opt stack 0
  4892                           tosu	equ	0xFFF
  4893                           tosh	equ	0xFFE
  4894                           tosl	equ	0xFFD
  4895                           pclath	equ	0xFFA
  4896                           tblptru	equ	0xFF8
  4897                           tblptrh	equ	0xFF7
  4898                           tblptrl	equ	0xFF6
  4899                           tablat	equ	0xFF5
  4900                           prodh	equ	0xFF4
  4901                           prodl	equ	0xFF3
  4902                           intcon	equ	0xFF2
  4903                           indf0	equ	0xFEF
  4904                           postinc0	equ	0xFEE
  4905                           fsr0h	equ	0xFEA
  4906                           fsr0l	equ	0xFE9
  4907                           wreg	equ	0xFE8
  4908                           postdec1	equ	0xFE5
  4909                           plusw1	equ	0xFE3
  4910                           fsr1l	equ	0xFE1
  4911                           indf2	equ	0xFDF
  4912                           postinc2	equ	0xFDE
  4913                           postdec2	equ	0xFDD
  4914                           plusw2	equ	0xFDB
  4915                           fsr2h	equ	0xFDA
  4916                           fsr2l	equ	0xFD9
  4917                           status	equ	0xFD8
  4918                           
  4919 ;; *************** function ___llmod *****************
  4920 ;; Defined at:
  4921 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  4922 ;; Parameters:    Size  Location     Type
  4923 ;;  dividend        4   13[BANK0 ] unsigned long 
  4924 ;;  divisor         4   17[BANK0 ] unsigned long 
  4925 ;; Auto vars:     Size  Location     Type
  4926 ;;  counter         1   21[BANK0 ] unsigned char 
  4927 ;; Return value:  Size  Location     Type
  4928 ;;                  4   13[BANK0 ] unsigned long 
  4929 ;; Registers used:
  4930 ;;		wreg, status,2, status,0
  4931 ;; Tracked objects:
  4932 ;;		On entry : 0/0
  4933 ;;		On exit  : 0/0
  4934 ;;		Unchanged: 0/0
  4935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4936 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4937 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4939 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4940 ;;Total ram usage:        9 bytes
  4941 ;; Hardware stack levels used:    1
  4942 ;; Hardware stack levels required when called:    4
  4943 ;; This function calls:
  4944 ;;		Nothing
  4945 ;; This function is called by:
  4946 ;;		__doprnt
  4947 ;; This function uses a non-reentrant model
  4948 ;;
  4949                           
  4950                           	psect	text8
  4951  002F38                     __ptext8:
  4952                           	opt stack 0
  4953  002F38                     ___llmod:
  4954                           	opt stack 23
  4955                           
  4956                           ; BSR set to: 0
  4957                           ;incstack = 0
  4958  002F38  0100               	movlb	0	; () banked
  4959  002F3A  5191               	movf	___llmod@divisor& (0+255),w,b
  4960  002F3C  1192               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  4961  002F3E  1193               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  4962  002F40  1194               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  4963  002F42  B4D8               	btfsc	status,2,c
  4964  002F44  D024               	goto	l1230
  4965                           
  4966                           ; BSR set to: 0
  4967  002F46  0E01               	movlw	1
  4968  002F48  6F95               	movwf	___llmod@counter& (0+255),b
  4969  002F4A  D006               	goto	l1225
  4970  002F4C                     
  4971                           ; BSR set to: 0
  4972                           
  4973                           ; BSR set to: 0
  4974  002F4C  90D8               	bcf	status,0,c
  4975  002F4E  3791               	rlcf	___llmod@divisor& (0+255),f,b
  4976  002F50  3792               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  4977  002F52  3793               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  4978  002F54  3794               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  4979  002F56  2B95               	incf	___llmod@counter& (0+255),f,b
  4980  002F58                     l1225:
  4981                           
  4982                           ; BSR set to: 0
  4983                           
  4984                           ; BSR set to: 0
  4985  002F58  AF94               	btfss	(___llmod@divisor+3)& (0+255),7,b
  4986  002F5A  D7F8               	goto	l1226
  4987  002F5C                     u5820:
  4988                           
  4989                           ; BSR set to: 0
  4990                           
  4991                           ; BSR set to: 0
  4992                           
  4993                           ; BSR set to: 0
  4994  002F5C  5191               	movf	___llmod@divisor& (0+255),w,b
  4995  002F5E  5D8D               	subwf	___llmod@dividend& (0+255),w,b
  4996  002F60  5192               	movf	(___llmod@divisor+1)& (0+255),w,b
  4997  002F62  598E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  4998  002F64  5193               	movf	(___llmod@divisor+2)& (0+255),w,b
  4999  002F66  598F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  5000  002F68  5194               	movf	(___llmod@divisor+3)& (0+255),w,b
  5001  002F6A  5990               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  5002  002F6C  A0D8               	btfss	status,0,c
  5003  002F6E  D008               	goto	l1229
  5004                           
  5005                           ; BSR set to: 0
  5006  002F70  5191               	movf	___llmod@divisor& (0+255),w,b
  5007  002F72  5F8D               	subwf	___llmod@dividend& (0+255),f,b
  5008  002F74  5192               	movf	(___llmod@divisor+1)& (0+255),w,b
  5009  002F76  5B8E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  5010  002F78  5193               	movf	(___llmod@divisor+2)& (0+255),w,b
  5011  002F7A  5B8F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  5012  002F7C  5194               	movf	(___llmod@divisor+3)& (0+255),w,b
  5013  002F7E  5B90               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  5014  002F80                     l1229:
  5015                           
  5016                           ; BSR set to: 0
  5017                           
  5018                           ; BSR set to: 0
  5019  002F80  90D8               	bcf	status,0,c
  5020  002F82  3394               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  5021  002F84  3393               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  5022  002F86  3392               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  5023  002F88  3391               	rrcf	___llmod@divisor& (0+255),f,b
  5024                           
  5025                           ; BSR set to: 0
  5026  002F8A  2F95               	decfsz	___llmod@counter& (0+255),f,b
  5027  002F8C  D7E7               	goto	u5820
  5028  002F8E                     l1230:
  5029                           
  5030                           ; BSR set to: 0
  5031                           
  5032                           ; BSR set to: 0
  5033  002F8E  C08D  F08D         	movff	___llmod@dividend,?___llmod
  5034  002F92  C08E  F08E         	movff	___llmod@dividend+1,?___llmod+1
  5035  002F96  C08F  F08F         	movff	___llmod@dividend+2,?___llmod+2
  5036  002F9A  C090  F090         	movff	___llmod@dividend+3,?___llmod+3
  5037                           
  5038                           ; BSR set to: 0
  5039  002F9E  0012               	return		;funcret
  5040  002FA0                     __end_of___llmod:
  5041                           	opt stack 0
  5042                           tosu	equ	0xFFF
  5043                           tosh	equ	0xFFE
  5044                           tosl	equ	0xFFD
  5045                           pclath	equ	0xFFA
  5046                           tblptru	equ	0xFF8
  5047                           tblptrh	equ	0xFF7
  5048                           tblptrl	equ	0xFF6
  5049                           tablat	equ	0xFF5
  5050                           prodh	equ	0xFF4
  5051                           prodl	equ	0xFF3
  5052                           intcon	equ	0xFF2
  5053                           indf0	equ	0xFEF
  5054                           postinc0	equ	0xFEE
  5055                           fsr0h	equ	0xFEA
  5056                           fsr0l	equ	0xFE9
  5057                           wreg	equ	0xFE8
  5058                           postdec1	equ	0xFE5
  5059                           plusw1	equ	0xFE3
  5060                           fsr1l	equ	0xFE1
  5061                           indf2	equ	0xFDF
  5062                           postinc2	equ	0xFDE
  5063                           postdec2	equ	0xFDD
  5064                           plusw2	equ	0xFDB
  5065                           fsr2h	equ	0xFDA
  5066                           fsr2l	equ	0xFD9
  5067                           status	equ	0xFD8
  5068                           
  5069 ;; *************** function _packageCompartment *****************
  5070 ;; Defined at:
  5071 ;;		line 25 in file "main.c"
  5072 ;; Parameters:    Size  Location     Type
  5073 ;;  b               1    wreg     unsigned char 
  5074 ;;  n               1   29[BANK0 ] unsigned char 
  5075 ;;  s               1   30[BANK0 ] unsigned char 
  5076 ;;  w               1   31[BANK0 ] unsigned char 
  5077 ;; Auto vars:     Size  Location     Type
  5078 ;;  b               1   37[BANK0 ] unsigned char 
  5079 ;;  currTime        3   66[BANK0 ] unsigned char 
  5080 ;;  timeW           3   47[BANK0 ] unsigned char 
  5081 ;;  timeS           3   44[BANK0 ] unsigned char 
  5082 ;;  timeN           3   41[BANK0 ] unsigned char 
  5083 ;;  timeB           3   38[BANK0 ] unsigned char 
  5084 ;;  instr           2   35[BANK0 ] unsigned char [2]
  5085 ;;  doneW           2   64[BANK0 ] int 
  5086 ;;  doneS           2   62[BANK0 ] int 
  5087 ;;  doneN           2   60[BANK0 ] int 
  5088 ;;  doneB           2   58[BANK0 ] int 
  5089 ;;  numW            2   56[BANK0 ] int 
  5090 ;;  numS            2   54[BANK0 ] int 
  5091 ;;  numN            2   52[BANK0 ] int 
  5092 ;;  numB            2   50[BANK0 ] int 
  5093 ;; Return value:  Size  Location     Type
  5094 ;;                  1    wreg      void 
  5095 ;; Registers used:
  5096 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5097 ;; Tracked objects:
  5098 ;;		On entry : 0/0
  5099 ;;		On exit  : 0/0
  5100 ;;		Unchanged: 0/0
  5101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5102 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5103 ;;      Locals:         0      34       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5104 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5105 ;;      Totals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5106 ;;Total ram usage:       40 bytes
  5107 ;; Hardware stack levels used:    1
  5108 ;; Hardware stack levels required when called:    7
  5109 ;; This function calls:
  5110 ;;		_I2C_Send
  5111 ;;		___ftadd
  5112 ;;		___ftge
  5113 ;;		_motorControl
  5114 ;;		_tic
  5115 ;;		_tock
  5116 ;; This function is called by:
  5117 ;;		_packaging
  5118 ;; This function uses a non-reentrant model
  5119 ;;
  5120                           
  5121                           	psect	text9
  5122  001084                     __ptext9:
  5123                           	opt stack 0
  5124  001084                     _packageCompartment:
  5125                           	opt stack 21
  5126                           
  5127                           ; BSR set to: 0
  5128                           ;incstack = 0
  5129                           ;packageCompartment@b stored from wreg
  5130  001084  0100               	movlb	0	; () banked
  5131  001086  6FA5               	movwf	packageCompartment@b& (0+255),b
  5132                           
  5133                           ;main.c: 26: currentMode = PACKAGING;
  5134  001088  0E00               	movlw	0
  5135  00108A  6E49               	movwf	_currentMode+1,c
  5136  00108C  0E02               	movlw	2
  5137  00108E  6E48               	movwf	_currentMode,c
  5138                           
  5139                           ;main.c: 27: TRISA = 0xFF;
  5140  001090  6892               	setf	3986,c	;volatile
  5141                           
  5142                           ;main.c: 30: motorControl(BOLT, FORWARD);
  5143  001092  0E00               	movlw	0
  5144  001094  0100               	movlb	0	; () banked
  5145  001096  6F80               	movwf	motorControl@dir& (0+255),b
  5146  001098  0E00               	movlw	0
  5147  00109A  EC66  F013         	call	_motorControl
  5148                           
  5149                           ;main.c: 31: motorControl(NUT, FORWARD);
  5150  00109E  0E00               	movlw	0
  5151  0010A0  0100               	movlb	0	; () banked
  5152  0010A2  6F80               	movwf	motorControl@dir& (0+255),b
  5153  0010A4  0E01               	movlw	1
  5154  0010A6  EC66  F013         	call	_motorControl
  5155                           
  5156                           ;main.c: 32: motorControl(SPACER, FORWARD);
  5157  0010AA  0E00               	movlw	0
  5158  0010AC  0100               	movlb	0	; () banked
  5159  0010AE  6F80               	movwf	motorControl@dir& (0+255),b
  5160  0010B0  0E02               	movlw	2
  5161  0010B2  EC66  F013         	call	_motorControl
  5162                           
  5163                           ;main.c: 33: motorControl(WASHER, FORWARD);
  5164  0010B6  0E00               	movlw	0
  5165  0010B8  0100               	movlb	0	; () banked
  5166  0010BA  6F80               	movwf	motorControl@dir& (0+255),b
  5167  0010BC  0E03               	movlw	3
  5168  0010BE  EC66  F013         	call	_motorControl
  5169                           
  5170                           ;main.c: 35: int numB=0, numN=0, numS=0, numW=0;
  5171  0010C2  0E00               	movlw	0
  5172  0010C4  0100               	movlb	0	; () banked
  5173  0010C6  6FB3               	movwf	(packageCompartment@numB+1)& (0+255),b
  5174  0010C8  0E00               	movlw	0
  5175  0010CA  6FB2               	movwf	packageCompartment@numB& (0+255),b
  5176                           
  5177                           ; BSR set to: 0
  5178  0010CC  0E00               	movlw	0
  5179  0010CE  6FB5               	movwf	(packageCompartment@numN+1)& (0+255),b
  5180  0010D0  0E00               	movlw	0
  5181  0010D2  6FB4               	movwf	packageCompartment@numN& (0+255),b
  5182                           
  5183                           ; BSR set to: 0
  5184  0010D4  0E00               	movlw	0
  5185  0010D6  6FB7               	movwf	(packageCompartment@numS+1)& (0+255),b
  5186  0010D8  0E00               	movlw	0
  5187  0010DA  6FB6               	movwf	packageCompartment@numS& (0+255),b
  5188                           
  5189                           ; BSR set to: 0
  5190  0010DC  0E00               	movlw	0
  5191  0010DE  6FB9               	movwf	(packageCompartment@numW+1)& (0+255),b
  5192  0010E0  0E00               	movlw	0
  5193  0010E2  6FB8               	movwf	packageCompartment@numW& (0+255),b
  5194                           
  5195                           ; BSR set to: 0
  5196                           ;main.c: 36: int doneB=0, doneN=0, doneS=0, doneW=0;
  5197  0010E4  0E00               	movlw	0
  5198  0010E6  6FBB               	movwf	(packageCompartment@doneB+1)& (0+255),b
  5199  0010E8  0E00               	movlw	0
  5200  0010EA  6FBA               	movwf	packageCompartment@doneB& (0+255),b
  5201                           
  5202                           ; BSR set to: 0
  5203  0010EC  0E00               	movlw	0
  5204  0010EE  6FBD               	movwf	(packageCompartment@doneN+1)& (0+255),b
  5205  0010F0  0E00               	movlw	0
  5206  0010F2  6FBC               	movwf	packageCompartment@doneN& (0+255),b
  5207                           
  5208                           ; BSR set to: 0
  5209  0010F4  0E00               	movlw	0
  5210  0010F6  6FBF               	movwf	(packageCompartment@doneS+1)& (0+255),b
  5211  0010F8  0E00               	movlw	0
  5212  0010FA  6FBE               	movwf	packageCompartment@doneS& (0+255),b
  5213                           
  5214                           ; BSR set to: 0
  5215  0010FC  0E00               	movlw	0
  5216  0010FE  6FC1               	movwf	(packageCompartment@doneW+1)& (0+255),b
  5217  001100  0E00               	movlw	0
  5218  001102  6FC0               	movwf	packageCompartment@doneW& (0+255),b
  5219                           
  5220                           ; BSR set to: 0
  5221                           ;main.c: 37: double currTime, timeB=0, timeN=0, timeS=0, timeW=0;
  5222  001104  0E00               	movlw	0
  5223  001106  6FA6               	movwf	packageCompartment@timeB& (0+255),b
  5224  001108  0E00               	movlw	0
  5225  00110A  6FA7               	movwf	(packageCompartment@timeB+1)& (0+255),b
  5226  00110C  0E00               	movlw	0
  5227  00110E  6FA8               	movwf	(packageCompartment@timeB+2)& (0+255),b
  5228                           
  5229                           ; BSR set to: 0
  5230  001110  0E00               	movlw	0
  5231  001112  6FA9               	movwf	packageCompartment@timeN& (0+255),b
  5232  001114  0E00               	movlw	0
  5233  001116  6FAA               	movwf	(packageCompartment@timeN+1)& (0+255),b
  5234  001118  0E00               	movlw	0
  5235  00111A  6FAB               	movwf	(packageCompartment@timeN+2)& (0+255),b
  5236                           
  5237                           ; BSR set to: 0
  5238  00111C  0E00               	movlw	0
  5239  00111E  6FAC               	movwf	packageCompartment@timeS& (0+255),b
  5240  001120  0E00               	movlw	0
  5241  001122  6FAD               	movwf	(packageCompartment@timeS+1)& (0+255),b
  5242  001124  0E00               	movlw	0
  5243  001126  6FAE               	movwf	(packageCompartment@timeS+2)& (0+255),b
  5244                           
  5245                           ; BSR set to: 0
  5246  001128  0E00               	movlw	0
  5247  00112A  6FAF               	movwf	packageCompartment@timeW& (0+255),b
  5248  00112C  0E00               	movlw	0
  5249  00112E  6FB0               	movwf	(packageCompartment@timeW+1)& (0+255),b
  5250  001130  0E00               	movlw	0
  5251  001132  6FB1               	movwf	(packageCompartment@timeW+2)& (0+255),b
  5252                           
  5253                           ; BSR set to: 0
  5254                           ;main.c: 39: tic();
  5255  001134  ECB2  F019         	call	_tic	;wreg free
  5256  001138                     
  5257                           ;main.c: 41: currTime = tock();
  5258  001138  ECAB  F019         	call	_tock	;wreg free
  5259  00113C  C080  F0C2         	movff	?_tock,packageCompartment@currTime
  5260  001140  C081  F0C3         	movff	?_tock+1,packageCompartment@currTime+1
  5261  001144  C082  F0C4         	movff	?_tock+2,packageCompartment@currTime+2
  5262                           
  5263                           ;main.c: 53: if (PORTAbits.RA3 == 0 && currTime > timeB + 1) {
  5264  001148  B680               	btfsc	3968,3,c	;volatile
  5265  00114A  D038               	goto	l100
  5266  00114C  0E00               	movlw	0
  5267  00114E  0100               	movlb	0	; () banked
  5268  001150  6F8B               	movwf	___ftadd@f2& (0+255),b
  5269  001152  0E80               	movlw	128
  5270  001154  6F8C               	movwf	(___ftadd@f2+1)& (0+255),b
  5271  001156  0E3F               	movlw	63
  5272  001158  6F8D               	movwf	(___ftadd@f2+2)& (0+255),b
  5273  00115A  C0A6  F088         	movff	packageCompartment@timeB,___ftadd@f1
  5274  00115E  C0A7  F089         	movff	packageCompartment@timeB+1,___ftadd@f1+1
  5275  001162  C0A8  F08A         	movff	packageCompartment@timeB+2,___ftadd@f1+2
  5276  001166  EC21  F011         	call	___ftadd	;wreg free
  5277  00116A  C088  F094         	movff	?___ftadd,___ftge@ff1
  5278  00116E  C089  F095         	movff	?___ftadd+1,___ftge@ff1+1
  5279  001172  C08A  F096         	movff	?___ftadd+2,___ftge@ff1+2
  5280  001176  C0C2  F097         	movff	packageCompartment@currTime,___ftge@ff2
  5281  00117A  C0C3  F098         	movff	packageCompartment@currTime+1,___ftge@ff2+1
  5282  00117E  C0C4  F099         	movff	packageCompartment@currTime+2,___ftge@ff2+2
  5283  001182  ECD3  F015         	call	___ftge	;wreg free
  5284  001186  0100               	movlb	0	; () banked
  5285  001188  B0D8               	btfsc	status,0,c
  5286  00118A  D018               	goto	l100
  5287                           
  5288                           ; BSR set to: 0
  5289                           ;main.c: 54: timeB = currTime;
  5290  00118C  C0C2  F0A6         	movff	packageCompartment@currTime,packageCompartment@timeB
  5291  001190  C0C3  F0A7         	movff	packageCompartment@currTime+1,packageCompartment@timeB+1
  5292  001194  C0C4  F0A8         	movff	packageCompartment@currTime+2,packageCompartment@timeB+2
  5293                           
  5294                           ; BSR set to: 0
  5295                           ;main.c: 55: numB++;
  5296  001198  4BB2               	infsnz	packageCompartment@numB& (0+255),f,b
  5297  00119A  2BB3               	incf	(packageCompartment@numB+1)& (0+255),f,b
  5298                           
  5299                           ;main.c: 56: dispensed.b++;
  5300  00119C  4BDC               	infsnz	_dispensed& (0+255),f,b
  5301  00119E  2BDD               	incf	(_dispensed+1)& (0+255),f,b
  5302                           
  5303                           ; BSR set to: 0
  5304                           ;main.c: 57: I2C_Send(nanoAddr, "\1Bolt Counted\0");
  5305  0011A0  0E77               	movlw	low STR_1
  5306  0011A2  6F83               	movwf	I2C_Send@data& (0+255),b
  5307  0011A4  0EFF               	movlw	high STR_1
  5308  0011A6  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  5309  0011A8  0E3F               	movlw	low _nanoAddr
  5310  0011AA  6EF6               	movwf	tblptrl,c
  5311  0011AC                     	if	1	;There is more than 1 active tblptr byte
  5312  0011AC  0EFC               	movlw	high _nanoAddr
  5313  0011AE  6EF7               	movwf	tblptrh,c
  5314  0011B0                     	endif
  5315  0011B0                     	if	1	;There are 3 active tblptr bytes
  5316  0011B0  0E00               	movlw	low (_nanoAddr shr (0+16))
  5317  0011B2  6EF8               	movwf	tblptru,c
  5318  0011B4                     	endif
  5319  0011B4  0008               	tblrd		*
  5320  0011B6  50F5               	movf	tablat,w,c
  5321  0011B8  EC83  F015         	call	_I2C_Send
  5322  0011BC                     l100:
  5323                           
  5324                           ;main.c: 58: }
  5325                           ;main.c: 61: if (PORTAbits.RA1 == 0 && currTime > timeN + 1) {
  5326  0011BC  B280               	btfsc	3968,1,c	;volatile
  5327  0011BE  D038               	goto	l101
  5328  0011C0  0E00               	movlw	0
  5329  0011C2  0100               	movlb	0	; () banked
  5330  0011C4  6F8B               	movwf	___ftadd@f2& (0+255),b
  5331  0011C6  0E80               	movlw	128
  5332  0011C8  6F8C               	movwf	(___ftadd@f2+1)& (0+255),b
  5333  0011CA  0E3F               	movlw	63
  5334  0011CC  6F8D               	movwf	(___ftadd@f2+2)& (0+255),b
  5335  0011CE  C0A9  F088         	movff	packageCompartment@timeN,___ftadd@f1
  5336  0011D2  C0AA  F089         	movff	packageCompartment@timeN+1,___ftadd@f1+1
  5337  0011D6  C0AB  F08A         	movff	packageCompartment@timeN+2,___ftadd@f1+2
  5338  0011DA  EC21  F011         	call	___ftadd	;wreg free
  5339  0011DE  C088  F094         	movff	?___ftadd,___ftge@ff1
  5340  0011E2  C089  F095         	movff	?___ftadd+1,___ftge@ff1+1
  5341  0011E6  C08A  F096         	movff	?___ftadd+2,___ftge@ff1+2
  5342  0011EA  C0C2  F097         	movff	packageCompartment@currTime,___ftge@ff2
  5343  0011EE  C0C3  F098         	movff	packageCompartment@currTime+1,___ftge@ff2+1
  5344  0011F2  C0C4  F099         	movff	packageCompartment@currTime+2,___ftge@ff2+2
  5345  0011F6  ECD3  F015         	call	___ftge	;wreg free
  5346  0011FA  0100               	movlb	0	; () banked
  5347  0011FC  B0D8               	btfsc	status,0,c
  5348  0011FE  D018               	goto	l101
  5349                           
  5350                           ; BSR set to: 0
  5351                           ;main.c: 62: timeN = currTime;
  5352  001200  C0C2  F0A9         	movff	packageCompartment@currTime,packageCompartment@timeN
  5353  001204  C0C3  F0AA         	movff	packageCompartment@currTime+1,packageCompartment@timeN+1
  5354  001208  C0C4  F0AB         	movff	packageCompartment@currTime+2,packageCompartment@timeN+2
  5355                           
  5356                           ; BSR set to: 0
  5357                           ;main.c: 63: numN++;
  5358  00120C  4BB4               	infsnz	packageCompartment@numN& (0+255),f,b
  5359  00120E  2BB5               	incf	(packageCompartment@numN+1)& (0+255),f,b
  5360                           
  5361                           ;main.c: 64: dispensed.n++;
  5362  001210  4BDE               	infsnz	(_dispensed+2)& (0+255),f,b
  5363  001212  2BDF               	incf	(_dispensed+3)& (0+255),f,b
  5364                           
  5365                           ; BSR set to: 0
  5366                           ;main.c: 65: I2C_Send(nanoAddr, "\1Nut Counted\0");
  5367  001214  0EB2               	movlw	low STR_2
  5368  001216  6F83               	movwf	I2C_Send@data& (0+255),b
  5369  001218  0EFF               	movlw	high STR_2
  5370  00121A  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  5371  00121C  0E3F               	movlw	low _nanoAddr
  5372  00121E  6EF6               	movwf	tblptrl,c
  5373  001220                     	if	1	;There is more than 1 active tblptr byte
  5374  001220  0EFC               	movlw	high _nanoAddr
  5375  001222  6EF7               	movwf	tblptrh,c
  5376  001224                     	endif
  5377  001224                     	if	1	;There are 3 active tblptr bytes
  5378  001224  0E00               	movlw	low (_nanoAddr shr (0+16))
  5379  001226  6EF8               	movwf	tblptru,c
  5380  001228                     	endif
  5381  001228  0008               	tblrd		*
  5382  00122A  50F5               	movf	tablat,w,c
  5383  00122C  EC83  F015         	call	_I2C_Send
  5384  001230                     l101:
  5385                           
  5386                           ;main.c: 66: }
  5387                           ;main.c: 69: if (PORTAbits.RA0 == 0 && currTime > timeS + 1) {
  5388  001230  B080               	btfsc	3968,0,c	;volatile
  5389  001232  D038               	goto	l102
  5390  001234  0E00               	movlw	0
  5391  001236  0100               	movlb	0	; () banked
  5392  001238  6F8B               	movwf	___ftadd@f2& (0+255),b
  5393  00123A  0E80               	movlw	128
  5394  00123C  6F8C               	movwf	(___ftadd@f2+1)& (0+255),b
  5395  00123E  0E3F               	movlw	63
  5396  001240  6F8D               	movwf	(___ftadd@f2+2)& (0+255),b
  5397  001242  C0AC  F088         	movff	packageCompartment@timeS,___ftadd@f1
  5398  001246  C0AD  F089         	movff	packageCompartment@timeS+1,___ftadd@f1+1
  5399  00124A  C0AE  F08A         	movff	packageCompartment@timeS+2,___ftadd@f1+2
  5400  00124E  EC21  F011         	call	___ftadd	;wreg free
  5401  001252  C088  F094         	movff	?___ftadd,___ftge@ff1
  5402  001256  C089  F095         	movff	?___ftadd+1,___ftge@ff1+1
  5403  00125A  C08A  F096         	movff	?___ftadd+2,___ftge@ff1+2
  5404  00125E  C0C2  F097         	movff	packageCompartment@currTime,___ftge@ff2
  5405  001262  C0C3  F098         	movff	packageCompartment@currTime+1,___ftge@ff2+1
  5406  001266  C0C4  F099         	movff	packageCompartment@currTime+2,___ftge@ff2+2
  5407  00126A  ECD3  F015         	call	___ftge	;wreg free
  5408  00126E  0100               	movlb	0	; () banked
  5409  001270  B0D8               	btfsc	status,0,c
  5410  001272  D018               	goto	l102
  5411                           
  5412                           ; BSR set to: 0
  5413                           ;main.c: 70: timeS = currTime;
  5414  001274  C0C2  F0AC         	movff	packageCompartment@currTime,packageCompartment@timeS
  5415  001278  C0C3  F0AD         	movff	packageCompartment@currTime+1,packageCompartment@timeS+1
  5416  00127C  C0C4  F0AE         	movff	packageCompartment@currTime+2,packageCompartment@timeS+2
  5417                           
  5418                           ; BSR set to: 0
  5419                           ;main.c: 71: numS++;
  5420  001280  4BB6               	infsnz	packageCompartment@numS& (0+255),f,b
  5421  001282  2BB7               	incf	(packageCompartment@numS+1)& (0+255),f,b
  5422                           
  5423                           ;main.c: 72: dispensed.s++;
  5424  001284  4BE0               	infsnz	(_dispensed+4)& (0+255),f,b
  5425  001286  2BE1               	incf	(_dispensed+5)& (0+255),f,b
  5426                           
  5427                           ; BSR set to: 0
  5428                           ;main.c: 73: I2C_Send(nanoAddr, "\1Spacer Counted\0");
  5429  001288  0E23               	movlw	low STR_3
  5430  00128A  6F83               	movwf	I2C_Send@data& (0+255),b
  5431  00128C  0EFF               	movlw	high STR_3
  5432  00128E  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  5433  001290  0E3F               	movlw	low _nanoAddr
  5434  001292  6EF6               	movwf	tblptrl,c
  5435  001294                     	if	1	;There is more than 1 active tblptr byte
  5436  001294  0EFC               	movlw	high _nanoAddr
  5437  001296  6EF7               	movwf	tblptrh,c
  5438  001298                     	endif
  5439  001298                     	if	1	;There are 3 active tblptr bytes
  5440  001298  0E00               	movlw	low (_nanoAddr shr (0+16))
  5441  00129A  6EF8               	movwf	tblptru,c
  5442  00129C                     	endif
  5443  00129C  0008               	tblrd		*
  5444  00129E  50F5               	movf	tablat,w,c
  5445  0012A0  EC83  F015         	call	_I2C_Send
  5446  0012A4                     l102:
  5447                           
  5448                           ;main.c: 74: }
  5449                           ;main.c: 77: if (PORTAbits.RA2 == 0 && currTime > timeW + 1) {
  5450  0012A4  B480               	btfsc	3968,2,c	;volatile
  5451  0012A6  D038               	goto	l103
  5452  0012A8  0E00               	movlw	0
  5453  0012AA  0100               	movlb	0	; () banked
  5454  0012AC  6F8B               	movwf	___ftadd@f2& (0+255),b
  5455  0012AE  0E80               	movlw	128
  5456  0012B0  6F8C               	movwf	(___ftadd@f2+1)& (0+255),b
  5457  0012B2  0E3F               	movlw	63
  5458  0012B4  6F8D               	movwf	(___ftadd@f2+2)& (0+255),b
  5459  0012B6  C0AF  F088         	movff	packageCompartment@timeW,___ftadd@f1
  5460  0012BA  C0B0  F089         	movff	packageCompartment@timeW+1,___ftadd@f1+1
  5461  0012BE  C0B1  F08A         	movff	packageCompartment@timeW+2,___ftadd@f1+2
  5462  0012C2  EC21  F011         	call	___ftadd	;wreg free
  5463  0012C6  C088  F094         	movff	?___ftadd,___ftge@ff1
  5464  0012CA  C089  F095         	movff	?___ftadd+1,___ftge@ff1+1
  5465  0012CE  C08A  F096         	movff	?___ftadd+2,___ftge@ff1+2
  5466  0012D2  C0C2  F097         	movff	packageCompartment@currTime,___ftge@ff2
  5467  0012D6  C0C3  F098         	movff	packageCompartment@currTime+1,___ftge@ff2+1
  5468  0012DA  C0C4  F099         	movff	packageCompartment@currTime+2,___ftge@ff2+2
  5469  0012DE  ECD3  F015         	call	___ftge	;wreg free
  5470  0012E2  0100               	movlb	0	; () banked
  5471  0012E4  B0D8               	btfsc	status,0,c
  5472  0012E6  D018               	goto	l103
  5473                           
  5474                           ; BSR set to: 0
  5475                           ;main.c: 78: timeW = currTime;
  5476  0012E8  C0C2  F0AF         	movff	packageCompartment@currTime,packageCompartment@timeW
  5477  0012EC  C0C3  F0B0         	movff	packageCompartment@currTime+1,packageCompartment@timeW+1
  5478  0012F0  C0C4  F0B1         	movff	packageCompartment@currTime+2,packageCompartment@timeW+2
  5479                           
  5480                           ; BSR set to: 0
  5481                           ;main.c: 79: numW++;
  5482  0012F4  4BB8               	infsnz	packageCompartment@numW& (0+255),f,b
  5483  0012F6  2BB9               	incf	(packageCompartment@numW+1)& (0+255),f,b
  5484                           
  5485                           ;main.c: 80: dispensed.w++;
  5486  0012F8  4BE2               	infsnz	(_dispensed+6)& (0+255),f,b
  5487  0012FA  2BE3               	incf	(_dispensed+7)& (0+255),f,b
  5488                           
  5489                           ; BSR set to: 0
  5490                           ;main.c: 81: I2C_Send(nanoAddr, "\1Washer Counted\0");
  5491  0012FC  0E34               	movlw	low STR_4
  5492  0012FE  6F83               	movwf	I2C_Send@data& (0+255),b
  5493  001300  0EFF               	movlw	high STR_4
  5494  001302  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  5495  001304  0E3F               	movlw	low _nanoAddr
  5496  001306  6EF6               	movwf	tblptrl,c
  5497  001308                     	if	1	;There is more than 1 active tblptr byte
  5498  001308  0EFC               	movlw	high _nanoAddr
  5499  00130A  6EF7               	movwf	tblptrh,c
  5500  00130C                     	endif
  5501  00130C                     	if	1	;There are 3 active tblptr bytes
  5502  00130C  0E00               	movlw	low (_nanoAddr shr (0+16))
  5503  00130E  6EF8               	movwf	tblptru,c
  5504  001310                     	endif
  5505  001310  0008               	tblrd		*
  5506  001312  50F5               	movf	tablat,w,c
  5507  001314  EC83  F015         	call	_I2C_Send
  5508  001318                     l103:
  5509                           
  5510                           ;main.c: 82: }
  5511                           ;main.c: 85: if (numB >= b) {
  5512  001318  0100               	movlb	0	; () banked
  5513  00131A  51A5               	movf	packageCompartment@b& (0+255),w,b
  5514  00131C  6FA0               	movwf	??_packageCompartment& (0+255),b
  5515  00131E  6BA1               	clrf	(??_packageCompartment+1)& (0+255),b
  5516  001320  51A0               	movf	??_packageCompartment& (0+255),w,b
  5517  001322  5DB2               	subwf	packageCompartment@numB& (0+255),w,b
  5518  001324  51B3               	movf	(packageCompartment@numB+1)& (0+255),w,b
  5519  001326  0A80               	xorlw	128
  5520  001328  6FA2               	movwf	(??_packageCompartment+2)& (0+255),b
  5521  00132A  51A1               	movf	(??_packageCompartment+1)& (0+255),w,b
  5522  00132C  0A80               	xorlw	128
  5523  00132E  59A2               	subwfb	(??_packageCompartment+2)& (0+255),w,b
  5524  001330  A0D8               	btfss	status,0,c
  5525  001332  D00A               	goto	l104
  5526                           
  5527                           ; BSR set to: 0
  5528                           ;main.c: 86: motorControl(BOLT, STOPMOTOR);
  5529  001334  0E02               	movlw	2
  5530  001336  6F80               	movwf	motorControl@dir& (0+255),b
  5531  001338  0E00               	movlw	0
  5532  00133A  EC66  F013         	call	_motorControl
  5533                           
  5534                           ;main.c: 87: doneB=1;
  5535  00133E  0E00               	movlw	0
  5536  001340  0100               	movlb	0	; () banked
  5537  001342  6FBB               	movwf	(packageCompartment@doneB+1)& (0+255),b
  5538  001344  0E01               	movlw	1
  5539  001346  6FBA               	movwf	packageCompartment@doneB& (0+255),b
  5540  001348                     l104:
  5541                           
  5542                           ; BSR set to: 0
  5543                           ;main.c: 88: }
  5544                           ;main.c: 89: if (numN >= n) {
  5545                           
  5546                           ; BSR set to: 0
  5547  001348  519D               	movf	packageCompartment@n& (0+255),w,b
  5548  00134A  6FA0               	movwf	??_packageCompartment& (0+255),b
  5549  00134C  6BA1               	clrf	(??_packageCompartment+1)& (0+255),b
  5550  00134E  51A0               	movf	??_packageCompartment& (0+255),w,b
  5551  001350  5DB4               	subwf	packageCompartment@numN& (0+255),w,b
  5552  001352  51B5               	movf	(packageCompartment@numN+1)& (0+255),w,b
  5553  001354  0A80               	xorlw	128
  5554  001356  6FA2               	movwf	(??_packageCompartment+2)& (0+255),b
  5555  001358  51A1               	movf	(??_packageCompartment+1)& (0+255),w,b
  5556  00135A  0A80               	xorlw	128
  5557  00135C  59A2               	subwfb	(??_packageCompartment+2)& (0+255),w,b
  5558  00135E  A0D8               	btfss	status,0,c
  5559  001360  D00A               	goto	l105
  5560                           
  5561                           ; BSR set to: 0
  5562                           ;main.c: 90: motorControl(NUT, STOPMOTOR);
  5563  001362  0E02               	movlw	2
  5564  001364  6F80               	movwf	motorControl@dir& (0+255),b
  5565  001366  0E01               	movlw	1
  5566  001368  EC66  F013         	call	_motorControl
  5567                           
  5568                           ;main.c: 91: doneN=1;
  5569  00136C  0E00               	movlw	0
  5570  00136E  0100               	movlb	0	; () banked
  5571  001370  6FBD               	movwf	(packageCompartment@doneN+1)& (0+255),b
  5572  001372  0E01               	movlw	1
  5573  001374  6FBC               	movwf	packageCompartment@doneN& (0+255),b
  5574  001376                     l105:
  5575                           
  5576                           ; BSR set to: 0
  5577                           ;main.c: 92: }
  5578                           ;main.c: 93: if (numS >= s) {
  5579                           
  5580                           ; BSR set to: 0
  5581  001376  519E               	movf	packageCompartment@s& (0+255),w,b
  5582  001378  6FA0               	movwf	??_packageCompartment& (0+255),b
  5583  00137A  6BA1               	clrf	(??_packageCompartment+1)& (0+255),b
  5584  00137C  51A0               	movf	??_packageCompartment& (0+255),w,b
  5585  00137E  5DB6               	subwf	packageCompartment@numS& (0+255),w,b
  5586  001380  51B7               	movf	(packageCompartment@numS+1)& (0+255),w,b
  5587  001382  0A80               	xorlw	128
  5588  001384  6FA2               	movwf	(??_packageCompartment+2)& (0+255),b
  5589  001386  51A1               	movf	(??_packageCompartment+1)& (0+255),w,b
  5590  001388  0A80               	xorlw	128
  5591  00138A  59A2               	subwfb	(??_packageCompartment+2)& (0+255),w,b
  5592  00138C  A0D8               	btfss	status,0,c
  5593  00138E  D00A               	goto	l106
  5594                           
  5595                           ; BSR set to: 0
  5596                           ;main.c: 94: motorControl(SPACER, STOPMOTOR);
  5597  001390  0E02               	movlw	2
  5598  001392  6F80               	movwf	motorControl@dir& (0+255),b
  5599  001394  0E02               	movlw	2
  5600  001396  EC66  F013         	call	_motorControl
  5601                           
  5602                           ;main.c: 95: doneS=1;
  5603  00139A  0E00               	movlw	0
  5604  00139C  0100               	movlb	0	; () banked
  5605  00139E  6FBF               	movwf	(packageCompartment@doneS+1)& (0+255),b
  5606  0013A0  0E01               	movlw	1
  5607  0013A2  6FBE               	movwf	packageCompartment@doneS& (0+255),b
  5608  0013A4                     l106:
  5609                           
  5610                           ; BSR set to: 0
  5611                           ;main.c: 96: }
  5612                           ;main.c: 97: if (numW >= w) {
  5613                           
  5614                           ; BSR set to: 0
  5615  0013A4  519F               	movf	packageCompartment@w& (0+255),w,b
  5616  0013A6  6FA0               	movwf	??_packageCompartment& (0+255),b
  5617  0013A8  6BA1               	clrf	(??_packageCompartment+1)& (0+255),b
  5618  0013AA  51A0               	movf	??_packageCompartment& (0+255),w,b
  5619  0013AC  5DB8               	subwf	packageCompartment@numW& (0+255),w,b
  5620  0013AE  51B9               	movf	(packageCompartment@numW+1)& (0+255),w,b
  5621  0013B0  0A80               	xorlw	128
  5622  0013B2  6FA2               	movwf	(??_packageCompartment+2)& (0+255),b
  5623  0013B4  51A1               	movf	(??_packageCompartment+1)& (0+255),w,b
  5624  0013B6  0A80               	xorlw	128
  5625  0013B8  59A2               	subwfb	(??_packageCompartment+2)& (0+255),w,b
  5626  0013BA  A0D8               	btfss	status,0,c
  5627  0013BC  D00A               	goto	l107
  5628                           
  5629                           ; BSR set to: 0
  5630                           ;main.c: 98: motorControl(WASHER, STOPMOTOR);
  5631  0013BE  0E02               	movlw	2
  5632  0013C0  6F80               	movwf	motorControl@dir& (0+255),b
  5633  0013C2  0E03               	movlw	3
  5634  0013C4  EC66  F013         	call	_motorControl
  5635                           
  5636                           ;main.c: 99: doneW=1;
  5637  0013C8  0E00               	movlw	0
  5638  0013CA  0100               	movlb	0	; () banked
  5639  0013CC  6FC1               	movwf	(packageCompartment@doneW+1)& (0+255),b
  5640  0013CE  0E01               	movlw	1
  5641  0013D0  6FC0               	movwf	packageCompartment@doneW& (0+255),b
  5642  0013D2                     l107:
  5643                           
  5644                           ; BSR set to: 0
  5645                           ;main.c: 100: }
  5646                           ;main.c: 102: if (doneB && doneN && doneS && doneW) {
  5647                           
  5648                           ; BSR set to: 0
  5649  0013D2  51BA               	movf	packageCompartment@doneB& (0+255),w,b
  5650  0013D4  11BB               	iorwf	(packageCompartment@doneB+1)& (0+255),w,b
  5651  0013D6  B4D8               	btfsc	status,2,c
  5652  0013D8  D6AF               	goto	l99
  5653                           
  5654                           ; BSR set to: 0
  5655  0013DA  51BC               	movf	packageCompartment@doneN& (0+255),w,b
  5656  0013DC  11BD               	iorwf	(packageCompartment@doneN+1)& (0+255),w,b
  5657  0013DE  B4D8               	btfsc	status,2,c
  5658  0013E0  D6AB               	goto	l99
  5659                           
  5660                           ; BSR set to: 0
  5661  0013E2  51BE               	movf	packageCompartment@doneS& (0+255),w,b
  5662  0013E4  11BF               	iorwf	(packageCompartment@doneS+1)& (0+255),w,b
  5663  0013E6  B4D8               	btfsc	status,2,c
  5664  0013E8  D6A7               	goto	l99
  5665                           
  5666                           ; BSR set to: 0
  5667  0013EA  51C0               	movf	packageCompartment@doneW& (0+255),w,b
  5668  0013EC  11C1               	iorwf	(packageCompartment@doneW+1)& (0+255),w,b
  5669  0013EE  B4D8               	btfsc	status,2,c
  5670  0013F0  D6A3               	goto	l99
  5671                           
  5672                           ; BSR set to: 0
  5673                           ;main.c: 103: I2C_Send(nanoAddr, "\1Done compartment\0");
  5674  0013F2  0EEE               	movlw	low STR_5
  5675  0013F4  6F83               	movwf	I2C_Send@data& (0+255),b
  5676  0013F6  0EFE               	movlw	high STR_5
  5677  0013F8  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  5678  0013FA  0E3F               	movlw	low _nanoAddr
  5679  0013FC  6EF6               	movwf	tblptrl,c
  5680  0013FE                     	if	1	;There is more than 1 active tblptr byte
  5681  0013FE  0EFC               	movlw	high _nanoAddr
  5682  001400  6EF7               	movwf	tblptrh,c
  5683  001402                     	endif
  5684  001402                     	if	1	;There are 3 active tblptr bytes
  5685  001402  0E00               	movlw	low (_nanoAddr shr (0+16))
  5686  001404  6EF8               	movwf	tblptru,c
  5687  001406                     	endif
  5688  001406  0008               	tblrd		*
  5689  001408  50F5               	movf	tablat,w,c
  5690  00140A  EC83  F015         	call	_I2C_Send
  5691                           
  5692                           ;main.c: 105: }
  5693                           ;main.c: 106: }
  5694                           ;main.c: 107: I2C_Send(nanoAddr, "\1Out of the packaging loop\0");
  5695                           
  5696                           ;main.c: 104: break;
  5697  00140E  0E61               	movlw	low STR_6
  5698  001410  0100               	movlb	0	; () banked
  5699  001412  6F83               	movwf	I2C_Send@data& (0+255),b
  5700  001414  0EFE               	movlw	high STR_6
  5701  001416  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  5702  001418  0E3F               	movlw	low _nanoAddr
  5703  00141A  6EF6               	movwf	tblptrl,c
  5704  00141C                     	if	1	;There is more than 1 active tblptr byte
  5705  00141C  0EFC               	movlw	high _nanoAddr
  5706  00141E  6EF7               	movwf	tblptrh,c
  5707  001420                     	endif
  5708  001420                     	if	1	;There are 3 active tblptr bytes
  5709  001420  0E00               	movlw	low (_nanoAddr shr (0+16))
  5710  001422  6EF8               	movwf	tblptru,c
  5711  001424                     	endif
  5712  001424  0008               	tblrd		*
  5713  001426  50F5               	movf	tablat,w,c
  5714  001428  EC83  F015         	call	_I2C_Send
  5715                           
  5716                           ;main.c: 108: _delay((unsigned long)((2000)*(40000000/4000.0)));
  5717  00142C  0E66               	movlw	102
  5718  00142E  0100               	movlb	0	; () banked
  5719  001430  6FA1               	movwf	(??_packageCompartment+1)& (0+255),b
  5720  001432  0E76               	movlw	118
  5721  001434  6FA0               	movwf	??_packageCompartment& (0+255),b
  5722  001436  0EC1               	movlw	193
  5723  001438                     u7977:
  5724  001438  2EE8               	decfsz	wreg,f,c
  5725  00143A  D7FE               	bra	u7977
  5726  00143C  2FA0               	decfsz	??_packageCompartment& (0+255),f,b
  5727  00143E  D7FC               	bra	u7977
  5728  001440  2FA1               	decfsz	(??_packageCompartment+1)& (0+255),f,b
  5729  001442  D7FA               	bra	u7977
  5730                           
  5731                           ;main.c: 111: char instr[] = {2, 0};
  5732  001444  C063  F0A3         	movff	packageCompartment@F3222,packageCompartment@instr
  5733  001448  C064  F0A4         	movff	packageCompartment@F3222+1,packageCompartment@instr+1
  5734                           
  5735                           ;main.c: 112: I2C_Send(nanoAddr, instr);
  5736  00144C  0EA3               	movlw	low packageCompartment@instr
  5737  00144E  0100               	movlb	0	; () banked
  5738  001450  6F83               	movwf	I2C_Send@data& (0+255),b
  5739  001452  0E00               	movlw	high packageCompartment@instr
  5740  001454  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  5741  001456  0E3F               	movlw	low _nanoAddr
  5742  001458  6EF6               	movwf	tblptrl,c
  5743  00145A                     	if	1	;There is more than 1 active tblptr byte
  5744  00145A  0EFC               	movlw	high _nanoAddr
  5745  00145C  6EF7               	movwf	tblptrh,c
  5746  00145E                     	endif
  5747  00145E                     	if	1	;There are 3 active tblptr bytes
  5748  00145E  0E00               	movlw	low (_nanoAddr shr (0+16))
  5749  001460  6EF8               	movwf	tblptru,c
  5750  001462                     	endif
  5751  001462  0008               	tblrd		*
  5752  001464  50F5               	movf	tablat,w,c
  5753  001466  EC83  F015         	call	_I2C_Send
  5754  00146A  AA80               	btfss	3968,5,c	;volatile
  5755  00146C  0012               	return	
  5756  00146E  D7FD               	goto	l114
  5757  001470                     __end_of_packageCompartment:
  5758                           	opt stack 0
  5759                           tosu	equ	0xFFF
  5760                           tosh	equ	0xFFE
  5761                           tosl	equ	0xFFD
  5762                           pclath	equ	0xFFA
  5763                           tblptru	equ	0xFF8
  5764                           tblptrh	equ	0xFF7
  5765                           tblptrl	equ	0xFF6
  5766                           tablat	equ	0xFF5
  5767                           prodh	equ	0xFF4
  5768                           prodl	equ	0xFF3
  5769                           intcon	equ	0xFF2
  5770                           indf0	equ	0xFEF
  5771                           postinc0	equ	0xFEE
  5772                           fsr0h	equ	0xFEA
  5773                           fsr0l	equ	0xFE9
  5774                           wreg	equ	0xFE8
  5775                           postdec1	equ	0xFE5
  5776                           plusw1	equ	0xFE3
  5777                           fsr1l	equ	0xFE1
  5778                           indf2	equ	0xFDF
  5779                           postinc2	equ	0xFDE
  5780                           postdec2	equ	0xFDD
  5781                           plusw2	equ	0xFDB
  5782                           fsr2h	equ	0xFDA
  5783                           fsr2l	equ	0xFD9
  5784                           status	equ	0xFD8
  5785                           
  5786 ;; *************** function _inputEntry *****************
  5787 ;; Defined at:
  5788 ;;		line 30 in file "menu.c"
  5789 ;; Parameters:    Size  Location     Type
  5790 ;;		None
  5791 ;; Auto vars:     Size  Location     Type
  5792 ;;  sum             2   69[BANK1 ] int 
  5793 ;;  fastenerStri   32   24[BANK1 ] unsigned char [32]
  5794 ;;  msg            24    0[BANK1 ] unsigned char [24]
  5795 ;;  compartments    1   58[BANK1 ] unsigned char 
  5796 ;;  i               2   85[BANK1 ] int 
  5797 ;;  compartmentN    2   83[BANK1 ] int 
  5798 ;;  numPressed      2   81[BANK1 ] int 
  5799 ;;  inputEntrySt    2   79[BANK1 ] int 
  5800 ;;  numW            2   77[BANK1 ] int 
  5801 ;;  numS            2   75[BANK1 ] int 
  5802 ;;  numN            2   73[BANK1 ] int 
  5803 ;;  numB            2   71[BANK1 ] int 
  5804 ;;  doneCompartm    2   67[BANK1 ] int 
  5805 ;;  doneMultiple    2   65[BANK1 ] int 
  5806 ;;  setIsGood       2   63[BANK1 ] int 
  5807 ;;  found           2   61[BANK1 ] int 
  5808 ;;  done            2   59[BANK1 ] int 
  5809 ;;  compartmentL    2   56[BANK1 ] unsigned char [2]
  5810 ;;  numFasteners    2    0        int 
  5811 ;;  pressed         1   87[BANK1 ] unsigned char 
  5812 ;; Return value:  Size  Location     Type
  5813 ;;                  1    wreg      void 
  5814 ;; Registers used:
  5815 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5816 ;; Tracked objects:
  5817 ;;		On entry : 0/0
  5818 ;;		On exit  : 0/0
  5819 ;;		Unchanged: 0/0
  5820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5822 ;;      Locals:         0       0      88       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5823 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5824 ;;      Totals:         0       4      88       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5825 ;;Total ram usage:       92 bytes
  5826 ;; Hardware stack levels used:    1
  5827 ;; Hardware stack levels required when called:    8
  5828 ;; This function calls:
  5829 ;;		_I2C_Send
  5830 ;;		___wmul
  5831 ;;		_lcdInst
  5832 ;;		_lcd_set_cursor
  5833 ;;		_pollKeypad
  5834 ;;		_printErrorLCD
  5835 ;;		_printStringLCD
  5836 ;;		_putch
  5837 ;;		_strcpy
  5838 ;; This function is called by:
  5839 ;;		_mainMenu
  5840 ;; This function uses a non-reentrant model
  5841 ;;
  5842                           
  5843                           	psect	text10
  5844  000012                     __ptext10:
  5845                           	opt stack 0
  5846  000012                     _inputEntry:
  5847                           	opt stack 21
  5848                           
  5849                           ;menu.c: 31: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5850                           
  5851                           ;incstack = 0
  5852  000012  0E01               	movlw	1
  5853  000014  EC83  F019         	call	_lcdInst
  5854  000018  0EC3               	movlw	195
  5855  00001A  0100               	movlb	0	; () banked
  5856  00001C  6F99               	movwf	??_inputEntry& (0+255),b
  5857  00001E  0ECD               	movlw	205
  5858  000020                     u7987:
  5859  000020  2EE8               	decfsz	wreg,f,c
  5860  000022  D7FE               	bra	u7987
  5861  000024  2F99               	decfsz	??_inputEntry& (0+255),f,b
  5862  000026  D7FC               	bra	u7987
  5863                           
  5864                           ;menu.c: 32: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  5865  000028  0E80               	movlw	128
  5866  00002A  EC83  F019         	call	_lcdInst
  5867  00002E  0E41               	movlw	65
  5868  000030  0100               	movlb	0	; () banked
  5869  000032  6F99               	movwf	??_inputEntry& (0+255),b
  5870  000034  0EEE               	movlw	238
  5871  000036                     u7997:
  5872  000036  2EE8               	decfsz	wreg,f,c
  5873  000038  D7FE               	bra	u7997
  5874  00003A  2F99               	decfsz	??_inputEntry& (0+255),f,b
  5875  00003C  D7FC               	bra	u7997
  5876  00003E  F000               	nop	
  5877                           
  5878                           ;menu.c: 34: I2C_Send(nanoAddr, "Started input entry, hi\0");
  5879  000040  0E97               	movlw	low STR_17
  5880  000042  0100               	movlb	0	; () banked
  5881  000044  6F83               	movwf	I2C_Send@data& (0+255),b
  5882  000046  0EFE               	movlw	high STR_17
  5883  000048  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  5884  00004A  0E3F               	movlw	low _nanoAddr
  5885  00004C  6EF6               	movwf	tblptrl,c
  5886  00004E                     	if	1	;There is more than 1 active tblptr byte
  5887  00004E  0EFC               	movlw	high _nanoAddr
  5888  000050  6EF7               	movwf	tblptrh,c
  5889  000052                     	endif
  5890  000052                     	if	1	;There are 3 active tblptr bytes
  5891  000052  0E00               	movlw	low (_nanoAddr shr (0+16))
  5892  000054  6EF8               	movwf	tblptru,c
  5893  000056                     	endif
  5894  000056  0008               	tblrd		*
  5895  000058  50F5               	movf	tablat,w,c
  5896  00005A  EC83  F015         	call	_I2C_Send
  5897                           
  5898                           ;menu.c: 36: int compartmentNum = 0;
  5899  00005E  0E00               	movlw	0
  5900  000060  0101               	movlb	1	; () banked
  5901  000062  6F54               	movwf	(inputEntry@compartmentNum+1)& (0+255),b
  5902  000064  0E00               	movlw	0
  5903  000066  6F53               	movwf	inputEntry@compartmentNum& (0+255),b
  5904                           
  5905                           ; BSR set to: 1
  5906                           ;menu.c: 37: char compartmentLabel[2] = "C0";
  5907  000068  C05F  F138         	movff	inputEntry@F3189,inputEntry@compartmentLabel
  5908  00006C  C060  F139         	movff	inputEntry@F3189+1,inputEntry@compartmentLabel+1
  5909                           
  5910                           ; BSR set to: 1
  5911                           ;menu.c: 38: int inputEntryStep = 0;
  5912  000070  0E00               	movlw	0
  5913  000072  6F50               	movwf	(inputEntry@inputEntryStep+1)& (0+255),b
  5914  000074  0E00               	movlw	0
  5915  000076  6F4F               	movwf	inputEntry@inputEntryStep& (0+255),b
  5916                           
  5917                           ; BSR set to: 1
  5918                           ;menu.c: 39: int done = 0;
  5919  000078  0E00               	movlw	0
  5920  00007A  6F3C               	movwf	(inputEntry@done+1)& (0+255),b
  5921  00007C  0E00               	movlw	0
  5922  00007E  6F3B               	movwf	inputEntry@done& (0+255),b
  5923                           
  5924                           ;menu.c: 41: int i, numPressed, doneCompartment, numB, numN, numS, numW, found, numFaste
      +                          ners;
  5925                           ;menu.c: 42: int setIsGood, doneMultiples;
  5926                           ;menu.c: 43: unsigned char pressed;
  5927                           ;menu.c: 45: while (!done) {
  5928  000080  D36C               	goto	l375
  5929  000082                     
  5930                           ; BSR set to: 1
  5931                           ;menu.c: 47: if (inputEntryStep == 0) {
  5932                           
  5933                           ; BSR set to: 1
  5934  000082  514F               	movf	inputEntry@inputEntryStep& (0+255),w,b
  5935  000084  1150               	iorwf	(inputEntry@inputEntryStep+1)& (0+255),w,b
  5936  000086  A4D8               	btfss	status,2,c
  5937  000088  D04E               	goto	l371
  5938                           
  5939                           ; BSR set to: 1
  5940                           ;menu.c: 48: printStringLCD(inputEntryQuestions[inputEntryStep]);
  5941  00008A  C14F  F080         	movff	inputEntry@inputEntryStep,___wmul@multiplier
  5942  00008E  C150  F081         	movff	inputEntry@inputEntryStep+1,___wmul@multiplier+1
  5943  000092  0E00               	movlw	0
  5944  000094  0100               	movlb	0	; () banked
  5945  000096  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5946  000098  0E21               	movlw	33
  5947  00009A  6F82               	movwf	___wmul@multiplicand& (0+255),b
  5948  00009C  EC22  F019         	call	___wmul	;wreg free
  5949  0000A0  0E26               	movlw	low _inputEntryQuestions
  5950  0000A2  0100               	movlb	0	; () banked
  5951  0000A4  2580               	addwf	?___wmul& (0+255),w,b
  5952  0000A6  6F86               	movwf	printStringLCD@string& (0+255),b
  5953  0000A8  0EFD               	movlw	high _inputEntryQuestions
  5954  0000AA  2181               	addwfc	(?___wmul+1)& (0+255),w,b
  5955  0000AC  6F87               	movwf	(printStringLCD@string+1)& (0+255),b
  5956  0000AE  ECBE  F00F         	call	_printStringLCD	;wreg free
  5957                           
  5958                           ;menu.c: 50: pressed = pollKeypad();
  5959  0000B2  ECE0  F018         	call	_pollKeypad	;wreg free
  5960  0000B6  0101               	movlb	1	; () banked
  5961  0000B8  6F57               	movwf	inputEntry@pressed& (0+255),b
  5962                           
  5963                           ; BSR set to: 1
  5964                           ;menu.c: 51: numPressed = pressed - 48;
  5965  0000BA  0ED0               	movlw	208
  5966  0000BC  2557               	addwf	inputEntry@pressed& (0+255),w,b
  5967  0000BE  6F51               	movwf	inputEntry@numPressed& (0+255),b
  5968  0000C0  6B52               	clrf	(inputEntry@numPressed+1)& (0+255),b
  5969  0000C2  0EFF               	movlw	255
  5970  0000C4  2352               	addwfc	(inputEntry@numPressed+1)& (0+255),f,b
  5971                           
  5972                           ; BSR set to: 1
  5973                           ;menu.c: 53: putch(pressed);
  5974  0000C6  5157               	movf	inputEntry@pressed& (0+255),w,b
  5975  0000C8  EC77  F019         	call	_putch
  5976                           
  5977                           ;menu.c: 54: _delay((unsigned long)((500)*(40000000/4000.0)));
  5978  0000CC  0E1A               	movlw	26
  5979  0000CE  0100               	movlb	0	; () banked
  5980  0000D0  6F9A               	movwf	(??_inputEntry+1)& (0+255),b
  5981  0000D2  0E5E               	movlw	94
  5982  0000D4  6F99               	movwf	??_inputEntry& (0+255),b
  5983  0000D6  0E6E               	movlw	110
  5984  0000D8                     u8007:
  5985  0000D8  2EE8               	decfsz	wreg,f,c
  5986  0000DA  D7FE               	bra	u8007
  5987  0000DC  2F99               	decfsz	??_inputEntry& (0+255),f,b
  5988  0000DE  D7FC               	bra	u8007
  5989  0000E0  2F9A               	decfsz	(??_inputEntry+1)& (0+255),f,b
  5990  0000E2  D7FA               	bra	u8007
  5991  0000E4  F000               	nop	
  5992                           
  5993                           ;menu.c: 56: if (numPressed >= 4 && numPressed <= 8) {
  5994  0000E6  0101               	movlb	1	; () banked
  5995  0000E8  BF52               	btfsc	(inputEntry@numPressed+1)& (0+255),7,b
  5996  0000EA  D015               	goto	l372
  5997  0000EC  5152               	movf	(inputEntry@numPressed+1)& (0+255),w,b
  5998  0000EE  E104               	bnz	u7250
  5999  0000F0  0E04               	movlw	4
  6000  0000F2  5D51               	subwf	inputEntry@numPressed& (0+255),w,b
  6001  0000F4  A0D8               	btfss	status,0,c
  6002  0000F6  D00F               	goto	l372
  6003  0000F8                     u7250:
  6004                           
  6005                           ; BSR set to: 1
  6006  0000F8  BF52               	btfsc	(inputEntry@numPressed+1)& (0+255),7,b
  6007  0000FA  D006               	goto	u7260
  6008  0000FC  5152               	movf	(inputEntry@numPressed+1)& (0+255),w,b
  6009  0000FE  E10B               	bnz	l5892
  6010  000100  0E09               	movlw	9
  6011  000102  5D51               	subwf	inputEntry@numPressed& (0+255),w,b
  6012  000104  B0D8               	btfsc	status,0,c
  6013  000106  D007               	goto	l372
  6014  000108                     u7260:
  6015                           
  6016                           ; BSR set to: 1
  6017                           ;menu.c: 57: params.steps = numPressed;
  6018  000108  C151  F1BC         	movff	inputEntry@numPressed,_params
  6019  00010C  C152  F1BD         	movff	inputEntry@numPressed+1,_params+1
  6020                           
  6021                           ; BSR set to: 1
  6022                           ;menu.c: 58: inputEntryStep++;
  6023  000110  4B4F               	infsnz	inputEntry@inputEntryStep& (0+255),f,b
  6024  000112  2B50               	incf	(inputEntry@inputEntryStep+1)& (0+255),f,b
  6025                           
  6026                           ;menu.c: 59: } else printErrorLCD(errMsgs.badEntry);
  6027  000114  D322               	goto	l375
  6028  000116                     l372:
  6029  000116                     l5892:
  6030                           
  6031                           ; BSR set to: 1
  6032  000116  0E46               	movlw	low _errMsgs
  6033  000118  0100               	movlb	0	; () banked
  6034  00011A  6F95               	movwf	printErrorLCD@string& (0+255),b
  6035  00011C  0EFC               	movlw	high _errMsgs
  6036  00011E  6F96               	movwf	(printErrorLCD@string+1)& (0+255),b
  6037  000120  EC36  F019         	call	_printErrorLCD	;wreg free
  6038                           
  6039                           ;menu.c: 60: } else if (inputEntryStep == 1) {
  6040  000124  D31A               	goto	l375
  6041  000126                     l371:
  6042  000126  0101               	movlb	1	; () banked
  6043  000128  054F               	decf	inputEntry@inputEntryStep& (0+255),w,b
  6044  00012A  1150               	iorwf	(inputEntry@inputEntryStep+1)& (0+255),w,b
  6045  00012C  A4D8               	btfss	status,2,c
  6046  00012E  D315               	goto	l375
  6047                           
  6048                           ; BSR set to: 1
  6049                           ;menu.c: 62: char compartmentsToFill = assemblyStepEncoding[params.steps - 4];
  6050  000130  0EFC               	movlw	252
  6051  000132  0100               	movlb	0	; () banked
  6052  000134  6F99               	movwf	??_inputEntry& (0+255),b
  6053  000136  0EFF               	movlw	255
  6054  000138  6F9A               	movwf	(??_inputEntry+1)& (0+255),b
  6055  00013A  C1BC  F09B         	movff	_params,??_inputEntry+2
  6056  00013E  C1BD  F09C         	movff	_params+1,??_inputEntry+3
  6057  000142  5199               	movf	??_inputEntry& (0+255),w,b
  6058  000144  279B               	addwf	(??_inputEntry+2)& (0+255),f,b
  6059  000146  519A               	movf	(??_inputEntry+1)& (0+255),w,b
  6060  000148  239C               	addwfc	(??_inputEntry+3)& (0+255),f,b
  6061  00014A  0E3A               	movlw	low _assemblyStepEncoding
  6062  00014C  259B               	addwf	(??_inputEntry+2)& (0+255),w,b
  6063  00014E  6EF6               	movwf	tblptrl,c
  6064  000150  0EFC               	movlw	high _assemblyStepEncoding
  6065  000152  219C               	addwfc	(??_inputEntry+3)& (0+255),w,b
  6066  000154  6EF7               	movwf	tblptrh,c
  6067  000156                     	if	1	;There are 3 active tblptr bytes
  6068  000156  6AF8               	clrf	tblptru,c
  6069  000158  0E00               	movlw	low (__mediumconst shr (0+16))
  6070  00015A  22F8               	addwfc	tblptru,f,c
  6071  00015C                     	endif
  6072  00015C  0008               	tblrd		*
  6073  00015E  CFF5 F13A          	movff	tablat,inputEntry@compartmentsToFill
  6074                           
  6075                           ; BSR set to: 0
  6076                           ;menu.c: 63: for (compartmentNum = 0; compartmentNum < 8; compartmentNum++) {
  6077  000162  0E00               	movlw	0
  6078  000164  0101               	movlb	1	; () banked
  6079  000166  6F54               	movwf	(inputEntry@compartmentNum+1)& (0+255),b
  6080  000168  0E00               	movlw	0
  6081  00016A  6F53               	movwf	inputEntry@compartmentNum& (0+255),b
  6082                           
  6083                           ; BSR set to: 1
  6084  00016C  BF54               	btfsc	(inputEntry@compartmentNum+1)& (0+255),7,b
  6085  00016E  D008               	goto	l376
  6086  000170  5154               	movf	(inputEntry@compartmentNum+1)& (0+255),w,b
  6087  000172  E105               	bnz	u7280
  6088  000174  0E08               	movlw	8
  6089  000176  5D53               	subwf	inputEntry@compartmentNum& (0+255),w,b
  6090  000178  B0D8               	btfsc	status,0,c
  6091  00017A  D2DC               	goto	u7650
  6092  00017C  D001               	goto	l376
  6093  00017E                     u7280:
  6094                           
  6095                           ; BSR set to: 1
  6096  00017E  D2DA               	goto	u7650
  6097  000180                     l376:
  6098                           
  6099                           ; BSR set to: 1
  6100                           ;menu.c: 65: if ((compartmentsToFill >> compartmentNum) & 0b1) {
  6101                           
  6102                           ; BSR set to: 1
  6103                           
  6104                           ;menu.c: 64: STARTCOMPARTMENT:
  6105                           
  6106                           ; BSR set to: 1
  6107  000180  C153  F099         	movff	inputEntry@compartmentNum,??_inputEntry
  6108  000184  C13A  F09A         	movff	inputEntry@compartmentsToFill,??_inputEntry+1
  6109  000188  0100               	movlb	0	; () banked
  6110  00018A  2B99               	incf	??_inputEntry& (0+255),f,b
  6111  00018C  D002               	goto	u7294
  6112  00018E                     u7295:
  6113  00018E  90D8               	bcf	status,0,c
  6114  000190  339A               	rrcf	(??_inputEntry+1)& (0+255),f,b
  6115  000192                     u7294:
  6116  000192  2F99               	decfsz	??_inputEntry& (0+255),f,b
  6117  000194  D7FC               	goto	u7295
  6118  000196  0100               	movlb	0	; () banked
  6119  000198  A19A               	btfss	(??_inputEntry+1)& (0+255),0,b
  6120  00019A  D2AC               	goto	l379
  6121                           
  6122                           ; BSR set to: 0
  6123                           ;menu.c: 66: char msg[] = "\1Started compartment x\0";
  6124  00019C  EE21  F0A0         	lfsr	2,inputEntry@F3210
  6125  0001A0  EE11  F000         	lfsr	1,inputEntry@msg
  6126  0001A4  0E17               	movlw	23
  6127  0001A6                     u7311:
  6128  0001A6  CFDB FFE3          	movff	plusw2,plusw1
  6129  0001AA  06E8               	decf	wreg,f,c
  6130  0001AC  E2FC               	bc	u7311
  6131                           
  6132                           ; BSR set to: 0
  6133                           ;menu.c: 67: msg[21] = compartmentNum + 1 + 48;
  6134  0001AE  0101               	movlb	1	; () banked
  6135  0001B0  5153               	movf	inputEntry@compartmentNum& (0+255),w,b
  6136  0001B2  0F31               	addlw	49
  6137  0001B4  6F15               	movwf	(inputEntry@msg+21)& (0+255),b
  6138                           
  6139                           ; BSR set to: 1
  6140                           ;menu.c: 68: I2C_Send(nanoAddr, msg);
  6141  0001B6  0E00               	movlw	low inputEntry@msg
  6142  0001B8  0100               	movlb	0	; () banked
  6143  0001BA  6F83               	movwf	I2C_Send@data& (0+255),b
  6144  0001BC  0E01               	movlw	high inputEntry@msg
  6145  0001BE  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  6146  0001C0  0E3F               	movlw	low _nanoAddr
  6147  0001C2  6EF6               	movwf	tblptrl,c
  6148  0001C4                     	if	1	;There is more than 1 active tblptr byte
  6149  0001C4  0EFC               	movlw	high _nanoAddr
  6150  0001C6  6EF7               	movwf	tblptrh,c
  6151  0001C8                     	endif
  6152  0001C8                     	if	1	;There are 3 active tblptr bytes
  6153  0001C8  0E00               	movlw	low (_nanoAddr shr (0+16))
  6154  0001CA  6EF8               	movwf	tblptru,c
  6155  0001CC                     	endif
  6156  0001CC  0008               	tblrd		*
  6157  0001CE  50F5               	movf	tablat,w,c
  6158  0001D0  EC83  F015         	call	_I2C_Send
  6159                           
  6160                           ;menu.c: 70: setIsGood = 0;
  6161  0001D4  0E00               	movlw	0
  6162  0001D6  0101               	movlb	1	; () banked
  6163  0001D8  6F40               	movwf	(inputEntry@setIsGood+1)& (0+255),b
  6164  0001DA  0E00               	movlw	0
  6165  0001DC  D169               	goto	L3
  6166  0001DE                     
  6167                           ; BSR set to: 1
  6168                           ;menu.c: 72: numB = 0;
  6169                           
  6170                           ; BSR set to: 1
  6171  0001DE  0E00               	movlw	0
  6172  0001E0  6F48               	movwf	(inputEntry@numB+1)& (0+255),b
  6173  0001E2  0E00               	movlw	0
  6174  0001E4  6F47               	movwf	inputEntry@numB& (0+255),b
  6175                           
  6176                           ;menu.c: 73: numN = 0;
  6177  0001E6  0E00               	movlw	0
  6178  0001E8  6F4A               	movwf	(inputEntry@numN+1)& (0+255),b
  6179  0001EA  0E00               	movlw	0
  6180  0001EC  6F49               	movwf	inputEntry@numN& (0+255),b
  6181                           
  6182                           ;menu.c: 74: numS = 0;
  6183  0001EE  0E00               	movlw	0
  6184  0001F0  6F4C               	movwf	(inputEntry@numS+1)& (0+255),b
  6185  0001F2  0E00               	movlw	0
  6186  0001F4  6F4B               	movwf	inputEntry@numS& (0+255),b
  6187                           
  6188                           ;menu.c: 75: numW = 0;
  6189  0001F6  0E00               	movlw	0
  6190  0001F8  6F4E               	movwf	(inputEntry@numW+1)& (0+255),b
  6191  0001FA  0E00               	movlw	0
  6192  0001FC  6F4D               	movwf	inputEntry@numW& (0+255),b
  6193                           
  6194                           ; BSR set to: 1
  6195                           ;menu.c: 76: char fastenerString[32];
  6196                           ;menu.c: 77: strcpy(fastenerString, inputEntryQuestions[inputEntryStep]);
  6197  0001FE  0E18               	movlw	low inputEntry@fastenerString
  6198  000200  0100               	movlb	0	; () banked
  6199  000202  6F86               	movwf	strcpy@to& (0+255),b
  6200  000204  0E01               	movlw	high inputEntry@fastenerString
  6201  000206  6F87               	movwf	(strcpy@to+1)& (0+255),b
  6202  000208  C14F  F080         	movff	inputEntry@inputEntryStep,___wmul@multiplier
  6203  00020C  C150  F081         	movff	inputEntry@inputEntryStep+1,___wmul@multiplier+1
  6204  000210  0E00               	movlw	0
  6205  000212  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6206  000214  0E21               	movlw	33
  6207  000216  6F82               	movwf	___wmul@multiplicand& (0+255),b
  6208  000218  EC22  F019         	call	___wmul	;wreg free
  6209  00021C  0E26               	movlw	low _inputEntryQuestions
  6210  00021E  0100               	movlb	0	; () banked
  6211  000220  2580               	addwf	?___wmul& (0+255),w,b
  6212  000222  6F88               	movwf	strcpy@from& (0+255),b
  6213  000224  0EFD               	movlw	high _inputEntryQuestions
  6214  000226  2181               	addwfc	(?___wmul+1)& (0+255),w,b
  6215  000228  6F89               	movwf	(strcpy@from+1)& (0+255),b
  6216  00022A  ECC6  F018         	call	_strcpy	;wreg free
  6217                           
  6218                           ;menu.c: 78: fastenerString[14] = compartmentNum + 1 + 48;
  6219  00022E  0101               	movlb	1	; () banked
  6220  000230  5153               	movf	inputEntry@compartmentNum& (0+255),w,b
  6221  000232  0F31               	addlw	49
  6222  000234  6F26               	movwf	(inputEntry@fastenerString+14)& (0+255),b
  6223                           
  6224                           ; BSR set to: 1
  6225                           ;menu.c: 80: printStringLCD(fastenerString);
  6226  000236  0E18               	movlw	low inputEntry@fastenerString
  6227  000238  0100               	movlb	0	; () banked
  6228  00023A  6F86               	movwf	printStringLCD@string& (0+255),b
  6229  00023C  0E01               	movlw	high inputEntry@fastenerString
  6230  00023E  6F87               	movwf	(printStringLCD@string+1)& (0+255),b
  6231  000240  ECBE  F00F         	call	_printStringLCD	;wreg free
  6232                           
  6233                           ;menu.c: 81: lcd_set_cursor(9, 1);
  6234  000244  0E01               	movlw	1
  6235  000246  0100               	movlb	0	; () banked
  6236  000248  6F86               	movwf	lcd_set_cursor@y& (0+255),b
  6237  00024A  0E09               	movlw	9
  6238  00024C  EC26  F018         	call	_lcd_set_cursor
  6239                           
  6240                           ;menu.c: 82: doneCompartment = 0;
  6241  000250  0E00               	movlw	0
  6242  000252  0101               	movlb	1	; () banked
  6243  000254  6F44               	movwf	(inputEntry@doneCompartment+1)& (0+255),b
  6244  000256  0E00               	movlw	0
  6245  000258  D04D               	goto	L4
  6246  00025A                     
  6247                           ; BSR set to: 1
  6248                           ;menu.c: 85: pressed = pollKeypad();
  6249                           
  6250                           ; BSR set to: 1
  6251  00025A  ECE0  F018         	call	_pollKeypad	;wreg free
  6252  00025E  0101               	movlb	1	; () banked
  6253  000260  6F57               	movwf	inputEntry@pressed& (0+255),b
  6254                           
  6255                           ; BSR set to: 1
  6256                           ;menu.c: 86: if (pressed == 66 || pressed == 78 || pressed == 83 || pressed == 87) {
  6257  000262  0E42               	movlw	66
  6258  000264  1957               	xorwf	inputEntry@pressed& (0+255),w,b
  6259  000266  B4D8               	btfsc	status,2,c
  6260  000268  D00C               	goto	u7350
  6261                           
  6262                           ; BSR set to: 1
  6263  00026A  0E4E               	movlw	78
  6264  00026C  1957               	xorwf	inputEntry@pressed& (0+255),w,b
  6265  00026E  B4D8               	btfsc	status,2,c
  6266  000270  D008               	goto	u7350
  6267                           
  6268                           ; BSR set to: 1
  6269  000272  0E53               	movlw	83
  6270  000274  1957               	xorwf	inputEntry@pressed& (0+255),w,b
  6271  000276  B4D8               	btfsc	status,2,c
  6272  000278  D004               	goto	u7350
  6273                           
  6274                           ; BSR set to: 1
  6275  00027A  0E57               	movlw	87
  6276  00027C  1957               	xorwf	inputEntry@pressed& (0+255),w,b
  6277  00027E  A4D8               	btfss	status,2,c
  6278  000280  D022               	goto	l386
  6279  000282                     u7350:
  6280                           
  6281                           ; BSR set to: 1
  6282                           ;menu.c: 87: putch(pressed);
  6283                           
  6284                           ; BSR set to: 1
  6285  000282  5157               	movf	inputEntry@pressed& (0+255),w,b
  6286  000284  EC77  F019         	call	_putch
  6287                           
  6288                           ;menu.c: 88: if (pressed == 66) numB++;
  6289  000288  0E42               	movlw	66
  6290  00028A  0101               	movlb	1	; () banked
  6291  00028C  1957               	xorwf	inputEntry@pressed& (0+255),w,b
  6292  00028E  A4D8               	btfss	status,2,c
  6293  000290  D003               	goto	l389
  6294                           
  6295                           ; BSR set to: 1
  6296  000292  4B47               	infsnz	inputEntry@numB& (0+255),f,b
  6297  000294  2B48               	incf	(inputEntry@numB+1)& (0+255),f,b
  6298  000296  D014               	goto	l395
  6299  000298                     l389:
  6300                           
  6301                           ; BSR set to: 1
  6302                           ;menu.c: 89: else if (pressed == 78) numN++;
  6303                           
  6304                           ; BSR set to: 1
  6305  000298  0E4E               	movlw	78
  6306  00029A  1957               	xorwf	inputEntry@pressed& (0+255),w,b
  6307  00029C  A4D8               	btfss	status,2,c
  6308  00029E  D003               	goto	l391
  6309                           
  6310                           ; BSR set to: 1
  6311  0002A0  4B49               	infsnz	inputEntry@numN& (0+255),f,b
  6312  0002A2  2B4A               	incf	(inputEntry@numN+1)& (0+255),f,b
  6313  0002A4  D00D               	goto	l395
  6314  0002A6                     l391:
  6315                           
  6316                           ; BSR set to: 1
  6317                           ;menu.c: 90: else if (pressed == 83) numS ++;
  6318                           
  6319                           ; BSR set to: 1
  6320  0002A6  0E53               	movlw	83
  6321  0002A8  1957               	xorwf	inputEntry@pressed& (0+255),w,b
  6322  0002AA  A4D8               	btfss	status,2,c
  6323  0002AC  D003               	goto	l393
  6324                           
  6325                           ; BSR set to: 1
  6326  0002AE  4B4B               	infsnz	inputEntry@numS& (0+255),f,b
  6327  0002B0  2B4C               	incf	(inputEntry@numS+1)& (0+255),f,b
  6328  0002B2  D006               	goto	l395
  6329  0002B4                     l393:
  6330                           
  6331                           ; BSR set to: 1
  6332                           ;menu.c: 91: else if (pressed == 87) numW++;
  6333                           
  6334                           ; BSR set to: 1
  6335  0002B4  0E57               	movlw	87
  6336  0002B6  1957               	xorwf	inputEntry@pressed& (0+255),w,b
  6337  0002B8  A4D8               	btfss	status,2,c
  6338  0002BA  D002               	goto	l395
  6339                           
  6340                           ; BSR set to: 1
  6341  0002BC  4B4D               	infsnz	inputEntry@numW& (0+255),f,b
  6342  0002BE  2B4E               	incf	(inputEntry@numW+1)& (0+255),f,b
  6343  0002C0                     l395:
  6344                           
  6345                           ; BSR set to: 1
  6346                           ;menu.c: 92: doneCompartment++;
  6347                           
  6348                           ; BSR set to: 1
  6349                           
  6350                           ; BSR set to: 1
  6351                           
  6352                           ; BSR set to: 1
  6353  0002C0  4B43               	infsnz	inputEntry@doneCompartment& (0+255),f,b
  6354  0002C2  2B44               	incf	(inputEntry@doneCompartment+1)& (0+255),f,b
  6355                           
  6356                           ;menu.c: 93: } else if (pressed == 35) {
  6357  0002C4  D021               	goto	l402
  6358  0002C6                     l386:
  6359                           
  6360                           ; BSR set to: 1
  6361                           
  6362                           ; BSR set to: 1
  6363  0002C6  0E23               	movlw	35
  6364  0002C8  1957               	xorwf	inputEntry@pressed& (0+255),w,b
  6365  0002CA  A4D8               	btfss	status,2,c
  6366  0002CC  D015               	goto	l397
  6367                           
  6368                           ; BSR set to: 1
  6369                           ;menu.c: 94: if (numB != 0 || numN != 0 || numS != 0 || numW != 0) doneCompartment = 4;
  6370  0002CE  5147               	movf	inputEntry@numB& (0+255),w,b
  6371  0002D0  1148               	iorwf	(inputEntry@numB+1)& (0+255),w,b
  6372  0002D2  A4D8               	btfss	status,2,c
  6373  0002D4  D00C               	goto	u7440
  6374                           
  6375                           ; BSR set to: 1
  6376  0002D6  5149               	movf	inputEntry@numN& (0+255),w,b
  6377  0002D8  114A               	iorwf	(inputEntry@numN+1)& (0+255),w,b
  6378  0002DA  A4D8               	btfss	status,2,c
  6379  0002DC  D008               	goto	u7440
  6380                           
  6381                           ; BSR set to: 1
  6382  0002DE  514B               	movf	inputEntry@numS& (0+255),w,b
  6383  0002E0  114C               	iorwf	(inputEntry@numS+1)& (0+255),w,b
  6384  0002E2  A4D8               	btfss	status,2,c
  6385  0002E4  D004               	goto	u7440
  6386                           
  6387                           ; BSR set to: 1
  6388  0002E6  514D               	movf	inputEntry@numW& (0+255),w,b
  6389  0002E8  114E               	iorwf	(inputEntry@numW+1)& (0+255),w,b
  6390  0002EA  B4D8               	btfsc	status,2,c
  6391  0002EC  D00D               	goto	l402
  6392  0002EE                     u7440:
  6393                           
  6394                           ; BSR set to: 1
  6395                           
  6396                           ; BSR set to: 1
  6397  0002EE  0E00               	movlw	0
  6398  0002F0  6F44               	movwf	(inputEntry@doneCompartment+1)& (0+255),b
  6399  0002F2  0E04               	movlw	4
  6400  0002F4                     L4:
  6401  0002F4  6F43               	movwf	inputEntry@doneCompartment& (0+255),b
  6402                           
  6403                           ; BSR set to: 1
  6404                           ;menu.c: 95: } else if (pressed == 42) {
  6405  0002F6  D008               	goto	l402
  6406  0002F8                     l397:
  6407                           
  6408                           ; BSR set to: 1
  6409                           
  6410                           ; BSR set to: 1
  6411  0002F8  0E2A               	movlw	42
  6412  0002FA  1957               	xorwf	inputEntry@pressed& (0+255),w,b
  6413  0002FC  A4D8               	btfss	status,2,c
  6414  0002FE  D004               	goto	l402
  6415                           
  6416                           ; BSR set to: 1
  6417                           ;menu.c: 96: compartmentNum--;
  6418  000300  0753               	decf	inputEntry@compartmentNum& (0+255),f,b
  6419  000302  A0D8               	btfss	status,0,c
  6420  000304  0754               	decf	(inputEntry@compartmentNum+1)& (0+255),f,b
  6421                           
  6422                           ;menu.c: 97: goto STARTMULTIPLES;
  6423  000306  D0DA               	goto	u7540
  6424  000308                     l402:
  6425                           
  6426                           ; BSR set to: 1
  6427                           
  6428                           ; BSR set to: 1
  6429                           
  6430                           ; BSR set to: 1
  6431                           
  6432                           ; BSR set to: 1
  6433                           
  6434                           ; BSR set to: 1
  6435  000308  BF44               	btfsc	(inputEntry@doneCompartment+1)& (0+255),7,b
  6436  00030A  D7A7               	goto	l385
  6437  00030C  5144               	movf	(inputEntry@doneCompartment+1)& (0+255),w,b
  6438  00030E  E104               	bnz	l5972
  6439  000310  0E04               	movlw	4
  6440  000312  5D43               	subwf	inputEntry@doneCompartment& (0+255),w,b
  6441  000314  A0D8               	btfss	status,0,c
  6442  000316  D7A1               	goto	l385
  6443  000318                     l5972:
  6444                           
  6445                           ; BSR set to: 1
  6446                           ;menu.c: 98: }
  6447                           ;menu.c: 99: }
  6448                           ;menu.c: 102: found = 0;
  6449  000318  0E00               	movlw	0
  6450  00031A  6F3E               	movwf	(inputEntry@found+1)& (0+255),b
  6451  00031C  0E00               	movlw	0
  6452  00031E  6F3D               	movwf	inputEntry@found& (0+255),b
  6453                           
  6454                           ;menu.c: 103: for (i = 0; i < 21; i++) {
  6455  000320  0E00               	movlw	0
  6456  000322  6F56               	movwf	(inputEntry@i+1)& (0+255),b
  6457  000324  0E00               	movlw	0
  6458  000326  6F55               	movwf	inputEntry@i& (0+255),b
  6459                           
  6460                           ; BSR set to: 1
  6461  000328  BF56               	btfsc	(inputEntry@i+1)& (0+255),7,b
  6462  00032A  D008               	goto	l405
  6463  00032C  5156               	movf	(inputEntry@i+1)& (0+255),w,b
  6464  00032E  E105               	bnz	u7470
  6465  000330  0E15               	movlw	21
  6466  000332  5D55               	subwf	inputEntry@i& (0+255),w,b
  6467  000334  B0D8               	btfsc	status,0,c
  6468  000336  D0AC               	goto	u7520
  6469  000338  D001               	goto	l405
  6470  00033A                     u7470:
  6471                           
  6472                           ; BSR set to: 1
  6473  00033A  D0AA               	goto	u7520
  6474  00033C                     l405:
  6475                           
  6476                           ; BSR set to: 1
  6477                           ;menu.c: 104: if (fastenerMatrix[i][0] == numB &&
  6478                           ;menu.c: 105: fastenerMatrix[i][1] == numN &&
  6479                           ;menu.c: 106: fastenerMatrix[i][2] == numS &&
  6480                           ;menu.c: 107: fastenerMatrix[i][3] == numW)
  6481                           
  6482                           ; BSR set to: 1
  6483  00033C  C155  F099         	movff	inputEntry@i,??_inputEntry
  6484  000340  C156  F09A         	movff	inputEntry@i+1,??_inputEntry+1
  6485  000344  0100               	movlb	0	; () banked
  6486  000346  90D8               	bcf	status,0,c
  6487  000348  3799               	rlcf	??_inputEntry& (0+255),f,b
  6488  00034A  379A               	rlcf	(??_inputEntry+1)& (0+255),f,b
  6489  00034C  90D8               	bcf	status,0,c
  6490  00034E  3799               	rlcf	??_inputEntry& (0+255),f,b
  6491  000350  379A               	rlcf	(??_inputEntry+1)& (0+255),f,b
  6492  000352  0EAA               	movlw	low _fastenerMatrix
  6493  000354  2599               	addwf	??_inputEntry& (0+255),w,b
  6494  000356  6EF6               	movwf	tblptrl,c
  6495  000358  0EFD               	movlw	high _fastenerMatrix
  6496  00035A  219A               	addwfc	(??_inputEntry+1)& (0+255),w,b
  6497  00035C  6EF7               	movwf	tblptrh,c
  6498  00035E                     	if	1	;There are 3 active tblptr bytes
  6499  00035E  6AF8               	clrf	tblptru,c
  6500  000360  0E00               	movlw	low (__mediumconst shr (0+16))
  6501  000362  22F8               	addwfc	tblptru,f,c
  6502  000364                     	endif
  6503  000364  0008               	tblrd		*
  6504  000366  50F5               	movf	tablat,w,c
  6505  000368  6F9B               	movwf	(??_inputEntry+2)& (0+255),b
  6506  00036A  6B9C               	clrf	(??_inputEntry+3)& (0+255),b
  6507  00036C  0101               	movlb	1	; () banked
  6508  00036E  5147               	movf	inputEntry@numB& (0+255),w,b
  6509  000370  0100               	movlb	0	; () banked
  6510  000372  199B               	xorwf	(??_inputEntry+2)& (0+255),w,b
  6511  000374  E105               	bnz	u7481
  6512  000376  0101               	movlb	1	; () banked
  6513  000378  5148               	movf	(inputEntry@numB+1)& (0+255),w,b
  6514  00037A  0100               	movlb	0	; () banked
  6515  00037C  199C               	xorwf	(??_inputEntry+3)& (0+255),w,b
  6516  00037E  A4D8               	btfss	status,2,c
  6517  000380                     u7481:
  6518  000380  D07F               	goto	l407
  6519                           
  6520                           ; BSR set to: 0
  6521  000382  C155  F099         	movff	inputEntry@i,??_inputEntry
  6522  000386  C156  F09A         	movff	inputEntry@i+1,??_inputEntry+1
  6523  00038A  90D8               	bcf	status,0,c
  6524  00038C  3799               	rlcf	??_inputEntry& (0+255),f,b
  6525  00038E  379A               	rlcf	(??_inputEntry+1)& (0+255),f,b
  6526  000390  90D8               	bcf	status,0,c
  6527  000392  3799               	rlcf	??_inputEntry& (0+255),f,b
  6528  000394  379A               	rlcf	(??_inputEntry+1)& (0+255),f,b
  6529  000396  0E01               	movlw	1
  6530  000398  2799               	addwf	??_inputEntry& (0+255),f,b
  6531  00039A  0E00               	movlw	0
  6532  00039C  239A               	addwfc	(??_inputEntry+1)& (0+255),f,b
  6533  00039E  0EAA               	movlw	low _fastenerMatrix
  6534  0003A0  2599               	addwf	??_inputEntry& (0+255),w,b
  6535  0003A2  6EF6               	movwf	tblptrl,c
  6536  0003A4  0EFD               	movlw	high _fastenerMatrix
  6537  0003A6  219A               	addwfc	(??_inputEntry+1)& (0+255),w,b
  6538  0003A8  6EF7               	movwf	tblptrh,c
  6539  0003AA                     	if	1	;There are 3 active tblptr bytes
  6540  0003AA  6AF8               	clrf	tblptru,c
  6541  0003AC  0E00               	movlw	low (__mediumconst shr (0+16))
  6542  0003AE  22F8               	addwfc	tblptru,f,c
  6543  0003B0                     	endif
  6544  0003B0  0008               	tblrd		*
  6545  0003B2  50F5               	movf	tablat,w,c
  6546  0003B4  6F9B               	movwf	(??_inputEntry+2)& (0+255),b
  6547  0003B6  6B9C               	clrf	(??_inputEntry+3)& (0+255),b
  6548  0003B8  0101               	movlb	1	; () banked
  6549  0003BA  5149               	movf	inputEntry@numN& (0+255),w,b
  6550  0003BC  0100               	movlb	0	; () banked
  6551  0003BE  199B               	xorwf	(??_inputEntry+2)& (0+255),w,b
  6552  0003C0  E15F               	bnz	l5990
  6553  0003C2  0101               	movlb	1	; () banked
  6554  0003C4  514A               	movf	(inputEntry@numN+1)& (0+255),w,b
  6555  0003C6  0100               	movlb	0	; () banked
  6556  0003C8  199C               	xorwf	(??_inputEntry+3)& (0+255),w,b
  6557  0003CA  A4D8               	btfss	status,2,c
  6558  0003CC  D059               	goto	l407
  6559                           
  6560                           ; BSR set to: 0
  6561  0003CE  C155  F099         	movff	inputEntry@i,??_inputEntry
  6562  0003D2  C156  F09A         	movff	inputEntry@i+1,??_inputEntry+1
  6563  0003D6  90D8               	bcf	status,0,c
  6564  0003D8  3799               	rlcf	??_inputEntry& (0+255),f,b
  6565  0003DA  379A               	rlcf	(??_inputEntry+1)& (0+255),f,b
  6566  0003DC  90D8               	bcf	status,0,c
  6567  0003DE  3799               	rlcf	??_inputEntry& (0+255),f,b
  6568  0003E0  379A               	rlcf	(??_inputEntry+1)& (0+255),f,b
  6569  0003E2  0E02               	movlw	2
  6570  0003E4  2799               	addwf	??_inputEntry& (0+255),f,b
  6571  0003E6  0E00               	movlw	0
  6572  0003E8  239A               	addwfc	(??_inputEntry+1)& (0+255),f,b
  6573  0003EA  0EAA               	movlw	low _fastenerMatrix
  6574  0003EC  2599               	addwf	??_inputEntry& (0+255),w,b
  6575  0003EE  6EF6               	movwf	tblptrl,c
  6576  0003F0  0EFD               	movlw	high _fastenerMatrix
  6577  0003F2  219A               	addwfc	(??_inputEntry+1)& (0+255),w,b
  6578  0003F4  6EF7               	movwf	tblptrh,c
  6579  0003F6                     	if	1	;There are 3 active tblptr bytes
  6580  0003F6  6AF8               	clrf	tblptru,c
  6581  0003F8  0E00               	movlw	low (__mediumconst shr (0+16))
  6582  0003FA  22F8               	addwfc	tblptru,f,c
  6583  0003FC                     	endif
  6584  0003FC  0008               	tblrd		*
  6585  0003FE  50F5               	movf	tablat,w,c
  6586  000400  6F9B               	movwf	(??_inputEntry+2)& (0+255),b
  6587  000402  6B9C               	clrf	(??_inputEntry+3)& (0+255),b
  6588  000404  0101               	movlb	1	; () banked
  6589  000406  514B               	movf	inputEntry@numS& (0+255),w,b
  6590  000408  0100               	movlb	0	; () banked
  6591  00040A  199B               	xorwf	(??_inputEntry+2)& (0+255),w,b
  6592  00040C  E139               	bnz	l5990
  6593  00040E  0101               	movlb	1	; () banked
  6594  000410  514C               	movf	(inputEntry@numS+1)& (0+255),w,b
  6595  000412  0100               	movlb	0	; () banked
  6596  000414  199C               	xorwf	(??_inputEntry+3)& (0+255),w,b
  6597  000416  A4D8               	btfss	status,2,c
  6598  000418  D033               	goto	l407
  6599                           
  6600                           ; BSR set to: 0
  6601  00041A  C155  F099         	movff	inputEntry@i,??_inputEntry
  6602  00041E  C156  F09A         	movff	inputEntry@i+1,??_inputEntry+1
  6603  000422  90D8               	bcf	status,0,c
  6604  000424  3799               	rlcf	??_inputEntry& (0+255),f,b
  6605  000426  379A               	rlcf	(??_inputEntry+1)& (0+255),f,b
  6606  000428  90D8               	bcf	status,0,c
  6607  00042A  3799               	rlcf	??_inputEntry& (0+255),f,b
  6608  00042C  379A               	rlcf	(??_inputEntry+1)& (0+255),f,b
  6609  00042E  0E03               	movlw	3
  6610  000430  2799               	addwf	??_inputEntry& (0+255),f,b
  6611  000432  0E00               	movlw	0
  6612  000434  239A               	addwfc	(??_inputEntry+1)& (0+255),f,b
  6613  000436  0EAA               	movlw	low _fastenerMatrix
  6614  000438  2599               	addwf	??_inputEntry& (0+255),w,b
  6615  00043A  6EF6               	movwf	tblptrl,c
  6616  00043C  0EFD               	movlw	high _fastenerMatrix
  6617  00043E  219A               	addwfc	(??_inputEntry+1)& (0+255),w,b
  6618  000440  6EF7               	movwf	tblptrh,c
  6619  000442                     	if	1	;There are 3 active tblptr bytes
  6620  000442  6AF8               	clrf	tblptru,c
  6621  000444  0E00               	movlw	low (__mediumconst shr (0+16))
  6622  000446  22F8               	addwfc	tblptru,f,c
  6623  000448                     	endif
  6624  000448  0008               	tblrd		*
  6625  00044A  50F5               	movf	tablat,w,c
  6626  00044C  6F9B               	movwf	(??_inputEntry+2)& (0+255),b
  6627  00044E  6B9C               	clrf	(??_inputEntry+3)& (0+255),b
  6628  000450  0101               	movlb	1	; () banked
  6629  000452  514D               	movf	inputEntry@numW& (0+255),w,b
  6630  000454  0100               	movlb	0	; () banked
  6631  000456  199B               	xorwf	(??_inputEntry+2)& (0+255),w,b
  6632  000458  E113               	bnz	l5990
  6633  00045A  0101               	movlb	1	; () banked
  6634  00045C  514E               	movf	(inputEntry@numW+1)& (0+255),w,b
  6635  00045E  0100               	movlb	0	; () banked
  6636  000460  199C               	xorwf	(??_inputEntry+3)& (0+255),w,b
  6637  000462  A4D8               	btfss	status,2,c
  6638  000464  D00D               	goto	l407
  6639                           
  6640                           ; BSR set to: 0
  6641                           ;menu.c: 108: {
  6642                           ;menu.c: 109: params.toFill[compartmentNum] = i;
  6643  000466  0EBE               	movlw	low (_params+2)
  6644  000468  0101               	movlb	1	; () banked
  6645  00046A  2553               	addwf	inputEntry@compartmentNum& (0+255),w,b
  6646  00046C  6ED9               	movwf	fsr2l,c
  6647  00046E  0E01               	movlw	high (_params+2)
  6648  000470  2154               	addwfc	(inputEntry@compartmentNum+1)& (0+255),w,b
  6649  000472  6EDA               	movwf	fsr2h,c
  6650  000474  C155  FFDF         	movff	inputEntry@i,indf2
  6651                           
  6652                           ; BSR set to: 1
  6653                           ;menu.c: 110: found = 1;
  6654  000478  0E00               	movlw	0
  6655  00047A  6F3E               	movwf	(inputEntry@found+1)& (0+255),b
  6656  00047C  0E01               	movlw	1
  6657  00047E  6F3D               	movwf	inputEntry@found& (0+255),b
  6658  000480                     l407:
  6659  000480                     l5990:
  6660  000480  0101               	movlb	1	; () banked
  6661  000482  4B55               	infsnz	inputEntry@i& (0+255),f,b
  6662  000484  2B56               	incf	(inputEntry@i+1)& (0+255),f,b
  6663                           
  6664                           ; BSR set to: 1
  6665  000486  BF56               	btfsc	(inputEntry@i+1)& (0+255),7,b
  6666  000488  D759               	goto	l405
  6667  00048A  5156               	movf	(inputEntry@i+1)& (0+255),w,b
  6668  00048C  E101               	bnz	l5994
  6669  00048E  D750               	goto	L5
  6670  000490                     u7520:
  6671  000490                     l5994:
  6672                           
  6673                           ; BSR set to: 1
  6674                           ;menu.c: 111: }
  6675                           ;menu.c: 112: }
  6676                           ;menu.c: 113: if (!found) {
  6677  000490  513D               	movf	inputEntry@found& (0+255),w,b
  6678  000492  113E               	iorwf	(inputEntry@found+1)& (0+255),w,b
  6679  000494  A4D8               	btfss	status,2,c
  6680  000496  D008               	goto	l408
  6681                           
  6682                           ; BSR set to: 1
  6683                           ;menu.c: 114: printErrorLCD(errMsgs.badEntry);
  6684  000498  0E46               	movlw	low _errMsgs
  6685  00049A  0100               	movlb	0	; () banked
  6686  00049C  6F95               	movwf	printErrorLCD@string& (0+255),b
  6687  00049E  0EFC               	movlw	high _errMsgs
  6688  0004A0  6F96               	movwf	(printErrorLCD@string+1)& (0+255),b
  6689  0004A2  EC36  F019         	call	_printErrorLCD	;wreg free
  6690                           
  6691                           ;menu.c: 118: } else {
  6692                           
  6693                           ;menu.c: 117: continue;
  6694  0004A6  D005               	goto	l409
  6695  0004A8                     l408:
  6696                           
  6697                           ;menu.c: 119: setIsGood = 1;
  6698  0004A8  0E00               	movlw	0
  6699  0004AA  0101               	movlb	1	; () banked
  6700  0004AC  6F40               	movwf	(inputEntry@setIsGood+1)& (0+255),b
  6701  0004AE  0E01               	movlw	1
  6702  0004B0                     L3:
  6703  0004B0  6F3F               	movwf	inputEntry@setIsGood& (0+255),b
  6704  0004B2                     l409:
  6705                           
  6706                           ; BSR set to: 1
  6707                           
  6708                           ; BSR set to: 1
  6709  0004B2  0101               	movlb	1	; () banked
  6710  0004B4  513F               	movf	inputEntry@setIsGood& (0+255),w,b
  6711  0004B6  1140               	iorwf	(inputEntry@setIsGood+1)& (0+255),w,b
  6712  0004B8  B4D8               	btfsc	status,2,c
  6713  0004BA  D691               	goto	l383
  6714  0004BC                     u7540:
  6715                           
  6716                           ; BSR set to: 1
  6717                           ;menu.c: 125: doneMultiples = 0;
  6718                           
  6719                           ; BSR set to: 1
  6720                           
  6721                           ;menu.c: 120: }
  6722                           ;menu.c: 121: }
  6723                           ;menu.c: 124: STARTMULTIPLES:
  6724                           
  6725                           ; BSR set to: 1
  6726  0004BC  0E00               	movlw	0
  6727  0004BE  6F42               	movwf	(inputEntry@doneMultiples+1)& (0+255),b
  6728  0004C0  0E00               	movlw	0
  6729  0004C2  D111               	goto	L6
  6730  0004C4                     
  6731                           ; BSR set to: 1
  6732                           ;menu.c: 127: printStringLCD(inputEntryQuestions[2]);
  6733                           
  6734                           ; BSR set to: 1
  6735  0004C4  0E68               	movlw	low (_inputEntryQuestions+66)
  6736  0004C6  0100               	movlb	0	; () banked
  6737  0004C8  6F86               	movwf	printStringLCD@string& (0+255),b
  6738  0004CA  0EFD               	movlw	high (_inputEntryQuestions+66)
  6739  0004CC  6F87               	movwf	(printStringLCD@string+1)& (0+255),b
  6740  0004CE  ECBE  F00F         	call	_printStringLCD	;wreg free
  6741                           
  6742                           ;menu.c: 128: lcd_set_cursor(14, 1);
  6743  0004D2  0E01               	movlw	1
  6744  0004D4  0100               	movlb	0	; () banked
  6745  0004D6  6F86               	movwf	lcd_set_cursor@y& (0+255),b
  6746  0004D8  0E0E               	movlw	14
  6747  0004DA  EC26  F018         	call	_lcd_set_cursor
  6748                           
  6749                           ;menu.c: 130: pressed = pollKeypad();
  6750  0004DE  ECE0  F018         	call	_pollKeypad	;wreg free
  6751  0004E2  0101               	movlb	1	; () banked
  6752  0004E4  6F57               	movwf	inputEntry@pressed& (0+255),b
  6753                           
  6754                           ; BSR set to: 1
  6755                           ;menu.c: 131: numPressed = pressed - 48;
  6756  0004E6  0ED0               	movlw	208
  6757  0004E8  2557               	addwf	inputEntry@pressed& (0+255),w,b
  6758  0004EA  6F51               	movwf	inputEntry@numPressed& (0+255),b
  6759  0004EC  6B52               	clrf	(inputEntry@numPressed+1)& (0+255),b
  6760  0004EE  0EFF               	movlw	255
  6761  0004F0  2352               	addwfc	(inputEntry@numPressed+1)& (0+255),f,b
  6762                           
  6763                           ; BSR set to: 1
  6764                           ;menu.c: 133: if (pressed == 42) goto STARTCOMPARTMENT;
  6765  0004F2  0E2A               	movlw	42
  6766  0004F4  1957               	xorwf	inputEntry@pressed& (0+255),w,b
  6767  0004F6  B4D8               	btfsc	status,2,c
  6768  0004F8  D643               	goto	l376
  6769                           
  6770                           ; BSR set to: 1
  6771                           ;menu.c: 136: putch(pressed);
  6772                           
  6773                           ; BSR set to: 1
  6774                           
  6775                           ; BSR set to: 1
  6776  0004FA  5157               	movf	inputEntry@pressed& (0+255),w,b
  6777  0004FC  EC77  F019         	call	_putch
  6778                           
  6779                           ;menu.c: 137: _delay((unsigned long)((500)*(40000000/4000.0)));
  6780  000500  0E1A               	movlw	26
  6781  000502  0100               	movlb	0	; () banked
  6782  000504  6F9A               	movwf	(??_inputEntry+1)& (0+255),b
  6783  000506  0E5E               	movlw	94
  6784  000508  6F99               	movwf	??_inputEntry& (0+255),b
  6785  00050A  0E6E               	movlw	110
  6786  00050C                     u8017:
  6787  00050C  2EE8               	decfsz	wreg,f,c
  6788  00050E  D7FE               	bra	u8017
  6789  000510  2F99               	decfsz	??_inputEntry& (0+255),f,b
  6790  000512  D7FC               	bra	u8017
  6791  000514  2F9A               	decfsz	(??_inputEntry+1)& (0+255),f,b
  6792  000516  D7FA               	bra	u8017
  6793  000518  F000               	nop	
  6794                           
  6795                           ;menu.c: 139: int sum = 0;
  6796  00051A  0E00               	movlw	0
  6797  00051C  0101               	movlb	1	; () banked
  6798  00051E  6F46               	movwf	(inputEntry@sum+1)& (0+255),b
  6799  000520  0E00               	movlw	0
  6800  000522  6F45               	movwf	inputEntry@sum& (0+255),b
  6801                           
  6802                           ; BSR set to: 1
  6803                           ;menu.c: 140: for (i = 0; i < 4; i++) {
  6804  000524  0E00               	movlw	0
  6805  000526  6F56               	movwf	(inputEntry@i+1)& (0+255),b
  6806  000528  0E00               	movlw	0
  6807  00052A  6F55               	movwf	inputEntry@i& (0+255),b
  6808  00052C                     l6026:
  6809                           
  6810                           ; BSR set to: 1
  6811  00052C  BF56               	btfsc	(inputEntry@i+1)& (0+255),7,b
  6812  00052E  D006               	goto	l414
  6813  000530  5156               	movf	(inputEntry@i+1)& (0+255),w,b
  6814  000532  E12D               	bnz	l6036
  6815  000534  0E04               	movlw	4
  6816  000536  5D55               	subwf	inputEntry@i& (0+255),w,b
  6817  000538  B0D8               	btfsc	status,0,c
  6818  00053A  D029               	goto	u7570
  6819  00053C                     l414:
  6820                           
  6821                           ; BSR set to: 1
  6822                           ;menu.c: 141: sum += fastenerMatrix[params.toFill[compartmentNum]][i];
  6823                           
  6824                           ; BSR set to: 1
  6825  00053C  0EBE               	movlw	low (_params+2)
  6826  00053E  2553               	addwf	inputEntry@compartmentNum& (0+255),w,b
  6827  000540  6ED9               	movwf	fsr2l,c
  6828  000542  0E01               	movlw	high (_params+2)
  6829  000544  2154               	addwfc	(inputEntry@compartmentNum+1)& (0+255),w,b
  6830  000546  6EDA               	movwf	fsr2h,c
  6831  000548  50DF               	movf	indf2,w,c
  6832  00054A  0100               	movlb	0	; () banked
  6833  00054C  6F99               	movwf	??_inputEntry& (0+255),b
  6834  00054E  5199               	movf	??_inputEntry& (0+255),w,b
  6835  000550  0D04               	mullw	4
  6836  000552  0EAA               	movlw	low _fastenerMatrix
  6837  000554  6F9A               	movwf	(??_inputEntry+1)& (0+255),b
  6838  000556  0EFD               	movlw	high _fastenerMatrix
  6839  000558  6F9B               	movwf	(??_inputEntry+2)& (0+255),b
  6840  00055A  50F3               	movf	prodl,w,c
  6841  00055C  279A               	addwf	(??_inputEntry+1)& (0+255),f,b
  6842  00055E  50F4               	movf	prodh,w,c
  6843  000560  239B               	addwfc	(??_inputEntry+2)& (0+255),f,b
  6844  000562  0101               	movlb	1	; () banked
  6845  000564  5155               	movf	inputEntry@i& (0+255),w,b
  6846  000566  0100               	movlb	0	; () banked
  6847  000568  279A               	addwf	(??_inputEntry+1)& (0+255),f,b
  6848  00056A  0101               	movlb	1	; () banked
  6849  00056C  5156               	movf	(inputEntry@i+1)& (0+255),w,b
  6850  00056E  0100               	movlb	0	; () banked
  6851  000570  239B               	addwfc	(??_inputEntry+2)& (0+255),f,b
  6852  000572  C09A  FFF6         	movff	??_inputEntry+1,tblptrl
  6853  000576  C09B  FFF7         	movff	??_inputEntry+2,tblptrh
  6854  00057A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6855  00057A  6AF8               	clrf	tblptru,c
  6856  00057C                     	endif
  6857  00057C                     	if	0	;tblptru may be non-zero
  6858  00057C                     	endif
  6859  00057C  0008               	tblrd		*
  6860  00057E  50F5               	movf	tablat,w,c
  6861  000580  0101               	movlb	1	; () banked
  6862  000582  2745               	addwf	inputEntry@sum& (0+255),f,b
  6863  000584  0E00               	movlw	0
  6864  000586  2346               	addwfc	(inputEntry@sum+1)& (0+255),f,b
  6865                           
  6866                           ; BSR set to: 1
  6867  000588  4B55               	infsnz	inputEntry@i& (0+255),f,b
  6868  00058A  2B56               	incf	(inputEntry@i+1)& (0+255),f,b
  6869  00058C  D7CF               	goto	l6026
  6870  00058E                     u7570:
  6871  00058E                     l6036:
  6872                           
  6873                           ; BSR set to: 1
  6874                           ;menu.c: 142: };
  6875                           ;menu.c: 143: if (numPressed * sum > 4) {
  6876  00058E  C151  F080         	movff	inputEntry@numPressed,___wmul@multiplier
  6877  000592  C152  F081         	movff	inputEntry@numPressed+1,___wmul@multiplier+1
  6878  000596  C145  F082         	movff	inputEntry@sum,___wmul@multiplicand
  6879  00059A  C146  F083         	movff	inputEntry@sum+1,___wmul@multiplicand+1
  6880  00059E  EC22  F019         	call	___wmul	;wreg free
  6881  0005A2  0100               	movlb	0	; () banked
  6882  0005A4  BF81               	btfsc	(?___wmul+1)& (0+255),7,b
  6883  0005A6  D00D               	goto	l416
  6884  0005A8  5181               	movf	(?___wmul+1)& (0+255),w,b
  6885  0005AA  E104               	bnz	u7580
  6886  0005AC  0E05               	movlw	5
  6887  0005AE  5D80               	subwf	?___wmul& (0+255),w,b
  6888  0005B0  A0D8               	btfss	status,0,c
  6889  0005B2  D007               	goto	l416
  6890  0005B4                     u7580:
  6891                           
  6892                           ; BSR set to: 0
  6893                           ;menu.c: 144: printErrorLCD(errMsgs.tooManyFasteners);
  6894  0005B4  0E66               	movlw	low (_errMsgs+32)
  6895  0005B6  6F95               	movwf	printErrorLCD@string& (0+255),b
  6896  0005B8  0EFC               	movlw	high (_errMsgs+32)
  6897  0005BA  6F96               	movwf	(printErrorLCD@string+1)& (0+255),b
  6898  0005BC  EC36  F019         	call	_printErrorLCD	;wreg free
  6899                           
  6900                           ;menu.c: 145: } else if (numPressed * sum <= 0) {
  6901  0005C0  D093               	goto	l427
  6902  0005C2                     l416:
  6903  0005C2  C151  F080         	movff	inputEntry@numPressed,___wmul@multiplier
  6904  0005C6  C152  F081         	movff	inputEntry@numPressed+1,___wmul@multiplier+1
  6905  0005CA  C145  F082         	movff	inputEntry@sum,___wmul@multiplicand
  6906  0005CE  C146  F083         	movff	inputEntry@sum+1,___wmul@multiplicand+1
  6907  0005D2  EC22  F019         	call	___wmul	;wreg free
  6908  0005D6  0100               	movlb	0	; () banked
  6909  0005D8  BF81               	btfsc	(?___wmul+1)& (0+255),7,b
  6910  0005DA  D005               	goto	u7590
  6911  0005DC  5181               	movf	(?___wmul+1)& (0+255),w,b
  6912  0005DE  E10A               	bnz	l6044
  6913  0005E0  0580               	decf	?___wmul& (0+255),w,b
  6914  0005E2  B0D8               	btfsc	status,0,c
  6915  0005E4  D007               	goto	l418
  6916  0005E6                     u7590:
  6917                           
  6918                           ; BSR set to: 0
  6919                           ;menu.c: 146: printErrorLCD(errMsgs.noFasteners);
  6920  0005E6  0E06               	movlw	low (_errMsgs+192)
  6921  0005E8  6F95               	movwf	printErrorLCD@string& (0+255),b
  6922  0005EA  0EFD               	movlw	high (_errMsgs+192)
  6923  0005EC  6F96               	movwf	(printErrorLCD@string+1)& (0+255),b
  6924  0005EE  EC36  F019         	call	_printErrorLCD	;wreg free
  6925                           
  6926                           ;menu.c: 150: } else if (numB * numPressed > 2) {
  6927  0005F2  D07A               	goto	l427
  6928  0005F4                     l418:
  6929  0005F4                     l6044:
  6930  0005F4  C147  F080         	movff	inputEntry@numB,___wmul@multiplier
  6931  0005F8  C148  F081         	movff	inputEntry@numB+1,___wmul@multiplier+1
  6932  0005FC  C151  F082         	movff	inputEntry@numPressed,___wmul@multiplicand
  6933  000600  C152  F083         	movff	inputEntry@numPressed+1,___wmul@multiplicand+1
  6934  000604  EC22  F019         	call	___wmul	;wreg free
  6935  000608  0100               	movlb	0	; () banked
  6936  00060A  BF81               	btfsc	(?___wmul+1)& (0+255),7,b
  6937  00060C  D00D               	goto	l420
  6938  00060E  5181               	movf	(?___wmul+1)& (0+255),w,b
  6939  000610  E104               	bnz	u7600
  6940  000612  0E03               	movlw	3
  6941  000614  5D80               	subwf	?___wmul& (0+255),w,b
  6942  000616  A0D8               	btfss	status,0,c
  6943  000618  D007               	goto	l420
  6944  00061A                     u7600:
  6945                           
  6946                           ; BSR set to: 0
  6947                           ;menu.c: 151: printErrorLCD(errMsgs.tooManyBolts);
  6948  00061A  0E86               	movlw	low (_errMsgs+64)
  6949  00061C  6F95               	movwf	printErrorLCD@string& (0+255),b
  6950  00061E  0EFC               	movlw	high (_errMsgs+64)
  6951  000620  6F96               	movwf	(printErrorLCD@string+1)& (0+255),b
  6952  000622  EC36  F019         	call	_printErrorLCD	;wreg free
  6953                           
  6954                           ;menu.c: 152: } else if (numN * numPressed > 3) {
  6955  000626  D060               	goto	l427
  6956  000628                     l420:
  6957  000628  C149  F080         	movff	inputEntry@numN,___wmul@multiplier
  6958  00062C  C14A  F081         	movff	inputEntry@numN+1,___wmul@multiplier+1
  6959  000630  C151  F082         	movff	inputEntry@numPressed,___wmul@multiplicand
  6960  000634  C152  F083         	movff	inputEntry@numPressed+1,___wmul@multiplicand+1
  6961  000638  EC22  F019         	call	___wmul	;wreg free
  6962  00063C  0100               	movlb	0	; () banked
  6963  00063E  BF81               	btfsc	(?___wmul+1)& (0+255),7,b
  6964  000640  D00D               	goto	l422
  6965  000642  5181               	movf	(?___wmul+1)& (0+255),w,b
  6966  000644  E104               	bnz	u7610
  6967  000646  0E04               	movlw	4
  6968  000648  5D80               	subwf	?___wmul& (0+255),w,b
  6969  00064A  A0D8               	btfss	status,0,c
  6970  00064C  D007               	goto	l422
  6971  00064E                     u7610:
  6972                           
  6973                           ; BSR set to: 0
  6974                           ;menu.c: 153: printErrorLCD(errMsgs.tooManyNuts);
  6975  00064E  0EA6               	movlw	low (_errMsgs+96)
  6976  000650  6F95               	movwf	printErrorLCD@string& (0+255),b
  6977  000652  0EFC               	movlw	high (_errMsgs+96)
  6978  000654  6F96               	movwf	(printErrorLCD@string+1)& (0+255),b
  6979  000656  EC36  F019         	call	_printErrorLCD	;wreg free
  6980                           
  6981                           ;menu.c: 154: } else if (numS * numPressed > 2) {
  6982  00065A  D046               	goto	l427
  6983  00065C                     l422:
  6984  00065C  C14B  F080         	movff	inputEntry@numS,___wmul@multiplier
  6985  000660  C14C  F081         	movff	inputEntry@numS+1,___wmul@multiplier+1
  6986  000664  C151  F082         	movff	inputEntry@numPressed,___wmul@multiplicand
  6987  000668  C152  F083         	movff	inputEntry@numPressed+1,___wmul@multiplicand+1
  6988  00066C  EC22  F019         	call	___wmul	;wreg free
  6989  000670  0100               	movlb	0	; () banked
  6990  000672  BF81               	btfsc	(?___wmul+1)& (0+255),7,b
  6991  000674  D00D               	goto	l424
  6992  000676  5181               	movf	(?___wmul+1)& (0+255),w,b
  6993  000678  E104               	bnz	u7620
  6994  00067A  0E03               	movlw	3
  6995  00067C  5D80               	subwf	?___wmul& (0+255),w,b
  6996  00067E  A0D8               	btfss	status,0,c
  6997  000680  D007               	goto	l424
  6998  000682                     u7620:
  6999                           
  7000                           ; BSR set to: 0
  7001                           ;menu.c: 155: printErrorLCD(errMsgs.tooManySpacers);
  7002  000682  0EE6               	movlw	low (_errMsgs+160)
  7003  000684  6F95               	movwf	printErrorLCD@string& (0+255),b
  7004  000686  0EFC               	movlw	high (_errMsgs+160)
  7005  000688  6F96               	movwf	(printErrorLCD@string+1)& (0+255),b
  7006  00068A  EC36  F019         	call	_printErrorLCD	;wreg free
  7007                           
  7008                           ;menu.c: 156: } else if (numW * numPressed > 4) {
  7009  00068E  D02C               	goto	l427
  7010  000690                     l424:
  7011  000690  C14D  F080         	movff	inputEntry@numW,___wmul@multiplier
  7012  000694  C14E  F081         	movff	inputEntry@numW+1,___wmul@multiplier+1
  7013  000698  C151  F082         	movff	inputEntry@numPressed,___wmul@multiplicand
  7014  00069C  C152  F083         	movff	inputEntry@numPressed+1,___wmul@multiplicand+1
  7015  0006A0  EC22  F019         	call	___wmul	;wreg free
  7016  0006A4  0100               	movlb	0	; () banked
  7017  0006A6  BF81               	btfsc	(?___wmul+1)& (0+255),7,b
  7018  0006A8  D00D               	goto	l426
  7019  0006AA  5181               	movf	(?___wmul+1)& (0+255),w,b
  7020  0006AC  E104               	bnz	u7630
  7021  0006AE  0E05               	movlw	5
  7022  0006B0  5D80               	subwf	?___wmul& (0+255),w,b
  7023  0006B2  A0D8               	btfss	status,0,c
  7024  0006B4  D007               	goto	l426
  7025  0006B6                     u7630:
  7026                           
  7027                           ; BSR set to: 0
  7028                           ;menu.c: 157: printErrorLCD(errMsgs.tooManyWashers);
  7029  0006B6  0EC6               	movlw	low (_errMsgs+128)
  7030  0006B8  6F95               	movwf	printErrorLCD@string& (0+255),b
  7031  0006BA  0EFC               	movlw	high (_errMsgs+128)
  7032  0006BC  6F96               	movwf	(printErrorLCD@string+1)& (0+255),b
  7033  0006BE  EC36  F019         	call	_printErrorLCD	;wreg free
  7034                           
  7035                           ;menu.c: 158: } else {
  7036  0006C2  D012               	goto	l427
  7037  0006C4                     l426:
  7038                           
  7039                           ;menu.c: 159: params.setMultiple[compartmentNum] = numPressed;
  7040  0006C4  90D8               	bcf	status,0,c
  7041  0006C6  0101               	movlb	1	; () banked
  7042  0006C8  3553               	rlcf	inputEntry@compartmentNum& (0+255),w,b
  7043  0006CA  6ED9               	movwf	fsr2l,c
  7044  0006CC  3554               	rlcf	(inputEntry@compartmentNum+1)& (0+255),w,b
  7045  0006CE  6EDA               	movwf	fsr2h,c
  7046  0006D0  0EC6               	movlw	low (_params+10)
  7047  0006D2  26D9               	addwf	fsr2l,f,c
  7048  0006D4  0E01               	movlw	high (_params+10)
  7049  0006D6  22DA               	addwfc	fsr2h,f,c
  7050  0006D8  C151  FFDE         	movff	inputEntry@numPressed,postinc2
  7051  0006DC  C152  FFDD         	movff	inputEntry@numPressed+1,postdec2
  7052                           
  7053                           ; BSR set to: 1
  7054                           ;menu.c: 160: doneMultiples = 1;
  7055  0006E0  0E00               	movlw	0
  7056  0006E2  6F42               	movwf	(inputEntry@doneMultiples+1)& (0+255),b
  7057  0006E4  0E01               	movlw	1
  7058  0006E6                     L6:
  7059  0006E6  6F41               	movwf	inputEntry@doneMultiples& (0+255),b
  7060  0006E8                     l427:
  7061                           
  7062                           ; BSR set to: 1
  7063                           
  7064                           ; BSR set to: 1
  7065                           
  7066                           ; BSR set to: 1
  7067                           
  7068                           ; BSR set to: 1
  7069                           
  7070                           ; BSR set to: 1
  7071                           
  7072                           ; BSR set to: 1
  7073                           
  7074                           ; BSR set to: 1
  7075  0006E8  0101               	movlb	1	; () banked
  7076  0006EA  5141               	movf	inputEntry@doneMultiples& (0+255),w,b
  7077  0006EC  1142               	iorwf	(inputEntry@doneMultiples+1)& (0+255),w,b
  7078  0006EE  A4D8               	btfss	status,2,c
  7079  0006F0  D017               	goto	l429
  7080  0006F2  D6E8               	goto	l412
  7081  0006F4                     l379:
  7082                           
  7083                           ;menu.c: 164: params.toFill[compartmentNum] = NONE;
  7084                           
  7085                           ; BSR set to: 1
  7086  0006F4  0EBE               	movlw	low (_params+2)
  7087  0006F6  0101               	movlb	1	; () banked
  7088  0006F8  2553               	addwf	inputEntry@compartmentNum& (0+255),w,b
  7089  0006FA  6ED9               	movwf	fsr2l,c
  7090  0006FC  0E01               	movlw	high (_params+2)
  7091  0006FE  2154               	addwfc	(inputEntry@compartmentNum+1)& (0+255),w,b
  7092  000700  6EDA               	movwf	fsr2h,c
  7093  000702  0E00               	movlw	0
  7094  000704  6EDF               	movwf	indf2,c
  7095                           
  7096                           ;menu.c: 165: params.setMultiple[compartmentNum] = 0;
  7097  000706  90D8               	bcf	status,0,c
  7098  000708  3553               	rlcf	inputEntry@compartmentNum& (0+255),w,b
  7099  00070A  6ED9               	movwf	fsr2l,c
  7100  00070C  3554               	rlcf	(inputEntry@compartmentNum+1)& (0+255),w,b
  7101  00070E  6EDA               	movwf	fsr2h,c
  7102  000710  0EC6               	movlw	low (_params+10)
  7103  000712  26D9               	addwf	fsr2l,f,c
  7104  000714  0E01               	movlw	high (_params+10)
  7105  000716  22DA               	addwfc	fsr2h,f,c
  7106  000718  0E00               	movlw	0
  7107  00071A  6EDE               	movwf	postinc2,c
  7108  00071C  0E00               	movlw	0
  7109  00071E  6EDD               	movwf	postdec2,c
  7110  000720                     l429:
  7111                           
  7112                           ; BSR set to: 1
  7113                           
  7114                           ; BSR set to: 1
  7115  000720  4B53               	infsnz	inputEntry@compartmentNum& (0+255),f,b
  7116  000722  2B54               	incf	(inputEntry@compartmentNum+1)& (0+255),f,b
  7117                           
  7118                           ; BSR set to: 1
  7119  000724  BF54               	btfsc	(inputEntry@compartmentNum+1)& (0+255),7,b
  7120  000726  D52C               	goto	l376
  7121  000728  5154               	movf	(inputEntry@compartmentNum+1)& (0+255),w,b
  7122  00072A  E104               	bnz	l6072
  7123  00072C  0E08               	movlw	8
  7124  00072E  5D53               	subwf	inputEntry@compartmentNum& (0+255),w,b
  7125  000730  A0D8               	btfss	status,0,c
  7126  000732  D526               	goto	l376
  7127  000734                     u7650:
  7128  000734                     l6072:
  7129                           
  7130                           ; BSR set to: 1
  7131                           ;menu.c: 166: }
  7132                           ;menu.c: 167: }
  7133                           ;menu.c: 168: done = 1;
  7134  000734  0E00               	movlw	0
  7135  000736  6F3C               	movwf	(inputEntry@done+1)& (0+255),b
  7136  000738  0E01               	movlw	1
  7137  00073A  6F3B               	movwf	inputEntry@done& (0+255),b
  7138                           
  7139                           ; BSR set to: 1
  7140                           ;menu.c: 169: I2C_Send(nanoAddr, "\1Done inputs\0");
  7141  00073C  0EA4               	movlw	low STR_18
  7142  00073E  0100               	movlb	0	; () banked
  7143  000740  6F83               	movwf	I2C_Send@data& (0+255),b
  7144  000742  0EFF               	movlw	high STR_18
  7145  000744  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  7146  000746  0E3F               	movlw	low _nanoAddr
  7147  000748  6EF6               	movwf	tblptrl,c
  7148  00074A                     	if	1	;There is more than 1 active tblptr byte
  7149  00074A  0EFC               	movlw	high _nanoAddr
  7150  00074C  6EF7               	movwf	tblptrh,c
  7151  00074E                     	endif
  7152  00074E                     	if	1	;There are 3 active tblptr bytes
  7153  00074E  0E00               	movlw	low (_nanoAddr shr (0+16))
  7154  000750  6EF8               	movwf	tblptru,c
  7155  000752                     	endif
  7156  000752  0008               	tblrd		*
  7157  000754  50F5               	movf	tablat,w,c
  7158  000756  EC83  F015         	call	_I2C_Send
  7159  00075A                     l375:
  7160  00075A  0101               	movlb	1	; () banked
  7161  00075C  513B               	movf	inputEntry@done& (0+255),w,b
  7162  00075E  113C               	iorwf	(inputEntry@done+1)& (0+255),w,b
  7163  000760  A4D8               	btfss	status,2,c
  7164  000762  0012               	return	
  7165  000764  D48E               	goto	l370
  7166  000766                     __end_of_inputEntry:
  7167                           	opt stack 0
  7168                           tosu	equ	0xFFF
  7169                           tosh	equ	0xFFE
  7170                           tosl	equ	0xFFD
  7171                           pclath	equ	0xFFA
  7172                           tblptru	equ	0xFF8
  7173                           tblptrh	equ	0xFF7
  7174                           tblptrl	equ	0xFF6
  7175                           tablat	equ	0xFF5
  7176                           prodh	equ	0xFF4
  7177                           prodl	equ	0xFF3
  7178                           intcon	equ	0xFF2
  7179                           indf0	equ	0xFEF
  7180                           postinc0	equ	0xFEE
  7181                           fsr0h	equ	0xFEA
  7182                           fsr0l	equ	0xFE9
  7183                           wreg	equ	0xFE8
  7184                           postdec1	equ	0xFE5
  7185                           plusw1	equ	0xFE3
  7186                           fsr1l	equ	0xFE1
  7187                           indf2	equ	0xFDF
  7188                           postinc2	equ	0xFDE
  7189                           postdec2	equ	0xFDD
  7190                           plusw2	equ	0xFDB
  7191                           fsr2h	equ	0xFDA
  7192                           fsr2l	equ	0xFD9
  7193                           status	equ	0xFD8
  7194                           
  7195 ;; *************** function _strcpy *****************
  7196 ;; Defined at:
  7197 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
  7198 ;; Parameters:    Size  Location     Type
  7199 ;;  to              2    6[BANK0 ] PTR unsigned char 
  7200 ;;		 -> inputEntry@fastenerString(32), 
  7201 ;;  from            2    8[BANK0 ] PTR const unsigned char 
  7202 ;;		 -> inputEntryQuestions(132), 
  7203 ;; Auto vars:     Size  Location     Type
  7204 ;;  cp              2   10[BANK0 ] PTR unsigned char 
  7205 ;;		 -> inputEntry@fastenerString(32), 
  7206 ;; Return value:  Size  Location     Type
  7207 ;;                  2    6[BANK0 ] PTR unsigned char 
  7208 ;; Registers used:
  7209 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7210 ;; Tracked objects:
  7211 ;;		On entry : 0/0
  7212 ;;		On exit  : 0/0
  7213 ;;		Unchanged: 0/0
  7214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7215 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7216 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7218 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7219 ;;Total ram usage:        6 bytes
  7220 ;; Hardware stack levels used:    1
  7221 ;; Hardware stack levels required when called:    4
  7222 ;; This function calls:
  7223 ;;		Nothing
  7224 ;; This function is called by:
  7225 ;;		_inputEntry
  7226 ;; This function uses a non-reentrant model
  7227 ;;
  7228                           
  7229                           	psect	text11
  7230  00318C                     __ptext11:
  7231                           	opt stack 0
  7232  00318C                     _strcpy:
  7233                           	opt stack 24
  7234                           
  7235                           ; BSR set to: 1
  7236                           ;incstack = 0
  7237  00318C  C086  F08A         	movff	strcpy@to,strcpy@cp
  7238  003190  C087  F08B         	movff	strcpy@to+1,strcpy@cp+1
  7239  003194  D005               	goto	l1428
  7240  003196  0100               	movlb	0	; () banked
  7241  003198  4B8A               	infsnz	strcpy@cp& (0+255),f,b
  7242  00319A  2B8B               	incf	(strcpy@cp+1)& (0+255),f,b
  7243  00319C  4B88               	infsnz	strcpy@from& (0+255),f,b
  7244  00319E  2B89               	incf	(strcpy@from+1)& (0+255),f,b
  7245  0031A0                     l1428:
  7246                           
  7247                           ; BSR set to: 0
  7248  0031A0  C088  FFF6         	movff	strcpy@from,tblptrl
  7249  0031A4  C089  FFF7         	movff	strcpy@from+1,tblptrh
  7250  0031A8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7251  0031A8  6AF8               	clrf	tblptru,c
  7252  0031AA                     	endif
  7253  0031AA                     	if	0	;tblptru may be non-zero
  7254  0031AA                     	endif
  7255  0031AA  C08A  FFD9         	movff	strcpy@cp,fsr2l
  7256  0031AE  C08B  FFDA         	movff	strcpy@cp+1,fsr2h
  7257  0031B2  0008               	tblrd		*
  7258  0031B4  CFF5 FFDF          	movff	tablat,indf2
  7259  0031B8  50DF               	movf	indf2,w,c
  7260  0031BA  B4D8               	btfsc	status,2,c
  7261  0031BC  0012               	return	
  7262  0031BE  D7EB               	goto	l1429
  7263  0031C0                     __end_of_strcpy:
  7264                           	opt stack 0
  7265                           tosu	equ	0xFFF
  7266                           tosh	equ	0xFFE
  7267                           tosl	equ	0xFFD
  7268                           pclath	equ	0xFFA
  7269                           tblptru	equ	0xFF8
  7270                           tblptrh	equ	0xFF7
  7271                           tblptrl	equ	0xFF6
  7272                           tablat	equ	0xFF5
  7273                           prodh	equ	0xFF4
  7274                           prodl	equ	0xFF3
  7275                           intcon	equ	0xFF2
  7276                           indf0	equ	0xFEF
  7277                           postinc0	equ	0xFEE
  7278                           fsr0h	equ	0xFEA
  7279                           fsr0l	equ	0xFE9
  7280                           wreg	equ	0xFE8
  7281                           postdec1	equ	0xFE5
  7282                           plusw1	equ	0xFE3
  7283                           fsr1l	equ	0xFE1
  7284                           indf2	equ	0xFDF
  7285                           postinc2	equ	0xFDE
  7286                           postdec2	equ	0xFDD
  7287                           plusw2	equ	0xFDB
  7288                           fsr2h	equ	0xFDA
  7289                           fsr2l	equ	0xFD9
  7290                           status	equ	0xFD8
  7291                           
  7292 ;; *************** function _printErrorLCD *****************
  7293 ;; Defined at:
  7294 ;;		line 62 in file "helpers.c"
  7295 ;; Parameters:    Size  Location     Type
  7296 ;;  string          2   21[BANK0 ] PTR unsigned char 
  7297 ;;		 -> errMsgs.noFasteners(32), errMsgs.tooManySpacers(32), errMsgs.tooManyWashers(32), errMsgs.tooManyNuts(32), 
  7298 ;;		 -> errMsgs.tooManyBolts(32), errMsgs.tooManyFasteners(32), errMsgs.badEntry(32), errMsgs(224), 
  7299 ;; Auto vars:     Size  Location     Type
  7300 ;;		None
  7301 ;; Return value:  Size  Location     Type
  7302 ;;                  1    wreg      void 
  7303 ;; Registers used:
  7304 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7305 ;; Tracked objects:
  7306 ;;		On entry : 0/0
  7307 ;;		On exit  : 0/0
  7308 ;;		Unchanged: 0/0
  7309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7310 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7312 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7313 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7314 ;;Total ram usage:        4 bytes
  7315 ;; Hardware stack levels used:    1
  7316 ;; Hardware stack levels required when called:    7
  7317 ;; This function calls:
  7318 ;;		_printStringLCD
  7319 ;; This function is called by:
  7320 ;;		_inputEntry
  7321 ;; This function uses a non-reentrant model
  7322 ;;
  7323                           
  7324                           	psect	text12
  7325  00326C                     __ptext12:
  7326                           	opt stack 0
  7327  00326C                     _printErrorLCD:
  7328                           	opt stack 21
  7329                           
  7330                           ;helpers.c: 63: printStringLCD(string);
  7331                           
  7332                           ;incstack = 0
  7333  00326C  C095  F086         	movff	printErrorLCD@string,printStringLCD@string
  7334  003270  C096  F087         	movff	printErrorLCD@string+1,printStringLCD@string+1
  7335  003274  ECBE  F00F         	call	_printStringLCD	;wreg free
  7336                           
  7337                           ;helpers.c: 64: _delay((unsigned long)((2000)*(40000000/4000.0)));
  7338  003278  0E66               	movlw	102
  7339  00327A  0100               	movlb	0	; () banked
  7340  00327C  6F98               	movwf	(??_printErrorLCD+1)& (0+255),b
  7341  00327E  0E76               	movlw	118
  7342  003280  6F97               	movwf	??_printErrorLCD& (0+255),b
  7343  003282  0EC1               	movlw	193
  7344  003284                     u8027:
  7345  003284  2EE8               	decfsz	wreg,f,c
  7346  003286  D7FE               	bra	u8027
  7347  003288  2F97               	decfsz	??_printErrorLCD& (0+255),f,b
  7348  00328A  D7FC               	bra	u8027
  7349  00328C  2F98               	decfsz	(??_printErrorLCD+1)& (0+255),f,b
  7350  00328E  D7FA               	bra	u8027
  7351  003290  0012               	return		;funcret
  7352  003292                     __end_of_printErrorLCD:
  7353                           	opt stack 0
  7354                           tosu	equ	0xFFF
  7355                           tosh	equ	0xFFE
  7356                           tosl	equ	0xFFD
  7357                           pclath	equ	0xFFA
  7358                           tblptru	equ	0xFF8
  7359                           tblptrh	equ	0xFF7
  7360                           tblptrl	equ	0xFF6
  7361                           tablat	equ	0xFF5
  7362                           prodh	equ	0xFF4
  7363                           prodl	equ	0xFF3
  7364                           intcon	equ	0xFF2
  7365                           indf0	equ	0xFEF
  7366                           postinc0	equ	0xFEE
  7367                           fsr0h	equ	0xFEA
  7368                           fsr0l	equ	0xFE9
  7369                           wreg	equ	0xFE8
  7370                           postdec1	equ	0xFE5
  7371                           plusw1	equ	0xFE3
  7372                           fsr1l	equ	0xFE1
  7373                           indf2	equ	0xFDF
  7374                           postinc2	equ	0xFDE
  7375                           postdec2	equ	0xFDD
  7376                           plusw2	equ	0xFDB
  7377                           fsr2h	equ	0xFDA
  7378                           fsr2l	equ	0xFD9
  7379                           status	equ	0xFD8
  7380                           
  7381 ;; *************** function _lcd_set_cursor *****************
  7382 ;; Defined at:
  7383 ;;		line 81 in file "lcd.c"
  7384 ;; Parameters:    Size  Location     Type
  7385 ;;  x               1    wreg     unsigned char 
  7386 ;;  y               1    6[BANK0 ] unsigned char 
  7387 ;; Auto vars:     Size  Location     Type
  7388 ;;  x               1    9[BANK0 ] unsigned char 
  7389 ;;  i               1    8[BANK0 ] unsigned char 
  7390 ;; Return value:  Size  Location     Type
  7391 ;;                  1    wreg      void 
  7392 ;; Registers used:
  7393 ;;		wreg, status,2, status,0, cstack
  7394 ;; Tracked objects:
  7395 ;;		On entry : 0/0
  7396 ;;		On exit  : 0/0
  7397 ;;		Unchanged: 0/0
  7398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7399 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7400 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7401 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7402 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7403 ;;Total ram usage:        4 bytes
  7404 ;; Hardware stack levels used:    1
  7405 ;; Hardware stack levels required when called:    7
  7406 ;; This function calls:
  7407 ;;		_lcdInst
  7408 ;;		_lcd_shift_cursor
  7409 ;; This function is called by:
  7410 ;;		_inputEntry
  7411 ;; This function uses a non-reentrant model
  7412 ;;
  7413                           
  7414                           	psect	text13
  7415  00304C                     __ptext13:
  7416                           	opt stack 0
  7417  00304C                     _lcd_set_cursor:
  7418                           	opt stack 21
  7419                           
  7420                           ;incstack = 0
  7421                           ;lcd_set_cursor@x stored from wreg
  7422  00304C  0100               	movlb	0	; () banked
  7423  00304E  6F89               	movwf	lcd_set_cursor@x& (0+255),b
  7424                           
  7425                           ;lcd.c: 91: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  7426  003050  0E80               	movlw	128
  7427  003052  EC83  F019         	call	_lcdInst
  7428  003056  0E41               	movlw	65
  7429  003058  0100               	movlb	0	; () banked
  7430  00305A  6F87               	movwf	??_lcd_set_cursor& (0+255),b
  7431  00305C  0EEE               	movlw	238
  7432  00305E                     u8037:
  7433  00305E  2EE8               	decfsz	wreg,f,c
  7434  003060  D7FE               	bra	u8037
  7435  003062  2F87               	decfsz	??_lcd_set_cursor& (0+255),f,b
  7436  003064  D7FC               	bra	u8037
  7437  003066  F000               	nop	
  7438                           
  7439                           ;lcd.c: 92: for(unsigned char i = 0; i < y; i++){lcdInst(0xC0);;}
  7440  003068  0E00               	movlw	0
  7441  00306A  0100               	movlb	0	; () banked
  7442  00306C  6F88               	movwf	lcd_set_cursor@i& (0+255),b
  7443  00306E  D005               	goto	l272
  7444  003070                     
  7445                           ; BSR set to: 0
  7446                           
  7447                           ; BSR set to: 0
  7448  003070  0EC0               	movlw	192
  7449  003072  EC83  F019         	call	_lcdInst
  7450  003076  0100               	movlb	0	; () banked
  7451  003078  2B88               	incf	lcd_set_cursor@i& (0+255),f,b
  7452  00307A                     l272:
  7453                           
  7454                           ; BSR set to: 0
  7455                           
  7456                           ; BSR set to: 0
  7457  00307A  5186               	movf	lcd_set_cursor@y& (0+255),w,b
  7458  00307C  5D88               	subwf	lcd_set_cursor@i& (0+255),w,b
  7459  00307E  A0D8               	btfss	status,0,c
  7460  003080  D7F7               	goto	l273
  7461                           
  7462                           ; BSR set to: 0
  7463                           ;lcd.c: 93: if(x > 0){
  7464                           
  7465                           ; BSR set to: 0
  7466  003082  5189               	movf	lcd_set_cursor@x& (0+255),w,b
  7467  003084  B4D8               	btfsc	status,2,c
  7468  003086  0012               	return	
  7469                           
  7470                           ; BSR set to: 0
  7471                           ;lcd.c: 94: lcd_shift_cursor(x, 1);
  7472  003088  0E01               	movlw	1
  7473  00308A  6F83               	movwf	lcd_shift_cursor@direction& (0+255),b
  7474  00308C  5189               	movf	lcd_set_cursor@x& (0+255),w,b
  7475  00308E  EC5A  F019         	call	_lcd_shift_cursor
  7476  003092  0012               	return	
  7477  003094                     __end_of_lcd_set_cursor:
  7478                           	opt stack 0
  7479                           tosu	equ	0xFFF
  7480                           tosh	equ	0xFFE
  7481                           tosl	equ	0xFFD
  7482                           pclath	equ	0xFFA
  7483                           tblptru	equ	0xFF8
  7484                           tblptrh	equ	0xFF7
  7485                           tblptrl	equ	0xFF6
  7486                           tablat	equ	0xFF5
  7487                           prodh	equ	0xFF4
  7488                           prodl	equ	0xFF3
  7489                           intcon	equ	0xFF2
  7490                           indf0	equ	0xFEF
  7491                           postinc0	equ	0xFEE
  7492                           fsr0h	equ	0xFEA
  7493                           fsr0l	equ	0xFE9
  7494                           wreg	equ	0xFE8
  7495                           postdec1	equ	0xFE5
  7496                           plusw1	equ	0xFE3
  7497                           fsr1l	equ	0xFE1
  7498                           indf2	equ	0xFDF
  7499                           postinc2	equ	0xFDE
  7500                           postdec2	equ	0xFDD
  7501                           plusw2	equ	0xFDB
  7502                           fsr2h	equ	0xFDA
  7503                           fsr2l	equ	0xFD9
  7504                           status	equ	0xFD8
  7505                           
  7506 ;; *************** function _lcd_shift_cursor *****************
  7507 ;; Defined at:
  7508 ;;		line 98 in file "lcd.c"
  7509 ;; Parameters:    Size  Location     Type
  7510 ;;  numChars        1    wreg     unsigned char 
  7511 ;;  direction       1    3[BANK0 ] unsigned char 
  7512 ;; Auto vars:     Size  Location     Type
  7513 ;;  numChars        1    4[BANK0 ] unsigned char 
  7514 ;;  n               1    5[BANK0 ] unsigned char 
  7515 ;; Return value:  Size  Location     Type
  7516 ;;                  1    wreg      void 
  7517 ;; Registers used:
  7518 ;;		wreg, status,2, status,0, cstack
  7519 ;; Tracked objects:
  7520 ;;		On entry : 0/0
  7521 ;;		On exit  : 0/0
  7522 ;;		Unchanged: 0/0
  7523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7524 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7525 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7527 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7528 ;;Total ram usage:        3 bytes
  7529 ;; Hardware stack levels used:    1
  7530 ;; Hardware stack levels required when called:    6
  7531 ;; This function calls:
  7532 ;;		_lcdInst
  7533 ;; This function is called by:
  7534 ;;		_lcd_set_cursor
  7535 ;; This function uses a non-reentrant model
  7536 ;;
  7537                           
  7538                           	psect	text14
  7539  0032B4                     __ptext14:
  7540                           	opt stack 0
  7541  0032B4                     _lcd_shift_cursor:
  7542                           	opt stack 21
  7543                           
  7544                           ;incstack = 0
  7545                           ;lcd_shift_cursor@numChars stored from wreg
  7546  0032B4  0100               	movlb	0	; () banked
  7547  0032B6  6F84               	movwf	lcd_shift_cursor@numChars& (0+255),b
  7548                           
  7549                           ;lcd.c: 110: for(unsigned char n = numChars; n > 0; n--){
  7550  0032B8  C084  F085         	movff	lcd_shift_cursor@numChars,lcd_shift_cursor@n
  7551  0032BC  0100               	movlb	0	; () banked
  7552  0032BE  5185               	movf	lcd_shift_cursor@n& (0+255),w,b
  7553  0032C0  B4D8               	btfsc	status,2,c
  7554  0032C2  0012               	return	
  7555                           
  7556                           ; BSR set to: 0
  7557                           ;lcd.c: 111: lcdInst((unsigned char)(0x10 | (direction << 2)));
  7558                           
  7559                           ; BSR set to: 0
  7560                           
  7561                           ; BSR set to: 0
  7562  0032C4  4583               	rlncf	lcd_shift_cursor@direction& (0+255),w,b
  7563  0032C6  46E8               	rlncf	wreg,f,c
  7564  0032C8  0BFC               	andlw	252
  7565  0032CA  0910               	iorlw	16
  7566  0032CC  EC83  F019         	call	_lcdInst
  7567  0032D0  0100               	movlb	0	; () banked
  7568  0032D2  0785               	decf	lcd_shift_cursor@n& (0+255),f,b
  7569  0032D4  D7F4               	goto	L7
  7570  0032D6                     __end_of_lcd_shift_cursor:
  7571                           	opt stack 0
  7572                           tosu	equ	0xFFF
  7573                           tosh	equ	0xFFE
  7574                           tosl	equ	0xFFD
  7575                           pclath	equ	0xFFA
  7576                           tblptru	equ	0xFF8
  7577                           tblptrh	equ	0xFF7
  7578                           tblptrl	equ	0xFF6
  7579                           tablat	equ	0xFF5
  7580                           prodh	equ	0xFF4
  7581                           prodl	equ	0xFF3
  7582                           intcon	equ	0xFF2
  7583                           indf0	equ	0xFEF
  7584                           postinc0	equ	0xFEE
  7585                           fsr0h	equ	0xFEA
  7586                           fsr0l	equ	0xFE9
  7587                           wreg	equ	0xFE8
  7588                           postdec1	equ	0xFE5
  7589                           plusw1	equ	0xFE3
  7590                           fsr1l	equ	0xFE1
  7591                           indf2	equ	0xFDF
  7592                           postinc2	equ	0xFDE
  7593                           postdec2	equ	0xFDD
  7594                           plusw2	equ	0xFDB
  7595                           fsr2h	equ	0xFDA
  7596                           fsr2l	equ	0xFD9
  7597                           status	equ	0xFD8
  7598                           
  7599 ;; *************** function _hibernate *****************
  7600 ;; Defined at:
  7601 ;;		line 11 in file "menu.c"
  7602 ;; Parameters:    Size  Location     Type
  7603 ;;		None
  7604 ;; Auto vars:     Size  Location     Type
  7605 ;;  pressed         2   25[BANK0 ] int 
  7606 ;; Return value:  Size  Location     Type
  7607 ;;                  1    wreg      void 
  7608 ;; Registers used:
  7609 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7610 ;; Tracked objects:
  7611 ;;		On entry : 0/0
  7612 ;;		On exit  : 0/0
  7613 ;;		Unchanged: 0/0
  7614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7616 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7617 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7618 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7619 ;;Total ram usage:        6 bytes
  7620 ;; Hardware stack levels used:    1
  7621 ;; Hardware stack levels required when called:    7
  7622 ;; This function calls:
  7623 ;;		_pollKeypad
  7624 ;;		_printStringLCD
  7625 ;; This function is called by:
  7626 ;;		_main
  7627 ;;		_mainMenu
  7628 ;; This function uses a non-reentrant model
  7629 ;;
  7630                           
  7631                           	psect	text15
  7632  003116                     __ptext15:
  7633                           	opt stack 0
  7634  003116                     _hibernate:
  7635                           	opt stack 22
  7636                           
  7637                           ;menu.c: 12: printStringLCD("Press 1 to begin");
  7638                           
  7639                           ; BSR set to: 0
  7640                           ;incstack = 0
  7641  003116  0E01               	movlw	low STR_15
  7642  003118  0100               	movlb	0	; () banked
  7643  00311A  6F86               	movwf	printStringLCD@string& (0+255),b
  7644  00311C  0EFF               	movlw	high STR_15
  7645  00311E  6F87               	movwf	(printStringLCD@string+1)& (0+255),b
  7646  003120  ECBE  F00F         	call	_printStringLCD	;wreg free
  7647  003124                     
  7648                           ;menu.c: 15: pressed = pollKeypad();
  7649  003124  ECE0  F018         	call	_pollKeypad	;wreg free
  7650  003128  0100               	movlb	0	; () banked
  7651  00312A  6F95               	movwf	??_hibernate& (0+255),b
  7652  00312C  5195               	movf	??_hibernate& (0+255),w,b
  7653  00312E  6F99               	movwf	hibernate@pressed& (0+255),b
  7654  003130  6B9A               	clrf	(hibernate@pressed+1)& (0+255),b
  7655                           
  7656                           ; BSR set to: 0
  7657                           ;menu.c: 16: if (pressed - 48 == 1) {
  7658  003132  0ED0               	movlw	208
  7659  003134  6F95               	movwf	??_hibernate& (0+255),b
  7660  003136  0EFF               	movlw	255
  7661  003138  6F96               	movwf	(??_hibernate+1)& (0+255),b
  7662  00313A  C099  F097         	movff	hibernate@pressed,??_hibernate+2
  7663  00313E  C09A  F098         	movff	hibernate@pressed+1,??_hibernate+3
  7664  003142  5195               	movf	??_hibernate& (0+255),w,b
  7665  003144  2797               	addwf	(??_hibernate+2)& (0+255),f,b
  7666  003146  5196               	movf	(??_hibernate+1)& (0+255),w,b
  7667  003148  2398               	addwfc	(??_hibernate+3)& (0+255),f,b
  7668  00314A  0597               	decf	(??_hibernate+2)& (0+255),w,b
  7669  00314C  1198               	iorwf	(??_hibernate+3)& (0+255),w,b
  7670  00314E  B4D8               	btfsc	status,2,c
  7671  003150  0012               	return	
  7672  003152  D7E8               	goto	l353
  7673  003154                     __end_of_hibernate:
  7674                           	opt stack 0
  7675                           tosu	equ	0xFFF
  7676                           tosh	equ	0xFFE
  7677                           tosl	equ	0xFFD
  7678                           pclath	equ	0xFFA
  7679                           tblptru	equ	0xFF8
  7680                           tblptrh	equ	0xFF7
  7681                           tblptrl	equ	0xFF6
  7682                           tablat	equ	0xFF5
  7683                           prodh	equ	0xFF4
  7684                           prodl	equ	0xFF3
  7685                           intcon	equ	0xFF2
  7686                           indf0	equ	0xFEF
  7687                           postinc0	equ	0xFEE
  7688                           fsr0h	equ	0xFEA
  7689                           fsr0l	equ	0xFE9
  7690                           wreg	equ	0xFE8
  7691                           postdec1	equ	0xFE5
  7692                           plusw1	equ	0xFE3
  7693                           fsr1l	equ	0xFE1
  7694                           indf2	equ	0xFDF
  7695                           postinc2	equ	0xFDE
  7696                           postdec2	equ	0xFDD
  7697                           plusw2	equ	0xFDB
  7698                           fsr2h	equ	0xFDA
  7699                           fsr2l	equ	0xFD9
  7700                           status	equ	0xFD8
  7701                           
  7702 ;; *************** function _printStringLCD *****************
  7703 ;; Defined at:
  7704 ;;		line 7 in file "helpers.c"
  7705 ;; Parameters:    Size  Location     Type
  7706 ;;  string          2    6[BANK0 ] PTR unsigned char 
  7707 ;;		 -> STR_19(30), inputEntry@fastenerString(32), inputEntryQuestions(132), STR_16(26), 
  7708 ;;		 -> STR_15(17), errMsgs.noFasteners(32), errMsgs.tooManySpacers(32), errMsgs.tooManyWashers(32), 
  7709 ;;		 -> errMsgs.tooManyNuts(32), errMsgs.tooManyBolts(32), errMsgs.tooManyFasteners(32), errMsgs.badEntry(32), 
  7710 ;;		 -> errMsgs(224), 
  7711 ;; Auto vars:     Size  Location     Type
  7712 ;;  i               2   19[BANK0 ] int 
  7713 ;;  newlineCharI    2   17[BANK0 ] int 
  7714 ;;  newlineIndex    2   15[BANK0 ] int 
  7715 ;;  spaceIndex      2   13[BANK0 ] int 
  7716 ;;  j               2   11[BANK0 ] int 
  7717 ;; Return value:  Size  Location     Type
  7718 ;;                  1    wreg      void 
  7719 ;; Registers used:
  7720 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7721 ;; Tracked objects:
  7722 ;;		On entry : 0/0
  7723 ;;		On exit  : 0/0
  7724 ;;		Unchanged: 0/0
  7725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7726 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7727 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7728 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7729 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7730 ;;Total ram usage:       15 bytes
  7731 ;; Hardware stack levels used:    1
  7732 ;; Hardware stack levels required when called:    6
  7733 ;; This function calls:
  7734 ;;		_lcdInst
  7735 ;;		_putch
  7736 ;; This function is called by:
  7737 ;;		_hibernate
  7738 ;;		_viewLogs
  7739 ;;		_inputEntry
  7740 ;;		_mainMenu
  7741 ;;		_printErrorLCD
  7742 ;; This function uses a non-reentrant model
  7743 ;;
  7744                           
  7745                           	psect	text16
  7746  001F7C                     __ptext16:
  7747                           	opt stack 0
  7748  001F7C                     _printStringLCD:
  7749                           	opt stack 22
  7750                           
  7751                           ;helpers.c: 12: int i;
  7752                           ;helpers.c: 13: int j = 1;
  7753                           
  7754                           ; BSR set to: 0
  7755                           ;incstack = 0
  7756  001F7C  0E00               	movlw	0
  7757  001F7E  0100               	movlb	0	; () banked
  7758  001F80  6F8C               	movwf	(printStringLCD@j+1)& (0+255),b
  7759  001F82  0E01               	movlw	1
  7760  001F84  6F8B               	movwf	printStringLCD@j& (0+255),b
  7761                           
  7762                           ;helpers.c: 14: int newlineIndex = 16;
  7763  001F86  0E00               	movlw	0
  7764  001F88  6F90               	movwf	(printStringLCD@newlineIndex+1)& (0+255),b
  7765  001F8A  0E10               	movlw	16
  7766  001F8C  6F8F               	movwf	printStringLCD@newlineIndex& (0+255),b
  7767                           
  7768                           ; BSR set to: 0
  7769                           ;helpers.c: 15: int newlineCharIndex = -1;
  7770  001F8E  6991               	setf	printStringLCD@newlineCharIndex& (0+255),b
  7771  001F90  6992               	setf	(printStringLCD@newlineCharIndex+1)& (0+255),b
  7772                           
  7773                           ;helpers.c: 16: int spaceIndex = 0;
  7774  001F92  0E00               	movlw	0
  7775  001F94  6F8E               	movwf	(printStringLCD@spaceIndex+1)& (0+255),b
  7776  001F96  0E00               	movlw	0
  7777  001F98  6F8D               	movwf	printStringLCD@spaceIndex& (0+255),b
  7778                           
  7779                           ; BSR set to: 0
  7780                           ;helpers.c: 18: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  7781  001F9A  0E01               	movlw	1
  7782  001F9C  EC83  F019         	call	_lcdInst
  7783  001FA0  0EC3               	movlw	195
  7784  001FA2  0100               	movlb	0	; () banked
  7785  001FA4  6F88               	movwf	??_printStringLCD& (0+255),b
  7786  001FA6  0ECD               	movlw	205
  7787  001FA8                     u8047:
  7788  001FA8  2EE8               	decfsz	wreg,f,c
  7789  001FAA  D7FE               	bra	u8047
  7790  001FAC  2F88               	decfsz	??_printStringLCD& (0+255),f,b
  7791  001FAE  D7FC               	bra	u8047
  7792                           
  7793                           ;helpers.c: 19: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  7794  001FB0  0E80               	movlw	128
  7795  001FB2  EC83  F019         	call	_lcdInst
  7796  001FB6  0E41               	movlw	65
  7797  001FB8  0100               	movlb	0	; () banked
  7798  001FBA  6F88               	movwf	??_printStringLCD& (0+255),b
  7799  001FBC  0EEE               	movlw	238
  7800  001FBE                     u8057:
  7801  001FBE  2EE8               	decfsz	wreg,f,c
  7802  001FC0  D7FE               	bra	u8057
  7803  001FC2  2F88               	decfsz	??_printStringLCD& (0+255),f,b
  7804  001FC4  D7FC               	bra	u8057
  7805  001FC6  F000               	nop	
  7806                           
  7807                           ;helpers.c: 22: for (i = 0; i < 17; i++) {
  7808  001FC8  0E00               	movlw	0
  7809  001FCA  0100               	movlb	0	; () banked
  7810  001FCC  6F94               	movwf	(printStringLCD@i+1)& (0+255),b
  7811  001FCE  0E00               	movlw	0
  7812  001FD0  6F93               	movwf	printStringLCD@i& (0+255),b
  7813                           
  7814                           ; BSR set to: 0
  7815  001FD2  BF94               	btfsc	(printStringLCD@i+1)& (0+255),7,b
  7816  001FD4  D008               	goto	l488
  7817  001FD6  5194               	movf	(printStringLCD@i+1)& (0+255),w,b
  7818  001FD8  E105               	bnz	u6020
  7819  001FDA  0E11               	movlw	17
  7820  001FDC  5D93               	subwf	printStringLCD@i& (0+255),w,b
  7821  001FDE  B0D8               	btfsc	status,0,c
  7822  001FE0  D08D               	goto	u6130
  7823  001FE2  D001               	goto	l488
  7824  001FE4                     u6020:
  7825                           
  7826                           ; BSR set to: 0
  7827  001FE4  D08B               	goto	u6130
  7828  001FE6                     l488:
  7829                           
  7830                           ; BSR set to: 0
  7831                           ;helpers.c: 23: if (string[i] == 0) break;
  7832                           
  7833                           ; BSR set to: 0
  7834  001FE6  5193               	movf	printStringLCD@i& (0+255),w,b
  7835  001FE8  2586               	addwf	printStringLCD@string& (0+255),w,b
  7836  001FEA  6F88               	movwf	??_printStringLCD& (0+255),b
  7837  001FEC  5194               	movf	(printStringLCD@i+1)& (0+255),w,b
  7838  001FEE  2187               	addwfc	(printStringLCD@string+1)& (0+255),w,b
  7839  001FF0  6F89               	movwf	(??_printStringLCD+1)& (0+255),b
  7840  001FF2  C088  FFF6         	movff	??_printStringLCD,tblptrl
  7841  001FF6  C089  FFF7         	movff	??_printStringLCD+1,tblptrh
  7842  001FFA  0E00               	movlw	low (__mediumconst shr (0+16))
  7843  001FFC  6EF8               	movwf	tblptru,c
  7844  001FFE  0E0F               	movlw	(high __ramtop+-1)
  7845  002000  64F7               	cpfsgt	tblptrh,c
  7846  002002  D003               	bra	u6037
  7847  002004  0008               	tblrd		*
  7848  002006  50F5               	movf	tablat,w,c
  7849  002008  D005               	bra	u6030
  7850  00200A                     u6037:
  7851  00200A  CFF6 FFE9          	movff	tblptrl,fsr0l
  7852  00200E  CFF7 FFEA          	movff	tblptrh,fsr0h
  7853  002012  50EF               	movf	indf0,w,c
  7854  002014                     u6030:
  7855  002014  0900               	iorlw	0
  7856  002016  B4D8               	btfsc	status,2,c
  7857  002018  D071               	goto	u6130
  7858                           
  7859                           ;helpers.c: 24: if (string[i] == 32) {
  7860  00201A  0100               	movlb	0	; () banked
  7861  00201C  5193               	movf	printStringLCD@i& (0+255),w,b
  7862  00201E  2586               	addwf	printStringLCD@string& (0+255),w,b
  7863  002020  6F88               	movwf	??_printStringLCD& (0+255),b
  7864  002022  5194               	movf	(printStringLCD@i+1)& (0+255),w,b
  7865  002024  2187               	addwfc	(printStringLCD@string+1)& (0+255),w,b
  7866  002026  6F89               	movwf	(??_printStringLCD+1)& (0+255),b
  7867  002028  C088  FFF6         	movff	??_printStringLCD,tblptrl
  7868  00202C  C089  FFF7         	movff	??_printStringLCD+1,tblptrh
  7869  002030  0E00               	movlw	low (__mediumconst shr (0+16))
  7870  002032  6EF8               	movwf	tblptru,c
  7871  002034  0E0F               	movlw	(high __ramtop+-1)
  7872  002036  64F7               	cpfsgt	tblptrh,c
  7873  002038  D003               	bra	u6057
  7874  00203A  0008               	tblrd		*
  7875  00203C  50F5               	movf	tablat,w,c
  7876  00203E  D005               	bra	u6050
  7877  002040                     u6057:
  7878  002040  CFF6 FFE9          	movff	tblptrl,fsr0l
  7879  002044  CFF7 FFEA          	movff	tblptrh,fsr0h
  7880  002048  50EF               	movf	indf0,w,c
  7881  00204A                     u6050:
  7882  00204A  0A20               	xorlw	32
  7883  00204C  A4D8               	btfss	status,2,c
  7884  00204E  D004               	goto	l491
  7885                           
  7886                           ;helpers.c: 25: spaceIndex = i;
  7887  002050  C093  F08D         	movff	printStringLCD@i,printStringLCD@spaceIndex
  7888  002054  C094  F08E         	movff	printStringLCD@i+1,printStringLCD@spaceIndex+1
  7889  002058                     l491:
  7890                           
  7891                           ;helpers.c: 26: }
  7892                           ;helpers.c: 28: if (string[i] == 10) {
  7893  002058  0100               	movlb	0	; () banked
  7894  00205A  5193               	movf	printStringLCD@i& (0+255),w,b
  7895  00205C  2586               	addwf	printStringLCD@string& (0+255),w,b
  7896  00205E  6F88               	movwf	??_printStringLCD& (0+255),b
  7897  002060  5194               	movf	(printStringLCD@i+1)& (0+255),w,b
  7898  002062  2187               	addwfc	(printStringLCD@string+1)& (0+255),w,b
  7899  002064  6F89               	movwf	(??_printStringLCD+1)& (0+255),b
  7900  002066  C088  FFF6         	movff	??_printStringLCD,tblptrl
  7901  00206A  C089  FFF7         	movff	??_printStringLCD+1,tblptrh
  7902  00206E  0E00               	movlw	low (__mediumconst shr (0+16))
  7903  002070  6EF8               	movwf	tblptru,c
  7904  002072  0E0F               	movlw	(high __ramtop+-1)
  7905  002074  64F7               	cpfsgt	tblptrh,c
  7906  002076  D003               	bra	u6077
  7907  002078  0008               	tblrd		*
  7908  00207A  50F5               	movf	tablat,w,c
  7909  00207C  D005               	bra	u6070
  7910  00207E                     u6077:
  7911  00207E  CFF6 FFE9          	movff	tblptrl,fsr0l
  7912  002082  CFF7 FFEA          	movff	tblptrh,fsr0h
  7913  002086  50EF               	movf	indf0,w,c
  7914  002088                     u6070:
  7915  002088  0A0A               	xorlw	10
  7916  00208A  A4D8               	btfss	status,2,c
  7917  00208C  D008               	goto	l492
  7918                           
  7919                           ;helpers.c: 29: newlineCharIndex = i;
  7920  00208E  C093  F091         	movff	printStringLCD@i,printStringLCD@newlineCharIndex
  7921  002092  C094  F092         	movff	printStringLCD@i+1,printStringLCD@newlineCharIndex+1
  7922                           
  7923                           ;helpers.c: 30: newlineIndex = newlineCharIndex;
  7924  002096  C091  F08F         	movff	printStringLCD@newlineCharIndex,printStringLCD@newlineIndex
  7925  00209A  C092  F090         	movff	printStringLCD@newlineCharIndex+1,printStringLCD@newlineIndex+1
  7926  00209E                     l492:
  7927                           
  7928                           ;helpers.c: 31: }
  7929                           ;helpers.c: 34: if (i == 16 && string[i] != 32 && newlineCharIndex < 0) {
  7930  00209E  0E10               	movlw	16
  7931  0020A0  0100               	movlb	0	; () banked
  7932  0020A2  1993               	xorwf	printStringLCD@i& (0+255),w,b
  7933  0020A4  1194               	iorwf	(printStringLCD@i+1)& (0+255),w,b
  7934  0020A6  A4D8               	btfss	status,2,c
  7935  0020A8  D021               	goto	l493
  7936                           
  7937                           ; BSR set to: 0
  7938  0020AA  5193               	movf	printStringLCD@i& (0+255),w,b
  7939  0020AC  2586               	addwf	printStringLCD@string& (0+255),w,b
  7940  0020AE  6F88               	movwf	??_printStringLCD& (0+255),b
  7941  0020B0  5194               	movf	(printStringLCD@i+1)& (0+255),w,b
  7942  0020B2  2187               	addwfc	(printStringLCD@string+1)& (0+255),w,b
  7943  0020B4  6F89               	movwf	(??_printStringLCD+1)& (0+255),b
  7944  0020B6  C088  FFF6         	movff	??_printStringLCD,tblptrl
  7945  0020BA  C089  FFF7         	movff	??_printStringLCD+1,tblptrh
  7946  0020BE  0E00               	movlw	low (__mediumconst shr (0+16))
  7947  0020C0  6EF8               	movwf	tblptru,c
  7948  0020C2  0E0F               	movlw	(high __ramtop+-1)
  7949  0020C4  64F7               	cpfsgt	tblptrh,c
  7950  0020C6  D003               	bra	u6107
  7951  0020C8  0008               	tblrd		*
  7952  0020CA  50F5               	movf	tablat,w,c
  7953  0020CC  D005               	bra	u6100
  7954  0020CE                     u6107:
  7955  0020CE  CFF6 FFE9          	movff	tblptrl,fsr0l
  7956  0020D2  CFF7 FFEA          	movff	tblptrh,fsr0h
  7957  0020D6  50EF               	movf	indf0,w,c
  7958  0020D8                     u6100:
  7959  0020D8  0A20               	xorlw	32
  7960  0020DA  B4D8               	btfsc	status,2,c
  7961  0020DC  D007               	goto	l493
  7962  0020DE  0100               	movlb	0	; () banked
  7963  0020E0  AF92               	btfss	(printStringLCD@newlineCharIndex+1)& (0+255),7,b
  7964  0020E2  D004               	goto	l493
  7965                           
  7966                           ; BSR set to: 0
  7967                           ;helpers.c: 35: newlineIndex = spaceIndex;
  7968  0020E4  C08D  F08F         	movff	printStringLCD@spaceIndex,printStringLCD@newlineIndex
  7969  0020E8  C08E  F090         	movff	printStringLCD@spaceIndex+1,printStringLCD@newlineIndex+1
  7970  0020EC                     l493:
  7971                           
  7972                           ; BSR set to: 0
  7973  0020EC  0100               	movlb	0	; () banked
  7974  0020EE  4B93               	infsnz	printStringLCD@i& (0+255),f,b
  7975  0020F0  2B94               	incf	(printStringLCD@i+1)& (0+255),f,b
  7976                           
  7977                           ; BSR set to: 0
  7978  0020F2  BF94               	btfsc	(printStringLCD@i+1)& (0+255),7,b
  7979  0020F4  D778               	goto	l488
  7980  0020F6  5194               	movf	(printStringLCD@i+1)& (0+255),w,b
  7981  0020F8  E101               	bnz	l5238
  7982  0020FA  D76F               	goto	L8
  7983  0020FC                     u6130:
  7984  0020FC                     l5238:
  7985                           
  7986                           ;helpers.c: 36: }
  7987                           ;helpers.c: 37: }
  7988                           ;helpers.c: 40: for (i = 0; i < 32; i++) {
  7989  0020FC  0E00               	movlw	0
  7990  0020FE  0100               	movlb	0	; () banked
  7991  002100  6F94               	movwf	(printStringLCD@i+1)& (0+255),b
  7992  002102  0E00               	movlw	0
  7993  002104  6F93               	movwf	printStringLCD@i& (0+255),b
  7994                           
  7995                           ; BSR set to: 0
  7996  002106  BF94               	btfsc	(printStringLCD@i+1)& (0+255),7,b
  7997  002108  D008               	goto	l494
  7998  00210A  5194               	movf	(printStringLCD@i+1)& (0+255),w,b
  7999  00210C  E105               	bnz	u6140
  8000  00210E  0E20               	movlw	32
  8001  002110  5D93               	subwf	printStringLCD@i& (0+255),w,b
  8002  002112  B0D8               	btfsc	status,0,c
  8003  002114  0012               	return	
  8004  002116  D001               	goto	l494
  8005  002118                     u6140:
  8006                           
  8007                           ; BSR set to: 0
  8008  002118  0012               	return	
  8009  00211A                     l494:
  8010                           
  8011                           ; BSR set to: 0
  8012                           ;helpers.c: 41: if (string[i] == 0) break;
  8013                           
  8014                           ; BSR set to: 0
  8015  00211A  5193               	movf	printStringLCD@i& (0+255),w,b
  8016  00211C  2586               	addwf	printStringLCD@string& (0+255),w,b
  8017  00211E  6F88               	movwf	??_printStringLCD& (0+255),b
  8018  002120  5194               	movf	(printStringLCD@i+1)& (0+255),w,b
  8019  002122  2187               	addwfc	(printStringLCD@string+1)& (0+255),w,b
  8020  002124  6F89               	movwf	(??_printStringLCD+1)& (0+255),b
  8021  002126  C088  FFF6         	movff	??_printStringLCD,tblptrl
  8022  00212A  C089  FFF7         	movff	??_printStringLCD+1,tblptrh
  8023  00212E  0E00               	movlw	low (__mediumconst shr (0+16))
  8024  002130  6EF8               	movwf	tblptru,c
  8025  002132  0E0F               	movlw	(high __ramtop+-1)
  8026  002134  64F7               	cpfsgt	tblptrh,c
  8027  002136  D003               	bra	u6157
  8028  002138  0008               	tblrd		*
  8029  00213A  50F5               	movf	tablat,w,c
  8030  00213C  D005               	bra	u6150
  8031  00213E                     u6157:
  8032  00213E  CFF6 FFE9          	movff	tblptrl,fsr0l
  8033  002142  CFF7 FFEA          	movff	tblptrh,fsr0h
  8034  002146  50EF               	movf	indf0,w,c
  8035  002148                     u6150:
  8036  002148  0900               	iorlw	0
  8037  00214A  B4D8               	btfsc	status,2,c
  8038  00214C  0012               	return	
  8039                           
  8040                           ;helpers.c: 52: if (i == newlineIndex && j < LCD_SIZE_VERT) {
  8041  00214E  0100               	movlb	0	; () banked
  8042  002150  518F               	movf	printStringLCD@newlineIndex& (0+255),w,b
  8043  002152  1993               	xorwf	printStringLCD@i& (0+255),w,b
  8044  002154  E153               	bnz	l5260
  8045  002156  5190               	movf	(printStringLCD@newlineIndex+1)& (0+255),w,b
  8046  002158  1994               	xorwf	(printStringLCD@i+1)& (0+255),w,b
  8047  00215A  A4D8               	btfss	status,2,c
  8048  00215C  D04F               	goto	l498
  8049                           
  8050                           ; BSR set to: 0
  8051  00215E  0E42               	movlw	low _LCD_SIZE_VERT
  8052  002160  6EF6               	movwf	tblptrl,c
  8053  002162                     	if	1	;There is more than 1 active tblptr byte
  8054  002162  0EFC               	movlw	high _LCD_SIZE_VERT
  8055  002164  6EF7               	movwf	tblptrh,c
  8056  002166                     	endif
  8057  002166                     	if	1	;There are 3 active tblptr bytes
  8058  002166  0E00               	movlw	low (_LCD_SIZE_VERT shr (0+16))
  8059  002168  6EF8               	movwf	tblptru,c
  8060  00216A                     	endif
  8061  00216A  0008               	tblrd		*
  8062  00216C  50F5               	movf	tablat,w,c
  8063  00216E  6F88               	movwf	??_printStringLCD& (0+255),b
  8064  002170  6B89               	clrf	(??_printStringLCD+1)& (0+255),b
  8065  002172  5188               	movf	??_printStringLCD& (0+255),w,b
  8066  002174  5D8B               	subwf	printStringLCD@j& (0+255),w,b
  8067  002176  518C               	movf	(printStringLCD@j+1)& (0+255),w,b
  8068  002178  0A80               	xorlw	128
  8069  00217A  6F8A               	movwf	(??_printStringLCD+2)& (0+255),b
  8070  00217C  5189               	movf	(??_printStringLCD+1)& (0+255),w,b
  8071  00217E  0A80               	xorlw	128
  8072  002180  598A               	subwfb	(??_printStringLCD+2)& (0+255),w,b
  8073  002182  B0D8               	btfsc	status,0,c
  8074  002184  D03B               	goto	l498
  8075                           
  8076                           ; BSR set to: 0
  8077                           ;helpers.c: 53: j++;
  8078  002186  4B8B               	infsnz	printStringLCD@j& (0+255),f,b
  8079  002188  2B8C               	incf	(printStringLCD@j+1)& (0+255),f,b
  8080                           
  8081                           ; BSR set to: 0
  8082                           ;helpers.c: 54: lcdInst(0xC0);;
  8083  00218A  0EC0               	movlw	192
  8084  00218C  EC83  F019         	call	_lcdInst
  8085                           
  8086                           ;helpers.c: 55: if (string[i] == 32 || string[i] == 10) continue;
  8087  002190  0100               	movlb	0	; () banked
  8088  002192  5193               	movf	printStringLCD@i& (0+255),w,b
  8089  002194  2586               	addwf	printStringLCD@string& (0+255),w,b
  8090  002196  6F88               	movwf	??_printStringLCD& (0+255),b
  8091  002198  5194               	movf	(printStringLCD@i+1)& (0+255),w,b
  8092  00219A  2187               	addwfc	(printStringLCD@string+1)& (0+255),w,b
  8093  00219C  6F89               	movwf	(??_printStringLCD+1)& (0+255),b
  8094  00219E  C088  FFF6         	movff	??_printStringLCD,tblptrl
  8095  0021A2  C089  FFF7         	movff	??_printStringLCD+1,tblptrh
  8096  0021A6  0E00               	movlw	low (__mediumconst shr (0+16))
  8097  0021A8  6EF8               	movwf	tblptru,c
  8098  0021AA  0E0F               	movlw	(high __ramtop+-1)
  8099  0021AC  64F7               	cpfsgt	tblptrh,c
  8100  0021AE  D003               	bra	u6197
  8101  0021B0  0008               	tblrd		*
  8102  0021B2  50F5               	movf	tablat,w,c
  8103  0021B4  D005               	bra	u6190
  8104  0021B6                     u6197:
  8105  0021B6  CFF6 FFE9          	movff	tblptrl,fsr0l
  8106  0021BA  CFF7 FFEA          	movff	tblptrh,fsr0h
  8107  0021BE  50EF               	movf	indf0,w,c
  8108  0021C0                     u6190:
  8109  0021C0  0A20               	xorlw	32
  8110  0021C2  B4D8               	btfsc	status,2,c
  8111  0021C4  D035               	goto	l501
  8112  0021C6  0100               	movlb	0	; () banked
  8113  0021C8  5193               	movf	printStringLCD@i& (0+255),w,b
  8114  0021CA  2586               	addwf	printStringLCD@string& (0+255),w,b
  8115  0021CC  6F88               	movwf	??_printStringLCD& (0+255),b
  8116  0021CE  5194               	movf	(printStringLCD@i+1)& (0+255),w,b
  8117  0021D0  2187               	addwfc	(printStringLCD@string+1)& (0+255),w,b
  8118  0021D2  6F89               	movwf	(??_printStringLCD+1)& (0+255),b
  8119  0021D4  C088  FFF6         	movff	??_printStringLCD,tblptrl
  8120  0021D8  C089  FFF7         	movff	??_printStringLCD+1,tblptrh
  8121  0021DC  0E00               	movlw	low (__mediumconst shr (0+16))
  8122  0021DE  6EF8               	movwf	tblptru,c
  8123  0021E0  0E0F               	movlw	(high __ramtop+-1)
  8124  0021E2  64F7               	cpfsgt	tblptrh,c
  8125  0021E4  D003               	bra	u6217
  8126  0021E6  0008               	tblrd		*
  8127  0021E8  50F5               	movf	tablat,w,c
  8128  0021EA  D005               	bra	u6210
  8129  0021EC                     u6217:
  8130  0021EC  CFF6 FFE9          	movff	tblptrl,fsr0l
  8131  0021F0  CFF7 FFEA          	movff	tblptrh,fsr0h
  8132  0021F4  50EF               	movf	indf0,w,c
  8133  0021F6                     u6210:
  8134  0021F6  0A0A               	xorlw	10
  8135  0021F8  B4D8               	btfsc	status,2,c
  8136  0021FA  D01A               	goto	l501
  8137  0021FC                     l498:
  8138  0021FC                     l5260:
  8139                           
  8140                           ;helpers.c: 56: }
  8141                           ;helpers.c: 58: putch(string[i]);
  8142  0021FC  0100               	movlb	0	; () banked
  8143  0021FE  5193               	movf	printStringLCD@i& (0+255),w,b
  8144  002200  2586               	addwf	printStringLCD@string& (0+255),w,b
  8145  002202  6F88               	movwf	??_printStringLCD& (0+255),b
  8146  002204  5194               	movf	(printStringLCD@i+1)& (0+255),w,b
  8147  002206  2187               	addwfc	(printStringLCD@string+1)& (0+255),w,b
  8148  002208  6F89               	movwf	(??_printStringLCD+1)& (0+255),b
  8149  00220A  C088  FFF6         	movff	??_printStringLCD,tblptrl
  8150  00220E  C089  FFF7         	movff	??_printStringLCD+1,tblptrh
  8151  002212  0E00               	movlw	low (__mediumconst shr (0+16))
  8152  002214  6EF8               	movwf	tblptru,c
  8153  002216  0E0F               	movlw	(high __ramtop+-1)
  8154  002218  64F7               	cpfsgt	tblptrh,c
  8155  00221A  D003               	bra	u6237
  8156  00221C  0008               	tblrd		*
  8157  00221E  50F5               	movf	tablat,w,c
  8158  002220  D005               	bra	u6230
  8159  002222                     u6237:
  8160  002222  CFF6 FFE9          	movff	tblptrl,fsr0l
  8161  002226  CFF7 FFEA          	movff	tblptrh,fsr0h
  8162  00222A  50EF               	movf	indf0,w,c
  8163  00222C                     u6230:
  8164  00222C  EC77  F019         	call	_putch
  8165  002230                     l501:
  8166  002230  0100               	movlb	0	; () banked
  8167  002232  4B93               	infsnz	printStringLCD@i& (0+255),f,b
  8168  002234  2B94               	incf	(printStringLCD@i+1)& (0+255),f,b
  8169                           
  8170                           ; BSR set to: 0
  8171  002236  BF94               	btfsc	(printStringLCD@i+1)& (0+255),7,b
  8172  002238  D770               	goto	l494
  8173  00223A  5194               	movf	(printStringLCD@i+1)& (0+255),w,b
  8174  00223C  E101               	bnz	l502
  8175  00223E  D767               	goto	L9
  8176  002240                     l502:
  8177  002240  0012               	return		;funcret
  8178  002242                     __end_of_printStringLCD:
  8179                           	opt stack 0
  8180                           tosu	equ	0xFFF
  8181                           tosh	equ	0xFFE
  8182                           tosl	equ	0xFFD
  8183                           pclath	equ	0xFFA
  8184                           tblptru	equ	0xFF8
  8185                           tblptrh	equ	0xFF7
  8186                           tblptrl	equ	0xFF6
  8187                           tablat	equ	0xFF5
  8188                           prodh	equ	0xFF4
  8189                           prodl	equ	0xFF3
  8190                           intcon	equ	0xFF2
  8191                           indf0	equ	0xFEF
  8192                           postinc0	equ	0xFEE
  8193                           fsr0h	equ	0xFEA
  8194                           fsr0l	equ	0xFE9
  8195                           wreg	equ	0xFE8
  8196                           postdec1	equ	0xFE5
  8197                           plusw1	equ	0xFE3
  8198                           fsr1l	equ	0xFE1
  8199                           indf2	equ	0xFDF
  8200                           postinc2	equ	0xFDE
  8201                           postdec2	equ	0xFDD
  8202                           plusw2	equ	0xFDB
  8203                           fsr2h	equ	0xFDA
  8204                           fsr2l	equ	0xFD9
  8205                           status	equ	0xFD8
  8206                           
  8207 ;; *************** function _putch *****************
  8208 ;; Defined at:
  8209 ;;		line 25 in file "lcd.c"
  8210 ;; Parameters:    Size  Location     Type
  8211 ;;  data            1    wreg     unsigned char 
  8212 ;; Auto vars:     Size  Location     Type
  8213 ;;  data            1    2[BANK0 ] unsigned char 
  8214 ;; Return value:  Size  Location     Type
  8215 ;;                  1    wreg      void 
  8216 ;; Registers used:
  8217 ;;		wreg, status,2, status,0, cstack
  8218 ;; Tracked objects:
  8219 ;;		On entry : 0/0
  8220 ;;		On exit  : 0/0
  8221 ;;		Unchanged: 0/0
  8222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8224 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8226 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8227 ;;Total ram usage:        1 bytes
  8228 ;; Hardware stack levels used:    1
  8229 ;; Hardware stack levels required when called:    5
  8230 ;; This function calls:
  8231 ;;		_lcdNibble
  8232 ;; This function is called by:
  8233 ;;		_inputEntry
  8234 ;;		_mainMenu
  8235 ;;		_printStringLCD
  8236 ;;		_printf
  8237 ;;		__doprnt
  8238 ;; This function uses a non-reentrant model
  8239 ;;
  8240                           
  8241                           	psect	text17
  8242  0032EE                     __ptext17:
  8243                           	opt stack 0
  8244  0032EE                     _putch:
  8245                           	opt stack 22
  8246                           
  8247                           ;incstack = 0
  8248                           ;putch@data stored from wreg
  8249  0032EE  0100               	movlb	0	; () banked
  8250  0032F0  6F82               	movwf	putch@data& (0+255),b
  8251                           
  8252                           ;lcd.c: 33: LATDbits.LATD2 = 1;
  8253  0032F2  848C               	bsf	3980,2,c	;volatile
  8254                           
  8255                           ;lcd.c: 34: lcdNibble(data);
  8256  0032F4  0100               	movlb	0	; () banked
  8257  0032F6  5182               	movf	putch@data& (0+255),w,b
  8258  0032F8  ECA5  F016         	call	_lcdNibble
  8259                           
  8260                           ;lcd.c: 35: _delay((unsigned long)((100)*(40000000/4000000.0)));
  8261  0032FC  0EC8               	movlw	200
  8262  0032FE                     u8067:
  8263  0032FE  D000               	nop2	
  8264  003300  2EE8               	decfsz	wreg,f,c
  8265  003302  D7FD               	bra	u8067
  8266  003304  0012               	return		;funcret
  8267  003306                     __end_of_putch:
  8268                           	opt stack 0
  8269                           tosu	equ	0xFFF
  8270                           tosh	equ	0xFFE
  8271                           tosl	equ	0xFFD
  8272                           pclath	equ	0xFFA
  8273                           tblptru	equ	0xFF8
  8274                           tblptrh	equ	0xFF7
  8275                           tblptrl	equ	0xFF6
  8276                           tablat	equ	0xFF5
  8277                           prodh	equ	0xFF4
  8278                           prodl	equ	0xFF3
  8279                           intcon	equ	0xFF2
  8280                           indf0	equ	0xFEF
  8281                           postinc0	equ	0xFEE
  8282                           fsr0h	equ	0xFEA
  8283                           fsr0l	equ	0xFE9
  8284                           wreg	equ	0xFE8
  8285                           postdec1	equ	0xFE5
  8286                           plusw1	equ	0xFE3
  8287                           fsr1l	equ	0xFE1
  8288                           indf2	equ	0xFDF
  8289                           postinc2	equ	0xFDE
  8290                           postdec2	equ	0xFDD
  8291                           plusw2	equ	0xFDB
  8292                           fsr2h	equ	0xFDA
  8293                           fsr2l	equ	0xFD9
  8294                           status	equ	0xFD8
  8295                           
  8296 ;; *************** function _pollKeypad *****************
  8297 ;; Defined at:
  8298 ;;		line 68 in file "helpers.c"
  8299 ;; Parameters:    Size  Location     Type
  8300 ;;		None
  8301 ;; Auto vars:     Size  Location     Type
  8302 ;;  keypress        1    0[BANK0 ] unsigned char 
  8303 ;; Return value:  Size  Location     Type
  8304 ;;                  1    wreg      unsigned char 
  8305 ;; Registers used:
  8306 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  8307 ;; Tracked objects:
  8308 ;;		On entry : 0/0
  8309 ;;		On exit  : 0/0
  8310 ;;		Unchanged: 0/0
  8311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8313 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8315 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8316 ;;Total ram usage:        1 bytes
  8317 ;; Hardware stack levels used:    1
  8318 ;; Hardware stack levels required when called:    4
  8319 ;; This function calls:
  8320 ;;		Nothing
  8321 ;; This function is called by:
  8322 ;;		_hibernate
  8323 ;;		_viewLogs
  8324 ;;		_inputEntry
  8325 ;;		_mainMenu
  8326 ;; This function uses a non-reentrant model
  8327 ;;
  8328                           
  8329                           	psect	text18
  8330  0031C0                     __ptext18:
  8331                           	opt stack 0
  8332  0031C0                     _pollKeypad:
  8333                           	opt stack 24
  8334                           
  8335                           ;helpers.c: 70: while (PORTBbits.RB1 == 0) {continue;}
  8336                           
  8337                           ;incstack = 0
  8338  0031C0  A281               	btfss	3969,1,c	;volatile
  8339  0031C2  D7FE               	goto	_pollKeypad
  8340                           
  8341                           ;helpers.c: 73: unsigned char keypress = (unsigned char)(PORTB & 0xF0) >> 4;
  8342  0031C4  3881               	swapf	3969,w,c	;volatile
  8343  0031C6  0B0F               	andlw	15
  8344  0031C8  0B0F               	andlw	15
  8345  0031CA  0100               	movlb	0	; () banked
  8346  0031CC  6F80               	movwf	pollKeypad@keypress& (0+255),b
  8347  0031CE                     
  8348                           ; BSR set to: 0
  8349  0031CE  B281               	btfsc	3969,1,c	;volatile
  8350  0031D0  D7FE               	goto	l512
  8351                           
  8352                           ;helpers.c: 78: __nop();
  8353  0031D2  F000               	nop	
  8354                           
  8355                           ;helpers.c: 80: return keypadChars[keypress];
  8356  0031D4  0100               	movlb	0	; () banked
  8357  0031D6  5180               	movf	pollKeypad@keypress& (0+255),w,b
  8358  0031D8  0D01               	mullw	1
  8359  0031DA  0E19               	movlw	low _keypadChars
  8360  0031DC  24F3               	addwf	prodl,w,c
  8361  0031DE  6EF6               	movwf	tblptrl,c
  8362  0031E0  0EFC               	movlw	high _keypadChars
  8363  0031E2  20F4               	addwfc	prodh,w,c
  8364  0031E4  6EF7               	movwf	tblptrh,c
  8365  0031E6                     	if	1	;There are 3 active tblptr bytes
  8366  0031E6  6AF8               	clrf	tblptru,c
  8367  0031E8  0E00               	movlw	low (__mediumconst shr (0+16))
  8368  0031EA  22F8               	addwfc	tblptru,f,c
  8369  0031EC                     	endif
  8370  0031EC  0008               	tblrd		*
  8371  0031EE  50F5               	movf	tablat,w,c
  8372  0031F0  0012               	return	
  8373  0031F2                     __end_of_pollKeypad:
  8374                           	opt stack 0
  8375                           tosu	equ	0xFFF
  8376                           tosh	equ	0xFFE
  8377                           tosl	equ	0xFFD
  8378                           pclath	equ	0xFFA
  8379                           tblptru	equ	0xFF8
  8380                           tblptrh	equ	0xFF7
  8381                           tblptrl	equ	0xFF6
  8382                           tablat	equ	0xFF5
  8383                           prodh	equ	0xFF4
  8384                           prodl	equ	0xFF3
  8385                           intcon	equ	0xFF2
  8386                           indf0	equ	0xFEF
  8387                           postinc0	equ	0xFEE
  8388                           fsr0h	equ	0xFEA
  8389                           fsr0l	equ	0xFE9
  8390                           wreg	equ	0xFE8
  8391                           postdec1	equ	0xFE5
  8392                           plusw1	equ	0xFE3
  8393                           fsr1l	equ	0xFE1
  8394                           indf2	equ	0xFDF
  8395                           postinc2	equ	0xFDE
  8396                           postdec2	equ	0xFDD
  8397                           plusw2	equ	0xFDB
  8398                           fsr2h	equ	0xFDA
  8399                           fsr2l	equ	0xFD9
  8400                           status	equ	0xFD8
  8401                           
  8402 ;; *************** function _clearing *****************
  8403 ;; Defined at:
  8404 ;;		line 163 in file "main.c"
  8405 ;; Parameters:    Size  Location     Type
  8406 ;;		None
  8407 ;; Auto vars:     Size  Location     Type
  8408 ;;  startTime       4    0        long 
  8409 ;;  currTime        3   39[BANK0 ] long 
  8410 ;;  debounceTime    3   36[BANK0 ] long 
  8411 ;;  spinTime        3   33[BANK0 ] long 
  8412 ;;  instr           2   31[BANK0 ] unsigned char [2]
  8413 ;;  i               2    0        int 
  8414 ;; Return value:  Size  Location     Type
  8415 ;;                  1    wreg      void 
  8416 ;; Registers used:
  8417 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8418 ;; Tracked objects:
  8419 ;;		On entry : 0/0
  8420 ;;		On exit  : 0/0
  8421 ;;		Unchanged: 0/0
  8422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8424 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8425 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8426 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8427 ;;Total ram usage:       13 bytes
  8428 ;; Hardware stack levels used:    1
  8429 ;; Hardware stack levels required when called:    7
  8430 ;; This function calls:
  8431 ;;		_I2C_Send
  8432 ;;		___ftadd
  8433 ;;		___ftge
  8434 ;;		_motorControl
  8435 ;;		_tic
  8436 ;;		_tock
  8437 ;; This function is called by:
  8438 ;;		_mainMenu
  8439 ;; This function uses a non-reentrant model
  8440 ;;
  8441                           
  8442                           	psect	text19
  8443  000766                     __ptext19:
  8444                           	opt stack 0
  8445  000766                     _clearing:
  8446                           	opt stack 22
  8447                           
  8448                           ;main.c: 164: currentMode = WAITING;
  8449                           
  8450                           ; BSR set to: 0
  8451                           ;incstack = 0
  8452  000766  0E00               	movlw	0
  8453  000768  6E49               	movwf	_currentMode+1,c
  8454  00076A  0E04               	movlw	4
  8455  00076C  6E48               	movwf	_currentMode,c
  8456                           
  8457                           ;main.c: 169: char instr[] = {3, 0};
  8458  00076E  C061  F09F         	movff	clearing@F3240,clearing@instr
  8459  000772  C062  F0A0         	movff	clearing@F3240+1,clearing@instr+1
  8460                           
  8461                           ;main.c: 170: I2C_Send(nanoAddr, instr);
  8462  000776  0E9F               	movlw	low clearing@instr
  8463  000778  0100               	movlb	0	; () banked
  8464  00077A  6F83               	movwf	I2C_Send@data& (0+255),b
  8465  00077C  0E00               	movlw	high clearing@instr
  8466  00077E  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  8467  000780  0E3F               	movlw	low _nanoAddr
  8468  000782  6EF6               	movwf	tblptrl,c
  8469  000784                     	if	1	;There is more than 1 active tblptr byte
  8470  000784  0EFC               	movlw	high _nanoAddr
  8471  000786  6EF7               	movwf	tblptrh,c
  8472  000788                     	endif
  8473  000788                     	if	1	;There are 3 active tblptr bytes
  8474  000788  0E00               	movlw	low (_nanoAddr shr (0+16))
  8475  00078A  6EF8               	movwf	tblptru,c
  8476  00078C                     	endif
  8477  00078C  0008               	tblrd		*
  8478  00078E  50F5               	movf	tablat,w,c
  8479  000790  EC83  F015         	call	_I2C_Send
  8480  000794  BA80               	btfsc	3968,5,c	;volatile
  8481  000796  D7FE               	goto	l141
  8482                           
  8483                           ;main.c: 173: int i;
  8484                           ;main.c: 174: double spinTime=15.0;
  8485  000798  0E00               	movlw	0
  8486  00079A  0100               	movlb	0	; () banked
  8487  00079C  6FA1               	movwf	clearing@spinTime& (0+255),b
  8488  00079E  0E70               	movlw	112
  8489  0007A0  6FA2               	movwf	(clearing@spinTime+1)& (0+255),b
  8490  0007A2  0E41               	movlw	65
  8491  0007A4  6FA3               	movwf	(clearing@spinTime+2)& (0+255),b
  8492                           
  8493                           ;main.c: 175: long startTime;
  8494                           ;main.c: 176: double currTime, debounceTime=0;
  8495  0007A6  0E00               	movlw	0
  8496  0007A8  6FA4               	movwf	clearing@debounceTime& (0+255),b
  8497  0007AA  0E00               	movlw	0
  8498  0007AC  6FA5               	movwf	(clearing@debounceTime+1)& (0+255),b
  8499  0007AE  0E00               	movlw	0
  8500  0007B0  6FA6               	movwf	(clearing@debounceTime+2)& (0+255),b
  8501                           
  8502                           ;main.c: 178: extras.b = 0;
  8503  0007B2  0E00               	movlw	0
  8504  0007B4  6FE5               	movwf	(_extras+1)& (0+255),b
  8505  0007B6  0E00               	movlw	0
  8506  0007B8  6FE4               	movwf	_extras& (0+255),b
  8507                           
  8508                           ;main.c: 179: extras.n = 0;
  8509  0007BA  0E00               	movlw	0
  8510  0007BC  6FE7               	movwf	(_extras+3)& (0+255),b
  8511  0007BE  0E00               	movlw	0
  8512  0007C0  6FE6               	movwf	(_extras+2)& (0+255),b
  8513                           
  8514                           ;main.c: 180: extras.s = 0;
  8515  0007C2  0E00               	movlw	0
  8516  0007C4  6FE9               	movwf	(_extras+5)& (0+255),b
  8517  0007C6  0E00               	movlw	0
  8518  0007C8  6FE8               	movwf	(_extras+4)& (0+255),b
  8519                           
  8520                           ;main.c: 181: extras.w = 0;
  8521  0007CA  0E00               	movlw	0
  8522  0007CC  6FEB               	movwf	(_extras+7)& (0+255),b
  8523  0007CE  0E00               	movlw	0
  8524  0007D0  6FEA               	movwf	(_extras+6)& (0+255),b
  8525                           
  8526                           ; BSR set to: 0
  8527                           ;main.c: 183: tic();
  8528  0007D2  ECB2  F019         	call	_tic	;wreg free
  8529                           
  8530                           ;main.c: 185: currentMode = CLEARING;
  8531  0007D6  0E00               	movlw	0
  8532  0007D8  6E49               	movwf	_currentMode+1,c
  8533  0007DA  0E03               	movlw	3
  8534  0007DC  6E48               	movwf	_currentMode,c
  8535                           
  8536                           ;main.c: 186: motorControl(BOLT, FORWARD);
  8537  0007DE  0E00               	movlw	0
  8538  0007E0  0100               	movlb	0	; () banked
  8539  0007E2  6F80               	movwf	motorControl@dir& (0+255),b
  8540  0007E4  0E00               	movlw	0
  8541  0007E6  EC66  F013         	call	_motorControl
  8542                           
  8543                           ;main.c: 187: while (extras.b + dispensed.b < 20) {
  8544  0007EA  D051               	goto	l146
  8545  0007EC                     
  8546                           ;main.c: 188: currTime = tock();
  8547  0007EC  ECAB  F019         	call	_tock	;wreg free
  8548  0007F0  C080  F0A7         	movff	?_tock,clearing@currTime
  8549  0007F4  C081  F0A8         	movff	?_tock+1,clearing@currTime+1
  8550  0007F8  C082  F0A9         	movff	?_tock+2,clearing@currTime+2
  8551                           
  8552                           ;main.c: 189: if (PORTAbits.RA3 == 0 && currTime > debounceTime + 1) {
  8553  0007FC  B680               	btfsc	3968,3,c	;volatile
  8554  0007FE  D036               	goto	l145
  8555  000800  0E00               	movlw	0
  8556  000802  0100               	movlb	0	; () banked
  8557  000804  6F8B               	movwf	___ftadd@f2& (0+255),b
  8558  000806  0E80               	movlw	128
  8559  000808  6F8C               	movwf	(___ftadd@f2+1)& (0+255),b
  8560  00080A  0E3F               	movlw	63
  8561  00080C  6F8D               	movwf	(___ftadd@f2+2)& (0+255),b
  8562  00080E  C0A4  F088         	movff	clearing@debounceTime,___ftadd@f1
  8563  000812  C0A5  F089         	movff	clearing@debounceTime+1,___ftadd@f1+1
  8564  000816  C0A6  F08A         	movff	clearing@debounceTime+2,___ftadd@f1+2
  8565  00081A  EC21  F011         	call	___ftadd	;wreg free
  8566  00081E  C088  F094         	movff	?___ftadd,___ftge@ff1
  8567  000822  C089  F095         	movff	?___ftadd+1,___ftge@ff1+1
  8568  000826  C08A  F096         	movff	?___ftadd+2,___ftge@ff1+2
  8569  00082A  C0A7  F097         	movff	clearing@currTime,___ftge@ff2
  8570  00082E  C0A8  F098         	movff	clearing@currTime+1,___ftge@ff2+1
  8571  000832  C0A9  F099         	movff	clearing@currTime+2,___ftge@ff2+2
  8572  000836  ECD3  F015         	call	___ftge	;wreg free
  8573  00083A  0100               	movlb	0	; () banked
  8574  00083C  B0D8               	btfsc	status,0,c
  8575  00083E  D016               	goto	l145
  8576                           
  8577                           ; BSR set to: 0
  8578                           ;main.c: 190: debounceTime = currTime;
  8579  000840  C0A7  F0A4         	movff	clearing@currTime,clearing@debounceTime
  8580  000844  C0A8  F0A5         	movff	clearing@currTime+1,clearing@debounceTime+1
  8581  000848  C0A9  F0A6         	movff	clearing@currTime+2,clearing@debounceTime+2
  8582                           
  8583                           ; BSR set to: 0
  8584                           ;main.c: 191: extras.b++;
  8585  00084C  4BE4               	infsnz	_extras& (0+255),f,b
  8586  00084E  2BE5               	incf	(_extras+1)& (0+255),f,b
  8587                           
  8588                           ; BSR set to: 0
  8589                           ;main.c: 192: I2C_Send(nanoAddr, "\1Bolt counted\0");
  8590  000850  0E86               	movlw	low STR_11
  8591  000852  6F83               	movwf	I2C_Send@data& (0+255),b
  8592  000854  0EFF               	movlw	high STR_11
  8593  000856  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  8594  000858  0E3F               	movlw	low _nanoAddr
  8595  00085A  6EF6               	movwf	tblptrl,c
  8596  00085C                     	if	1	;There is more than 1 active tblptr byte
  8597  00085C  0EFC               	movlw	high _nanoAddr
  8598  00085E  6EF7               	movwf	tblptrh,c
  8599  000860                     	endif
  8600  000860                     	if	1	;There are 3 active tblptr bytes
  8601  000860  0E00               	movlw	low (_nanoAddr shr (0+16))
  8602  000862  6EF8               	movwf	tblptru,c
  8603  000864                     	endif
  8604  000864  0008               	tblrd		*
  8605  000866  50F5               	movf	tablat,w,c
  8606  000868  EC83  F015         	call	_I2C_Send
  8607  00086C                     l145:
  8608                           
  8609                           ;main.c: 193: }
  8610                           ;main.c: 195: if (currTime >= spinTime) break;
  8611  00086C  C0A7  F094         	movff	clearing@currTime,___ftge@ff1
  8612  000870  C0A8  F095         	movff	clearing@currTime+1,___ftge@ff1+1
  8613  000874  C0A9  F096         	movff	clearing@currTime+2,___ftge@ff1+2
  8614  000878  C0A1  F097         	movff	clearing@spinTime,___ftge@ff2
  8615  00087C  C0A2  F098         	movff	clearing@spinTime+1,___ftge@ff2+1
  8616  000880  C0A3  F099         	movff	clearing@spinTime+2,___ftge@ff2+2
  8617  000884  ECD3  F015         	call	___ftge	;wreg free
  8618  000888  0100               	movlb	0	; () banked
  8619  00088A  B0D8               	btfsc	status,0,c
  8620  00088C  D00F               	goto	u7050
  8621  00088E                     l146:
  8622                           
  8623                           ; BSR set to: 0
  8624                           
  8625                           ; BSR set to: 0
  8626  00088E  0100               	movlb	0	; () banked
  8627  000890  51DC               	movf	_dispensed& (0+255),w,b
  8628  000892  25E4               	addwf	_extras& (0+255),w,b
  8629  000894  6F9D               	movwf	??_clearing& (0+255),b
  8630  000896  51DD               	movf	(_dispensed+1)& (0+255),w,b
  8631  000898  21E5               	addwfc	(_extras+1)& (0+255),w,b
  8632  00089A  6F9E               	movwf	(??_clearing+1)& (0+255),b
  8633  00089C  BF9E               	btfsc	(??_clearing+1)& (0+255),7,b
  8634  00089E  D7A6               	goto	l144
  8635  0008A0  519E               	movf	(??_clearing+1)& (0+255),w,b
  8636  0008A2  E104               	bnz	l5730
  8637  0008A4  0E14               	movlw	20
  8638  0008A6  5D9D               	subwf	??_clearing& (0+255),w,b
  8639  0008A8  A0D8               	btfss	status,0,c
  8640  0008AA  D7A0               	goto	l144
  8641  0008AC                     u7050:
  8642  0008AC                     l5730:
  8643                           
  8644                           ; BSR set to: 0
  8645                           ;main.c: 196: }
  8646                           ;main.c: 197: motorControl(BOLT, STOPMOTOR);
  8647  0008AC  0E02               	movlw	2
  8648  0008AE  6F80               	movwf	motorControl@dir& (0+255),b
  8649  0008B0  0E00               	movlw	0
  8650  0008B2  EC66  F013         	call	_motorControl
  8651                           
  8652                           ;main.c: 198: currentMode = WAITING;
  8653  0008B6  0E00               	movlw	0
  8654  0008B8  6E49               	movwf	_currentMode+1,c
  8655  0008BA  0E04               	movlw	4
  8656  0008BC  6E48               	movwf	_currentMode,c
  8657                           
  8658                           ;main.c: 200: instr[0] = 4;
  8659  0008BE  0E04               	movlw	4
  8660  0008C0  0100               	movlb	0	; () banked
  8661  0008C2  6F9F               	movwf	clearing@instr& (0+255),b
  8662                           
  8663                           ; BSR set to: 0
  8664                           ;main.c: 201: I2C_Send(nanoAddr, instr);
  8665  0008C4  0E9F               	movlw	low clearing@instr
  8666  0008C6  6F83               	movwf	I2C_Send@data& (0+255),b
  8667  0008C8  0E00               	movlw	high clearing@instr
  8668  0008CA  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  8669  0008CC  0E3F               	movlw	low _nanoAddr
  8670  0008CE  6EF6               	movwf	tblptrl,c
  8671  0008D0                     	if	1	;There is more than 1 active tblptr byte
  8672  0008D0  0EFC               	movlw	high _nanoAddr
  8673  0008D2  6EF7               	movwf	tblptrh,c
  8674  0008D4                     	endif
  8675  0008D4                     	if	1	;There are 3 active tblptr bytes
  8676  0008D4  0E00               	movlw	low (_nanoAddr shr (0+16))
  8677  0008D6  6EF8               	movwf	tblptru,c
  8678  0008D8                     	endif
  8679  0008D8  0008               	tblrd		*
  8680  0008DA  50F5               	movf	tablat,w,c
  8681  0008DC  EC83  F015         	call	_I2C_Send
  8682  0008E0  BA80               	btfsc	3968,5,c	;volatile
  8683  0008E2  D7FE               	goto	l149
  8684                           
  8685                           ;main.c: 204: tic();
  8686  0008E4  ECB2  F019         	call	_tic	;wreg free
  8687                           
  8688                           ;main.c: 205: debounceTime = 0;
  8689  0008E8  0E00               	movlw	0
  8690  0008EA  0100               	movlb	0	; () banked
  8691  0008EC  6FA4               	movwf	clearing@debounceTime& (0+255),b
  8692  0008EE  0E00               	movlw	0
  8693  0008F0  6FA5               	movwf	(clearing@debounceTime+1)& (0+255),b
  8694  0008F2  0E00               	movlw	0
  8695  0008F4  6FA6               	movwf	(clearing@debounceTime+2)& (0+255),b
  8696                           
  8697                           ; BSR set to: 0
  8698                           ;main.c: 206: currentMode = CLEARING;
  8699  0008F6  0E00               	movlw	0
  8700  0008F8  6E49               	movwf	_currentMode+1,c
  8701  0008FA  0E03               	movlw	3
  8702  0008FC  6E48               	movwf	_currentMode,c
  8703                           
  8704                           ; BSR set to: 0
  8705                           ;main.c: 207: motorControl(NUT, FORWARD);
  8706  0008FE  0E00               	movlw	0
  8707  000900  6F80               	movwf	motorControl@dir& (0+255),b
  8708  000902  0E01               	movlw	1
  8709  000904  EC66  F013         	call	_motorControl
  8710                           
  8711                           ;main.c: 208: while (extras.n + dispensed.n < 25) {
  8712  000908  D051               	goto	l154
  8713  00090A                     
  8714                           ;main.c: 209: currTime = tock();
  8715  00090A  ECAB  F019         	call	_tock	;wreg free
  8716  00090E  C080  F0A7         	movff	?_tock,clearing@currTime
  8717  000912  C081  F0A8         	movff	?_tock+1,clearing@currTime+1
  8718  000916  C082  F0A9         	movff	?_tock+2,clearing@currTime+2
  8719                           
  8720                           ;main.c: 210: if (PORTAbits.RA1 == 0 && currTime > debounceTime + 1) {
  8721  00091A  B280               	btfsc	3968,1,c	;volatile
  8722  00091C  D036               	goto	l153
  8723  00091E  0E00               	movlw	0
  8724  000920  0100               	movlb	0	; () banked
  8725  000922  6F8B               	movwf	___ftadd@f2& (0+255),b
  8726  000924  0E80               	movlw	128
  8727  000926  6F8C               	movwf	(___ftadd@f2+1)& (0+255),b
  8728  000928  0E3F               	movlw	63
  8729  00092A  6F8D               	movwf	(___ftadd@f2+2)& (0+255),b
  8730  00092C  C0A4  F088         	movff	clearing@debounceTime,___ftadd@f1
  8731  000930  C0A5  F089         	movff	clearing@debounceTime+1,___ftadd@f1+1
  8732  000934  C0A6  F08A         	movff	clearing@debounceTime+2,___ftadd@f1+2
  8733  000938  EC21  F011         	call	___ftadd	;wreg free
  8734  00093C  C088  F094         	movff	?___ftadd,___ftge@ff1
  8735  000940  C089  F095         	movff	?___ftadd+1,___ftge@ff1+1
  8736  000944  C08A  F096         	movff	?___ftadd+2,___ftge@ff1+2
  8737  000948  C0A7  F097         	movff	clearing@currTime,___ftge@ff2
  8738  00094C  C0A8  F098         	movff	clearing@currTime+1,___ftge@ff2+1
  8739  000950  C0A9  F099         	movff	clearing@currTime+2,___ftge@ff2+2
  8740  000954  ECD3  F015         	call	___ftge	;wreg free
  8741  000958  0100               	movlb	0	; () banked
  8742  00095A  B0D8               	btfsc	status,0,c
  8743  00095C  D016               	goto	l153
  8744                           
  8745                           ; BSR set to: 0
  8746                           ;main.c: 211: debounceTime = currTime;
  8747  00095E  C0A7  F0A4         	movff	clearing@currTime,clearing@debounceTime
  8748  000962  C0A8  F0A5         	movff	clearing@currTime+1,clearing@debounceTime+1
  8749  000966  C0A9  F0A6         	movff	clearing@currTime+2,clearing@debounceTime+2
  8750                           
  8751                           ; BSR set to: 0
  8752                           ;main.c: 212: extras.n++;
  8753  00096A  4BE6               	infsnz	(_extras+2)& (0+255),f,b
  8754  00096C  2BE7               	incf	(_extras+3)& (0+255),f,b
  8755                           
  8756                           ; BSR set to: 0
  8757                           ;main.c: 213: I2C_Send(nanoAddr, "\1Nut counted\0");
  8758  00096E  0EC0               	movlw	low STR_12
  8759  000970  6F83               	movwf	I2C_Send@data& (0+255),b
  8760  000972  0EFF               	movlw	high STR_12
  8761  000974  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  8762  000976  0E3F               	movlw	low _nanoAddr
  8763  000978  6EF6               	movwf	tblptrl,c
  8764  00097A                     	if	1	;There is more than 1 active tblptr byte
  8765  00097A  0EFC               	movlw	high _nanoAddr
  8766  00097C  6EF7               	movwf	tblptrh,c
  8767  00097E                     	endif
  8768  00097E                     	if	1	;There are 3 active tblptr bytes
  8769  00097E  0E00               	movlw	low (_nanoAddr shr (0+16))
  8770  000980  6EF8               	movwf	tblptru,c
  8771  000982                     	endif
  8772  000982  0008               	tblrd		*
  8773  000984  50F5               	movf	tablat,w,c
  8774  000986  EC83  F015         	call	_I2C_Send
  8775  00098A                     l153:
  8776                           
  8777                           ;main.c: 214: }
  8778                           ;main.c: 216: if (currTime >= spinTime) break;
  8779  00098A  C0A7  F094         	movff	clearing@currTime,___ftge@ff1
  8780  00098E  C0A8  F095         	movff	clearing@currTime+1,___ftge@ff1+1
  8781  000992  C0A9  F096         	movff	clearing@currTime+2,___ftge@ff1+2
  8782  000996  C0A1  F097         	movff	clearing@spinTime,___ftge@ff2
  8783  00099A  C0A2  F098         	movff	clearing@spinTime+1,___ftge@ff2+1
  8784  00099E  C0A3  F099         	movff	clearing@spinTime+2,___ftge@ff2+2
  8785  0009A2  ECD3  F015         	call	___ftge	;wreg free
  8786  0009A6  0100               	movlb	0	; () banked
  8787  0009A8  B0D8               	btfsc	status,0,c
  8788  0009AA  D00F               	goto	u7100
  8789  0009AC                     l154:
  8790                           
  8791                           ; BSR set to: 0
  8792                           
  8793                           ; BSR set to: 0
  8794  0009AC  0100               	movlb	0	; () banked
  8795  0009AE  51DE               	movf	(_dispensed+2)& (0+255),w,b
  8796  0009B0  25E6               	addwf	(_extras+2)& (0+255),w,b
  8797  0009B2  6F9D               	movwf	??_clearing& (0+255),b
  8798  0009B4  51DF               	movf	(_dispensed+3)& (0+255),w,b
  8799  0009B6  21E7               	addwfc	(_extras+3)& (0+255),w,b
  8800  0009B8  6F9E               	movwf	(??_clearing+1)& (0+255),b
  8801  0009BA  BF9E               	btfsc	(??_clearing+1)& (0+255),7,b
  8802  0009BC  D7A6               	goto	l152
  8803  0009BE  519E               	movf	(??_clearing+1)& (0+255),w,b
  8804  0009C0  E104               	bnz	l5764
  8805  0009C2  0E19               	movlw	25
  8806  0009C4  5D9D               	subwf	??_clearing& (0+255),w,b
  8807  0009C6  A0D8               	btfss	status,0,c
  8808  0009C8  D7A0               	goto	l152
  8809  0009CA                     u7100:
  8810  0009CA                     l5764:
  8811                           
  8812                           ; BSR set to: 0
  8813                           ;main.c: 217: }
  8814                           ;main.c: 219: motorControl(NUT, STOPMOTOR);
  8815  0009CA  0E02               	movlw	2
  8816  0009CC  6F80               	movwf	motorControl@dir& (0+255),b
  8817  0009CE  0E01               	movlw	1
  8818  0009D0  EC66  F013         	call	_motorControl
  8819                           
  8820                           ;main.c: 220: currentMode = WAITING;
  8821  0009D4  0E00               	movlw	0
  8822  0009D6  6E49               	movwf	_currentMode+1,c
  8823  0009D8  0E04               	movlw	4
  8824  0009DA  6E48               	movwf	_currentMode,c
  8825                           
  8826                           ;main.c: 222: instr[0] = 5;
  8827  0009DC  0E05               	movlw	5
  8828  0009DE  0100               	movlb	0	; () banked
  8829  0009E0  6F9F               	movwf	clearing@instr& (0+255),b
  8830                           
  8831                           ; BSR set to: 0
  8832                           ;main.c: 223: I2C_Send(nanoAddr, instr);
  8833  0009E2  0E9F               	movlw	low clearing@instr
  8834  0009E4  6F83               	movwf	I2C_Send@data& (0+255),b
  8835  0009E6  0E00               	movlw	high clearing@instr
  8836  0009E8  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  8837  0009EA  0E3F               	movlw	low _nanoAddr
  8838  0009EC  6EF6               	movwf	tblptrl,c
  8839  0009EE                     	if	1	;There is more than 1 active tblptr byte
  8840  0009EE  0EFC               	movlw	high _nanoAddr
  8841  0009F0  6EF7               	movwf	tblptrh,c
  8842  0009F2                     	endif
  8843  0009F2                     	if	1	;There are 3 active tblptr bytes
  8844  0009F2  0E00               	movlw	low (_nanoAddr shr (0+16))
  8845  0009F4  6EF8               	movwf	tblptru,c
  8846  0009F6                     	endif
  8847  0009F6  0008               	tblrd		*
  8848  0009F8  50F5               	movf	tablat,w,c
  8849  0009FA  EC83  F015         	call	_I2C_Send
  8850  0009FE  BA80               	btfsc	3968,5,c	;volatile
  8851  000A00  D7FE               	goto	l157
  8852                           
  8853                           ;main.c: 226: tic();
  8854  000A02  ECB2  F019         	call	_tic	;wreg free
  8855                           
  8856                           ;main.c: 227: debounceTime = 0;
  8857  000A06  0E00               	movlw	0
  8858  000A08  0100               	movlb	0	; () banked
  8859  000A0A  6FA4               	movwf	clearing@debounceTime& (0+255),b
  8860  000A0C  0E00               	movlw	0
  8861  000A0E  6FA5               	movwf	(clearing@debounceTime+1)& (0+255),b
  8862  000A10  0E00               	movlw	0
  8863  000A12  6FA6               	movwf	(clearing@debounceTime+2)& (0+255),b
  8864                           
  8865                           ; BSR set to: 0
  8866                           ;main.c: 228: currentMode = CLEARING;
  8867  000A14  0E00               	movlw	0
  8868  000A16  6E49               	movwf	_currentMode+1,c
  8869  000A18  0E03               	movlw	3
  8870  000A1A  6E48               	movwf	_currentMode,c
  8871                           
  8872                           ; BSR set to: 0
  8873                           ;main.c: 229: motorControl(SPACER, FORWARD);
  8874  000A1C  0E00               	movlw	0
  8875  000A1E  6F80               	movwf	motorControl@dir& (0+255),b
  8876  000A20  0E02               	movlw	2
  8877  000A22  EC66  F013         	call	_motorControl
  8878                           
  8879                           ;main.c: 230: while (extras.s + dispensed.s < 20) {
  8880  000A26  D051               	goto	l162
  8881  000A28                     
  8882                           ;main.c: 231: currTime = tock();
  8883  000A28  ECAB  F019         	call	_tock	;wreg free
  8884  000A2C  C080  F0A7         	movff	?_tock,clearing@currTime
  8885  000A30  C081  F0A8         	movff	?_tock+1,clearing@currTime+1
  8886  000A34  C082  F0A9         	movff	?_tock+2,clearing@currTime+2
  8887                           
  8888                           ;main.c: 232: if (PORTAbits.RA0 == 0 && currTime > debounceTime + 1) {
  8889  000A38  B080               	btfsc	3968,0,c	;volatile
  8890  000A3A  D036               	goto	l161
  8891  000A3C  0E00               	movlw	0
  8892  000A3E  0100               	movlb	0	; () banked
  8893  000A40  6F8B               	movwf	___ftadd@f2& (0+255),b
  8894  000A42  0E80               	movlw	128
  8895  000A44  6F8C               	movwf	(___ftadd@f2+1)& (0+255),b
  8896  000A46  0E3F               	movlw	63
  8897  000A48  6F8D               	movwf	(___ftadd@f2+2)& (0+255),b
  8898  000A4A  C0A4  F088         	movff	clearing@debounceTime,___ftadd@f1
  8899  000A4E  C0A5  F089         	movff	clearing@debounceTime+1,___ftadd@f1+1
  8900  000A52  C0A6  F08A         	movff	clearing@debounceTime+2,___ftadd@f1+2
  8901  000A56  EC21  F011         	call	___ftadd	;wreg free
  8902  000A5A  C088  F094         	movff	?___ftadd,___ftge@ff1
  8903  000A5E  C089  F095         	movff	?___ftadd+1,___ftge@ff1+1
  8904  000A62  C08A  F096         	movff	?___ftadd+2,___ftge@ff1+2
  8905  000A66  C0A7  F097         	movff	clearing@currTime,___ftge@ff2
  8906  000A6A  C0A8  F098         	movff	clearing@currTime+1,___ftge@ff2+1
  8907  000A6E  C0A9  F099         	movff	clearing@currTime+2,___ftge@ff2+2
  8908  000A72  ECD3  F015         	call	___ftge	;wreg free
  8909  000A76  0100               	movlb	0	; () banked
  8910  000A78  B0D8               	btfsc	status,0,c
  8911  000A7A  D016               	goto	l161
  8912                           
  8913                           ; BSR set to: 0
  8914                           ;main.c: 233: debounceTime = currTime;
  8915  000A7C  C0A7  F0A4         	movff	clearing@currTime,clearing@debounceTime
  8916  000A80  C0A8  F0A5         	movff	clearing@currTime+1,clearing@debounceTime+1
  8917  000A84  C0A9  F0A6         	movff	clearing@currTime+2,clearing@debounceTime+2
  8918                           
  8919                           ; BSR set to: 0
  8920                           ;main.c: 234: extras.s++;
  8921  000A88  4BE8               	infsnz	(_extras+4)& (0+255),f,b
  8922  000A8A  2BE9               	incf	(_extras+5)& (0+255),f,b
  8923                           
  8924                           ; BSR set to: 0
  8925                           ;main.c: 235: I2C_Send(nanoAddr, "\1Spacer counted\0");
  8926  000A8C  0E45               	movlw	low STR_13
  8927  000A8E  6F83               	movwf	I2C_Send@data& (0+255),b
  8928  000A90  0EFF               	movlw	high STR_13
  8929  000A92  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  8930  000A94  0E3F               	movlw	low _nanoAddr
  8931  000A96  6EF6               	movwf	tblptrl,c
  8932  000A98                     	if	1	;There is more than 1 active tblptr byte
  8933  000A98  0EFC               	movlw	high _nanoAddr
  8934  000A9A  6EF7               	movwf	tblptrh,c
  8935  000A9C                     	endif
  8936  000A9C                     	if	1	;There are 3 active tblptr bytes
  8937  000A9C  0E00               	movlw	low (_nanoAddr shr (0+16))
  8938  000A9E  6EF8               	movwf	tblptru,c
  8939  000AA0                     	endif
  8940  000AA0  0008               	tblrd		*
  8941  000AA2  50F5               	movf	tablat,w,c
  8942  000AA4  EC83  F015         	call	_I2C_Send
  8943  000AA8                     l161:
  8944                           
  8945                           ;main.c: 236: }
  8946                           ;main.c: 238: if (currTime >= spinTime) break;
  8947  000AA8  C0A7  F094         	movff	clearing@currTime,___ftge@ff1
  8948  000AAC  C0A8  F095         	movff	clearing@currTime+1,___ftge@ff1+1
  8949  000AB0  C0A9  F096         	movff	clearing@currTime+2,___ftge@ff1+2
  8950  000AB4  C0A1  F097         	movff	clearing@spinTime,___ftge@ff2
  8951  000AB8  C0A2  F098         	movff	clearing@spinTime+1,___ftge@ff2+1
  8952  000ABC  C0A3  F099         	movff	clearing@spinTime+2,___ftge@ff2+2
  8953  000AC0  ECD3  F015         	call	___ftge	;wreg free
  8954  000AC4  0100               	movlb	0	; () banked
  8955  000AC6  B0D8               	btfsc	status,0,c
  8956  000AC8  D00F               	goto	u7150
  8957  000ACA                     l162:
  8958                           
  8959                           ; BSR set to: 0
  8960                           
  8961                           ; BSR set to: 0
  8962  000ACA  0100               	movlb	0	; () banked
  8963  000ACC  51E0               	movf	(_dispensed+4)& (0+255),w,b
  8964  000ACE  25E8               	addwf	(_extras+4)& (0+255),w,b
  8965  000AD0  6F9D               	movwf	??_clearing& (0+255),b
  8966  000AD2  51E1               	movf	(_dispensed+5)& (0+255),w,b
  8967  000AD4  21E9               	addwfc	(_extras+5)& (0+255),w,b
  8968  000AD6  6F9E               	movwf	(??_clearing+1)& (0+255),b
  8969  000AD8  BF9E               	btfsc	(??_clearing+1)& (0+255),7,b
  8970  000ADA  D7A6               	goto	l160
  8971  000ADC  519E               	movf	(??_clearing+1)& (0+255),w,b
  8972  000ADE  E104               	bnz	l5798
  8973  000AE0  0E14               	movlw	20
  8974  000AE2  5D9D               	subwf	??_clearing& (0+255),w,b
  8975  000AE4  A0D8               	btfss	status,0,c
  8976  000AE6  D7A0               	goto	l160
  8977  000AE8                     u7150:
  8978  000AE8                     l5798:
  8979                           
  8980                           ; BSR set to: 0
  8981                           ;main.c: 239: }
  8982                           ;main.c: 241: motorControl(SPACER, STOPMOTOR);
  8983  000AE8  0E02               	movlw	2
  8984  000AEA  6F80               	movwf	motorControl@dir& (0+255),b
  8985  000AEC  0E02               	movlw	2
  8986  000AEE  EC66  F013         	call	_motorControl
  8987                           
  8988                           ;main.c: 242: currentMode = WAITING;
  8989  000AF2  0E00               	movlw	0
  8990  000AF4  6E49               	movwf	_currentMode+1,c
  8991  000AF6  0E04               	movlw	4
  8992  000AF8  6E48               	movwf	_currentMode,c
  8993                           
  8994                           ;main.c: 244: instr[0] = 6;
  8995  000AFA  0E06               	movlw	6
  8996  000AFC  0100               	movlb	0	; () banked
  8997  000AFE  6F9F               	movwf	clearing@instr& (0+255),b
  8998                           
  8999                           ; BSR set to: 0
  9000                           ;main.c: 245: I2C_Send(nanoAddr, instr);
  9001  000B00  0E9F               	movlw	low clearing@instr
  9002  000B02  6F83               	movwf	I2C_Send@data& (0+255),b
  9003  000B04  0E00               	movlw	high clearing@instr
  9004  000B06  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  9005  000B08  0E3F               	movlw	low _nanoAddr
  9006  000B0A  6EF6               	movwf	tblptrl,c
  9007  000B0C                     	if	1	;There is more than 1 active tblptr byte
  9008  000B0C  0EFC               	movlw	high _nanoAddr
  9009  000B0E  6EF7               	movwf	tblptrh,c
  9010  000B10                     	endif
  9011  000B10                     	if	1	;There are 3 active tblptr bytes
  9012  000B10  0E00               	movlw	low (_nanoAddr shr (0+16))
  9013  000B12  6EF8               	movwf	tblptru,c
  9014  000B14                     	endif
  9015  000B14  0008               	tblrd		*
  9016  000B16  50F5               	movf	tablat,w,c
  9017  000B18  EC83  F015         	call	_I2C_Send
  9018  000B1C  BA80               	btfsc	3968,5,c	;volatile
  9019  000B1E  D7FE               	goto	l165
  9020                           
  9021                           ;main.c: 248: tic();
  9022  000B20  ECB2  F019         	call	_tic	;wreg free
  9023                           
  9024                           ;main.c: 249: debounceTime = 0;
  9025  000B24  0E00               	movlw	0
  9026  000B26  0100               	movlb	0	; () banked
  9027  000B28  6FA4               	movwf	clearing@debounceTime& (0+255),b
  9028  000B2A  0E00               	movlw	0
  9029  000B2C  6FA5               	movwf	(clearing@debounceTime+1)& (0+255),b
  9030  000B2E  0E00               	movlw	0
  9031  000B30  6FA6               	movwf	(clearing@debounceTime+2)& (0+255),b
  9032                           
  9033                           ; BSR set to: 0
  9034                           ;main.c: 250: currentMode = CLEARING;
  9035  000B32  0E00               	movlw	0
  9036  000B34  6E49               	movwf	_currentMode+1,c
  9037  000B36  0E03               	movlw	3
  9038  000B38  6E48               	movwf	_currentMode,c
  9039                           
  9040                           ; BSR set to: 0
  9041                           ;main.c: 251: motorControl(WASHER, FORWARD);
  9042  000B3A  0E00               	movlw	0
  9043  000B3C  6F80               	movwf	motorControl@dir& (0+255),b
  9044  000B3E  0E03               	movlw	3
  9045  000B40  EC66  F013         	call	_motorControl
  9046                           
  9047                           ;main.c: 252: while (extras.w + dispensed.w < 35) {
  9048  000B44  D051               	goto	l170
  9049  000B46                     
  9050                           ;main.c: 253: currTime = tock();
  9051  000B46  ECAB  F019         	call	_tock	;wreg free
  9052  000B4A  C080  F0A7         	movff	?_tock,clearing@currTime
  9053  000B4E  C081  F0A8         	movff	?_tock+1,clearing@currTime+1
  9054  000B52  C082  F0A9         	movff	?_tock+2,clearing@currTime+2
  9055                           
  9056                           ;main.c: 254: if (PORTAbits.RA2 == 0 && currTime > debounceTime + 1) {
  9057  000B56  B480               	btfsc	3968,2,c	;volatile
  9058  000B58  D036               	goto	l169
  9059  000B5A  0E00               	movlw	0
  9060  000B5C  0100               	movlb	0	; () banked
  9061  000B5E  6F8B               	movwf	___ftadd@f2& (0+255),b
  9062  000B60  0E80               	movlw	128
  9063  000B62  6F8C               	movwf	(___ftadd@f2+1)& (0+255),b
  9064  000B64  0E3F               	movlw	63
  9065  000B66  6F8D               	movwf	(___ftadd@f2+2)& (0+255),b
  9066  000B68  C0A4  F088         	movff	clearing@debounceTime,___ftadd@f1
  9067  000B6C  C0A5  F089         	movff	clearing@debounceTime+1,___ftadd@f1+1
  9068  000B70  C0A6  F08A         	movff	clearing@debounceTime+2,___ftadd@f1+2
  9069  000B74  EC21  F011         	call	___ftadd	;wreg free
  9070  000B78  C088  F094         	movff	?___ftadd,___ftge@ff1
  9071  000B7C  C089  F095         	movff	?___ftadd+1,___ftge@ff1+1
  9072  000B80  C08A  F096         	movff	?___ftadd+2,___ftge@ff1+2
  9073  000B84  C0A7  F097         	movff	clearing@currTime,___ftge@ff2
  9074  000B88  C0A8  F098         	movff	clearing@currTime+1,___ftge@ff2+1
  9075  000B8C  C0A9  F099         	movff	clearing@currTime+2,___ftge@ff2+2
  9076  000B90  ECD3  F015         	call	___ftge	;wreg free
  9077  000B94  0100               	movlb	0	; () banked
  9078  000B96  B0D8               	btfsc	status,0,c
  9079  000B98  D016               	goto	l169
  9080                           
  9081                           ; BSR set to: 0
  9082                           ;main.c: 255: debounceTime = currTime;
  9083  000B9A  C0A7  F0A4         	movff	clearing@currTime,clearing@debounceTime
  9084  000B9E  C0A8  F0A5         	movff	clearing@currTime+1,clearing@debounceTime+1
  9085  000BA2  C0A9  F0A6         	movff	clearing@currTime+2,clearing@debounceTime+2
  9086                           
  9087                           ; BSR set to: 0
  9088                           ;main.c: 256: extras.w++;
  9089  000BA6  4BEA               	infsnz	(_extras+6)& (0+255),f,b
  9090  000BA8  2BEB               	incf	(_extras+7)& (0+255),f,b
  9091                           
  9092                           ; BSR set to: 0
  9093                           ;main.c: 257: I2C_Send(nanoAddr, "\1Washer counted\0");
  9094  000BAA  0E56               	movlw	low STR_14
  9095  000BAC  6F83               	movwf	I2C_Send@data& (0+255),b
  9096  000BAE  0EFF               	movlw	high STR_14
  9097  000BB0  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  9098  000BB2  0E3F               	movlw	low _nanoAddr
  9099  000BB4  6EF6               	movwf	tblptrl,c
  9100  000BB6                     	if	1	;There is more than 1 active tblptr byte
  9101  000BB6  0EFC               	movlw	high _nanoAddr
  9102  000BB8  6EF7               	movwf	tblptrh,c
  9103  000BBA                     	endif
  9104  000BBA                     	if	1	;There are 3 active tblptr bytes
  9105  000BBA  0E00               	movlw	low (_nanoAddr shr (0+16))
  9106  000BBC  6EF8               	movwf	tblptru,c
  9107  000BBE                     	endif
  9108  000BBE  0008               	tblrd		*
  9109  000BC0  50F5               	movf	tablat,w,c
  9110  000BC2  EC83  F015         	call	_I2C_Send
  9111  000BC6                     l169:
  9112                           
  9113                           ;main.c: 258: }
  9114                           ;main.c: 260: if (currTime >= spinTime) break;
  9115  000BC6  C0A7  F094         	movff	clearing@currTime,___ftge@ff1
  9116  000BCA  C0A8  F095         	movff	clearing@currTime+1,___ftge@ff1+1
  9117  000BCE  C0A9  F096         	movff	clearing@currTime+2,___ftge@ff1+2
  9118  000BD2  C0A1  F097         	movff	clearing@spinTime,___ftge@ff2
  9119  000BD6  C0A2  F098         	movff	clearing@spinTime+1,___ftge@ff2+1
  9120  000BDA  C0A3  F099         	movff	clearing@spinTime+2,___ftge@ff2+2
  9121  000BDE  ECD3  F015         	call	___ftge	;wreg free
  9122  000BE2  0100               	movlb	0	; () banked
  9123  000BE4  B0D8               	btfsc	status,0,c
  9124  000BE6  D00F               	goto	u7200
  9125  000BE8                     l170:
  9126                           
  9127                           ; BSR set to: 0
  9128                           
  9129                           ; BSR set to: 0
  9130  000BE8  0100               	movlb	0	; () banked
  9131  000BEA  51E2               	movf	(_dispensed+6)& (0+255),w,b
  9132  000BEC  25EA               	addwf	(_extras+6)& (0+255),w,b
  9133  000BEE  6F9D               	movwf	??_clearing& (0+255),b
  9134  000BF0  51E3               	movf	(_dispensed+7)& (0+255),w,b
  9135  000BF2  21EB               	addwfc	(_extras+7)& (0+255),w,b
  9136  000BF4  6F9E               	movwf	(??_clearing+1)& (0+255),b
  9137  000BF6  BF9E               	btfsc	(??_clearing+1)& (0+255),7,b
  9138  000BF8  D7A6               	goto	l168
  9139  000BFA  519E               	movf	(??_clearing+1)& (0+255),w,b
  9140  000BFC  E104               	bnz	l5832
  9141  000BFE  0E23               	movlw	35
  9142  000C00  5D9D               	subwf	??_clearing& (0+255),w,b
  9143  000C02  A0D8               	btfss	status,0,c
  9144  000C04  D7A0               	goto	l168
  9145  000C06                     u7200:
  9146  000C06                     l5832:
  9147                           
  9148                           ; BSR set to: 0
  9149                           ;main.c: 261: }
  9150                           ;main.c: 263: motorControl(WASHER, STOPMOTOR);
  9151  000C06  0E02               	movlw	2
  9152  000C08  6F80               	movwf	motorControl@dir& (0+255),b
  9153  000C0A  0E03               	movlw	3
  9154  000C0C  EC66  F013         	call	_motorControl
  9155                           
  9156                           ;main.c: 264: currentMode = WAITING;
  9157  000C10  0E00               	movlw	0
  9158  000C12  6E49               	movwf	_currentMode+1,c
  9159  000C14  0E04               	movlw	4
  9160  000C16  6E48               	movwf	_currentMode,c
  9161                           
  9162                           ;main.c: 266: instr[0] = 7;
  9163  000C18  0E07               	movlw	7
  9164  000C1A  0100               	movlb	0	; () banked
  9165  000C1C  6F9F               	movwf	clearing@instr& (0+255),b
  9166                           
  9167                           ; BSR set to: 0
  9168                           ;main.c: 267: I2C_Send(nanoAddr, instr);
  9169  000C1E  0E9F               	movlw	low clearing@instr
  9170  000C20  6F83               	movwf	I2C_Send@data& (0+255),b
  9171  000C22  0E00               	movlw	high clearing@instr
  9172  000C24  6F84               	movwf	(I2C_Send@data+1)& (0+255),b
  9173  000C26  0E3F               	movlw	low _nanoAddr
  9174  000C28  6EF6               	movwf	tblptrl,c
  9175  000C2A                     	if	1	;There is more than 1 active tblptr byte
  9176  000C2A  0EFC               	movlw	high _nanoAddr
  9177  000C2C  6EF7               	movwf	tblptrh,c
  9178  000C2E                     	endif
  9179  000C2E                     	if	1	;There are 3 active tblptr bytes
  9180  000C2E  0E00               	movlw	low (_nanoAddr shr (0+16))
  9181  000C30  6EF8               	movwf	tblptru,c
  9182  000C32                     	endif
  9183  000C32  0008               	tblrd		*
  9184  000C34  50F5               	movf	tablat,w,c
  9185  000C36  EC83  F015         	call	_I2C_Send
  9186  000C3A  AA80               	btfss	3968,5,c	;volatile
  9187  000C3C  0012               	return	
  9188  000C3E  D7FD               	goto	l173
  9189  000C40                     __end_of_clearing:
  9190                           	opt stack 0
  9191                           tosu	equ	0xFFF
  9192                           tosh	equ	0xFFE
  9193                           tosl	equ	0xFFD
  9194                           pclath	equ	0xFFA
  9195                           tblptru	equ	0xFF8
  9196                           tblptrh	equ	0xFF7
  9197                           tblptrl	equ	0xFF6
  9198                           tablat	equ	0xFF5
  9199                           prodh	equ	0xFF4
  9200                           prodl	equ	0xFF3
  9201                           intcon	equ	0xFF2
  9202                           indf0	equ	0xFEF
  9203                           postinc0	equ	0xFEE
  9204                           fsr0h	equ	0xFEA
  9205                           fsr0l	equ	0xFE9
  9206                           wreg	equ	0xFE8
  9207                           postdec1	equ	0xFE5
  9208                           plusw1	equ	0xFE3
  9209                           fsr1l	equ	0xFE1
  9210                           indf2	equ	0xFDF
  9211                           postinc2	equ	0xFDE
  9212                           postdec2	equ	0xFDD
  9213                           plusw2	equ	0xFDB
  9214                           fsr2h	equ	0xFDA
  9215                           fsr2l	equ	0xFD9
  9216                           status	equ	0xFD8
  9217                           
  9218 ;; *************** function _tock *****************
  9219 ;; Defined at:
  9220 ;;		line 69 in file "timer.c"
  9221 ;; Parameters:    Size  Location     Type
  9222 ;;		None
  9223 ;; Auto vars:     Size  Location     Type
  9224 ;;		None
  9225 ;; Return value:  Size  Location     Type
  9226 ;;                  3    0[BANK0 ] void 
  9227 ;; Registers used:
  9228 ;;		None
  9229 ;; Tracked objects:
  9230 ;;		On entry : 0/0
  9231 ;;		On exit  : 0/0
  9232 ;;		Unchanged: 0/0
  9233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9234 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9237 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9238 ;;Total ram usage:        3 bytes
  9239 ;; Hardware stack levels used:    1
  9240 ;; Hardware stack levels required when called:    4
  9241 ;; This function calls:
  9242 ;;		Nothing
  9243 ;; This function is called by:
  9244 ;;		_packageCompartment
  9245 ;;		_clearing
  9246 ;; This function uses a non-reentrant model
  9247 ;;
  9248                           
  9249                           	psect	text20
  9250  003356                     __ptext20:
  9251                           	opt stack 0
  9252  003356                     _tock:
  9253                           	opt stack 23
  9254                           
  9255                           ;timer.c: 74: return timeSinceLastTic;
  9256                           
  9257                           ;incstack = 0
  9258  003356  C059  F080         	movff	_timeSinceLastTic,?_tock	;volatile
  9259  00335A  C05A  F081         	movff	_timeSinceLastTic+1,?_tock+1	;volatile
  9260  00335E  C05B  F082         	movff	_timeSinceLastTic+2,?_tock+2	;volatile
  9261  003362  0012               	return		;funcret
  9262  003364                     __end_of_tock:
  9263                           	opt stack 0
  9264                           tosu	equ	0xFFF
  9265                           tosh	equ	0xFFE
  9266                           tosl	equ	0xFFD
  9267                           pclath	equ	0xFFA
  9268                           tblptru	equ	0xFF8
  9269                           tblptrh	equ	0xFF7
  9270                           tblptrl	equ	0xFF6
  9271                           tablat	equ	0xFF5
  9272                           prodh	equ	0xFF4
  9273                           prodl	equ	0xFF3
  9274                           intcon	equ	0xFF2
  9275                           indf0	equ	0xFEF
  9276                           postinc0	equ	0xFEE
  9277                           fsr0h	equ	0xFEA
  9278                           fsr0l	equ	0xFE9
  9279                           wreg	equ	0xFE8
  9280                           postdec1	equ	0xFE5
  9281                           plusw1	equ	0xFE3
  9282                           fsr1l	equ	0xFE1
  9283                           indf2	equ	0xFDF
  9284                           postinc2	equ	0xFDE
  9285                           postdec2	equ	0xFDD
  9286                           plusw2	equ	0xFDB
  9287                           fsr2h	equ	0xFDA
  9288                           fsr2l	equ	0xFD9
  9289                           status	equ	0xFD8
  9290                           
  9291 ;; *************** function _tic *****************
  9292 ;; Defined at:
  9293 ;;		line 61 in file "timer.c"
  9294 ;; Parameters:    Size  Location     Type
  9295 ;;		None
  9296 ;; Auto vars:     Size  Location     Type
  9297 ;;		None
  9298 ;; Return value:  Size  Location     Type
  9299 ;;                  1    wreg      void 
  9300 ;; Registers used:
  9301 ;;		wreg, status,2
  9302 ;; Tracked objects:
  9303 ;;		On entry : 0/0
  9304 ;;		On exit  : 0/0
  9305 ;;		Unchanged: 0/0
  9306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9310 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9311 ;;Total ram usage:        0 bytes
  9312 ;; Hardware stack levels used:    1
  9313 ;; Hardware stack levels required when called:    4
  9314 ;; This function calls:
  9315 ;;		Nothing
  9316 ;; This function is called by:
  9317 ;;		_packageCompartment
  9318 ;;		_clearing
  9319 ;; This function uses a non-reentrant model
  9320 ;;
  9321                           
  9322                           	psect	text21
  9323  003364                     __ptext21:
  9324                           	opt stack 0
  9325  003364                     _tic:
  9326                           	opt stack 23
  9327                           
  9328                           ;timer.c: 66: timeSinceLastTic = 0;
  9329                           
  9330                           ;incstack = 0
  9331  003364  0E00               	movlw	0
  9332  003366  6E59               	movwf	_timeSinceLastTic,c	;volatile
  9333  003368  0E00               	movlw	0
  9334  00336A  6E5A               	movwf	_timeSinceLastTic+1,c	;volatile
  9335  00336C  0E00               	movlw	0
  9336  00336E  6E5B               	movwf	_timeSinceLastTic+2,c	;volatile
  9337  003370  0012               	return		;funcret
  9338  003372                     __end_of_tic:
  9339                           	opt stack 0
  9340                           tosu	equ	0xFFF
  9341                           tosh	equ	0xFFE
  9342                           tosl	equ	0xFFD
  9343                           pclath	equ	0xFFA
  9344                           tblptru	equ	0xFF8
  9345                           tblptrh	equ	0xFF7
  9346                           tblptrl	equ	0xFF6
  9347                           tablat	equ	0xFF5
  9348                           prodh	equ	0xFF4
  9349                           prodl	equ	0xFF3
  9350                           intcon	equ	0xFF2
  9351                           indf0	equ	0xFEF
  9352                           postinc0	equ	0xFEE
  9353                           fsr0h	equ	0xFEA
  9354                           fsr0l	equ	0xFE9
  9355                           wreg	equ	0xFE8
  9356                           postdec1	equ	0xFE5
  9357                           plusw1	equ	0xFE3
  9358                           fsr1l	equ	0xFE1
  9359                           indf2	equ	0xFDF
  9360                           postinc2	equ	0xFDE
  9361                           postdec2	equ	0xFDD
  9362                           plusw2	equ	0xFDB
  9363                           fsr2h	equ	0xFDA
  9364                           fsr2l	equ	0xFD9
  9365                           status	equ	0xFD8
  9366                           
  9367 ;; *************** function _motorControl *****************
  9368 ;; Defined at:
  9369 ;;		line 7 in file "motors.c"
  9370 ;; Parameters:    Size  Location     Type
  9371 ;;  motor           1    wreg     enum E2968
  9372 ;;  dir             1    0[BANK0 ] enum E2974
  9373 ;; Auto vars:     Size  Location     Type
  9374 ;;  motor           1    1[BANK0 ] enum E2968
  9375 ;; Return value:  Size  Location     Type
  9376 ;;                  1    wreg      void 
  9377 ;; Registers used:
  9378 ;;		wreg, status,2, status,0
  9379 ;; Tracked objects:
  9380 ;;		On entry : 0/0
  9381 ;;		On exit  : 0/0
  9382 ;;		Unchanged: 0/0
  9383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9384 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9385 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9387 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9388 ;;Total ram usage:        2 bytes
  9389 ;; Hardware stack levels used:    1
  9390 ;; Hardware stack levels required when called:    4
  9391 ;; This function calls:
  9392 ;;		Nothing
  9393 ;; This function is called by:
  9394 ;;		_packageCompartment
  9395 ;;		_clearing
  9396 ;;		_main
  9397 ;; This function uses a non-reentrant model
  9398 ;;
  9399                           
  9400                           	psect	text22
  9401  0026CC                     __ptext22:
  9402                           	opt stack 0
  9403  0026CC                     _motorControl:
  9404                           	opt stack 26
  9405                           
  9406                           ;incstack = 0
  9407                           ;motorControl@motor stored from wreg
  9408  0026CC  0100               	movlb	0	; () banked
  9409  0026CE  6F81               	movwf	motorControl@motor& (0+255),b
  9410                           
  9411                           ;motors.c: 8: switch(motor) {
  9412  0026D0  D051               	goto	l728
  9413  0026D2                     
  9414                           ;motors.c: 10: if (dir == FORWARD) {
  9415  0026D2  0100               	movlb	0	; () banked
  9416  0026D4  5180               	movf	motorControl@dir& (0+255),w,b
  9417  0026D6  A4D8               	btfss	status,2,c
  9418  0026D8  D003               	goto	l730
  9419                           
  9420                           ; BSR set to: 0
  9421                           ;motors.c: 11: LATBbits.LATB3 = 1;
  9422  0026DA  868A               	bsf	3978,3,c	;volatile
  9423                           
  9424                           ;motors.c: 12: LATCbits.LATC0 = 0;
  9425  0026DC  908B               	bcf	3979,0,c	;volatile
  9426                           
  9427                           ;motors.c: 13: } else if (dir == REVERSE) {
  9428  0026DE  D00B               	goto	l734
  9429  0026E0                     l730:
  9430                           
  9431                           ; BSR set to: 0
  9432                           
  9433                           ; BSR set to: 0
  9434  0026E0  0580               	decf	motorControl@dir& (0+255),w,b
  9435  0026E2  A4D8               	btfss	status,2,c
  9436  0026E4  D002               	goto	l732
  9437                           
  9438                           ; BSR set to: 0
  9439                           ;motors.c: 14: LATBbits.LATB3 = 0;
  9440  0026E6  968A               	bcf	3978,3,c	;volatile
  9441  0026E8  D005               	goto	L10
  9442  0026EA                     l732:
  9443                           
  9444                           ; BSR set to: 0
  9445                           
  9446                           ; BSR set to: 0
  9447  0026EA  0E02               	movlw	2
  9448  0026EC  1980               	xorwf	motorControl@dir& (0+255),w,b
  9449  0026EE  A4D8               	btfss	status,2,c
  9450  0026F0  D002               	goto	l734
  9451                           
  9452                           ; BSR set to: 0
  9453                           ;motors.c: 17: LATBbits.LATB3 = 1;
  9454  0026F2  868A               	bsf	3978,3,c	;volatile
  9455  0026F4                     L10:
  9456                           
  9457                           ;motors.c: 18: LATCbits.LATC0 = 1;
  9458  0026F4  808B               	bsf	3979,0,c	;volatile
  9459  0026F6                     l734:
  9460                           
  9461                           ; BSR set to: 0
  9462                           ;motors.c: 19: }
  9463                           ;motors.c: 20: currentMotorDir.s = dir;
  9464                           
  9465                           ; BSR set to: 0
  9466                           
  9467                           ; BSR set to: 0
  9468  0026F6  C080  F057         	movff	motorControl@dir,_currentMotorDir+2
  9469                           
  9470                           ;motors.c: 21: break;
  9471  0026FA  0012               	return	
  9472  0026FC                     
  9473                           ; BSR set to: 0
  9474                           ;motors.c: 23: if (dir == FORWARD) {
  9475                           
  9476                           ; BSR set to: 0
  9477  0026FC  5180               	movf	motorControl@dir& (0+255),w,b
  9478  0026FE  A4D8               	btfss	status,2,c
  9479  002700  D003               	goto	l737
  9480                           
  9481                           ; BSR set to: 0
  9482                           ;motors.c: 24: LATCbits.LATC1 = 1;
  9483  002702  828B               	bsf	3979,1,c	;volatile
  9484                           
  9485                           ;motors.c: 25: LATCbits.LATC2 = 0;
  9486  002704  948B               	bcf	3979,2,c	;volatile
  9487                           
  9488                           ;motors.c: 26: } else if (dir == REVERSE) {
  9489  002706  D00B               	goto	l741
  9490  002708                     l737:
  9491                           
  9492                           ; BSR set to: 0
  9493                           
  9494                           ; BSR set to: 0
  9495  002708  0580               	decf	motorControl@dir& (0+255),w,b
  9496  00270A  A4D8               	btfss	status,2,c
  9497  00270C  D002               	goto	l739
  9498                           
  9499                           ; BSR set to: 0
  9500                           ;motors.c: 27: LATCbits.LATC1 = 0;
  9501  00270E  928B               	bcf	3979,1,c	;volatile
  9502  002710  D005               	goto	L11
  9503  002712                     l739:
  9504                           
  9505                           ; BSR set to: 0
  9506                           
  9507                           ; BSR set to: 0
  9508  002712  0E02               	movlw	2
  9509  002714  1980               	xorwf	motorControl@dir& (0+255),w,b
  9510  002716  A4D8               	btfss	status,2,c
  9511  002718  D002               	goto	l741
  9512                           
  9513                           ; BSR set to: 0
  9514                           ;motors.c: 30: LATCbits.LATC1 = 1;
  9515  00271A  828B               	bsf	3979,1,c	;volatile
  9516  00271C                     L11:
  9517                           
  9518                           ;motors.c: 31: LATCbits.LATC2 = 1;
  9519  00271C  848B               	bsf	3979,2,c	;volatile
  9520  00271E                     l741:
  9521                           
  9522                           ; BSR set to: 0
  9523                           ;motors.c: 32: }
  9524                           ;motors.c: 33: currentMotorDir.n = dir;
  9525                           
  9526                           ; BSR set to: 0
  9527                           
  9528                           ; BSR set to: 0
  9529  00271E  C080  F056         	movff	motorControl@dir,_currentMotorDir+1
  9530                           
  9531                           ;motors.c: 34: break;
  9532  002722  0012               	return	
  9533  002724                     
  9534                           ; BSR set to: 0
  9535                           ;motors.c: 36: if (dir == FORWARD) {
  9536                           
  9537                           ; BSR set to: 0
  9538  002724  5180               	movf	motorControl@dir& (0+255),w,b
  9539  002726  A4D8               	btfss	status,2,c
  9540  002728  D003               	goto	l743
  9541                           
  9542                           ; BSR set to: 0
  9543                           ;motors.c: 37: LATCbits.LATC5 = 1;
  9544  00272A  8A8B               	bsf	3979,5,c	;volatile
  9545                           
  9546                           ;motors.c: 38: LATCbits.LATC6 = 0;
  9547  00272C  9C8B               	bcf	3979,6,c	;volatile
  9548                           
  9549                           ;motors.c: 39: } else if (dir == REVERSE) {
  9550  00272E  D00B               	goto	l747
  9551  002730                     l743:
  9552                           
  9553                           ; BSR set to: 0
  9554                           
  9555                           ; BSR set to: 0
  9556  002730  0580               	decf	motorControl@dir& (0+255),w,b
  9557  002732  A4D8               	btfss	status,2,c
  9558  002734  D002               	goto	l745
  9559                           
  9560                           ; BSR set to: 0
  9561                           ;motors.c: 40: LATCbits.LATC5 = 0;
  9562  002736  9A8B               	bcf	3979,5,c	;volatile
  9563  002738  D005               	goto	L12
  9564  00273A                     l745:
  9565                           
  9566                           ; BSR set to: 0
  9567                           
  9568                           ; BSR set to: 0
  9569  00273A  0E02               	movlw	2
  9570  00273C  1980               	xorwf	motorControl@dir& (0+255),w,b
  9571  00273E  A4D8               	btfss	status,2,c
  9572  002740  D002               	goto	l747
  9573                           
  9574                           ; BSR set to: 0
  9575                           ;motors.c: 43: LATCbits.LATC5 = 1;
  9576  002742  8A8B               	bsf	3979,5,c	;volatile
  9577  002744                     L12:
  9578                           
  9579                           ;motors.c: 44: LATCbits.LATC6 = 1;
  9580  002744  8C8B               	bsf	3979,6,c	;volatile
  9581  002746                     l747:
  9582                           
  9583                           ; BSR set to: 0
  9584                           ;motors.c: 45: }
  9585                           ;motors.c: 46: currentMotorDir.w = dir;
  9586                           
  9587                           ; BSR set to: 0
  9588                           
  9589                           ; BSR set to: 0
  9590  002746  C080  F058         	movff	motorControl@dir,_currentMotorDir+3
  9591                           
  9592                           ;motors.c: 47: break;
  9593  00274A  0012               	return	
  9594  00274C                     
  9595                           ; BSR set to: 0
  9596                           ;motors.c: 49: if (dir == FORWARD) {
  9597                           
  9598                           ; BSR set to: 0
  9599  00274C  5180               	movf	motorControl@dir& (0+255),w,b
  9600  00274E  A4D8               	btfss	status,2,c
  9601  002750  D003               	goto	l749
  9602                           
  9603                           ; BSR set to: 0
  9604                           ;motors.c: 50: LATCbits.LATC7 = 1;
  9605  002752  8E8B               	bsf	3979,7,c	;volatile
  9606                           
  9607                           ;motors.c: 51: LATEbits.LATE0 = 0;
  9608  002754  908D               	bcf	3981,0,c	;volatile
  9609                           
  9610                           ;motors.c: 52: } else if (dir == REVERSE) {
  9611  002756  D00B               	goto	l753
  9612  002758                     l749:
  9613                           
  9614                           ; BSR set to: 0
  9615                           
  9616                           ; BSR set to: 0
  9617  002758  0580               	decf	motorControl@dir& (0+255),w,b
  9618  00275A  A4D8               	btfss	status,2,c
  9619  00275C  D002               	goto	l751
  9620                           
  9621                           ; BSR set to: 0
  9622                           ;motors.c: 53: LATCbits.LATC7 = 0;
  9623  00275E  9E8B               	bcf	3979,7,c	;volatile
  9624  002760  D005               	goto	L13
  9625  002762                     l751:
  9626                           
  9627                           ; BSR set to: 0
  9628                           
  9629                           ; BSR set to: 0
  9630  002762  0E02               	movlw	2
  9631  002764  1980               	xorwf	motorControl@dir& (0+255),w,b
  9632  002766  A4D8               	btfss	status,2,c
  9633  002768  D002               	goto	l753
  9634                           
  9635                           ; BSR set to: 0
  9636                           ;motors.c: 56: LATCbits.LATC7 = 1;
  9637  00276A  8E8B               	bsf	3979,7,c	;volatile
  9638  00276C                     L13:
  9639                           
  9640                           ;motors.c: 57: LATEbits.LATE0 = 1;
  9641  00276C  808D               	bsf	3981,0,c	;volatile
  9642  00276E                     l753:
  9643                           
  9644                           ; BSR set to: 0
  9645                           ;motors.c: 58: }
  9646                           ;motors.c: 59: currentMotorDir.b = dir;
  9647                           
  9648                           ; BSR set to: 0
  9649                           
  9650                           ; BSR set to: 0
  9651  00276E  C080  F055         	movff	motorControl@dir,_currentMotorDir
  9652                           
  9653                           ; BSR set to: 0
  9654                           ;motors.c: 63: }
  9655                           
  9656                           ; BSR set to: 0
  9657                           ;motors.c: 62: break;
  9658                           
  9659                           ;motors.c: 61: default:
  9660                           
  9661                           ;motors.c: 60: break;
  9662  002772  0012               	return	
  9663  002774                     l728:
  9664                           
  9665                           ; BSR set to: 0
  9666  002774  0100               	movlb	0	; () banked
  9667  002776  5181               	movf	motorControl@motor& (0+255),w,b
  9668                           
  9669                           ; Switch size 1, requested type "space"
  9670                           ; Number of cases is 4, Range of values is 0 to 3
  9671                           ; switch strategies available:
  9672                           ; Name         Instructions Cycles
  9673                           ; simple_byte           13     7 (average)
  9674                           ;	Chosen strategy is simple_byte
  9675  002778  0A00               	xorlw	0	; case 0
  9676  00277A  B4D8               	btfsc	status,2,c
  9677  00277C  D7E7               	goto	l748
  9678  00277E  0A01               	xorlw	1	; case 1
  9679  002780  B4D8               	btfsc	status,2,c
  9680  002782  D7BC               	goto	l736
  9681  002784  0A03               	xorlw	3	; case 2
  9682  002786  B4D8               	btfsc	status,2,c
  9683  002788  D7A4               	goto	l729
  9684  00278A  0A01               	xorlw	1	; case 3
  9685  00278C  A4D8               	btfss	status,2,c
  9686  00278E  0012               	return	
  9687  002790  D7C9               	goto	l742
  9688  002792                     __end_of_motorControl:
  9689                           	opt stack 0
  9690                           tosu	equ	0xFFF
  9691                           tosh	equ	0xFFE
  9692                           tosl	equ	0xFFD
  9693                           pclath	equ	0xFFA
  9694                           tblptru	equ	0xFF8
  9695                           tblptrh	equ	0xFF7
  9696                           tblptrl	equ	0xFF6
  9697                           tablat	equ	0xFF5
  9698                           prodh	equ	0xFF4
  9699                           prodl	equ	0xFF3
  9700                           intcon	equ	0xFF2
  9701                           indf0	equ	0xFEF
  9702                           postinc0	equ	0xFEE
  9703                           fsr0h	equ	0xFEA
  9704                           fsr0l	equ	0xFE9
  9705                           wreg	equ	0xFE8
  9706                           postdec1	equ	0xFE5
  9707                           plusw1	equ	0xFE3
  9708                           fsr1l	equ	0xFE1
  9709                           indf2	equ	0xFDF
  9710                           postinc2	equ	0xFDE
  9711                           postdec2	equ	0xFDD
  9712                           plusw2	equ	0xFDB
  9713                           fsr2h	equ	0xFDA
  9714                           fsr2l	equ	0xFD9
  9715                           status	equ	0xFD8
  9716                           
  9717 ;; *************** function ___ftge *****************
  9718 ;; Defined at:
  9719 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  9720 ;; Parameters:    Size  Location     Type
  9721 ;;  ff1             3   20[BANK0 ] float 
  9722 ;;  ff2             3   23[BANK0 ] float 
  9723 ;; Auto vars:     Size  Location     Type
  9724 ;;		None
  9725 ;; Return value:  Size  Location     Type
  9726 ;;		None               void
  9727 ;; Registers used:
  9728 ;;		wreg, status,2, status,0
  9729 ;; Tracked objects:
  9730 ;;		On entry : 0/0
  9731 ;;		On exit  : 0/0
  9732 ;;		Unchanged: 0/0
  9733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9734 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9736 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9737 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9738 ;;Total ram usage:        9 bytes
  9739 ;; Hardware stack levels used:    1
  9740 ;; Hardware stack levels required when called:    4
  9741 ;; This function calls:
  9742 ;;		Nothing
  9743 ;; This function is called by:
  9744 ;;		_packageCompartment
  9745 ;;		_clearing
  9746 ;; This function uses a non-reentrant model
  9747 ;;
  9748                           
  9749                           	psect	text23
  9750  002BA6                     __ptext23:
  9751                           	opt stack 0
  9752  002BA6                     ___ftge:
  9753                           	opt stack 23
  9754                           
  9755                           ; BSR set to: 0
  9756                           ;incstack = 0
  9757  002BA6  0100               	movlb	0	; () banked
  9758  002BA8  AF96               	btfss	(___ftge@ff1+2)& (0+255),7,b
  9759  002BAA  D016               	goto	l1151
  9760                           
  9761                           ; BSR set to: 0
  9762  002BAC  C094  F09A         	movff	___ftge@ff1,??___ftge
  9763  002BB0  C095  F09B         	movff	___ftge@ff1+1,??___ftge+1
  9764  002BB4  C096  F09C         	movff	___ftge@ff1+2,??___ftge+2
  9765  002BB8  1F9A               	comf	??___ftge& (0+255),f,b
  9766  002BBA  1F9B               	comf	(??___ftge+1)& (0+255),f,b
  9767  002BBC  1F9C               	comf	(??___ftge+2)& (0+255),f,b
  9768  002BBE  2B9A               	incf	??___ftge& (0+255),f,b
  9769  002BC0  0E00               	movlw	0
  9770  002BC2  239B               	addwfc	(??___ftge+1)& (0+255),f,b
  9771  002BC4  239C               	addwfc	(??___ftge+2)& (0+255),f,b
  9772  002BC6  0E00               	movlw	0
  9773  002BC8  259A               	addwf	??___ftge& (0+255),w,b
  9774  002BCA  6F94               	movwf	___ftge@ff1& (0+255),b
  9775  002BCC  0E00               	movlw	0
  9776  002BCE  219B               	addwfc	(??___ftge+1)& (0+255),w,b
  9777  002BD0  6F95               	movwf	(___ftge@ff1+1)& (0+255),b
  9778  002BD2  0E80               	movlw	128
  9779  002BD4  219C               	addwfc	(??___ftge+2)& (0+255),w,b
  9780  002BD6  6F96               	movwf	(___ftge@ff1+2)& (0+255),b
  9781  002BD8                     l1151:
  9782                           
  9783                           ; BSR set to: 0
  9784                           
  9785                           ; BSR set to: 0
  9786  002BD8  AF99               	btfss	(___ftge@ff2+2)& (0+255),7,b
  9787  002BDA  D016               	goto	l1152
  9788                           
  9789                           ; BSR set to: 0
  9790  002BDC  C097  F09A         	movff	___ftge@ff2,??___ftge
  9791  002BE0  C098  F09B         	movff	___ftge@ff2+1,??___ftge+1
  9792  002BE4  C099  F09C         	movff	___ftge@ff2+2,??___ftge+2
  9793  002BE8  1F9A               	comf	??___ftge& (0+255),f,b
  9794  002BEA  1F9B               	comf	(??___ftge+1)& (0+255),f,b
  9795  002BEC  1F9C               	comf	(??___ftge+2)& (0+255),f,b
  9796  002BEE  2B9A               	incf	??___ftge& (0+255),f,b
  9797  002BF0  0E00               	movlw	0
  9798  002BF2  239B               	addwfc	(??___ftge+1)& (0+255),f,b
  9799  002BF4  239C               	addwfc	(??___ftge+2)& (0+255),f,b
  9800  002BF6  0E00               	movlw	0
  9801  002BF8  259A               	addwf	??___ftge& (0+255),w,b
  9802  002BFA  6F97               	movwf	___ftge@ff2& (0+255),b
  9803  002BFC  0E00               	movlw	0
  9804  002BFE  219B               	addwfc	(??___ftge+1)& (0+255),w,b
  9805  002C00  6F98               	movwf	(___ftge@ff2+1)& (0+255),b
  9806  002C02  0E80               	movlw	128
  9807  002C04  219C               	addwfc	(??___ftge+2)& (0+255),w,b
  9808  002C06  6F99               	movwf	(___ftge@ff2+2)& (0+255),b
  9809  002C08                     l1152:
  9810                           
  9811                           ; BSR set to: 0
  9812                           
  9813                           ; BSR set to: 0
  9814  002C08  0E00               	movlw	0
  9815  002C0A  1B94               	xorwf	___ftge@ff1& (0+255),f,b
  9816  002C0C  0E00               	movlw	0
  9817  002C0E  1B95               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  9818  002C10  0E80               	movlw	128
  9819  002C12  1B96               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  9820                           
  9821                           ; BSR set to: 0
  9822  002C14  0E00               	movlw	0
  9823  002C16  1B97               	xorwf	___ftge@ff2& (0+255),f,b
  9824  002C18  0E00               	movlw	0
  9825  002C1A  1B98               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  9826  002C1C  0E80               	movlw	128
  9827  002C1E  1B99               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  9828  002C20  5197               	movf	___ftge@ff2& (0+255),w,b
  9829  002C22  5D94               	subwf	___ftge@ff1& (0+255),w,b
  9830  002C24  5198               	movf	(___ftge@ff2+1)& (0+255),w,b
  9831  002C26  5995               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  9832  002C28  5199               	movf	(___ftge@ff2+2)& (0+255),w,b
  9833  002C2A  5996               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  9834  002C2C  B0D8               	btfsc	status,0,c
  9835  002C2E  D002               	goto	l4954
  9836                           
  9837                           ; BSR set to: 0
  9838  002C30  90D8               	bcf	status,0,c
  9839  002C32  0012               	return	
  9840  002C34                     l4954:
  9841                           
  9842                           ; BSR set to: 0
  9843                           
  9844                           ; BSR set to: 0
  9845  002C34  80D8               	bsf	status,0,c
  9846                           
  9847                           ; BSR set to: 0
  9848  002C36  0012               	return	
  9849  002C38                     __end_of___ftge:
  9850                           	opt stack 0
  9851                           tosu	equ	0xFFF
  9852                           tosh	equ	0xFFE
  9853                           tosl	equ	0xFFD
  9854                           pclath	equ	0xFFA
  9855                           tblptru	equ	0xFF8
  9856                           tblptrh	equ	0xFF7
  9857                           tblptrl	equ	0xFF6
  9858                           tablat	equ	0xFF5
  9859                           prodh	equ	0xFF4
  9860                           prodl	equ	0xFF3
  9861                           intcon	equ	0xFF2
  9862                           indf0	equ	0xFEF
  9863                           postinc0	equ	0xFEE
  9864                           fsr0h	equ	0xFEA
  9865                           fsr0l	equ	0xFE9
  9866                           wreg	equ	0xFE8
  9867                           postdec1	equ	0xFE5
  9868                           plusw1	equ	0xFE3
  9869                           fsr1l	equ	0xFE1
  9870                           indf2	equ	0xFDF
  9871                           postinc2	equ	0xFDE
  9872                           postdec2	equ	0xFDD
  9873                           plusw2	equ	0xFDB
  9874                           fsr2h	equ	0xFDA
  9875                           fsr2l	equ	0xFD9
  9876                           status	equ	0xFD8
  9877                           
  9878 ;; *************** function ___ftadd *****************
  9879 ;; Defined at:
  9880 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  9881 ;; Parameters:    Size  Location     Type
  9882 ;;  f1              3    8[BANK0 ] float 
  9883 ;;  f2              3   11[BANK0 ] float 
  9884 ;; Auto vars:     Size  Location     Type
  9885 ;;  exp1            1   19[BANK0 ] unsigned char 
  9886 ;;  exp2            1   18[BANK0 ] unsigned char 
  9887 ;;  sign            1   17[BANK0 ] unsigned char 
  9888 ;; Return value:  Size  Location     Type
  9889 ;;                  3    8[BANK0 ] float 
  9890 ;; Registers used:
  9891 ;;		wreg, status,2, status,0, cstack
  9892 ;; Tracked objects:
  9893 ;;		On entry : 0/0
  9894 ;;		On exit  : 0/0
  9895 ;;		Unchanged: 0/0
  9896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9897 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9898 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9899 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9900 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9901 ;;Total ram usage:       12 bytes
  9902 ;; Hardware stack levels used:    1
  9903 ;; Hardware stack levels required when called:    5
  9904 ;; This function calls:
  9905 ;;		___ftpack
  9906 ;; This function is called by:
  9907 ;;		_packageCompartment
  9908 ;;		_clearing
  9909 ;; This function uses a non-reentrant model
  9910 ;;
  9911                           
  9912                           	psect	text24
  9913  002242                     __ptext24:
  9914                           	opt stack 0
  9915  002242                     ___ftadd:
  9916                           	opt stack 22
  9917                           
  9918                           ; BSR set to: 0
  9919                           ;incstack = 0
  9920  002242  C08A  F08E         	movff	___ftadd@f1+2,??___ftadd
  9921  002246  0100               	movlb	0	; () banked
  9922  002248  6B8F               	clrf	(??___ftadd+1)& (0+255),b
  9923  00224A  6B90               	clrf	(??___ftadd+2)& (0+255),b
  9924  00224C  3589               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  9925  00224E  378E               	rlcf	??___ftadd& (0+255),f,b
  9926  002250  E301               	bnc	u6471
  9927  002252  818F               	bsf	(??___ftadd+1)& (0+255),0,b
  9928  002254                     u6471:
  9929  002254  518E               	movf	??___ftadd& (0+255),w,b
  9930  002256  6F93               	movwf	___ftadd@exp1& (0+255),b
  9931  002258  C08D  F08E         	movff	___ftadd@f2+2,??___ftadd
  9932  00225C  6B8F               	clrf	(??___ftadd+1)& (0+255),b
  9933  00225E  6B90               	clrf	(??___ftadd+2)& (0+255),b
  9934  002260  358C               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  9935  002262  378E               	rlcf	??___ftadd& (0+255),f,b
  9936  002264  E301               	bnc	u6481
  9937  002266  818F               	bsf	(??___ftadd+1)& (0+255),0,b
  9938  002268                     u6481:
  9939  002268  518E               	movf	??___ftadd& (0+255),w,b
  9940  00226A  6F92               	movwf	___ftadd@exp2& (0+255),b
  9941                           
  9942                           ; BSR set to: 0
  9943  00226C  5193               	movf	___ftadd@exp1& (0+255),w,b
  9944  00226E  B4D8               	btfsc	status,2,c
  9945  002270  D00B               	goto	u6510
  9946                           
  9947                           ; BSR set to: 0
  9948  002272  5192               	movf	___ftadd@exp2& (0+255),w,b
  9949  002274  5D93               	subwf	___ftadd@exp1& (0+255),w,b
  9950  002276  B0D8               	btfsc	status,0,c
  9951  002278  D00E               	goto	l1110
  9952                           
  9953                           ; BSR set to: 0
  9954  00227A  5193               	movf	___ftadd@exp1& (0+255),w,b
  9955  00227C  0800               	sublw	0
  9956  00227E  2592               	addwf	___ftadd@exp2& (0+255),w,b
  9957  002280  6F8E               	movwf	??___ftadd& (0+255),b
  9958  002282  0E18               	movlw	24
  9959  002284  658E               	cpfsgt	??___ftadd& (0+255),b
  9960  002286  D007               	goto	l1110
  9961  002288                     u6510:
  9962                           
  9963                           ; BSR set to: 0
  9964  002288  C08B  F088         	movff	___ftadd@f2,?___ftadd
  9965  00228C  C08C  F089         	movff	___ftadd@f2+1,?___ftadd+1
  9966  002290  C08D  F08A         	movff	___ftadd@f2+2,?___ftadd+2
  9967  002294  0012               	return	
  9968  002296                     l1110:
  9969                           
  9970                           ; BSR set to: 0
  9971                           
  9972                           ; BSR set to: 0
  9973  002296  5192               	movf	___ftadd@exp2& (0+255),w,b
  9974  002298  B4D8               	btfsc	status,2,c
  9975  00229A  D00B               	goto	u6540
  9976                           
  9977                           ; BSR set to: 0
  9978  00229C  5193               	movf	___ftadd@exp1& (0+255),w,b
  9979  00229E  5D92               	subwf	___ftadd@exp2& (0+255),w,b
  9980  0022A0  B0D8               	btfsc	status,0,c
  9981  0022A2  D00E               	goto	l1114
  9982                           
  9983                           ; BSR set to: 0
  9984  0022A4  5192               	movf	___ftadd@exp2& (0+255),w,b
  9985  0022A6  0800               	sublw	0
  9986  0022A8  2593               	addwf	___ftadd@exp1& (0+255),w,b
  9987  0022AA  6F8E               	movwf	??___ftadd& (0+255),b
  9988  0022AC  0E18               	movlw	24
  9989  0022AE  658E               	cpfsgt	??___ftadd& (0+255),b
  9990  0022B0  D007               	goto	l1114
  9991  0022B2                     u6540:
  9992                           
  9993                           ; BSR set to: 0
  9994  0022B2  C088  F088         	movff	___ftadd@f1,?___ftadd
  9995  0022B6  C089  F089         	movff	___ftadd@f1+1,?___ftadd+1
  9996  0022BA  C08A  F08A         	movff	___ftadd@f1+2,?___ftadd+2
  9997  0022BE  0012               	return	
  9998  0022C0                     l1114:
  9999                           
 10000                           ; BSR set to: 0
 10001                           
 10002                           ; BSR set to: 0
 10003  0022C0  0E06               	movlw	6
 10004  0022C2  6F91               	movwf	___ftadd@sign& (0+255),b
 10005                           
 10006                           ; BSR set to: 0
 10007  0022C4  BF8A               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 10008                           
 10009                           ; BSR set to: 0
 10010  0022C6  8F91               	bsf	___ftadd@sign& (0+255),7,b
 10011                           
 10012                           ; BSR set to: 0
 10013                           
 10014                           ; BSR set to: 0
 10015  0022C8  BF8D               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 10016                           
 10017                           ; BSR set to: 0
 10018  0022CA  8D91               	bsf	___ftadd@sign& (0+255),6,b
 10019                           
 10020                           ; BSR set to: 0
 10021  0022CC  8F89               	bsf	(___ftadd@f1+1)& (0+255),7,b
 10022                           
 10023                           ; BSR set to: 0
 10024  0022CE  0EFF               	movlw	255
 10025  0022D0  1788               	andwf	___ftadd@f1& (0+255),f,b
 10026  0022D2  0EFF               	movlw	255
 10027  0022D4  1789               	andwf	(___ftadd@f1+1)& (0+255),f,b
 10028  0022D6  0E00               	movlw	0
 10029  0022D8  178A               	andwf	(___ftadd@f1+2)& (0+255),f,b
 10030  0022DA  8F8C               	bsf	(___ftadd@f2+1)& (0+255),7,b
 10031                           
 10032                           ; BSR set to: 0
 10033  0022DC  0EFF               	movlw	255
 10034  0022DE  178B               	andwf	___ftadd@f2& (0+255),f,b
 10035  0022E0  0EFF               	movlw	255
 10036  0022E2  178C               	andwf	(___ftadd@f2+1)& (0+255),f,b
 10037  0022E4  0E00               	movlw	0
 10038  0022E6  178D               	andwf	(___ftadd@f2+2)& (0+255),f,b
 10039                           
 10040                           ; BSR set to: 0
 10041  0022E8  5192               	movf	___ftadd@exp2& (0+255),w,b
 10042  0022EA  5D93               	subwf	___ftadd@exp1& (0+255),w,b
 10043  0022EC  B0D8               	btfsc	status,0,c
 10044  0022EE  D01B               	goto	l1119
 10045  0022F0                     u6570:
 10046                           
 10047                           ; BSR set to: 0
 10048                           
 10049                           ; BSR set to: 0
 10050  0022F0  90D8               	bcf	status,0,c
 10051  0022F2  378B               	rlcf	___ftadd@f2& (0+255),f,b
 10052  0022F4  378C               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 10053  0022F6  378D               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 10054  0022F8  0792               	decf	___ftadd@exp2& (0+255),f,b
 10055                           
 10056                           ; BSR set to: 0
 10057  0022FA  5193               	movf	___ftadd@exp1& (0+255),w,b
 10058  0022FC  1992               	xorwf	___ftadd@exp2& (0+255),w,b
 10059  0022FE  B4D8               	btfsc	status,2,c
 10060  002300  D00D               	goto	l1124
 10061                           
 10062                           ; BSR set to: 0
 10063  002302  0791               	decf	___ftadd@sign& (0+255),f,b
 10064  002304  C091  F08E         	movff	___ftadd@sign,??___ftadd
 10065  002308  0E07               	movlw	7
 10066  00230A  178E               	andwf	??___ftadd& (0+255),f,b
 10067  00230C  B4D8               	btfsc	status,2,c
 10068  00230E  D006               	goto	l1124
 10069  002310  D7EF               	goto	u6570
 10070  002312                     
 10071                           ; BSR set to: 0
 10072                           
 10073                           ; BSR set to: 0
 10074  002312  90D8               	bcf	status,0,c
 10075  002314  338A               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 10076  002316  3389               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 10077  002318  3388               	rrcf	___ftadd@f1& (0+255),f,b
 10078  00231A  2B93               	incf	___ftadd@exp1& (0+255),f,b
 10079  00231C                     l1124:
 10080                           
 10081                           ; BSR set to: 0
 10082                           
 10083                           ; BSR set to: 0
 10084  00231C  5192               	movf	___ftadd@exp2& (0+255),w,b
 10085  00231E  1993               	xorwf	___ftadd@exp1& (0+255),w,b
 10086  002320  B4D8               	btfsc	status,2,c
 10087  002322  D01F               	goto	u6640
 10088  002324  D7F6               	goto	l1125
 10089  002326                     l1119:
 10090                           
 10091                           ; BSR set to: 0
 10092                           
 10093                           ; BSR set to: 0
 10094  002326  5193               	movf	___ftadd@exp1& (0+255),w,b
 10095  002328  5D92               	subwf	___ftadd@exp2& (0+255),w,b
 10096  00232A  B0D8               	btfsc	status,0,c
 10097  00232C  D01A               	goto	u6640
 10098  00232E                     u6610:
 10099                           
 10100                           ; BSR set to: 0
 10101                           
 10102                           ; BSR set to: 0
 10103  00232E  90D8               	bcf	status,0,c
 10104  002330  3788               	rlcf	___ftadd@f1& (0+255),f,b
 10105  002332  3789               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 10106  002334  378A               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 10107  002336  0793               	decf	___ftadd@exp1& (0+255),f,b
 10108                           
 10109                           ; BSR set to: 0
 10110  002338  5193               	movf	___ftadd@exp1& (0+255),w,b
 10111  00233A  1992               	xorwf	___ftadd@exp2& (0+255),w,b
 10112  00233C  B4D8               	btfsc	status,2,c
 10113  00233E  D00D               	goto	l1133
 10114                           
 10115                           ; BSR set to: 0
 10116  002340  0791               	decf	___ftadd@sign& (0+255),f,b
 10117  002342  C091  F08E         	movff	___ftadd@sign,??___ftadd
 10118  002346  0E07               	movlw	7
 10119  002348  178E               	andwf	??___ftadd& (0+255),f,b
 10120  00234A  B4D8               	btfsc	status,2,c
 10121  00234C  D006               	goto	l1133
 10122  00234E  D7EF               	goto	u6610
 10123  002350                     
 10124                           ; BSR set to: 0
 10125                           
 10126                           ; BSR set to: 0
 10127  002350  90D8               	bcf	status,0,c
 10128  002352  338D               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 10129  002354  338C               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 10130  002356  338B               	rrcf	___ftadd@f2& (0+255),f,b
 10131  002358  2B92               	incf	___ftadd@exp2& (0+255),f,b
 10132  00235A                     l1133:
 10133                           
 10134                           ; BSR set to: 0
 10135                           
 10136                           ; BSR set to: 0
 10137  00235A  5192               	movf	___ftadd@exp2& (0+255),w,b
 10138  00235C  1993               	xorwf	___ftadd@exp1& (0+255),w,b
 10139  00235E  A4D8               	btfss	status,2,c
 10140  002360  D7F7               	goto	l1134
 10141  002362                     u6640:
 10142                           
 10143                           ; BSR set to: 0
 10144                           
 10145                           ; BSR set to: 0
 10146                           
 10147                           ; BSR set to: 0
 10148  002362  AF91               	btfss	___ftadd@sign& (0+255),7,b
 10149  002364  D00C               	goto	l1136
 10150                           
 10151                           ; BSR set to: 0
 10152  002366  0EFF               	movlw	255
 10153  002368  1B88               	xorwf	___ftadd@f1& (0+255),f,b
 10154  00236A  0EFF               	movlw	255
 10155  00236C  1B89               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 10156  00236E  0EFF               	movlw	255
 10157  002370  1B8A               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 10158  002372  0E01               	movlw	1
 10159  002374  2788               	addwf	___ftadd@f1& (0+255),f,b
 10160  002376  0E00               	movlw	0
 10161  002378  2389               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 10162  00237A  0E00               	movlw	0
 10163  00237C  238A               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 10164  00237E                     l1136:
 10165                           
 10166                           ; BSR set to: 0
 10167  00237E  AD91               	btfss	___ftadd@sign& (0+255),6,b
 10168  002380  D00C               	goto	l1137
 10169                           
 10170                           ; BSR set to: 0
 10171  002382  0EFF               	movlw	255
 10172  002384  1B8B               	xorwf	___ftadd@f2& (0+255),f,b
 10173  002386  0EFF               	movlw	255
 10174  002388  1B8C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10175  00238A  0EFF               	movlw	255
 10176  00238C  1B8D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10177  00238E  0E01               	movlw	1
 10178  002390  278B               	addwf	___ftadd@f2& (0+255),f,b
 10179  002392  0E00               	movlw	0
 10180  002394  238C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10181  002396  0E00               	movlw	0
 10182  002398  238D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10183  00239A                     l1137:
 10184                           
 10185                           ; BSR set to: 0
 10186                           
 10187                           ; BSR set to: 0
 10188  00239A  0E00               	movlw	0
 10189  00239C  6F91               	movwf	___ftadd@sign& (0+255),b
 10190                           
 10191                           ; BSR set to: 0
 10192  00239E  5188               	movf	___ftadd@f1& (0+255),w,b
 10193  0023A0  278B               	addwf	___ftadd@f2& (0+255),f,b
 10194  0023A2  5189               	movf	(___ftadd@f1+1)& (0+255),w,b
 10195  0023A4  238C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10196  0023A6  518A               	movf	(___ftadd@f1+2)& (0+255),w,b
 10197  0023A8  238D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10198                           
 10199                           ; BSR set to: 0
 10200  0023AA  AF8D               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10201  0023AC  D00E               	goto	l1138
 10202                           
 10203                           ; BSR set to: 0
 10204  0023AE  0EFF               	movlw	255
 10205  0023B0  1B8B               	xorwf	___ftadd@f2& (0+255),f,b
 10206  0023B2  0EFF               	movlw	255
 10207  0023B4  1B8C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10208  0023B6  0EFF               	movlw	255
 10209  0023B8  1B8D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10210  0023BA  0E01               	movlw	1
 10211  0023BC  278B               	addwf	___ftadd@f2& (0+255),f,b
 10212  0023BE  0E00               	movlw	0
 10213  0023C0  238C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10214  0023C2  0E00               	movlw	0
 10215  0023C4  238D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10216                           
 10217                           ; BSR set to: 0
 10218  0023C6  0E01               	movlw	1
 10219  0023C8  6F91               	movwf	___ftadd@sign& (0+255),b
 10220  0023CA                     l1138:
 10221                           
 10222                           ; BSR set to: 0
 10223                           
 10224                           ; BSR set to: 0
 10225  0023CA  C08B  F080         	movff	___ftadd@f2,___ftpack@arg
 10226  0023CE  C08C  F081         	movff	___ftadd@f2+1,___ftpack@arg+1
 10227  0023D2  C08D  F082         	movff	___ftadd@f2+2,___ftpack@arg+2
 10228  0023D6  C093  F083         	movff	___ftadd@exp1,___ftpack@exp
 10229  0023DA  C091  F084         	movff	___ftadd@sign,___ftpack@sign
 10230  0023DE  EC83  F014         	call	___ftpack	;wreg free
 10231  0023E2  C080  F088         	movff	?___ftpack,?___ftadd
 10232  0023E6  C081  F089         	movff	?___ftpack+1,?___ftadd+1
 10233  0023EA  C082  F08A         	movff	?___ftpack+2,?___ftadd+2
 10234  0023EE  0012               	return	
 10235  0023F0                     __end_of___ftadd:
 10236                           	opt stack 0
 10237                           tosu	equ	0xFFF
 10238                           tosh	equ	0xFFE
 10239                           tosl	equ	0xFFD
 10240                           pclath	equ	0xFFA
 10241                           tblptru	equ	0xFF8
 10242                           tblptrh	equ	0xFF7
 10243                           tblptrl	equ	0xFF6
 10244                           tablat	equ	0xFF5
 10245                           prodh	equ	0xFF4
 10246                           prodl	equ	0xFF3
 10247                           intcon	equ	0xFF2
 10248                           indf0	equ	0xFEF
 10249                           postinc0	equ	0xFEE
 10250                           fsr0h	equ	0xFEA
 10251                           fsr0l	equ	0xFE9
 10252                           wreg	equ	0xFE8
 10253                           postdec1	equ	0xFE5
 10254                           plusw1	equ	0xFE3
 10255                           fsr1l	equ	0xFE1
 10256                           indf2	equ	0xFDF
 10257                           postinc2	equ	0xFDE
 10258                           postdec2	equ	0xFDD
 10259                           plusw2	equ	0xFDB
 10260                           fsr2h	equ	0xFDA
 10261                           fsr2l	equ	0xFD9
 10262                           status	equ	0xFD8
 10263                           
 10264 ;; *************** function ___ftpack *****************
 10265 ;; Defined at:
 10266 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 10267 ;; Parameters:    Size  Location     Type
 10268 ;;  arg             3    0[BANK0 ] unsigned um
 10269 ;;  exp             1    3[BANK0 ] unsigned char 
 10270 ;;  sign            1    4[BANK0 ] unsigned char 
 10271 ;; Auto vars:     Size  Location     Type
 10272 ;;		None
 10273 ;; Return value:  Size  Location     Type
 10274 ;;                  3    0[BANK0 ] float 
 10275 ;; Registers used:
 10276 ;;		wreg, status,2, status,0
 10277 ;; Tracked objects:
 10278 ;;		On entry : 0/0
 10279 ;;		On exit  : 0/0
 10280 ;;		Unchanged: 0/0
 10281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10282 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10284 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10285 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10286 ;;Total ram usage:        8 bytes
 10287 ;; Hardware stack levels used:    1
 10288 ;; Hardware stack levels required when called:    4
 10289 ;; This function calls:
 10290 ;;		Nothing
 10291 ;; This function is called by:
 10292 ;;		___ftadd
 10293 ;; This function uses a non-reentrant model
 10294 ;;
 10295                           
 10296                           	psect	text25
 10297  002906                     __ptext25:
 10298                           	opt stack 0
 10299  002906                     ___ftpack:
 10300                           	opt stack 22
 10301                           
 10302                           ;incstack = 0
 10303  002906  0100               	movlb	0	; () banked
 10304  002908  5183               	movf	___ftpack@exp& (0+255),w,b
 10305  00290A  B4D8               	btfsc	status,2,c
 10306  00290C  D005               	goto	u5710
 10307                           
 10308                           ; BSR set to: 0
 10309  00290E  5180               	movf	___ftpack@arg& (0+255),w,b
 10310  002910  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 10311  002912  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 10312  002914  A4D8               	btfss	status,2,c
 10313  002916  D00C               	goto	l1079
 10314  002918                     u5710:
 10315                           
 10316                           ; BSR set to: 0
 10317                           
 10318                           ; BSR set to: 0
 10319  002918  0E00               	movlw	0
 10320  00291A  6F80               	movwf	?___ftpack& (0+255),b
 10321  00291C  0E00               	movlw	0
 10322  00291E  6F81               	movwf	(?___ftpack+1)& (0+255),b
 10323  002920  0E00               	movlw	0
 10324  002922  6F82               	movwf	(?___ftpack+2)& (0+255),b
 10325                           
 10326                           ; BSR set to: 0
 10327  002924  0012               	return	
 10328  002926                     
 10329                           ; BSR set to: 0
 10330                           
 10331                           ; BSR set to: 0
 10332  002926  2B83               	incf	___ftpack@exp& (0+255),f,b
 10333  002928  90D8               	bcf	status,0,c
 10334  00292A  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 10335  00292C  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 10336  00292E  3380               	rrcf	___ftpack@arg& (0+255),f,b
 10337  002930                     l1079:
 10338                           
 10339                           ; BSR set to: 0
 10340                           
 10341                           ; BSR set to: 0
 10342  002930  0E00               	movlw	0
 10343  002932  1580               	andwf	___ftpack@arg& (0+255),w,b
 10344  002934  6F85               	movwf	??___ftpack& (0+255),b
 10345  002936  0E00               	movlw	0
 10346  002938  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
 10347  00293A  6F86               	movwf	(??___ftpack+1)& (0+255),b
 10348  00293C  0EFE               	movlw	254
 10349  00293E  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
 10350  002940  6F87               	movwf	(??___ftpack+2)& (0+255),b
 10351  002942  5185               	movf	??___ftpack& (0+255),w,b
 10352  002944  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
 10353  002946  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
 10354  002948  B4D8               	btfsc	status,2,c
 10355  00294A  D00C               	goto	l1082
 10356  00294C  D7EC               	goto	l1080
 10357  00294E                     
 10358                           ; BSR set to: 0
 10359                           
 10360                           ; BSR set to: 0
 10361  00294E  2B83               	incf	___ftpack@exp& (0+255),f,b
 10362                           
 10363                           ; BSR set to: 0
 10364  002950  0E01               	movlw	1
 10365  002952  2780               	addwf	___ftpack@arg& (0+255),f,b
 10366  002954  0E00               	movlw	0
 10367  002956  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 10368  002958  0E00               	movlw	0
 10369  00295A  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 10370  00295C  90D8               	bcf	status,0,c
 10371  00295E  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 10372  002960  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 10373  002962  3380               	rrcf	___ftpack@arg& (0+255),f,b
 10374  002964                     l1082:
 10375                           
 10376                           ; BSR set to: 0
 10377                           
 10378                           ; BSR set to: 0
 10379  002964  0E00               	movlw	0
 10380  002966  1580               	andwf	___ftpack@arg& (0+255),w,b
 10381  002968  6F85               	movwf	??___ftpack& (0+255),b
 10382  00296A  0E00               	movlw	0
 10383  00296C  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
 10384  00296E  6F86               	movwf	(??___ftpack+1)& (0+255),b
 10385  002970  0EFF               	movlw	255
 10386  002972  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
 10387  002974  6F87               	movwf	(??___ftpack+2)& (0+255),b
 10388  002976  5185               	movf	??___ftpack& (0+255),w,b
 10389  002978  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
 10390  00297A  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
 10391  00297C  B4D8               	btfsc	status,2,c
 10392  00297E  D006               	goto	l1085
 10393  002980  D7E6               	goto	l1083
 10394  002982                     
 10395                           ; BSR set to: 0
 10396                           
 10397                           ; BSR set to: 0
 10398  002982  0783               	decf	___ftpack@exp& (0+255),f,b
 10399  002984  90D8               	bcf	status,0,c
 10400  002986  3780               	rlcf	___ftpack@arg& (0+255),f,b
 10401  002988  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 10402  00298A  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 10403  00298C                     l1085:
 10404                           
 10405                           ; BSR set to: 0
 10406                           
 10407                           ; BSR set to: 0
 10408  00298C  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
 10409  00298E  D003               	goto	u5750
 10410                           
 10411                           ; BSR set to: 0
 10412  002990  0E02               	movlw	2
 10413  002992  6183               	cpfslt	___ftpack@exp& (0+255),b
 10414  002994  D7F6               	goto	l1086
 10415  002996                     u5750:
 10416                           
 10417                           ; BSR set to: 0
 10418                           
 10419                           ; BSR set to: 0
 10420  002996  A183               	btfss	___ftpack@exp& (0+255),0,b
 10421                           
 10422                           ; BSR set to: 0
 10423  002998  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
 10424                           
 10425                           ; BSR set to: 0
 10426                           
 10427                           ; BSR set to: 0
 10428  00299A  90D8               	bcf	status,0,c
 10429  00299C  3383               	rrcf	___ftpack@exp& (0+255),f,b
 10430  00299E  5183               	movf	___ftpack@exp& (0+255),w,b
 10431  0029A0  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 10432                           
 10433                           ; BSR set to: 0
 10434  0029A2  5184               	movf	___ftpack@sign& (0+255),w,b
 10435  0029A4  A4D8               	btfss	status,2,c
 10436                           
 10437                           ; BSR set to: 0
 10438  0029A6  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
 10439                           
 10440                           ; BSR set to: 0
 10441                           
 10442                           ; BSR set to: 0
 10443  0029A8  C080  F080         	movff	___ftpack@arg,?___ftpack
 10444  0029AC  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
 10445  0029B0  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
 10446  0029B4  0012               	return	
 10447  0029B6                     __end_of___ftpack:
 10448                           	opt stack 0
 10449                           tosu	equ	0xFFF
 10450                           tosh	equ	0xFFE
 10451                           tosl	equ	0xFFD
 10452                           pclath	equ	0xFFA
 10453                           tblptru	equ	0xFF8
 10454                           tblptrh	equ	0xFF7
 10455                           tblptrl	equ	0xFF6
 10456                           tablat	equ	0xFF5
 10457                           prodh	equ	0xFF4
 10458                           prodl	equ	0xFF3
 10459                           intcon	equ	0xFF2
 10460                           indf0	equ	0xFEF
 10461                           postinc0	equ	0xFEE
 10462                           fsr0h	equ	0xFEA
 10463                           fsr0l	equ	0xFE9
 10464                           wreg	equ	0xFE8
 10465                           postdec1	equ	0xFE5
 10466                           plusw1	equ	0xFE3
 10467                           fsr1l	equ	0xFE1
 10468                           indf2	equ	0xFDF
 10469                           postinc2	equ	0xFDE
 10470                           postdec2	equ	0xFDD
 10471                           plusw2	equ	0xFDB
 10472                           fsr2h	equ	0xFDA
 10473                           fsr2l	equ	0xFD9
 10474                           status	equ	0xFD8
 10475                           
 10476 ;; *************** function _I2C_Send *****************
 10477 ;; Defined at:
 10478 ;;		line 83 in file "helpers.c"
 10479 ;; Parameters:    Size  Location     Type
 10480 ;;  address         1    wreg     unsigned char 
 10481 ;;  data            2    3[BANK0 ] PTR unsigned char 
 10482 ;;		 -> STR_23(21), STR_18(14), inputEntry@msg(24), STR_17(25), 
 10483 ;;		 -> STR_14(17), STR_13(17), STR_12(14), STR_11(15), 
 10484 ;;		 -> clearing@instr(2), packaging@msg3(50), packaging@msg2(32), packaging@instr_321(2), 
 10485 ;;		 -> packaging@msg(34), packaging@instr(2), STR_7(33), packageCompartment@instr(2), 
 10486 ;;		 -> STR_6(28), STR_5(19), STR_4(17), STR_3(17), 
 10487 ;;		 -> STR_2(14), STR_1(15), 
 10488 ;; Auto vars:     Size  Location     Type
 10489 ;;  address         1    8[BANK0 ] unsigned char 
 10490 ;;  i               2    9[BANK0 ] int 
 10491 ;; Return value:  Size  Location     Type
 10492 ;;                  1    wreg      void 
 10493 ;; Registers used:
 10494 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10495 ;; Tracked objects:
 10496 ;;		On entry : 0/0
 10497 ;;		On exit  : 0/0
 10498 ;;		Unchanged: 0/0
 10499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10500 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10501 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10502 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10503 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10504 ;;Total ram usage:        8 bytes
 10505 ;; Hardware stack levels used:    1
 10506 ;; Hardware stack levels required when called:    6
 10507 ;; This function calls:
 10508 ;;		_I2C_Master_Start
 10509 ;;		_I2C_Master_Stop
 10510 ;;		_I2C_Master_Write
 10511 ;; This function is called by:
 10512 ;;		_packageCompartment
 10513 ;;		_packaging
 10514 ;;		_clearing
 10515 ;;		_inputEntry
 10516 ;;		_mainMenu
 10517 ;; This function uses a non-reentrant model
 10518 ;;
 10519                           
 10520                           	psect	text26
 10521  002B06                     __ptext26:
 10522                           	opt stack 0
 10523  002B06                     _I2C_Send:
 10524                           	opt stack 21
 10525                           
 10526                           ; BSR set to: 0
 10527                           ;incstack = 0
 10528                           ;I2C_Send@address stored from wreg
 10529  002B06  0100               	movlb	0	; () banked
 10530  002B08  6F88               	movwf	I2C_Send@address& (0+255),b
 10531                           
 10532                           ;helpers.c: 88: int i=0;
 10533  002B0A  0E00               	movlw	0
 10534  002B0C  0100               	movlb	0	; () banked
 10535  002B0E  6F8A               	movwf	(I2C_Send@i+1)& (0+255),b
 10536  002B10  0E00               	movlw	0
 10537  002B12  6F89               	movwf	I2C_Send@i& (0+255),b
 10538                           
 10539                           ; BSR set to: 0
 10540                           ;helpers.c: 90: I2C_Master_Start();
 10541  002B14  ECC2  F019         	call	_I2C_Master_Start	;wreg free
 10542                           
 10543                           ;helpers.c: 91: I2C_Master_Write(address);
 10544  002B18  C088  F081         	movff	I2C_Send@address,I2C_Master_Write@byteToWrite
 10545  002B1C  0100               	movlb	0	; () banked
 10546  002B1E  6B82               	clrf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
 10547  002B20  ECB9  F019         	call	_I2C_Master_Write	;wreg free
 10548                           
 10549                           ;helpers.c: 93: while (data[i] != 0) {
 10550  002B24  D022               	goto	l517
 10551  002B26                     
 10552                           ;helpers.c: 94: I2C_Master_Write(data[i]);
 10553  002B26  0100               	movlb	0	; () banked
 10554  002B28  5189               	movf	I2C_Send@i& (0+255),w,b
 10555  002B2A  2583               	addwf	I2C_Send@data& (0+255),w,b
 10556  002B2C  6F85               	movwf	??_I2C_Send& (0+255),b
 10557  002B2E  518A               	movf	(I2C_Send@i+1)& (0+255),w,b
 10558  002B30  2184               	addwfc	(I2C_Send@data+1)& (0+255),w,b
 10559  002B32  6F86               	movwf	(??_I2C_Send+1)& (0+255),b
 10560  002B34  C085  FFF6         	movff	??_I2C_Send,tblptrl
 10561  002B38  C086  FFF7         	movff	??_I2C_Send+1,tblptrh
 10562  002B3C  0E00               	movlw	low (__mediumconst shr (0+16))
 10563  002B3E  6EF8               	movwf	tblptru,c
 10564  002B40  0E0F               	movlw	(high __ramtop+-1)
 10565  002B42  64F7               	cpfsgt	tblptrh,c
 10566  002B44  D003               	bra	u5967
 10567  002B46  0008               	tblrd		*
 10568  002B48  50F5               	movf	tablat,w,c
 10569  002B4A  D005               	bra	u5960
 10570  002B4C                     u5967:
 10571  002B4C  CFF6 FFE9          	movff	tblptrl,fsr0l
 10572  002B50  CFF7 FFEA          	movff	tblptrh,fsr0h
 10573  002B54  50EF               	movf	indf0,w,c
 10574  002B56                     u5960:
 10575  002B56  0100               	movlb	0	; () banked
 10576  002B58  6F87               	movwf	(??_I2C_Send+2)& (0+255),b
 10577  002B5A  5187               	movf	(??_I2C_Send+2)& (0+255),w,b
 10578  002B5C  6F81               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
 10579  002B5E  6B82               	clrf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
 10580  002B60  ECB9  F019         	call	_I2C_Master_Write	;wreg free
 10581                           
 10582                           ;helpers.c: 95: i++;
 10583  002B64  0100               	movlb	0	; () banked
 10584  002B66  4B89               	infsnz	I2C_Send@i& (0+255),f,b
 10585  002B68  2B8A               	incf	(I2C_Send@i+1)& (0+255),f,b
 10586  002B6A                     l517:
 10587                           
 10588                           ; BSR set to: 0
 10589  002B6A  0100               	movlb	0	; () banked
 10590  002B6C  5189               	movf	I2C_Send@i& (0+255),w,b
 10591  002B6E  2583               	addwf	I2C_Send@data& (0+255),w,b
 10592  002B70  6F85               	movwf	??_I2C_Send& (0+255),b
 10593  002B72  518A               	movf	(I2C_Send@i+1)& (0+255),w,b
 10594  002B74  2184               	addwfc	(I2C_Send@data+1)& (0+255),w,b
 10595  002B76  6F86               	movwf	(??_I2C_Send+1)& (0+255),b
 10596  002B78  C085  FFF6         	movff	??_I2C_Send,tblptrl
 10597  002B7C  C086  FFF7         	movff	??_I2C_Send+1,tblptrh
 10598  002B80  0E00               	movlw	low (__mediumconst shr (0+16))
 10599  002B82  6EF8               	movwf	tblptru,c
 10600  002B84  0E0F               	movlw	(high __ramtop+-1)
 10601  002B86  64F7               	cpfsgt	tblptrh,c
 10602  002B88  D003               	bra	u5977
 10603  002B8A  0008               	tblrd		*
 10604  002B8C  50F5               	movf	tablat,w,c
 10605  002B8E  D005               	bra	u5970
 10606  002B90                     u5977:
 10607  002B90  CFF6 FFE9          	movff	tblptrl,fsr0l
 10608  002B94  CFF7 FFEA          	movff	tblptrh,fsr0h
 10609  002B98  50EF               	movf	indf0,w,c
 10610  002B9A                     u5970:
 10611  002B9A  0900               	iorlw	0
 10612  002B9C  A4D8               	btfss	status,2,c
 10613  002B9E  D7C3               	goto	l518
 10614                           
 10615                           ;helpers.c: 96: }
 10616                           ;helpers.c: 98: I2C_Master_Stop();
 10617  002BA0  ECBE  F019         	call	_I2C_Master_Stop	;wreg free
 10618  002BA4  0012               	return	
 10619  002BA6                     __end_of_I2C_Send:
 10620                           	opt stack 0
 10621                           tosu	equ	0xFFF
 10622                           tosh	equ	0xFFE
 10623                           tosl	equ	0xFFD
 10624                           pclath	equ	0xFFA
 10625                           tblptru	equ	0xFF8
 10626                           tblptrh	equ	0xFF7
 10627                           tblptrl	equ	0xFF6
 10628                           tablat	equ	0xFF5
 10629                           prodh	equ	0xFF4
 10630                           prodl	equ	0xFF3
 10631                           intcon	equ	0xFF2
 10632                           indf0	equ	0xFEF
 10633                           postinc0	equ	0xFEE
 10634                           fsr0h	equ	0xFEA
 10635                           fsr0l	equ	0xFE9
 10636                           wreg	equ	0xFE8
 10637                           postdec1	equ	0xFE5
 10638                           plusw1	equ	0xFE3
 10639                           fsr1l	equ	0xFE1
 10640                           indf2	equ	0xFDF
 10641                           postinc2	equ	0xFDE
 10642                           postdec2	equ	0xFDD
 10643                           plusw2	equ	0xFDB
 10644                           fsr2h	equ	0xFDA
 10645                           fsr2l	equ	0xFD9
 10646                           status	equ	0xFD8
 10647                           
 10648 ;; *************** function _RTC_startOperation *****************
 10649 ;; Defined at:
 10650 ;;		line 55 in file "RTC.c"
 10651 ;; Parameters:    Size  Location     Type
 10652 ;;		None
 10653 ;; Auto vars:     Size  Location     Type
 10654 ;;  time            7    8[BANK0 ] unsigned char [7]
 10655 ;; Return value:  Size  Location     Type
 10656 ;;                  1    wreg      void 
 10657 ;; Registers used:
 10658 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10659 ;; Tracked objects:
 10660 ;;		On entry : 0/0
 10661 ;;		On exit  : 0/0
 10662 ;;		Unchanged: 0/0
 10663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10665 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10666 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10667 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10668 ;;Total ram usage:        9 bytes
 10669 ;; Hardware stack levels used:    1
 10670 ;; Hardware stack levels required when called:    7
 10671 ;; This function calls:
 10672 ;;		_RTC_getTime
 10673 ;; This function is called by:
 10674 ;;		_mainMenu
 10675 ;; This function uses a non-reentrant model
 10676 ;;
 10677                           
 10678                           	psect	text27
 10679  002CC6                     __ptext27:
 10680                           	opt stack 0
 10681  002CC6                     _RTC_startOperation:
 10682                           	opt stack 22
 10683                           
 10684                           ;RTC.c: 57: char time[7];
 10685                           ;RTC.c: 58: RTC_getTime(time);
 10686                           
 10687                           ;incstack = 0
 10688  002CC6  0E88               	movlw	low RTC_startOperation@time
 10689  002CC8  0100               	movlb	0	; () banked
 10690  002CCA  6F83               	movwf	RTC_getTime@time& (0+255),b
 10691  002CCC  0E00               	movlw	high RTC_startOperation@time
 10692  002CCE  6F84               	movwf	(RTC_getTime@time+1)& (0+255),b
 10693  002CD0  EC29  F017         	call	_RTC_getTime	;wreg free
 10694                           
 10695                           ;RTC.c: 59: startTime.h = (time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10;
 10696  002CD4  C08A  F086         	movff	RTC_startOperation@time+2,??_RTC_startOperation
 10697  002CD8  0100               	movlb	0	; () banked
 10698  002CDA  3B86               	swapf	??_RTC_startOperation& (0+255),f,b
 10699  002CDC  0E0F               	movlw	15
 10700  002CDE  1786               	andwf	??_RTC_startOperation& (0+255),f,b
 10701  002CE0  0E0F               	movlw	15
 10702  002CE2  1786               	andwf	??_RTC_startOperation& (0+255),f,b
 10703  002CE4  5186               	movf	??_RTC_startOperation& (0+255),w,b
 10704  002CE6  0D0A               	mullw	10
 10705  002CE8  C08A  F087         	movff	RTC_startOperation@time+2,??_RTC_startOperation+1
 10706  002CEC  0E0F               	movlw	15
 10707  002CEE  1787               	andwf	(??_RTC_startOperation+1)& (0+255),f,b
 10708  002CF0  5187               	movf	(??_RTC_startOperation+1)& (0+255),w,b
 10709  002CF2  24F3               	addwf	prodl,w,c
 10710  002CF4  6E3A               	movwf	_startTime,c
 10711  002CF6  0E00               	movlw	0
 10712  002CF8  20F4               	addwfc	prodh,w,c
 10713  002CFA  6E3B               	movwf	_startTime+1,c
 10714                           
 10715                           ; BSR set to: 0
 10716                           ;RTC.c: 60: startTime.m = (time[1] & 0x0F) + ((time[1] & 0xF0)>>4)*10;
 10717  002CFC  C089  F086         	movff	RTC_startOperation@time+1,??_RTC_startOperation
 10718  002D00  3B86               	swapf	??_RTC_startOperation& (0+255),f,b
 10719  002D02  0E0F               	movlw	15
 10720  002D04  1786               	andwf	??_RTC_startOperation& (0+255),f,b
 10721  002D06  0E0F               	movlw	15
 10722  002D08  1786               	andwf	??_RTC_startOperation& (0+255),f,b
 10723  002D0A  5186               	movf	??_RTC_startOperation& (0+255),w,b
 10724  002D0C  0D0A               	mullw	10
 10725  002D0E  C089  F087         	movff	RTC_startOperation@time+1,??_RTC_startOperation+1
 10726  002D12  0E0F               	movlw	15
 10727  002D14  1787               	andwf	(??_RTC_startOperation+1)& (0+255),f,b
 10728  002D16  5187               	movf	(??_RTC_startOperation+1)& (0+255),w,b
 10729  002D18  24F3               	addwf	prodl,w,c
 10730  002D1A  6E3C               	movwf	_startTime+2,c
 10731  002D1C  0E00               	movlw	0
 10732  002D1E  20F4               	addwfc	prodh,w,c
 10733  002D20  6E3D               	movwf	_startTime+3,c
 10734                           
 10735                           ; BSR set to: 0
 10736                           ;RTC.c: 61: startTime.s = (time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10;
 10737  002D22  C088  F086         	movff	RTC_startOperation@time,??_RTC_startOperation
 10738  002D26  3B86               	swapf	??_RTC_startOperation& (0+255),f,b
 10739  002D28  0E0F               	movlw	15
 10740  002D2A  1786               	andwf	??_RTC_startOperation& (0+255),f,b
 10741  002D2C  0E0F               	movlw	15
 10742  002D2E  1786               	andwf	??_RTC_startOperation& (0+255),f,b
 10743  002D30  5186               	movf	??_RTC_startOperation& (0+255),w,b
 10744  002D32  0D0A               	mullw	10
 10745  002D34  C088  F087         	movff	RTC_startOperation@time,??_RTC_startOperation+1
 10746  002D38  0E0F               	movlw	15
 10747  002D3A  1787               	andwf	(??_RTC_startOperation+1)& (0+255),f,b
 10748  002D3C  5187               	movf	(??_RTC_startOperation+1)& (0+255),w,b
 10749  002D3E  24F3               	addwf	prodl,w,c
 10750  002D40  6E3E               	movwf	_startTime+4,c
 10751  002D42  0E00               	movlw	0
 10752  002D44  20F4               	addwfc	prodh,w,c
 10753  002D46  6E3F               	movwf	_startTime+5,c
 10754                           
 10755                           ; BSR set to: 0
 10756  002D48  0012               	return		;funcret
 10757  002D4A                     __end_of_RTC_startOperation:
 10758                           	opt stack 0
 10759                           tosu	equ	0xFFF
 10760                           tosh	equ	0xFFE
 10761                           tosl	equ	0xFFD
 10762                           pclath	equ	0xFFA
 10763                           tblptru	equ	0xFF8
 10764                           tblptrh	equ	0xFF7
 10765                           tblptrl	equ	0xFF6
 10766                           tablat	equ	0xFF5
 10767                           prodh	equ	0xFF4
 10768                           prodl	equ	0xFF3
 10769                           intcon	equ	0xFF2
 10770                           indf0	equ	0xFEF
 10771                           postinc0	equ	0xFEE
 10772                           fsr0h	equ	0xFEA
 10773                           fsr0l	equ	0xFE9
 10774                           wreg	equ	0xFE8
 10775                           postdec1	equ	0xFE5
 10776                           plusw1	equ	0xFE3
 10777                           fsr1l	equ	0xFE1
 10778                           indf2	equ	0xFDF
 10779                           postinc2	equ	0xFDE
 10780                           postdec2	equ	0xFDD
 10781                           plusw2	equ	0xFDB
 10782                           fsr2h	equ	0xFDA
 10783                           fsr2l	equ	0xFD9
 10784                           status	equ	0xFD8
 10785                           
 10786 ;; *************** function _RTC_getOperatingTime *****************
 10787 ;; Defined at:
 10788 ;;		line 64 in file "RTC.c"
 10789 ;; Parameters:    Size  Location     Type
 10790 ;;		None
 10791 ;; Auto vars:     Size  Location     Type
 10792 ;;  time            7   10[BANK0 ] unsigned char [7]
 10793 ;;  operatingTim    6   19[BANK0 ] struct time
 10794 ;;  res             2   17[BANK0 ] int 
 10795 ;; Return value:  Size  Location     Type
 10796 ;;                  2    6[BANK0 ] int 
 10797 ;; Registers used:
 10798 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10799 ;; Tracked objects:
 10800 ;;		On entry : 0/0
 10801 ;;		On exit  : 0/0
 10802 ;;		Unchanged: 0/0
 10803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10804 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10805 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10806 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10807 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10808 ;;Total ram usage:       19 bytes
 10809 ;; Hardware stack levels used:    1
 10810 ;; Hardware stack levels required when called:    7
 10811 ;; This function calls:
 10812 ;;		_RTC_getTime
 10813 ;;		___wmul
 10814 ;; This function is called by:
 10815 ;;		_mainMenu
 10816 ;; This function uses a non-reentrant model
 10817 ;;
 10818                           
 10819                           	psect	text28
 10820  00259C                     __ptext28:
 10821                           	opt stack 0
 10822  00259C                     _RTC_getOperatingTime:
 10823                           	opt stack 22
 10824                           
 10825                           ;RTC.c: 66: char time[7];
 10826                           ;RTC.c: 67: RTC_getTime(time);
 10827                           
 10828                           ; BSR set to: 0
 10829                           ;incstack = 0
 10830  00259C  0E8A               	movlw	low RTC_getOperatingTime@time
 10831  00259E  0100               	movlb	0	; () banked
 10832  0025A0  6F83               	movwf	RTC_getTime@time& (0+255),b
 10833  0025A2  0E00               	movlw	high RTC_getOperatingTime@time
 10834  0025A4  6F84               	movwf	(RTC_getTime@time+1)& (0+255),b
 10835  0025A6  EC29  F017         	call	_RTC_getTime	;wreg free
 10836                           
 10837                           ;RTC.c: 68: endTime.h = (time[2] & 0x0F) + ((time[2] & 0xF0)>>4)*10;
 10838  0025AA  C08C  F088         	movff	RTC_getOperatingTime@time+2,??_RTC_getOperatingTime
 10839  0025AE  0100               	movlb	0	; () banked
 10840  0025B0  3B88               	swapf	??_RTC_getOperatingTime& (0+255),f,b
 10841  0025B2  0E0F               	movlw	15
 10842  0025B4  1788               	andwf	??_RTC_getOperatingTime& (0+255),f,b
 10843  0025B6  0E0F               	movlw	15
 10844  0025B8  1788               	andwf	??_RTC_getOperatingTime& (0+255),f,b
 10845  0025BA  5188               	movf	??_RTC_getOperatingTime& (0+255),w,b
 10846  0025BC  0D0A               	mullw	10
 10847  0025BE  C08C  F089         	movff	RTC_getOperatingTime@time+2,??_RTC_getOperatingTime+1
 10848  0025C2  0E0F               	movlw	15
 10849  0025C4  1789               	andwf	(??_RTC_getOperatingTime+1)& (0+255),f,b
 10850  0025C6  5189               	movf	(??_RTC_getOperatingTime+1)& (0+255),w,b
 10851  0025C8  24F3               	addwf	prodl,w,c
 10852  0025CA  6E34               	movwf	_endTime,c
 10853  0025CC  0E00               	movlw	0
 10854  0025CE  20F4               	addwfc	prodh,w,c
 10855  0025D0  6E35               	movwf	_endTime+1,c
 10856                           
 10857                           ; BSR set to: 0
 10858                           ;RTC.c: 69: endTime.m = (time[1] & 0x0F) + ((time[1] & 0xF0)>>4)*10;
 10859  0025D2  C08B  F088         	movff	RTC_getOperatingTime@time+1,??_RTC_getOperatingTime
 10860  0025D6  3B88               	swapf	??_RTC_getOperatingTime& (0+255),f,b
 10861  0025D8  0E0F               	movlw	15
 10862  0025DA  1788               	andwf	??_RTC_getOperatingTime& (0+255),f,b
 10863  0025DC  0E0F               	movlw	15
 10864  0025DE  1788               	andwf	??_RTC_getOperatingTime& (0+255),f,b
 10865  0025E0  5188               	movf	??_RTC_getOperatingTime& (0+255),w,b
 10866  0025E2  0D0A               	mullw	10
 10867  0025E4  C08B  F089         	movff	RTC_getOperatingTime@time+1,??_RTC_getOperatingTime+1
 10868  0025E8  0E0F               	movlw	15
 10869  0025EA  1789               	andwf	(??_RTC_getOperatingTime+1)& (0+255),f,b
 10870  0025EC  5189               	movf	(??_RTC_getOperatingTime+1)& (0+255),w,b
 10871  0025EE  24F3               	addwf	prodl,w,c
 10872  0025F0  6E36               	movwf	_endTime+2,c
 10873  0025F2  0E00               	movlw	0
 10874  0025F4  20F4               	addwfc	prodh,w,c
 10875  0025F6  6E37               	movwf	_endTime+3,c
 10876                           
 10877                           ; BSR set to: 0
 10878                           ;RTC.c: 70: endTime.s = (time[0] & 0x0F) + ((time[0] & 0xF0)>>4)*10;
 10879  0025F8  C08A  F088         	movff	RTC_getOperatingTime@time,??_RTC_getOperatingTime
 10880  0025FC  3B88               	swapf	??_RTC_getOperatingTime& (0+255),f,b
 10881  0025FE  0E0F               	movlw	15
 10882  002600  1788               	andwf	??_RTC_getOperatingTime& (0+255),f,b
 10883  002602  0E0F               	movlw	15
 10884  002604  1788               	andwf	??_RTC_getOperatingTime& (0+255),f,b
 10885  002606  5188               	movf	??_RTC_getOperatingTime& (0+255),w,b
 10886  002608  0D0A               	mullw	10
 10887  00260A  C08A  F089         	movff	RTC_getOperatingTime@time,??_RTC_getOperatingTime+1
 10888  00260E  0E0F               	movlw	15
 10889  002610  1789               	andwf	(??_RTC_getOperatingTime+1)& (0+255),f,b
 10890  002612  5189               	movf	(??_RTC_getOperatingTime+1)& (0+255),w,b
 10891  002614  24F3               	addwf	prodl,w,c
 10892  002616  6E38               	movwf	_endTime+4,c
 10893  002618  0E00               	movlw	0
 10894  00261A  20F4               	addwfc	prodh,w,c
 10895  00261C  6E39               	movwf	_endTime+5,c
 10896                           
 10897                           ; BSR set to: 0
 10898                           ;RTC.c: 72: Time operatingTime;
 10899                           ;RTC.c: 73: operatingTime.h = endTime.h - startTime.h;
 10900  00261E  C03A  F088         	movff	_startTime,??_RTC_getOperatingTime
 10901  002622  C03B  F089         	movff	_startTime+1,??_RTC_getOperatingTime+1
 10902  002626  1F88               	comf	??_RTC_getOperatingTime& (0+255),f,b
 10903  002628  1F89               	comf	(??_RTC_getOperatingTime+1)& (0+255),f,b
 10904  00262A  4B88               	infsnz	??_RTC_getOperatingTime& (0+255),f,b
 10905  00262C  2B89               	incf	(??_RTC_getOperatingTime+1)& (0+255),f,b
 10906  00262E  5034               	movf	_endTime,w,c
 10907  002630  2588               	addwf	??_RTC_getOperatingTime& (0+255),w,b
 10908  002632  6F93               	movwf	RTC_getOperatingTime@operatingTime& (0+255),b
 10909  002634  5035               	movf	_endTime+1,w,c
 10910  002636  2189               	addwfc	(??_RTC_getOperatingTime+1)& (0+255),w,b
 10911  002638  6F94               	movwf	(RTC_getOperatingTime@operatingTime+1)& (0+255),b
 10912                           
 10913                           ; BSR set to: 0
 10914                           ;RTC.c: 74: operatingTime.m = endTime.m - startTime.m;
 10915  00263A  EE20  F03C         	lfsr	2,_startTime+2
 10916  00263E  CFDE F088          	movff	postinc2,??_RTC_getOperatingTime
 10917  002642  CFDD F089          	movff	postdec2,??_RTC_getOperatingTime+1
 10918  002646  1F88               	comf	??_RTC_getOperatingTime& (0+255),f,b
 10919  002648  1F89               	comf	(??_RTC_getOperatingTime+1)& (0+255),f,b
 10920  00264A  4B88               	infsnz	??_RTC_getOperatingTime& (0+255),f,b
 10921  00264C  2B89               	incf	(??_RTC_getOperatingTime+1)& (0+255),f,b
 10922  00264E  5036               	movf	_endTime+2,w,c
 10923  002650  2588               	addwf	??_RTC_getOperatingTime& (0+255),w,b
 10924  002652  6F95               	movwf	(RTC_getOperatingTime@operatingTime+2)& (0+255),b
 10925  002654  5037               	movf	_endTime+3,w,c
 10926  002656  2189               	addwfc	(??_RTC_getOperatingTime+1)& (0+255),w,b
 10927  002658  6F96               	movwf	(RTC_getOperatingTime@operatingTime+3)& (0+255),b
 10928                           
 10929                           ; BSR set to: 0
 10930                           ;RTC.c: 75: operatingTime.s = endTime.s - startTime.s;
 10931  00265A  EE20  F03E         	lfsr	2,_startTime+4
 10932  00265E  CFDE F088          	movff	postinc2,??_RTC_getOperatingTime
 10933  002662  CFDD F089          	movff	postdec2,??_RTC_getOperatingTime+1
 10934  002666  1F88               	comf	??_RTC_getOperatingTime& (0+255),f,b
 10935  002668  1F89               	comf	(??_RTC_getOperatingTime+1)& (0+255),f,b
 10936  00266A  4B88               	infsnz	??_RTC_getOperatingTime& (0+255),f,b
 10937  00266C  2B89               	incf	(??_RTC_getOperatingTime+1)& (0+255),f,b
 10938  00266E  5038               	movf	_endTime+4,w,c
 10939  002670  2588               	addwf	??_RTC_getOperatingTime& (0+255),w,b
 10940  002672  6F97               	movwf	(RTC_getOperatingTime@operatingTime+4)& (0+255),b
 10941  002674  5039               	movf	_endTime+5,w,c
 10942  002676  2189               	addwfc	(??_RTC_getOperatingTime+1)& (0+255),w,b
 10943  002678  6F98               	movwf	(RTC_getOperatingTime@operatingTime+5)& (0+255),b
 10944                           
 10945                           ; BSR set to: 0
 10946                           ;RTC.c: 77: int res = 60*60*operatingTime.h + 60*operatingTime.m + operatingTime.s;
 10947  00267A  C093  F080         	movff	RTC_getOperatingTime@operatingTime,___wmul@multiplier
 10948  00267E  C094  F081         	movff	RTC_getOperatingTime@operatingTime+1,___wmul@multiplier+1
 10949  002682  0E0E               	movlw	14
 10950  002684  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10951  002686  0E10               	movlw	16
 10952  002688  6F82               	movwf	___wmul@multiplicand& (0+255),b
 10953  00268A  EC22  F019         	call	___wmul	;wreg free
 10954  00268E  C080  F088         	movff	?___wmul,??_RTC_getOperatingTime
 10955  002692  C081  F089         	movff	?___wmul+1,??_RTC_getOperatingTime+1
 10956  002696  C095  F080         	movff	RTC_getOperatingTime@operatingTime+2,___wmul@multiplier
 10957  00269A  C096  F081         	movff	RTC_getOperatingTime@operatingTime+3,___wmul@multiplier+1
 10958  00269E  0E00               	movlw	0
 10959  0026A0  0100               	movlb	0	; () banked
 10960  0026A2  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10961  0026A4  0E3C               	movlw	60
 10962  0026A6  6F82               	movwf	___wmul@multiplicand& (0+255),b
 10963  0026A8  EC22  F019         	call	___wmul	;wreg free
 10964  0026AC  0100               	movlb	0	; () banked
 10965  0026AE  5180               	movf	?___wmul& (0+255),w,b
 10966  0026B0  2788               	addwf	??_RTC_getOperatingTime& (0+255),f,b
 10967  0026B2  5181               	movf	(?___wmul+1)& (0+255),w,b
 10968  0026B4  2389               	addwfc	(??_RTC_getOperatingTime+1)& (0+255),f,b
 10969  0026B6  5197               	movf	(RTC_getOperatingTime@operatingTime+4)& (0+255),w,b
 10970  0026B8  2588               	addwf	??_RTC_getOperatingTime& (0+255),w,b
 10971  0026BA  6F91               	movwf	RTC_getOperatingTime@res& (0+255),b
 10972  0026BC  5198               	movf	(RTC_getOperatingTime@operatingTime+5)& (0+255),w,b
 10973  0026BE  2189               	addwfc	(??_RTC_getOperatingTime+1)& (0+255),w,b
 10974  0026C0  6F92               	movwf	(RTC_getOperatingTime@res+1)& (0+255),b
 10975                           
 10976                           ; BSR set to: 0
 10977                           ;RTC.c: 78: return res;
 10978  0026C2  C091  F086         	movff	RTC_getOperatingTime@res,?_RTC_getOperatingTime
 10979  0026C6  C092  F087         	movff	RTC_getOperatingTime@res+1,?_RTC_getOperatingTime+1
 10980  0026CA  0012               	return	
 10981  0026CC                     __end_of_RTC_getOperatingTime:
 10982                           	opt stack 0
 10983                           tosu	equ	0xFFF
 10984                           tosh	equ	0xFFE
 10985                           tosl	equ	0xFFD
 10986                           pclath	equ	0xFFA
 10987                           tblptru	equ	0xFF8
 10988                           tblptrh	equ	0xFF7
 10989                           tblptrl	equ	0xFF6
 10990                           tablat	equ	0xFF5
 10991                           prodh	equ	0xFF4
 10992                           prodl	equ	0xFF3
 10993                           intcon	equ	0xFF2
 10994                           indf0	equ	0xFEF
 10995                           postinc0	equ	0xFEE
 10996                           fsr0h	equ	0xFEA
 10997                           fsr0l	equ	0xFE9
 10998                           wreg	equ	0xFE8
 10999                           postdec1	equ	0xFE5
 11000                           plusw1	equ	0xFE3
 11001                           fsr1l	equ	0xFE1
 11002                           indf2	equ	0xFDF
 11003                           postinc2	equ	0xFDE
 11004                           postdec2	equ	0xFDD
 11005                           plusw2	equ	0xFDB
 11006                           fsr2h	equ	0xFDA
 11007                           fsr2l	equ	0xFD9
 11008                           status	equ	0xFD8
 11009                           
 11010 ;; *************** function ___wmul *****************
 11011 ;; Defined at:
 11012 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 11013 ;; Parameters:    Size  Location     Type
 11014 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11015 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11016 ;; Auto vars:     Size  Location     Type
 11017 ;;  product         2    4[BANK0 ] unsigned int 
 11018 ;; Return value:  Size  Location     Type
 11019 ;;                  2    0[BANK0 ] unsigned int 
 11020 ;; Registers used:
 11021 ;;		wreg, status,2, status,0, prodl, prodh
 11022 ;; Tracked objects:
 11023 ;;		On entry : 0/0
 11024 ;;		On exit  : 0/0
 11025 ;;		Unchanged: 0/0
 11026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11027 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11028 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11030 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11031 ;;Total ram usage:        6 bytes
 11032 ;; Hardware stack levels used:    1
 11033 ;; Hardware stack levels required when called:    4
 11034 ;; This function calls:
 11035 ;;		Nothing
 11036 ;; This function is called by:
 11037 ;;		_packaging
 11038 ;;		_inputEntry
 11039 ;;		_RTC_getOperatingTime
 11040 ;;		_RTC_getSeconds
 11041 ;; This function uses a non-reentrant model
 11042 ;;
 11043                           
 11044                           	psect	text29
 11045  003244                     __ptext29:
 11046                           	opt stack 0
 11047  003244                     ___wmul:
 11048                           	opt stack 24
 11049                           
 11050                           ; BSR set to: 0
 11051                           ;incstack = 0
 11052  003244  0100               	movlb	0	; () banked
 11053  003246  5180               	movf	___wmul@multiplier& (0+255),w,b
 11054  003248  0382               	mulwf	___wmul@multiplicand& (0+255),b
 11055  00324A  CFF3 F084          	movff	prodl,___wmul@product
 11056  00324E  CFF4 F085          	movff	prodh,___wmul@product+1
 11057  003252  5180               	movf	___wmul@multiplier& (0+255),w,b
 11058  003254  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 11059  003256  50F3               	movf	prodl,w,c
 11060  003258  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 11061  00325A  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 11062  00325C  0382               	mulwf	___wmul@multiplicand& (0+255),b
 11063  00325E  50F3               	movf	prodl,w,c
 11064  003260  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 11065                           
 11066                           ; BSR set to: 0
 11067  003262  C084  F080         	movff	___wmul@product,?___wmul
 11068  003266  C085  F081         	movff	___wmul@product+1,?___wmul+1
 11069  00326A  0012               	return	
 11070  00326C                     __end_of___wmul:
 11071                           	opt stack 0
 11072                           tosu	equ	0xFFF
 11073                           tosh	equ	0xFFE
 11074                           tosl	equ	0xFFD
 11075                           pclath	equ	0xFFA
 11076                           tblptru	equ	0xFF8
 11077                           tblptrh	equ	0xFF7
 11078                           tblptrl	equ	0xFF6
 11079                           tablat	equ	0xFF5
 11080                           prodh	equ	0xFF4
 11081                           prodl	equ	0xFF3
 11082                           intcon	equ	0xFF2
 11083                           indf0	equ	0xFEF
 11084                           postinc0	equ	0xFEE
 11085                           fsr0h	equ	0xFEA
 11086                           fsr0l	equ	0xFE9
 11087                           wreg	equ	0xFE8
 11088                           postdec1	equ	0xFE5
 11089                           plusw1	equ	0xFE3
 11090                           fsr1l	equ	0xFE1
 11091                           indf2	equ	0xFDF
 11092                           postinc2	equ	0xFDE
 11093                           postdec2	equ	0xFDD
 11094                           plusw2	equ	0xFDB
 11095                           fsr2h	equ	0xFDA
 11096                           fsr2l	equ	0xFD9
 11097                           status	equ	0xFD8
 11098                           
 11099 ;; *************** function _RTC_getTime *****************
 11100 ;; Defined at:
 11101 ;;		line 22 in file "RTC.c"
 11102 ;; Parameters:    Size  Location     Type
 11103 ;;  time            2    3[BANK0 ] PTR unsigned char 
 11104 ;;		 -> RTC_getOperatingTime@time(7), RTC_startOperation@time(7), RTC_getSeconds@time(7), 
 11105 ;; Auto vars:     Size  Location     Type
 11106 ;;  i               1    5[BANK0 ] unsigned char 
 11107 ;; Return value:  Size  Location     Type
 11108 ;;                  1    wreg      void 
 11109 ;; Registers used:
 11110 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11111 ;; Tracked objects:
 11112 ;;		On entry : 0/0
 11113 ;;		On exit  : 0/0
 11114 ;;		Unchanged: 0/0
 11115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11116 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11117 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11119 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11120 ;;Total ram usage:        3 bytes
 11121 ;; Hardware stack levels used:    1
 11122 ;; Hardware stack levels required when called:    6
 11123 ;; This function calls:
 11124 ;;		_I2C_Master_Read
 11125 ;;		_I2C_Master_Start
 11126 ;;		_I2C_Master_Stop
 11127 ;;		_I2C_Master_Write
 11128 ;; This function is called by:
 11129 ;;		_RTC_startOperation
 11130 ;;		_RTC_getOperatingTime
 11131 ;;		_RTC_getSeconds
 11132 ;; This function uses a non-reentrant model
 11133 ;;
 11134                           
 11135                           	psect	text30
 11136  002E52                     __ptext30:
 11137                           	opt stack 0
 11138  002E52                     _RTC_getTime:
 11139                           	opt stack 22
 11140                           
 11141                           ;RTC.c: 24: I2C_Master_Start();
 11142                           
 11143                           ; BSR set to: 0
 11144                           ;incstack = 0
 11145  002E52  ECC2  F019         	call	_I2C_Master_Start	;wreg free
 11146                           
 11147                           ;RTC.c: 25: I2C_Master_Write(0b11010000);
 11148  002E56  0E00               	movlw	0
 11149  002E58  0100               	movlb	0	; () banked
 11150  002E5A  6F82               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
 11151  002E5C  0ED0               	movlw	208
 11152  002E5E  6F81               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
 11153  002E60  ECB9  F019         	call	_I2C_Master_Write	;wreg free
 11154                           
 11155                           ;RTC.c: 26: I2C_Master_Write(0x00);
 11156  002E64  0E00               	movlw	0
 11157  002E66  0100               	movlb	0	; () banked
 11158  002E68  6F82               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
 11159  002E6A  0E00               	movlw	0
 11160  002E6C  6F81               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
 11161  002E6E  ECB9  F019         	call	_I2C_Master_Write	;wreg free
 11162                           
 11163                           ;RTC.c: 27: I2C_Master_Stop();
 11164  002E72  ECBE  F019         	call	_I2C_Master_Stop	;wreg free
 11165                           
 11166                           ;RTC.c: 30: char i;
 11167                           ;RTC.c: 32: I2C_Master_Start();
 11168  002E76  ECC2  F019         	call	_I2C_Master_Start	;wreg free
 11169                           
 11170                           ;RTC.c: 33: I2C_Master_Write(0b11010001);
 11171  002E7A  0E00               	movlw	0
 11172  002E7C  0100               	movlb	0	; () banked
 11173  002E7E  6F82               	movwf	(I2C_Master_Write@byteToWrite+1)& (0+255),b
 11174  002E80  0ED1               	movlw	209
 11175  002E82  6F81               	movwf	I2C_Master_Write@byteToWrite& (0+255),b
 11176  002E84  ECB9  F019         	call	_I2C_Master_Write	;wreg free
 11177                           
 11178                           ;RTC.c: 35: for (i = 0; i < 6; i++) {
 11179  002E88  0E00               	movlw	0
 11180  002E8A  0100               	movlb	0	; () banked
 11181  002E8C  6F85               	movwf	RTC_getTime@i& (0+255),b
 11182  002E8E                     l5622:
 11183                           
 11184                           ; BSR set to: 0
 11185  002E8E  0E05               	movlw	5
 11186  002E90  6585               	cpfsgt	RTC_getTime@i& (0+255),b
 11187  002E92  D001               	goto	l559
 11188  002E94  D00F               	goto	u6940
 11189  002E96                     l559:
 11190                           
 11191                           ; BSR set to: 0
 11192                           ;RTC.c: 36: time[i] = I2C_Master_Read(0);
 11193                           
 11194                           ; BSR set to: 0
 11195  002E96  5185               	movf	RTC_getTime@i& (0+255),w,b
 11196  002E98  0D01               	mullw	1
 11197  002E9A  50F3               	movf	prodl,w,c
 11198  002E9C  2583               	addwf	RTC_getTime@time& (0+255),w,b
 11199  002E9E  6ED9               	movwf	fsr2l,c
 11200  002EA0  50F4               	movf	prodh,w,c
 11201  002EA2  2184               	addwfc	(RTC_getTime@time+1)& (0+255),w,b
 11202  002EA4  6EDA               	movwf	fsr2h,c
 11203  002EA6  0E00               	movlw	0
 11204  002EA8  ECF9  F018         	call	_I2C_Master_Read
 11205  002EAC  6EDF               	movwf	indf2,c
 11206  002EAE  0100               	movlb	0	; () banked
 11207  002EB0  2B85               	incf	RTC_getTime@i& (0+255),f,b
 11208  002EB2  D7ED               	goto	l5622
 11209  002EB4                     u6940:
 11210                           
 11211                           ; BSR set to: 0
 11212                           ;RTC.c: 37: }
 11213                           ;RTC.c: 38: time[6] = I2C_Master_Read(1);
 11214                           
 11215                           ; BSR set to: 0
 11216  002EB4  EE20 F006          	lfsr	2,6
 11217  002EB8  5183               	movf	RTC_getTime@time& (0+255),w,b
 11218  002EBA  26D9               	addwf	fsr2l,f,c
 11219  002EBC  5184               	movf	(RTC_getTime@time+1)& (0+255),w,b
 11220  002EBE  22DA               	addwfc	fsr2h,f,c
 11221  002EC0  0E01               	movlw	1
 11222  002EC2  ECF9  F018         	call	_I2C_Master_Read
 11223  002EC6  6EDF               	movwf	indf2,c
 11224                           
 11225                           ;RTC.c: 39: I2C_Master_Stop();
 11226  002EC8  ECBE  F019         	call	_I2C_Master_Stop	;wreg free
 11227  002ECC  0012               	return		;funcret
 11228  002ECE                     __end_of_RTC_getTime:
 11229                           	opt stack 0
 11230                           tosu	equ	0xFFF
 11231                           tosh	equ	0xFFE
 11232                           tosl	equ	0xFFD
 11233                           pclath	equ	0xFFA
 11234                           tblptru	equ	0xFF8
 11235                           tblptrh	equ	0xFF7
 11236                           tblptrl	equ	0xFF6
 11237                           tablat	equ	0xFF5
 11238                           prodh	equ	0xFF4
 11239                           prodl	equ	0xFF3
 11240                           intcon	equ	0xFF2
 11241                           indf0	equ	0xFEF
 11242                           postinc0	equ	0xFEE
 11243                           fsr0h	equ	0xFEA
 11244                           fsr0l	equ	0xFE9
 11245                           wreg	equ	0xFE8
 11246                           postdec1	equ	0xFE5
 11247                           plusw1	equ	0xFE3
 11248                           fsr1l	equ	0xFE1
 11249                           indf2	equ	0xFDF
 11250                           postinc2	equ	0xFDE
 11251                           postdec2	equ	0xFDD
 11252                           plusw2	equ	0xFDB
 11253                           fsr2h	equ	0xFDA
 11254                           fsr2l	equ	0xFD9
 11255                           status	equ	0xFD8
 11256                           
 11257 ;; *************** function _I2C_Master_Write *****************
 11258 ;; Defined at:
 11259 ;;		line 108 in file "I2C.c"
 11260 ;; Parameters:    Size  Location     Type
 11261 ;;  byteToWrite     2    1[BANK0 ] unsigned int 
 11262 ;; Auto vars:     Size  Location     Type
 11263 ;;		None
 11264 ;; Return value:  Size  Location     Type
 11265 ;;                  1    wreg      void 
 11266 ;; Registers used:
 11267 ;;		wreg, status,2, status,0, cstack
 11268 ;; Tracked objects:
 11269 ;;		On entry : 0/0
 11270 ;;		On exit  : 0/0
 11271 ;;		Unchanged: 0/0
 11272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11273 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11276 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11277 ;;Total ram usage:        2 bytes
 11278 ;; Hardware stack levels used:    1
 11279 ;; Hardware stack levels required when called:    5
 11280 ;; This function calls:
 11281 ;;		_I2C_Master_Wait
 11282 ;; This function is called by:
 11283 ;;		_I2C_Send
 11284 ;;		_RTC_getTime
 11285 ;; This function uses a non-reentrant model
 11286 ;;
 11287                           
 11288                           	psect	text31
 11289  003372                     __ptext31:
 11290                           	opt stack 0
 11291  003372                     _I2C_Master_Write:
 11292                           	opt stack 21
 11293                           
 11294                           ;I2C.c: 116: I2C_Master_Wait();
 11295                           
 11296                           ;incstack = 0
 11297  003372  EC8F  F019         	call	_I2C_Master_Wait	;wreg free
 11298                           
 11299                           ;I2C.c: 117: SSPBUF = byteToWrite;
 11300  003376  C081  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
 11301  00337A  0012               	return		;funcret
 11302  00337C                     __end_of_I2C_Master_Write:
 11303                           	opt stack 0
 11304                           tosu	equ	0xFFF
 11305                           tosh	equ	0xFFE
 11306                           tosl	equ	0xFFD
 11307                           pclath	equ	0xFFA
 11308                           tblptru	equ	0xFF8
 11309                           tblptrh	equ	0xFF7
 11310                           tblptrl	equ	0xFF6
 11311                           tablat	equ	0xFF5
 11312                           prodh	equ	0xFF4
 11313                           prodl	equ	0xFF3
 11314                           intcon	equ	0xFF2
 11315                           indf0	equ	0xFEF
 11316                           postinc0	equ	0xFEE
 11317                           fsr0h	equ	0xFEA
 11318                           fsr0l	equ	0xFE9
 11319                           wreg	equ	0xFE8
 11320                           postdec1	equ	0xFE5
 11321                           plusw1	equ	0xFE3
 11322                           fsr1l	equ	0xFE1
 11323                           indf2	equ	0xFDF
 11324                           postinc2	equ	0xFDE
 11325                           postdec2	equ	0xFDD
 11326                           plusw2	equ	0xFDB
 11327                           fsr2h	equ	0xFDA
 11328                           fsr2l	equ	0xFD9
 11329                           status	equ	0xFD8
 11330                           
 11331 ;; *************** function _I2C_Master_Stop *****************
 11332 ;; Defined at:
 11333 ;;		line 95 in file "I2C.c"
 11334 ;; Parameters:    Size  Location     Type
 11335 ;;		None
 11336 ;; Auto vars:     Size  Location     Type
 11337 ;;		None
 11338 ;; Return value:  Size  Location     Type
 11339 ;;                  1    wreg      void 
 11340 ;; Registers used:
 11341 ;;		wreg, status,2, status,0, cstack
 11342 ;; Tracked objects:
 11343 ;;		On entry : 0/0
 11344 ;;		On exit  : 0/0
 11345 ;;		Unchanged: 0/0
 11346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11350 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11351 ;;Total ram usage:        0 bytes
 11352 ;; Hardware stack levels used:    1
 11353 ;; Hardware stack levels required when called:    5
 11354 ;; This function calls:
 11355 ;;		_I2C_Master_Wait
 11356 ;; This function is called by:
 11357 ;;		_I2C_Send
 11358 ;;		_RTC_getTime
 11359 ;; This function uses a non-reentrant model
 11360 ;;
 11361                           
 11362                           	psect	text32
 11363  00337C                     __ptext32:
 11364                           	opt stack 0
 11365  00337C                     _I2C_Master_Stop:
 11366                           	opt stack 21
 11367                           
 11368                           ;I2C.c: 104: I2C_Master_Wait();
 11369                           
 11370                           ;incstack = 0
 11371  00337C  EC8F  F019         	call	_I2C_Master_Wait	;wreg free
 11372                           
 11373                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
 11374  003380  84C5               	bsf	4037,2,c	;volatile
 11375  003382  0012               	return		;funcret
 11376  003384                     __end_of_I2C_Master_Stop:
 11377                           	opt stack 0
 11378                           tosu	equ	0xFFF
 11379                           tosh	equ	0xFFE
 11380                           tosl	equ	0xFFD
 11381                           pclath	equ	0xFFA
 11382                           tblptru	equ	0xFF8
 11383                           tblptrh	equ	0xFF7
 11384                           tblptrl	equ	0xFF6
 11385                           tablat	equ	0xFF5
 11386                           prodh	equ	0xFF4
 11387                           prodl	equ	0xFF3
 11388                           intcon	equ	0xFF2
 11389                           indf0	equ	0xFEF
 11390                           postinc0	equ	0xFEE
 11391                           fsr0h	equ	0xFEA
 11392                           fsr0l	equ	0xFE9
 11393                           wreg	equ	0xFE8
 11394                           postdec1	equ	0xFE5
 11395                           plusw1	equ	0xFE3
 11396                           fsr1l	equ	0xFE1
 11397                           indf2	equ	0xFDF
 11398                           postinc2	equ	0xFDE
 11399                           postdec2	equ	0xFDD
 11400                           plusw2	equ	0xFDB
 11401                           fsr2h	equ	0xFDA
 11402                           fsr2l	equ	0xFD9
 11403                           status	equ	0xFD8
 11404                           
 11405 ;; *************** function _I2C_Master_Start *****************
 11406 ;; Defined at:
 11407 ;;		line 69 in file "I2C.c"
 11408 ;; Parameters:    Size  Location     Type
 11409 ;;		None
 11410 ;; Auto vars:     Size  Location     Type
 11411 ;;		None
 11412 ;; Return value:  Size  Location     Type
 11413 ;;                  1    wreg      void 
 11414 ;; Registers used:
 11415 ;;		wreg, status,2, status,0, cstack
 11416 ;; Tracked objects:
 11417 ;;		On entry : 0/0
 11418 ;;		On exit  : 0/0
 11419 ;;		Unchanged: 0/0
 11420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11424 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11425 ;;Total ram usage:        0 bytes
 11426 ;; Hardware stack levels used:    1
 11427 ;; Hardware stack levels required when called:    5
 11428 ;; This function calls:
 11429 ;;		_I2C_Master_Wait
 11430 ;; This function is called by:
 11431 ;;		_I2C_Send
 11432 ;;		_RTC_getTime
 11433 ;; This function uses a non-reentrant model
 11434 ;;
 11435                           
 11436                           	psect	text33
 11437  003384                     __ptext33:
 11438                           	opt stack 0
 11439  003384                     _I2C_Master_Start:
 11440                           	opt stack 21
 11441                           
 11442                           ;I2C.c: 78: I2C_Master_Wait();
 11443                           
 11444                           ;incstack = 0
 11445  003384  EC8F  F019         	call	_I2C_Master_Wait	;wreg free
 11446                           
 11447                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
 11448  003388  80C5               	bsf	4037,0,c	;volatile
 11449  00338A  0012               	return		;funcret
 11450  00338C                     __end_of_I2C_Master_Start:
 11451                           	opt stack 0
 11452                           tosu	equ	0xFFF
 11453                           tosh	equ	0xFFE
 11454                           tosl	equ	0xFFD
 11455                           pclath	equ	0xFFA
 11456                           tblptru	equ	0xFF8
 11457                           tblptrh	equ	0xFF7
 11458                           tblptrl	equ	0xFF6
 11459                           tablat	equ	0xFF5
 11460                           prodh	equ	0xFF4
 11461                           prodl	equ	0xFF3
 11462                           intcon	equ	0xFF2
 11463                           indf0	equ	0xFEF
 11464                           postinc0	equ	0xFEE
 11465                           fsr0h	equ	0xFEA
 11466                           fsr0l	equ	0xFE9
 11467                           wreg	equ	0xFE8
 11468                           postdec1	equ	0xFE5
 11469                           plusw1	equ	0xFE3
 11470                           fsr1l	equ	0xFE1
 11471                           indf2	equ	0xFDF
 11472                           postinc2	equ	0xFDE
 11473                           postdec2	equ	0xFDD
 11474                           plusw2	equ	0xFDB
 11475                           fsr2h	equ	0xFDA
 11476                           fsr2l	equ	0xFD9
 11477                           status	equ	0xFD8
 11478                           
 11479 ;; *************** function _I2C_Master_Read *****************
 11480 ;; Defined at:
 11481 ;;		line 120 in file "I2C.c"
 11482 ;; Parameters:    Size  Location     Type
 11483 ;;  ackBit          1    wreg     unsigned char 
 11484 ;; Auto vars:     Size  Location     Type
 11485 ;;  ackBit          1    1[BANK0 ] unsigned char 
 11486 ;;  receivedByte    1    2[BANK0 ] unsigned char 
 11487 ;; Return value:  Size  Location     Type
 11488 ;;                  1    wreg      unsigned char 
 11489 ;; Registers used:
 11490 ;;		wreg, status,2, status,0, cstack
 11491 ;; Tracked objects:
 11492 ;;		On entry : 0/0
 11493 ;;		On exit  : 0/0
 11494 ;;		Unchanged: 0/0
 11495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11497 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11499 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11500 ;;Total ram usage:        2 bytes
 11501 ;; Hardware stack levels used:    1
 11502 ;; Hardware stack levels required when called:    5
 11503 ;; This function calls:
 11504 ;;		_I2C_Master_Wait
 11505 ;; This function is called by:
 11506 ;;		_RTC_getTime
 11507 ;; This function uses a non-reentrant model
 11508 ;;
 11509                           
 11510                           	psect	text34
 11511  0031F2                     __ptext34:
 11512                           	opt stack 0
 11513  0031F2                     _I2C_Master_Read:
 11514                           	opt stack 22
 11515                           
 11516                           ;incstack = 0
 11517                           ;I2C_Master_Read@ackBit stored from wreg
 11518  0031F2  0100               	movlb	0	; () banked
 11519  0031F4  6F81               	movwf	I2C_Master_Read@ackBit& (0+255),b
 11520                           
 11521                           ;I2C.c: 130: unsigned char receivedByte;
 11522                           ;I2C.c: 132: I2C_Master_Wait();
 11523  0031F6  EC8F  F019         	call	_I2C_Master_Wait	;wreg free
 11524                           
 11525                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
 11526  0031FA  86C5               	bsf	4037,3,c	;volatile
 11527                           
 11528                           ;I2C.c: 135: I2C_Master_Wait();
 11529  0031FC  EC8F  F019         	call	_I2C_Master_Wait	;wreg free
 11530                           
 11531                           ;I2C.c: 136: receivedByte = SSPBUF;
 11532  003200  CFC9 F082          	movff	4041,I2C_Master_Read@receivedByte	;volatile
 11533                           
 11534                           ;I2C.c: 138: I2C_Master_Wait();
 11535  003204  EC8F  F019         	call	_I2C_Master_Wait	;wreg free
 11536                           
 11537                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
 11538  003208  0100               	movlb	0	; () banked
 11539  00320A  B181               	btfsc	I2C_Master_Read@ackBit& (0+255),0,b
 11540  00320C  D002               	bra	u5995
 11541  00320E  9AC5               	bcf	4037,5,c	;volatile
 11542  003210  D001               	bra	u5996
 11543  003212                     u5995:
 11544  003212  8AC5               	bsf	4037,5,c	;volatile
 11545  003214                     u5996:
 11546                           
 11547                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
 11548  003214  88C5               	bsf	4037,4,c	;volatile
 11549                           
 11550                           ;I2C.c: 142: return receivedByte;
 11551  003216  0100               	movlb	0	; () banked
 11552  003218  5182               	movf	I2C_Master_Read@receivedByte& (0+255),w,b
 11553  00321A  0012               	return	
 11554  00321C                     __end_of_I2C_Master_Read:
 11555                           	opt stack 0
 11556                           tosu	equ	0xFFF
 11557                           tosh	equ	0xFFE
 11558                           tosl	equ	0xFFD
 11559                           pclath	equ	0xFFA
 11560                           tblptru	equ	0xFF8
 11561                           tblptrh	equ	0xFF7
 11562                           tblptrl	equ	0xFF6
 11563                           tablat	equ	0xFF5
 11564                           prodh	equ	0xFF4
 11565                           prodl	equ	0xFF3
 11566                           intcon	equ	0xFF2
 11567                           indf0	equ	0xFEF
 11568                           postinc0	equ	0xFEE
 11569                           fsr0h	equ	0xFEA
 11570                           fsr0l	equ	0xFE9
 11571                           wreg	equ	0xFE8
 11572                           postdec1	equ	0xFE5
 11573                           plusw1	equ	0xFE3
 11574                           fsr1l	equ	0xFE1
 11575                           indf2	equ	0xFDF
 11576                           postinc2	equ	0xFDE
 11577                           postdec2	equ	0xFDD
 11578                           plusw2	equ	0xFDB
 11579                           fsr2h	equ	0xFDA
 11580                           fsr2l	equ	0xFD9
 11581                           status	equ	0xFD8
 11582                           
 11583 ;; *************** function _I2C_Master_Wait *****************
 11584 ;; Defined at:
 11585 ;;		line 51 in file "I2C.c"
 11586 ;; Parameters:    Size  Location     Type
 11587 ;;		None
 11588 ;; Auto vars:     Size  Location     Type
 11589 ;;		None
 11590 ;; Return value:  Size  Location     Type
 11591 ;;                  1    wreg      void 
 11592 ;; Registers used:
 11593 ;;		wreg, status,2, status,0
 11594 ;; Tracked objects:
 11595 ;;		On entry : 0/0
 11596 ;;		On exit  : 0/0
 11597 ;;		Unchanged: 0/0
 11598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11601 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11602 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11603 ;;Total ram usage:        1 bytes
 11604 ;; Hardware stack levels used:    1
 11605 ;; Hardware stack levels required when called:    4
 11606 ;; This function calls:
 11607 ;;		Nothing
 11608 ;; This function is called by:
 11609 ;;		_I2C_Master_Start
 11610 ;;		_I2C_Master_Stop
 11611 ;;		_I2C_Master_Write
 11612 ;;		_I2C_Master_Read
 11613 ;;		_I2C_Master_RepeatedStart
 11614 ;; This function uses a non-reentrant model
 11615 ;;
 11616                           
 11617                           	psect	text35
 11618  00331E                     __ptext35:
 11619                           	opt stack 0
 11620  00331E                     _I2C_Master_Wait:
 11621                           	opt stack 21
 11622                           
 11623                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 11624                           
 11625                           ; BSR set to: 0
 11626                           ;incstack = 0
 11627  00331E  B4C7               	btfsc	4039,2,c	;volatile
 11628  003320  D7FE               	goto	_I2C_Master_Wait
 11629  003322  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
 11630  003326  0E1F               	movlw	31
 11631  003328  0100               	movlb	0	; () banked
 11632  00332A  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
 11633  00332C  B4D8               	btfsc	status,2,c
 11634  00332E  0012               	return	
 11635  003330  D7F6               	goto	_I2C_Master_Wait
 11636  003332                     __end_of_I2C_Master_Wait:
 11637                           	opt stack 0
 11638                           tosu	equ	0xFFF
 11639                           tosh	equ	0xFFE
 11640                           tosl	equ	0xFFD
 11641                           pclath	equ	0xFFA
 11642                           tblptru	equ	0xFF8
 11643                           tblptrh	equ	0xFF7
 11644                           tblptrl	equ	0xFF6
 11645                           tablat	equ	0xFF5
 11646                           prodh	equ	0xFF4
 11647                           prodl	equ	0xFF3
 11648                           intcon	equ	0xFF2
 11649                           indf0	equ	0xFEF
 11650                           postinc0	equ	0xFEE
 11651                           fsr0h	equ	0xFEA
 11652                           fsr0l	equ	0xFE9
 11653                           wreg	equ	0xFE8
 11654                           postdec1	equ	0xFE5
 11655                           plusw1	equ	0xFE3
 11656                           fsr1l	equ	0xFE1
 11657                           indf2	equ	0xFDF
 11658                           postinc2	equ	0xFDE
 11659                           postdec2	equ	0xFDD
 11660                           plusw2	equ	0xFDB
 11661                           fsr2h	equ	0xFDA
 11662                           fsr2l	equ	0xFD9
 11663                           status	equ	0xFD8
 11664                           
 11665 ;; *************** function _initLCD *****************
 11666 ;; Defined at:
 11667 ;;		line 61 in file "lcd.c"
 11668 ;; Parameters:    Size  Location     Type
 11669 ;;		None
 11670 ;; Auto vars:     Size  Location     Type
 11671 ;;		None
 11672 ;; Return value:  Size  Location     Type
 11673 ;;                  1    wreg      void 
 11674 ;; Registers used:
 11675 ;;		wreg, status,2, status,0, cstack
 11676 ;; Tracked objects:
 11677 ;;		On entry : 0/0
 11678 ;;		On exit  : 0/0
 11679 ;;		Unchanged: 0/0
 11680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11683 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11684 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11685 ;;Total ram usage:        1 bytes
 11686 ;; Hardware stack levels used:    1
 11687 ;; Hardware stack levels required when called:    6
 11688 ;; This function calls:
 11689 ;;		_lcdInst
 11690 ;; This function is called by:
 11691 ;;		_main
 11692 ;; This function uses a non-reentrant model
 11693 ;;
 11694                           
 11695                           	psect	text36
 11696  003000                     __ptext36:
 11697                           	opt stack 0
 11698  003000                     _initLCD:
 11699                           	opt stack 24
 11700                           
 11701                           ;lcd.c: 69: _delay((unsigned long)((15)*(40000000/4000.0)));
 11702                           
 11703                           ; BSR set to: 0
 11704                           ;incstack = 0
 11705  003000  0EC3               	movlw	195
 11706  003002  0100               	movlb	0	; () banked
 11707  003004  6F83               	movwf	??_initLCD& (0+255),b
 11708  003006  0ECD               	movlw	205
 11709  003008                     u8077:
 11710  003008  2EE8               	decfsz	wreg,f,c
 11711  00300A  D7FE               	bra	u8077
 11712  00300C  2F83               	decfsz	??_initLCD& (0+255),f,b
 11713  00300E  D7FC               	bra	u8077
 11714                           
 11715                           ;lcd.c: 70: lcdInst(0b00110011);
 11716  003010  0E33               	movlw	51
 11717  003012  EC83  F019         	call	_lcdInst
 11718                           
 11719                           ;lcd.c: 71: lcdInst(0b00110010);
 11720  003016  0E32               	movlw	50
 11721  003018  EC83  F019         	call	_lcdInst
 11722                           
 11723                           ;lcd.c: 72: lcdInst(0b00101000);
 11724  00301C  0E28               	movlw	40
 11725  00301E  EC83  F019         	call	_lcdInst
 11726                           
 11727                           ;lcd.c: 73: lcdInst(0b00001111);
 11728  003022  0E0F               	movlw	15
 11729  003024  EC83  F019         	call	_lcdInst
 11730                           
 11731                           ;lcd.c: 74: lcdInst(0b00000110);
 11732  003028  0E06               	movlw	6
 11733  00302A  EC83  F019         	call	_lcdInst
 11734                           
 11735                           ;lcd.c: 75: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 11736  00302E  0E01               	movlw	1
 11737  003030  EC83  F019         	call	_lcdInst
 11738  003034  0EC3               	movlw	195
 11739  003036  0100               	movlb	0	; () banked
 11740  003038  6F83               	movwf	??_initLCD& (0+255),b
 11741  00303A  0ECD               	movlw	205
 11742  00303C                     u8087:
 11743  00303C  2EE8               	decfsz	wreg,f,c
 11744  00303E  D7FE               	bra	u8087
 11745  003040  2F83               	decfsz	??_initLCD& (0+255),f,b
 11746  003042  D7FC               	bra	u8087
 11747                           
 11748                           ;lcd.c: 78: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
 11749  003044  0E0F               	movlw	15
 11750  003046  EC83  F019         	call	_lcdInst
 11751  00304A  0012               	return		;funcret
 11752  00304C                     __end_of_initLCD:
 11753                           	opt stack 0
 11754                           tosu	equ	0xFFF
 11755                           tosh	equ	0xFFE
 11756                           tosl	equ	0xFFD
 11757                           pclath	equ	0xFFA
 11758                           tblptru	equ	0xFF8
 11759                           tblptrh	equ	0xFF7
 11760                           tblptrl	equ	0xFF6
 11761                           tablat	equ	0xFF5
 11762                           prodh	equ	0xFF4
 11763                           prodl	equ	0xFF3
 11764                           intcon	equ	0xFF2
 11765                           indf0	equ	0xFEF
 11766                           postinc0	equ	0xFEE
 11767                           fsr0h	equ	0xFEA
 11768                           fsr0l	equ	0xFE9
 11769                           wreg	equ	0xFE8
 11770                           postdec1	equ	0xFE5
 11771                           plusw1	equ	0xFE3
 11772                           fsr1l	equ	0xFE1
 11773                           indf2	equ	0xFDF
 11774                           postinc2	equ	0xFDE
 11775                           postdec2	equ	0xFDD
 11776                           plusw2	equ	0xFDB
 11777                           fsr2h	equ	0xFDA
 11778                           fsr2l	equ	0xFD9
 11779                           status	equ	0xFD8
 11780                           
 11781 ;; *************** function _lcdInst *****************
 11782 ;; Defined at:
 11783 ;;		line 12 in file "lcd.c"
 11784 ;; Parameters:    Size  Location     Type
 11785 ;;  data            1    wreg     unsigned char 
 11786 ;; Auto vars:     Size  Location     Type
 11787 ;;  data            1    2[BANK0 ] unsigned char 
 11788 ;; Return value:  Size  Location     Type
 11789 ;;                  1    wreg      void 
 11790 ;; Registers used:
 11791 ;;		wreg, status,2, status,0, cstack
 11792 ;; Tracked objects:
 11793 ;;		On entry : 0/0
 11794 ;;		On exit  : 0/0
 11795 ;;		Unchanged: 0/0
 11796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11798 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11800 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11801 ;;Total ram usage:        1 bytes
 11802 ;; Hardware stack levels used:    1
 11803 ;; Hardware stack levels required when called:    5
 11804 ;; This function calls:
 11805 ;;		_lcdNibble
 11806 ;; This function is called by:
 11807 ;;		_packaging
 11808 ;;		_main
 11809 ;;		_initLCD
 11810 ;;		_lcd_set_cursor
 11811 ;;		_lcd_shift_cursor
 11812 ;;		_inputEntry
 11813 ;;		_mainMenu
 11814 ;;		_printStringLCD
 11815 ;;		_lcd_shift_display
 11816 ;; This function uses a non-reentrant model
 11817 ;;
 11818                           
 11819                           	psect	text37
 11820  003306                     __ptext37:
 11821                           	opt stack 0
 11822  003306                     _lcdInst:
 11823                           	opt stack 22
 11824                           
 11825                           ;incstack = 0
 11826                           ;lcdInst@data stored from wreg
 11827  003306  0100               	movlb	0	; () banked
 11828  003308  6F82               	movwf	lcdInst@data& (0+255),b
 11829                           
 11830                           ;lcd.c: 20: LATDbits.LATD2 = 0;
 11831  00330A  948C               	bcf	3980,2,c	;volatile
 11832                           
 11833                           ;lcd.c: 21: lcdNibble(data);
 11834  00330C  0100               	movlb	0	; () banked
 11835  00330E  5182               	movf	lcdInst@data& (0+255),w,b
 11836  003310  ECA5  F016         	call	_lcdNibble
 11837                           
 11838                           ;lcd.c: 22: _delay((unsigned long)((100)*(40000000/4000000.0)));
 11839  003314  0EC8               	movlw	200
 11840  003316                     u8097:
 11841  003316  D000               	nop2	
 11842  003318  2EE8               	decfsz	wreg,f,c
 11843  00331A  D7FD               	bra	u8097
 11844  00331C  0012               	return		;funcret
 11845  00331E                     __end_of_lcdInst:
 11846                           	opt stack 0
 11847                           tosu	equ	0xFFF
 11848                           tosh	equ	0xFFE
 11849                           tosl	equ	0xFFD
 11850                           pclath	equ	0xFFA
 11851                           tblptru	equ	0xFF8
 11852                           tblptrh	equ	0xFF7
 11853                           tblptrl	equ	0xFF6
 11854                           tablat	equ	0xFF5
 11855                           prodh	equ	0xFF4
 11856                           prodl	equ	0xFF3
 11857                           intcon	equ	0xFF2
 11858                           indf0	equ	0xFEF
 11859                           postinc0	equ	0xFEE
 11860                           fsr0h	equ	0xFEA
 11861                           fsr0l	equ	0xFE9
 11862                           wreg	equ	0xFE8
 11863                           postdec1	equ	0xFE5
 11864                           plusw1	equ	0xFE3
 11865                           fsr1l	equ	0xFE1
 11866                           indf2	equ	0xFDF
 11867                           postinc2	equ	0xFDE
 11868                           postdec2	equ	0xFDD
 11869                           plusw2	equ	0xFDB
 11870                           fsr2h	equ	0xFDA
 11871                           fsr2l	equ	0xFD9
 11872                           status	equ	0xFD8
 11873                           
 11874 ;; *************** function _lcdNibble *****************
 11875 ;; Defined at:
 11876 ;;		line 38 in file "lcd.c"
 11877 ;; Parameters:    Size  Location     Type
 11878 ;;  data            1    wreg     unsigned char 
 11879 ;; Auto vars:     Size  Location     Type
 11880 ;;  data            1    1[BANK0 ] unsigned char 
 11881 ;;  temp            1    0[BANK0 ] unsigned char 
 11882 ;; Return value:  Size  Location     Type
 11883 ;;                  1    wreg      void 
 11884 ;; Registers used:
 11885 ;;		wreg, status,2, status,0
 11886 ;; Tracked objects:
 11887 ;;		On entry : 0/0
 11888 ;;		On exit  : 0/0
 11889 ;;		Unchanged: 0/0
 11890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11892 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11894 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11895 ;;Total ram usage:        2 bytes
 11896 ;; Hardware stack levels used:    1
 11897 ;; Hardware stack levels required when called:    4
 11898 ;; This function calls:
 11899 ;;		Nothing
 11900 ;; This function is called by:
 11901 ;;		_lcdInst
 11902 ;;		_putch
 11903 ;; This function uses a non-reentrant model
 11904 ;;
 11905                           
 11906                           	psect	text38
 11907  002D4A                     __ptext38:
 11908                           	opt stack 0
 11909  002D4A                     _lcdNibble:
 11910                           	opt stack 22
 11911                           
 11912                           ;incstack = 0
 11913                           ;lcdNibble@data stored from wreg
 11914  002D4A  0100               	movlb	0	; () banked
 11915  002D4C  6F81               	movwf	lcdNibble@data& (0+255),b
 11916                           
 11917                           ;lcd.c: 46: char temp = (unsigned char) (data & 0xF0);
 11918  002D4E  0100               	movlb	0	; () banked
 11919  002D50  5181               	movf	lcdNibble@data& (0+255),w,b
 11920  002D52  0BF0               	andlw	240
 11921  002D54  6F80               	movwf	lcdNibble@temp& (0+255),b
 11922                           
 11923                           ;lcd.c: 47: LATD = (unsigned char) (LATD & 0x0F);
 11924  002D56  508C               	movf	3980,w,c	;volatile
 11925  002D58  0B0F               	andlw	15
 11926  002D5A  6E8C               	movwf	3980,c	;volatile
 11927                           
 11928                           ;lcd.c: 48: LATD = (unsigned char) (temp | LATD);
 11929  002D5C  5180               	movf	lcdNibble@temp& (0+255),w,b
 11930  002D5E  108C               	iorwf	3980,w,c	;volatile
 11931  002D60  6E8C               	movwf	3980,c	;volatile
 11932                           
 11933                           ; BSR set to: 0
 11934                           ;lcd.c: 50: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 11935  002D62  0E00               	movlw	0
 11936  002D64  BEF2               	btfsc	intcon,7,c	;volatile
 11937  002D66  0E01               	movlw	1
 11938  002D68  6E4C               	movwf	_LCDinterruptState,c
 11939                           
 11940                           ; BSR set to: 0
 11941  002D6A  9EF2               	bcf	intcon,7,c	;volatile
 11942                           
 11943                           ; BSR set to: 0
 11944  002D6C  868C               	bsf	3980,3,c	;volatile
 11945                           
 11946                           ; BSR set to: 0
 11947  002D6E  0E53               	movlw	83
 11948  002D70                     u8107:
 11949  002D70  2EE8               	decfsz	wreg,f,c
 11950  002D72  D7FE               	bra	u8107
 11951  002D74  F000               	nop	
 11952  002D76  968C               	bcf	3980,3,c	;volatile
 11953  002D78  0EC8               	movlw	200
 11954  002D7A                     u8117:
 11955  002D7A  D000               	nop2	
 11956  002D7C  2EE8               	decfsz	wreg,f,c
 11957  002D7E  D7FD               	bra	u8117
 11958  002D80  B04C               	btfsc	_LCDinterruptState,0,c
 11959  002D82  D002               	bra	u5685
 11960  002D84  9EF2               	bcf	intcon,7,c	;volatile
 11961  002D86  D001               	bra	u5686
 11962  002D88                     u5685:
 11963  002D88  8EF2               	bsf	intcon,7,c	;volatile
 11964  002D8A                     u5686:
 11965                           
 11966                           ;lcd.c: 53: data = (unsigned char) (data << 4);
 11967  002D8A  0100               	movlb	0	; () banked
 11968  002D8C  3981               	swapf	lcdNibble@data& (0+255),w,b
 11969  002D8E  0BF0               	andlw	240
 11970  002D90  6F81               	movwf	lcdNibble@data& (0+255),b
 11971                           
 11972                           ; BSR set to: 0
 11973                           ;lcd.c: 54: temp = (unsigned char) (data & 0xF0);
 11974  002D92  5181               	movf	lcdNibble@data& (0+255),w,b
 11975  002D94  0BF0               	andlw	240
 11976  002D96  6F80               	movwf	lcdNibble@temp& (0+255),b
 11977                           
 11978                           ; BSR set to: 0
 11979                           ;lcd.c: 55: LATD = (unsigned char) (LATD & 0x0F);
 11980  002D98  508C               	movf	3980,w,c	;volatile
 11981  002D9A  0B0F               	andlw	15
 11982  002D9C  6E8C               	movwf	3980,c	;volatile
 11983                           
 11984                           ; BSR set to: 0
 11985                           ;lcd.c: 56: LATD = (unsigned char) (temp | LATD);
 11986  002D9E  5180               	movf	lcdNibble@temp& (0+255),w,b
 11987  002DA0  108C               	iorwf	3980,w,c	;volatile
 11988  002DA2  6E8C               	movwf	3980,c	;volatile
 11989                           
 11990                           ; BSR set to: 0
 11991                           ;lcd.c: 58: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 11992  002DA4  0E00               	movlw	0
 11993  002DA6  BEF2               	btfsc	intcon,7,c	;volatile
 11994  002DA8  0E01               	movlw	1
 11995  002DAA  6E4C               	movwf	_LCDinterruptState,c
 11996                           
 11997                           ; BSR set to: 0
 11998  002DAC  9EF2               	bcf	intcon,7,c	;volatile
 11999                           
 12000                           ; BSR set to: 0
 12001  002DAE  868C               	bsf	3980,3,c	;volatile
 12002                           
 12003                           ; BSR set to: 0
 12004  002DB0  0E53               	movlw	83
 12005  002DB2                     u8127:
 12006  002DB2  2EE8               	decfsz	wreg,f,c
 12007  002DB4  D7FE               	bra	u8127
 12008  002DB6  F000               	nop	
 12009  002DB8  968C               	bcf	3980,3,c	;volatile
 12010  002DBA  0EC8               	movlw	200
 12011  002DBC                     u8137:
 12012  002DBC  D000               	nop2	
 12013  002DBE  2EE8               	decfsz	wreg,f,c
 12014  002DC0  D7FD               	bra	u8137
 12015  002DC2  B04C               	btfsc	_LCDinterruptState,0,c
 12016  002DC4  D002               	bra	u5695
 12017  002DC6  9EF2               	bcf	intcon,7,c	;volatile
 12018  002DC8  D001               	bra	u5696
 12019  002DCA                     u5695:
 12020  002DCA  8EF2               	bsf	intcon,7,c	;volatile
 12021  002DCC                     u5696:
 12022  002DCC  0012               	return		;funcret
 12023  002DCE                     __end_of_lcdNibble:
 12024                           	opt stack 0
 12025                           tosu	equ	0xFFF
 12026                           tosh	equ	0xFFE
 12027                           tosl	equ	0xFFD
 12028                           pclath	equ	0xFFA
 12029                           tblptru	equ	0xFF8
 12030                           tblptrh	equ	0xFF7
 12031                           tblptrl	equ	0xFF6
 12032                           tablat	equ	0xFF5
 12033                           prodh	equ	0xFF4
 12034                           prodl	equ	0xFF3
 12035                           intcon	equ	0xFF2
 12036                           indf0	equ	0xFEF
 12037                           postinc0	equ	0xFEE
 12038                           fsr0h	equ	0xFEA
 12039                           fsr0l	equ	0xFE9
 12040                           wreg	equ	0xFE8
 12041                           postdec1	equ	0xFE5
 12042                           plusw1	equ	0xFE3
 12043                           fsr1l	equ	0xFE1
 12044                           indf2	equ	0xFDF
 12045                           postinc2	equ	0xFDE
 12046                           postdec2	equ	0xFDD
 12047                           plusw2	equ	0xFDB
 12048                           fsr2h	equ	0xFDA
 12049                           fsr2l	equ	0xFD9
 12050                           status	equ	0xFD8
 12051                           
 12052 ;; *************** function _I2C_Master_Init *****************
 12053 ;; Defined at:
 12054 ;;		line 14 in file "I2C.c"
 12055 ;; Parameters:    Size  Location     Type
 12056 ;;  clockFreq       4   13[BANK0 ] const unsigned long 
 12057 ;; Auto vars:     Size  Location     Type
 12058 ;;		None
 12059 ;; Return value:  Size  Location     Type
 12060 ;;                  1    wreg      void 
 12061 ;; Registers used:
 12062 ;;		wreg, status,2, status,0, cstack
 12063 ;; Tracked objects:
 12064 ;;		On entry : 0/0
 12065 ;;		On exit  : 0/0
 12066 ;;		Unchanged: 0/0
 12067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12068 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12070 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12071 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12072 ;;Total ram usage:        8 bytes
 12073 ;; Hardware stack levels used:    1
 12074 ;; Hardware stack levels required when called:    5
 12075 ;; This function calls:
 12076 ;;		___lldiv
 12077 ;; This function is called by:
 12078 ;;		_main
 12079 ;; This function uses a non-reentrant model
 12080 ;;
 12081                           
 12082                           	psect	text39
 12083  002FA0                     __ptext39:
 12084                           	opt stack 0
 12085  002FA0                     _I2C_Master_Init:
 12086                           	opt stack 25
 12087                           
 12088                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
 12089                           
 12090                           ;incstack = 0
 12091  002FA0  9AC6               	bcf	4038,5,c	;volatile
 12092                           
 12093                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
 12094  002FA2  8694               	bsf	3988,3,c	;volatile
 12095                           
 12096                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
 12097  002FA4  8894               	bsf	3988,4,c	;volatile
 12098                           
 12099                           ;I2C.c: 41: SSPSTAT = 0b10000000;
 12100  002FA6  0E80               	movlw	128
 12101  002FA8  6EC7               	movwf	4039,c	;volatile
 12102                           
 12103                           ;I2C.c: 42: SSPCON1 = 0b00101000;
 12104  002FAA  0E28               	movlw	40
 12105  002FAC  6EC6               	movwf	4038,c	;volatile
 12106                           
 12107                           ;I2C.c: 43: SSPCON2 = 0b00000000;
 12108  002FAE  0E00               	movlw	0
 12109  002FB0  6EC5               	movwf	4037,c	;volatile
 12110                           
 12111                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
 12112  002FB2  0E00               	movlw	0
 12113  002FB4  0100               	movlb	0	; () banked
 12114  002FB6  6F80               	movwf	___lldiv@dividend& (0+255),b
 12115  002FB8  0E5A               	movlw	90
 12116  002FBA  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
 12117  002FBC  0E62               	movlw	98
 12118  002FBE  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
 12119  002FC0  0E02               	movlw	2
 12120  002FC2  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
 12121  002FC4  C08D  F091         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
 12122  002FC8  C08E  F092         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
 12123  002FCC  C08F  F093         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
 12124  002FD0  C090  F094         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
 12125  002FD4  0E02               	movlw	2
 12126  002FD6                     u7675:
 12127  002FD6  90D8               	bcf	status,0,c
 12128  002FD8  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
 12129  002FDA  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
 12130  002FDC  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
 12131  002FDE  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
 12132  002FE0  2EE8               	decfsz	wreg,f,c
 12133  002FE2  D7F9               	goto	u7675
 12134  002FE4  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
 12135  002FE8  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 12136  002FEC  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 12137  002FF0  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 12138  002FF4  ECE7  F016         	call	___lldiv	;wreg free
 12139  002FF8  0100               	movlb	0	; () banked
 12140  002FFA  0580               	decf	?___lldiv& (0+255),w,b
 12141  002FFC  6EC8               	movwf	4040,c	;volatile
 12142                           
 12143                           ; BSR set to: 0
 12144  002FFE  0012               	return		;funcret
 12145  003000                     __end_of_I2C_Master_Init:
 12146                           	opt stack 0
 12147                           tosu	equ	0xFFF
 12148                           tosh	equ	0xFFE
 12149                           tosl	equ	0xFFD
 12150                           pclath	equ	0xFFA
 12151                           tblptru	equ	0xFF8
 12152                           tblptrh	equ	0xFF7
 12153                           tblptrl	equ	0xFF6
 12154                           tablat	equ	0xFF5
 12155                           prodh	equ	0xFF4
 12156                           prodl	equ	0xFF3
 12157                           intcon	equ	0xFF2
 12158                           indf0	equ	0xFEF
 12159                           postinc0	equ	0xFEE
 12160                           fsr0h	equ	0xFEA
 12161                           fsr0l	equ	0xFE9
 12162                           wreg	equ	0xFE8
 12163                           postdec1	equ	0xFE5
 12164                           plusw1	equ	0xFE3
 12165                           fsr1l	equ	0xFE1
 12166                           indf2	equ	0xFDF
 12167                           postinc2	equ	0xFDE
 12168                           postdec2	equ	0xFDD
 12169                           plusw2	equ	0xFDB
 12170                           fsr2h	equ	0xFDA
 12171                           fsr2l	equ	0xFD9
 12172                           status	equ	0xFD8
 12173                           
 12174 ;; *************** function ___lldiv *****************
 12175 ;; Defined at:
 12176 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 12177 ;; Parameters:    Size  Location     Type
 12178 ;;  dividend        4    0[BANK0 ] unsigned long 
 12179 ;;  divisor         4    4[BANK0 ] unsigned long 
 12180 ;; Auto vars:     Size  Location     Type
 12181 ;;  quotient        4    8[BANK0 ] unsigned long 
 12182 ;;  counter         1   12[BANK0 ] unsigned char 
 12183 ;; Return value:  Size  Location     Type
 12184 ;;                  4    0[BANK0 ] unsigned long 
 12185 ;; Registers used:
 12186 ;;		wreg, status,2, status,0
 12187 ;; Tracked objects:
 12188 ;;		On entry : 0/0
 12189 ;;		On exit  : 0/0
 12190 ;;		Unchanged: 0/0
 12191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12192 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12193 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12195 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12196 ;;Total ram usage:       13 bytes
 12197 ;; Hardware stack levels used:    1
 12198 ;; Hardware stack levels required when called:    4
 12199 ;; This function calls:
 12200 ;;		Nothing
 12201 ;; This function is called by:
 12202 ;;		_I2C_Master_Init
 12203 ;;		__doprnt
 12204 ;; This function uses a non-reentrant model
 12205 ;;
 12206                           
 12207                           	psect	text40
 12208  002DCE                     __ptext40:
 12209                           	opt stack 0
 12210  002DCE                     ___lldiv:
 12211                           	opt stack 23
 12212                           
 12213                           ; BSR set to: 0
 12214                           ;incstack = 0
 12215  002DCE  0E00               	movlw	0
 12216  002DD0  0100               	movlb	0	; () banked
 12217  002DD2  6F88               	movwf	___lldiv@quotient& (0+255),b
 12218  002DD4  0E00               	movlw	0
 12219  002DD6  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
 12220  002DD8  0E00               	movlw	0
 12221  002DDA  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
 12222  002DDC  0E00               	movlw	0
 12223  002DDE  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
 12224                           
 12225                           ; BSR set to: 0
 12226  002DE0  5184               	movf	___lldiv@divisor& (0+255),w,b
 12227  002DE2  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 12228  002DE4  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 12229  002DE6  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 12230  002DE8  B4D8               	btfsc	status,2,c
 12231  002DEA  D02A               	goto	l1220
 12232                           
 12233                           ; BSR set to: 0
 12234  002DEC  0E01               	movlw	1
 12235  002DEE  6F8C               	movwf	___lldiv@counter& (0+255),b
 12236  002DF0  D006               	goto	l1215
 12237  002DF2                     
 12238                           ; BSR set to: 0
 12239                           
 12240                           ; BSR set to: 0
 12241  002DF2  90D8               	bcf	status,0,c
 12242  002DF4  3784               	rlcf	___lldiv@divisor& (0+255),f,b
 12243  002DF6  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 12244  002DF8  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 12245  002DFA  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 12246  002DFC  2B8C               	incf	___lldiv@counter& (0+255),f,b
 12247  002DFE                     l1215:
 12248                           
 12249                           ; BSR set to: 0
 12250                           
 12251                           ; BSR set to: 0
 12252  002DFE  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 12253  002E00  D7F8               	goto	l1216
 12254  002E02                     u5790:
 12255                           
 12256                           ; BSR set to: 0
 12257                           
 12258                           ; BSR set to: 0
 12259                           
 12260                           ; BSR set to: 0
 12261  002E02  90D8               	bcf	status,0,c
 12262  002E04  3788               	rlcf	___lldiv@quotient& (0+255),f,b
 12263  002E06  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 12264  002E08  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 12265  002E0A  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 12266                           
 12267                           ; BSR set to: 0
 12268  002E0C  5184               	movf	___lldiv@divisor& (0+255),w,b
 12269  002E0E  5D80               	subwf	___lldiv@dividend& (0+255),w,b
 12270  002E10  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 12271  002E12  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 12272  002E14  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 12273  002E16  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 12274  002E18  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 12275  002E1A  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 12276  002E1C  A0D8               	btfss	status,0,c
 12277  002E1E  D009               	goto	l1219
 12278                           
 12279                           ; BSR set to: 0
 12280  002E20  5184               	movf	___lldiv@divisor& (0+255),w,b
 12281  002E22  5F80               	subwf	___lldiv@dividend& (0+255),f,b
 12282  002E24  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 12283  002E26  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 12284  002E28  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 12285  002E2A  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 12286  002E2C  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 12287  002E2E  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 12288                           
 12289                           ; BSR set to: 0
 12290  002E30  8188               	bsf	___lldiv@quotient& (0+255),0,b
 12291  002E32                     l1219:
 12292                           
 12293                           ; BSR set to: 0
 12294                           
 12295                           ; BSR set to: 0
 12296  002E32  90D8               	bcf	status,0,c
 12297  002E34  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 12298  002E36  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 12299  002E38  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 12300  002E3A  3384               	rrcf	___lldiv@divisor& (0+255),f,b
 12301                           
 12302                           ; BSR set to: 0
 12303  002E3C  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
 12304  002E3E  D7E1               	goto	u5790
 12305  002E40                     l1220:
 12306                           
 12307                           ; BSR set to: 0
 12308                           
 12309                           ; BSR set to: 0
 12310  002E40  C088  F080         	movff	___lldiv@quotient,?___lldiv
 12311  002E44  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
 12312  002E48  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
 12313  002E4C  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
 12314                           
 12315                           ; BSR set to: 0
 12316  002E50  0012               	return		;funcret
 12317  002E52                     __end_of___lldiv:
 12318                           	opt stack 0
 12319                           tosu	equ	0xFFF
 12320                           tosh	equ	0xFFE
 12321                           tosl	equ	0xFFD
 12322                           pclath	equ	0xFFA
 12323                           tblptru	equ	0xFF8
 12324                           tblptrh	equ	0xFF7
 12325                           tblptrl	equ	0xFF6
 12326                           tablat	equ	0xFF5
 12327                           prodh	equ	0xFF4
 12328                           prodl	equ	0xFF3
 12329                           intcon	equ	0xFF2
 12330                           indf0	equ	0xFEF
 12331                           postinc0	equ	0xFEE
 12332                           fsr0h	equ	0xFEA
 12333                           fsr0l	equ	0xFE9
 12334                           wreg	equ	0xFE8
 12335                           postdec1	equ	0xFE5
 12336                           plusw1	equ	0xFE3
 12337                           fsr1l	equ	0xFE1
 12338                           indf2	equ	0xFDF
 12339                           postinc2	equ	0xFDE
 12340                           postdec2	equ	0xFDD
 12341                           plusw2	equ	0xFDB
 12342                           fsr2h	equ	0xFDA
 12343                           fsr2l	equ	0xFD9
 12344                           status	equ	0xFD8
 12345                           
 12346 ;; *************** function _interruptHandler *****************
 12347 ;; Defined at:
 12348 ;;		line 272 in file "main.c"
 12349 ;; Parameters:    Size  Location     Type
 12350 ;;		None
 12351 ;; Auto vars:     Size  Location     Type
 12352 ;;		None
 12353 ;; Return value:  Size  Location     Type
 12354 ;;                  1    wreg      void 
 12355 ;; Registers used:
 12356 ;;		wreg, status,2, status,0, cstack
 12357 ;; Tracked objects:
 12358 ;;		On entry : 0/0
 12359 ;;		On exit  : 0/0
 12360 ;;		Unchanged: 0/0
 12361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12364 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12365 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12366 ;;Total ram usage:       18 bytes
 12367 ;; Hardware stack levels used:    1
 12368 ;; Hardware stack levels required when called:    3
 12369 ;; This function calls:
 12370 ;;		_tmr0_ISR
 12371 ;; This function is called by:
 12372 ;;		Interrupt level 2
 12373 ;; This function uses a non-reentrant model
 12374 ;;
 12375                           
 12376                           	psect	intcode
 12377  000008                     __pintcode:
 12378                           	opt stack 0
 12379  000008                     _interruptHandler:
 12380                           	opt stack 21
 12381                           
 12382                           ; BSR set to: 0
 12383                           ;incstack = 0
 12384  000008  8265               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 12385  00000A  ED32  F015         	call	int_func,f	;refresh shadow registers
 12386                           tosu	equ	0xFFF
 12387                           tosh	equ	0xFFE
 12388                           tosl	equ	0xFFD
 12389                           pclath	equ	0xFFA
 12390                           tblptru	equ	0xFF8
 12391                           tblptrh	equ	0xFF7
 12392                           tblptrl	equ	0xFF6
 12393                           tablat	equ	0xFF5
 12394                           prodh	equ	0xFF4
 12395                           prodl	equ	0xFF3
 12396                           intcon	equ	0xFF2
 12397                           indf0	equ	0xFEF
 12398                           postinc0	equ	0xFEE
 12399                           fsr0h	equ	0xFEA
 12400                           fsr0l	equ	0xFE9
 12401                           wreg	equ	0xFE8
 12402                           postdec1	equ	0xFE5
 12403                           plusw1	equ	0xFE3
 12404                           fsr1l	equ	0xFE1
 12405                           indf2	equ	0xFDF
 12406                           postinc2	equ	0xFDE
 12407                           postdec2	equ	0xFDD
 12408                           plusw2	equ	0xFDB
 12409                           fsr2h	equ	0xFDA
 12410                           fsr2l	equ	0xFD9
 12411                           status	equ	0xFD8
 12412                           
 12413                           	psect	intcode_body
 12414  002A64                     __pintcode_body:
 12415                           	opt stack 21
 12416  002A64                     int_func:
 12417                           	opt stack 21
 12418  002A64  0006               	pop		; remove dummy address from shadow register refresh
 12419  002A66  CFFA F022          	movff	pclath,??_interruptHandler
 12420  002A6A  CFFB F023          	movff	pclatu,??_interruptHandler+1
 12421  002A6E  CFE9 F024          	movff	fsr0l,??_interruptHandler+2
 12422  002A72  CFEA F025          	movff	fsr0h,??_interruptHandler+3
 12423  002A76  CFE1 F026          	movff	fsr1l,??_interruptHandler+4
 12424  002A7A  CFE2 F027          	movff	fsr1h,??_interruptHandler+5
 12425  002A7E  CFD9 F028          	movff	fsr2l,??_interruptHandler+6
 12426  002A82  CFDA F029          	movff	fsr2h,??_interruptHandler+7
 12427  002A86  CFF3 F02A          	movff	prodl,??_interruptHandler+8
 12428  002A8A  CFF4 F02B          	movff	prodh,??_interruptHandler+9
 12429  002A8E  CFF6 F02C          	movff	tblptrl,??_interruptHandler+10
 12430  002A92  CFF7 F02D          	movff	tblptrh,??_interruptHandler+11
 12431  002A96  CFF8 F02E          	movff	tblptru,??_interruptHandler+12
 12432  002A9A  CFF5 F02F          	movff	tablat,??_interruptHandler+13
 12433  002A9E  C065  F030         	movff	btemp,??_interruptHandler+14
 12434  002AA2  C066  F031         	movff	btemp+1,??_interruptHandler+15
 12435  002AA6  C067  F032         	movff	btemp+2,??_interruptHandler+16
 12436  002AAA  C068  F033         	movff	btemp+3,??_interruptHandler+17
 12437                           
 12438                           ;main.c: 273: if (T0IE && T0IF) {
 12439  002AAE  BAF2               	btfsc	intcon,5,c	;volatile
 12440  002AB0  A4F2               	btfss	intcon,2,c	;volatile
 12441  002AB2  D003               	goto	i2l180
 12442                           
 12443                           ;main.c: 274: T0IF = 0;
 12444  002AB4  94F2               	bcf	intcon,2,c	;volatile
 12445                           
 12446                           ;main.c: 275: tmr0_ISR();
 12447  002AB6  EC18  F00C         	call	_tmr0_ISR	;wreg free
 12448  002ABA                     i2l180:
 12449  002ABA  C033  F068         	movff	??_interruptHandler+17,btemp+3
 12450  002ABE  C032  F067         	movff	??_interruptHandler+16,btemp+2
 12451  002AC2  C031  F066         	movff	??_interruptHandler+15,btemp+1
 12452  002AC6  C030  F065         	movff	??_interruptHandler+14,btemp
 12453  002ACA  C02F  FFF5         	movff	??_interruptHandler+13,tablat
 12454  002ACE  C02E  FFF8         	movff	??_interruptHandler+12,tblptru
 12455  002AD2  C02D  FFF7         	movff	??_interruptHandler+11,tblptrh
 12456  002AD6  C02C  FFF6         	movff	??_interruptHandler+10,tblptrl
 12457  002ADA  C02B  FFF4         	movff	??_interruptHandler+9,prodh
 12458  002ADE  C02A  FFF3         	movff	??_interruptHandler+8,prodl
 12459  002AE2  C029  FFDA         	movff	??_interruptHandler+7,fsr2h
 12460  002AE6  C028  FFD9         	movff	??_interruptHandler+6,fsr2l
 12461  002AEA  C027  FFE2         	movff	??_interruptHandler+5,fsr1h
 12462  002AEE  C026  FFE1         	movff	??_interruptHandler+4,fsr1l
 12463  002AF2  C025  FFEA         	movff	??_interruptHandler+3,fsr0h
 12464  002AF6  C024  FFE9         	movff	??_interruptHandler+2,fsr0l
 12465  002AFA  C023  FFFB         	movff	??_interruptHandler+1,pclatu
 12466  002AFE  C022  FFFA         	movff	??_interruptHandler,pclath
 12467  002B02  9265               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 12468  002B04  0011               	retfie		f
 12469  002B06                     __end_of_interruptHandler:
 12470                           	opt stack 0
 12471                           tosu	equ	0xFFF
 12472                           tosh	equ	0xFFE
 12473                           tosl	equ	0xFFD
 12474                           pclatu	equ	0xFFB
 12475                           pclath	equ	0xFFA
 12476                           tblptru	equ	0xFF8
 12477                           tblptrh	equ	0xFF7
 12478                           tblptrl	equ	0xFF6
 12479                           tablat	equ	0xFF5
 12480                           prodh	equ	0xFF4
 12481                           prodl	equ	0xFF3
 12482                           intcon	equ	0xFF2
 12483                           indf0	equ	0xFEF
 12484                           postinc0	equ	0xFEE
 12485                           fsr0h	equ	0xFEA
 12486                           fsr0l	equ	0xFE9
 12487                           wreg	equ	0xFE8
 12488                           postdec1	equ	0xFE5
 12489                           plusw1	equ	0xFE3
 12490                           fsr1h	equ	0xFE2
 12491                           fsr1l	equ	0xFE1
 12492                           indf2	equ	0xFDF
 12493                           postinc2	equ	0xFDE
 12494                           postdec2	equ	0xFDD
 12495                           plusw2	equ	0xFDB
 12496                           fsr2h	equ	0xFDA
 12497                           fsr2l	equ	0xFD9
 12498                           status	equ	0xFD8
 12499                           
 12500 ;; *************** function _tmr0_ISR *****************
 12501 ;; Defined at:
 12502 ;;		line 103 in file "timer.c"
 12503 ;; Parameters:    Size  Location     Type
 12504 ;;		None
 12505 ;; Auto vars:     Size  Location     Type
 12506 ;;  motorControl    2   31[COMRAM] unsigned int 
 12507 ;;  motorControl    2   29[COMRAM] unsigned int 
 12508 ;;  motorControl    2   27[COMRAM] unsigned int 
 12509 ;;  motorControl    2   25[COMRAM] unsigned int 
 12510 ;; Return value:  Size  Location     Type
 12511 ;;                  1    wreg      void 
 12512 ;; Registers used:
 12513 ;;		wreg, status,2, status,0, cstack
 12514 ;; Tracked objects:
 12515 ;;		On entry : 0/0
 12516 ;;		On exit  : 0/0
 12517 ;;		Unchanged: 0/0
 12518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12520 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12521 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12522 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12523 ;;Total ram usage:       13 bytes
 12524 ;; Hardware stack levels used:    1
 12525 ;; Hardware stack levels required when called:    2
 12526 ;; This function calls:
 12527 ;;		_inverseDir
 12528 ;;		_resetMotorTimer
 12529 ;;		i2___ftadd
 12530 ;;		i2_motorControl
 12531 ;; This function is called by:
 12532 ;;		_interruptHandler
 12533 ;; This function uses a non-reentrant model
 12534 ;;
 12535                           
 12536                           	psect	text42
 12537  001830                     __ptext42:
 12538                           	opt stack 0
 12539  001830                     _tmr0_ISR:
 12540                           	opt stack 21
 12541                           
 12542                           ;timer.c: 104: timeSinceLastTic += 0.1;
 12543                           
 12544                           ;incstack = 0
 12545  001830  C059  F009         	movff	_timeSinceLastTic,i2___ftadd@f1	;volatile
 12546  001834  C05A  F00A         	movff	_timeSinceLastTic+1,i2___ftadd@f1+1	;volatile
 12547  001838  C05B  F00B         	movff	_timeSinceLastTic+2,i2___ftadd@f1+2	;volatile
 12548  00183C  0ECD               	movlw	205
 12549  00183E  6E0C               	movwf	i2___ftadd@f2,c
 12550  001840  0ECC               	movlw	204
 12551  001842  6E0D               	movwf	i2___ftadd@f2+1,c
 12552  001844  0E3D               	movlw	61
 12553  001846  6E0E               	movwf	i2___ftadd@f2+2,c
 12554  001848  ECF8  F011         	call	i2___ftadd	;wreg free
 12555  00184C  C009  F059         	movff	?i2___ftadd,_timeSinceLastTic	;volatile
 12556  001850  C00A  F05A         	movff	?i2___ftadd+1,_timeSinceLastTic+1	;volatile
 12557  001854  C00B  F05B         	movff	?i2___ftadd+2,_timeSinceLastTic+2	;volatile
 12558                           
 12559                           ;timer.c: 105: test++;
 12560  001858  0E01               	movlw	1
 12561  00185A  0101               	movlb	1	; () banked
 12562  00185C  27DA               	addwf	_test& (0+255),f,b	;volatile
 12563  00185E  0E00               	movlw	0
 12564  001860  23DB               	addwfc	(_test+1)& (0+255),f,b	;volatile
 12565  001862  23DC               	addwfc	(_test+2)& (0+255),f,b	;volatile
 12566  001864  23DD               	addwfc	(_test+3)& (0+255),f,b	;volatile
 12567                           
 12568                           ; BSR set to: 1
 12569                           ;timer.c: 106: if (operating) operatingTime += 0.1;
 12570  001866  504B               	movf	_operating,w,c
 12571  001868  B4D8               	btfsc	status,2,c
 12572  00186A  D014               	goto	i2l653
 12573                           
 12574                           ; BSR set to: 1
 12575  00186C  C05C  F009         	movff	timer@operatingTime,i2___ftadd@f1	;volatile
 12576  001870  C05D  F00A         	movff	timer@operatingTime+1,i2___ftadd@f1+1	;volatile
 12577  001874  C05E  F00B         	movff	timer@operatingTime+2,i2___ftadd@f1+2	;volatile
 12578  001878  0ECD               	movlw	205
 12579  00187A  6E0C               	movwf	i2___ftadd@f2,c
 12580  00187C  0ECC               	movlw	204
 12581  00187E  6E0D               	movwf	i2___ftadd@f2+1,c
 12582  001880  0E3D               	movlw	61
 12583  001882  6E0E               	movwf	i2___ftadd@f2+2,c
 12584  001884  ECF8  F011         	call	i2___ftadd	;wreg free
 12585  001888  C009  F05C         	movff	?i2___ftadd,timer@operatingTime	;volatile
 12586  00188C  C00A  F05D         	movff	?i2___ftadd+1,timer@operatingTime+1	;volatile
 12587  001890  C00B  F05E         	movff	?i2___ftadd+2,timer@operatingTime+2	;volatile
 12588  001894                     i2l653:
 12589                           
 12590                           ;timer.c: 107: TMR0H = 0xF9;
 12591  001894  0EF9               	movlw	249
 12592  001896  6ED7               	movwf	4055,c	;volatile
 12593                           
 12594                           ;timer.c: 108: TMR0L = 0x5F;
 12595  001898  0E5F               	movlw	95
 12596  00189A  6ED6               	movwf	4054,c	;volatile
 12597                           
 12598                           ;timer.c: 109: unsigned int motorControlTimerB = (motorControlTimerB > longTolerance) ? 
      +                          0 : motorControlTimerB + 1;
 12599  00189C  501A               	movf	tmr0_ISR@motorControlTimerB,w,c
 12600  00189E  6E15               	movwf	??_tmr0_ISR& (0+255),c
 12601  0018A0  501B               	movf	tmr0_ISR@motorControlTimerB+1,w,c
 12602  0018A2  6E16               	movwf	(??_tmr0_ISR+1)& (0+255),c
 12603  0018A4  6A17               	clrf	(??_tmr0_ISR+2)& (0+255),c
 12604  0018A6  6A18               	clrf	(??_tmr0_ISR+3)& (0+255),c
 12605  0018A8  5015               	movf	??_tmr0_ISR,w,c
 12606  0018AA  5C51               	subwf	_longTolerance,w,c
 12607  0018AC  5016               	movf	??_tmr0_ISR+1,w,c
 12608  0018AE  5852               	subwfb	_longTolerance+1,w,c
 12609  0018B0  5017               	movf	??_tmr0_ISR+2,w,c
 12610  0018B2  5853               	subwfb	_longTolerance+2,w,c
 12611  0018B4  5054               	movf	_longTolerance+3,w,c
 12612  0018B6  0A80               	xorlw	128
 12613  0018B8  6E19               	movwf	(??_tmr0_ISR+4)& (0+255),c
 12614  0018BA  5018               	movf	??_tmr0_ISR+3,w,c
 12615  0018BC  0A80               	xorlw	128
 12616  0018BE  5819               	subwfb	(??_tmr0_ISR+4)& (0+255),w,c
 12617  0018C0  A0D8               	btfss	status,0,c
 12618  0018C2  D007               	goto	i2l655
 12619  0018C4  0E01               	movlw	1
 12620  0018C6  241A               	addwf	tmr0_ISR@motorControlTimerB,w,c
 12621  0018C8  6E1A               	movwf	tmr0_ISR@motorControlTimerB,c
 12622  0018CA  0E00               	movlw	0
 12623  0018CC  201B               	addwfc	tmr0_ISR@motorControlTimerB+1,w,c
 12624  0018CE  6E1B               	movwf	tmr0_ISR@motorControlTimerB+1,c
 12625  0018D0  D004               	goto	i2l657
 12626  0018D2                     i2l655:
 12627  0018D2  0E00               	movlw	0
 12628  0018D4  6E1B               	movwf	tmr0_ISR@motorControlTimerB+1,c
 12629  0018D6  0E00               	movlw	0
 12630  0018D8  6E1A               	movwf	tmr0_ISR@motorControlTimerB,c
 12631  0018DA                     i2l657:
 12632                           
 12633                           ;timer.c: 110: unsigned int motorControlTimerN = (motorControlTimerN > longTolerance) ? 
      +                          0 : motorControlTimerN + 1;
 12634  0018DA  501C               	movf	tmr0_ISR@motorControlTimerN,w,c
 12635  0018DC  6E15               	movwf	??_tmr0_ISR& (0+255),c
 12636  0018DE  501D               	movf	tmr0_ISR@motorControlTimerN+1,w,c
 12637  0018E0  6E16               	movwf	(??_tmr0_ISR+1)& (0+255),c
 12638  0018E2  6A17               	clrf	(??_tmr0_ISR+2)& (0+255),c
 12639  0018E4  6A18               	clrf	(??_tmr0_ISR+3)& (0+255),c
 12640  0018E6  5015               	movf	??_tmr0_ISR,w,c
 12641  0018E8  5C51               	subwf	_longTolerance,w,c
 12642  0018EA  5016               	movf	??_tmr0_ISR+1,w,c
 12643  0018EC  5852               	subwfb	_longTolerance+1,w,c
 12644  0018EE  5017               	movf	??_tmr0_ISR+2,w,c
 12645  0018F0  5853               	subwfb	_longTolerance+2,w,c
 12646  0018F2  5054               	movf	_longTolerance+3,w,c
 12647  0018F4  0A80               	xorlw	128
 12648  0018F6  6E19               	movwf	(??_tmr0_ISR+4)& (0+255),c
 12649  0018F8  5018               	movf	??_tmr0_ISR+3,w,c
 12650  0018FA  0A80               	xorlw	128
 12651  0018FC  5819               	subwfb	(??_tmr0_ISR+4)& (0+255),w,c
 12652  0018FE  A0D8               	btfss	status,0,c
 12653  001900  D007               	goto	i2l659
 12654  001902  0E01               	movlw	1
 12655  001904  241C               	addwf	tmr0_ISR@motorControlTimerN,w,c
 12656  001906  6E1C               	movwf	tmr0_ISR@motorControlTimerN,c
 12657  001908  0E00               	movlw	0
 12658  00190A  201D               	addwfc	tmr0_ISR@motorControlTimerN+1,w,c
 12659  00190C  6E1D               	movwf	tmr0_ISR@motorControlTimerN+1,c
 12660  00190E  D004               	goto	i2l661
 12661  001910                     i2l659:
 12662  001910  0E00               	movlw	0
 12663  001912  6E1D               	movwf	tmr0_ISR@motorControlTimerN+1,c
 12664  001914  0E00               	movlw	0
 12665  001916  6E1C               	movwf	tmr0_ISR@motorControlTimerN,c
 12666  001918                     i2l661:
 12667                           
 12668                           ;timer.c: 111: unsigned int motorControlTimerS = (motorControlTimerS > longTolerance) ? 
      +                          0 : motorControlTimerS + 1;
 12669  001918  501E               	movf	tmr0_ISR@motorControlTimerS,w,c
 12670  00191A  6E15               	movwf	??_tmr0_ISR& (0+255),c
 12671  00191C  501F               	movf	tmr0_ISR@motorControlTimerS+1,w,c
 12672  00191E  6E16               	movwf	(??_tmr0_ISR+1)& (0+255),c
 12673  001920  6A17               	clrf	(??_tmr0_ISR+2)& (0+255),c
 12674  001922  6A18               	clrf	(??_tmr0_ISR+3)& (0+255),c
 12675  001924  5015               	movf	??_tmr0_ISR,w,c
 12676  001926  5C51               	subwf	_longTolerance,w,c
 12677  001928  5016               	movf	??_tmr0_ISR+1,w,c
 12678  00192A  5852               	subwfb	_longTolerance+1,w,c
 12679  00192C  5017               	movf	??_tmr0_ISR+2,w,c
 12680  00192E  5853               	subwfb	_longTolerance+2,w,c
 12681  001930  5054               	movf	_longTolerance+3,w,c
 12682  001932  0A80               	xorlw	128
 12683  001934  6E19               	movwf	(??_tmr0_ISR+4)& (0+255),c
 12684  001936  5018               	movf	??_tmr0_ISR+3,w,c
 12685  001938  0A80               	xorlw	128
 12686  00193A  5819               	subwfb	(??_tmr0_ISR+4)& (0+255),w,c
 12687  00193C  A0D8               	btfss	status,0,c
 12688  00193E  D007               	goto	i2l663
 12689  001940  0E01               	movlw	1
 12690  001942  241E               	addwf	tmr0_ISR@motorControlTimerS,w,c
 12691  001944  6E1E               	movwf	tmr0_ISR@motorControlTimerS,c
 12692  001946  0E00               	movlw	0
 12693  001948  201F               	addwfc	tmr0_ISR@motorControlTimerS+1,w,c
 12694  00194A  6E1F               	movwf	tmr0_ISR@motorControlTimerS+1,c
 12695  00194C  D004               	goto	i2l665
 12696  00194E                     i2l663:
 12697  00194E  0E00               	movlw	0
 12698  001950  6E1F               	movwf	tmr0_ISR@motorControlTimerS+1,c
 12699  001952  0E00               	movlw	0
 12700  001954  6E1E               	movwf	tmr0_ISR@motorControlTimerS,c
 12701  001956                     i2l665:
 12702                           
 12703                           ;timer.c: 112: unsigned int motorControlTimerW = (motorControlTimerW > longTolerance) ? 
      +                          0 : motorControlTimerW + 1;
 12704  001956  5020               	movf	tmr0_ISR@motorControlTimerW,w,c
 12705  001958  6E15               	movwf	??_tmr0_ISR& (0+255),c
 12706  00195A  5021               	movf	tmr0_ISR@motorControlTimerW+1,w,c
 12707  00195C  6E16               	movwf	(??_tmr0_ISR+1)& (0+255),c
 12708  00195E  6A17               	clrf	(??_tmr0_ISR+2)& (0+255),c
 12709  001960  6A18               	clrf	(??_tmr0_ISR+3)& (0+255),c
 12710  001962  5015               	movf	??_tmr0_ISR,w,c
 12711  001964  5C51               	subwf	_longTolerance,w,c
 12712  001966  5016               	movf	??_tmr0_ISR+1,w,c
 12713  001968  5852               	subwfb	_longTolerance+1,w,c
 12714  00196A  5017               	movf	??_tmr0_ISR+2,w,c
 12715  00196C  5853               	subwfb	_longTolerance+2,w,c
 12716  00196E  5054               	movf	_longTolerance+3,w,c
 12717  001970  0A80               	xorlw	128
 12718  001972  6E19               	movwf	(??_tmr0_ISR+4)& (0+255),c
 12719  001974  5018               	movf	??_tmr0_ISR+3,w,c
 12720  001976  0A80               	xorlw	128
 12721  001978  5819               	subwfb	(??_tmr0_ISR+4)& (0+255),w,c
 12722  00197A  A0D8               	btfss	status,0,c
 12723  00197C  D007               	goto	i2l667
 12724  00197E  0E01               	movlw	1
 12725  001980  2420               	addwf	tmr0_ISR@motorControlTimerW,w,c
 12726  001982  6E20               	movwf	tmr0_ISR@motorControlTimerW,c
 12727  001984  0E00               	movlw	0
 12728  001986  2021               	addwfc	tmr0_ISR@motorControlTimerW+1,w,c
 12729  001988  6E21               	movwf	tmr0_ISR@motorControlTimerW+1,c
 12730  00198A  D11A               	goto	i2l670
 12731  00198C                     i2l667:
 12732  00198C  0E00               	movlw	0
 12733  00198E  6E21               	movwf	tmr0_ISR@motorControlTimerW+1,c
 12734  001990  0E00               	movlw	0
 12735  001992  6E20               	movwf	tmr0_ISR@motorControlTimerW,c
 12736                           
 12737                           ;timer.c: 169: switch (currentMode) {
 12738  001994  D115               	goto	i2l670
 12739  001996                     
 12740                           ;timer.c: 171: case CLEARING:
 12741                           ;timer.c: 172: if (currentMotorDir.w != STOPMOTOR) {
 12742  001996  0E02               	movlw	2
 12743  001998  1858               	xorwf	_currentMotorDir+3,w,c
 12744  00199A  B4D8               	btfsc	status,2,c
 12745  00199C  D03F               	goto	i2l677
 12746                           
 12747                           ;timer.c: 173: if (!motorGoingBackwards.w) {
 12748  00199E  5043               	movf	_motorGoingBackwards+3,w,c	;volatile
 12749  0019A0  A4D8               	btfss	status,2,c
 12750  0019A2  D01C               	goto	i2l674
 12751                           
 12752                           ;timer.c: 174: if (motorControlTimerW == longTolerance) {
 12753  0019A4  5020               	movf	tmr0_ISR@motorControlTimerW,w,c
 12754  0019A6  6E15               	movwf	??_tmr0_ISR& (0+255),c
 12755  0019A8  5021               	movf	tmr0_ISR@motorControlTimerW+1,w,c
 12756  0019AA  6E16               	movwf	(??_tmr0_ISR+1)& (0+255),c
 12757  0019AC  6A17               	clrf	(??_tmr0_ISR+2)& (0+255),c
 12758  0019AE  6A18               	clrf	(??_tmr0_ISR+3)& (0+255),c
 12759  0019B0  5051               	movf	_longTolerance,w,c
 12760  0019B2  1815               	xorwf	??_tmr0_ISR,w,c
 12761  0019B4  E133               	bnz	i2l4664
 12762  0019B6  5052               	movf	_longTolerance+1,w,c
 12763  0019B8  1816               	xorwf	??_tmr0_ISR+1,w,c
 12764  0019BA  E130               	bnz	i2l4664
 12765  0019BC  5053               	movf	_longTolerance+2,w,c
 12766  0019BE  1817               	xorwf	??_tmr0_ISR+2,w,c
 12767  0019C0  E12D               	bnz	i2l4664
 12768  0019C2  5054               	movf	_longTolerance+3,w,c
 12769  0019C4  1818               	xorwf	??_tmr0_ISR+3,w,c
 12770  0019C6  A4D8               	btfss	status,2,c
 12771  0019C8  D029               	goto	i2l677
 12772                           
 12773                           ;timer.c: 175: motorControl(WASHER, inverseDir(currentMotorDir.w));
 12774  0019CA  5058               	movf	_currentMotorDir+3,w,c
 12775  0019CC  ECA3  F019         	call	_inverseDir
 12776  0019D0  6E02               	movwf	i2motorControl@dir,c
 12777  0019D2  0E03               	movlw	3
 12778  0019D4  ECC9  F013         	call	i2_motorControl
 12779                           
 12780                           ;timer.c: 176: motorGoingBackwards.w = 1;
 12781  0019D8  0E01               	movlw	1
 12782  0019DA  D01B               	goto	L14
 12783  0019DC                     i2l674:
 12784                           
 12785                           ;timer.c: 180: if (motorControlTimerW == shortTolerance) {
 12786  0019DC  5020               	movf	tmr0_ISR@motorControlTimerW,w,c
 12787  0019DE  6E15               	movwf	??_tmr0_ISR& (0+255),c
 12788  0019E0  5021               	movf	tmr0_ISR@motorControlTimerW+1,w,c
 12789  0019E2  6E16               	movwf	(??_tmr0_ISR+1)& (0+255),c
 12790  0019E4  6A17               	clrf	(??_tmr0_ISR+2)& (0+255),c
 12791  0019E6  6A18               	clrf	(??_tmr0_ISR+3)& (0+255),c
 12792  0019E8  504D               	movf	_shortTolerance,w,c
 12793  0019EA  1815               	xorwf	??_tmr0_ISR,w,c
 12794  0019EC  E117               	bnz	i2l4664
 12795  0019EE  504E               	movf	_shortTolerance+1,w,c
 12796  0019F0  1816               	xorwf	??_tmr0_ISR+1,w,c
 12797  0019F2  E114               	bnz	i2l4664
 12798  0019F4  504F               	movf	_shortTolerance+2,w,c
 12799  0019F6  1817               	xorwf	??_tmr0_ISR+2,w,c
 12800  0019F8  E111               	bnz	i2l4664
 12801  0019FA  5050               	movf	_shortTolerance+3,w,c
 12802  0019FC  1818               	xorwf	??_tmr0_ISR+3,w,c
 12803  0019FE  A4D8               	btfss	status,2,c
 12804  001A00  D00D               	goto	i2l677
 12805                           
 12806                           ;timer.c: 181: motorControl(WASHER, inverseDir(currentMotorDir.w));
 12807  001A02  5058               	movf	_currentMotorDir+3,w,c
 12808  001A04  ECA3  F019         	call	_inverseDir
 12809  001A08  6E02               	movwf	i2motorControl@dir,c
 12810  001A0A  0E03               	movlw	3
 12811  001A0C  ECC9  F013         	call	i2_motorControl
 12812                           
 12813                           ;timer.c: 182: motorGoingBackwards.w = 0;
 12814  001A10  0E00               	movlw	0
 12815  001A12                     L14:
 12816  001A12  6E43               	movwf	_motorGoingBackwards+3,c	;volatile
 12817                           
 12818                           ;timer.c: 183: motorControlTimerW = 0;
 12819  001A14  0E00               	movlw	0
 12820  001A16  6E21               	movwf	tmr0_ISR@motorControlTimerW+1,c
 12821  001A18  0E00               	movlw	0
 12822  001A1A  6E20               	movwf	tmr0_ISR@motorControlTimerW,c
 12823  001A1C                     i2l677:
 12824  001A1C                     i2l4664:
 12825                           
 12826                           ;timer.c: 184: }
 12827                           ;timer.c: 185: }
 12828                           ;timer.c: 186: }
 12829                           ;timer.c: 192: if (currentMotorDir.b != STOPMOTOR) {
 12830  001A1C  0E02               	movlw	2
 12831  001A1E  1855               	xorwf	_currentMotorDir,w,c
 12832  001A20  B4D8               	btfsc	status,2,c
 12833  001A22  D03F               	goto	i2l682
 12834                           
 12835                           ;timer.c: 193: if (!motorGoingBackwards.b) {
 12836  001A24  5040               	movf	_motorGoingBackwards,w,c	;volatile
 12837  001A26  A4D8               	btfss	status,2,c
 12838  001A28  D01C               	goto	i2l679
 12839                           
 12840                           ;timer.c: 194: if (motorControlTimerB == longTolerance) {
 12841  001A2A  501A               	movf	tmr0_ISR@motorControlTimerB,w,c
 12842  001A2C  6E15               	movwf	??_tmr0_ISR& (0+255),c
 12843  001A2E  501B               	movf	tmr0_ISR@motorControlTimerB+1,w,c
 12844  001A30  6E16               	movwf	(??_tmr0_ISR+1)& (0+255),c
 12845  001A32  6A17               	clrf	(??_tmr0_ISR+2)& (0+255),c
 12846  001A34  6A18               	clrf	(??_tmr0_ISR+3)& (0+255),c
 12847  001A36  5051               	movf	_longTolerance,w,c
 12848  001A38  1815               	xorwf	??_tmr0_ISR,w,c
 12849  001A3A  E133               	bnz	i2l4684
 12850  001A3C  5052               	movf	_longTolerance+1,w,c
 12851  001A3E  1816               	xorwf	??_tmr0_ISR+1,w,c
 12852  001A40  E130               	bnz	i2l4684
 12853  001A42  5053               	movf	_longTolerance+2,w,c
 12854  001A44  1817               	xorwf	??_tmr0_ISR+2,w,c
 12855  001A46  E12D               	bnz	i2l4684
 12856  001A48  5054               	movf	_longTolerance+3,w,c
 12857  001A4A  1818               	xorwf	??_tmr0_ISR+3,w,c
 12858  001A4C  A4D8               	btfss	status,2,c
 12859  001A4E  D029               	goto	i2l682
 12860                           
 12861                           ;timer.c: 195: motorControl(BOLT, inverseDir(currentMotorDir.b));
 12862  001A50  5055               	movf	_currentMotorDir,w,c
 12863  001A52  ECA3  F019         	call	_inverseDir
 12864  001A56  6E02               	movwf	i2motorControl@dir,c
 12865  001A58  0E00               	movlw	0
 12866  001A5A  ECC9  F013         	call	i2_motorControl
 12867                           
 12868                           ;timer.c: 196: motorGoingBackwards.b = 1;
 12869  001A5E  0E01               	movlw	1
 12870  001A60  D01B               	goto	L15
 12871  001A62                     i2l679:
 12872                           
 12873                           ;timer.c: 200: if (motorControlTimerB == shortTolerance) {
 12874  001A62  501A               	movf	tmr0_ISR@motorControlTimerB,w,c
 12875  001A64  6E15               	movwf	??_tmr0_ISR& (0+255),c
 12876  001A66  501B               	movf	tmr0_ISR@motorControlTimerB+1,w,c
 12877  001A68  6E16               	movwf	(??_tmr0_ISR+1)& (0+255),c
 12878  001A6A  6A17               	clrf	(??_tmr0_ISR+2)& (0+255),c
 12879  001A6C  6A18               	clrf	(??_tmr0_ISR+3)& (0+255),c
 12880  001A6E  504D               	movf	_shortTolerance,w,c
 12881  001A70  1815               	xorwf	??_tmr0_ISR,w,c
 12882  001A72  E117               	bnz	i2l4684
 12883  001A74  504E               	movf	_shortTolerance+1,w,c
 12884  001A76  1816               	xorwf	??_tmr0_ISR+1,w,c
 12885  001A78  E114               	bnz	i2l4684
 12886  001A7A  504F               	movf	_shortTolerance+2,w,c
 12887  001A7C  1817               	xorwf	??_tmr0_ISR+2,w,c
 12888  001A7E  E111               	bnz	i2l4684
 12889  001A80  5050               	movf	_shortTolerance+3,w,c
 12890  001A82  1818               	xorwf	??_tmr0_ISR+3,w,c
 12891  001A84  A4D8               	btfss	status,2,c
 12892  001A86  D00D               	goto	i2l682
 12893                           
 12894                           ;timer.c: 201: motorControl(BOLT, inverseDir(currentMotorDir.b));
 12895  001A88  5055               	movf	_currentMotorDir,w,c
 12896  001A8A  ECA3  F019         	call	_inverseDir
 12897  001A8E  6E02               	movwf	i2motorControl@dir,c
 12898  001A90  0E00               	movlw	0
 12899  001A92  ECC9  F013         	call	i2_motorControl
 12900                           
 12901                           ;timer.c: 202: motorGoingBackwards.b = 0;
 12902  001A96  0E00               	movlw	0
 12903  001A98                     L15:
 12904  001A98  6E40               	movwf	_motorGoingBackwards,c	;volatile
 12905                           
 12906                           ;timer.c: 203: motorControlTimerB = 0;
 12907  001A9A  0E00               	movlw	0
 12908  001A9C  6E1B               	movwf	tmr0_ISR@motorControlTimerB+1,c
 12909  001A9E  0E00               	movlw	0
 12910  001AA0  6E1A               	movwf	tmr0_ISR@motorControlTimerB,c
 12911  001AA2                     i2l682:
 12912  001AA2                     i2l4684:
 12913                           
 12914                           ;timer.c: 204: }
 12915                           ;timer.c: 205: }
 12916                           ;timer.c: 206: }
 12917                           ;timer.c: 208: if (currentMotorDir.n != STOPMOTOR) {
 12918  001AA2  0E02               	movlw	2
 12919  001AA4  1856               	xorwf	_currentMotorDir+1,w,c
 12920  001AA6  B4D8               	btfsc	status,2,c
 12921  001AA8  D03F               	goto	i2l687
 12922                           
 12923                           ;timer.c: 209: if (!motorGoingBackwards.n) {
 12924  001AAA  5041               	movf	_motorGoingBackwards+1,w,c	;volatile
 12925  001AAC  A4D8               	btfss	status,2,c
 12926  001AAE  D01C               	goto	i2l684
 12927                           
 12928                           ;timer.c: 210: if (motorControlTimerN == longTolerance) {
 12929  001AB0  501C               	movf	tmr0_ISR@motorControlTimerN,w,c
 12930  001AB2  6E15               	movwf	??_tmr0_ISR& (0+255),c
 12931  001AB4  501D               	movf	tmr0_ISR@motorControlTimerN+1,w,c
 12932  001AB6  6E16               	movwf	(??_tmr0_ISR+1)& (0+255),c
 12933  001AB8  6A17               	clrf	(??_tmr0_ISR+2)& (0+255),c
 12934  001ABA  6A18               	clrf	(??_tmr0_ISR+3)& (0+255),c
 12935  001ABC  5051               	movf	_longTolerance,w,c
 12936  001ABE  1815               	xorwf	??_tmr0_ISR,w,c
 12937  001AC0  E133               	bnz	i2l4704
 12938  001AC2  5052               	movf	_longTolerance+1,w,c
 12939  001AC4  1816               	xorwf	??_tmr0_ISR+1,w,c
 12940  001AC6  E130               	bnz	i2l4704
 12941  001AC8  5053               	movf	_longTolerance+2,w,c
 12942  001ACA  1817               	xorwf	??_tmr0_ISR+2,w,c
 12943  001ACC  E12D               	bnz	i2l4704
 12944  001ACE  5054               	movf	_longTolerance+3,w,c
 12945  001AD0  1818               	xorwf	??_tmr0_ISR+3,w,c
 12946  001AD2  A4D8               	btfss	status,2,c
 12947  001AD4  D029               	goto	i2l687
 12948                           
 12949                           ;timer.c: 211: motorControl(NUT, inverseDir(currentMotorDir.n));
 12950  001AD6  5056               	movf	_currentMotorDir+1,w,c
 12951  001AD8  ECA3  F019         	call	_inverseDir
 12952  001ADC  6E02               	movwf	i2motorControl@dir,c
 12953  001ADE  0E01               	movlw	1
 12954  001AE0  ECC9  F013         	call	i2_motorControl
 12955                           
 12956                           ;timer.c: 212: motorGoingBackwards.n = 1;
 12957  001AE4  0E01               	movlw	1
 12958  001AE6  D01B               	goto	L16
 12959  001AE8                     i2l684:
 12960                           
 12961                           ;timer.c: 216: if (motorControlTimerN == shortTolerance) {
 12962  001AE8  501C               	movf	tmr0_ISR@motorControlTimerN,w,c
 12963  001AEA  6E15               	movwf	??_tmr0_ISR& (0+255),c
 12964  001AEC  501D               	movf	tmr0_ISR@motorControlTimerN+1,w,c
 12965  001AEE  6E16               	movwf	(??_tmr0_ISR+1)& (0+255),c
 12966  001AF0  6A17               	clrf	(??_tmr0_ISR+2)& (0+255),c
 12967  001AF2  6A18               	clrf	(??_tmr0_ISR+3)& (0+255),c
 12968  001AF4  504D               	movf	_shortTolerance,w,c
 12969  001AF6  1815               	xorwf	??_tmr0_ISR,w,c
 12970  001AF8  E117               	bnz	i2l4704
 12971  001AFA  504E               	movf	_shortTolerance+1,w,c
 12972  001AFC  1816               	xorwf	??_tmr0_ISR+1,w,c
 12973  001AFE  E114               	bnz	i2l4704
 12974  001B00  504F               	movf	_shortTolerance+2,w,c
 12975  001B02  1817               	xorwf	??_tmr0_ISR+2,w,c
 12976  001B04  E111               	bnz	i2l4704
 12977  001B06  5050               	movf	_shortTolerance+3,w,c
 12978  001B08  1818               	xorwf	??_tmr0_ISR+3,w,c
 12979  001B0A  A4D8               	btfss	status,2,c
 12980  001B0C  D00D               	goto	i2l687
 12981                           
 12982                           ;timer.c: 217: motorControl(NUT, inverseDir(currentMotorDir.b));
 12983  001B0E  5055               	movf	_currentMotorDir,w,c
 12984  001B10  ECA3  F019         	call	_inverseDir
 12985  001B14  6E02               	movwf	i2motorControl@dir,c
 12986  001B16  0E01               	movlw	1
 12987  001B18  ECC9  F013         	call	i2_motorControl
 12988                           
 12989                           ;timer.c: 218: motorGoingBackwards.n = 0;
 12990  001B1C  0E00               	movlw	0
 12991  001B1E                     L16:
 12992  001B1E  6E41               	movwf	_motorGoingBackwards+1,c	;volatile
 12993                           
 12994                           ;timer.c: 219: motorControlTimerN = 0;
 12995  001B20  0E00               	movlw	0
 12996  001B22  6E1D               	movwf	tmr0_ISR@motorControlTimerN+1,c
 12997  001B24  0E00               	movlw	0
 12998  001B26  6E1C               	movwf	tmr0_ISR@motorControlTimerN,c
 12999  001B28                     i2l687:
 13000  001B28                     i2l4704:
 13001                           
 13002                           ;timer.c: 220: }
 13003                           ;timer.c: 221: }
 13004                           ;timer.c: 222: }
 13005                           ;timer.c: 224: if (currentMotorDir.s != STOPMOTOR) {
 13006  001B28  0E02               	movlw	2
 13007  001B2A  1857               	xorwf	_currentMotorDir+2,w,c
 13008  001B2C  B4D8               	btfsc	status,2,c
 13009  001B2E  0012               	return	
 13010                           
 13011                           ;timer.c: 225: if (!motorGoingBackwards.s) {
 13012  001B30  5042               	movf	_motorGoingBackwards+2,w,c	;volatile
 13013  001B32  A4D8               	btfss	status,2,c
 13014  001B34  D021               	goto	i2l689
 13015                           
 13016                           ;timer.c: 226: if (motorControlTimerS == longTolerance) {
 13017  001B36  501E               	movf	tmr0_ISR@motorControlTimerS,w,c
 13018  001B38  6E15               	movwf	??_tmr0_ISR& (0+255),c
 13019  001B3A  501F               	movf	tmr0_ISR@motorControlTimerS+1,w,c
 13020  001B3C  6E16               	movwf	(??_tmr0_ISR+1)& (0+255),c
 13021  001B3E  6A17               	clrf	(??_tmr0_ISR+2)& (0+255),c
 13022  001B40  6A18               	clrf	(??_tmr0_ISR+3)& (0+255),c
 13023  001B42  5051               	movf	_longTolerance,w,c
 13024  001B44  1815               	xorwf	??_tmr0_ISR,w,c
 13025  001B46  E14C               	bnz	i2l695
 13026  001B48  5052               	movf	_longTolerance+1,w,c
 13027  001B4A  1816               	xorwf	??_tmr0_ISR+1,w,c
 13028  001B4C  E149               	bnz	i2l695
 13029  001B4E  5053               	movf	_longTolerance+2,w,c
 13030  001B50  1817               	xorwf	??_tmr0_ISR+2,w,c
 13031  001B52  E146               	bnz	i2l695
 13032  001B54  5054               	movf	_longTolerance+3,w,c
 13033  001B56  1818               	xorwf	??_tmr0_ISR+3,w,c
 13034  001B58  A4D8               	btfss	status,2,c
 13035  001B5A  0012               	return	
 13036                           
 13037                           ;timer.c: 227: motorControl(SPACER, inverseDir(currentMotorDir.s));
 13038  001B5C  5057               	movf	_currentMotorDir+2,w,c
 13039  001B5E  ECA3  F019         	call	_inverseDir
 13040  001B62  6E02               	movwf	i2motorControl@dir,c
 13041  001B64  0E02               	movlw	2
 13042  001B66  ECC9  F013         	call	i2_motorControl
 13043                           
 13044                           ;timer.c: 228: motorGoingBackwards.s = 1;
 13045  001B6A  0E01               	movlw	1
 13046  001B6C  6E42               	movwf	_motorGoingBackwards+2,c	;volatile
 13047                           
 13048                           ;timer.c: 229: motorControlTimerS = 0;
 13049  001B6E  0E00               	movlw	0
 13050  001B70  6E1F               	movwf	tmr0_ISR@motorControlTimerS+1,c
 13051  001B72  0E00               	movlw	0
 13052  001B74  6E1E               	movwf	tmr0_ISR@motorControlTimerS,c
 13053                           
 13054                           ;timer.c: 230: }
 13055                           ;timer.c: 231: } else {
 13056  001B76  0012               	return	
 13057  001B78                     i2l689:
 13058                           
 13059                           ;timer.c: 232: if (motorControlTimerS == shortTolerance) {
 13060  001B78  501E               	movf	tmr0_ISR@motorControlTimerS,w,c
 13061  001B7A  6E15               	movwf	??_tmr0_ISR& (0+255),c
 13062  001B7C  501F               	movf	tmr0_ISR@motorControlTimerS+1,w,c
 13063  001B7E  6E16               	movwf	(??_tmr0_ISR+1)& (0+255),c
 13064  001B80  6A17               	clrf	(??_tmr0_ISR+2)& (0+255),c
 13065  001B82  6A18               	clrf	(??_tmr0_ISR+3)& (0+255),c
 13066  001B84  504D               	movf	_shortTolerance,w,c
 13067  001B86  1815               	xorwf	??_tmr0_ISR,w,c
 13068  001B88  E12B               	bnz	i2l695
 13069  001B8A  504E               	movf	_shortTolerance+1,w,c
 13070  001B8C  1816               	xorwf	??_tmr0_ISR+1,w,c
 13071  001B8E  E128               	bnz	i2l695
 13072  001B90  504F               	movf	_shortTolerance+2,w,c
 13073  001B92  1817               	xorwf	??_tmr0_ISR+2,w,c
 13074  001B94  E125               	bnz	i2l695
 13075  001B96  5050               	movf	_shortTolerance+3,w,c
 13076  001B98  1818               	xorwf	??_tmr0_ISR+3,w,c
 13077  001B9A  A4D8               	btfss	status,2,c
 13078  001B9C  0012               	return	
 13079                           
 13080                           ;timer.c: 233: motorControl(SPACER, inverseDir(currentMotorDir.s));
 13081  001B9E  5057               	movf	_currentMotorDir+2,w,c
 13082  001BA0  ECA3  F019         	call	_inverseDir
 13083  001BA4  6E02               	movwf	i2motorControl@dir,c
 13084  001BA6  0E02               	movlw	2
 13085  001BA8  ECC9  F013         	call	i2_motorControl
 13086                           
 13087                           ;timer.c: 234: motorGoingBackwards.s = 0;
 13088  001BAC  0E00               	movlw	0
 13089  001BAE  6E42               	movwf	_motorGoingBackwards+2,c	;volatile
 13090                           
 13091                           ;timer.c: 235: motorControlTimerS = 0;
 13092  001BB0  0E00               	movlw	0
 13093  001BB2  6E1F               	movwf	tmr0_ISR@motorControlTimerS+1,c
 13094  001BB4  0E00               	movlw	0
 13095  001BB6  6E1E               	movwf	tmr0_ISR@motorControlTimerS,c
 13096                           
 13097                           ;timer.c: 236: }
 13098                           ;timer.c: 237: }
 13099                           ;timer.c: 238: }
 13100                           ;timer.c: 239: break;
 13101  001BB8  0012               	return	
 13102  001BBA                     
 13103                           ;timer.c: 241: resetMotorTimer();
 13104  001BBA  EC99  F019         	call	_resetMotorTimer	;wreg free
 13105                           
 13106                           ;timer.c: 243: }
 13107                           
 13108                           ;timer.c: 242: break;
 13109  001BBE  0012               	return	
 13110  001BC0                     i2l670:
 13111  001BC0  C048  F015         	movff	_currentMode,??_tmr0_ISR
 13112  001BC4  C049  F016         	movff	_currentMode+1,??_tmr0_ISR+1
 13113                           
 13114                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13115                           ; Switch size 1, requested type "space"
 13116                           ; Number of cases is 1, Range of values is 0 to 0
 13117                           ; switch strategies available:
 13118                           ; Name         Instructions Cycles
 13119                           ; simple_byte            4     3 (average)
 13120                           ;	Chosen strategy is simple_byte
 13121  001BC8  5016               	movf	??_tmr0_ISR+1,w,c
 13122  001BCA  0A00               	xorlw	0	; case 0
 13123  001BCC  A4D8               	btfss	status,2,c
 13124  001BCE  D7F5               	goto	i2l694
 13125                           
 13126                           ; Switch size 1, requested type "space"
 13127                           ; Number of cases is 2, Range of values is 2 to 3
 13128                           ; switch strategies available:
 13129                           ; Name         Instructions Cycles
 13130                           ; simple_byte            7     4 (average)
 13131                           ;	Chosen strategy is simple_byte
 13132  001BD0  5015               	movf	??_tmr0_ISR,w,c
 13133  001BD2  0A02               	xorlw	2	; case 2
 13134  001BD4  B4D8               	btfsc	status,2,c
 13135  001BD6  D6DF               	goto	i2l671
 13136  001BD8  0A01               	xorlw	1	; case 3
 13137  001BDA  B4D8               	btfsc	status,2,c
 13138  001BDC  D6DC               	goto	i2l671
 13139  001BDE  D7ED               	goto	i2l694
 13140  001BE0                     i2l695:
 13141  001BE0  0012               	return		;funcret
 13142  001BE2                     __end_of_tmr0_ISR:
 13143                           	opt stack 0
 13144                           tosu	equ	0xFFF
 13145                           tosh	equ	0xFFE
 13146                           tosl	equ	0xFFD
 13147                           pclatu	equ	0xFFB
 13148                           pclath	equ	0xFFA
 13149                           tblptru	equ	0xFF8
 13150                           tblptrh	equ	0xFF7
 13151                           tblptrl	equ	0xFF6
 13152                           tablat	equ	0xFF5
 13153                           prodh	equ	0xFF4
 13154                           prodl	equ	0xFF3
 13155                           intcon	equ	0xFF2
 13156                           indf0	equ	0xFEF
 13157                           postinc0	equ	0xFEE
 13158                           fsr0h	equ	0xFEA
 13159                           fsr0l	equ	0xFE9
 13160                           wreg	equ	0xFE8
 13161                           postdec1	equ	0xFE5
 13162                           plusw1	equ	0xFE3
 13163                           fsr1h	equ	0xFE2
 13164                           fsr1l	equ	0xFE1
 13165                           indf2	equ	0xFDF
 13166                           postinc2	equ	0xFDE
 13167                           postdec2	equ	0xFDD
 13168                           plusw2	equ	0xFDB
 13169                           fsr2h	equ	0xFDA
 13170                           fsr2l	equ	0xFD9
 13171                           status	equ	0xFD8
 13172                           
 13173 ;; *************** function i2_motorControl *****************
 13174 ;; Defined at:
 13175 ;;		line 7 in file "motors.c"
 13176 ;; Parameters:    Size  Location     Type
 13177 ;;  motor           1    wreg     enum E2968
 13178 ;;  dir             1    1[COMRAM] enum E2974
 13179 ;; Auto vars:     Size  Location     Type
 13180 ;;  motor           1    2[COMRAM] enum E2968
 13181 ;; Return value:  Size  Location     Type
 13182 ;;                  1    wreg      void 
 13183 ;; Registers used:
 13184 ;;		wreg, status,2, status,0
 13185 ;; Tracked objects:
 13186 ;;		On entry : 0/0
 13187 ;;		On exit  : 0/0
 13188 ;;		Unchanged: 0/0
 13189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13190 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13191 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13193 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13194 ;;Total ram usage:        2 bytes
 13195 ;; Hardware stack levels used:    1
 13196 ;; This function calls:
 13197 ;;		Nothing
 13198 ;; This function is called by:
 13199 ;;		_tmr0_ISR
 13200 ;; This function uses a non-reentrant model
 13201 ;;
 13202                           
 13203                           	psect	text43
 13204  002792                     __ptext43:
 13205                           	opt stack 0
 13206  002792                     i2_motorControl:
 13207                           	opt stack 22
 13208                           
 13209                           ;incstack = 0
 13210                           ;i2motorControl@motor stored from wreg
 13211  002792  6E03               	movwf	i2motorControl@motor,c
 13212                           
 13213                           ;motors.c: 8: switch(motor) {
 13214  002794  D050               	goto	i2l728
 13215  002796                     
 13216                           ;motors.c: 10: if (dir == FORWARD) {
 13217  002796  5002               	movf	i2motorControl@dir,w,c
 13218  002798  A4D8               	btfss	status,2,c
 13219  00279A  D003               	goto	i2l730
 13220                           
 13221                           ;motors.c: 11: LATBbits.LATB3 = 1;
 13222  00279C  868A               	bsf	3978,3,c	;volatile
 13223                           
 13224                           ;motors.c: 12: LATCbits.LATC0 = 0;
 13225  00279E  908B               	bcf	3979,0,c	;volatile
 13226                           
 13227                           ;motors.c: 13: } else if (dir == REVERSE) {
 13228  0027A0  D00B               	goto	i2l734
 13229  0027A2                     i2l730:
 13230  0027A2  0402               	decf	i2motorControl@dir,w,c
 13231  0027A4  A4D8               	btfss	status,2,c
 13232  0027A6  D002               	goto	i2l732
 13233                           
 13234                           ;motors.c: 14: LATBbits.LATB3 = 0;
 13235  0027A8  968A               	bcf	3978,3,c	;volatile
 13236  0027AA  D005               	goto	L17
 13237  0027AC                     i2l732:
 13238  0027AC  0E02               	movlw	2
 13239  0027AE  1802               	xorwf	i2motorControl@dir,w,c
 13240  0027B0  A4D8               	btfss	status,2,c
 13241  0027B2  D002               	goto	i2l734
 13242                           
 13243                           ;motors.c: 17: LATBbits.LATB3 = 1;
 13244  0027B4  868A               	bsf	3978,3,c	;volatile
 13245  0027B6                     L17:
 13246                           
 13247                           ;motors.c: 18: LATCbits.LATC0 = 1;
 13248  0027B6  808B               	bsf	3979,0,c	;volatile
 13249  0027B8                     i2l734:
 13250                           
 13251                           ;motors.c: 19: }
 13252                           ;motors.c: 20: currentMotorDir.s = dir;
 13253  0027B8  C002  F057         	movff	i2motorControl@dir,_currentMotorDir+2
 13254                           
 13255                           ;motors.c: 21: break;
 13256  0027BC  0012               	return	
 13257  0027BE                     
 13258                           ;motors.c: 23: if (dir == FORWARD) {
 13259  0027BE  5002               	movf	i2motorControl@dir,w,c
 13260  0027C0  A4D8               	btfss	status,2,c
 13261  0027C2  D003               	goto	i2l737
 13262                           
 13263                           ;motors.c: 24: LATCbits.LATC1 = 1;
 13264  0027C4  828B               	bsf	3979,1,c	;volatile
 13265                           
 13266                           ;motors.c: 25: LATCbits.LATC2 = 0;
 13267  0027C6  948B               	bcf	3979,2,c	;volatile
 13268                           
 13269                           ;motors.c: 26: } else if (dir == REVERSE) {
 13270  0027C8  D00B               	goto	i2l741
 13271  0027CA                     i2l737:
 13272  0027CA  0402               	decf	i2motorControl@dir,w,c
 13273  0027CC  A4D8               	btfss	status,2,c
 13274  0027CE  D002               	goto	i2l739
 13275                           
 13276                           ;motors.c: 27: LATCbits.LATC1 = 0;
 13277  0027D0  928B               	bcf	3979,1,c	;volatile
 13278  0027D2  D005               	goto	L18
 13279  0027D4                     i2l739:
 13280  0027D4  0E02               	movlw	2
 13281  0027D6  1802               	xorwf	i2motorControl@dir,w,c
 13282  0027D8  A4D8               	btfss	status,2,c
 13283  0027DA  D002               	goto	i2l741
 13284                           
 13285                           ;motors.c: 30: LATCbits.LATC1 = 1;
 13286  0027DC  828B               	bsf	3979,1,c	;volatile
 13287  0027DE                     L18:
 13288                           
 13289                           ;motors.c: 31: LATCbits.LATC2 = 1;
 13290  0027DE  848B               	bsf	3979,2,c	;volatile
 13291  0027E0                     i2l741:
 13292                           
 13293                           ;motors.c: 32: }
 13294                           ;motors.c: 33: currentMotorDir.n = dir;
 13295  0027E0  C002  F056         	movff	i2motorControl@dir,_currentMotorDir+1
 13296                           
 13297                           ;motors.c: 34: break;
 13298  0027E4  0012               	return	
 13299  0027E6                     
 13300                           ;motors.c: 36: if (dir == FORWARD) {
 13301  0027E6  5002               	movf	i2motorControl@dir,w,c
 13302  0027E8  A4D8               	btfss	status,2,c
 13303  0027EA  D003               	goto	i2l743
 13304                           
 13305                           ;motors.c: 37: LATCbits.LATC5 = 1;
 13306  0027EC  8A8B               	bsf	3979,5,c	;volatile
 13307                           
 13308                           ;motors.c: 38: LATCbits.LATC6 = 0;
 13309  0027EE  9C8B               	bcf	3979,6,c	;volatile
 13310                           
 13311                           ;motors.c: 39: } else if (dir == REVERSE) {
 13312  0027F0  D00B               	goto	i2l747
 13313  0027F2                     i2l743:
 13314  0027F2  0402               	decf	i2motorControl@dir,w,c
 13315  0027F4  A4D8               	btfss	status,2,c
 13316  0027F6  D002               	goto	i2l745
 13317                           
 13318                           ;motors.c: 40: LATCbits.LATC5 = 0;
 13319  0027F8  9A8B               	bcf	3979,5,c	;volatile
 13320  0027FA  D005               	goto	L19
 13321  0027FC                     i2l745:
 13322  0027FC  0E02               	movlw	2
 13323  0027FE  1802               	xorwf	i2motorControl@dir,w,c
 13324  002800  A4D8               	btfss	status,2,c
 13325  002802  D002               	goto	i2l747
 13326                           
 13327                           ;motors.c: 43: LATCbits.LATC5 = 1;
 13328  002804  8A8B               	bsf	3979,5,c	;volatile
 13329  002806                     L19:
 13330                           
 13331                           ;motors.c: 44: LATCbits.LATC6 = 1;
 13332  002806  8C8B               	bsf	3979,6,c	;volatile
 13333  002808                     i2l747:
 13334                           
 13335                           ;motors.c: 45: }
 13336                           ;motors.c: 46: currentMotorDir.w = dir;
 13337  002808  C002  F058         	movff	i2motorControl@dir,_currentMotorDir+3
 13338                           
 13339                           ;motors.c: 47: break;
 13340  00280C  0012               	return	
 13341  00280E                     
 13342                           ;motors.c: 49: if (dir == FORWARD) {
 13343  00280E  5002               	movf	i2motorControl@dir,w,c
 13344  002810  A4D8               	btfss	status,2,c
 13345  002812  D003               	goto	i2l749
 13346                           
 13347                           ;motors.c: 50: LATCbits.LATC7 = 1;
 13348  002814  8E8B               	bsf	3979,7,c	;volatile
 13349                           
 13350                           ;motors.c: 51: LATEbits.LATE0 = 0;
 13351  002816  908D               	bcf	3981,0,c	;volatile
 13352                           
 13353                           ;motors.c: 52: } else if (dir == REVERSE) {
 13354  002818  D00B               	goto	i2l753
 13355  00281A                     i2l749:
 13356  00281A  0402               	decf	i2motorControl@dir,w,c
 13357  00281C  A4D8               	btfss	status,2,c
 13358  00281E  D002               	goto	i2l751
 13359                           
 13360                           ;motors.c: 53: LATCbits.LATC7 = 0;
 13361  002820  9E8B               	bcf	3979,7,c	;volatile
 13362  002822  D005               	goto	L20
 13363  002824                     i2l751:
 13364  002824  0E02               	movlw	2
 13365  002826  1802               	xorwf	i2motorControl@dir,w,c
 13366  002828  A4D8               	btfss	status,2,c
 13367  00282A  D002               	goto	i2l753
 13368                           
 13369                           ;motors.c: 56: LATCbits.LATC7 = 1;
 13370  00282C  8E8B               	bsf	3979,7,c	;volatile
 13371  00282E                     L20:
 13372                           
 13373                           ;motors.c: 57: LATEbits.LATE0 = 1;
 13374  00282E  808D               	bsf	3981,0,c	;volatile
 13375  002830                     i2l753:
 13376                           
 13377                           ;motors.c: 58: }
 13378                           ;motors.c: 59: currentMotorDir.b = dir;
 13379  002830  C002  F055         	movff	i2motorControl@dir,_currentMotorDir
 13380                           
 13381                           ;motors.c: 63: }
 13382                           
 13383                           ;motors.c: 62: break;
 13384                           
 13385                           ;motors.c: 61: default:
 13386                           
 13387                           ;motors.c: 60: break;
 13388  002834  0012               	return	
 13389  002836                     i2l728:
 13390  002836  5003               	movf	i2motorControl@motor,w,c
 13391                           
 13392                           ; Switch size 1, requested type "space"
 13393                           ; Number of cases is 4, Range of values is 0 to 3
 13394                           ; switch strategies available:
 13395                           ; Name         Instructions Cycles
 13396                           ; simple_byte           13     7 (average)
 13397                           ;	Chosen strategy is simple_byte
 13398  002838  0A00               	xorlw	0	; case 0
 13399  00283A  B4D8               	btfsc	status,2,c
 13400  00283C  D7E8               	goto	i2l748
 13401  00283E  0A01               	xorlw	1	; case 1
 13402  002840  B4D8               	btfsc	status,2,c
 13403  002842  D7BD               	goto	i2l736
 13404  002844  0A03               	xorlw	3	; case 2
 13405  002846  B4D8               	btfsc	status,2,c
 13406  002848  D7A6               	goto	i2l729
 13407  00284A  0A01               	xorlw	1	; case 3
 13408  00284C  A4D8               	btfss	status,2,c
 13409  00284E  0012               	return	
 13410  002850  D7CA               	goto	i2l742
 13411  002852                     __end_ofi2_motorControl:
 13412                           	opt stack 0
 13413                           tosu	equ	0xFFF
 13414                           tosh	equ	0xFFE
 13415                           tosl	equ	0xFFD
 13416                           pclatu	equ	0xFFB
 13417                           pclath	equ	0xFFA
 13418                           tblptru	equ	0xFF8
 13419                           tblptrh	equ	0xFF7
 13420                           tblptrl	equ	0xFF6
 13421                           tablat	equ	0xFF5
 13422                           prodh	equ	0xFF4
 13423                           prodl	equ	0xFF3
 13424                           intcon	equ	0xFF2
 13425                           indf0	equ	0xFEF
 13426                           postinc0	equ	0xFEE
 13427                           fsr0h	equ	0xFEA
 13428                           fsr0l	equ	0xFE9
 13429                           wreg	equ	0xFE8
 13430                           postdec1	equ	0xFE5
 13431                           plusw1	equ	0xFE3
 13432                           fsr1h	equ	0xFE2
 13433                           fsr1l	equ	0xFE1
 13434                           indf2	equ	0xFDF
 13435                           postinc2	equ	0xFDE
 13436                           postdec2	equ	0xFDD
 13437                           plusw2	equ	0xFDB
 13438                           fsr2h	equ	0xFDA
 13439                           fsr2l	equ	0xFD9
 13440                           status	equ	0xFD8
 13441                           
 13442 ;; *************** function i2___ftadd *****************
 13443 ;; Defined at:
 13444 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 13445 ;; Parameters:    Size  Location     Type
 13446 ;;  f1              3    8[COMRAM] float 
 13447 ;;  f2              3   11[COMRAM] float 
 13448 ;; Auto vars:     Size  Location     Type
 13449 ;;  __ftadd         1   19[COMRAM] unsigned char 
 13450 ;;  __ftadd         1   18[COMRAM] unsigned char 
 13451 ;;  __ftadd         1   17[COMRAM] unsigned char 
 13452 ;; Return value:  Size  Location     Type
 13453 ;;                  3    8[COMRAM] float 
 13454 ;; Registers used:
 13455 ;;		wreg, status,2, status,0, cstack
 13456 ;; Tracked objects:
 13457 ;;		On entry : 0/0
 13458 ;;		On exit  : 0/0
 13459 ;;		Unchanged: 0/0
 13460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13461 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13462 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13463 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13464 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13465 ;;Total ram usage:       12 bytes
 13466 ;; Hardware stack levels used:    1
 13467 ;; Hardware stack levels required when called:    1
 13468 ;; This function calls:
 13469 ;;		i2___ftpack
 13470 ;; This function is called by:
 13471 ;;		_tmr0_ISR
 13472 ;; This function uses a non-reentrant model
 13473 ;;
 13474                           
 13475                           	psect	text44
 13476  0023F0                     __ptext44:
 13477                           	opt stack 0
 13478  0023F0                     i2___ftadd:
 13479                           	opt stack 21
 13480                           
 13481                           ;incstack = 0
 13482  0023F0  C00B  F00F         	movff	i2___ftadd@f1+2,??i2___ftadd
 13483  0023F4  6A10               	clrf	(??i2___ftadd+1)& (0+255),c
 13484  0023F6  6A11               	clrf	(??i2___ftadd+2)& (0+255),c
 13485  0023F8  340A               	rlcf	i2___ftadd@f1+1,w,c
 13486  0023FA  360F               	rlcf	??i2___ftadd& (0+255),f,c
 13487  0023FC  E301               	bnc	u512_41
 13488  0023FE  8010               	bsf	(??i2___ftadd+1)& (0+255),0,c
 13489  002400                     u512_41:
 13490  002400  500F               	movf	??i2___ftadd,w,c
 13491  002402  6E14               	movwf	i2___ftadd@exp1,c
 13492  002404  C00E  F00F         	movff	i2___ftadd@f2+2,??i2___ftadd
 13493  002408  6A10               	clrf	(??i2___ftadd+1)& (0+255),c
 13494  00240A  6A11               	clrf	(??i2___ftadd+2)& (0+255),c
 13495  00240C  340D               	rlcf	i2___ftadd@f2+1,w,c
 13496  00240E  360F               	rlcf	??i2___ftadd& (0+255),f,c
 13497  002410  E301               	bnc	u513_41
 13498  002412  8010               	bsf	(??i2___ftadd+1)& (0+255),0,c
 13499  002414                     u513_41:
 13500  002414  500F               	movf	??i2___ftadd,w,c
 13501  002416  6E13               	movwf	i2___ftadd@exp2,c
 13502  002418  5014               	movf	i2___ftadd@exp1,w,c
 13503  00241A  B4D8               	btfsc	status,2,c
 13504  00241C  D00B               	goto	i2u516_40
 13505  00241E  5013               	movf	i2___ftadd@exp2,w,c
 13506  002420  5C14               	subwf	i2___ftadd@exp1,w,c
 13507  002422  B0D8               	btfsc	status,0,c
 13508  002424  D00E               	goto	i2l1110
 13509  002426  5014               	movf	i2___ftadd@exp1,w,c
 13510  002428  0800               	sublw	0
 13511  00242A  2413               	addwf	i2___ftadd@exp2,w,c
 13512  00242C  6E0F               	movwf	??i2___ftadd& (0+255),c
 13513  00242E  0E18               	movlw	24
 13514  002430  640F               	cpfsgt	??i2___ftadd,c
 13515  002432  D007               	goto	i2l1110
 13516  002434                     i2u516_40:
 13517  002434  C00C  F009         	movff	i2___ftadd@f2,?i2___ftadd
 13518  002438  C00D  F00A         	movff	i2___ftadd@f2+1,?i2___ftadd+1
 13519  00243C  C00E  F00B         	movff	i2___ftadd@f2+2,?i2___ftadd+2
 13520  002440  0012               	return	
 13521  002442                     i2l1110:
 13522  002442  5013               	movf	i2___ftadd@exp2,w,c
 13523  002444  B4D8               	btfsc	status,2,c
 13524  002446  D00B               	goto	i2u519_40
 13525  002448  5014               	movf	i2___ftadd@exp1,w,c
 13526  00244A  5C13               	subwf	i2___ftadd@exp2,w,c
 13527  00244C  B0D8               	btfsc	status,0,c
 13528  00244E  D00E               	goto	i2l1114
 13529  002450  5013               	movf	i2___ftadd@exp2,w,c
 13530  002452  0800               	sublw	0
 13531  002454  2414               	addwf	i2___ftadd@exp1,w,c
 13532  002456  6E0F               	movwf	??i2___ftadd& (0+255),c
 13533  002458  0E18               	movlw	24
 13534  00245A  640F               	cpfsgt	??i2___ftadd,c
 13535  00245C  D007               	goto	i2l1114
 13536  00245E                     i2u519_40:
 13537  00245E  C009  F009         	movff	i2___ftadd@f1,?i2___ftadd
 13538  002462  C00A  F00A         	movff	i2___ftadd@f1+1,?i2___ftadd+1
 13539  002466  C00B  F00B         	movff	i2___ftadd@f1+2,?i2___ftadd+2
 13540  00246A  0012               	return	
 13541  00246C                     i2l1114:
 13542  00246C  0E06               	movlw	6
 13543  00246E  6E12               	movwf	i2___ftadd@sign,c
 13544  002470  BE0B               	btfsc	i2___ftadd@f1+2,7,c
 13545  002472  8E12               	bsf	i2___ftadd@sign,7,c
 13546  002474  BE0E               	btfsc	i2___ftadd@f2+2,7,c
 13547  002476  8C12               	bsf	i2___ftadd@sign,6,c
 13548  002478  8E0A               	bsf	i2___ftadd@f1+1,7,c
 13549  00247A  0EFF               	movlw	255
 13550  00247C  1609               	andwf	i2___ftadd@f1,f,c
 13551  00247E  0EFF               	movlw	255
 13552  002480  160A               	andwf	i2___ftadd@f1+1,f,c
 13553  002482  0E00               	movlw	0
 13554  002484  160B               	andwf	i2___ftadd@f1+2,f,c
 13555  002486  8E0D               	bsf	i2___ftadd@f2+1,7,c
 13556  002488  0EFF               	movlw	255
 13557  00248A  160C               	andwf	i2___ftadd@f2,f,c
 13558  00248C  0EFF               	movlw	255
 13559  00248E  160D               	andwf	i2___ftadd@f2+1,f,c
 13560  002490  0E00               	movlw	0
 13561  002492  160E               	andwf	i2___ftadd@f2+2,f,c
 13562  002494  5013               	movf	i2___ftadd@exp2,w,c
 13563  002496  5C14               	subwf	i2___ftadd@exp1,w,c
 13564  002498  B0D8               	btfsc	status,0,c
 13565  00249A  D01B               	goto	i2l1119
 13566  00249C                     i2u522_40:
 13567  00249C  90D8               	bcf	status,0,c
 13568  00249E  360C               	rlcf	i2___ftadd@f2,f,c
 13569  0024A0  360D               	rlcf	i2___ftadd@f2+1,f,c
 13570  0024A2  360E               	rlcf	i2___ftadd@f2+2,f,c
 13571  0024A4  0613               	decf	i2___ftadd@exp2,f,c
 13572  0024A6  5014               	movf	i2___ftadd@exp1,w,c
 13573  0024A8  1813               	xorwf	i2___ftadd@exp2,w,c
 13574  0024AA  B4D8               	btfsc	status,2,c
 13575  0024AC  D00D               	goto	i2l1124
 13576  0024AE  0612               	decf	i2___ftadd@sign,f,c
 13577  0024B0  C012  F00F         	movff	i2___ftadd@sign,??i2___ftadd
 13578  0024B4  0E07               	movlw	7
 13579  0024B6  160F               	andwf	??i2___ftadd,f,c
 13580  0024B8  B4D8               	btfsc	status,2,c
 13581  0024BA  D006               	goto	i2l1124
 13582  0024BC  D7EF               	goto	i2u522_40
 13583  0024BE  90D8               	bcf	status,0,c
 13584  0024C0  320B               	rrcf	i2___ftadd@f1+2,f,c
 13585  0024C2  320A               	rrcf	i2___ftadd@f1+1,f,c
 13586  0024C4  3209               	rrcf	i2___ftadd@f1,f,c
 13587  0024C6  2A14               	incf	i2___ftadd@exp1,f,c
 13588  0024C8                     i2l1124:
 13589  0024C8  5013               	movf	i2___ftadd@exp2,w,c
 13590  0024CA  1814               	xorwf	i2___ftadd@exp1,w,c
 13591  0024CC  B4D8               	btfsc	status,2,c
 13592  0024CE  D01F               	goto	i2u529_40
 13593  0024D0  D7F6               	goto	i2l1125
 13594  0024D2                     i2l1119:
 13595  0024D2  5014               	movf	i2___ftadd@exp1,w,c
 13596  0024D4  5C13               	subwf	i2___ftadd@exp2,w,c
 13597  0024D6  B0D8               	btfsc	status,0,c
 13598  0024D8  D01A               	goto	i2u529_40
 13599  0024DA                     i2u526_40:
 13600  0024DA  90D8               	bcf	status,0,c
 13601  0024DC  3609               	rlcf	i2___ftadd@f1,f,c
 13602  0024DE  360A               	rlcf	i2___ftadd@f1+1,f,c
 13603  0024E0  360B               	rlcf	i2___ftadd@f1+2,f,c
 13604  0024E2  0614               	decf	i2___ftadd@exp1,f,c
 13605  0024E4  5014               	movf	i2___ftadd@exp1,w,c
 13606  0024E6  1813               	xorwf	i2___ftadd@exp2,w,c
 13607  0024E8  B4D8               	btfsc	status,2,c
 13608  0024EA  D00D               	goto	i2l1133
 13609  0024EC  0612               	decf	i2___ftadd@sign,f,c
 13610  0024EE  C012  F00F         	movff	i2___ftadd@sign,??i2___ftadd
 13611  0024F2  0E07               	movlw	7
 13612  0024F4  160F               	andwf	??i2___ftadd,f,c
 13613  0024F6  B4D8               	btfsc	status,2,c
 13614  0024F8  D006               	goto	i2l1133
 13615  0024FA  D7EF               	goto	i2u526_40
 13616  0024FC  90D8               	bcf	status,0,c
 13617  0024FE  320E               	rrcf	i2___ftadd@f2+2,f,c
 13618  002500  320D               	rrcf	i2___ftadd@f2+1,f,c
 13619  002502  320C               	rrcf	i2___ftadd@f2,f,c
 13620  002504  2A13               	incf	i2___ftadd@exp2,f,c
 13621  002506                     i2l1133:
 13622  002506  5013               	movf	i2___ftadd@exp2,w,c
 13623  002508  1814               	xorwf	i2___ftadd@exp1,w,c
 13624  00250A  A4D8               	btfss	status,2,c
 13625  00250C  D7F7               	goto	i2l1134
 13626  00250E                     i2u529_40:
 13627  00250E  AE12               	btfss	i2___ftadd@sign,7,c
 13628  002510  D00C               	goto	i2l1136
 13629  002512  0EFF               	movlw	255
 13630  002514  1A09               	xorwf	i2___ftadd@f1,f,c
 13631  002516  0EFF               	movlw	255
 13632  002518  1A0A               	xorwf	i2___ftadd@f1+1,f,c
 13633  00251A  0EFF               	movlw	255
 13634  00251C  1A0B               	xorwf	i2___ftadd@f1+2,f,c
 13635  00251E  0E01               	movlw	1
 13636  002520  2609               	addwf	i2___ftadd@f1,f,c
 13637  002522  0E00               	movlw	0
 13638  002524  220A               	addwfc	i2___ftadd@f1+1,f,c
 13639  002526  0E00               	movlw	0
 13640  002528  220B               	addwfc	i2___ftadd@f1+2,f,c
 13641  00252A                     i2l1136:
 13642  00252A  AC12               	btfss	i2___ftadd@sign,6,c
 13643  00252C  D00C               	goto	i2l1137
 13644  00252E  0EFF               	movlw	255
 13645  002530  1A0C               	xorwf	i2___ftadd@f2,f,c
 13646  002532  0EFF               	movlw	255
 13647  002534  1A0D               	xorwf	i2___ftadd@f2+1,f,c
 13648  002536  0EFF               	movlw	255
 13649  002538  1A0E               	xorwf	i2___ftadd@f2+2,f,c
 13650  00253A  0E01               	movlw	1
 13651  00253C  260C               	addwf	i2___ftadd@f2,f,c
 13652  00253E  0E00               	movlw	0
 13653  002540  220D               	addwfc	i2___ftadd@f2+1,f,c
 13654  002542  0E00               	movlw	0
 13655  002544  220E               	addwfc	i2___ftadd@f2+2,f,c
 13656  002546                     i2l1137:
 13657  002546  0E00               	movlw	0
 13658  002548  6E12               	movwf	i2___ftadd@sign,c
 13659  00254A  5009               	movf	i2___ftadd@f1,w,c
 13660  00254C  260C               	addwf	i2___ftadd@f2,f,c
 13661  00254E  500A               	movf	i2___ftadd@f1+1,w,c
 13662  002550  220D               	addwfc	i2___ftadd@f2+1,f,c
 13663  002552  500B               	movf	i2___ftadd@f1+2,w,c
 13664  002554  220E               	addwfc	i2___ftadd@f2+2,f,c
 13665  002556  AE0E               	btfss	i2___ftadd@f2+2,7,c
 13666  002558  D00E               	goto	i2l1138
 13667  00255A  0EFF               	movlw	255
 13668  00255C  1A0C               	xorwf	i2___ftadd@f2,f,c
 13669  00255E  0EFF               	movlw	255
 13670  002560  1A0D               	xorwf	i2___ftadd@f2+1,f,c
 13671  002562  0EFF               	movlw	255
 13672  002564  1A0E               	xorwf	i2___ftadd@f2+2,f,c
 13673  002566  0E01               	movlw	1
 13674  002568  260C               	addwf	i2___ftadd@f2,f,c
 13675  00256A  0E00               	movlw	0
 13676  00256C  220D               	addwfc	i2___ftadd@f2+1,f,c
 13677  00256E  0E00               	movlw	0
 13678  002570  220E               	addwfc	i2___ftadd@f2+2,f,c
 13679  002572  0E01               	movlw	1
 13680  002574  6E12               	movwf	i2___ftadd@sign,c
 13681  002576                     i2l1138:
 13682  002576  C00C  F001         	movff	i2___ftadd@f2,i2___ftpack@arg
 13683  00257A  C00D  F002         	movff	i2___ftadd@f2+1,i2___ftpack@arg+1
 13684  00257E  C00E  F003         	movff	i2___ftadd@f2+2,i2___ftpack@arg+2
 13685  002582  C014  F004         	movff	i2___ftadd@exp1,i2___ftpack@exp
 13686  002586  C012  F005         	movff	i2___ftadd@sign,i2___ftpack@sign
 13687  00258A  ECDB  F014         	call	i2___ftpack	;wreg free
 13688  00258E  C001  F009         	movff	?i2___ftpack,?i2___ftadd
 13689  002592  C002  F00A         	movff	?i2___ftpack+1,?i2___ftadd+1
 13690  002596  C003  F00B         	movff	?i2___ftpack+2,?i2___ftadd+2
 13691  00259A  0012               	return	
 13692  00259C                     __end_ofi2___ftadd:
 13693                           	opt stack 0
 13694                           tosu	equ	0xFFF
 13695                           tosh	equ	0xFFE
 13696                           tosl	equ	0xFFD
 13697                           pclatu	equ	0xFFB
 13698                           pclath	equ	0xFFA
 13699                           tblptru	equ	0xFF8
 13700                           tblptrh	equ	0xFF7
 13701                           tblptrl	equ	0xFF6
 13702                           tablat	equ	0xFF5
 13703                           prodh	equ	0xFF4
 13704                           prodl	equ	0xFF3
 13705                           intcon	equ	0xFF2
 13706                           indf0	equ	0xFEF
 13707                           postinc0	equ	0xFEE
 13708                           fsr0h	equ	0xFEA
 13709                           fsr0l	equ	0xFE9
 13710                           wreg	equ	0xFE8
 13711                           postdec1	equ	0xFE5
 13712                           plusw1	equ	0xFE3
 13713                           fsr1h	equ	0xFE2
 13714                           fsr1l	equ	0xFE1
 13715                           indf2	equ	0xFDF
 13716                           postinc2	equ	0xFDE
 13717                           postdec2	equ	0xFDD
 13718                           plusw2	equ	0xFDB
 13719                           fsr2h	equ	0xFDA
 13720                           fsr2l	equ	0xFD9
 13721                           status	equ	0xFD8
 13722                           
 13723 ;; *************** function i2___ftpack *****************
 13724 ;; Defined at:
 13725 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 13726 ;; Parameters:    Size  Location     Type
 13727 ;;  arg             3    0[COMRAM] unsigned um
 13728 ;;  exp             1    3[COMRAM] unsigned char 
 13729 ;;  sign            1    4[COMRAM] unsigned char 
 13730 ;; Auto vars:     Size  Location     Type
 13731 ;;		None
 13732 ;; Return value:  Size  Location     Type
 13733 ;;                  3    0[COMRAM] float 
 13734 ;; Registers used:
 13735 ;;		wreg, status,2, status,0
 13736 ;; Tracked objects:
 13737 ;;		On entry : 0/0
 13738 ;;		On exit  : 0/0
 13739 ;;		Unchanged: 0/0
 13740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13741 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13743 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13744 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13745 ;;Total ram usage:        8 bytes
 13746 ;; Hardware stack levels used:    1
 13747 ;; This function calls:
 13748 ;;		Nothing
 13749 ;; This function is called by:
 13750 ;;		i2___ftadd
 13751 ;; This function uses a non-reentrant model
 13752 ;;
 13753                           
 13754                           	psect	text45
 13755  0029B6                     __ptext45:
 13756                           	opt stack 0
 13757  0029B6                     i2___ftpack:
 13758                           	opt stack 21
 13759                           
 13760                           ;incstack = 0
 13761  0029B6  5004               	movf	i2___ftpack@exp,w,c
 13762  0029B8  B4D8               	btfsc	status,2,c
 13763  0029BA  D005               	goto	i2u419_40
 13764  0029BC  5001               	movf	i2___ftpack@arg,w,c
 13765  0029BE  1002               	iorwf	i2___ftpack@arg+1,w,c
 13766  0029C0  1003               	iorwf	i2___ftpack@arg+2,w,c
 13767  0029C2  A4D8               	btfss	status,2,c
 13768  0029C4  D00C               	goto	i2l1079
 13769  0029C6                     i2u419_40:
 13770  0029C6  0E00               	movlw	0
 13771  0029C8  6E01               	movwf	?i2___ftpack,c
 13772  0029CA  0E00               	movlw	0
 13773  0029CC  6E02               	movwf	?i2___ftpack+1,c
 13774  0029CE  0E00               	movlw	0
 13775  0029D0  6E03               	movwf	?i2___ftpack+2,c
 13776  0029D2  0012               	return	
 13777  0029D4  2A04               	incf	i2___ftpack@exp,f,c
 13778  0029D6  90D8               	bcf	status,0,c
 13779  0029D8  3203               	rrcf	i2___ftpack@arg+2,f,c
 13780  0029DA  3202               	rrcf	i2___ftpack@arg+1,f,c
 13781  0029DC  3201               	rrcf	i2___ftpack@arg,f,c
 13782  0029DE                     i2l1079:
 13783  0029DE  0E00               	movlw	0
 13784  0029E0  1401               	andwf	i2___ftpack@arg,w,c
 13785  0029E2  6E06               	movwf	??i2___ftpack& (0+255),c
 13786  0029E4  0E00               	movlw	0
 13787  0029E6  1402               	andwf	i2___ftpack@arg+1,w,c
 13788  0029E8  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 13789  0029EA  0EFE               	movlw	254
 13790  0029EC  1403               	andwf	i2___ftpack@arg+2,w,c
 13791  0029EE  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 13792  0029F0  5006               	movf	??i2___ftpack,w,c
 13793  0029F2  1007               	iorwf	??i2___ftpack+1,w,c
 13794  0029F4  1008               	iorwf	??i2___ftpack+2,w,c
 13795  0029F6  B4D8               	btfsc	status,2,c
 13796  0029F8  D00C               	goto	i2l1082
 13797  0029FA  D7EC               	goto	i2l1080
 13798  0029FC  2A04               	incf	i2___ftpack@exp,f,c
 13799  0029FE  0E01               	movlw	1
 13800  002A00  2601               	addwf	i2___ftpack@arg,f,c
 13801  002A02  0E00               	movlw	0
 13802  002A04  2202               	addwfc	i2___ftpack@arg+1,f,c
 13803  002A06  0E00               	movlw	0
 13804  002A08  2203               	addwfc	i2___ftpack@arg+2,f,c
 13805  002A0A  90D8               	bcf	status,0,c
 13806  002A0C  3203               	rrcf	i2___ftpack@arg+2,f,c
 13807  002A0E  3202               	rrcf	i2___ftpack@arg+1,f,c
 13808  002A10  3201               	rrcf	i2___ftpack@arg,f,c
 13809  002A12                     i2l1082:
 13810  002A12  0E00               	movlw	0
 13811  002A14  1401               	andwf	i2___ftpack@arg,w,c
 13812  002A16  6E06               	movwf	??i2___ftpack& (0+255),c
 13813  002A18  0E00               	movlw	0
 13814  002A1A  1402               	andwf	i2___ftpack@arg+1,w,c
 13815  002A1C  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 13816  002A1E  0EFF               	movlw	255
 13817  002A20  1403               	andwf	i2___ftpack@arg+2,w,c
 13818  002A22  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 13819  002A24  5006               	movf	??i2___ftpack,w,c
 13820  002A26  1007               	iorwf	??i2___ftpack+1,w,c
 13821  002A28  1008               	iorwf	??i2___ftpack+2,w,c
 13822  002A2A  B4D8               	btfsc	status,2,c
 13823  002A2C  D006               	goto	i2l1085
 13824  002A2E  D7E6               	goto	i2l1083
 13825  002A30  0604               	decf	i2___ftpack@exp,f,c
 13826  002A32  90D8               	bcf	status,0,c
 13827  002A34  3601               	rlcf	i2___ftpack@arg,f,c
 13828  002A36  3602               	rlcf	i2___ftpack@arg+1,f,c
 13829  002A38  3603               	rlcf	i2___ftpack@arg+2,f,c
 13830  002A3A                     i2l1085:
 13831  002A3A  BE02               	btfsc	i2___ftpack@arg+1,7,c
 13832  002A3C  D003               	goto	i2u423_40
 13833  002A3E  0E02               	movlw	2
 13834  002A40  6004               	cpfslt	i2___ftpack@exp,c
 13835  002A42  D7F6               	goto	i2l1086
 13836  002A44                     i2u423_40:
 13837  002A44  A004               	btfss	i2___ftpack@exp,0,c
 13838  002A46  9E02               	bcf	i2___ftpack@arg+1,7,c
 13839  002A48  90D8               	bcf	status,0,c
 13840  002A4A  3204               	rrcf	i2___ftpack@exp,f,c
 13841  002A4C  5004               	movf	i2___ftpack@exp,w,c
 13842  002A4E  1203               	iorwf	i2___ftpack@arg+2,f,c
 13843  002A50  5005               	movf	i2___ftpack@sign,w,c
 13844  002A52  A4D8               	btfss	status,2,c
 13845  002A54  8E03               	bsf	i2___ftpack@arg+2,7,c
 13846  002A56  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 13847  002A5A  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 13848  002A5E  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 13849  002A62  0012               	return	
 13850  002A64                     __end_ofi2___ftpack:
 13851                           	opt stack 0
 13852                           tosu	equ	0xFFF
 13853                           tosh	equ	0xFFE
 13854                           tosl	equ	0xFFD
 13855                           pclatu	equ	0xFFB
 13856                           pclath	equ	0xFFA
 13857                           tblptru	equ	0xFF8
 13858                           tblptrh	equ	0xFF7
 13859                           tblptrl	equ	0xFF6
 13860                           tablat	equ	0xFF5
 13861                           prodh	equ	0xFF4
 13862                           prodl	equ	0xFF3
 13863                           intcon	equ	0xFF2
 13864                           indf0	equ	0xFEF
 13865                           postinc0	equ	0xFEE
 13866                           fsr0h	equ	0xFEA
 13867                           fsr0l	equ	0xFE9
 13868                           wreg	equ	0xFE8
 13869                           postdec1	equ	0xFE5
 13870                           plusw1	equ	0xFE3
 13871                           fsr1h	equ	0xFE2
 13872                           fsr1l	equ	0xFE1
 13873                           indf2	equ	0xFDF
 13874                           postinc2	equ	0xFDE
 13875                           postdec2	equ	0xFDD
 13876                           plusw2	equ	0xFDB
 13877                           fsr2h	equ	0xFDA
 13878                           fsr2l	equ	0xFD9
 13879                           status	equ	0xFD8
 13880                           
 13881 ;; *************** function _resetMotorTimer *****************
 13882 ;; Defined at:
 13883 ;;		line 99 in file "timer.c"
 13884 ;; Parameters:    Size  Location     Type
 13885 ;;		None
 13886 ;; Auto vars:     Size  Location     Type
 13887 ;;		None
 13888 ;; Return value:  Size  Location     Type
 13889 ;;                  1    wreg      void 
 13890 ;; Registers used:
 13891 ;;		wreg, status,2
 13892 ;; Tracked objects:
 13893 ;;		On entry : 0/0
 13894 ;;		On exit  : 0/0
 13895 ;;		Unchanged: 0/0
 13896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13900 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13901 ;;Total ram usage:        0 bytes
 13902 ;; Hardware stack levels used:    1
 13903 ;; This function calls:
 13904 ;;		Nothing
 13905 ;; This function is called by:
 13906 ;;		_tmr0_ISR
 13907 ;; This function uses a non-reentrant model
 13908 ;;
 13909                           
 13910                           	psect	text46
 13911  003332                     __ptext46:
 13912                           	opt stack 0
 13913  003332                     _resetMotorTimer:
 13914                           	opt stack 22
 13915                           
 13916                           ;timer.c: 100: motorControlTimer = 0;
 13917                           
 13918                           ;incstack = 0
 13919  003332  0E00               	movlw	0
 13920  003334  0101               	movlb	1	; () banked
 13921  003336  6FD6               	movwf	_motorControlTimer& (0+255),b	;volatile
 13922  003338  0E00               	movlw	0
 13923  00333A  6FD7               	movwf	(_motorControlTimer+1)& (0+255),b	;volatile
 13924  00333C  0E00               	movlw	0
 13925  00333E  6FD8               	movwf	(_motorControlTimer+2)& (0+255),b	;volatile
 13926  003340  0E00               	movlw	0
 13927  003342  6FD9               	movwf	(_motorControlTimer+3)& (0+255),b	;volatile
 13928                           
 13929                           ; BSR set to: 1
 13930  003344  0012               	return		;funcret
 13931  003346                     __end_of_resetMotorTimer:
 13932                           	opt stack 0
 13933                           tosu	equ	0xFFF
 13934                           tosh	equ	0xFFE
 13935                           tosl	equ	0xFFD
 13936                           pclatu	equ	0xFFB
 13937                           pclath	equ	0xFFA
 13938                           tblptru	equ	0xFF8
 13939                           tblptrh	equ	0xFF7
 13940                           tblptrl	equ	0xFF6
 13941                           tablat	equ	0xFF5
 13942                           prodh	equ	0xFF4
 13943                           prodl	equ	0xFF3
 13944                           intcon	equ	0xFF2
 13945                           indf0	equ	0xFEF
 13946                           postinc0	equ	0xFEE
 13947                           fsr0h	equ	0xFEA
 13948                           fsr0l	equ	0xFE9
 13949                           wreg	equ	0xFE8
 13950                           postdec1	equ	0xFE5
 13951                           plusw1	equ	0xFE3
 13952                           fsr1h	equ	0xFE2
 13953                           fsr1l	equ	0xFE1
 13954                           indf2	equ	0xFDF
 13955                           postinc2	equ	0xFDE
 13956                           postdec2	equ	0xFDD
 13957                           plusw2	equ	0xFDB
 13958                           fsr2h	equ	0xFDA
 13959                           fsr2l	equ	0xFD9
 13960                           status	equ	0xFD8
 13961                           
 13962 ;; *************** function _inverseDir *****************
 13963 ;; Defined at:
 13964 ;;		line 66 in file "motors.c"
 13965 ;; Parameters:    Size  Location     Type
 13966 ;;  dir             1    wreg     enum E2974
 13967 ;; Auto vars:     Size  Location     Type
 13968 ;;  dir             1    0[COMRAM] enum E2974
 13969 ;; Return value:  Size  Location     Type
 13970 ;;                  1    wreg      enum E2980
 13971 ;; Registers used:
 13972 ;;		wreg, status,2
 13973 ;; Tracked objects:
 13974 ;;		On entry : 0/0
 13975 ;;		On exit  : 0/0
 13976 ;;		Unchanged: 0/0
 13977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13979 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13981 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13982 ;;Total ram usage:        1 bytes
 13983 ;; Hardware stack levels used:    1
 13984 ;; This function calls:
 13985 ;;		Nothing
 13986 ;; This function is called by:
 13987 ;;		_tmr0_ISR
 13988 ;; This function uses a non-reentrant model
 13989 ;;
 13990                           
 13991                           	psect	text47
 13992  003346                     __ptext47:
 13993                           	opt stack 0
 13994  003346                     _inverseDir:
 13995                           	opt stack 22
 13996                           
 13997                           ; BSR set to: 1
 13998                           ;incstack = 0
 13999                           ;inverseDir@dir stored from wreg
 14000  003346  6E01               	movwf	inverseDir@dir,c
 14001                           
 14002                           ;motors.c: 67: return (dir == FORWARD) ? REVERSE : FORWARD;
 14003  003348  5001               	movf	inverseDir@dir,w,c
 14004  00334A  A4D8               	btfss	status,2,c
 14005  00334C  D002               	goto	i2u498_40
 14006  00334E  0E01               	movlw	1
 14007  003350  0012               	return	
 14008  003352                     i2u498_40:
 14009  003352  0E00               	movlw	0
 14010  003354  0012               	return	
 14011  003356                     __end_of_inverseDir:
 14012                           	opt stack 0
 14013                           tosu	equ	0xFFF
 14014                           tosh	equ	0xFFE
 14015                           tosl	equ	0xFFD
 14016                           pclatu	equ	0xFFB
 14017                           pclath	equ	0xFFA
 14018                           tblptru	equ	0xFF8
 14019                           tblptrh	equ	0xFF7
 14020                           tblptrl	equ	0xFF6
 14021                           tablat	equ	0xFF5
 14022                           prodh	equ	0xFF4
 14023                           prodl	equ	0xFF3
 14024                           intcon	equ	0xFF2
 14025                           indf0	equ	0xFEF
 14026                           postinc0	equ	0xFEE
 14027                           fsr0h	equ	0xFEA
 14028                           fsr0l	equ	0xFE9
 14029                           wreg	equ	0xFE8
 14030                           postdec1	equ	0xFE5
 14031                           plusw1	equ	0xFE3
 14032                           fsr1h	equ	0xFE2
 14033                           fsr1l	equ	0xFE1
 14034                           indf2	equ	0xFDF
 14035                           postinc2	equ	0xFDE
 14036                           postdec2	equ	0xFDD
 14037                           plusw2	equ	0xFDB
 14038                           fsr2h	equ	0xFDA
 14039                           fsr2l	equ	0xFD9
 14040                           status	equ	0xFD8
 14041                           tosu	equ	0xFFF
 14042                           tosh	equ	0xFFE
 14043                           tosl	equ	0xFFD
 14044                           pclatu	equ	0xFFB
 14045                           pclath	equ	0xFFA
 14046                           tblptru	equ	0xFF8
 14047                           tblptrh	equ	0xFF7
 14048                           tblptrl	equ	0xFF6
 14049                           tablat	equ	0xFF5
 14050                           prodh	equ	0xFF4
 14051                           prodl	equ	0xFF3
 14052                           intcon	equ	0xFF2
 14053                           indf0	equ	0xFEF
 14054                           postinc0	equ	0xFEE
 14055                           fsr0h	equ	0xFEA
 14056                           fsr0l	equ	0xFE9
 14057                           wreg	equ	0xFE8
 14058                           postdec1	equ	0xFE5
 14059                           plusw1	equ	0xFE3
 14060                           fsr1h	equ	0xFE2
 14061                           fsr1l	equ	0xFE1
 14062                           indf2	equ	0xFDF
 14063                           postinc2	equ	0xFDE
 14064                           postdec2	equ	0xFDD
 14065                           plusw2	equ	0xFDB
 14066                           fsr2h	equ	0xFDA
 14067                           fsr2l	equ	0xFD9
 14068                           status	equ	0xFD8
 14069                           
 14070                           	psect	text48
 14071  000000                     __ptext48:
 14072                           	opt stack 0
 14073                           tosu	equ	0xFFF
 14074                           tosh	equ	0xFFE
 14075                           tosl	equ	0xFFD
 14076                           pclatu	equ	0xFFB
 14077                           pclath	equ	0xFFA
 14078                           tblptru	equ	0xFF8
 14079                           tblptrh	equ	0xFF7
 14080                           tblptrl	equ	0xFF6
 14081                           tablat	equ	0xFF5
 14082                           prodh	equ	0xFF4
 14083                           prodl	equ	0xFF3
 14084                           intcon	equ	0xFF2
 14085                           indf0	equ	0xFEF
 14086                           postinc0	equ	0xFEE
 14087                           fsr0h	equ	0xFEA
 14088                           fsr0l	equ	0xFE9
 14089                           wreg	equ	0xFE8
 14090                           postdec1	equ	0xFE5
 14091                           plusw1	equ	0xFE3
 14092                           fsr1h	equ	0xFE2
 14093                           fsr1l	equ	0xFE1
 14094                           indf2	equ	0xFDF
 14095                           postinc2	equ	0xFDE
 14096                           postdec2	equ	0xFDD
 14097                           plusw2	equ	0xFDB
 14098                           fsr2h	equ	0xFDA
 14099                           fsr2l	equ	0xFD9
 14100                           status	equ	0xFD8
 14101                           
 14102                           	psect	rparam
 14103  0000                     tosu	equ	0xFFF
 14104                           tosh	equ	0xFFE
 14105                           tosl	equ	0xFFD
 14106                           pclatu	equ	0xFFB
 14107                           pclath	equ	0xFFA
 14108                           tblptru	equ	0xFF8
 14109                           tblptrh	equ	0xFF7
 14110                           tblptrl	equ	0xFF6
 14111                           tablat	equ	0xFF5
 14112                           prodh	equ	0xFF4
 14113                           prodl	equ	0xFF3
 14114                           intcon	equ	0xFF2
 14115                           indf0	equ	0xFEF
 14116                           postinc0	equ	0xFEE
 14117                           fsr0h	equ	0xFEA
 14118                           fsr0l	equ	0xFE9
 14119                           wreg	equ	0xFE8
 14120                           postdec1	equ	0xFE5
 14121                           plusw1	equ	0xFE3
 14122                           fsr1h	equ	0xFE2
 14123                           fsr1l	equ	0xFE1
 14124                           indf2	equ	0xFDF
 14125                           postinc2	equ	0xFDE
 14126                           postdec2	equ	0xFDD
 14127                           plusw2	equ	0xFDB
 14128                           fsr2h	equ	0xFDA
 14129                           fsr2l	equ	0xFD9
 14130                           status	equ	0xFD8
 14131                           
 14132                           	psect	temp
 14133  000065                     btemp:
 14134                           	opt stack 0
 14135  000065                     	ds	1
 14136  0000                     int$flags	set	btemp
 14137  0000                     wtemp6	set	btemp+1
 14138                           tosu	equ	0xFFF
 14139                           tosh	equ	0xFFE
 14140                           tosl	equ	0xFFD
 14141                           pclatu	equ	0xFFB
 14142                           pclath	equ	0xFFA
 14143                           tblptru	equ	0xFF8
 14144                           tblptrh	equ	0xFF7
 14145                           tblptrl	equ	0xFF6
 14146                           tablat	equ	0xFF5
 14147                           prodh	equ	0xFF4
 14148                           prodl	equ	0xFF3
 14149                           intcon	equ	0xFF2
 14150                           indf0	equ	0xFEF
 14151                           postinc0	equ	0xFEE
 14152                           fsr0h	equ	0xFEA
 14153                           fsr0l	equ	0xFE9
 14154                           wreg	equ	0xFE8
 14155                           postdec1	equ	0xFE5
 14156                           plusw1	equ	0xFE3
 14157                           fsr1h	equ	0xFE2
 14158                           fsr1l	equ	0xFE1
 14159                           indf2	equ	0xFDF
 14160                           postinc2	equ	0xFDE
 14161                           postdec2	equ	0xFDD
 14162                           plusw2	equ	0xFDB
 14163                           fsr2h	equ	0xFDA
 14164                           fsr2l	equ	0xFD9
 14165                           status	equ	0xFD8


Data Sizes:
    Strings     513
    Constant    525
    Data        191
    BSS         75
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     51     100
    BANK0           128     92     108
    BANK1           256    126     222
    BANK2           256      0     105
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 132
		 -> inputEntryQuestions(CODE[132]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 32
		 -> inputEntry@fastenerString(BANK1[32]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 32
		 -> inputEntry@fastenerString(BANK1[32]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 36
		 -> STR_10(CODE[36]), STR_8(CODE[22]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 50
		 -> packaging@msg3(BANK1[50]), packaging@msg2(BANK1[32]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 50
		 -> NULL(NULL[0]), packaging@msg3(BANK1[50]), packaging@msg2(BANK1[32]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_29(CODE[4]), STR_28(CODE[6]), STR_27(CODE[16]), STR_26(CODE[11]), 
		 -> STR_25(CODE[12]), STR_24(CODE[9]), STR_22(CODE[19]), STR_21(CODE[10]), 
		 -> STR_20(CODE[17]), STR_9(CODE[15]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 50
		 -> NULL(NULL[0]), packaging@msg3(BANK1[50]), packaging@msg2(BANK1[32]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 36
		 -> STR_29(CODE[4]), STR_28(CODE[6]), STR_27(CODE[16]), STR_26(CODE[11]), 
		 -> STR_25(CODE[12]), STR_24(CODE[9]), STR_22(CODE[19]), STR_21(CODE[10]), 
		 -> STR_20(CODE[17]), STR_10(CODE[36]), STR_9(CODE[15]), STR_8(CODE[22]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), printf@ap(BANK0[2]), 

    _doprnt@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), NULL(NULL[0]), STR_30(CODE[7]), 
		 -> fSLookup(BANK2[105]), packaging@msg3(BANK1[50]), packaging@msg2(BANK1[32]), 

    S1603__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S1603__prbuf$ptr	PTR unsigned char  size(2) Largest target is 50
		 -> NULL(NULL[0]), packaging@msg3(BANK1[50]), packaging@msg2(BANK1[32]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 50
		 -> NULL(NULL[0]), packaging@msg3(BANK1[50]), packaging@msg2(BANK1[32]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(BANK0[4]), printf@pb(BANK0[4]), 

    RTC_getTime@time	PTR unsigned char  size(2) Largest target is 7
		 -> RTC_getOperatingTime@time(BANK0[7]), RTC_startOperation@time(BANK0[7]), RTC_getSeconds@time(COMRAM[7]), 

    I2C_Send@data	PTR unsigned char  size(2) Largest target is 50
		 -> STR_23(CODE[21]), STR_18(CODE[14]), inputEntry@msg(BANK1[24]), STR_17(CODE[25]), 
		 -> STR_14(CODE[17]), STR_13(CODE[17]), STR_12(CODE[14]), STR_11(CODE[15]), 
		 -> clearing@instr(BANK0[2]), packaging@msg3(BANK1[50]), packaging@msg2(BANK1[32]), packaging@instr_321(BANK1[2]), 
		 -> packaging@msg(BANK1[34]), packaging@instr(BANK1[2]), STR_7(CODE[33]), packageCompartment@instr(BANK0[2]), 
		 -> STR_6(CODE[28]), STR_5(CODE[19]), STR_4(CODE[17]), STR_3(CODE[17]), 
		 -> STR_2(CODE[14]), STR_1(CODE[15]), 

    printErrorLCD@string	PTR unsigned char  size(2) Largest target is 224
		 -> errMsgs.noFasteners(CODE[32]), errMsgs.tooManySpacers(CODE[32]), errMsgs.tooManyWashers(CODE[32]), errMsgs.tooManyNuts(CODE[32]), 
		 -> errMsgs.tooManyBolts(CODE[32]), errMsgs.tooManyFasteners(CODE[32]), errMsgs.badEntry(CODE[32]), errMsgs(CODE[224]), 

    printStringLCD@string	PTR unsigned char  size(2) Largest target is 224
		 -> STR_19(CODE[30]), inputEntry@fastenerString(BANK1[32]), inputEntryQuestions(CODE[132]), STR_16(CODE[26]), 
		 -> STR_15(CODE[17]), errMsgs.noFasteners(CODE[32]), errMsgs.tooManySpacers(CODE[32]), errMsgs.tooManyWashers(CODE[32]), 
		 -> errMsgs.tooManyNuts(CODE[32]), errMsgs.tooManyBolts(CODE[32]), errMsgs.tooManyFasteners(CODE[32]), errMsgs.badEntry(CODE[32]), 
		 -> errMsgs(CODE[224]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 32
		 -> inputEntry@fastenerString(BANK1[32]), 

    packaging@set	PTR unsigned char  size(2) Largest target is 84
		 -> fastenerMatrix(CODE[84]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _interruptHandler in COMRAM

    _interruptHandler->_tmr0_ISR
    _tmr0_ISR->i2___ftadd
    i2_motorControl->_inverseDir
    i2___ftadd->i2___ftpack

Critical Paths under _main in BANK0

    _main->_mainMenu
    _mainMenu->_packaging
    _viewLogs->_printStringLCD
    _packaging->_packageCompartment
    _sprintf->__doprnt
    _printf->__doprnt
    __doprnt->___llmod
    ___llmod->___lldiv
    _packageCompartment->___ftge
    _inputEntry->_printErrorLCD
    _strcpy->___wmul
    _printErrorLCD->_printStringLCD
    _lcd_set_cursor->_lcd_shift_cursor
    _lcd_shift_cursor->_lcdInst
    _hibernate->_printStringLCD
    _printStringLCD->___wmul
    _putch->_lcdNibble
    _clearing->___ftge
    ___ftge->___ftadd
    ___ftadd->___ftpack
    _I2C_Send->_I2C_Master_Write
    _RTC_startOperation->_RTC_getTime
    _RTC_getOperatingTime->_RTC_getTime
    _RTC_getOperatingTime->___wmul
    _RTC_getTime->_I2C_Master_Read
    _RTC_getTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    _mainMenu->_packaging

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   85347
                                             91 BANK0      1     1      0
                    _I2C_Master_Init
                          _hibernate
                            _initLCD
                            _lcdInst
                           _mainMenu
                       _motorControl
                           _tmr0Init
 ---------------------------------------------------------------------------------
 (1) _tmr0Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _mainMenu                                            16    16      0   79442
                                             75 BANK0     16    16      0
                           _I2C_Send
               _RTC_getOperatingTime
                 _RTC_startOperation
                           _clearing
                          _hibernate
                         _inputEntry
                            _lcdInst
                          _packaging
                         _pollKeypad
                     _printStringLCD
                             _printf
                              _putch
                           _viewLogs
 ---------------------------------------------------------------------------------
 (2) _viewLogs                                             3     3      0    2026
                                             21 BANK0      3     3      0
                         _pollKeypad
                     _printStringLCD
 ---------------------------------------------------------------------------------
 (2) _packaging                                          132   132      0   30310
                                             69 BANK0      6     6      0
                                              0 BANK1    126   126      0
                           _I2C_Send
                             ___wmul
                            _lcdInst
                 _packageCompartment
                             _printf
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             18     6     12    3748
                                             40 BANK0     18     6     12
                             ___wmul (ARG)
                            __doprnt
 ---------------------------------------------------------------------------------
 (2) _printf                                              16     6     10    4212
                                             40 BANK0     16     6     10
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) __doprnt                                             24    18      6    3098
                                             22 BANK0     18    12      6
                   Absolute function *
                            ___lldiv
                            ___llmod
                              _putch *
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     412
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _packageCompartment                                  40    37      3   15114
                                             29 BANK0     40    37      3
                           _I2C_Send
                            ___ftadd
                             ___ftge
                       _motorControl
                                _tic
                               _tock
 ---------------------------------------------------------------------------------
 (2) _inputEntry                                          94    94      0   14704
                                             25 BANK0      4     4      0
                                              0 BANK1     88    88      0
                           _I2C_Send
                             ___wmul
                            _lcdInst
                     _lcd_set_cursor
                         _pollKeypad
                      _printErrorLCD
                     _printStringLCD
                              _putch
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _strcpy                                               6     2      4     289
                                              6 BANK0      6     2      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _printErrorLCD                                        4     2      2    2709
                                             21 BANK0      4     2      2
                     _printStringLCD
 ---------------------------------------------------------------------------------
 (3) _lcd_set_cursor                                       4     3      1     920
                                              6 BANK0      4     3      1
                            _lcdInst
                   _lcd_shift_cursor
 ---------------------------------------------------------------------------------
 (4) _lcd_shift_cursor                                     3     2      1     415
                                              3 BANK0      3     2      1
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _hibernate                                            6     6      0    2026
                                             21 BANK0      6     6      0
                         _pollKeypad
                     _printStringLCD
 ---------------------------------------------------------------------------------
 (3) _printStringLCD                                      15    13      2    1958
                                              6 BANK0     15    13      2
                             ___wmul (ARG)
                            _lcdInst
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _pollKeypad                                           1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _clearing                                            19    19      0   14820
                                             29 BANK0     13    13      0
                           _I2C_Send
                            ___ftadd
                             ___ftge
                       _motorControl
                                _tic
                               _tock
 ---------------------------------------------------------------------------------
 (4) _tock                                                 3     0      3       0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _tic                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _motorControl                                         2     1      1    2767
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6    2358
                                             20 BANK0      9     3      6
                            ___ftadd (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    5878
                                              8 BANK0     12     6      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2713
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _I2C_Send                                             8     6      2    2982
                                              3 BANK0      8     6      2
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _RTC_startOperation                                   9     9      0    1218
                                              6 BANK0      9     9      0
                        _RTC_getTime
 ---------------------------------------------------------------------------------
 (2) _RTC_getOperatingTime                                19    17      2    4360
                                              6 BANK0     19    17      2
                        _RTC_getTime
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2932
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _RTC_getTime                                          3     1      2     977
                                              3 BANK0      3     1      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     481
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Read                                      2     2      0      65
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (4) _lcdInst                                              1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNibble                                            2     2      0     164
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     722
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     601
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _interruptHandler                                    18    18      0    2225
                                             33 COMRAM    18    18      0
                           _tmr0_ISR
 ---------------------------------------------------------------------------------
 (8) _tmr0_ISR                                            13    13      0    2225
                                             20 COMRAM    13    13      0
                         _inverseDir
                    _resetMotorTimer
                          i2___ftadd
                     i2_motorControl
 ---------------------------------------------------------------------------------
 (9) i2_motorControl                                       2     1      1     582
                                              1 COMRAM     2     1      1
                         _inverseDir (ARG)
 ---------------------------------------------------------------------------------
 (9) i2___ftadd                                           12     6      6    1253
                                              8 COMRAM    12     6      6
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (10) i2___ftpack                                          8     3      5     309
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) _resetMotorTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _inverseDir                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _hibernate
     _pollKeypad
     _printStringLCD
       ___wmul (ARG)
       _lcdInst (ARG)
         _lcdNibble
       _putch (ARG)
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _mainMenu
     _I2C_Send
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _RTC_getOperatingTime
       _RTC_getTime
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       ___wmul
     _RTC_startOperation
       _RTC_getTime
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
     _clearing
       _I2C_Send
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       ___ftadd
         ___ftpack
       ___ftge
         ___ftadd (ARG)
           ___ftpack
       _motorControl
       _tic
       _tock
     _hibernate
       _pollKeypad
       _printStringLCD
         ___wmul (ARG)
         _lcdInst (ARG)
           _lcdNibble
         _putch (ARG)
           _lcdNibble
     _inputEntry
       _I2C_Send
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       ___wmul
       _lcdInst
         _lcdNibble
       _lcd_set_cursor
         _lcdInst
           _lcdNibble
         _lcd_shift_cursor
           _lcdInst
             _lcdNibble
       _pollKeypad
       _printErrorLCD
         _printStringLCD
           ___wmul (ARG)
           _lcdInst (ARG)
             _lcdNibble
           _putch (ARG)
             _lcdNibble
       _printStringLCD
         ___wmul (ARG)
         _lcdInst (ARG)
           _lcdNibble
         _putch (ARG)
           _lcdNibble
       _putch
         _lcdNibble
       _strcpy
         ___wmul (ARG)
     _lcdInst
       _lcdNibble
     _packaging
       _I2C_Send
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       ___wmul
       _lcdInst
         _lcdNibble
       _packageCompartment
         _I2C_Send
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         ___ftadd
           ___ftpack
         ___ftge
           ___ftadd (ARG)
             ___ftpack
         _motorControl
         _tic
         _tock
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lldiv *
           ___llmod *
             ___lldiv (ARG)
           _putch *
             _lcdNibble
       _sprintf
         ___wmul (ARG)
         __doprnt (ARG)
           Absolute function(Fake) *
           ___lldiv *
           ___llmod *
             ___lldiv (ARG)
           _putch *
             _lcdNibble
     _pollKeypad
     _printStringLCD
       ___wmul (ARG)
       _lcdInst (ARG)
         _lcdNibble
       _putch (ARG)
         _lcdNibble
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lldiv *
         ___llmod *
           ___lldiv (ARG)
         _putch *
           _lcdNibble
     _putch
       _lcdNibble
     _viewLogs
       _pollKeypad
       _printStringLCD
         ___wmul (ARG)
         _lcdInst (ARG)
           _lcdNibble
         _putch (ARG)
           _lcdNibble
   _motorControl
   _tmr0Init

 _interruptHandler (ROOT)
   _tmr0_ISR
     _inverseDir
     _resetMotorTimer
     i2___ftadd
       i2___ftpack
     i2_motorControl
       _inverseDir (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      69       9       41.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     7E      DE       7       86.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5C      6C       5       84.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     33      64       1       79.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     217      34        0.0%
DATA                 0      0     217       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Mar 31 15:56:17 2018

              _motorGoingBackwards 0040                                 l99 1138  
              printErrorLCD@string 0095                ___wmul@multiplicand 0082  
                      __CFG_BORV$3 000000                         i2___ftpack 29B6  
                     __CFG_CP0$OFF 000000                        _RTC_getTime 2E52  
                     __CFG_CP1$OFF 000000                       __CFG_CP2$OFF 000000  
                     __CFG_CP3$OFF 000000                       ___ftadd@exp1 0093  
                     ___ftadd@exp2 0092                       ___ftadd@sign 0091  
                              l100 11BC                                l101 1230  
                              l102 12A4                                l103 1318  
                              l104 1348                                l105 1376  
                              l114 146A                                l106 13A4  
                              l122 14D4                                l107 13D2  
                              l132 1576                                l124 14F0  
                              l141 0794                                l134 181C  
                              l160 0A28                                l152 090A  
                              l144 07EC                                l128 157C  
                              l161 0AA8                                l153 098A  
                              l145 086C                                l170 0BE8  
                              l162 0ACA                                l154 09AC  
                              l146 088E                                l402 0308  
                              l420 0628                                l412 04C4  
                              l173 0C3A                                l165 0B1C  
                              l157 09FE                                l149 08E0  
                              l501 2230                                l405 033C  
                              l502 2240                                l422 065C  
                              l414 053C                                l407 0480  
                              l168 0B46                                l512 31CE  
                              l272 307A                                l424 0690  
                              l416 05C2                                l408 04A8  
                              l360 322A                                l440 1CC2  
                              l169 0BC6                                l353 3124  
                              l273 3070                                l409 04B2  
                              l426 06C4                                l418 05F4  
                              l370 0082                                l442 1D94  
                              l434 1BEC                                l186 2904  
                              l427 06E8                                l371 0126  
                              l443 1DAE                                l435 1C0C  
                              l372 0116                                l436 1C48  
                              l517 2B6A                                l429 0720  
                              l518 2B26                                l438 1F52  
                              l375 075A                                l391 02A6  
                              l383 01DE                                l376 0180  
                              l393 02B4                                l385 025A  
                              l730 26E0                                l386 02C6  
                              l491 2058                                l379 06F4  
                              l395 02C0                                l732 26EA  
                              l492 209E                                l741 271E  
                              l493 20EC                                l397 02F8  
                              l389 0298                                l742 2724  
                              l734 26F6                                l494 211A  
                              l830 0CB8                                l559 2E96  
                              l751 2762                                l743 2730  
                              l831 0C8C                                l728 2774  
                              l736 26FC                                l488 1FE6  
                              l840 0E1A                                l753 276E  
                              l745 273A                                l737 2708  
                              l729 26D2                                l841 0CC4  
                              l498 21FC                                l850 0E84  
                              l834 0DE2                                l747 2746  
                              l739 2712                                l851 0E9C  
                              l748 274C                                l860 1022  
                              l844 0CFE                                l749 2758  
                              l861 104C                                l845 0D68  
                              l837 0CC0                                l829 0C42  
                              l846 0DB8                                l856 0F2A  
                              l857 0F54                                l849 0E52  
                              l859 0F62                       __CFG_CPB$OFF 000000  
                     __CFG_CPD$OFF 000000                                _tic 3364  
                              prod 000FF3                   ?_resetMotorTimer 0001  
                              tosl 000FFD                                wreg 000FE8  
                  ?_lcd_set_cursor 0086                       __CFG_LVP$OFF 000000  
                     __CFG_WDT$OFF 000000                               l1110 2296  
                             l1114 22C0                               l1220 2E40  
                             l1124 231C                               l1133 235A  
                             l1125 2312                               l1134 2350  
                             l1230 2F8E                               l1215 2DFE  
                             l1119 2326                               l1151 2BD8  
                             l1216 2DF2                               l1080 2926  
                             l1136 237E                               l1152 2C08  
                             l1137 239A                               l1225 2F58  
                             l1082 2964                               l1138 23CA  
                             l1226 2F4C                               l1219 2E32  
                             l1083 294E                               l1085 298C  
                             l1229 2F80                               l1086 2982  
                             l1079 2930                               l1428 31A0  
                             l1429 3196                               l6026 052C  
                             l5260 21FC                               l6044 05F4  
                             l6036 058E                               l5238 20FC  
                             l5342 0F62                               l5318 0EA0  
                             l6072 0734                               l6208 1D9E  
                             l6226 1E50                               l5622 2E8E  
                             l5730 08AC                               l5832 0C06  
                             l5656 14F0                               l4954 2C34  
                             l5764 09CA                               l5972 0318  
                             l5892 0116                               ?_tic 0001  
                             l5798 0AE8                               l5990 0480  
                             l5994 0490                               STR_1 FF77  
                             STR_2 FFB2                               STR_3 FF23  
                             STR_4 FF34                               STR_5 FEEE  
                             STR_6 FE61                               STR_7 FE22  
                             STR_8 FEB0                               STR_9 FF95  
                             _T0IE 007F95                               _T0IF 007F92  
                             _LATA 000F89                               _LATB 000F8A  
                             _LATC 000F8B                               _LATD 000F8C  
                             _LATE 000F8D                               u6100 20D8  
                             u6020 1FE4                               u6030 2014  
                             u7001 182E                               u6210 21F6  
                             u6130 20FC                               u6050 204A  
                             u6107 20CE                               u7100 09CA  
                             u6140 2118                               u6037 200A  
                             u6230 222C                               u6150 2148  
                             u6070 2088                               u6310 0D5E  
                             u7200 0C06                               u6320 0DA2  
                             u6217 21EC                               u6057 2040  
                             u7050 08AC                               u6330 0DDA  
                             u6308 0D2C                               u6237 2222  
                             u6157 213E                               u6077 207E  
                             u6317 0D54                               u6309 0D60  
                             u5710 2918                               u6510 2288  
                             u7150 0AE8                               u6190 21C0  
                             u7311 01A6                               u8007 00D8  
                             u6327 0D98                               u8017 050C  
                             u6337 0DD0                               u6610 232E  
                             u7250 00F8                               u6450 105E  
                             u8107 2D70                               u8027 3284  
                             u6540 22B2                               u7260 0108  
                             u5820 2F5C                               u6460 107A  
                             u6428 0F16                               u8117 2D7A  
                             u6197 21B6                               u8037 305E  
                             u5750 2996                               u7350 0282  
                             u6390 0EDE                               u6278 0C78  
                             u8127 2DB2                               u6471 2254  
                             u8047 1FA8                               u6640 2362  
                             u7600 061A                               u7520 0490  
                             u7440 02EE                               u7280 017E  
                             u6448 100E                               u8137 2DBC  
                             u6481 2268                               u8057 1FBE  
                             u6570 22F0                               u7610 064E  
                             u8067 32FE                               u7620 0682  
                             u7540 04BC                               u5685 2D88  
                             u8077 3008                               u5790 2E02  
                             u5686 2D8A                               u7630 06B6  
                             u7470 033A                               u7294 0192  
                             u5695 2DCA                               u8087 303C  
                             u7295 018E                               u5696 2DCC  
                             u5960 2B56                               u8097 3316  
                             u7481 0380                               u5970 2B9A  
                             u7650 0734                               u7570 058E  
                             u6940 2EB4                               u7580 05B4  
                             u7740 1E50                               u7590 05E6  
                             u5967 2B4C                               u7807 1C7A  
                             u5977 2B90                               u7817 1C90  
                             u7675 2FD6                               u5995 3212  
                             u6971 14FA                               u7907 1ECC  
                             u7827 1D02                               u5996 3214  
                             u7917 1EE6                               u7837 1D18  
                             u7927 1EFC                               u7847 1D86  
                             u7937 1F44                               u7857 1DBC  
                             u7947 1700                               u7867 1DD2  
                             u7787 28AC                               u7957 1716  
                             u7877 1E3C                               u7797 28C2  
                             u7967 1812                               u7887 1E5E  
                             u7977 1438                               u7897 1E74  
                             u7987 0020                               u7997 0036  
                             _main 2852           __end_of_interruptHandler 2B06  
                     ___ftpack@arg 0080               _RTC_getOperatingTime 259C  
                     ___ftpack@exp 0083                               _tock 3356  
                             _test 01DA       __end_of_assemblyStepEncoding FC3F  
                             fsr0h 000FEA                               fsr1h 000FE2  
                             indf0 000FEF                               fsr2h 000FDA  
                             fsr0l 000FE9                               indf2 000FDF  
                             fsr1l 000FE1                               fsr2l 000FD9  
                 __end_of_I2C_Send 2BA6                               btemp 0065  
                     i2___ftadd@f1 0009                       i2___ftadd@f2 000C  
                             prodh 000FF4                               prodl 000FF3  
                             start 000E                      __CFG_IESO$OFF 000000  
                    __CFG_MCLRE$ON 000000                       ___param_bank 000000  
                 __end_of_LCD_LEFT FC41                              ??_tic 0080  
                  ??_printErrorLCD 0097              I2C_Master_Read@ackBit 0081  
                 ?_I2C_Master_Init 008D                   ?_I2C_Master_Read 0001  
                 ?_I2C_Master_Wait 0001                   ?_I2C_Master_Stop 0001  
                            ?_main 0001                              _EEADR 000FA9  
                  __end_of___ftadd 23F0                              STR_10 FDFE  
                            STR_11 FF86                              STR_12 FFC0  
                            STR_20 FF12                              STR_21 FEE4  
                            STR_13 FF45                              STR_30 FFEE  
                            STR_14 FF56                              STR_22 FEDB  
                            STR_15 FF01                              STR_23 FEC6  
                            STR_24 FFE5                              STR_16 FE7D  
                            STR_25 FFCE                              STR_17 FE97  
                            STR_26 FFDA                              STR_18 FFA4  
                            STR_27 FF67                              STR_19 FE43  
                            STR_28 FFF5                              STR_29 FFFB  
                            ?_tock 0080                    __end_of___lldiv 2E52  
                  __end_of___llmod 2FA0                              i2l180 2ABA  
                            i2l730 27A2                              i2l732 27AC  
                            i2l741 27E0                              i2l661 1918  
                            i2l653 1894                              i2l742 27E6  
                            i2l734 27B8                              i2l670 1BC0  
                            i2l751 2824                              i2l743 27F2  
                            i2l671 1996                              i2l663 194E  
                            i2l655 18D2                              i2l728 2836  
                            i2l736 27BE                              i2l753 2830  
                            i2l745 27FC                              i2l737 27CA  
                            i2l729 2796                              i2l665 1956  
                            i2l657 18DA                              i2l682 1AA2  
                            i2l674 19DC                              i2l747 2808  
                            i2l739 27D4                              i2l667 198C  
                            i2l659 1910                              i2l748 280E  
                            i2l684 1AE8                              i2l749 281A  
                            i2l677 1A1C                              i2l694 1BBA  
                            i2l695 1BE0                              i2l687 1B28  
                            i2l679 1A62                              i2l689 1B78  
                   i2_motorControl 2792                              _TMR0H 000FD7  
                            _TMR0L 000FD6                              _PORTB 000F81  
                  __end_of__doprnt 1084                              _TRISA 000F92  
                            _TRISB 000F93                              _TRISC 000F94  
                            _TRISD 000F95                              _TRISE 000F96  
             printStringLCD@string 0086                    mainMenu@pressed 00D7  
                    __CFG_PWRT$OFF 000000                      __CFG_WRT0$OFF 000000  
                    __CFG_WRT1$OFF 000000                      __CFG_WRT2$OFF 000000  
                    __CFG_WRT3$OFF 000000                    __end_of_lcdInst 331E  
                   __CFG_EBTR0$OFF 000000                     __CFG_FCMEN$OFF 000000  
                   __CFG_EBTR1$OFF 000000                     __CFG_EBTR2$OFF 000000  
                   __CFG_EBTR3$OFF 000000                      __CFG_WRTB$OFF 000000  
                    __CFG_WRTC$OFF 000000                      __CFG_WRTD$OFF 000000  
                  __end_of_errMsgs FD26                    __end_of_initLCD 304C  
                   __CFG_EBTRB$OFF 000000                    __end_of_dpowers FC19  
                    ___ftpack@sign 0084                              _putch 32EE  
                            pclath 000FFA                              tablat 000FF5  
                _LCDinterruptState 004C                              plusw1 000FE3  
                            plusw2 000FDB              ?_RTC_getOperatingTime 0086  
                            status 000FD8        I2C_Master_Read@receivedByte 0082  
                            wtemp6 0066                    __end_of_sprintf 30D8  
               __size_ofi2___ftadd 01AC                   _timeSinceLastTic 0059  
                  __initialization 2C38                       __end_of_main 2906  
                     __end_of_tock 3364                  ?_lcd_shift_cursor 0083  
                   __CFG_OSC$HSPLL 000000                        ?i2___ftpack 0001  
           __end_ofi2_motorControl 2852                  __end_of_LCD_RIGHT FC42  
                           ??_main 00DB                             ??_tock 0083  
               ??_lcd_shift_cursor 0084                      __activetblptr 000003  
                   packaging@F3230 01B8                     packaging@F3226 01BA  
                   packaging@F3228 017E                  ?_I2C_Master_Start 0001  
                ?_I2C_Master_Write 0081                          I2C_Send@i 0089  
               ??_I2C_Master_Start 0081                             _ADCON0 000FC2  
                           _ADCON1 000FC1                 ??_I2C_Master_Write 0083  
                 ___llmod@dividend 008D                             _EEADRH 000FAA  
                           _EEDATA 000FA8                             _EECON2 000FA7  
      __size_of_RTC_startOperation 0084                             ?_putch 0001  
                 __end_of___ftpack 29B6                             i2l1110 2442  
                           i2l1114 246C                             i2l1124 24C8  
                           i2l1133 2506                             i2l1125 24BE  
                           i2l1134 24FC                             i2l1119 24D2  
                           i2l1080 29D4                             i2l1136 252A  
                           i2l1137 2546                             i2l1082 2A12  
                           i2l1138 2576                             i2l1083 29FC  
                           i2l1085 2A3A                             i2l1086 2A30  
                           i2l1079 29DE                             i2l4704 1B28  
                           i2l4664 1A1C                             i2l4684 1AA2  
                           u512_41 2400                             u513_41 2414  
                    inputEntry@msg 0100                             _TMR0IE 007F95  
                    inputEntry@sum 0145                             _SSPADD 000FC8  
                   packaging@instr 0174                             _SSPBUF 000FC9  
                 __end_of_clearing 0C40                     __CFG_XINST$OFF 000000  
                           ___ftge 2BA6                   __end_of_mainMenu 1F7C  
                     RTC_getTime@i 0085                    motorControl@dir 0080  
                           ___wmul 3244                          ??___ftadd 008E  
                   __CFG_STVREN$ON 000000                   __end_of_nanoAddr FC40  
                        ??___lldiv 0088                          ??___llmod 0095  
                        ??__doprnt 009C                             _params 01BC  
                           clear_0 2C9E                             clear_1 2CAA  
                           clear_2 2CB6                             _extras 00E4  
                    inverseDir@dir 0001                       __doprnt@flag 00A0  
                 ??_printStringLCD 0088                          ??_lcdInst 0082  
                           _printf 3154                    ?i2_motorControl 0002  
                 __end_of_tmr0_ISR 1BE2                       __doprnt@prec 009E  
                 __end_of_tmr0Init 32B4                             _strcpy 318C  
                        ??_initLCD 0083                    _currentMotorDir 0055  
             _assemblyStepEncoding FC3A                       __pdataCOMRAM 004D  
                        ?_I2C_Send 0083                  __end_ofi2___ftadd 259C  
                   i2___ftadd@exp1 0014                     i2___ftadd@exp2 0013  
                   i2___ftadd@sign 0012                       __mediumconst FBF0  
                 __end_of_viewLogs 3244                             tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
                        ??_sprintf 00B4               __end_of_LCDMenuIcons FC3A  
           ??_RTC_getOperatingTime 0088               clearing@debounceTime 00A4  
                       __accesstop 0080            __end_of__initialization 2CBC  
                  __CFG_PBADEN$OFF 000000                         ___ftadd@f1 0088  
                       ___ftadd@f2 008B                __size_ofi2___ftpack 00AE  
                       ___ftge@ff1 0094                         ___ftge@ff2 0097  
                _motorControlTimer 01D6                      ___rparam_used 000001  
                   i2___ftpack@arg 0001                     i2___ftpack@exp 0004  
       packageCompartment@currTime 00C2                     __pcstackCOMRAM 0001  
                     __pidataBANK1 30D8                       __pidataBANK2 2ECE  
                  viewLogs@pressed 0096         __end_of_packageCompartment 1470  
                    __end_of_putch 3306                       ?_RTC_getTime 0083  
                 ??_lcd_set_cursor 0087                 __size_of_lcdNibble 0084  
                       ??_I2C_Send 0085                        inputEntry@i 0155  
                     packaging@msg 0100                       packaging@set 0178  
               __size_of_hibernate 003E                         __doprnt@ap 009A  
                       __doprnt@cp 00A5                         __doprnt@pb 0096  
                          ??_putch 0082                         __pbssBANK0 00DC  
                       __pbssBANK1 01BC                 __size_of_packaging 03C0  
              mainMenu@needToPrint 00D5                  ?_interruptHandler 0001  
               ??_interruptHandler 0022                _inputEntryQuestions FD26  
                          ?___ftge 0094                            ?___wmul 0080  
                        ?___ftpack 0080                            ?_printf 00A8  
                     I2C_Send@data 0083                            ?_strcpy 0086  
                   inputEntry@done 013B                          ?_clearing 0001  
                   inputEntry@numB 0147                     inputEntry@numN 0149  
                   inputEntry@numS 014B                     inputEntry@numW 014D  
                          _SSPCON1 000FC6                            _SSPCON2 000FC5  
                          _SSPSTAT 000FC7                          ?_mainMenu 0001  
         __size_of_resetMotorTimer 0014                 timer@operatingTime 005C  
                        ?_tmr0_ISR 0001                  __end_of_lcdNibble 2DCE  
                        ?_tmr0Init 0001                            __Hparam 0000  
RTC_getOperatingTime@operatingTime 0093                            __Lparam 0000  
                __end_of_hibernate 3154                          ?_viewLogs 0001  
                  __size_of___ftge 0092                            ___ftadd 2242  
                          ___lldiv 2DCE                    __size_of___wmul 0028  
                          ___llmod 2F38                            __doprnt 0C40  
          RTC_getOperatingTime@res 0091                      ?_motorControl 0080  
                          __pcinit 2C38                       ??i2___ftpack 0006  
                       ??___ftpack 0085                            __ramtop 1000  
                          _endTime 0034              __end_of_printErrorLCD 3292  
                          _lcdInst 3306                  __end_of_packaging 1830  
                          __ptext0 2852                            __ptext1 3292  
                          __ptext2 1BE2                            __ptext3 321C  
                          __ptext4 1470                            __ptext5 3094  
                          __ptext6 3154                            __ptext7 0C40  
                          __ptext8 2F38                            __ptext9 1084  
                  __size_of_printf 0038                          _T0CONbits 000FD5  
                          _errMsgs FC46                    __size_of_strcpy 0034  
                          _initLCD 3000                            _dpowers FBF1  
       printStringLCD@newlineIndex 008F                       __size_of_tic 000E  
                        _LCD_RIGHT FC41                         _inputEntry 0012  
         __size_of_I2C_Master_Init 0060           __size_of_I2C_Master_Read 002A  
                       ??_clearing 009D           __size_of_I2C_Master_Wait 0014  
                       _inverseDir 3346           __size_of_I2C_Master_Stop 0008  
         printStringLCD@spaceIndex 008D                    printStringLCD@i 0093  
                  printStringLCD@j 008B                            _sprintf 3094  
                   __pintcode_body 2A64          __size_of_lcd_shift_cursor 0022  
             end_of_initialization 2CBC                         ??_mainMenu 00CB  
            __end_of_LCD_SIZE_HORZ FC44              __end_of_LCD_SIZE_VERT FC43  
         inputEntry@fastenerString 0118                            int_func 2A64  
               __end_ofi2___ftpack 2A64                         ??_tmr0_ISR 0015  
                       ??_tmr0Init 0080          __size_of_I2C_Master_Start 0008  
        __size_of_I2C_Master_Write 000A                    ___lldiv@divisor 0084  
                  ___lldiv@counter 008C                         _pollKeypad 31C0  
           packageCompartment@numB 00B2             packageCompartment@numN 00B4  
           packageCompartment@numS 00B6             packageCompartment@numW 00B8  
                          printf@f 00A8                   ??i2_motorControl 0003  
                          postdec1 000FE5                            postdec2 000FDD  
                       ??_viewLogs 0095                            postinc0 000FEE  
                          postinc2 000FDE                     ??_motorControl 0081  
        inputEntry@doneCompartment 0143                       _LCDMenuIcons FC2A  
                    _longTolerance 0051                          _PORTAbits 000F80  
                        _PORTBbits 000F81               __size_of_RTC_getTime 007C  
                        _TRISCbits 000F94         __end_of_RTC_startOperation 2D4A  
                __size_of_I2C_Send 00A0                          i2___ftadd 23F0  
     inputEntry@compartmentsToFill 013A          lcd_shift_cursor@direction 0083  
              i2motorControl@motor 0003                    i2___ftpack@sign 0005  
                ??_resetMotorTimer 0001                     __end_of___ftge 2C38  
                   __end_of___wmul 326C                      __pidataCOMRAM 32D6  
               pollKeypad@keypress 0080                     __end_of_printf 318C  
              packageCompartment@b 00A5                packageCompartment@n 009D  
              packageCompartment@s 009E                packageCompartment@w 009F  
                   __end_of_strcpy 31C0                start_initialization 2C38  
                      ?_inputEntry 0001                        ?_inverseDir 0001  
               _packageCompartment 1084                        __end_of_tic 3372  
                       ?i2___ftadd 0009               inputEntry@numPressed 0151  
                ??_I2C_Master_Init 0091                  ??_I2C_Master_Read 0081  
              ?_packageCompartment 009D                  ??_I2C_Master_Wait 0080  
                ??_I2C_Master_Stop 0081      __size_of_RTC_getOperatingTime 0130  
                  ___llmod@divisor 0091                    ___llmod@counter 0095  
                    packaging@msg2 0154                      packaging@msg3 0122  
                    packaging@mult 017A            packaging@compartmentNum 017C  
                      ?_pollKeypad 0001                      clearing@F3240 0061  
                         ??___ftge 009A                           ??___wmul 0084  
                      __doprnt@val 00A1           I2C_Master_Init@clockFreq 008D  
                      __pdataBANK1 017E                        __pdataBANK2 0200  
                 __CFG_LPT1OSC$OFF 000000               ??_packageCompartment 00A0  
                         ??_printf 00B2          __size_of_interruptHandler 2AFE  
                         ??_strcpy 008A                      clearing@instr 009F  
                __size_of___ftpack 00B0                        __pbssCOMRAM 0034  
                 hibernate@pressed 0099                      __pcstackBANK0 0080  
                    __pcstackBANK1 0100             RTC_startOperation@time 0088  
         inputEntry@inputEntryStep 014F                   _lcd_shift_cursor 32B4  
          __size_of_printStringLCD 02C6                  __size_of_clearing 04DA  
                  RTC_getTime@time 0083               __end_of_motorControl 2792  
                        __doprnt@c 00A7                          __doprnt@f 0098  
                __size_of_mainMenu 039A                   _I2C_Master_Start 3384  
                 _I2C_Master_Write 3372                  __CFG_CCP2MX$PORTC 000000  
                __size_of_tmr0_ISR 03B2                  __size_of_tmr0Init 0022  
              __size_of_inputEntry 0754                          __pintcode 0008  
                    __pmediumconst FBF0                          _lcdNibble 2D4A  
              __size_of_inverseDir 0010                           ?___ftadd 0088  
                         ?___lldiv 0080                           ?___llmod 008D  
                         ?__doprnt 0096                  __size_of_viewLogs 0028  
                        _hibernate 3116                           ?_lcdInst 0001  
                        _dispensed 00DC                           ?_initLCD 0001  
                         _I2C_Send 2B06                          _packaging 1470  
              __size_of_pollKeypad 0032                        ??i2___ftadd 000F  
                         ?_sprintf 00A8                     __size_of_putch 0018  
                  inputEntry@F3210 01A0                    inputEntry@F3189 005F  
              __end_of_keypadChars FC2A                           _LCD_LEFT FC40  
          __size_of_lcd_set_cursor 0048                     _fastenerMatrix FDAA  
                   ___wmul@product 0084                           _LATBbits 000F8A  
                         _LATCbits 000F8B         inputEntry@compartmentLabel 0138  
                         _LATDbits 000F8C                           _LATEbits 000F8D  
                    _operatingTime 0044                    lcd_set_cursor@i 0088  
                  lcd_set_cursor@x 0089                    lcd_set_cursor@y 0086  
                         i2u423_40 2A44                           i2u522_40 249C  
                         i2u419_40 29C6                           _PIR2bits 000FA1  
                         i2u516_40 2434                           i2u526_40 24DA  
                        _operating 004B                           i2u519_40 245E  
                         i2u529_40 250E                           i2u498_40 3352  
                  inputEntry@found 013D                   __CFG_WDTPS$32768 000000  
                       ?_lcdNibble 0001           inputEntry@compartmentNum 0153  
                        _timerInit 004A        __end_of_inputEntryQuestions FDAA  
                       ?_hibernate 0001                  ___wmul@multiplier 0080  
                        _startTime 003A                      lcdNibble@data 0081  
                    lcdNibble@temp 0080                         ?_packaging 0001  
                        mainMenu@i 00D9                     _LCD_HORZ_LIMIT FC45  
              inputEntry@setIsGood 013F                          copy_data0 2C4C  
                        copy_data1 2C6C                          copy_data2 2C8C  
           __end_of_fastenerMatrix FDFE                    _resetMotorTimer 3332  
          inputEntry@doneMultiples 0141                 mainMenu@startPress 00D3  
           __size_of_printErrorLCD 0026                         _EECON1bits 000FA6  
               _RTC_startOperation 2CC6                           __Hrparam 0000  
                         __Lrparam 0000                 __CFG_BOREN$SBORDIS 000000  
                         _fSLookup 0200                ?_RTC_startOperation 0001  
                  I2C_Send@address 0088                   __size_of___ftadd 01AE  
                 __size_of___lldiv 0084                   __size_of___llmod 0068  
                    ??_RTC_getTime 0085                           ___ftpack 2906  
                 __size_of__doprnt 0444                   _interruptHandler 0008  
                 __size_of_lcdInst 0018                  motorControl@motor 0081  
                      _currentMode 0048                    _I2C_Master_Init 2FA0  
                  _I2C_Master_Read 31F2                   __size_of_initLCD 004C  
                  _I2C_Master_Wait 331E                     _shortTolerance 004D  
         RTC_getOperatingTime@time 008A                    _I2C_Master_Stop 337C  
           __end_of_LCD_HORZ_LIMIT FC46                       ??_inputEntry 0099  
                      _keypadChars FC19                       ??_inverseDir 0001  
            __size_of_motorControl 00C6                           _clearing 0766  
                         __ptext10 0012                           __ptext11 318C  
                         __ptext20 3356                           __ptext12 326C  
                         __ptext21 3364                           __ptext13 304C  
                         __ptext30 2E52                           __ptext22 26CC  
                         __ptext14 32B4                           __ptext31 3372  
                         __ptext23 2BA6                           __ptext15 3116  
                         __ptext40 2DCE                           __ptext32 337C  
                         __ptext24 2242                           __ptext16 1F7C  
                         __ptext33 3384                           __ptext25 2906  
                         __ptext17 32EE                           __ptext42 1830  
                         __ptext34 31F2                           __ptext26 2B06  
                         __ptext18 31C0                           __ptext43 2792  
                         __ptext35 331E                           __ptext27 2CC6  
                         __ptext19 0766                           __ptext44 23F0  
                         __ptext36 3000                           __ptext28 259C  
                         __ptext45 29B6                           __ptext37 3306  
                         __ptext29 3244                           __ptext46 3332  
                         __ptext38 2D4A                           __ptext47 3346  
                         __ptext39 2FA0                           __ptext48 0000  
                   _printStringLCD 1F7C               ??_RTC_startOperation 0086  
                   _LCD_VERT_LIMIT FC44                           _mainMenu 1BE2  
                 __size_of_sprintf 0044                           _nanoAddr FC3F  
                       strcpy@from 0088                      __size_of_main 00B4  
                    __size_of_tock 000E                           _tmr0_ISR 1830  
                         _tmr0Init 3292                       ??_pollKeypad 0080  
                      ??_lcdNibble 0080                           _viewLogs 321C  
               __end_of_inputEntry 0766                           int$flags 0065  
               __end_of_inverseDir 3356           __end_of_lcd_shift_cursor 32D6  
                i2motorControl@dir 0002                        ??_hibernate 0095  
     __end_of_RTC_getOperatingTime 26CC                       _motorControl 26CC  
      I2C_Master_Write@byteToWrite 0081                      _printErrorLCD 326C  
                lcd_shift_cursor@n 0085                          putch@data 0082  
         __end_of_I2C_Master_Start 338C           __end_of_I2C_Master_Write 337C  
                       _INTCONbits 000FF2            __end_of_resetMotorTimer 3346  
          __size_ofi2_motorControl 00C0                        ??_packaging 00C5  
           __end_of_printStringLCD 2242             __end_of_LCD_VERT_LIMIT FC45  
              __end_of_RTC_getTime 2ECE     printStringLCD@newlineCharIndex 0091  
               __end_of_pollKeypad 31F2                           intlevel2 0000  
                   _lcd_set_cursor 304C                          sprintf@ap 00B4  
                        sprintf@pb 00B6                          sprintf@wh 00A8  
          packageCompartment@F3222 0063                      _LCD_SIZE_HORZ FC43  
                    _LCD_SIZE_VERT FC42                   ___lldiv@dividend 0080  
       tmr0_ISR@motorControlTimerB 001A         tmr0_ISR@motorControlTimerN 001C  
       tmr0_ISR@motorControlTimerS 001E         tmr0_ISR@motorControlTimerW 0020  
            mainMenu@operationTime 00CF            packageCompartment@doneB 00BA  
          packageCompartment@doneN 00BC            packageCompartment@doneS 00BE  
          packageCompartment@doneW 00C0            packageCompartment@instr 00A3  
          packageCompartment@timeB 00A6            packageCompartment@timeN 00A9  
          packageCompartment@timeS 00AC            packageCompartment@timeW 00AF  
                         printf@ap 00B2                           printf@pb 00B4  
          __end_of_I2C_Master_Init 3000            __end_of_I2C_Master_Read 321C  
          __end_of_I2C_Master_Wait 3332            __end_of_I2C_Master_Stop 3384  
                      lcdInst@data 0082                  inputEntry@pressed 0157  
                   ?_printErrorLCD 0095        __size_of_packageCompartment 03EC  
                         sprintf@f 00AA                   ___lldiv@quotient 0088  
                         strcpy@cp 008A                           strcpy@to 0086  
                  ?_printStringLCD 0086                        _SSPCON1bits 000FC6  
                      _SSPCON2bits 000FC5             __end_of_lcd_set_cursor 3094  
                 clearing@currTime 00A7                 packaging@instr_321 0176  
         lcd_shift_cursor@numChars 0084                   clearing@spinTime 00A1  
