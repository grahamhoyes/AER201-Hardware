

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Feb 26 14:46:10 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    38  0000                     
    39                           ; Version 1.45
    40                           ; Generated 16/11/2017 GMT
    41                           ; 
    42                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC18F4620 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     
    74                           	psect	idataCOMRAM
    75  00EDFE                     __pidataCOMRAM:
    76                           	opt stack 0
    77                           
    78                           ;initializer for inputEntry@F3149
    79  00EDFE  43                 	db	67
    80  00EDFF  30                 	db	48
    81                           
    82                           	psect	idataBANK1
    83  00F06F                     __pidataBANK1:
    84                           	opt stack 0
    85                           
    86                           ;initializer for _fSLookup
    87  00F06F  4E                 	db	78
    88  00F070  4F                 	db	79
    89  00F071  4E                 	db	78
    90  00F072  45                 	db	69
    91  00F073  00                 	db	0
    92  00F074  42                 	db	66
    93  00F075  00                 	db	0
    94  00F076  00                 	db	0
    95  00F077  00                 	db	0
    96  00F078  00                 	db	0
    97  00F079  4E                 	db	78
    98  00F07A  00                 	db	0
    99  00F07B  00                 	db	0
   100  00F07C  00                 	db	0
   101  00F07D  00                 	db	0
   102  00F07E  53                 	db	83
   103  00F07F  00                 	db	0
   104  00F080  00                 	db	0
   105  00F081  00                 	db	0
   106  00F082  00                 	db	0
   107  00F083  57                 	db	87
   108  00F084  00                 	db	0
   109  00F085  00                 	db	0
   110  00F086  00                 	db	0
   111  00F087  00                 	db	0
   112  00F088  42                 	db	66
   113  00F089  4E                 	db	78
   114  00F08A  00                 	db	0
   115  00F08B  00                 	db	0
   116  00F08C  00                 	db	0
   117  00F08D  42                 	db	66
   118  00F08E  53                 	db	83
   119  00F08F  00                 	db	0
   120  00F090  00                 	db	0
   121  00F091  00                 	db	0
   122  00F092  42                 	db	66
   123  00F093  57                 	db	87
   124  00F094  00                 	db	0
   125  00F095  00                 	db	0
   126  00F096  00                 	db	0
   127  00F097  42                 	db	66
   128  00F098  42                 	db	66
   129  00F099  4E                 	db	78
   130  00F09A  00                 	db	0
   131  00F09B  00                 	db	0
   132  00F09C  42                 	db	66
   133  00F09D  42                 	db	66
   134  00F09E  53                 	db	83
   135  00F09F  00                 	db	0
   136  00F0A0  00                 	db	0
   137  00F0A1  42                 	db	66
   138  00F0A2  42                 	db	66
   139  00F0A3  57                 	db	87
   140  00F0A4  00                 	db	0
   141  00F0A5  00                 	db	0
   142  00F0A6  42                 	db	66
   143  00F0A7  4E                 	db	78
   144  00F0A8  57                 	db	87
   145  00F0A9  00                 	db	0
   146  00F0AA  00                 	db	0
   147  00F0AB  42                 	db	66
   148  00F0AC  53                 	db	83
   149  00F0AD  57                 	db	87
   150  00F0AE  00                 	db	0
   151  00F0AF  00                 	db	0
   152  00F0B0  42                 	db	66
   153  00F0B1  57                 	db	87
   154  00F0B2  57                 	db	87
   155  00F0B3  00                 	db	0
   156  00F0B4  00                 	db	0
   157  00F0B5  42                 	db	66
   158  00F0B6  4E                 	db	78
   159  00F0B7  4E                 	db	78
   160  00F0B8  57                 	db	87
   161  00F0B9  00                 	db	0
   162  00F0BA  42                 	db	66
   163  00F0BB  53                 	db	83
   164  00F0BC  57                 	db	87
   165  00F0BD  57                 	db	87
   166  00F0BE  00                 	db	0
   167  00F0BF  42                 	db	66
   168  00F0C0  42                 	db	66
   169  00F0C1  53                 	db	83
   170  00F0C2  57                 	db	87
   171  00F0C3  00                 	db	0
   172  00F0C4  42                 	db	66
   173  00F0C5  42                 	db	66
   174  00F0C6  4E                 	db	78
   175  00F0C7  57                 	db	87
   176  00F0C8  00                 	db	0
   177  00F0C9  42                 	db	66
   178  00F0CA  4E                 	db	78
   179  00F0CB  4E                 	db	78
   180  00F0CC  57                 	db	87
   181  00F0CD  00                 	db	0
   182  00F0CE  42                 	db	66
   183  00F0CF  4E                 	db	78
   184  00F0D0  4E                 	db	78
   185  00F0D1  4E                 	db	78
   186  00F0D2  00                 	db	0
   187  00F0D3  42                 	db	66
   188  00F0D4  57                 	db	87
   189  00F0D5  57                 	db	87
   190  00F0D6  57                 	db	87
   191  00F0D7  00                 	db	0
   192                           
   193                           	psect	mediumconst
   194  00FCF0                     __pmediumconst:
   195                           	opt stack 0
   196  00FCF0  00                 	db	0
   197  00FCF1                     _dpowers:
   198                           	opt stack 0
   199  00FCF1  0001               	dw	1
   200  00FCF3  0000               	dw	0
   201  00FCF5  000A               	dw	10
   202  00FCF7  0000               	dw	0
   203  00FCF9  0064               	dw	100
   204  00FCFB  0000               	dw	0
   205  00FCFD  03E8               	dw	1000
   206  00FCFF  0000               	dw	0
   207  00FD01  2710               	dw	10000
   208  00FD03  0000               	dw	0
   209  00FD05  86A0               	dw	34464
   210  00FD07  0001               	dw	1
   211  00FD09  4240               	dw	16960
   212  00FD0B  000F               	dw	15
   213  00FD0D  9680               	dw	38528
   214  00FD0F  0098               	dw	152
   215  00FD11  E100               	dw	57600
   216  00FD13  05F5               	dw	1525
   217  00FD15  CA00               	dw	51712
   218  00FD17  3B9A               	dw	15258
   219  00FD19                     __end_of_dpowers:
   220                           	opt stack 0
   221  00FD19                     _keypadChars:
   222                           	opt stack 0
   223  00FD19  31                 	db	49
   224  00FD1A  32                 	db	50
   225  00FD1B  33                 	db	51
   226  00FD1C  42                 	db	66
   227  00FD1D  34                 	db	52
   228  00FD1E  35                 	db	53
   229  00FD1F  36                 	db	54
   230  00FD20  4E                 	db	78
   231  00FD21  37                 	db	55
   232  00FD22  38                 	db	56
   233  00FD23  39                 	db	57
   234  00FD24  53                 	db	83
   235  00FD25  2A                 	db	42
   236  00FD26  30                 	db	48
   237  00FD27  23                 	db	35
   238  00FD28  57                 	db	87
   239  00FD29  00                 	db	0
   240  00FD2A                     __end_of_keypadChars:
   241                           	opt stack 0
   242  00FD2A                     _LCDMenuIcons:
   243                           	opt stack 0
   244  00FD2A  2A                 	db	42
   245  00FD2B  3C                 	db	60
   246  00FD2C  2D                 	db	45
   247  00FD2D  20                 	db	32
   248  00FD2E  20                 	db	32
   249  00FD2F  20                 	db	32
   250  00FD30  28                 	db	40
   251  00FD31  20                 	db	32
   252  00FD32  2D                 	db	45
   253  00FD33  20                 	db	32
   254  00FD34  29                 	db	41
   255  00FD35  20                 	db	32
   256  00FD36  20                 	db	32
   257  00FD37  20                 	db	32
   258  00FD38  20                 	db	32
   259  00FD39  00                 	db	0
   260  00FD3A                     __end_of_LCDMenuIcons:
   261                           	opt stack 0
   262  00FD3A                     _assemblyStepEncoding:
   263                           	opt stack 0
   264  00FD3A  55                 	db	85
   265  00FD3B  5B                 	db	91
   266  00FD3C  77                 	db	119
   267  00FD3D  7F                 	db	127
   268  00FD3E  FF                 	db	255
   269  00FD3F                     __end_of_assemblyStepEncoding:
   270                           	opt stack 0
   271  00FD3F                     _nanoAddr:
   272                           	opt stack 0
   273  00FD3F  10                 	db	16
   274  00FD40                     __end_of_nanoAddr:
   275                           	opt stack 0
   276  00FD40                     _LCD_LEFT:
   277                           	opt stack 0
   278  00FD40  00                 	db	0
   279  00FD41                     __end_of_LCD_LEFT:
   280                           	opt stack 0
   281  00FD41                     _LCD_RIGHT:
   282                           	opt stack 0
   283  00FD41  01                 	db	1
   284  00FD42                     __end_of_LCD_RIGHT:
   285                           	opt stack 0
   286  00FD42                     _LCD_SIZE_VERT:
   287                           	opt stack 0
   288  00FD42  02                 	db	2
   289  00FD43                     __end_of_LCD_SIZE_VERT:
   290                           	opt stack 0
   291  00FD43                     _LCD_SIZE_HORZ:
   292                           	opt stack 0
   293  00FD43  10                 	db	16
   294  00FD44                     __end_of_LCD_SIZE_HORZ:
   295                           	opt stack 0
   296  00FD44                     _LCD_VERT_LIMIT:
   297                           	opt stack 0
   298  00FD44  02                 	db	2
   299  00FD45                     __end_of_LCD_VERT_LIMIT:
   300                           	opt stack 0
   301  00FD45                     _LCD_HORZ_LIMIT:
   302                           	opt stack 0
   303  00FD45  28                 	db	40
   304  00FD46                     __end_of_LCD_HORZ_LIMIT:
   305                           	opt stack 0
   306  00FD46                     _errMsgs:
   307                           	opt stack 0
   308  00FD46  49                 	db	73
   309  00FD47  6E                 	db	110
   310  00FD48  76                 	db	118
   311  00FD49  61                 	db	97
   312  00FD4A  6C                 	db	108
   313  00FD4B  69                 	db	105
   314  00FD4C  64                 	db	100
   315  00FD4D  20                 	db	32
   316  00FD4E  65                 	db	101
   317  00FD4F  6E                 	db	110
   318  00FD50  74                 	db	116
   319  00FD51  72                 	db	114
   320  00FD52  79                 	db	121
   321  00FD53  0A                 	db	10
   322  00FD54  50                 	db	80
   323  00FD55  6C                 	db	108
   324  00FD56  65                 	db	101
   325  00FD57  61                 	db	97
   326  00FD58  73                 	db	115
   327  00FD59  65                 	db	101
   328  00FD5A  20                 	db	32
   329  00FD5B  74                 	db	116
   330  00FD5C  72                 	db	114
   331  00FD5D  79                 	db	121
   332  00FD5E  20                 	db	32
   333  00FD5F  61                 	db	97
   334  00FD60  67                 	db	103
   335  00FD61  61                 	db	97
   336  00FD62  69                 	db	105
   337  00FD63  6E                 	db	110
   338  00FD64  00                 	db	0
   339  00FD65  00                 	db	0
   340  00FD66  54                 	db	84
   341  00FD67  6F                 	db	111
   342  00FD68  6F                 	db	111
   343  00FD69  20                 	db	32
   344  00FD6A  6D                 	db	109
   345  00FD6B  61                 	db	97
   346  00FD6C  6E                 	db	110
   347  00FD6D  79                 	db	121
   348  00FD6E  20                 	db	32
   349  00FD6F  66                 	db	102
   350  00FD70  61                 	db	97
   351  00FD71  73                 	db	115
   352  00FD72  74                 	db	116
   353  00FD73  65                 	db	101
   354  00FD74  6E                 	db	110
   355  00FD75  65                 	db	101
   356  00FD76  72                 	db	114
   357  00FD77  73                 	db	115
   358  00FD78  00                 	db	0
   359  00FD79  00                 	db	0
   360  00FD7A  00                 	db	0
   361  00FD7B  00                 	db	0
   362  00FD7C  00                 	db	0
   363  00FD7D  00                 	db	0
   364  00FD7E  00                 	db	0
   365  00FD7F  00                 	db	0
   366  00FD80  00                 	db	0
   367  00FD81  00                 	db	0
   368  00FD82  00                 	db	0
   369  00FD83  00                 	db	0
   370  00FD84  00                 	db	0
   371  00FD85  00                 	db	0
   372  00FD86  54                 	db	84
   373  00FD87  6F                 	db	111
   374  00FD88  6F                 	db	111
   375  00FD89  20                 	db	32
   376  00FD8A  6D                 	db	109
   377  00FD8B  61                 	db	97
   378  00FD8C  6E                 	db	110
   379  00FD8D  79                 	db	121
   380  00FD8E  20                 	db	32
   381  00FD8F  62                 	db	98
   382  00FD90  6F                 	db	111
   383  00FD91  6C                 	db	108
   384  00FD92  74                 	db	116
   385  00FD93  73                 	db	115
   386  00FD94  00                 	db	0
   387  00FD95  00                 	db	0
   388  00FD96  00                 	db	0
   389  00FD97  00                 	db	0
   390  00FD98  00                 	db	0
   391  00FD99  00                 	db	0
   392  00FD9A  00                 	db	0
   393  00FD9B  00                 	db	0
   394  00FD9C  00                 	db	0
   395  00FD9D  00                 	db	0
   396  00FD9E  00                 	db	0
   397  00FD9F  00                 	db	0
   398  00FDA0  00                 	db	0
   399  00FDA1  00                 	db	0
   400  00FDA2  00                 	db	0
   401  00FDA3  00                 	db	0
   402  00FDA4  00                 	db	0
   403  00FDA5  00                 	db	0
   404  00FDA6  54                 	db	84
   405  00FDA7  6F                 	db	111
   406  00FDA8  6F                 	db	111
   407  00FDA9  20                 	db	32
   408  00FDAA  6D                 	db	109
   409  00FDAB  61                 	db	97
   410  00FDAC  6E                 	db	110
   411  00FDAD  79                 	db	121
   412  00FDAE  20                 	db	32
   413  00FDAF  6E                 	db	110
   414  00FDB0  75                 	db	117
   415  00FDB1  74                 	db	116
   416  00FDB2  73                 	db	115
   417  00FDB3  00                 	db	0
   418  00FDB4  00                 	db	0
   419  00FDB5  00                 	db	0
   420  00FDB6  00                 	db	0
   421  00FDB7  00                 	db	0
   422  00FDB8  00                 	db	0
   423  00FDB9  00                 	db	0
   424  00FDBA  00                 	db	0
   425  00FDBB  00                 	db	0
   426  00FDBC  00                 	db	0
   427  00FDBD  00                 	db	0
   428  00FDBE  00                 	db	0
   429  00FDBF  00                 	db	0
   430  00FDC0  00                 	db	0
   431  00FDC1  00                 	db	0
   432  00FDC2  00                 	db	0
   433  00FDC3  00                 	db	0
   434  00FDC4  00                 	db	0
   435  00FDC5  00                 	db	0
   436  00FDC6  54                 	db	84
   437  00FDC7  6F                 	db	111
   438  00FDC8  6F                 	db	111
   439  00FDC9  20                 	db	32
   440  00FDCA  6D                 	db	109
   441  00FDCB  61                 	db	97
   442  00FDCC  6E                 	db	110
   443  00FDCD  79                 	db	121
   444  00FDCE  20                 	db	32
   445  00FDCF  77                 	db	119
   446  00FDD0  61                 	db	97
   447  00FDD1  73                 	db	115
   448  00FDD2  68                 	db	104
   449  00FDD3  65                 	db	101
   450  00FDD4  72                 	db	114
   451  00FDD5  73                 	db	115
   452  00FDD6  00                 	db	0
   453  00FDD7  00                 	db	0
   454  00FDD8  00                 	db	0
   455  00FDD9  00                 	db	0
   456  00FDDA  00                 	db	0
   457  00FDDB  00                 	db	0
   458  00FDDC  00                 	db	0
   459  00FDDD  00                 	db	0
   460  00FDDE  00                 	db	0
   461  00FDDF  00                 	db	0
   462  00FDE0  00                 	db	0
   463  00FDE1  00                 	db	0
   464  00FDE2  00                 	db	0
   465  00FDE3  00                 	db	0
   466  00FDE4  00                 	db	0
   467  00FDE5  00                 	db	0
   468  00FDE6  54                 	db	84
   469  00FDE7  6F                 	db	111
   470  00FDE8  6F                 	db	111
   471  00FDE9  20                 	db	32
   472  00FDEA  6D                 	db	109
   473  00FDEB  61                 	db	97
   474  00FDEC  6E                 	db	110
   475  00FDED  79                 	db	121
   476  00FDEE  20                 	db	32
   477  00FDEF  73                 	db	115
   478  00FDF0  70                 	db	112
   479  00FDF1  61                 	db	97
   480  00FDF2  63                 	db	99
   481  00FDF3  65                 	db	101
   482  00FDF4  72                 	db	114
   483  00FDF5  73                 	db	115
   484  00FDF6  00                 	db	0
   485  00FDF7  00                 	db	0
   486  00FDF8  00                 	db	0
   487  00FDF9  00                 	db	0
   488  00FDFA  00                 	db	0
   489  00FDFB  00                 	db	0
   490  00FDFC  00                 	db	0
   491  00FDFD  00                 	db	0
   492  00FDFE  00                 	db	0
   493  00FDFF  00                 	db	0
   494  00FE00  00                 	db	0
   495  00FE01  00                 	db	0
   496  00FE02  00                 	db	0
   497  00FE03  00                 	db	0
   498  00FE04  00                 	db	0
   499  00FE05  00                 	db	0
   500  00FE06  4E                 	db	78
   501  00FE07  6F                 	db	111
   502  00FE08  20                 	db	32
   503  00FE09  66                 	db	102
   504  00FE0A  61                 	db	97
   505  00FE0B  73                 	db	115
   506  00FE0C  74                 	db	116
   507  00FE0D  65                 	db	101
   508  00FE0E  6E                 	db	110
   509  00FE0F  65                 	db	101
   510  00FE10  72                 	db	114
   511  00FE11  73                 	db	115
   512  00FE12  20                 	db	32
   513  00FE13  73                 	db	115
   514  00FE14  65                 	db	101
   515  00FE15  6C                 	db	108
   516  00FE16  65                 	db	101
   517  00FE17  63                 	db	99
   518  00FE18  74                 	db	116
   519  00FE19  65                 	db	101
   520  00FE1A  64                 	db	100
   521  00FE1B  00                 	db	0
   522  00FE1C  00                 	db	0
   523  00FE1D  00                 	db	0
   524  00FE1E  00                 	db	0
   525  00FE1F  00                 	db	0
   526  00FE20  00                 	db	0
   527  00FE21  00                 	db	0
   528  00FE22  00                 	db	0
   529  00FE23  00                 	db	0
   530  00FE24  00                 	db	0
   531  00FE25  00                 	db	0
   532  00FE26                     __end_of_errMsgs:
   533                           	opt stack 0
   534  00FE26                     _inputEntryQuestions:
   535                           	opt stack 0
   536  00FE26  41                 	db	65
   537  00FE27  73                 	db	115
   538  00FE28  73                 	db	115
   539  00FE29  65                 	db	101
   540  00FE2A  6D                 	db	109
   541  00FE2B  62                 	db	98
   542  00FE2C  6C                 	db	108
   543  00FE2D  79                 	db	121
   544  00FE2E  20                 	db	32
   545  00FE2F  73                 	db	115
   546  00FE30  74                 	db	116
   547  00FE31  65                 	db	101
   548  00FE32  70                 	db	112
   549  00FE33  73                 	db	115
   550  00FE34  0A                 	db	10
   551  00FE35  2A                 	db	42
   552  00FE36  3C                 	db	60
   553  00FE37  2D                 	db	45
   554  00FE38  20                 	db	32
   555  00FE39  20                 	db	32
   556  00FE3A  28                 	db	40
   557  00FE3B  34                 	db	52
   558  00FE3C  2D                 	db	45
   559  00FE3D  38                 	db	56
   560  00FE3E  29                 	db	41
   561  00FE3F  20                 	db	32
   562  00FE40  20                 	db	32
   563  00FE41  20                 	db	32
   564  00FE42  20                 	db	32
   565  00FE43  20                 	db	32
   566  00FE44  00                 	db	0
   567  00FE45  00                 	db	0
   568  00FE46  00                 	db	0
   569  00FE47  46                 	db	70
   570  00FE48  61                 	db	97
   571  00FE49  73                 	db	115
   572  00FE4A  74                 	db	116
   573  00FE4B  65                 	db	101
   574  00FE4C  6E                 	db	110
   575  00FE4D  65                 	db	101
   576  00FE4E  72                 	db	114
   577  00FE4F  73                 	db	115
   578  00FE50  20                 	db	32
   579  00FE51  69                 	db	105
   580  00FE52  6E                 	db	110
   581  00FE53  20                 	db	32
   582  00FE54  43                 	db	67
   583  00FE55  78                 	db	120
   584  00FE56  0A                 	db	10
   585  00FE57  2A                 	db	42
   586  00FE58  3C                 	db	60
   587  00FE59  2D                 	db	45
   588  00FE5A  28                 	db	40
   589  00FE5B  42                 	db	66
   590  00FE5C  4E                 	db	78
   591  00FE5D  53                 	db	83
   592  00FE5E  57                 	db	87
   593  00FE5F  29                 	db	41
   594  00FE60  20                 	db	32
   595  00FE61  20                 	db	32
   596  00FE62  20                 	db	32
   597  00FE63  20                 	db	32
   598  00FE64  2D                 	db	45
   599  00FE65  3E                 	db	62
   600  00FE66  23                 	db	35
   601  00FE67  00                 	db	0
   602  00FE68  48                 	db	72
   603  00FE69  6F                 	db	111
   604  00FE6A  77                 	db	119
   605  00FE6B  20                 	db	32
   606  00FE6C  6D                 	db	109
   607  00FE6D  61                 	db	97
   608  00FE6E  6E                 	db	110
   609  00FE6F  79                 	db	121
   610  00FE70  20                 	db	32
   611  00FE71  73                 	db	115
   612  00FE72  65                 	db	101
   613  00FE73  74                 	db	116
   614  00FE74  73                 	db	115
   615  00FE75  3F                 	db	63
   616  00FE76  0A                 	db	10
   617  00FE77  2A                 	db	42
   618  00FE78  3C                 	db	60
   619  00FE79  2D                 	db	45
   620  00FE7A  20                 	db	32
   621  00FE7B  20                 	db	32
   622  00FE7C  28                 	db	40
   623  00FE7D  31                 	db	49
   624  00FE7E  2D                 	db	45
   625  00FE7F  34                 	db	52
   626  00FE80  29                 	db	41
   627  00FE81  20                 	db	32
   628  00FE82  20                 	db	32
   629  00FE83  20                 	db	32
   630  00FE84  20                 	db	32
   631  00FE85  20                 	db	32
   632  00FE86  00                 	db	0
   633  00FE87  00                 	db	0
   634  00FE88  00                 	db	0
   635  00FE89  43                 	db	67
   636  00FE8A  6F                 	db	111
   637  00FE8B  6E                 	db	110
   638  00FE8C  66                 	db	102
   639  00FE8D  69                 	db	105
   640  00FE8E  72                 	db	114
   641  00FE8F  6D                 	db	109
   642  00FE90  3F                 	db	63
   643  00FE91  0A                 	db	10
   644  00FE92  2A                 	db	42
   645  00FE93  3C                 	db	60
   646  00FE94  2D                 	db	45
   647  00FE95  20                 	db	32
   648  00FE96  20                 	db	32
   649  00FE97  28                 	db	40
   650  00FE98  41                 	db	65
   651  00FE99  3A                 	db	58
   652  00FE9A  59                 	db	89
   653  00FE9B  2F                 	db	47
   654  00FE9C  42                 	db	66
   655  00FE9D  3A                 	db	58
   656  00FE9E  4E                 	db	78
   657  00FE9F  29                 	db	41
   658  00FEA0  20                 	db	32
   659  00FEA1  00                 	db	0
   660  00FEA2  00                 	db	0
   661  00FEA3  00                 	db	0
   662  00FEA4  00                 	db	0
   663  00FEA5  00                 	db	0
   664  00FEA6  00                 	db	0
   665  00FEA7  00                 	db	0
   666  00FEA8  00                 	db	0
   667  00FEA9  00                 	db	0
   668  00FEAA                     __end_of_inputEntryQuestions:
   669                           	opt stack 0
   670  00FEAA                     _fastenerMatrix:
   671                           	opt stack 0
   672  00FEAA  00                 	db	0
   673  00FEAB  00                 	db	0
   674  00FEAC  00                 	db	0
   675  00FEAD  00                 	db	0
   676  00FEAE  01                 	db	1
   677  00FEAF  00                 	db	0
   678  00FEB0  00                 	db	0
   679  00FEB1  00                 	db	0
   680  00FEB2  00                 	db	0
   681  00FEB3  01                 	db	1
   682  00FEB4  00                 	db	0
   683  00FEB5  00                 	db	0
   684  00FEB6  00                 	db	0
   685  00FEB7  00                 	db	0
   686  00FEB8  01                 	db	1
   687  00FEB9  00                 	db	0
   688  00FEBA  00                 	db	0
   689  00FEBB  00                 	db	0
   690  00FEBC  00                 	db	0
   691  00FEBD  01                 	db	1
   692  00FEBE  01                 	db	1
   693  00FEBF  01                 	db	1
   694  00FEC0  00                 	db	0
   695  00FEC1  00                 	db	0
   696  00FEC2  01                 	db	1
   697  00FEC3  00                 	db	0
   698  00FEC4  01                 	db	1
   699  00FEC5  00                 	db	0
   700  00FEC6  01                 	db	1
   701  00FEC7  00                 	db	0
   702  00FEC8  00                 	db	0
   703  00FEC9  01                 	db	1
   704  00FECA  02                 	db	2
   705  00FECB  01                 	db	1
   706  00FECC  00                 	db	0
   707  00FECD  00                 	db	0
   708  00FECE  02                 	db	2
   709  00FECF  00                 	db	0
   710  00FED0  01                 	db	1
   711  00FED1  00                 	db	0
   712  00FED2  02                 	db	2
   713  00FED3  00                 	db	0
   714  00FED4  00                 	db	0
   715  00FED5  01                 	db	1
   716  00FED6  01                 	db	1
   717  00FED7  01                 	db	1
   718  00FED8  00                 	db	0
   719  00FED9  01                 	db	1
   720  00FEDA  01                 	db	1
   721  00FEDB  00                 	db	0
   722  00FEDC  01                 	db	1
   723  00FEDD  01                 	db	1
   724  00FEDE  01                 	db	1
   725  00FEDF  00                 	db	0
   726  00FEE0  00                 	db	0
   727  00FEE1  02                 	db	2
   728  00FEE2  01                 	db	1
   729  00FEE3  01                 	db	1
   730  00FEE4  00                 	db	0
   731  00FEE5  02                 	db	2
   732  00FEE6  01                 	db	1
   733  00FEE7  00                 	db	0
   734  00FEE8  01                 	db	1
   735  00FEE9  02                 	db	2
   736  00FEEA  02                 	db	2
   737  00FEEB  00                 	db	0
   738  00FEEC  01                 	db	1
   739  00FEED  01                 	db	1
   740  00FEEE  02                 	db	2
   741  00FEEF  01                 	db	1
   742  00FEF0  00                 	db	0
   743  00FEF1  01                 	db	1
   744  00FEF2  01                 	db	1
   745  00FEF3  02                 	db	2
   746  00FEF4  00                 	db	0
   747  00FEF5  01                 	db	1
   748  00FEF6  01                 	db	1
   749  00FEF7  03                 	db	3
   750  00FEF8  00                 	db	0
   751  00FEF9  00                 	db	0
   752  00FEFA  01                 	db	1
   753  00FEFB  00                 	db	0
   754  00FEFC  00                 	db	0
   755  00FEFD  03                 	db	3
   756  00FEFE                     __end_of_fastenerMatrix:
   757                           	opt stack 0
   758  0000                     _PORTB	set	3969
   759  0000                     _PORTBbits	set	3969
   760  0000                     _INTCONbits	set	4082
   761  0000                     _LATDbits	set	3980
   762  0000                     _SSPBUF	set	4041
   763  0000                     _SSPCON2bits	set	4037
   764  0000                     _SSPADD	set	4040
   765  0000                     _SSPCON2	set	4037
   766  0000                     _SSPCON1	set	4038
   767  0000                     _SSPSTAT	set	4039
   768  0000                     _TRISCbits	set	3988
   769  0000                     _SSPCON1bits	set	4038
   770  0000                     _TRISE	set	3990
   771  0000                     _TRISD	set	3989
   772  0000                     _TRISC	set	3988
   773  0000                     _TRISB	set	3987
   774  0000                     _TRISA	set	3986
   775  0000                     _LATE	set	3981
   776  0000                     _LATD	set	3980
   777  0000                     _LATC	set	3979
   778  0000                     _LATB	set	3978
   779  0000                     _LATA	set	3977
   780  0000                     _PORTAbits	set	3968
   781  0000                     _LATCbits	set	3979
   782  0000                     _LATBbits	set	3978
   783  00FEFE  30                 	db	48	;'0'
   784  00FEFF  3A                 	db	58	;':'
   785  00FF00  53                 	db	83	;'S'
   786  00FF01  6C                 	db	108	;'l'
   787  00FF02  65                 	db	101	;'e'
   788  00FF03  65                 	db	101	;'e'
   789  00FF04  70                 	db	112	;'p'
   790  00FF05  20                 	db	32
   791  00FF06  31                 	db	49	;'1'
   792  00FF07  3A                 	db	58	;':'
   793  00FF08  42                 	db	66	;'B'
   794  00FF09  65                 	db	101	;'e'
   795  00FF0A  67                 	db	103	;'g'
   796  00FF0B  69                 	db	105	;'i'
   797  00FF0C  6E                 	db	110	;'n'
   798  00FF0D  20                 	db	32
   799  00FF0E  0A                 	db	10
   800  00FF0F  32                 	db	50	;'2'
   801  00FF10  3A                 	db	58	;':'
   802  00FF11  20                 	db	32
   803  00FF12  56                 	db	86	;'V'
   804  00FF13  69                 	db	105	;'i'
   805  00FF14  65                 	db	101	;'e'
   806  00FF15  77                 	db	119	;'w'
   807  00FF16  20                 	db	32
   808  00FF17  4C                 	db	76	;'L'
   809  00FF18  6F                 	db	111	;'o'
   810  00FF19  67                 	db	103	;'g'
   811  00FF1A  73                 	db	115	;'s'
   812  00FF1B  00                 	db	0
   813  00FF1C  4E                 	db	78	;'N'
   814  00FF1D  6F                 	db	111	;'o'
   815  00FF1E  74                 	db	116	;'t'
   816  00FF1F  20                 	db	32
   817  00FF20  74                 	db	116	;'t'
   818  00FF21  68                 	db	104	;'h'
   819  00FF22  65                 	db	101	;'e'
   820  00FF23  72                 	db	114	;'r'
   821  00FF24  65                 	db	101	;'e'
   822  00FF25  20                 	db	32
   823  00FF26  79                 	db	121	;'y'
   824  00FF27  65                 	db	101	;'e'
   825  00FF28  74                 	db	116	;'t'
   826  00FF29  0A                 	db	10
   827  00FF2A  2A                 	db	42
   828  00FF2B  20                 	db	32
   829  00FF2C  74                 	db	116	;'t'
   830  00FF2D  6F                 	db	111	;'o'
   831  00FF2E  20                 	db	32
   832  00FF2F  72                 	db	114	;'r'
   833  00FF30  65                 	db	101	;'e'
   834  00FF31  74                 	db	116	;'t'
   835  00FF32  75                 	db	117	;'u'
   836  00FF33  72                 	db	114	;'r'
   837  00FF34  6E                 	db	110	;'n'
   838  00FF35  00                 	db	0
   839  00FF36  53                 	db	83	;'S'
   840  00FF37  74                 	db	116	;'t'
   841  00FF38  61                 	db	97	;'a'
   842  00FF39  72                 	db	114	;'r'
   843  00FF3A  74                 	db	116	;'t'
   844  00FF3B  65                 	db	101	;'e'
   845  00FF3C  64                 	db	100	;'d'
   846  00FF3D  20                 	db	32
   847  00FF3E  69                 	db	105	;'i'
   848  00FF3F  6E                 	db	110	;'n'
   849  00FF40  70                 	db	112	;'p'
   850  00FF41  75                 	db	117	;'u'
   851  00FF42  74                 	db	116	;'t'
   852  00FF43  20                 	db	32
   853  00FF44  65                 	db	101	;'e'
   854  00FF45  6E                 	db	110	;'n'
   855  00FF46  74                 	db	116	;'t'
   856  00FF47  72                 	db	114	;'r'
   857  00FF48  79                 	db	121	;'y'
   858  00FF49  2C                 	db	44
   859  00FF4A  20                 	db	32
   860  00FF4B  68                 	db	104	;'h'
   861  00FF4C  69                 	db	105	;'i'
   862  00FF4D  00                 	db	0
   863  00FF4E  00                 	db	0
   864  00FF4F                     STR_10:
   865  00FF4F  01                 	db	1
   866  00FF50  44                 	db	68	;'D'
   867  00FF51  6F                 	db	111	;'o'
   868  00FF52  6E                 	db	110	;'n'
   869  00FF53  65                 	db	101	;'e'
   870  00FF54  20                 	db	32
   871  00FF55  63                 	db	99	;'c'
   872  00FF56  6F                 	db	111	;'o'
   873  00FF57  6D                 	db	109	;'m'
   874  00FF58  70                 	db	112	;'p'
   875  00FF59  61                 	db	97	;'a'
   876  00FF5A  72                 	db	114	;'r'
   877  00FF5B  74                 	db	116	;'t'
   878  00FF5C  6D                 	db	109	;'m'
   879  00FF5D  65                 	db	101	;'e'
   880  00FF5E  6E                 	db	110	;'n'
   881  00FF5F  74                 	db	116	;'t'
   882  00FF60  00                 	db	0
   883  00FF61  00                 	db	0
   884  00FF62  50                 	db	80	;'P'
   885  00FF63  72                 	db	114	;'r'
   886  00FF64  65                 	db	101	;'e'
   887  00FF65  73                 	db	115	;'s'
   888  00FF66  73                 	db	115	;'s'
   889  00FF67  20                 	db	32
   890  00FF68  31                 	db	49	;'1'
   891  00FF69  20                 	db	32
   892  00FF6A  74                 	db	116	;'t'
   893  00FF6B  6F                 	db	111	;'o'
   894  00FF6C  20                 	db	32
   895  00FF6D  62                 	db	98	;'b'
   896  00FF6E  65                 	db	101	;'e'
   897  00FF6F  67                 	db	103	;'g'
   898  00FF70  69                 	db	105	;'i'
   899  00FF71  6E                 	db	110	;'n'
   900  00FF72  00                 	db	0
   901  00FF73                     STR_8:
   902  00FF73  53                 	db	83	;'S'
   903  00FF74  70                 	db	112	;'p'
   904  00FF75  61                 	db	97	;'a'
   905  00FF76  63                 	db	99	;'c'
   906  00FF77  65                 	db	101	;'e'
   907  00FF78  72                 	db	114	;'r'
   908  00FF79  20                 	db	32
   909  00FF7A  43                 	db	67	;'C'
   910  00FF7B  6F                 	db	111	;'o'
   911  00FF7C  75                 	db	117	;'u'
   912  00FF7D  6E                 	db	110	;'n'
   913  00FF7E  74                 	db	116	;'t'
   914  00FF7F  65                 	db	101	;'e'
   915  00FF80  64                 	db	100	;'d'
   916  00FF81  00                 	db	0
   917  00FF82  00                 	db	0
   918  00FF83                     STR_9:
   919  00FF83  57                 	db	87	;'W'
   920  00FF84  61                 	db	97	;'a'
   921  00FF85  73                 	db	115	;'s'
   922  00FF86  68                 	db	104	;'h'
   923  00FF87  65                 	db	101	;'e'
   924  00FF88  72                 	db	114	;'r'
   925  00FF89  20                 	db	32
   926  00FF8A  43                 	db	67	;'C'
   927  00FF8B  6F                 	db	111	;'o'
   928  00FF8C  75                 	db	117	;'u'
   929  00FF8D  6E                 	db	110	;'n'
   930  00FF8E  74                 	db	116	;'t'
   931  00FF8F  65                 	db	101	;'e'
   932  00FF90  64                 	db	100	;'d'
   933  00FF91  00                 	db	0
   934  00FF92  00                 	db	0
   935  00FF93                     STR_12:
   936  00FF93  54                 	db	84	;'T'
   937  00FF94  68                 	db	104	;'h'
   938  00FF95  69                 	db	105	;'i'
   939  00FF96  73                 	db	115	;'s'
   940  00FF97  20                 	db	32
   941  00FF98  69                 	db	105	;'i'
   942  00FF99  73                 	db	115	;'s'
   943  00FF9A  20                 	db	32
   944  00FF9B  61                 	db	97	;'a'
   945  00FF9C  20                 	db	32
   946  00FF9D  74                 	db	116	;'t'
   947  00FF9E  65                 	db	101	;'e'
   948  00FF9F  73                 	db	115	;'s'
   949  00FFA0  74                 	db	116	;'t'
   950  00FFA1  00                 	db	0
   951  00FFA2  00                 	db	0
   952  00FFA3                     STR_6:
   953  00FFA3  01                 	db	1
   954  00FFA4  42                 	db	66	;'B'
   955  00FFA5  6F                 	db	111	;'o'
   956  00FFA6  6C                 	db	108	;'l'
   957  00FFA7  74                 	db	116	;'t'
   958  00FFA8  20                 	db	32
   959  00FFA9  43                 	db	67	;'C'
   960  00FFAA  6F                 	db	111	;'o'
   961  00FFAB  75                 	db	117	;'u'
   962  00FFAC  6E                 	db	110	;'n'
   963  00FFAD  74                 	db	116	;'t'
   964  00FFAE  65                 	db	101	;'e'
   965  00FFAF  64                 	db	100	;'d'
   966  00FFB0  00                 	db	0
   967  00FFB1  00                 	db	0
   968  00FFB2                     STR_7:
   969  00FFB2  4E                 	db	78	;'N'
   970  00FFB3  75                 	db	117	;'u'
   971  00FFB4  74                 	db	116	;'t'
   972  00FFB5  20                 	db	32
   973  00FFB6  43                 	db	67	;'C'
   974  00FFB7  6F                 	db	111	;'o'
   975  00FFB8  75                 	db	117	;'u'
   976  00FFB9  6E                 	db	110	;'n'
   977  00FFBA  74                 	db	116	;'t'
   978  00FFBB  65                 	db	101	;'e'
   979  00FFBC  64                 	db	100	;'d'
   980  00FFBD  00                 	db	0
   981  00FFBE  00                 	db	0
   982  00FFBF                     STR_3:
   983  00FFBF  4E                 	db	78	;'N'
   984  00FFC0  6F                 	db	111	;'o'
   985  00FFC1  77                 	db	119	;'w'
   986  00FFC2  20                 	db	32
   987  00FFC3  63                 	db	99	;'c'
   988  00FFC4  6F                 	db	111	;'o'
   989  00FFC5  75                 	db	117	;'u'
   990  00FFC6  6E                 	db	110	;'n'
   991  00FFC7  74                 	db	116	;'t'
   992  00FFC8  69                 	db	105	;'i'
   993  00FFC9  6E                 	db	110	;'n'
   994  00FFCA  67                 	db	103	;'g'
   995  00FFCB  00                 	db	0
   996  00FFCC  43                 	db	67	;'C'
   997  00FFCD  25                 	db	37
   998  00FFCE  64                 	db	100	;'d'
   999  00FFCF  3A                 	db	58	;':'
  1000  00FFD0  20                 	db	32
  1001  00FFD1  25                 	db	37
  1002  00FFD2  73                 	db	115	;'s'
  1003  00FFD3  20                 	db	32
  1004  00FFD4  78                 	db	120	;'x'
  1005  00FFD5  25                 	db	37
  1006  00FFD6  64                 	db	100	;'d'
  1007  00FFD7  00                 	db	0
  1008  00FFD8                     STR_2:
  1009  00FFD8  53                 	db	83	;'S'
  1010  00FFD9  74                 	db	116	;'t'
  1011  00FFDA  61                 	db	97	;'a'
  1012  00FFDB  72                 	db	114	;'r'
  1013  00FFDC  74                 	db	116	;'t'
  1014  00FFDD  69                 	db	105	;'i'
  1015  00FFDE  6E                 	db	110	;'n'
  1016  00FFDF  67                 	db	103	;'g'
  1017  00FFE0  00                 	db	0
  1018  00FFE1  00                 	db	0
  1019  00FFE2  53                 	db	83	;'S'
  1020  00FFE3  75                 	db	117	;'u'
  1021  00FFE4  6D                 	db	109	;'m'
  1022  00FFE5  6D                 	db	109	;'m'
  1023  00FFE6  61                 	db	97	;'a'
  1024  00FFE7  72                 	db	114	;'r'
  1025  00FFE8  79                 	db	121	;'y'
  1026  00FFE9  3A                 	db	58	;':'
  1027  00FFEA  00                 	db	0
  1028  00FFEB                     STR_11:
  1029  00FFEB  43                 	db	67	;'C'
  1030  00FFEC  6F                 	db	111	;'o'
  1031  00FFED  75                 	db	117	;'u'
  1032  00FFEE  6E                 	db	110	;'n'
  1033  00FFEF  74                 	db	116	;'t'
  1034  00FFF0  69                 	db	105	;'i'
  1035  00FFF1  6E                 	db	110	;'n'
  1036  00FFF2  67                 	db	103	;'g'
  1037  00FFF3  00                 	db	0
  1038  00FFF4                     STR_18:
  1039  00FFF4  28                 	db	40
  1040  00FFF5  6E                 	db	110	;'n'
  1041  00FFF6  75                 	db	117	;'u'
  1042  00FFF7  6C                 	db	108	;'l'
  1043  00FFF8  6C                 	db	108	;'l'
  1044  00FFF9  29                 	db	41
  1045  00FFFA  00                 	db	0
  1046  00FFFB                     STR_4:
  1047  00FFFB  25                 	db	37
  1048  00FFFC  6C                 	db	108	;'l'
  1049  00FFFD  69                 	db	105	;'i'
  1050  00FFFE  00                 	db	0
  1051  0000                     
  1052                           ; #config settings
  1053  00FFFF  00                 	db	0	; dummy byte at the end
  1054  0000                     
  1055                           	psect	cinit
  1056  00EF16                     __pcinit:
  1057                           	opt stack 0
  1058  00EF16                     start_initialization:
  1059                           	opt stack 0
  1060  00EF16                     __initialization:
  1061                           	opt stack 0
  1062                           
  1063                           ; Initialize objects allocated to BANK1 (105 bytes)
  1064                           ; load TBLPTR registers with __pidataBANK1
  1065  00EF16  0E6F               	movlw	low __pidataBANK1
  1066  00EF18  6EF6               	movwf	tblptrl,c
  1067  00EF1A  0EF0               	movlw	high __pidataBANK1
  1068  00EF1C  6EF7               	movwf	tblptrh,c
  1069  00EF1E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1070  00EF20  6EF8               	movwf	tblptru,c
  1071  00EF22  EE01  F000         	lfsr	0,__pdataBANK1
  1072  00EF26  EE10 F069          	lfsr	1,105
  1073  00EF2A                     copy_data0:
  1074  00EF2A  0009               	tblrd		*+
  1075  00EF2C  CFF5 FFEE          	movff	tablat,postinc0
  1076  00EF30  50E5               	movf	postdec1,w,c
  1077  00EF32  50E1               	movf	fsr1l,w,c
  1078  00EF34  E1FA               	bnz	copy_data0
  1079                           
  1080                           ; Initialize objects allocated to COMRAM (2 bytes)
  1081                           ; load TBLPTR registers with __pidataCOMRAM
  1082  00EF36  0EFE               	movlw	low __pidataCOMRAM
  1083  00EF38  6EF6               	movwf	tblptrl,c
  1084  00EF3A  0EED               	movlw	high __pidataCOMRAM
  1085  00EF3C  6EF7               	movwf	tblptrh,c
  1086  00EF3E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1087  00EF40  6EF8               	movwf	tblptru,c
  1088  00EF42  0009               	tblrd		*+	;fetch initializer
  1089  00EF44  CFF5 F06B          	movff	tablat,__pdataCOMRAM
  1090  00EF48  0009               	tblrd		*+	;fetch initializer
  1091  00EF4A  CFF5 F06C          	movff	tablat,__pdataCOMRAM+1
  1092                           
  1093                           ; Clear objects allocated to COMRAM (43 bytes)
  1094  00EF4E  EE00  F040         	lfsr	0,__pbssCOMRAM
  1095  00EF52  0E2B               	movlw	43
  1096  00EF54                     clear_0:
  1097  00EF54  6AEE               	clrf	postinc0,c
  1098  00EF56  06E8               	decf	wreg,f,c
  1099  00EF58  E1FD               	bnz	clear_0
  1100  00EF5A                     end_of_initialization:
  1101                           	opt stack 0
  1102  00EF5A                     __end_of__initialization:
  1103                           	opt stack 0
  1104  00EF5A  0100               	movlb	0
  1105  00EF5C  EFA9  F079         	goto	_main	;jump to C main() function
  1106                           tblptru	equ	0xFF8
  1107                           tblptrh	equ	0xFF7
  1108                           tblptrl	equ	0xFF6
  1109                           tablat	equ	0xFF5
  1110                           postinc0	equ	0xFEE
  1111                           wreg	equ	0xFE8
  1112                           postdec1	equ	0xFE5
  1113                           fsr1l	equ	0xFE1
  1114                           
  1115                           	psect	bssCOMRAM
  1116  000040                     __pbssCOMRAM:
  1117                           	opt stack 0
  1118  000040                     _params:
  1119                           	opt stack 0
  1120  000040                     	ds	26
  1121  00005A                     _extras:
  1122                           	opt stack 0
  1123  00005A                     	ds	8
  1124  000062                     _dispensed:
  1125                           	opt stack 0
  1126  000062                     	ds	8
  1127  00006A                     _LCDinterruptState:
  1128                           	opt stack 0
  1129  00006A                     	ds	1
  1130                           tblptru	equ	0xFF8
  1131                           tblptrh	equ	0xFF7
  1132                           tblptrl	equ	0xFF6
  1133                           tablat	equ	0xFF5
  1134                           postinc0	equ	0xFEE
  1135                           wreg	equ	0xFE8
  1136                           postdec1	equ	0xFE5
  1137                           fsr1l	equ	0xFE1
  1138                           
  1139                           	psect	dataCOMRAM
  1140  00006B                     __pdataCOMRAM:
  1141                           	opt stack 0
  1142  00006B                     inputEntry@F3149:
  1143                           	opt stack 0
  1144  00006B                     	ds	2
  1145                           tblptru	equ	0xFF8
  1146                           tblptrh	equ	0xFF7
  1147                           tblptrl	equ	0xFF6
  1148                           tablat	equ	0xFF5
  1149                           postinc0	equ	0xFEE
  1150                           wreg	equ	0xFE8
  1151                           postdec1	equ	0xFE5
  1152                           fsr1l	equ	0xFE1
  1153                           
  1154                           	psect	dataBANK1
  1155  000100                     __pdataBANK1:
  1156                           	opt stack 0
  1157  000100                     _fSLookup:
  1158                           	opt stack 0
  1159  000100                     	ds	105
  1160                           tblptru	equ	0xFF8
  1161                           tblptrh	equ	0xFF7
  1162                           tblptrl	equ	0xFF6
  1163                           tablat	equ	0xFF5
  1164                           postinc0	equ	0xFEE
  1165                           wreg	equ	0xFE8
  1166                           postdec1	equ	0xFE5
  1167                           fsr1l	equ	0xFE1
  1168                           
  1169                           	psect	cstackBANK0
  1170  000080                     __pcstackBANK0:
  1171                           	opt stack 0
  1172  000080                     packageCompartment@currTimeString:
  1173                           	opt stack 0
  1174                           
  1175                           ; 33 bytes @ 0x0
  1176  000080                     	ds	33
  1177  0000A1                     packageCompartment@b:
  1178                           	opt stack 0
  1179                           
  1180                           ; 1 bytes @ 0x21
  1181  0000A1                     	ds	1
  1182  0000A2                     packageCompartment@timeB:
  1183                           	opt stack 0
  1184                           
  1185                           ; 4 bytes @ 0x22
  1186  0000A2                     	ds	4
  1187  0000A6                     packageCompartment@timeN:
  1188                           	opt stack 0
  1189                           
  1190                           ; 4 bytes @ 0x26
  1191  0000A6                     	ds	4
  1192  0000AA                     packageCompartment@timeS:
  1193                           	opt stack 0
  1194                           
  1195                           ; 4 bytes @ 0x2A
  1196  0000AA                     	ds	4
  1197  0000AE                     packageCompartment@timeW:
  1198                           	opt stack 0
  1199                           
  1200                           ; 4 bytes @ 0x2E
  1201  0000AE                     	ds	4
  1202  0000B2                     packageCompartment@numB:
  1203                           	opt stack 0
  1204                           
  1205                           ; 2 bytes @ 0x32
  1206  0000B2                     	ds	2
  1207  0000B4                     packageCompartment@numN:
  1208                           	opt stack 0
  1209                           
  1210                           ; 2 bytes @ 0x34
  1211  0000B4                     	ds	2
  1212  0000B6                     packageCompartment@numS:
  1213                           	opt stack 0
  1214                           
  1215                           ; 2 bytes @ 0x36
  1216  0000B6                     	ds	2
  1217  0000B8                     packageCompartment@numW:
  1218                           	opt stack 0
  1219                           
  1220                           ; 2 bytes @ 0x38
  1221  0000B8                     	ds	2
  1222  0000BA                     packageCompartment@doneB:
  1223                           	opt stack 0
  1224                           
  1225                           ; 2 bytes @ 0x3A
  1226  0000BA                     	ds	2
  1227  0000BC                     packageCompartment@doneN:
  1228                           	opt stack 0
  1229                           
  1230                           ; 2 bytes @ 0x3C
  1231  0000BC                     	ds	2
  1232  0000BE                     packageCompartment@doneS:
  1233                           	opt stack 0
  1234                           
  1235                           ; 2 bytes @ 0x3E
  1236  0000BE                     	ds	2
  1237  0000C0                     packageCompartment@doneW:
  1238                           	opt stack 0
  1239                           
  1240                           ; 2 bytes @ 0x40
  1241  0000C0                     	ds	2
  1242  0000C2                     packageCompartment@resolution:
  1243                           	opt stack 0
  1244                           
  1245                           ; 1 bytes @ 0x42
  1246  0000C2                     	ds	1
  1247  0000C3                     packageCompartment@currTime:
  1248                           	opt stack 0
  1249                           
  1250                           ; 4 bytes @ 0x43
  1251  0000C3                     	ds	4
  1252                           tblptru	equ	0xFF8
  1253                           tblptrh	equ	0xFF7
  1254                           tblptrl	equ	0xFF6
  1255                           tablat	equ	0xFF5
  1256                           postinc0	equ	0xFEE
  1257                           wreg	equ	0xFE8
  1258                           postdec1	equ	0xFE5
  1259                           fsr1l	equ	0xFE1
  1260                           
  1261                           	psect	cstackCOMRAM
  1262  000001                     __pcstackCOMRAM:
  1263                           	opt stack 0
  1264  000001                     ??_I2C_Master_Wait:
  1265  000001                     ?___wmul:
  1266                           	opt stack 0
  1267  000001                     ?___lldiv:
  1268                           	opt stack 0
  1269  000001                     lcdNibble@temp:
  1270                           	opt stack 0
  1271  000001                     ___wmul@multiplier:
  1272                           	opt stack 0
  1273  000001                     ___lldiv@dividend:
  1274                           	opt stack 0
  1275                           
  1276                           ; 4 bytes @ 0x0
  1277  000001                     	ds	1
  1278  000002                     I2C_Master_Read@ackBit:
  1279                           	opt stack 0
  1280  000002                     lcdNibble@data:
  1281                           	opt stack 0
  1282  000002                     I2C_Master_Write@byteToWrite:
  1283                           	opt stack 0
  1284                           
  1285                           ; 2 bytes @ 0x1
  1286  000002                     	ds	1
  1287  000003                     I2C_Master_Read@receivedByte:
  1288                           	opt stack 0
  1289  000003                     lcdInst@data:
  1290                           	opt stack 0
  1291  000003                     putch@data:
  1292                           	opt stack 0
  1293  000003                     ___wmul@multiplicand:
  1294                           	opt stack 0
  1295                           
  1296                           ; 2 bytes @ 0x2
  1297  000003                     	ds	1
  1298  000004                     ??_initLCD:
  1299  000004                     I2C_Send@data:
  1300                           	opt stack 0
  1301  000004                     RTC_getTime@time:
  1302                           	opt stack 0
  1303                           
  1304                           ; 2 bytes @ 0x3
  1305  000004                     	ds	1
  1306  000005                     ___wmul@product:
  1307                           	opt stack 0
  1308  000005                     ___lldiv@divisor:
  1309                           	opt stack 0
  1310                           
  1311                           ; 4 bytes @ 0x4
  1312  000005                     	ds	1
  1313  000006                     ??_I2C_Send:
  1314  000006                     RTC_getTime@i:
  1315                           	opt stack 0
  1316                           
  1317                           ; 1 bytes @ 0x5
  1318  000006                     	ds	1
  1319  000007                     ?_RTC_getSeconds:
  1320                           	opt stack 0
  1321                           
  1322                           ; 4 bytes @ 0x6
  1323  000007                     	ds	2
  1324  000009                     I2C_Send@address:
  1325                           	opt stack 0
  1326  000009                     ___lldiv@quotient:
  1327                           	opt stack 0
  1328                           
  1329                           ; 4 bytes @ 0x8
  1330  000009                     	ds	1
  1331  00000A                     I2C_Send@i:
  1332                           	opt stack 0
  1333                           
  1334                           ; 2 bytes @ 0x9
  1335  00000A                     	ds	1
  1336  00000B                     ??_RTC_getSeconds:
  1337                           
  1338                           ; 1 bytes @ 0xA
  1339  00000B                     	ds	2
  1340  00000D                     ___lldiv@counter:
  1341                           	opt stack 0
  1342  00000D                     RTC_getSeconds@time:
  1343                           	opt stack 0
  1344                           
  1345                           ; 7 bytes @ 0xC
  1346  00000D                     	ds	1
  1347  00000E                     ?___llmod:
  1348                           	opt stack 0
  1349  00000E                     I2C_Master_Init@clockFreq:
  1350                           	opt stack 0
  1351  00000E                     ___llmod@dividend:
  1352                           	opt stack 0
  1353                           
  1354                           ; 4 bytes @ 0xD
  1355  00000E                     	ds	4
  1356  000012                     ??_I2C_Master_Init:
  1357  000012                     ___llmod@divisor:
  1358                           	opt stack 0
  1359                           
  1360                           ; 4 bytes @ 0x11
  1361  000012                     	ds	2
  1362  000014                     RTC_getSeconds@seconds:
  1363                           	opt stack 0
  1364                           
  1365                           ; 4 bytes @ 0x13
  1366  000014                     	ds	2
  1367  000016                     ___llmod@counter:
  1368                           	opt stack 0
  1369                           
  1370                           ; 1 bytes @ 0x15
  1371  000016                     	ds	1
  1372  000017                     ?__doprnt:
  1373                           	opt stack 0
  1374  000017                     __doprnt@pb:
  1375                           	opt stack 0
  1376                           
  1377                           ; 2 bytes @ 0x16
  1378  000017                     	ds	2
  1379  000019                     __doprnt@f:
  1380                           	opt stack 0
  1381                           
  1382                           ; 2 bytes @ 0x18
  1383  000019                     	ds	2
  1384  00001B                     __doprnt@ap:
  1385                           	opt stack 0
  1386                           
  1387                           ; 2 bytes @ 0x1A
  1388  00001B                     	ds	2
  1389  00001D                     ??__doprnt:
  1390                           
  1391                           ; 1 bytes @ 0x1C
  1392  00001D                     	ds	2
  1393  00001F                     __doprnt@prec:
  1394                           	opt stack 0
  1395                           
  1396                           ; 2 bytes @ 0x1E
  1397  00001F                     	ds	2
  1398  000021                     __doprnt@flag:
  1399                           	opt stack 0
  1400                           
  1401                           ; 1 bytes @ 0x20
  1402  000021                     	ds	1
  1403  000022                     __doprnt@val:
  1404                           	opt stack 0
  1405                           
  1406                           ; 4 bytes @ 0x21
  1407  000022                     	ds	4
  1408  000026                     __doprnt@cp:
  1409                           	opt stack 0
  1410                           
  1411                           ; 2 bytes @ 0x25
  1412  000026                     	ds	2
  1413  000028                     __doprnt@c:
  1414                           	opt stack 0
  1415                           
  1416                           ; 1 bytes @ 0x27
  1417  000028                     	ds	1
  1418  000029                     ?_printf:
  1419                           	opt stack 0
  1420  000029                     ?_sprintf:
  1421                           	opt stack 0
  1422  000029                     printf@f:
  1423                           	opt stack 0
  1424  000029                     sprintf@wh:
  1425                           	opt stack 0
  1426                           
  1427                           ; 2 bytes @ 0x28
  1428  000029                     	ds	2
  1429  00002B                     sprintf@f:
  1430                           	opt stack 0
  1431                           
  1432                           ; 2 bytes @ 0x2A
  1433  00002B                     	ds	6
  1434  000031                     printf@ap:
  1435                           	opt stack 0
  1436  000031                     sprintf@ap:
  1437                           	opt stack 0
  1438                           
  1439                           ; 2 bytes @ 0x30
  1440  000031                     	ds	2
  1441  000033                     printf@pb:
  1442                           	opt stack 0
  1443  000033                     sprintf@pb:
  1444                           	opt stack 0
  1445                           
  1446                           ; 4 bytes @ 0x32
  1447  000033                     	ds	4
  1448  000037                     packageCompartment@n:
  1449                           	opt stack 0
  1450                           
  1451                           ; 1 bytes @ 0x36
  1452  000037                     	ds	1
  1453  000038                     packageCompartment@s:
  1454                           	opt stack 0
  1455                           
  1456                           ; 1 bytes @ 0x37
  1457  000038                     	ds	1
  1458  000039                     packageCompartment@w:
  1459                           	opt stack 0
  1460                           
  1461                           ; 1 bytes @ 0x38
  1462  000039                     	ds	1
  1463  00003A                     ??_packageCompartment:
  1464                           
  1465                           ; 1 bytes @ 0x39
  1466  00003A                     	ds	5
  1467  00003F                     ??_main:
  1468                           
  1469                           ; 1 bytes @ 0x3E
  1470  00003F                     	ds	1
  1471                           tblptru	equ	0xFF8
  1472                           tblptrh	equ	0xFF7
  1473                           tblptrl	equ	0xFF6
  1474                           tablat	equ	0xFF5
  1475                           postinc0	equ	0xFEE
  1476                           wreg	equ	0xFE8
  1477                           postdec1	equ	0xFE5
  1478                           fsr1l	equ	0xFE1
  1479                           
  1480 ;;
  1481 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1482 ;;
  1483 ;; *************** function _main *****************
  1484 ;; Defined at:
  1485 ;;		line 377 in file "main.c"
  1486 ;; Parameters:    Size  Location     Type
  1487 ;;		None
  1488 ;; Auto vars:     Size  Location     Type
  1489 ;;		None
  1490 ;; Return value:  Size  Location     Type
  1491 ;;                  1    wreg      void 
  1492 ;; Registers used:
  1493 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1494 ;; Tracked objects:
  1495 ;;		On entry : 0/0
  1496 ;;		On exit  : 0/0
  1497 ;;		Unchanged: 0/0
  1498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1501 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1502 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1503 ;;Total ram usage:        1 bytes
  1504 ;; Hardware stack levels required when called:    5
  1505 ;; This function calls:
  1506 ;;		_I2C_Master_Init
  1507 ;;		_I2C_Send
  1508 ;;		_initLCD
  1509 ;;		_lcdInst
  1510 ;;		_packageCompartment
  1511 ;;		_printf
  1512 ;; This function is called by:
  1513 ;;		Startup code after reset
  1514 ;; This function uses a non-reentrant model
  1515 ;;
  1516                           
  1517                           	psect	text0
  1518  00F352                     __ptext0:
  1519                           	opt stack 0
  1520  00F352                     _main:
  1521                           	opt stack 26
  1522                           
  1523                           ;main.c: 382: LATA = 0x00;
  1524                           
  1525                           ;incstack = 0
  1526  00F352  0E00               	movlw	0
  1527  00F354  6E89               	movwf	3977,c	;volatile
  1528                           
  1529                           ;main.c: 383: LATB = 0x00;
  1530  00F356  0E00               	movlw	0
  1531  00F358  6E8A               	movwf	3978,c	;volatile
  1532                           
  1533                           ;main.c: 384: LATC = 0x00;
  1534  00F35A  0E00               	movlw	0
  1535  00F35C  6E8B               	movwf	3979,c	;volatile
  1536                           
  1537                           ;main.c: 385: LATD = 0x00;
  1538  00F35E  0E00               	movlw	0
  1539  00F360  6E8C               	movwf	3980,c	;volatile
  1540                           
  1541                           ;main.c: 386: LATE = 0x00;
  1542  00F362  0E00               	movlw	0
  1543  00F364  6E8D               	movwf	3981,c	;volatile
  1544                           
  1545                           ;main.c: 389: TRISA = 0xFF;
  1546  00F366  6892               	setf	3986,c	;volatile
  1547                           
  1548                           ;main.c: 390: TRISB = 0b11110111;
  1549  00F368  0EF7               	movlw	247
  1550  00F36A  6E93               	movwf	3987,c	;volatile
  1551                           
  1552                           ;main.c: 391: TRISC = 0x00;
  1553  00F36C  0E00               	movlw	0
  1554  00F36E  6E94               	movwf	3988,c	;volatile
  1555                           
  1556                           ;main.c: 392: TRISD = 0x00;
  1557  00F370  0E00               	movlw	0
  1558  00F372  6E95               	movwf	3989,c	;volatile
  1559                           
  1560                           ;main.c: 393: TRISE = 0x00;
  1561  00F374  0E00               	movlw	0
  1562  00F376  6E96               	movwf	3990,c	;volatile
  1563                           
  1564                           ;main.c: 396: I2C_Master_Init(100000);
  1565  00F378  0EA0               	movlw	160
  1566  00F37A  6E0E               	movwf	I2C_Master_Init@clockFreq,c
  1567  00F37C  0E86               	movlw	134
  1568  00F37E  6E0F               	movwf	I2C_Master_Init@clockFreq+1,c
  1569  00F380  0E01               	movlw	1
  1570  00F382  6E10               	movwf	I2C_Master_Init@clockFreq+2,c
  1571  00F384  0E00               	movlw	0
  1572  00F386  6E11               	movwf	I2C_Master_Init@clockFreq+3,c
  1573  00F388  ECD6  F077         	call	_I2C_Master_Init	;wreg free
  1574                           
  1575                           ;main.c: 398: initLCD();
  1576  00F38C  ECB0  F077         	call	_initLCD	;wreg free
  1577                           
  1578                           ;main.c: 400: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1579  00F390  0E01               	movlw	1
  1580  00F392  EC16  F077         	call	_lcdInst
  1581  00F396  0EC3               	movlw	195
  1582  00F398  6E3F               	movwf	??_main& (0+255),c
  1583  00F39A  0ECD               	movlw	205
  1584  00F39C                     u3047:
  1585  00F39C  2EE8               	decfsz	wreg,f,c
  1586  00F39E  D7FE               	bra	u3047
  1587  00F3A0  2E3F               	decfsz	??_main& (0+255),f,c
  1588  00F3A2  D7FC               	bra	u3047
  1589  00F3A4  F000               	nop	
  1590                           
  1591                           ;main.c: 401: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1592  00F3A6  0E80               	movlw	128
  1593  00F3A8  EC16  F077         	call	_lcdInst
  1594  00F3AC  0E41               	movlw	65
  1595  00F3AE  6E3F               	movwf	??_main& (0+255),c
  1596  00F3B0  0EEE               	movlw	238
  1597  00F3B2                     u3057:
  1598  00F3B2  2EE8               	decfsz	wreg,f,c
  1599  00F3B4  D7FE               	bra	u3057
  1600  00F3B6  2E3F               	decfsz	??_main& (0+255),f,c
  1601  00F3B8  D7FC               	bra	u3057
  1602  00F3BA  D000               	nop2	
  1603                           
  1604                           ;main.c: 405: printf("Counting");
  1605  00F3BC  0EEB               	movlw	low STR_11
  1606  00F3BE  6E29               	movwf	printf@f,c
  1607  00F3C0  0EFF               	movlw	high STR_11
  1608  00F3C2  6E2A               	movwf	printf@f+1,c
  1609  00F3C4  EC4F  F077         	call	_printf	;wreg free
  1610                           
  1611                           ;main.c: 406: I2C_Send(nanoAddr, "This is a test\0");
  1612  00F3C8  0E93               	movlw	low STR_12
  1613  00F3CA  6E04               	movwf	I2C_Send@data,c
  1614  00F3CC  0EFF               	movlw	high STR_12
  1615  00F3CE  6E05               	movwf	I2C_Send@data+1,c
  1616  00F3D0  0E3F               	movlw	low _nanoAddr
  1617  00F3D2  6EF6               	movwf	tblptrl,c
  1618  00F3D4                     	if	1	;There is more than 1 active tblptr byte
  1619  00F3D4  0EFD               	movlw	high _nanoAddr
  1620  00F3D6  6EF7               	movwf	tblptrh,c
  1621  00F3D8                     	endif
  1622  00F3D8                     	if	1	;There are 3 active tblptr bytes
  1623  00F3D8  0E00               	movlw	low (_nanoAddr shr (0+16))
  1624  00F3DA  6EF8               	movwf	tblptru,c
  1625  00F3DC                     	endif
  1626  00F3DC  0008               	tblrd		*
  1627  00F3DE  50F5               	movf	tablat,w,c
  1628  00F3E0  EC60  F079         	call	_I2C_Send
  1629                           
  1630                           ;main.c: 407: packageCompartment(4, 4, 4, 4);
  1631  00F3E4  0E04               	movlw	4
  1632  00F3E6  6E37               	movwf	packageCompartment@n,c
  1633  00F3E8  0E04               	movlw	4
  1634  00F3EA  6E38               	movwf	packageCompartment@s,c
  1635  00F3EC  0E04               	movlw	4
  1636  00F3EE  6E39               	movwf	packageCompartment@w,c
  1637  00F3F0  0E04               	movlw	4
  1638  00F3F2  ECFC  F079         	call	_packageCompartment
  1639  00F3F6                     l194:
  1640  00F3F6  D7FF               	goto	l194
  1641  00F3F8                     __end_of_main:
  1642                           	opt stack 0
  1643                           tblptru	equ	0xFF8
  1644                           tblptrh	equ	0xFF7
  1645                           tblptrl	equ	0xFF6
  1646                           tablat	equ	0xFF5
  1647                           postinc0	equ	0xFEE
  1648                           wreg	equ	0xFE8
  1649                           postdec1	equ	0xFE5
  1650                           fsr1l	equ	0xFE1
  1651                           
  1652 ;; *************** function _packageCompartment *****************
  1653 ;; Defined at:
  1654 ;;		line 224 in file "main.c"
  1655 ;; Parameters:    Size  Location     Type
  1656 ;;  b               1    wreg     unsigned char 
  1657 ;;  n               1   54[COMRAM] unsigned char 
  1658 ;;  s               1   55[COMRAM] unsigned char 
  1659 ;;  w               1   56[COMRAM] unsigned char 
  1660 ;; Auto vars:     Size  Location     Type
  1661 ;;  b               1   33[BANK0 ] unsigned char 
  1662 ;;  currTimeStri   33    0[BANK0 ] unsigned char [33]
  1663 ;;  currTime        4   67[BANK0 ] long 
  1664 ;;  timeW           4   46[BANK0 ] long 
  1665 ;;  timeS           4   42[BANK0 ] long 
  1666 ;;  timeN           4   38[BANK0 ] long 
  1667 ;;  timeB           4   34[BANK0 ] long 
  1668 ;;  doneW           2   64[BANK0 ] int 
  1669 ;;  doneS           2   62[BANK0 ] int 
  1670 ;;  doneN           2   60[BANK0 ] int 
  1671 ;;  doneB           2   58[BANK0 ] int 
  1672 ;;  numW            2   56[BANK0 ] int 
  1673 ;;  numS            2   54[BANK0 ] int 
  1674 ;;  numN            2   52[BANK0 ] int 
  1675 ;;  numB            2   50[BANK0 ] int 
  1676 ;;  resolution      1   66[BANK0 ] unsigned char 
  1677 ;; Return value:  Size  Location     Type
  1678 ;;                  1    wreg      void 
  1679 ;; Registers used:
  1680 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1681 ;; Tracked objects:
  1682 ;;		On entry : 0/0
  1683 ;;		On exit  : 0/0
  1684 ;;		Unchanged: 0/0
  1685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1686 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1687 ;;      Locals:         0      71       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1688 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1689 ;;      Totals:         8      71       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1690 ;;Total ram usage:       79 bytes
  1691 ;; Hardware stack levels used:    1
  1692 ;; Hardware stack levels required when called:    4
  1693 ;; This function calls:
  1694 ;;		_I2C_Send
  1695 ;;		_RTC_getSeconds
  1696 ;;		_lcdInst
  1697 ;;		_printf
  1698 ;;		_sprintf
  1699 ;; This function is called by:
  1700 ;;		_main
  1701 ;;		_packaging
  1702 ;; This function uses a non-reentrant model
  1703 ;;
  1704                           
  1705                           	psect	text1
  1706  00F3F8                     __ptext1:
  1707                           	opt stack 0
  1708  00F3F8                     _packageCompartment:
  1709                           	opt stack 26
  1710                           
  1711                           ;incstack = 0
  1712                           ;packageCompartment@b stored from wreg
  1713  00F3F8  0100               	movlb	0	; () banked
  1714  00F3FA  6FA1               	movwf	packageCompartment@b& (0+255),b
  1715                           
  1716                           ;main.c: 226: LATBbits.LATB3 = 1;
  1717  00F3FC  868A               	bsf	3978,3,c	;volatile
  1718                           
  1719                           ;main.c: 227: LATCbits.LATC1 = 1;
  1720  00F3FE  828B               	bsf	3979,1,c	;volatile
  1721                           
  1722                           ;main.c: 228: LATCbits.LATC5 = 1;
  1723  00F400  8A8B               	bsf	3979,5,c	;volatile
  1724                           
  1725                           ;main.c: 229: LATCbits.LATC7 = 1;
  1726  00F402  8E8B               	bsf	3979,7,c	;volatile
  1727                           
  1728                           ;main.c: 230: I2C_Send(nanoAddr, "Starting\0");
  1729  00F404  0ED8               	movlw	low STR_2
  1730  00F406  6E04               	movwf	I2C_Send@data,c
  1731  00F408  0EFF               	movlw	high STR_2
  1732  00F40A  6E05               	movwf	I2C_Send@data+1,c
  1733  00F40C  0E3F               	movlw	low _nanoAddr
  1734  00F40E  6EF6               	movwf	tblptrl,c
  1735  00F410                     	if	1	;There is more than 1 active tblptr byte
  1736  00F410  0EFD               	movlw	high _nanoAddr
  1737  00F412  6EF7               	movwf	tblptrh,c
  1738  00F414                     	endif
  1739  00F414                     	if	1	;There are 3 active tblptr bytes
  1740  00F414  0E00               	movlw	low (_nanoAddr shr (0+16))
  1741  00F416  6EF8               	movwf	tblptru,c
  1742  00F418                     	endif
  1743  00F418  0008               	tblrd		*
  1744  00F41A  50F5               	movf	tablat,w,c
  1745  00F41C  EC60  F079         	call	_I2C_Send
  1746                           
  1747                           ;main.c: 232: int numB=0, numN=0, numS=0, numW=0;
  1748  00F420  0E00               	movlw	0
  1749  00F422  0100               	movlb	0	; () banked
  1750  00F424  6FB3               	movwf	(packageCompartment@numB+1)& (0+255),b
  1751  00F426  0E00               	movlw	0
  1752  00F428  6FB2               	movwf	packageCompartment@numB& (0+255),b
  1753                           
  1754                           ; BSR set to: 0
  1755  00F42A  0E00               	movlw	0
  1756  00F42C  6FB5               	movwf	(packageCompartment@numN+1)& (0+255),b
  1757  00F42E  0E00               	movlw	0
  1758  00F430  6FB4               	movwf	packageCompartment@numN& (0+255),b
  1759                           
  1760                           ; BSR set to: 0
  1761  00F432  0E00               	movlw	0
  1762  00F434  6FB7               	movwf	(packageCompartment@numS+1)& (0+255),b
  1763  00F436  0E00               	movlw	0
  1764  00F438  6FB6               	movwf	packageCompartment@numS& (0+255),b
  1765                           
  1766                           ; BSR set to: 0
  1767  00F43A  0E00               	movlw	0
  1768  00F43C  6FB9               	movwf	(packageCompartment@numW+1)& (0+255),b
  1769  00F43E  0E00               	movlw	0
  1770  00F440  6FB8               	movwf	packageCompartment@numW& (0+255),b
  1771                           
  1772                           ; BSR set to: 0
  1773                           ;main.c: 233: int doneB=0, doneN=0, doneS=0, doneW=0;
  1774  00F442  0E00               	movlw	0
  1775  00F444  6FBB               	movwf	(packageCompartment@doneB+1)& (0+255),b
  1776  00F446  0E00               	movlw	0
  1777  00F448  6FBA               	movwf	packageCompartment@doneB& (0+255),b
  1778                           
  1779                           ; BSR set to: 0
  1780  00F44A  0E00               	movlw	0
  1781  00F44C  6FBD               	movwf	(packageCompartment@doneN+1)& (0+255),b
  1782  00F44E  0E00               	movlw	0
  1783  00F450  6FBC               	movwf	packageCompartment@doneN& (0+255),b
  1784                           
  1785                           ; BSR set to: 0
  1786  00F452  0E00               	movlw	0
  1787  00F454  6FBF               	movwf	(packageCompartment@doneS+1)& (0+255),b
  1788  00F456  0E00               	movlw	0
  1789  00F458  6FBE               	movwf	packageCompartment@doneS& (0+255),b
  1790                           
  1791                           ; BSR set to: 0
  1792  00F45A  0E00               	movlw	0
  1793  00F45C  6FC1               	movwf	(packageCompartment@doneW+1)& (0+255),b
  1794  00F45E  0E00               	movlw	0
  1795  00F460  6FC0               	movwf	packageCompartment@doneW& (0+255),b
  1796                           
  1797                           ; BSR set to: 0
  1798                           ;main.c: 234: long currTime, timeB=0, timeN=0, timeS=0, timeW=0;
  1799  00F462  0E00               	movlw	0
  1800  00F464  6FA2               	movwf	packageCompartment@timeB& (0+255),b
  1801  00F466  0E00               	movlw	0
  1802  00F468  6FA3               	movwf	(packageCompartment@timeB+1)& (0+255),b
  1803  00F46A  0E00               	movlw	0
  1804  00F46C  6FA4               	movwf	(packageCompartment@timeB+2)& (0+255),b
  1805  00F46E  0E00               	movlw	0
  1806  00F470  6FA5               	movwf	(packageCompartment@timeB+3)& (0+255),b
  1807                           
  1808                           ; BSR set to: 0
  1809  00F472  0E00               	movlw	0
  1810  00F474  6FA6               	movwf	packageCompartment@timeN& (0+255),b
  1811  00F476  0E00               	movlw	0
  1812  00F478  6FA7               	movwf	(packageCompartment@timeN+1)& (0+255),b
  1813  00F47A  0E00               	movlw	0
  1814  00F47C  6FA8               	movwf	(packageCompartment@timeN+2)& (0+255),b
  1815  00F47E  0E00               	movlw	0
  1816  00F480  6FA9               	movwf	(packageCompartment@timeN+3)& (0+255),b
  1817                           
  1818                           ; BSR set to: 0
  1819  00F482  0E00               	movlw	0
  1820  00F484  6FAA               	movwf	packageCompartment@timeS& (0+255),b
  1821  00F486  0E00               	movlw	0
  1822  00F488  6FAB               	movwf	(packageCompartment@timeS+1)& (0+255),b
  1823  00F48A  0E00               	movlw	0
  1824  00F48C  6FAC               	movwf	(packageCompartment@timeS+2)& (0+255),b
  1825  00F48E  0E00               	movlw	0
  1826  00F490  6FAD               	movwf	(packageCompartment@timeS+3)& (0+255),b
  1827                           
  1828                           ; BSR set to: 0
  1829  00F492  0E00               	movlw	0
  1830  00F494  6FAE               	movwf	packageCompartment@timeW& (0+255),b
  1831  00F496  0E00               	movlw	0
  1832  00F498  6FAF               	movwf	(packageCompartment@timeW+1)& (0+255),b
  1833  00F49A  0E00               	movlw	0
  1834  00F49C  6FB0               	movwf	(packageCompartment@timeW+2)& (0+255),b
  1835  00F49E  0E00               	movlw	0
  1836  00F4A0  6FB1               	movwf	(packageCompartment@timeW+3)& (0+255),b
  1837                           
  1838                           ; BSR set to: 0
  1839                           ;main.c: 235: char resolution = 5;
  1840  00F4A2  0E05               	movlw	5
  1841  00F4A4  6FC2               	movwf	packageCompartment@resolution& (0+255),b
  1842                           
  1843                           ; BSR set to: 0
  1844                           ;main.c: 236: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1845  00F4A6  0E01               	movlw	1
  1846  00F4A8  EC16  F077         	call	_lcdInst
  1847  00F4AC  0EC3               	movlw	195
  1848  00F4AE  6E3A               	movwf	??_packageCompartment& (0+255),c
  1849  00F4B0  0ECD               	movlw	205
  1850  00F4B2                     u3067:
  1851  00F4B2  2EE8               	decfsz	wreg,f,c
  1852  00F4B4  D7FE               	bra	u3067
  1853  00F4B6  2E3A               	decfsz	??_packageCompartment& (0+255),f,c
  1854  00F4B8  D7FC               	bra	u3067
  1855  00F4BA  F000               	nop	
  1856                           
  1857                           ;main.c: 237: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1858  00F4BC  0E80               	movlw	128
  1859  00F4BE  EC16  F077         	call	_lcdInst
  1860  00F4C2  0E41               	movlw	65
  1861  00F4C4  6E3A               	movwf	??_packageCompartment& (0+255),c
  1862  00F4C6  0EEE               	movlw	238
  1863  00F4C8                     u3077:
  1864  00F4C8  2EE8               	decfsz	wreg,f,c
  1865  00F4CA  D7FE               	bra	u3077
  1866  00F4CC  2E3A               	decfsz	??_packageCompartment& (0+255),f,c
  1867  00F4CE  D7FC               	bra	u3077
  1868  00F4D0  D000               	nop2	
  1869                           
  1870                           ;main.c: 238: printf("Now counting");
  1871  00F4D2  0EBF               	movlw	low STR_3
  1872  00F4D4  6E29               	movwf	printf@f,c
  1873  00F4D6  0EFF               	movlw	high STR_3
  1874  00F4D8  6E2A               	movwf	printf@f+1,c
  1875  00F4DA  EC4F  F077         	call	_printf	;wreg free
  1876                           
  1877                           ;main.c: 239: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1878  00F4DE  0E66               	movlw	102
  1879  00F4E0  6E3B               	movwf	(??_packageCompartment+1)& (0+255),c
  1880  00F4E2  0E76               	movlw	118
  1881  00F4E4  6E3A               	movwf	??_packageCompartment& (0+255),c
  1882  00F4E6  0EC1               	movlw	193
  1883  00F4E8                     u3087:
  1884  00F4E8  2EE8               	decfsz	wreg,f,c
  1885  00F4EA  D7FE               	bra	u3087
  1886  00F4EC  2E3A               	decfsz	??_packageCompartment& (0+255),f,c
  1887  00F4EE  D7FC               	bra	u3087
  1888  00F4F0  2E3B               	decfsz	(??_packageCompartment+1)& (0+255),f,c
  1889  00F4F2  D7FA               	bra	u3087
  1890  00F4F4  F000               	nop	
  1891  00F4F6                     
  1892                           ;main.c: 242: currTime = RTC_getSeconds();
  1893  00F4F6  ECA5  F078         	call	_RTC_getSeconds	;wreg free
  1894  00F4FA  C007  F0C3         	movff	?_RTC_getSeconds,packageCompartment@currTime
  1895  00F4FE  C008  F0C4         	movff	?_RTC_getSeconds+1,packageCompartment@currTime+1
  1896  00F502  C009  F0C5         	movff	?_RTC_getSeconds+2,packageCompartment@currTime+2
  1897  00F506  C00A  F0C6         	movff	?_RTC_getSeconds+3,packageCompartment@currTime+3
  1898                           
  1899                           ;main.c: 243: char currTimeString[33];
  1900                           ;main.c: 244: sprintf(currTimeString, "%li", currTime);
  1901  00F50A  0E80               	movlw	low packageCompartment@currTimeString
  1902  00F50C  6E29               	movwf	sprintf@wh,c
  1903  00F50E  0E00               	movlw	high packageCompartment@currTimeString
  1904  00F510  6E2A               	movwf	sprintf@wh+1,c
  1905  00F512  0EFB               	movlw	low STR_4
  1906  00F514  6E2B               	movwf	sprintf@f,c
  1907  00F516  0EFF               	movlw	high STR_4
  1908  00F518  6E2C               	movwf	sprintf@f+1,c
  1909  00F51A  C0C3  F02D         	movff	packageCompartment@currTime,?_sprintf+4
  1910  00F51E  C0C4  F02E         	movff	packageCompartment@currTime+1,?_sprintf+5
  1911  00F522  C0C5  F02F         	movff	packageCompartment@currTime+2,?_sprintf+6
  1912  00F526  C0C6  F030         	movff	packageCompartment@currTime+3,?_sprintf+7
  1913  00F52A  EC6A  F077         	call	_sprintf	;wreg free
  1914                           
  1915                           ;main.c: 245: currTimeString[32] = "\0";
  1916  00F52E  0E81               	movlw	low (STR_8+14)
  1917  00F530  0100               	movlb	0	; () banked
  1918  00F532  6FA0               	movwf	(packageCompartment@currTimeString+32)& (0+255),b
  1919                           
  1920                           ; BSR set to: 0
  1921                           ;main.c: 246: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1922  00F534  0E01               	movlw	1
  1923  00F536  EC16  F077         	call	_lcdInst
  1924  00F53A  0EC3               	movlw	195
  1925  00F53C  6E3A               	movwf	??_packageCompartment& (0+255),c
  1926  00F53E  0ECD               	movlw	205
  1927  00F540                     u3097:
  1928  00F540  2EE8               	decfsz	wreg,f,c
  1929  00F542  D7FE               	bra	u3097
  1930  00F544  2E3A               	decfsz	??_packageCompartment& (0+255),f,c
  1931  00F546  D7FC               	bra	u3097
  1932  00F548  F000               	nop	
  1933                           
  1934                           ;main.c: 247: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1935  00F54A  0E80               	movlw	128
  1936  00F54C  EC16  F077         	call	_lcdInst
  1937  00F550  0E41               	movlw	65
  1938  00F552  6E3A               	movwf	??_packageCompartment& (0+255),c
  1939  00F554  0EEE               	movlw	238
  1940  00F556                     u3107:
  1941  00F556  2EE8               	decfsz	wreg,f,c
  1942  00F558  D7FE               	bra	u3107
  1943  00F55A  2E3A               	decfsz	??_packageCompartment& (0+255),f,c
  1944  00F55C  D7FC               	bra	u3107
  1945  00F55E  D000               	nop2	
  1946                           
  1947                           ;main.c: 248: printf(currTimeString);
  1948  00F560  0E80               	movlw	low packageCompartment@currTimeString
  1949  00F562  6E29               	movwf	printf@f,c
  1950  00F564  0E00               	movlw	high packageCompartment@currTimeString
  1951  00F566  6E2A               	movwf	printf@f+1,c
  1952  00F568  EC4F  F077         	call	_printf	;wreg free
  1953                           
  1954                           ;main.c: 249: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1955  00F56C  0E66               	movlw	102
  1956  00F56E  6E3B               	movwf	(??_packageCompartment+1)& (0+255),c
  1957  00F570  0E76               	movlw	118
  1958  00F572  6E3A               	movwf	??_packageCompartment& (0+255),c
  1959  00F574  0EC1               	movlw	193
  1960  00F576                     u3117:
  1961  00F576  2EE8               	decfsz	wreg,f,c
  1962  00F578  D7FE               	bra	u3117
  1963  00F57A  2E3A               	decfsz	??_packageCompartment& (0+255),f,c
  1964  00F57C  D7FC               	bra	u3117
  1965  00F57E  2E3B               	decfsz	(??_packageCompartment+1)& (0+255),f,c
  1966  00F580  D7FA               	bra	u3117
  1967  00F582  F000               	nop	
  1968                           
  1969                           ;main.c: 250: I2C_Send(nanoAddr, currTimeString);
  1970  00F584  0E80               	movlw	low packageCompartment@currTimeString
  1971  00F586  6E04               	movwf	I2C_Send@data,c
  1972  00F588  0E00               	movlw	high packageCompartment@currTimeString
  1973  00F58A  6E05               	movwf	I2C_Send@data+1,c
  1974  00F58C  0E3F               	movlw	low _nanoAddr
  1975  00F58E  6EF6               	movwf	tblptrl,c
  1976  00F590                     	if	1	;There is more than 1 active tblptr byte
  1977  00F590  0EFD               	movlw	high _nanoAddr
  1978  00F592  6EF7               	movwf	tblptrh,c
  1979  00F594                     	endif
  1980  00F594                     	if	1	;There are 3 active tblptr bytes
  1981  00F594  0E00               	movlw	low (_nanoAddr shr (0+16))
  1982  00F596  6EF8               	movwf	tblptru,c
  1983  00F598                     	endif
  1984  00F598  0008               	tblrd		*
  1985  00F59A  50F5               	movf	tablat,w,c
  1986  00F59C  EC60  F079         	call	_I2C_Send
  1987                           
  1988                           ;main.c: 252: if (PORTAbits.RA0 == 0 && currTime > timeB + resolution) {
  1989  00F5A0  B080               	btfsc	3968,0,c	;volatile
  1990  00F5A2  D035               	goto	l149
  1991  00F5A4  0100               	movlb	0	; () banked
  1992  00F5A6  51C2               	movf	packageCompartment@resolution& (0+255),w,b
  1993  00F5A8  25A2               	addwf	packageCompartment@timeB& (0+255),w,b
  1994  00F5AA  6E3A               	movwf	??_packageCompartment& (0+255),c
  1995  00F5AC  0E00               	movlw	0
  1996  00F5AE  21A3               	addwfc	(packageCompartment@timeB+1)& (0+255),w,b
  1997  00F5B0  6E3B               	movwf	(??_packageCompartment+1)& (0+255),c
  1998  00F5B2  0E00               	movlw	0
  1999  00F5B4  21A4               	addwfc	(packageCompartment@timeB+2)& (0+255),w,b
  2000  00F5B6  6E3C               	movwf	(??_packageCompartment+2)& (0+255),c
  2001  00F5B8  0E00               	movlw	0
  2002  00F5BA  21A5               	addwfc	(packageCompartment@timeB+3)& (0+255),w,b
  2003  00F5BC  6E3D               	movwf	(??_packageCompartment+3)& (0+255),c
  2004  00F5BE  51C3               	movf	packageCompartment@currTime& (0+255),w,b
  2005  00F5C0  5C3A               	subwf	??_packageCompartment,w,c
  2006  00F5C2  51C4               	movf	(packageCompartment@currTime+1)& (0+255),w,b
  2007  00F5C4  583B               	subwfb	??_packageCompartment+1,w,c
  2008  00F5C6  51C5               	movf	(packageCompartment@currTime+2)& (0+255),w,b
  2009  00F5C8  583C               	subwfb	??_packageCompartment+2,w,c
  2010  00F5CA  503D               	movf	??_packageCompartment+3,w,c
  2011  00F5CC  0A80               	xorlw	128
  2012  00F5CE  6E3E               	movwf	(??_packageCompartment+4)& (0+255),c
  2013  00F5D0  51C6               	movf	(packageCompartment@currTime+3)& (0+255),w,b
  2014  00F5D2  0A80               	xorlw	128
  2015  00F5D4  583E               	subwfb	(??_packageCompartment+4)& (0+255),w,c
  2016  00F5D6  B0D8               	btfsc	status,0,c
  2017  00F5D8  D01A               	goto	l149
  2018                           
  2019                           ; BSR set to: 0
  2020                           ;main.c: 253: timeB = currTime;
  2021  00F5DA  C0C3  F0A2         	movff	packageCompartment@currTime,packageCompartment@timeB
  2022  00F5DE  C0C4  F0A3         	movff	packageCompartment@currTime+1,packageCompartment@timeB+1
  2023  00F5E2  C0C5  F0A4         	movff	packageCompartment@currTime+2,packageCompartment@timeB+2
  2024  00F5E6  C0C6  F0A5         	movff	packageCompartment@currTime+3,packageCompartment@timeB+3
  2025                           
  2026                           ; BSR set to: 0
  2027                           ;main.c: 254: numB++;
  2028  00F5EA  4BB2               	infsnz	packageCompartment@numB& (0+255),f,b
  2029  00F5EC  2BB3               	incf	(packageCompartment@numB+1)& (0+255),f,b
  2030                           
  2031                           ;main.c: 255: dispensed.b++;
  2032  00F5EE  4A62               	infsnz	_dispensed,f,c
  2033  00F5F0  2A63               	incf	_dispensed+1,f,c
  2034                           
  2035                           ; BSR set to: 0
  2036                           ;main.c: 256: I2C_Send(nanoAddr, "\1Bolt Counted\0");
  2037  00F5F2  0EA3               	movlw	low STR_6
  2038  00F5F4  6E04               	movwf	I2C_Send@data,c
  2039  00F5F6  0EFF               	movlw	high STR_6
  2040  00F5F8  6E05               	movwf	I2C_Send@data+1,c
  2041  00F5FA  0E3F               	movlw	low _nanoAddr
  2042  00F5FC  6EF6               	movwf	tblptrl,c
  2043  00F5FE                     	if	1	;There is more than 1 active tblptr byte
  2044  00F5FE  0EFD               	movlw	high _nanoAddr
  2045  00F600  6EF7               	movwf	tblptrh,c
  2046  00F602                     	endif
  2047  00F602                     	if	1	;There are 3 active tblptr bytes
  2048  00F602  0E00               	movlw	low (_nanoAddr shr (0+16))
  2049  00F604  6EF8               	movwf	tblptru,c
  2050  00F606                     	endif
  2051  00F606  0008               	tblrd		*
  2052  00F608  50F5               	movf	tablat,w,c
  2053  00F60A  EC60  F079         	call	_I2C_Send
  2054  00F60E                     l149:
  2055                           
  2056                           ;main.c: 257: }
  2057                           ;main.c: 258: if (PORTAbits.RA1 == 0 && currTime > timeN + resolution) {
  2058  00F60E  B280               	btfsc	3968,1,c	;volatile
  2059  00F610  D035               	goto	l150
  2060  00F612  0100               	movlb	0	; () banked
  2061  00F614  51C2               	movf	packageCompartment@resolution& (0+255),w,b
  2062  00F616  25A6               	addwf	packageCompartment@timeN& (0+255),w,b
  2063  00F618  6E3A               	movwf	??_packageCompartment& (0+255),c
  2064  00F61A  0E00               	movlw	0
  2065  00F61C  21A7               	addwfc	(packageCompartment@timeN+1)& (0+255),w,b
  2066  00F61E  6E3B               	movwf	(??_packageCompartment+1)& (0+255),c
  2067  00F620  0E00               	movlw	0
  2068  00F622  21A8               	addwfc	(packageCompartment@timeN+2)& (0+255),w,b
  2069  00F624  6E3C               	movwf	(??_packageCompartment+2)& (0+255),c
  2070  00F626  0E00               	movlw	0
  2071  00F628  21A9               	addwfc	(packageCompartment@timeN+3)& (0+255),w,b
  2072  00F62A  6E3D               	movwf	(??_packageCompartment+3)& (0+255),c
  2073  00F62C  51C3               	movf	packageCompartment@currTime& (0+255),w,b
  2074  00F62E  5C3A               	subwf	??_packageCompartment,w,c
  2075  00F630  51C4               	movf	(packageCompartment@currTime+1)& (0+255),w,b
  2076  00F632  583B               	subwfb	??_packageCompartment+1,w,c
  2077  00F634  51C5               	movf	(packageCompartment@currTime+2)& (0+255),w,b
  2078  00F636  583C               	subwfb	??_packageCompartment+2,w,c
  2079  00F638  503D               	movf	??_packageCompartment+3,w,c
  2080  00F63A  0A80               	xorlw	128
  2081  00F63C  6E3E               	movwf	(??_packageCompartment+4)& (0+255),c
  2082  00F63E  51C6               	movf	(packageCompartment@currTime+3)& (0+255),w,b
  2083  00F640  0A80               	xorlw	128
  2084  00F642  583E               	subwfb	(??_packageCompartment+4)& (0+255),w,c
  2085  00F644  B0D8               	btfsc	status,0,c
  2086  00F646  D01A               	goto	l150
  2087                           
  2088                           ; BSR set to: 0
  2089                           ;main.c: 259: timeN = currTime;
  2090  00F648  C0C3  F0A6         	movff	packageCompartment@currTime,packageCompartment@timeN
  2091  00F64C  C0C4  F0A7         	movff	packageCompartment@currTime+1,packageCompartment@timeN+1
  2092  00F650  C0C5  F0A8         	movff	packageCompartment@currTime+2,packageCompartment@timeN+2
  2093  00F654  C0C6  F0A9         	movff	packageCompartment@currTime+3,packageCompartment@timeN+3
  2094                           
  2095                           ; BSR set to: 0
  2096                           ;main.c: 260: numN++;
  2097  00F658  4BB4               	infsnz	packageCompartment@numN& (0+255),f,b
  2098  00F65A  2BB5               	incf	(packageCompartment@numN+1)& (0+255),f,b
  2099                           
  2100                           ;main.c: 261: dispensed.n++;
  2101  00F65C  4A64               	infsnz	_dispensed+2,f,c
  2102  00F65E  2A65               	incf	_dispensed+3,f,c
  2103                           
  2104                           ; BSR set to: 0
  2105                           ;main.c: 262: I2C_Send(nanoAddr, "Nut Counted\0");
  2106  00F660  0EB2               	movlw	low STR_7
  2107  00F662  6E04               	movwf	I2C_Send@data,c
  2108  00F664  0EFF               	movlw	high STR_7
  2109  00F666  6E05               	movwf	I2C_Send@data+1,c
  2110  00F668  0E3F               	movlw	low _nanoAddr
  2111  00F66A  6EF6               	movwf	tblptrl,c
  2112  00F66C                     	if	1	;There is more than 1 active tblptr byte
  2113  00F66C  0EFD               	movlw	high _nanoAddr
  2114  00F66E  6EF7               	movwf	tblptrh,c
  2115  00F670                     	endif
  2116  00F670                     	if	1	;There are 3 active tblptr bytes
  2117  00F670  0E00               	movlw	low (_nanoAddr shr (0+16))
  2118  00F672  6EF8               	movwf	tblptru,c
  2119  00F674                     	endif
  2120  00F674  0008               	tblrd		*
  2121  00F676  50F5               	movf	tablat,w,c
  2122  00F678  EC60  F079         	call	_I2C_Send
  2123  00F67C                     l150:
  2124                           
  2125                           ;main.c: 263: }
  2126                           ;main.c: 264: if (PORTAbits.RA2 == 0 && currTime > timeS + resolution) {
  2127  00F67C  B480               	btfsc	3968,2,c	;volatile
  2128  00F67E  D035               	goto	l151
  2129  00F680  0100               	movlb	0	; () banked
  2130  00F682  51C2               	movf	packageCompartment@resolution& (0+255),w,b
  2131  00F684  25AA               	addwf	packageCompartment@timeS& (0+255),w,b
  2132  00F686  6E3A               	movwf	??_packageCompartment& (0+255),c
  2133  00F688  0E00               	movlw	0
  2134  00F68A  21AB               	addwfc	(packageCompartment@timeS+1)& (0+255),w,b
  2135  00F68C  6E3B               	movwf	(??_packageCompartment+1)& (0+255),c
  2136  00F68E  0E00               	movlw	0
  2137  00F690  21AC               	addwfc	(packageCompartment@timeS+2)& (0+255),w,b
  2138  00F692  6E3C               	movwf	(??_packageCompartment+2)& (0+255),c
  2139  00F694  0E00               	movlw	0
  2140  00F696  21AD               	addwfc	(packageCompartment@timeS+3)& (0+255),w,b
  2141  00F698  6E3D               	movwf	(??_packageCompartment+3)& (0+255),c
  2142  00F69A  51C3               	movf	packageCompartment@currTime& (0+255),w,b
  2143  00F69C  5C3A               	subwf	??_packageCompartment,w,c
  2144  00F69E  51C4               	movf	(packageCompartment@currTime+1)& (0+255),w,b
  2145  00F6A0  583B               	subwfb	??_packageCompartment+1,w,c
  2146  00F6A2  51C5               	movf	(packageCompartment@currTime+2)& (0+255),w,b
  2147  00F6A4  583C               	subwfb	??_packageCompartment+2,w,c
  2148  00F6A6  503D               	movf	??_packageCompartment+3,w,c
  2149  00F6A8  0A80               	xorlw	128
  2150  00F6AA  6E3E               	movwf	(??_packageCompartment+4)& (0+255),c
  2151  00F6AC  51C6               	movf	(packageCompartment@currTime+3)& (0+255),w,b
  2152  00F6AE  0A80               	xorlw	128
  2153  00F6B0  583E               	subwfb	(??_packageCompartment+4)& (0+255),w,c
  2154  00F6B2  B0D8               	btfsc	status,0,c
  2155  00F6B4  D01A               	goto	l151
  2156                           
  2157                           ; BSR set to: 0
  2158                           ;main.c: 265: timeS = currTime;
  2159  00F6B6  C0C3  F0AA         	movff	packageCompartment@currTime,packageCompartment@timeS
  2160  00F6BA  C0C4  F0AB         	movff	packageCompartment@currTime+1,packageCompartment@timeS+1
  2161  00F6BE  C0C5  F0AC         	movff	packageCompartment@currTime+2,packageCompartment@timeS+2
  2162  00F6C2  C0C6  F0AD         	movff	packageCompartment@currTime+3,packageCompartment@timeS+3
  2163                           
  2164                           ; BSR set to: 0
  2165                           ;main.c: 266: numS++;
  2166  00F6C6  4BB6               	infsnz	packageCompartment@numS& (0+255),f,b
  2167  00F6C8  2BB7               	incf	(packageCompartment@numS+1)& (0+255),f,b
  2168                           
  2169                           ;main.c: 267: dispensed.s++;
  2170  00F6CA  4A66               	infsnz	_dispensed+4,f,c
  2171  00F6CC  2A67               	incf	_dispensed+5,f,c
  2172                           
  2173                           ; BSR set to: 0
  2174                           ;main.c: 268: I2C_Send(nanoAddr, "Spacer Counted\0");
  2175  00F6CE  0E73               	movlw	low STR_8
  2176  00F6D0  6E04               	movwf	I2C_Send@data,c
  2177  00F6D2  0EFF               	movlw	high STR_8
  2178  00F6D4  6E05               	movwf	I2C_Send@data+1,c
  2179  00F6D6  0E3F               	movlw	low _nanoAddr
  2180  00F6D8  6EF6               	movwf	tblptrl,c
  2181  00F6DA                     	if	1	;There is more than 1 active tblptr byte
  2182  00F6DA  0EFD               	movlw	high _nanoAddr
  2183  00F6DC  6EF7               	movwf	tblptrh,c
  2184  00F6DE                     	endif
  2185  00F6DE                     	if	1	;There are 3 active tblptr bytes
  2186  00F6DE  0E00               	movlw	low (_nanoAddr shr (0+16))
  2187  00F6E0  6EF8               	movwf	tblptru,c
  2188  00F6E2                     	endif
  2189  00F6E2  0008               	tblrd		*
  2190  00F6E4  50F5               	movf	tablat,w,c
  2191  00F6E6  EC60  F079         	call	_I2C_Send
  2192  00F6EA                     l151:
  2193                           
  2194                           ;main.c: 269: }
  2195                           ;main.c: 270: if (PORTAbits.RA3 == 0 && currTime > timeW + resolution) {
  2196  00F6EA  B680               	btfsc	3968,3,c	;volatile
  2197  00F6EC  D035               	goto	l152
  2198  00F6EE  0100               	movlb	0	; () banked
  2199  00F6F0  51C2               	movf	packageCompartment@resolution& (0+255),w,b
  2200  00F6F2  25AE               	addwf	packageCompartment@timeW& (0+255),w,b
  2201  00F6F4  6E3A               	movwf	??_packageCompartment& (0+255),c
  2202  00F6F6  0E00               	movlw	0
  2203  00F6F8  21AF               	addwfc	(packageCompartment@timeW+1)& (0+255),w,b
  2204  00F6FA  6E3B               	movwf	(??_packageCompartment+1)& (0+255),c
  2205  00F6FC  0E00               	movlw	0
  2206  00F6FE  21B0               	addwfc	(packageCompartment@timeW+2)& (0+255),w,b
  2207  00F700  6E3C               	movwf	(??_packageCompartment+2)& (0+255),c
  2208  00F702  0E00               	movlw	0
  2209  00F704  21B1               	addwfc	(packageCompartment@timeW+3)& (0+255),w,b
  2210  00F706  6E3D               	movwf	(??_packageCompartment+3)& (0+255),c
  2211  00F708  51C3               	movf	packageCompartment@currTime& (0+255),w,b
  2212  00F70A  5C3A               	subwf	??_packageCompartment,w,c
  2213  00F70C  51C4               	movf	(packageCompartment@currTime+1)& (0+255),w,b
  2214  00F70E  583B               	subwfb	??_packageCompartment+1,w,c
  2215  00F710  51C5               	movf	(packageCompartment@currTime+2)& (0+255),w,b
  2216  00F712  583C               	subwfb	??_packageCompartment+2,w,c
  2217  00F714  503D               	movf	??_packageCompartment+3,w,c
  2218  00F716  0A80               	xorlw	128
  2219  00F718  6E3E               	movwf	(??_packageCompartment+4)& (0+255),c
  2220  00F71A  51C6               	movf	(packageCompartment@currTime+3)& (0+255),w,b
  2221  00F71C  0A80               	xorlw	128
  2222  00F71E  583E               	subwfb	(??_packageCompartment+4)& (0+255),w,c
  2223  00F720  B0D8               	btfsc	status,0,c
  2224  00F722  D01A               	goto	l152
  2225                           
  2226                           ; BSR set to: 0
  2227                           ;main.c: 271: timeW = currTime;
  2228  00F724  C0C3  F0AE         	movff	packageCompartment@currTime,packageCompartment@timeW
  2229  00F728  C0C4  F0AF         	movff	packageCompartment@currTime+1,packageCompartment@timeW+1
  2230  00F72C  C0C5  F0B0         	movff	packageCompartment@currTime+2,packageCompartment@timeW+2
  2231  00F730  C0C6  F0B1         	movff	packageCompartment@currTime+3,packageCompartment@timeW+3
  2232                           
  2233                           ; BSR set to: 0
  2234                           ;main.c: 272: numW++;
  2235  00F734  4BB8               	infsnz	packageCompartment@numW& (0+255),f,b
  2236  00F736  2BB9               	incf	(packageCompartment@numW+1)& (0+255),f,b
  2237                           
  2238                           ;main.c: 273: dispensed.w++;
  2239  00F738  4A68               	infsnz	_dispensed+6,f,c
  2240  00F73A  2A69               	incf	_dispensed+7,f,c
  2241                           
  2242                           ; BSR set to: 0
  2243                           ;main.c: 274: I2C_Send(nanoAddr, "Washer Counted\0");
  2244  00F73C  0E83               	movlw	low STR_9
  2245  00F73E  6E04               	movwf	I2C_Send@data,c
  2246  00F740  0EFF               	movlw	high STR_9
  2247  00F742  6E05               	movwf	I2C_Send@data+1,c
  2248  00F744  0E3F               	movlw	low _nanoAddr
  2249  00F746  6EF6               	movwf	tblptrl,c
  2250  00F748                     	if	1	;There is more than 1 active tblptr byte
  2251  00F748  0EFD               	movlw	high _nanoAddr
  2252  00F74A  6EF7               	movwf	tblptrh,c
  2253  00F74C                     	endif
  2254  00F74C                     	if	1	;There are 3 active tblptr bytes
  2255  00F74C  0E00               	movlw	low (_nanoAddr shr (0+16))
  2256  00F74E  6EF8               	movwf	tblptru,c
  2257  00F750                     	endif
  2258  00F750  0008               	tblrd		*
  2259  00F752  50F5               	movf	tablat,w,c
  2260  00F754  EC60  F079         	call	_I2C_Send
  2261  00F758                     l152:
  2262                           
  2263                           ;main.c: 275: }
  2264                           ;main.c: 277: if (numB >= b) {
  2265  00F758  0100               	movlb	0	; () banked
  2266  00F75A  51A1               	movf	packageCompartment@b& (0+255),w,b
  2267  00F75C  6E3A               	movwf	??_packageCompartment& (0+255),c
  2268  00F75E  6A3B               	clrf	(??_packageCompartment+1)& (0+255),c
  2269  00F760  503A               	movf	??_packageCompartment,w,c
  2270  00F762  5DB2               	subwf	packageCompartment@numB& (0+255),w,b
  2271  00F764  51B3               	movf	(packageCompartment@numB+1)& (0+255),w,b
  2272  00F766  0A80               	xorlw	128
  2273  00F768  6E3C               	movwf	(??_packageCompartment+2)& (0+255),c
  2274  00F76A  503B               	movf	??_packageCompartment+1,w,c
  2275  00F76C  0A80               	xorlw	128
  2276  00F76E  583C               	subwfb	(??_packageCompartment+2)& (0+255),w,c
  2277  00F770  A0D8               	btfss	status,0,c
  2278  00F772  D005               	goto	l153
  2279                           
  2280                           ; BSR set to: 0
  2281                           ;main.c: 278: LATBbits.LATB3 = 0;
  2282  00F774  968A               	bcf	3978,3,c	;volatile
  2283                           
  2284                           ; BSR set to: 0
  2285                           ;main.c: 279: doneB=1;
  2286  00F776  0E00               	movlw	0
  2287  00F778  6FBB               	movwf	(packageCompartment@doneB+1)& (0+255),b
  2288  00F77A  0E01               	movlw	1
  2289  00F77C  6FBA               	movwf	packageCompartment@doneB& (0+255),b
  2290  00F77E                     l153:
  2291                           
  2292                           ; BSR set to: 0
  2293                           ;main.c: 280: }
  2294                           ;main.c: 281: if (numN >= n) {
  2295                           
  2296                           ; BSR set to: 0
  2297  00F77E  5037               	movf	packageCompartment@n,w,c
  2298  00F780  6E3A               	movwf	??_packageCompartment& (0+255),c
  2299  00F782  6A3B               	clrf	(??_packageCompartment+1)& (0+255),c
  2300  00F784  503A               	movf	??_packageCompartment,w,c
  2301  00F786  5DB4               	subwf	packageCompartment@numN& (0+255),w,b
  2302  00F788  51B5               	movf	(packageCompartment@numN+1)& (0+255),w,b
  2303  00F78A  0A80               	xorlw	128
  2304  00F78C  6E3C               	movwf	(??_packageCompartment+2)& (0+255),c
  2305  00F78E  503B               	movf	??_packageCompartment+1,w,c
  2306  00F790  0A80               	xorlw	128
  2307  00F792  583C               	subwfb	(??_packageCompartment+2)& (0+255),w,c
  2308  00F794  A0D8               	btfss	status,0,c
  2309  00F796  D005               	goto	l154
  2310                           
  2311                           ; BSR set to: 0
  2312                           ;main.c: 282: LATCbits.LATC5 = 0;
  2313  00F798  9A8B               	bcf	3979,5,c	;volatile
  2314                           
  2315                           ; BSR set to: 0
  2316                           ;main.c: 283: doneN=1;
  2317  00F79A  0E00               	movlw	0
  2318  00F79C  6FBD               	movwf	(packageCompartment@doneN+1)& (0+255),b
  2319  00F79E  0E01               	movlw	1
  2320  00F7A0  6FBC               	movwf	packageCompartment@doneN& (0+255),b
  2321  00F7A2                     l154:
  2322                           
  2323                           ; BSR set to: 0
  2324                           ;main.c: 284: }
  2325                           ;main.c: 285: if (numS >= s) {
  2326                           
  2327                           ; BSR set to: 0
  2328  00F7A2  5038               	movf	packageCompartment@s,w,c
  2329  00F7A4  6E3A               	movwf	??_packageCompartment& (0+255),c
  2330  00F7A6  6A3B               	clrf	(??_packageCompartment+1)& (0+255),c
  2331  00F7A8  503A               	movf	??_packageCompartment,w,c
  2332  00F7AA  5DB6               	subwf	packageCompartment@numS& (0+255),w,b
  2333  00F7AC  51B7               	movf	(packageCompartment@numS+1)& (0+255),w,b
  2334  00F7AE  0A80               	xorlw	128
  2335  00F7B0  6E3C               	movwf	(??_packageCompartment+2)& (0+255),c
  2336  00F7B2  503B               	movf	??_packageCompartment+1,w,c
  2337  00F7B4  0A80               	xorlw	128
  2338  00F7B6  583C               	subwfb	(??_packageCompartment+2)& (0+255),w,c
  2339  00F7B8  A0D8               	btfss	status,0,c
  2340  00F7BA  D005               	goto	l155
  2341                           
  2342                           ; BSR set to: 0
  2343                           ;main.c: 286: LATCbits.LATC5 = 0;
  2344  00F7BC  9A8B               	bcf	3979,5,c	;volatile
  2345                           
  2346                           ; BSR set to: 0
  2347                           ;main.c: 287: doneS=1;
  2348  00F7BE  0E00               	movlw	0
  2349  00F7C0  6FBF               	movwf	(packageCompartment@doneS+1)& (0+255),b
  2350  00F7C2  0E01               	movlw	1
  2351  00F7C4  6FBE               	movwf	packageCompartment@doneS& (0+255),b
  2352  00F7C6                     l155:
  2353                           
  2354                           ; BSR set to: 0
  2355                           ;main.c: 288: }
  2356                           ;main.c: 289: if (numW >= w) {
  2357                           
  2358                           ; BSR set to: 0
  2359  00F7C6  5039               	movf	packageCompartment@w,w,c
  2360  00F7C8  6E3A               	movwf	??_packageCompartment& (0+255),c
  2361  00F7CA  6A3B               	clrf	(??_packageCompartment+1)& (0+255),c
  2362  00F7CC  503A               	movf	??_packageCompartment,w,c
  2363  00F7CE  5DB8               	subwf	packageCompartment@numW& (0+255),w,b
  2364  00F7D0  51B9               	movf	(packageCompartment@numW+1)& (0+255),w,b
  2365  00F7D2  0A80               	xorlw	128
  2366  00F7D4  6E3C               	movwf	(??_packageCompartment+2)& (0+255),c
  2367  00F7D6  503B               	movf	??_packageCompartment+1,w,c
  2368  00F7D8  0A80               	xorlw	128
  2369  00F7DA  583C               	subwfb	(??_packageCompartment+2)& (0+255),w,c
  2370  00F7DC  A0D8               	btfss	status,0,c
  2371  00F7DE  D005               	goto	l156
  2372                           
  2373                           ; BSR set to: 0
  2374                           ;main.c: 290: LATCbits.LATC7 = 0;
  2375  00F7E0  9E8B               	bcf	3979,7,c	;volatile
  2376                           
  2377                           ; BSR set to: 0
  2378                           ;main.c: 291: doneW=1;
  2379  00F7E2  0E00               	movlw	0
  2380  00F7E4  6FC1               	movwf	(packageCompartment@doneW+1)& (0+255),b
  2381  00F7E6  0E01               	movlw	1
  2382  00F7E8  6FC0               	movwf	packageCompartment@doneW& (0+255),b
  2383  00F7EA                     l156:
  2384                           
  2385                           ; BSR set to: 0
  2386                           ;main.c: 292: }
  2387                           ;main.c: 294: if (doneB && doneN && doneS && doneW) {
  2388                           
  2389                           ; BSR set to: 0
  2390  00F7EA  51BA               	movf	packageCompartment@doneB& (0+255),w,b
  2391  00F7EC  11BB               	iorwf	(packageCompartment@doneB+1)& (0+255),w,b
  2392  00F7EE  B4D8               	btfsc	status,2,c
  2393  00F7F0  D682               	goto	l148
  2394                           
  2395                           ; BSR set to: 0
  2396  00F7F2  51BC               	movf	packageCompartment@doneN& (0+255),w,b
  2397  00F7F4  11BD               	iorwf	(packageCompartment@doneN+1)& (0+255),w,b
  2398  00F7F6  B4D8               	btfsc	status,2,c
  2399  00F7F8  D67E               	goto	l148
  2400                           
  2401                           ; BSR set to: 0
  2402  00F7FA  51BE               	movf	packageCompartment@doneS& (0+255),w,b
  2403  00F7FC  11BF               	iorwf	(packageCompartment@doneS+1)& (0+255),w,b
  2404  00F7FE  B4D8               	btfsc	status,2,c
  2405  00F800  D67A               	goto	l148
  2406                           
  2407                           ; BSR set to: 0
  2408  00F802  51C0               	movf	packageCompartment@doneW& (0+255),w,b
  2409  00F804  11C1               	iorwf	(packageCompartment@doneW+1)& (0+255),w,b
  2410  00F806  B4D8               	btfsc	status,2,c
  2411  00F808  D676               	goto	l148
  2412                           
  2413                           ; BSR set to: 0
  2414                           ;main.c: 295: I2C_Send(nanoAddr, "\1Done compartment\0");
  2415  00F80A  0E4F               	movlw	low STR_10
  2416  00F80C  6E04               	movwf	I2C_Send@data,c
  2417  00F80E  0EFF               	movlw	high STR_10
  2418  00F810  6E05               	movwf	I2C_Send@data+1,c
  2419  00F812  0E3F               	movlw	low _nanoAddr
  2420  00F814  6EF6               	movwf	tblptrl,c
  2421  00F816                     	if	1	;There is more than 1 active tblptr byte
  2422  00F816  0EFD               	movlw	high _nanoAddr
  2423  00F818  6EF7               	movwf	tblptrh,c
  2424  00F81A                     	endif
  2425  00F81A                     	if	1	;There are 3 active tblptr bytes
  2426  00F81A  0E00               	movlw	low (_nanoAddr shr (0+16))
  2427  00F81C  6EF8               	movwf	tblptru,c
  2428  00F81E                     	endif
  2429  00F81E  0008               	tblrd		*
  2430  00F820  50F5               	movf	tablat,w,c
  2431  00F822  EC60  F079         	call	_I2C_Send
  2432                           
  2433                           ;main.c: 297: }
  2434                           ;main.c: 298: }
  2435                           ;main.c: 301: I2C_Send(nanoAddr, 2);
  2436                           
  2437                           ;main.c: 296: break;
  2438  00F826  0E02               	movlw	2
  2439  00F828  6E04               	movwf	I2C_Send@data,c
  2440  00F82A  0E00               	movlw	0
  2441  00F82C  6E05               	movwf	I2C_Send@data+1,c
  2442  00F82E  0E3F               	movlw	low _nanoAddr
  2443  00F830  6EF6               	movwf	tblptrl,c
  2444  00F832                     	if	1	;There is more than 1 active tblptr byte
  2445  00F832  0EFD               	movlw	high _nanoAddr
  2446  00F834  6EF7               	movwf	tblptrh,c
  2447  00F836                     	endif
  2448  00F836                     	if	1	;There are 3 active tblptr bytes
  2449  00F836  0E00               	movlw	low (_nanoAddr shr (0+16))
  2450  00F838  6EF8               	movwf	tblptru,c
  2451  00F83A                     	endif
  2452  00F83A  0008               	tblrd		*
  2453  00F83C  50F5               	movf	tablat,w,c
  2454  00F83E  EC60  F079         	call	_I2C_Send
  2455                           
  2456                           ;main.c: 302: _delay((unsigned long)((5000)*(40000000/4000.0)));
  2457  00F842  0EFE               	movlw	254
  2458  00F844  6E3B               	movwf	(??_packageCompartment+1)& (0+255),c
  2459  00F846  0EA7               	movlw	167
  2460  00F848  6E3A               	movwf	??_packageCompartment& (0+255),c
  2461  00F84A  0E66               	movlw	102
  2462  00F84C                     u3127:
  2463  00F84C  2EE8               	decfsz	wreg,f,c
  2464  00F84E  D7FE               	bra	u3127
  2465  00F850  2E3A               	decfsz	??_packageCompartment& (0+255),f,c
  2466  00F852  D7FC               	bra	u3127
  2467  00F854  2E3B               	decfsz	(??_packageCompartment+1)& (0+255),f,c
  2468  00F856  D7FA               	bra	u3127
  2469  00F858  0012               	return		;funcret
  2470  00F85A                     __end_of_packageCompartment:
  2471                           	opt stack 0
  2472                           tblptru	equ	0xFF8
  2473                           tblptrh	equ	0xFF7
  2474                           tblptrl	equ	0xFF6
  2475                           tablat	equ	0xFF5
  2476                           postinc0	equ	0xFEE
  2477                           wreg	equ	0xFE8
  2478                           postdec1	equ	0xFE5
  2479                           fsr1l	equ	0xFE1
  2480                           status	equ	0xFD8
  2481                           
  2482 ;; *************** function _sprintf *****************
  2483 ;; Defined at:
  2484 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprintf.c"
  2485 ;; Parameters:    Size  Location     Type
  2486 ;;  wh              2   40[COMRAM] PTR unsigned char 
  2487 ;;		 -> packageCompartment@currTimeString(33), 
  2488 ;;  f               2   42[COMRAM] PTR const unsigned char 
  2489 ;;		 -> STR_4(4), 
  2490 ;; Auto vars:     Size  Location     Type
  2491 ;;  pb              4   50[COMRAM] struct __prbuf
  2492 ;;  ap              2   48[COMRAM] PTR void [1]
  2493 ;;		 -> ?_sprintf(2), ?_printf(2), 
  2494 ;; Return value:  Size  Location     Type
  2495 ;;                  2   40[COMRAM] int 
  2496 ;; Registers used:
  2497 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2498 ;; Tracked objects:
  2499 ;;		On entry : 0/0
  2500 ;;		On exit  : 0/0
  2501 ;;		Unchanged: 0/0
  2502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2503 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2504 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2506 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2507 ;;Total ram usage:       14 bytes
  2508 ;; Hardware stack levels used:    1
  2509 ;; Hardware stack levels required when called:    3
  2510 ;; This function calls:
  2511 ;;		__doprnt
  2512 ;; This function is called by:
  2513 ;;		_packageCompartment
  2514 ;; This function uses a non-reentrant model
  2515 ;;
  2516                           
  2517                           	psect	text2
  2518  00EED4                     __ptext2:
  2519                           	opt stack 0
  2520  00EED4                     _sprintf:
  2521                           	opt stack 26
  2522                           
  2523                           ;incstack = 0
  2524  00EED4  C029  F033         	movff	sprintf@wh,sprintf@pb
  2525  00EED8  C02A  F034         	movff	sprintf@wh+1,sprintf@pb+1
  2526  00EEDC  0E00               	movlw	0
  2527  00EEDE  6E35               	movwf	sprintf@pb+2,c
  2528  00EEE0  0E00               	movlw	0
  2529  00EEE2  6E36               	movwf	sprintf@pb+3,c
  2530  00EEE4  0E2D               	movlw	low (?_sprintf+4)
  2531  00EEE6  6E31               	movwf	sprintf@ap,c
  2532  00EEE8  0E00               	movlw	high (?_sprintf+4)
  2533  00EEEA  6E32               	movwf	sprintf@ap+1,c
  2534  00EEEC  0E33               	movlw	low sprintf@pb
  2535  00EEEE  6E17               	movwf	__doprnt@pb,c
  2536  00EEF0  0E00               	movlw	high sprintf@pb
  2537  00EEF2  6E18               	movwf	__doprnt@pb+1,c
  2538  00EEF4  C02B  F019         	movff	sprintf@f,__doprnt@f
  2539  00EEF8  C02C  F01A         	movff	sprintf@f+1,__doprnt@f+1
  2540  00EEFC  0E31               	movlw	low sprintf@ap
  2541  00EEFE  6E1B               	movwf	__doprnt@ap,c
  2542  00EF00  0E00               	movlw	high sprintf@ap
  2543  00EF02  6E1C               	movwf	__doprnt@ap+1,c
  2544  00EF04  EC2D  F07C         	call	__doprnt	;wreg free
  2545  00EF08  C033  FFD9         	movff	sprintf@pb,fsr2l
  2546  00EF0C  C034  FFDA         	movff	sprintf@pb+1,fsr2h
  2547  00EF10  0E00               	movlw	0
  2548  00EF12  6EDF               	movwf	indf2,c
  2549  00EF14  0012               	return	
  2550  00EF16                     __end_of_sprintf:
  2551                           	opt stack 0
  2552                           tblptru	equ	0xFF8
  2553                           tblptrh	equ	0xFF7
  2554                           tblptrl	equ	0xFF6
  2555                           tablat	equ	0xFF5
  2556                           postinc0	equ	0xFEE
  2557                           wreg	equ	0xFE8
  2558                           postdec1	equ	0xFE5
  2559                           fsr1l	equ	0xFE1
  2560                           indf2	equ	0xFDF
  2561                           fsr2h	equ	0xFDA
  2562                           fsr2l	equ	0xFD9
  2563                           status	equ	0xFD8
  2564                           
  2565 ;; *************** function _printf *****************
  2566 ;; Defined at:
  2567 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\printf.c"
  2568 ;; Parameters:    Size  Location     Type
  2569 ;;  f               2   40[COMRAM] PTR const unsigned char 
  2570 ;;		 -> STR_17(12), STR_16(9), STR_11(9), packageCompartment@currTimeString(33), 
  2571 ;;		 -> STR_3(13), 
  2572 ;; Auto vars:     Size  Location     Type
  2573 ;;  pb              4   50[COMRAM] struct __prbuf
  2574 ;;  ap              2   48[COMRAM] PTR void [1]
  2575 ;;		 -> ?_sprintf(2), ?_printf(2), 
  2576 ;; Return value:  Size  Location     Type
  2577 ;;                  2   40[COMRAM] int 
  2578 ;; Registers used:
  2579 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2580 ;; Tracked objects:
  2581 ;;		On entry : 0/0
  2582 ;;		On exit  : 0/0
  2583 ;;		Unchanged: 0/0
  2584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2585 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2586 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2588 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2589 ;;Total ram usage:       14 bytes
  2590 ;; Hardware stack levels used:    1
  2591 ;; Hardware stack levels required when called:    3
  2592 ;; This function calls:
  2593 ;;		__doprnt
  2594 ;; This function is called by:
  2595 ;;		_packageCompartment
  2596 ;;		_main
  2597 ;;		_mainMenu
  2598 ;; This function uses a non-reentrant model
  2599 ;;
  2600                           
  2601                           	psect	text3
  2602  00EE9E                     __ptext3:
  2603                           	opt stack 0
  2604  00EE9E                     _printf:
  2605                           	opt stack 27
  2606                           
  2607                           ;incstack = 0
  2608  00EE9E  0E00               	movlw	0
  2609  00EEA0  6E33               	movwf	printf@pb,c
  2610  00EEA2  0E00               	movlw	0
  2611  00EEA4  6E34               	movwf	printf@pb+1,c
  2612  00EEA6  0E40               	movlw	low _putch
  2613  00EEA8  6E35               	movwf	printf@pb+2,c
  2614  00EEAA  0EEE               	movlw	high _putch
  2615  00EEAC  6E36               	movwf	printf@pb+3,c
  2616  00EEAE  0E2B               	movlw	low (?_printf+2)
  2617  00EEB0  6E31               	movwf	printf@ap,c
  2618  00EEB2  0E00               	movlw	high (?_printf+2)
  2619  00EEB4  6E32               	movwf	printf@ap+1,c
  2620                           
  2621                           ;	Return value of _printf is never used
  2622  00EEB6  0E33               	movlw	low printf@pb
  2623  00EEB8  6E17               	movwf	__doprnt@pb,c
  2624  00EEBA  0E00               	movlw	high printf@pb
  2625  00EEBC  6E18               	movwf	__doprnt@pb+1,c
  2626  00EEBE  C029  F019         	movff	printf@f,__doprnt@f
  2627  00EEC2  C02A  F01A         	movff	printf@f+1,__doprnt@f+1
  2628  00EEC6  0E31               	movlw	low printf@ap
  2629  00EEC8  6E1B               	movwf	__doprnt@ap,c
  2630  00EECA  0E00               	movlw	high printf@ap
  2631  00EECC  6E1C               	movwf	__doprnt@ap+1,c
  2632  00EECE  EC2D  F07C         	call	__doprnt	;wreg free
  2633  00EED2  0012               	return	
  2634  00EED4                     __end_of_printf:
  2635                           	opt stack 0
  2636                           tblptru	equ	0xFF8
  2637                           tblptrh	equ	0xFF7
  2638                           tblptrl	equ	0xFF6
  2639                           tablat	equ	0xFF5
  2640                           postinc0	equ	0xFEE
  2641                           wreg	equ	0xFE8
  2642                           postdec1	equ	0xFE5
  2643                           fsr1l	equ	0xFE1
  2644                           indf2	equ	0xFDF
  2645                           fsr2h	equ	0xFDA
  2646                           fsr2l	equ	0xFD9
  2647                           status	equ	0xFD8
  2648                           
  2649 ;; *************** function __doprnt *****************
  2650 ;; Defined at:
  2651 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2652 ;; Parameters:    Size  Location     Type
  2653 ;;  pb              2   22[COMRAM] PTR struct __prbuf
  2654 ;;		 -> sprintf@pb(4), printf@pb(4), 
  2655 ;;  f               2   24[COMRAM] PTR const unsigned char 
  2656 ;;		 -> STR_17(12), STR_16(9), STR_11(9), STR_4(4), 
  2657 ;;		 -> packageCompartment@currTimeString(33), STR_3(13), 
  2658 ;;  ap              2   26[COMRAM] PTR PTR void 
  2659 ;;		 -> sprintf@ap(2), printf@ap(2), 
  2660 ;; Auto vars:     Size  Location     Type
  2661 ;;  val             4   33[COMRAM] unsigned long 
  2662 ;;  tmpval          4    0        struct .
  2663 ;;  cp              2   37[COMRAM] PTR const unsigned char 
  2664 ;;		 -> ?_sprintf(2), ?_printf(2), NULL(0), STR_18(7), 
  2665 ;;		 -> fSLookup(105), packageCompartment@currTimeString(33), 
  2666 ;;  prec            2   30[COMRAM] int 
  2667 ;;  len             2    0        unsigned int 
  2668 ;;  c               1   39[COMRAM] char 
  2669 ;;  flag            1   32[COMRAM] unsigned char 
  2670 ;; Return value:  Size  Location     Type
  2671 ;;                  2   22[COMRAM] int 
  2672 ;; Registers used:
  2673 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2674 ;; Tracked objects:
  2675 ;;		On entry : 0/0
  2676 ;;		On exit  : 0/0
  2677 ;;		Unchanged: 0/0
  2678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2679 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2680 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2681 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2682 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2683 ;;Total ram usage:       18 bytes
  2684 ;; Hardware stack levels used:    1
  2685 ;; Hardware stack levels required when called:    2
  2686 ;; This function calls:
  2687 ;;		Absolute function
  2688 ;;		___lldiv
  2689 ;;		___llmod
  2690 ;;		_putch
  2691 ;; This function is called by:
  2692 ;;		_printf
  2693 ;;		_sprintf
  2694 ;; This function uses a non-reentrant model
  2695 ;;
  2696                           
  2697                           	psect	text4
  2698  00F85A                     __ptext4:
  2699                           	opt stack 0
  2700  00F85A                     __doprnt:
  2701                           	opt stack 27
  2702                           
  2703                           ;doprnt.c: 499: signed char c;
  2704                           ;doprnt.c: 504: int prec;
  2705                           ;doprnt.c: 508: unsigned char flag;
  2706                           ;doprnt.c: 523: union {
  2707                           ;doprnt.c: 524: unsigned long vd;
  2708                           ;doprnt.c: 525: double integ;
  2709                           ;doprnt.c: 526: } tmpval;
  2710                           ;doprnt.c: 528: unsigned long val;
  2711                           ;doprnt.c: 529: unsigned len;
  2712                           ;doprnt.c: 530: const char * cp;
  2713                           ;doprnt.c: 536: while(c = *f++) {
  2714                           
  2715                           ;incstack = 0
  2716  00F85A  D22A               	goto	u1900
  2717  00F85C                     
  2718                           ;doprnt.c: 538: if(c != '%')
  2719  00F85C  0E25               	movlw	37
  2720  00F85E  1828               	xorwf	__doprnt@c,w,c
  2721  00F860  B4D8               	btfsc	status,2,c
  2722  00F862  D019               	goto	l451
  2723                           
  2724                           ;doprnt.c: 540: {
  2725                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  2726  00F864  EE20 F002          	lfsr	2,2
  2727  00F868  5017               	movf	__doprnt@pb,w,c
  2728  00F86A  26D9               	addwf	fsr2l,f,c
  2729  00F86C  5018               	movf	__doprnt@pb+1,w,c
  2730  00F86E  22DA               	addwfc	fsr2h,f,c
  2731  00F870  50DE               	movf	postinc2,w,c
  2732  00F872  10DE               	iorwf	postinc2,w,c
  2733  00F874  B4D8               	btfsc	status,2,c
  2734  00F876  D0C0               	goto	l470
  2735  00F878  EE20 F002          	lfsr	2,2
  2736  00F87C  5017               	movf	__doprnt@pb,w,c
  2737  00F87E  26D9               	addwf	fsr2l,f,c
  2738  00F880  5018               	movf	__doprnt@pb+1,w,c
  2739  00F882  22DA               	addwfc	fsr2h,f,c
  2740  00F884  CFDE F01D          	movff	postinc2,??__doprnt
  2741  00F888  CFDD F01E          	movff	postdec2,??__doprnt+1
  2742  00F88C  D801               	call	u1698
  2743  00F88E  D210               	goto	u1900
  2744  00F890                     u1698:
  2745  00F890  0005               	push	
  2746  00F892  6EFA               	movwf	pclath,c
  2747  00F894  D0A9               	goto	L1
  2748  00F896                     l451:
  2749                           
  2750                           ;doprnt.c: 543: }
  2751                           ;doprnt.c: 548: flag = 0;
  2752  00F896  0E00               	movlw	0
  2753  00F898  6E21               	movwf	__doprnt@flag,c
  2754                           
  2755                           ;doprnt.c: 635: switch(c = *f++) {
  2756                           
  2757                           ;doprnt.c: 633: loop:
  2758  00F89A  D0C4               	goto	l455
  2759  00F89C                     
  2760                           ;doprnt.c: 643: flag |= 0x10;
  2761  00F89C  8821               	bsf	__doprnt@flag,4,c
  2762                           
  2763                           ;doprnt.c: 644: goto loop;
  2764  00F89E  D0C2               	goto	l455
  2765  00F8A0                     
  2766                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  2767  00F8A0  C01B  FFD9         	movff	__doprnt@ap,fsr2l
  2768  00F8A4  C01C  FFDA         	movff	__doprnt@ap+1,fsr2h
  2769  00F8A8  CFDF F01D          	movff	indf2,??__doprnt
  2770  00F8AC  0E02               	movlw	2
  2771  00F8AE  26DE               	addwf	postinc2,f,c
  2772  00F8B0  CFDF F01E          	movff	indf2,??__doprnt+1
  2773  00F8B4  0E00               	movlw	0
  2774  00F8B6  22DD               	addwfc	postdec2,f,c
  2775  00F8B8  C01D  FFD9         	movff	??__doprnt,fsr2l
  2776  00F8BC  C01E  FFDA         	movff	??__doprnt+1,fsr2h
  2777  00F8C0  CFDE F026          	movff	postinc2,__doprnt@cp
  2778  00F8C4  CFDD F027          	movff	postdec2,__doprnt@cp+1
  2779                           
  2780                           ;doprnt.c: 740: if(!cp)
  2781  00F8C8  5026               	movf	__doprnt@cp,w,c
  2782  00F8CA  1027               	iorwf	__doprnt@cp+1,w,c
  2783  00F8CC  A4D8               	btfss	status,2,c
  2784  00F8CE  D05F               	goto	l467
  2785                           
  2786                           ;doprnt.c: 741: cp = "(null)";
  2787  00F8D0  0EF4               	movlw	low STR_18
  2788  00F8D2  6E26               	movwf	__doprnt@cp,c
  2789  00F8D4  0EFF               	movlw	high STR_18
  2790  00F8D6  6E27               	movwf	__doprnt@cp+1,c
  2791                           
  2792                           ;doprnt.c: 777: while(*cp)
  2793  00F8D8  D05A               	goto	l467
  2794  00F8DA                     
  2795                           ;doprnt.c: 778: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
  2796  00F8DA  EE20 F002          	lfsr	2,2
  2797  00F8DE  5017               	movf	__doprnt@pb,w,c
  2798  00F8E0  26D9               	addwf	fsr2l,f,c
  2799  00F8E2  5018               	movf	__doprnt@pb+1,w,c
  2800  00F8E4  22DA               	addwfc	fsr2h,f,c
  2801  00F8E6  50DE               	movf	postinc2,w,c
  2802  00F8E8  10DE               	iorwf	postinc2,w,c
  2803  00F8EA  B4D8               	btfsc	status,2,c
  2804  00F8EC  D029               	goto	l466
  2805  00F8EE  EE20 F002          	lfsr	2,2
  2806  00F8F2  5017               	movf	__doprnt@pb,w,c
  2807  00F8F4  26D9               	addwf	fsr2l,f,c
  2808  00F8F6  5018               	movf	__doprnt@pb+1,w,c
  2809  00F8F8  22DA               	addwfc	fsr2h,f,c
  2810  00F8FA  CFDE F01D          	movff	postinc2,??__doprnt
  2811  00F8FE  CFDD F01E          	movff	postdec2,??__doprnt+1
  2812  00F902  D801               	call	u1728
  2813  00F904  D01A               	goto	u1729
  2814  00F906                     u1728:
  2815  00F906  0005               	push	
  2816  00F908  6EFA               	movwf	pclath,c
  2817  00F90A  501D               	movf	??__doprnt,w,c
  2818  00F90C  6EFD               	movwf	tosl,c
  2819  00F90E  501E               	movf	??__doprnt+1,w,c
  2820  00F910  6EFE               	movwf	tosh,c
  2821  00F912  6AFF               	clrf	tosu,c
  2822  00F914  50FA               	movf	pclath,w,c
  2823  00F916  C026  FFF6         	movff	__doprnt@cp,tblptrl
  2824  00F91A  C027  FFF7         	movff	__doprnt@cp+1,tblptrh
  2825  00F91E  0E00               	movlw	low (__mediumconst shr (0+16))
  2826  00F920  6EF8               	movwf	tblptru,c
  2827  00F922  0E0F               	movlw	(high __ramtop+-1)
  2828  00F924  64F7               	cpfsgt	tblptrh,c
  2829  00F926  D003               	bra	u1737
  2830  00F928  0008               	tblrd		*
  2831  00F92A  50F5               	movf	tablat,w,c
  2832  00F92C  D005               	bra	u1730
  2833  00F92E                     u1737:
  2834  00F92E  CFF6 FFE9          	movff	tblptrl,fsr0l
  2835  00F932  CFF7 FFEA          	movff	tblptrh,fsr0h
  2836  00F936  50EF               	movf	indf0,w,c
  2837  00F938                     u1730:
  2838  00F938  0012               	return		;indir
  2839  00F93A                     u1729:
  2840  00F93A  4A26               	infsnz	__doprnt@cp,f,c
  2841  00F93C  2A27               	incf	__doprnt@cp+1,f,c
  2842  00F93E  D027               	goto	l467
  2843  00F940                     l466:
  2844  00F940  C026  FFF6         	movff	__doprnt@cp,tblptrl
  2845  00F944  C027  FFF7         	movff	__doprnt@cp+1,tblptrh
  2846  00F948  0E00               	movlw	low (__mediumconst shr (0+16))
  2847  00F94A  6EF8               	movwf	tblptru,c
  2848  00F94C  C017  FFD9         	movff	__doprnt@pb,fsr2l
  2849  00F950  C018  FFDA         	movff	__doprnt@pb+1,fsr2h
  2850  00F954  CFDE F01D          	movff	postinc2,??__doprnt
  2851  00F958  CFDD F01E          	movff	postdec2,??__doprnt+1
  2852  00F95C  C01D  FFD9         	movff	??__doprnt,fsr2l
  2853  00F960  C01E  FFDA         	movff	??__doprnt+1,fsr2h
  2854  00F964  0E0F               	movlw	(high __ramtop+-1)
  2855  00F966  64F7               	cpfsgt	tblptrh,c
  2856  00F968  D003               	bra	u1747
  2857  00F96A  0008               	tblrd		*
  2858  00F96C  50F5               	movf	tablat,w,c
  2859  00F96E  D005               	bra	u1740
  2860  00F970                     u1747:
  2861  00F970  CFF6 FFE9          	movff	tblptrl,fsr0l
  2862  00F974  CFF7 FFEA          	movff	tblptrh,fsr0h
  2863  00F978  50EF               	movf	indf0,w,c
  2864  00F97A                     u1740:
  2865  00F97A  6EDF               	movwf	indf2,c
  2866  00F97C  4A26               	infsnz	__doprnt@cp,f,c
  2867  00F97E  2A27               	incf	__doprnt@cp+1,f,c
  2868  00F980  C017  FFD9         	movff	__doprnt@pb,fsr2l
  2869  00F984  C018  FFDA         	movff	__doprnt@pb+1,fsr2h
  2870  00F988  2ADE               	incf	postinc2,f,c
  2871  00F98A  0E00               	movlw	0
  2872  00F98C  22DD               	addwfc	postdec2,f,c
  2873  00F98E                     l467:
  2874  00F98E  C026  FFF6         	movff	__doprnt@cp,tblptrl
  2875  00F992  C027  FFF7         	movff	__doprnt@cp+1,tblptrh
  2876  00F996  0E00               	movlw	low (__mediumconst shr (0+16))
  2877  00F998  6EF8               	movwf	tblptru,c
  2878  00F99A  0E0F               	movlw	(high __ramtop+-1)
  2879  00F99C  64F7               	cpfsgt	tblptrh,c
  2880  00F99E  D003               	bra	u1757
  2881  00F9A0  0008               	tblrd		*
  2882  00F9A2  50F5               	movf	tablat,w,c
  2883  00F9A4  D005               	bra	u1750
  2884  00F9A6                     u1757:
  2885  00F9A6  CFF6 FFE9          	movff	tblptrl,fsr0l
  2886  00F9AA  CFF7 FFEA          	movff	tblptrh,fsr0h
  2887  00F9AE  50EF               	movf	indf0,w,c
  2888  00F9B0                     u1750:
  2889  00F9B0  0900               	iorlw	0
  2890  00F9B2  B4D8               	btfsc	status,2,c
  2891  00F9B4  D17D               	goto	u1900
  2892  00F9B6  D791               	goto	l465
  2893  00F9B8                     
  2894                           ;doprnt.c: 809: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  2895  00F9B8  EE20 F002          	lfsr	2,2
  2896  00F9BC  5017               	movf	__doprnt@pb,w,c
  2897  00F9BE  26D9               	addwf	fsr2l,f,c
  2898  00F9C0  5018               	movf	__doprnt@pb+1,w,c
  2899  00F9C2  22DA               	addwfc	fsr2h,f,c
  2900  00F9C4  50DE               	movf	postinc2,w,c
  2901  00F9C6  10DE               	iorwf	postinc2,w,c
  2902  00F9C8  B4D8               	btfsc	status,2,c
  2903  00F9CA  D016               	goto	l470
  2904  00F9CC  EE20 F002          	lfsr	2,2
  2905  00F9D0  5017               	movf	__doprnt@pb,w,c
  2906  00F9D2  26D9               	addwf	fsr2l,f,c
  2907  00F9D4  5018               	movf	__doprnt@pb+1,w,c
  2908  00F9D6  22DA               	addwfc	fsr2h,f,c
  2909  00F9D8  CFDE F01D          	movff	postinc2,??__doprnt
  2910  00F9DC  CFDD F01E          	movff	postdec2,??__doprnt+1
  2911  00F9E0  D801               	call	u1788
  2912  00F9E2  D166               	goto	u1900
  2913  00F9E4                     u1788:
  2914  00F9E4  0005               	push	
  2915  00F9E6  6EFA               	movwf	pclath,c
  2916  00F9E8                     L1:
  2917  00F9E8  501D               	movf	??__doprnt,w,c
  2918  00F9EA  6EFD               	movwf	tosl,c
  2919  00F9EC  501E               	movf	??__doprnt+1,w,c
  2920  00F9EE  6EFE               	movwf	tosh,c
  2921  00F9F0  6AFF               	clrf	tosu,c
  2922  00F9F2  50FA               	movf	pclath,w,c
  2923  00F9F4  5028               	movf	__doprnt@c,w,c
  2924  00F9F6  0012               	return		;indir
  2925  00F9F8                     l470:
  2926  00F9F8  C017  FFD9         	movff	__doprnt@pb,fsr2l
  2927  00F9FC  C018  FFDA         	movff	__doprnt@pb+1,fsr2h
  2928  00FA00  CFDE F01D          	movff	postinc2,??__doprnt
  2929  00FA04  CFDD F01E          	movff	postdec2,??__doprnt+1
  2930  00FA08  C01D  FFD9         	movff	??__doprnt,fsr2l
  2931  00FA0C  C01E  FFDA         	movff	??__doprnt+1,fsr2h
  2932  00FA10  C028  FFDF         	movff	__doprnt@c,indf2
  2933  00FA14  C017  FFD9         	movff	__doprnt@pb,fsr2l
  2934  00FA18  C018  FFDA         	movff	__doprnt@pb+1,fsr2h
  2935  00FA1C  2ADE               	incf	postinc2,f,c
  2936  00FA1E  0E00               	movlw	0
  2937  00FA20  22DD               	addwfc	postdec2,f,c
  2938                           
  2939                           ;doprnt.c: 810: continue;
  2940  00FA22  D146               	goto	u1900
  2941  00FA24                     l455:
  2942  00FA24  5019               	movf	__doprnt@f,w,c
  2943  00FA26  6E1D               	movwf	??__doprnt& (0+255),c
  2944  00FA28  501A               	movf	__doprnt@f+1,w,c
  2945  00FA2A  6E1E               	movwf	(??__doprnt+1)& (0+255),c
  2946  00FA2C  4A19               	infsnz	__doprnt@f,f,c
  2947  00FA2E  2A1A               	incf	__doprnt@f+1,f,c
  2948  00FA30  C01D  FFF6         	movff	??__doprnt,tblptrl
  2949  00FA34  C01E  FFF7         	movff	??__doprnt+1,tblptrh
  2950  00FA38  0E00               	movlw	low (__mediumconst shr (0+16))
  2951  00FA3A  6EF8               	movwf	tblptru,c
  2952  00FA3C  0E0F               	movlw	(high __ramtop+-1)
  2953  00FA3E  64F7               	cpfsgt	tblptrh,c
  2954  00FA40  D003               	bra	u1797
  2955  00FA42  0008               	tblrd		*
  2956  00FA44  50F5               	movf	tablat,w,c
  2957  00FA46  D005               	bra	u1790
  2958  00FA48                     u1797:
  2959  00FA48  CFF6 FFE9          	movff	tblptrl,fsr0l
  2960  00FA4C  CFF7 FFEA          	movff	tblptrh,fsr0h
  2961  00FA50  50EF               	movf	indf0,w,c
  2962  00FA52                     u1790:
  2963  00FA52  6E28               	movwf	__doprnt@c,c
  2964  00FA54  5028               	movf	__doprnt@c,w,c
  2965                           
  2966                           ; Switch size 1, requested type "space"
  2967                           ; Number of cases is 5, Range of values is 0 to 115
  2968                           ; switch strategies available:
  2969                           ; Name         Instructions Cycles
  2970                           ; simple_byte           16     9 (average)
  2971                           ;	Chosen strategy is simple_byte
  2972  00FA56  0A00               	xorlw	0	; case 0
  2973  00FA58  B4D8               	btfsc	status,2,c
  2974  00FA5A  D145               	goto	u1920
  2975  00FA5C  0A64               	xorlw	100	; case 100
  2976  00FA5E  B4D8               	btfsc	status,2,c
  2977  00FA60  D00A               	goto	l461
  2978  00FA62  0A0D               	xorlw	13	; case 105
  2979  00FA64  B4D8               	btfsc	status,2,c
  2980  00FA66  D007               	goto	l461
  2981  00FA68  0A05               	xorlw	5	; case 108
  2982  00FA6A  B4D8               	btfsc	status,2,c
  2983  00FA6C  D717               	goto	l458
  2984  00FA6E  0A1F               	xorlw	31	; case 115
  2985  00FA70  B4D8               	btfsc	status,2,c
  2986  00FA72  D716               	goto	l462
  2987  00FA74  D7A1               	goto	l469
  2988  00FA76                     l461:
  2989                           
  2990                           ;doprnt.c: 1253: {
  2991                           ;doprnt.c: 1255: if(flag & 0x10)
  2992  00FA76  A821               	btfss	__doprnt@flag,4,c
  2993  00FA78  D019               	goto	l472
  2994                           
  2995                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  2996  00FA7A  C01B  FFD9         	movff	__doprnt@ap,fsr2l
  2997  00FA7E  C01C  FFDA         	movff	__doprnt@ap+1,fsr2h
  2998  00FA82  CFDF F01D          	movff	indf2,??__doprnt
  2999  00FA86  0E04               	movlw	4
  3000  00FA88  26DE               	addwf	postinc2,f,c
  3001  00FA8A  CFDF F01E          	movff	indf2,??__doprnt+1
  3002  00FA8E  0E00               	movlw	0
  3003  00FA90  22DD               	addwfc	postdec2,f,c
  3004  00FA92  C01D  FFD9         	movff	??__doprnt,fsr2l
  3005  00FA96  C01E  FFDA         	movff	??__doprnt+1,fsr2h
  3006  00FA9A  CFDE F022          	movff	postinc2,__doprnt@val
  3007  00FA9E  CFDE F023          	movff	postinc2,__doprnt@val+1
  3008  00FAA2  CFDE F024          	movff	postinc2,__doprnt@val+2
  3009  00FAA6  CFDE F025          	movff	postinc2,__doprnt@val+3
  3010  00FAAA  D019               	goto	l473
  3011  00FAAC                     l472:
  3012                           
  3013                           ;doprnt.c: 1257: else
  3014                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  3015  00FAAC  C01B  FFD9         	movff	__doprnt@ap,fsr2l
  3016  00FAB0  C01C  FFDA         	movff	__doprnt@ap+1,fsr2h
  3017  00FAB4  CFDF F01D          	movff	indf2,??__doprnt
  3018  00FAB8  0E02               	movlw	2
  3019  00FABA  26DE               	addwf	postinc2,f,c
  3020  00FABC  CFDF F01E          	movff	indf2,??__doprnt+1
  3021  00FAC0  0E00               	movlw	0
  3022  00FAC2  22DD               	addwfc	postdec2,f,c
  3023  00FAC4  C01D  FFD9         	movff	??__doprnt,fsr2l
  3024  00FAC8  C01E  FFDA         	movff	??__doprnt+1,fsr2h
  3025  00FACC  CFDE F022          	movff	postinc2,__doprnt@val
  3026  00FAD0  CFDD F023          	movff	postdec2,__doprnt@val+1
  3027  00FAD4  0E00               	movlw	0
  3028  00FAD6  BE23               	btfsc	__doprnt@val+1,7,c
  3029  00FAD8  0EFF               	movlw	-1
  3030  00FADA  6E24               	movwf	__doprnt@val+2,c
  3031  00FADC  6E25               	movwf	__doprnt@val+3,c
  3032  00FADE                     l473:
  3033                           
  3034                           ;doprnt.c: 1261: if((long)val < 0) {
  3035  00FADE  AE25               	btfss	__doprnt@val+3,7,c
  3036  00FAE0  D00A               	goto	l474
  3037                           
  3038                           ;doprnt.c: 1262: flag |= 0x03;
  3039  00FAE2  0E03               	movlw	3
  3040  00FAE4  1221               	iorwf	__doprnt@flag,f,c
  3041                           
  3042                           ;doprnt.c: 1263: val = -val;
  3043  00FAE6  1E25               	comf	__doprnt@val+3,f,c
  3044  00FAE8  1E24               	comf	__doprnt@val+2,f,c
  3045  00FAEA  1E23               	comf	__doprnt@val+1,f,c
  3046  00FAEC  6C22               	negf	__doprnt@val,c
  3047  00FAEE  0E00               	movlw	0
  3048  00FAF0  2223               	addwfc	__doprnt@val+1,f,c
  3049  00FAF2  2224               	addwfc	__doprnt@val+2,f,c
  3050  00FAF4  2225               	addwfc	__doprnt@val+3,f,c
  3051  00FAF6                     l474:
  3052                           
  3053                           ;doprnt.c: 1264: }
  3054                           ;doprnt.c: 1266: }
  3055                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3056  00FAF6  0E01               	movlw	1
  3057  00FAF8  6E28               	movwf	__doprnt@c,c
  3058  00FAFA                     l2267:
  3059  00FAFA  0E0A               	movlw	10
  3060  00FAFC  1828               	xorwf	__doprnt@c,w,c
  3061  00FAFE  B4D8               	btfsc	status,2,c
  3062  00FB00  D01B               	goto	u1840
  3063                           
  3064                           ;doprnt.c: 1306: if(val < dpowers[c])
  3065  00FB02  5028               	movf	__doprnt@c,w,c
  3066  00FB04  0D04               	mullw	4
  3067  00FB06  0EF1               	movlw	low _dpowers
  3068  00FB08  24F3               	addwf	prodl,w,c
  3069  00FB0A  6EF6               	movwf	tblptrl,c
  3070  00FB0C  0EFC               	movlw	high _dpowers
  3071  00FB0E  20F4               	addwfc	prodh,w,c
  3072  00FB10  6EF7               	movwf	tblptrh,c
  3073  00FB12                     	if	1	;There are 3 active tblptr bytes
  3074  00FB12  6AF8               	clrf	tblptru,c
  3075  00FB14  0E00               	movlw	low (__mediumconst shr (0+16))
  3076  00FB16  22F8               	addwfc	tblptru,f,c
  3077  00FB18                     	endif
  3078  00FB18  0009               	tblrd		*+
  3079  00FB1A  50F5               	movf	tablat,w,c
  3080  00FB1C  5C22               	subwf	__doprnt@val,w,c
  3081  00FB1E  0009               	tblrd		*+
  3082  00FB20  50F5               	movf	tablat,w,c
  3083  00FB22  5823               	subwfb	__doprnt@val+1,w,c
  3084  00FB24  0009               	tblrd		*+
  3085  00FB26  50F5               	movf	tablat,w,c
  3086  00FB28  5824               	subwfb	__doprnt@val+2,w,c
  3087  00FB2A  0009               	tblrd		*+
  3088  00FB2C  50F5               	movf	tablat,w,c
  3089  00FB2E  5825               	subwfb	__doprnt@val+3,w,c
  3090  00FB30  A0D8               	btfss	status,0,c
  3091  00FB32  D002               	goto	u1840
  3092                           
  3093                           ;doprnt.c: 1307: break;
  3094  00FB34  2A28               	incf	__doprnt@c,f,c
  3095  00FB36  D7E1               	goto	l2267
  3096  00FB38                     u1840:
  3097                           
  3098                           ;doprnt.c: 1422: {
  3099                           ;doprnt.c: 1438: if(flag & 0x03)
  3100  00FB38  C021  F01D         	movff	__doprnt@flag,??__doprnt
  3101  00FB3C  0E03               	movlw	3
  3102  00FB3E  161D               	andwf	??__doprnt,f,c
  3103  00FB40  B4D8               	btfsc	status,2,c
  3104  00FB42  D035               	goto	l480
  3105                           
  3106                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  3107  00FB44  EE20 F002          	lfsr	2,2
  3108  00FB48  5017               	movf	__doprnt@pb,w,c
  3109  00FB4A  26D9               	addwf	fsr2l,f,c
  3110  00FB4C  5018               	movf	__doprnt@pb+1,w,c
  3111  00FB4E  22DA               	addwfc	fsr2h,f,c
  3112  00FB50  50DE               	movf	postinc2,w,c
  3113  00FB52  10DE               	iorwf	postinc2,w,c
  3114  00FB54  B4D8               	btfsc	status,2,c
  3115  00FB56  D016               	goto	l479
  3116  00FB58  EE20 F002          	lfsr	2,2
  3117  00FB5C  5017               	movf	__doprnt@pb,w,c
  3118  00FB5E  26D9               	addwf	fsr2l,f,c
  3119  00FB60  5018               	movf	__doprnt@pb+1,w,c
  3120  00FB62  22DA               	addwfc	fsr2h,f,c
  3121  00FB64  CFDE F01D          	movff	postinc2,??__doprnt
  3122  00FB68  CFDD F01E          	movff	postdec2,??__doprnt+1
  3123  00FB6C  D801               	call	u1878
  3124  00FB6E  D01F               	goto	l480
  3125  00FB70                     u1878:
  3126  00FB70  0005               	push	
  3127  00FB72  6EFA               	movwf	pclath,c
  3128  00FB74  501D               	movf	??__doprnt,w,c
  3129  00FB76  6EFD               	movwf	tosl,c
  3130  00FB78  501E               	movf	??__doprnt+1,w,c
  3131  00FB7A  6EFE               	movwf	tosh,c
  3132  00FB7C  6AFF               	clrf	tosu,c
  3133  00FB7E  50FA               	movf	pclath,w,c
  3134  00FB80  0E2D               	movlw	45
  3135  00FB82  0012               	return		;indir
  3136  00FB84                     l479:
  3137  00FB84  C017  FFD9         	movff	__doprnt@pb,fsr2l
  3138  00FB88  C018  FFDA         	movff	__doprnt@pb+1,fsr2h
  3139  00FB8C  CFDE F01D          	movff	postinc2,??__doprnt
  3140  00FB90  CFDD F01E          	movff	postdec2,??__doprnt+1
  3141  00FB94  C01D  FFD9         	movff	??__doprnt,fsr2l
  3142  00FB98  C01E  FFDA         	movff	??__doprnt+1,fsr2h
  3143  00FB9C  0E2D               	movlw	45
  3144  00FB9E  6EDF               	movwf	indf2,c
  3145  00FBA0  C017  FFD9         	movff	__doprnt@pb,fsr2l
  3146  00FBA4  C018  FFDA         	movff	__doprnt@pb+1,fsr2h
  3147  00FBA8  2ADE               	incf	postinc2,f,c
  3148  00FBAA  0E00               	movlw	0
  3149  00FBAC  22DD               	addwfc	postdec2,f,c
  3150  00FBAE                     l480:
  3151                           
  3152                           ;doprnt.c: 1469: }
  3153                           ;doprnt.c: 1472: prec = c;
  3154  00FBAE  5028               	movf	__doprnt@c,w,c
  3155  00FBB0  6E1F               	movwf	__doprnt@prec,c
  3156  00FBB2  6A20               	clrf	__doprnt@prec+1,c
  3157  00FBB4  BE1F               	btfsc	__doprnt@prec,7,c
  3158  00FBB6  0620               	decf	__doprnt@prec+1,f,c
  3159                           
  3160                           ;doprnt.c: 1474: while(prec--) {
  3161  00FBB8  D073               	goto	l484
  3162  00FBBA                     l2291:
  3163                           
  3164                           ;doprnt.c: 1478: {
  3165                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3166  00FBBA  C01F  F01D         	movff	__doprnt@prec,??__doprnt
  3167  00FBBE  C020  F01E         	movff	__doprnt@prec+1,??__doprnt+1
  3168  00FBC2  90D8               	bcf	status,0,c
  3169  00FBC4  361D               	rlcf	??__doprnt,f,c
  3170  00FBC6  361E               	rlcf	??__doprnt+1,f,c
  3171  00FBC8  90D8               	bcf	status,0,c
  3172  00FBCA  361D               	rlcf	??__doprnt,f,c
  3173  00FBCC  361E               	rlcf	??__doprnt+1,f,c
  3174  00FBCE  0EF1               	movlw	low _dpowers
  3175  00FBD0  241D               	addwf	??__doprnt,w,c
  3176  00FBD2  6EF6               	movwf	tblptrl,c
  3177  00FBD4  0EFC               	movlw	high _dpowers
  3178  00FBD6  201E               	addwfc	??__doprnt+1,w,c
  3179  00FBD8  6EF7               	movwf	tblptrh,c
  3180  00FBDA                     	if	1	;There are 3 active tblptr bytes
  3181  00FBDA  6AF8               	clrf	tblptru,c
  3182  00FBDC  0E00               	movlw	low (__mediumconst shr (0+16))
  3183  00FBDE  22F8               	addwfc	tblptru,f,c
  3184  00FBE0                     	endif
  3185  00FBE0  0009               	tblrd		*+
  3186  00FBE2  CFF5 F005          	movff	tablat,___lldiv@divisor
  3187  00FBE6  0009               	tblrd		*+
  3188  00FBE8  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3189  00FBEC  0009               	tblrd		*+
  3190  00FBEE  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3191  00FBF2  000A               	tblrd		*-
  3192  00FBF4  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3193  00FBF8  C022  F001         	movff	__doprnt@val,___lldiv@dividend
  3194  00FBFC  C023  F002         	movff	__doprnt@val+1,___lldiv@dividend+1
  3195  00FC00  C024  F003         	movff	__doprnt@val+2,___lldiv@dividend+2
  3196  00FC04  C025  F004         	movff	__doprnt@val+3,___lldiv@dividend+3
  3197  00FC08  EC1F  F079         	call	___lldiv
  3198  00FC0C  C001  F00E         	movff	?___lldiv,___llmod@dividend
  3199  00FC10  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  3200  00FC14  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  3201  00FC18  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  3202  00FC1C  0E0A               	movlw	10
  3203  00FC1E  6E12               	movwf	___llmod@divisor,c
  3204  00FC20  0E00               	movlw	0
  3205  00FC22  6E13               	movwf	___llmod@divisor+1,c
  3206  00FC24  0E00               	movlw	0
  3207  00FC26  6E14               	movwf	___llmod@divisor+2,c
  3208  00FC28  0E00               	movlw	0
  3209  00FC2A  6E15               	movwf	___llmod@divisor+3,c
  3210  00FC2C  EC04  F078         	call	___llmod	;wreg free
  3211  00FC30  500E               	movf	?___llmod,w,c
  3212  00FC32  0F30               	addlw	48
  3213  00FC34  6E28               	movwf	__doprnt@c,c
  3214                           
  3215                           ;doprnt.c: 1523: }
  3216                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  3217  00FC36  EE20 F002          	lfsr	2,2
  3218  00FC3A  5017               	movf	__doprnt@pb,w,c
  3219  00FC3C  26D9               	addwf	fsr2l,f,c
  3220  00FC3E  5018               	movf	__doprnt@pb+1,w,c
  3221  00FC40  22DA               	addwfc	fsr2h,f,c
  3222  00FC42  50DE               	movf	postinc2,w,c
  3223  00FC44  10DE               	iorwf	postinc2,w,c
  3224  00FC46  B4D8               	btfsc	status,2,c
  3225  00FC48  D016               	goto	l483
  3226  00FC4A  EE20 F002          	lfsr	2,2
  3227  00FC4E  5017               	movf	__doprnt@pb,w,c
  3228  00FC50  26D9               	addwf	fsr2l,f,c
  3229  00FC52  5018               	movf	__doprnt@pb+1,w,c
  3230  00FC54  22DA               	addwfc	fsr2h,f,c
  3231  00FC56  CFDE F01D          	movff	postinc2,??__doprnt
  3232  00FC5A  CFDD F01E          	movff	postdec2,??__doprnt+1
  3233  00FC5E  D801               	call	u1898
  3234  00FC60  D01F               	goto	l484
  3235  00FC62                     u1898:
  3236  00FC62  0005               	push	
  3237  00FC64  6EFA               	movwf	pclath,c
  3238  00FC66  501D               	movf	??__doprnt,w,c
  3239  00FC68  6EFD               	movwf	tosl,c
  3240  00FC6A  501E               	movf	??__doprnt+1,w,c
  3241  00FC6C  6EFE               	movwf	tosh,c
  3242  00FC6E  6AFF               	clrf	tosu,c
  3243  00FC70  50FA               	movf	pclath,w,c
  3244  00FC72  5028               	movf	__doprnt@c,w,c
  3245  00FC74  0012               	return		;indir
  3246  00FC76                     l483:
  3247  00FC76  C017  FFD9         	movff	__doprnt@pb,fsr2l
  3248  00FC7A  C018  FFDA         	movff	__doprnt@pb+1,fsr2h
  3249  00FC7E  CFDE F01D          	movff	postinc2,??__doprnt
  3250  00FC82  CFDD F01E          	movff	postdec2,??__doprnt+1
  3251  00FC86  C01D  FFD9         	movff	??__doprnt,fsr2l
  3252  00FC8A  C01E  FFDA         	movff	??__doprnt+1,fsr2h
  3253  00FC8E  C028  FFDF         	movff	__doprnt@c,indf2
  3254  00FC92  C017  FFD9         	movff	__doprnt@pb,fsr2l
  3255  00FC96  C018  FFDA         	movff	__doprnt@pb+1,fsr2h
  3256  00FC9A  2ADE               	incf	postinc2,f,c
  3257  00FC9C  0E00               	movlw	0
  3258  00FC9E  22DD               	addwfc	postdec2,f,c
  3259  00FCA0                     l484:
  3260  00FCA0  061F               	decf	__doprnt@prec,f,c
  3261  00FCA2  A0D8               	btfss	status,0,c
  3262  00FCA4  0620               	decf	__doprnt@prec+1,f,c
  3263  00FCA6  281F               	incf	__doprnt@prec,w,c
  3264  00FCA8  E188               	bnz	l2291
  3265  00FCAA  2820               	incf	__doprnt@prec+1,w,c
  3266  00FCAC  A4D8               	btfss	status,2,c
  3267  00FCAE  D785               	goto	l482
  3268  00FCB0                     u1900:
  3269  00FCB0  5019               	movf	__doprnt@f,w,c
  3270  00FCB2  6E1D               	movwf	??__doprnt& (0+255),c
  3271  00FCB4  501A               	movf	__doprnt@f+1,w,c
  3272  00FCB6  6E1E               	movwf	(??__doprnt+1)& (0+255),c
  3273  00FCB8  4A19               	infsnz	__doprnt@f,f,c
  3274  00FCBA  2A1A               	incf	__doprnt@f+1,f,c
  3275  00FCBC  C01D  FFF6         	movff	??__doprnt,tblptrl
  3276  00FCC0  C01E  FFF7         	movff	??__doprnt+1,tblptrh
  3277  00FCC4  0E00               	movlw	low (__mediumconst shr (0+16))
  3278  00FCC6  6EF8               	movwf	tblptru,c
  3279  00FCC8  0E0F               	movlw	(high __ramtop+-1)
  3280  00FCCA  64F7               	cpfsgt	tblptrh,c
  3281  00FCCC  D003               	bra	u1917
  3282  00FCCE  0008               	tblrd		*
  3283  00FCD0  50F5               	movf	tablat,w,c
  3284  00FCD2  D005               	bra	u1910
  3285  00FCD4                     u1917:
  3286  00FCD4  CFF6 FFE9          	movff	tblptrl,fsr0l
  3287  00FCD8  CFF7 FFEA          	movff	tblptrh,fsr0h
  3288  00FCDC  50EF               	movf	indf0,w,c
  3289  00FCDE                     u1910:
  3290  00FCDE  6E28               	movwf	__doprnt@c,c
  3291  00FCE0  5028               	movf	__doprnt@c,w,c
  3292  00FCE2  A4D8               	btfss	status,2,c
  3293  00FCE4  D5BB               	goto	l450
  3294  00FCE6                     u1920:
  3295                           
  3296                           ;doprnt.c: 1540: return 0;
  3297                           
  3298                           ;doprnt.c: 1525: }
  3299                           ;doprnt.c: 1533: }
  3300                           ;doprnt.c: 1535: alldone:
  3301  00FCE6  0E00               	movlw	0
  3302  00FCE8  6E18               	movwf	?__doprnt+1,c
  3303  00FCEA  0E00               	movlw	0
  3304  00FCEC  6E17               	movwf	?__doprnt,c
  3305  00FCEE  0012               	return	
  3306  00FCF0                     __end_of__doprnt:
  3307                           	opt stack 0
  3308                           tosu	equ	0xFFF
  3309                           tosh	equ	0xFFE
  3310                           tosl	equ	0xFFD
  3311                           pclath	equ	0xFFA
  3312                           tblptru	equ	0xFF8
  3313                           tblptrh	equ	0xFF7
  3314                           tblptrl	equ	0xFF6
  3315                           tablat	equ	0xFF5
  3316                           prodh	equ	0xFF4
  3317                           prodl	equ	0xFF3
  3318                           indf0	equ	0xFEF
  3319                           postinc0	equ	0xFEE
  3320                           fsr0h	equ	0xFEA
  3321                           fsr0l	equ	0xFE9
  3322                           wreg	equ	0xFE8
  3323                           postdec1	equ	0xFE5
  3324                           fsr1l	equ	0xFE1
  3325                           indf2	equ	0xFDF
  3326                           postinc2	equ	0xFDE
  3327                           postdec2	equ	0xFDD
  3328                           fsr2h	equ	0xFDA
  3329                           fsr2l	equ	0xFD9
  3330                           status	equ	0xFD8
  3331                           
  3332 ;; *************** function _putch *****************
  3333 ;; Defined at:
  3334 ;;		line 25 in file "lcd.c"
  3335 ;; Parameters:    Size  Location     Type
  3336 ;;  data            1    wreg     unsigned char 
  3337 ;; Auto vars:     Size  Location     Type
  3338 ;;  data            1    2[COMRAM] unsigned char 
  3339 ;; Return value:  Size  Location     Type
  3340 ;;                  1    wreg      void 
  3341 ;; Registers used:
  3342 ;;		wreg, status,2, status,0, cstack
  3343 ;; Tracked objects:
  3344 ;;		On entry : 0/0
  3345 ;;		On exit  : 0/0
  3346 ;;		Unchanged: 0/0
  3347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3349 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3351 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3352 ;;Total ram usage:        1 bytes
  3353 ;; Hardware stack levels used:    1
  3354 ;; Hardware stack levels required when called:    1
  3355 ;; This function calls:
  3356 ;;		_lcdNibble
  3357 ;; This function is called by:
  3358 ;;		_printf
  3359 ;;		_inputEntry
  3360 ;;		_mainMenu
  3361 ;;		_printStringLCD
  3362 ;;		__doprnt
  3363 ;; This function uses a non-reentrant model
  3364 ;;
  3365                           
  3366                           	psect	text5
  3367  00EE40                     __ptext5:
  3368                           	opt stack 0
  3369  00EE40                     _putch:
  3370                           	opt stack 27
  3371                           
  3372                           ;incstack = 0
  3373                           ;putch@data stored from wreg
  3374  00EE40  6E03               	movwf	putch@data,c
  3375                           
  3376                           ;lcd.c: 33: LATDbits.LATD2 = 1;
  3377  00EE42  848C               	bsf	3980,2,c	;volatile
  3378                           
  3379                           ;lcd.c: 34: lcdNibble(data);
  3380  00EE44  5003               	movf	putch@data,w,c
  3381  00EE46  ECE0  F078         	call	_lcdNibble
  3382                           
  3383                           ;lcd.c: 35: _delay((unsigned long)((100)*(40000000/4000000.0)));
  3384  00EE4A  0EC8               	movlw	200
  3385  00EE4C                     u3137:
  3386  00EE4C  D000               	nop2	
  3387  00EE4E  2EE8               	decfsz	wreg,f,c
  3388  00EE50  D7FD               	bra	u3137
  3389  00EE52  0012               	return		;funcret
  3390  00EE54                     __end_of_putch:
  3391                           	opt stack 0
  3392                           tosu	equ	0xFFF
  3393                           tosh	equ	0xFFE
  3394                           tosl	equ	0xFFD
  3395                           pclath	equ	0xFFA
  3396                           tblptru	equ	0xFF8
  3397                           tblptrh	equ	0xFF7
  3398                           tblptrl	equ	0xFF6
  3399                           tablat	equ	0xFF5
  3400                           prodh	equ	0xFF4
  3401                           prodl	equ	0xFF3
  3402                           indf0	equ	0xFEF
  3403                           postinc0	equ	0xFEE
  3404                           fsr0h	equ	0xFEA
  3405                           fsr0l	equ	0xFE9
  3406                           wreg	equ	0xFE8
  3407                           postdec1	equ	0xFE5
  3408                           fsr1l	equ	0xFE1
  3409                           indf2	equ	0xFDF
  3410                           postinc2	equ	0xFDE
  3411                           postdec2	equ	0xFDD
  3412                           fsr2h	equ	0xFDA
  3413                           fsr2l	equ	0xFD9
  3414                           status	equ	0xFD8
  3415                           
  3416 ;; *************** function ___llmod *****************
  3417 ;; Defined at:
  3418 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  3419 ;; Parameters:    Size  Location     Type
  3420 ;;  dividend        4   13[COMRAM] unsigned long 
  3421 ;;  divisor         4   17[COMRAM] unsigned long 
  3422 ;; Auto vars:     Size  Location     Type
  3423 ;;  counter         1   21[COMRAM] unsigned char 
  3424 ;; Return value:  Size  Location     Type
  3425 ;;                  4   13[COMRAM] unsigned long 
  3426 ;; Registers used:
  3427 ;;		wreg, status,2, status,0
  3428 ;; Tracked objects:
  3429 ;;		On entry : 0/0
  3430 ;;		On exit  : 0/0
  3431 ;;		Unchanged: 0/0
  3432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3433 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3434 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3436 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3437 ;;Total ram usage:        9 bytes
  3438 ;; Hardware stack levels used:    1
  3439 ;; This function calls:
  3440 ;;		Nothing
  3441 ;; This function is called by:
  3442 ;;		__doprnt
  3443 ;; This function uses a non-reentrant model
  3444 ;;
  3445                           
  3446                           	psect	text6
  3447  00F008                     __ptext6:
  3448                           	opt stack 0
  3449  00F008                     ___llmod:
  3450                           	opt stack 28
  3451                           
  3452                           ;incstack = 0
  3453  00F008  5012               	movf	___llmod@divisor,w,c
  3454  00F00A  1013               	iorwf	___llmod@divisor+1,w,c
  3455  00F00C  1014               	iorwf	___llmod@divisor+2,w,c
  3456  00F00E  1015               	iorwf	___llmod@divisor+3,w,c
  3457  00F010  B4D8               	btfsc	status,2,c
  3458  00F012  D024               	goto	l853
  3459  00F014  0E01               	movlw	1
  3460  00F016  6E16               	movwf	___llmod@counter,c
  3461  00F018  D006               	goto	l848
  3462  00F01A  90D8               	bcf	status,0,c
  3463  00F01C  3612               	rlcf	___llmod@divisor,f,c
  3464  00F01E  3613               	rlcf	___llmod@divisor+1,f,c
  3465  00F020  3614               	rlcf	___llmod@divisor+2,f,c
  3466  00F022  3615               	rlcf	___llmod@divisor+3,f,c
  3467  00F024  2A16               	incf	___llmod@counter,f,c
  3468  00F026                     l848:
  3469  00F026  AE15               	btfss	___llmod@divisor+3,7,c
  3470  00F028  D7F8               	goto	l849
  3471  00F02A                     u1610:
  3472  00F02A  5012               	movf	___llmod@divisor,w,c
  3473  00F02C  5C0E               	subwf	___llmod@dividend,w,c
  3474  00F02E  5013               	movf	___llmod@divisor+1,w,c
  3475  00F030  580F               	subwfb	___llmod@dividend+1,w,c
  3476  00F032  5014               	movf	___llmod@divisor+2,w,c
  3477  00F034  5810               	subwfb	___llmod@dividend+2,w,c
  3478  00F036  5015               	movf	___llmod@divisor+3,w,c
  3479  00F038  5811               	subwfb	___llmod@dividend+3,w,c
  3480  00F03A  A0D8               	btfss	status,0,c
  3481  00F03C  D008               	goto	l852
  3482  00F03E  5012               	movf	___llmod@divisor,w,c
  3483  00F040  5E0E               	subwf	___llmod@dividend,f,c
  3484  00F042  5013               	movf	___llmod@divisor+1,w,c
  3485  00F044  5A0F               	subwfb	___llmod@dividend+1,f,c
  3486  00F046  5014               	movf	___llmod@divisor+2,w,c
  3487  00F048  5A10               	subwfb	___llmod@dividend+2,f,c
  3488  00F04A  5015               	movf	___llmod@divisor+3,w,c
  3489  00F04C  5A11               	subwfb	___llmod@dividend+3,f,c
  3490  00F04E                     l852:
  3491  00F04E  90D8               	bcf	status,0,c
  3492  00F050  3215               	rrcf	___llmod@divisor+3,f,c
  3493  00F052  3214               	rrcf	___llmod@divisor+2,f,c
  3494  00F054  3213               	rrcf	___llmod@divisor+1,f,c
  3495  00F056  3212               	rrcf	___llmod@divisor,f,c
  3496  00F058  2E16               	decfsz	___llmod@counter,f,c
  3497  00F05A  D7E7               	goto	u1610
  3498  00F05C                     l853:
  3499  00F05C  C00E  F00E         	movff	___llmod@dividend,?___llmod
  3500  00F060  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  3501  00F064  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  3502  00F068  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  3503  00F06C  0012               	return		;funcret
  3504  00F06E                     __end_of___llmod:
  3505                           	opt stack 0
  3506                           tosu	equ	0xFFF
  3507                           tosh	equ	0xFFE
  3508                           tosl	equ	0xFFD
  3509                           pclath	equ	0xFFA
  3510                           tblptru	equ	0xFF8
  3511                           tblptrh	equ	0xFF7
  3512                           tblptrl	equ	0xFF6
  3513                           tablat	equ	0xFF5
  3514                           prodh	equ	0xFF4
  3515                           prodl	equ	0xFF3
  3516                           indf0	equ	0xFEF
  3517                           postinc0	equ	0xFEE
  3518                           fsr0h	equ	0xFEA
  3519                           fsr0l	equ	0xFE9
  3520                           wreg	equ	0xFE8
  3521                           postdec1	equ	0xFE5
  3522                           fsr1l	equ	0xFE1
  3523                           indf2	equ	0xFDF
  3524                           postinc2	equ	0xFDE
  3525                           postdec2	equ	0xFDD
  3526                           fsr2h	equ	0xFDA
  3527                           fsr2l	equ	0xFD9
  3528                           status	equ	0xFD8
  3529                           
  3530 ;; *************** function _RTC_getSeconds *****************
  3531 ;; Defined at:
  3532 ;;		line 32 in file "RTC.c"
  3533 ;; Parameters:    Size  Location     Type
  3534 ;;		None
  3535 ;; Auto vars:     Size  Location     Type
  3536 ;;  time            7   12[COMRAM] unsigned char [7]
  3537 ;;  seconds         4   19[COMRAM] long 
  3538 ;; Return value:  Size  Location     Type
  3539 ;;                  4    6[COMRAM] long 
  3540 ;; Registers used:
  3541 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3542 ;; Tracked objects:
  3543 ;;		On entry : 0/0
  3544 ;;		On exit  : 0/0
  3545 ;;		Unchanged: 0/0
  3546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3547 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3548 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3549 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3550 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3551 ;;Total ram usage:       17 bytes
  3552 ;; Hardware stack levels used:    1
  3553 ;; Hardware stack levels required when called:    3
  3554 ;; This function calls:
  3555 ;;		_RTC_getTime
  3556 ;;		___wmul
  3557 ;; This function is called by:
  3558 ;;		_packageCompartment
  3559 ;; This function uses a non-reentrant model
  3560 ;;
  3561                           
  3562                           	psect	text7
  3563  00F14A                     __ptext7:
  3564                           	opt stack 0
  3565  00F14A                     _RTC_getSeconds:
  3566                           	opt stack 26
  3567                           
  3568                           ;RTC.c: 36: unsigned char time[7];
  3569                           ;RTC.c: 37: RTC_getTime(time);
  3570                           
  3571                           ;incstack = 0
  3572  00F14A  0E0D               	movlw	low RTC_getSeconds@time
  3573  00F14C  6E04               	movwf	RTC_getTime@time,c
  3574  00F14E  0E00               	movlw	high RTC_getSeconds@time
  3575  00F150  6E05               	movwf	RTC_getTime@time+1,c
  3576  00F152  EC6C  F078         	call	_RTC_getTime	;wreg free
  3577                           
  3578                           ;RTC.c: 39: long seconds = time[0] + 60*time[1] + 60*60*time[2] + 60*60*24*time[3];
  3579  00F156  C00F  F001         	movff	RTC_getSeconds@time+2,___wmul@multiplier
  3580  00F15A  6A02               	clrf	___wmul@multiplier+1,c
  3581  00F15C  0E0E               	movlw	14
  3582  00F15E  6E04               	movwf	___wmul@multiplicand+1,c
  3583  00F160  0E10               	movlw	16
  3584  00F162  6E03               	movwf	___wmul@multiplicand,c
  3585  00F164  EC3C  F077         	call	___wmul	;wreg free
  3586  00F168  500E               	movf	RTC_getSeconds@time+1,w,c
  3587  00F16A  0D3C               	mullw	60
  3588  00F16C  500D               	movf	RTC_getSeconds@time,w,c
  3589  00F16E  6E0B               	movwf	??_RTC_getSeconds& (0+255),c
  3590  00F170  6A0C               	clrf	(??_RTC_getSeconds+1)& (0+255),c
  3591  00F172  50F3               	movf	prodl,w,c
  3592  00F174  260B               	addwf	??_RTC_getSeconds,f,c
  3593  00F176  50F4               	movf	prodh,w,c
  3594  00F178  220C               	addwfc	??_RTC_getSeconds+1,f,c
  3595  00F17A  5001               	movf	?___wmul,w,c
  3596  00F17C  260B               	addwf	??_RTC_getSeconds,f,c
  3597  00F17E  5002               	movf	?___wmul+1,w,c
  3598  00F180  220C               	addwfc	??_RTC_getSeconds+1,f,c
  3599  00F182  C010  F001         	movff	RTC_getSeconds@time+3,___wmul@multiplier
  3600  00F186  6A02               	clrf	___wmul@multiplier+1,c
  3601  00F188  0E51               	movlw	81
  3602  00F18A  6E04               	movwf	___wmul@multiplicand+1,c
  3603  00F18C  0E80               	movlw	128
  3604  00F18E  6E03               	movwf	___wmul@multiplicand,c
  3605  00F190  EC3C  F077         	call	___wmul	;wreg free
  3606  00F194  5001               	movf	?___wmul,w,c
  3607  00F196  260B               	addwf	??_RTC_getSeconds,f,c
  3608  00F198  5002               	movf	?___wmul+1,w,c
  3609  00F19A  220C               	addwfc	??_RTC_getSeconds+1,f,c
  3610  00F19C  C00B  F014         	movff	??_RTC_getSeconds,RTC_getSeconds@seconds
  3611  00F1A0  C00C  F015         	movff	??_RTC_getSeconds+1,RTC_getSeconds@seconds+1
  3612  00F1A4  0E00               	movlw	0
  3613  00F1A6  BE15               	btfsc	RTC_getSeconds@seconds+1,7,c
  3614  00F1A8  0EFF               	movlw	-1
  3615  00F1AA  6E16               	movwf	RTC_getSeconds@seconds+2,c
  3616  00F1AC  6E17               	movwf	RTC_getSeconds@seconds+3,c
  3617                           
  3618                           ;RTC.c: 40: return seconds;
  3619  00F1AE  C014  F007         	movff	RTC_getSeconds@seconds,?_RTC_getSeconds
  3620  00F1B2  C015  F008         	movff	RTC_getSeconds@seconds+1,?_RTC_getSeconds+1
  3621  00F1B6  C016  F009         	movff	RTC_getSeconds@seconds+2,?_RTC_getSeconds+2
  3622  00F1BA  C017  F00A         	movff	RTC_getSeconds@seconds+3,?_RTC_getSeconds+3
  3623  00F1BE  0012               	return	
  3624  00F1C0                     __end_of_RTC_getSeconds:
  3625                           	opt stack 0
  3626                           tosu	equ	0xFFF
  3627                           tosh	equ	0xFFE
  3628                           tosl	equ	0xFFD
  3629                           pclath	equ	0xFFA
  3630                           tblptru	equ	0xFF8
  3631                           tblptrh	equ	0xFF7
  3632                           tblptrl	equ	0xFF6
  3633                           tablat	equ	0xFF5
  3634                           prodh	equ	0xFF4
  3635                           prodl	equ	0xFF3
  3636                           indf0	equ	0xFEF
  3637                           postinc0	equ	0xFEE
  3638                           fsr0h	equ	0xFEA
  3639                           fsr0l	equ	0xFE9
  3640                           wreg	equ	0xFE8
  3641                           postdec1	equ	0xFE5
  3642                           fsr1l	equ	0xFE1
  3643                           indf2	equ	0xFDF
  3644                           postinc2	equ	0xFDE
  3645                           postdec2	equ	0xFDD
  3646                           fsr2h	equ	0xFDA
  3647                           fsr2l	equ	0xFD9
  3648                           status	equ	0xFD8
  3649                           
  3650 ;; *************** function ___wmul *****************
  3651 ;; Defined at:
  3652 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3653 ;; Parameters:    Size  Location     Type
  3654 ;;  multiplier      2    0[COMRAM] unsigned int 
  3655 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3656 ;; Auto vars:     Size  Location     Type
  3657 ;;  product         2    4[COMRAM] unsigned int 
  3658 ;; Return value:  Size  Location     Type
  3659 ;;                  2    0[COMRAM] unsigned int 
  3660 ;; Registers used:
  3661 ;;		wreg, status,2, status,0, prodl, prodh
  3662 ;; Tracked objects:
  3663 ;;		On entry : 0/0
  3664 ;;		On exit  : 0/0
  3665 ;;		Unchanged: 0/0
  3666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3667 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3668 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3670 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3671 ;;Total ram usage:        6 bytes
  3672 ;; Hardware stack levels used:    1
  3673 ;; This function calls:
  3674 ;;		Nothing
  3675 ;; This function is called by:
  3676 ;;		_RTC_getSeconds
  3677 ;;		_inputEntry
  3678 ;; This function uses a non-reentrant model
  3679 ;;
  3680                           
  3681                           	psect	text8
  3682  00EE78                     __ptext8:
  3683                           	opt stack 0
  3684  00EE78                     ___wmul:
  3685                           	opt stack 28
  3686                           
  3687                           ;incstack = 0
  3688  00EE78  5001               	movf	___wmul@multiplier,w,c
  3689  00EE7A  0203               	mulwf	___wmul@multiplicand,c
  3690  00EE7C  CFF3 F005          	movff	prodl,___wmul@product
  3691  00EE80  CFF4 F006          	movff	prodh,___wmul@product+1
  3692  00EE84  5001               	movf	___wmul@multiplier,w,c
  3693  00EE86  0204               	mulwf	___wmul@multiplicand+1,c
  3694  00EE88  50F3               	movf	prodl,w,c
  3695  00EE8A  2606               	addwf	___wmul@product+1,f,c
  3696  00EE8C  5002               	movf	___wmul@multiplier+1,w,c
  3697  00EE8E  0203               	mulwf	___wmul@multiplicand,c
  3698  00EE90  50F3               	movf	prodl,w,c
  3699  00EE92  2606               	addwf	___wmul@product+1,f,c
  3700  00EE94  C005  F001         	movff	___wmul@product,?___wmul
  3701  00EE98  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3702  00EE9C  0012               	return	
  3703  00EE9E                     __end_of___wmul:
  3704                           	opt stack 0
  3705                           tosu	equ	0xFFF
  3706                           tosh	equ	0xFFE
  3707                           tosl	equ	0xFFD
  3708                           pclath	equ	0xFFA
  3709                           tblptru	equ	0xFF8
  3710                           tblptrh	equ	0xFF7
  3711                           tblptrl	equ	0xFF6
  3712                           tablat	equ	0xFF5
  3713                           prodh	equ	0xFF4
  3714                           prodl	equ	0xFF3
  3715                           indf0	equ	0xFEF
  3716                           postinc0	equ	0xFEE
  3717                           fsr0h	equ	0xFEA
  3718                           fsr0l	equ	0xFE9
  3719                           wreg	equ	0xFE8
  3720                           postdec1	equ	0xFE5
  3721                           fsr1l	equ	0xFE1
  3722                           indf2	equ	0xFDF
  3723                           postinc2	equ	0xFDE
  3724                           postdec2	equ	0xFDD
  3725                           fsr2h	equ	0xFDA
  3726                           fsr2l	equ	0xFD9
  3727                           status	equ	0xFD8
  3728                           
  3729 ;; *************** function _RTC_getTime *****************
  3730 ;; Defined at:
  3731 ;;		line 12 in file "RTC.c"
  3732 ;; Parameters:    Size  Location     Type
  3733 ;;  time            2    3[COMRAM] PTR unsigned char 
  3734 ;;		 -> RTC_getSeconds@time(7), 
  3735 ;; Auto vars:     Size  Location     Type
  3736 ;;  i               1    5[COMRAM] unsigned char 
  3737 ;; Return value:  Size  Location     Type
  3738 ;;                  1    wreg      void 
  3739 ;; Registers used:
  3740 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3741 ;; Tracked objects:
  3742 ;;		On entry : 0/0
  3743 ;;		On exit  : 0/0
  3744 ;;		Unchanged: 0/0
  3745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3746 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3747 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3749 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3750 ;;Total ram usage:        3 bytes
  3751 ;; Hardware stack levels used:    1
  3752 ;; Hardware stack levels required when called:    2
  3753 ;; This function calls:
  3754 ;;		_I2C_Master_Read
  3755 ;;		_I2C_Master_Start
  3756 ;;		_I2C_Master_Stop
  3757 ;;		_I2C_Master_Write
  3758 ;; This function is called by:
  3759 ;;		_RTC_getSeconds
  3760 ;; This function uses a non-reentrant model
  3761 ;;
  3762                           
  3763                           	psect	text9
  3764  00F0D8                     __ptext9:
  3765                           	opt stack 0
  3766  00F0D8                     _RTC_getTime:
  3767                           	opt stack 26
  3768                           
  3769                           ;RTC.c: 14: I2C_Master_Start();
  3770                           
  3771                           ;incstack = 0
  3772  00F0D8  EC00  F077         	call	_I2C_Master_Start	;wreg free
  3773                           
  3774                           ;RTC.c: 15: I2C_Master_Write(0b11010000);
  3775  00F0DC  0E00               	movlw	0
  3776  00F0DE  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  3777  00F0E0  0ED0               	movlw	208
  3778  00F0E2  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  3779  00F0E4  EC08  F077         	call	_I2C_Master_Write	;wreg free
  3780                           
  3781                           ;RTC.c: 16: I2C_Master_Write(0x00);
  3782  00F0E8  0E00               	movlw	0
  3783  00F0EA  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  3784  00F0EC  0E00               	movlw	0
  3785  00F0EE  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  3786  00F0F0  EC08  F077         	call	_I2C_Master_Write	;wreg free
  3787                           
  3788                           ;RTC.c: 17: I2C_Master_Stop();
  3789  00F0F4  EC04  F077         	call	_I2C_Master_Stop	;wreg free
  3790                           
  3791                           ;RTC.c: 20: char i;
  3792                           ;RTC.c: 22: I2C_Master_Start();
  3793  00F0F8  EC00  F077         	call	_I2C_Master_Start	;wreg free
  3794                           
  3795                           ;RTC.c: 23: I2C_Master_Write(0b11010001);
  3796  00F0FC  0E00               	movlw	0
  3797  00F0FE  6E03               	movwf	I2C_Master_Write@byteToWrite+1,c
  3798  00F100  0ED1               	movlw	209
  3799  00F102  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  3800  00F104  EC08  F077         	call	_I2C_Master_Write	;wreg free
  3801                           
  3802                           ;RTC.c: 25: for (i = 0; i < 6; i++) {
  3803  00F108  0E00               	movlw	0
  3804  00F10A  6E06               	movwf	RTC_getTime@i,c
  3805  00F10C                     l2193:
  3806  00F10C  0E05               	movlw	5
  3807  00F10E  6406               	cpfsgt	RTC_getTime@i,c
  3808  00F110  D001               	goto	l437
  3809  00F112  D00E               	goto	u1660
  3810  00F114                     l437:
  3811                           
  3812                           ;RTC.c: 26: time[i] = I2C_Master_Read(0);
  3813  00F114  5006               	movf	RTC_getTime@i,w,c
  3814  00F116  0D01               	mullw	1
  3815  00F118  50F3               	movf	prodl,w,c
  3816  00F11A  2404               	addwf	RTC_getTime@time,w,c
  3817  00F11C  6ED9               	movwf	fsr2l,c
  3818  00F11E  50F4               	movf	prodh,w,c
  3819  00F120  2005               	addwfc	RTC_getTime@time+1,w,c
  3820  00F122  6EDA               	movwf	fsr2h,c
  3821  00F124  0E00               	movlw	0
  3822  00F126  EC2A  F077         	call	_I2C_Master_Read
  3823  00F12A  6EDF               	movwf	indf2,c
  3824  00F12C  2A06               	incf	RTC_getTime@i,f,c
  3825  00F12E  D7EE               	goto	l2193
  3826  00F130                     u1660:
  3827                           
  3828                           ;RTC.c: 27: }
  3829                           ;RTC.c: 28: time[6] = I2C_Master_Read(1);
  3830  00F130  EE20 F006          	lfsr	2,6
  3831  00F134  5004               	movf	RTC_getTime@time,w,c
  3832  00F136  26D9               	addwf	fsr2l,f,c
  3833  00F138  5005               	movf	RTC_getTime@time+1,w,c
  3834  00F13A  22DA               	addwfc	fsr2h,f,c
  3835  00F13C  0E01               	movlw	1
  3836  00F13E  EC2A  F077         	call	_I2C_Master_Read
  3837  00F142  6EDF               	movwf	indf2,c
  3838                           
  3839                           ;RTC.c: 29: I2C_Master_Stop();
  3840  00F144  EC04  F077         	call	_I2C_Master_Stop	;wreg free
  3841  00F148  0012               	return		;funcret
  3842  00F14A                     __end_of_RTC_getTime:
  3843                           	opt stack 0
  3844                           tosu	equ	0xFFF
  3845                           tosh	equ	0xFFE
  3846                           tosl	equ	0xFFD
  3847                           pclath	equ	0xFFA
  3848                           tblptru	equ	0xFF8
  3849                           tblptrh	equ	0xFF7
  3850                           tblptrl	equ	0xFF6
  3851                           tablat	equ	0xFF5
  3852                           prodh	equ	0xFF4
  3853                           prodl	equ	0xFF3
  3854                           indf0	equ	0xFEF
  3855                           postinc0	equ	0xFEE
  3856                           fsr0h	equ	0xFEA
  3857                           fsr0l	equ	0xFE9
  3858                           wreg	equ	0xFE8
  3859                           postdec1	equ	0xFE5
  3860                           fsr1l	equ	0xFE1
  3861                           indf2	equ	0xFDF
  3862                           postinc2	equ	0xFDE
  3863                           postdec2	equ	0xFDD
  3864                           fsr2h	equ	0xFDA
  3865                           fsr2l	equ	0xFD9
  3866                           status	equ	0xFD8
  3867                           
  3868 ;; *************** function _I2C_Master_Read *****************
  3869 ;; Defined at:
  3870 ;;		line 120 in file "I2C.c"
  3871 ;; Parameters:    Size  Location     Type
  3872 ;;  ackBit          1    wreg     unsigned char 
  3873 ;; Auto vars:     Size  Location     Type
  3874 ;;  ackBit          1    1[COMRAM] unsigned char 
  3875 ;;  receivedByte    1    2[COMRAM] unsigned char 
  3876 ;; Return value:  Size  Location     Type
  3877 ;;                  1    wreg      unsigned char 
  3878 ;; Registers used:
  3879 ;;		wreg, status,2, status,0, cstack
  3880 ;; Tracked objects:
  3881 ;;		On entry : 0/0
  3882 ;;		On exit  : 0/0
  3883 ;;		Unchanged: 0/0
  3884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3886 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3888 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3889 ;;Total ram usage:        2 bytes
  3890 ;; Hardware stack levels used:    1
  3891 ;; Hardware stack levels required when called:    1
  3892 ;; This function calls:
  3893 ;;		_I2C_Master_Wait
  3894 ;; This function is called by:
  3895 ;;		_RTC_getTime
  3896 ;; This function uses a non-reentrant model
  3897 ;;
  3898                           
  3899                           	psect	text10
  3900  00EE54                     __ptext10:
  3901                           	opt stack 0
  3902  00EE54                     _I2C_Master_Read:
  3903                           	opt stack 26
  3904                           
  3905                           ;incstack = 0
  3906                           ;I2C_Master_Read@ackBit stored from wreg
  3907  00EE54  6E02               	movwf	I2C_Master_Read@ackBit,c
  3908                           
  3909                           ;I2C.c: 130: unsigned char receivedByte;
  3910                           ;I2C.c: 132: I2C_Master_Wait();
  3911  00EE56  EC0D  F077         	call	_I2C_Master_Wait	;wreg free
  3912                           
  3913                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
  3914  00EE5A  86C5               	bsf	4037,3,c	;volatile
  3915                           
  3916                           ;I2C.c: 135: I2C_Master_Wait();
  3917  00EE5C  EC0D  F077         	call	_I2C_Master_Wait	;wreg free
  3918                           
  3919                           ;I2C.c: 136: receivedByte = SSPBUF;
  3920  00EE60  CFC9 F003          	movff	4041,I2C_Master_Read@receivedByte	;volatile
  3921                           
  3922                           ;I2C.c: 138: I2C_Master_Wait();
  3923  00EE64  EC0D  F077         	call	_I2C_Master_Wait	;wreg free
  3924                           
  3925                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
  3926  00EE68  B002               	btfsc	I2C_Master_Read@ackBit,0,c
  3927  00EE6A  D002               	bra	u1565
  3928  00EE6C  9AC5               	bcf	4037,5,c	;volatile
  3929  00EE6E  D001               	bra	u1566
  3930  00EE70                     u1565:
  3931  00EE70  8AC5               	bsf	4037,5,c	;volatile
  3932  00EE72                     u1566:
  3933                           
  3934                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
  3935  00EE72  88C5               	bsf	4037,4,c	;volatile
  3936                           
  3937                           ;I2C.c: 142: return receivedByte;
  3938  00EE74  5003               	movf	I2C_Master_Read@receivedByte,w,c
  3939  00EE76  0012               	return	
  3940  00EE78                     __end_of_I2C_Master_Read:
  3941                           	opt stack 0
  3942                           tosu	equ	0xFFF
  3943                           tosh	equ	0xFFE
  3944                           tosl	equ	0xFFD
  3945                           pclath	equ	0xFFA
  3946                           tblptru	equ	0xFF8
  3947                           tblptrh	equ	0xFF7
  3948                           tblptrl	equ	0xFF6
  3949                           tablat	equ	0xFF5
  3950                           prodh	equ	0xFF4
  3951                           prodl	equ	0xFF3
  3952                           indf0	equ	0xFEF
  3953                           postinc0	equ	0xFEE
  3954                           fsr0h	equ	0xFEA
  3955                           fsr0l	equ	0xFE9
  3956                           wreg	equ	0xFE8
  3957                           postdec1	equ	0xFE5
  3958                           fsr1l	equ	0xFE1
  3959                           indf2	equ	0xFDF
  3960                           postinc2	equ	0xFDE
  3961                           postdec2	equ	0xFDD
  3962                           fsr2h	equ	0xFDA
  3963                           fsr2l	equ	0xFD9
  3964                           status	equ	0xFD8
  3965                           
  3966 ;; *************** function _I2C_Send *****************
  3967 ;; Defined at:
  3968 ;;		line 83 in file "helpers.c"
  3969 ;; Parameters:    Size  Location     Type
  3970 ;;  address         1    wreg     unsigned char 
  3971 ;;  data            2    3[COMRAM] PTR unsigned char 
  3972 ;;		 -> STR_12(16), RAM(3967), STR_10(19), STR_9(16), 
  3973 ;;		 -> STR_8(16), STR_7(13), STR_6(15), packageCompartment@currTimeString(33), 
  3974 ;;		 -> STR_2(10), STR_1(25), 
  3975 ;; Auto vars:     Size  Location     Type
  3976 ;;  address         1    8[COMRAM] unsigned char 
  3977 ;;  i               2    9[COMRAM] int 
  3978 ;; Return value:  Size  Location     Type
  3979 ;;                  1    wreg      void 
  3980 ;; Registers used:
  3981 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3982 ;; Tracked objects:
  3983 ;;		On entry : 0/0
  3984 ;;		On exit  : 0/0
  3985 ;;		Unchanged: 0/0
  3986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3987 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3988 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3989 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3990 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3991 ;;Total ram usage:        8 bytes
  3992 ;; Hardware stack levels used:    1
  3993 ;; Hardware stack levels required when called:    2
  3994 ;; This function calls:
  3995 ;;		_I2C_Master_Start
  3996 ;;		_I2C_Master_Stop
  3997 ;;		_I2C_Master_Write
  3998 ;; This function is called by:
  3999 ;;		_packageCompartment
  4000 ;;		_main
  4001 ;;		_inputEntry
  4002 ;;		_clearing
  4003 ;; This function uses a non-reentrant model
  4004 ;;
  4005                           
  4006                           	psect	text11
  4007  00F2C0                     __ptext11:
  4008                           	opt stack 0
  4009  00F2C0                     _I2C_Send:
  4010                           	opt stack 27
  4011                           
  4012                           ;incstack = 0
  4013                           ;I2C_Send@address stored from wreg
  4014  00F2C0  6E09               	movwf	I2C_Send@address,c
  4015                           
  4016                           ;helpers.c: 88: int i=0;
  4017  00F2C2  0E00               	movlw	0
  4018  00F2C4  6E0B               	movwf	I2C_Send@i+1,c
  4019  00F2C6  0E00               	movlw	0
  4020  00F2C8  6E0A               	movwf	I2C_Send@i,c
  4021                           
  4022                           ;helpers.c: 90: I2C_Master_Start();
  4023  00F2CA  EC00  F077         	call	_I2C_Master_Start	;wreg free
  4024                           
  4025                           ;helpers.c: 91: I2C_Master_Write(address);
  4026  00F2CE  C009  F002         	movff	I2C_Send@address,I2C_Master_Write@byteToWrite
  4027  00F2D2  6A03               	clrf	I2C_Master_Write@byteToWrite+1,c
  4028  00F2D4  EC08  F077         	call	_I2C_Master_Write	;wreg free
  4029                           
  4030                           ;helpers.c: 93: while (data[i] != 0) {
  4031  00F2D8  D01F               	goto	l419
  4032  00F2DA                     
  4033                           ;helpers.c: 94: I2C_Master_Write(data[i]);
  4034  00F2DA  500A               	movf	I2C_Send@i,w,c
  4035  00F2DC  2404               	addwf	I2C_Send@data,w,c
  4036  00F2DE  6E06               	movwf	??_I2C_Send& (0+255),c
  4037  00F2E0  500B               	movf	I2C_Send@i+1,w,c
  4038  00F2E2  2005               	addwfc	I2C_Send@data+1,w,c
  4039  00F2E4  6E07               	movwf	(??_I2C_Send+1)& (0+255),c
  4040  00F2E6  C006  FFF6         	movff	??_I2C_Send,tblptrl
  4041  00F2EA  C007  FFF7         	movff	??_I2C_Send+1,tblptrh
  4042  00F2EE  0E00               	movlw	low (__mediumconst shr (0+16))
  4043  00F2F0  6EF8               	movwf	tblptru,c
  4044  00F2F2  0E0F               	movlw	(high __ramtop+-1)
  4045  00F2F4  64F7               	cpfsgt	tblptrh,c
  4046  00F2F6  D003               	bra	u1937
  4047  00F2F8  0008               	tblrd		*
  4048  00F2FA  50F5               	movf	tablat,w,c
  4049  00F2FC  D005               	bra	u1930
  4050  00F2FE                     u1937:
  4051  00F2FE  CFF6 FFE9          	movff	tblptrl,fsr0l
  4052  00F302  CFF7 FFEA          	movff	tblptrh,fsr0h
  4053  00F306  50EF               	movf	indf0,w,c
  4054  00F308                     u1930:
  4055  00F308  6E08               	movwf	(??_I2C_Send+2)& (0+255),c
  4056  00F30A  5008               	movf	??_I2C_Send+2,w,c
  4057  00F30C  6E02               	movwf	I2C_Master_Write@byteToWrite,c
  4058  00F30E  6A03               	clrf	I2C_Master_Write@byteToWrite+1,c
  4059  00F310  EC08  F077         	call	_I2C_Master_Write	;wreg free
  4060                           
  4061                           ;helpers.c: 95: i++;
  4062  00F314  4A0A               	infsnz	I2C_Send@i,f,c
  4063  00F316  2A0B               	incf	I2C_Send@i+1,f,c
  4064  00F318                     l419:
  4065  00F318  500A               	movf	I2C_Send@i,w,c
  4066  00F31A  2404               	addwf	I2C_Send@data,w,c
  4067  00F31C  6E06               	movwf	??_I2C_Send& (0+255),c
  4068  00F31E  500B               	movf	I2C_Send@i+1,w,c
  4069  00F320  2005               	addwfc	I2C_Send@data+1,w,c
  4070  00F322  6E07               	movwf	(??_I2C_Send+1)& (0+255),c
  4071  00F324  C006  FFF6         	movff	??_I2C_Send,tblptrl
  4072  00F328  C007  FFF7         	movff	??_I2C_Send+1,tblptrh
  4073  00F32C  0E00               	movlw	low (__mediumconst shr (0+16))
  4074  00F32E  6EF8               	movwf	tblptru,c
  4075  00F330  0E0F               	movlw	(high __ramtop+-1)
  4076  00F332  64F7               	cpfsgt	tblptrh,c
  4077  00F334  D003               	bra	u1947
  4078  00F336  0008               	tblrd		*
  4079  00F338  50F5               	movf	tablat,w,c
  4080  00F33A  D005               	bra	u1940
  4081  00F33C                     u1947:
  4082  00F33C  CFF6 FFE9          	movff	tblptrl,fsr0l
  4083  00F340  CFF7 FFEA          	movff	tblptrh,fsr0h
  4084  00F344  50EF               	movf	indf0,w,c
  4085  00F346                     u1940:
  4086  00F346  0900               	iorlw	0
  4087  00F348  A4D8               	btfss	status,2,c
  4088  00F34A  D7C7               	goto	l420
  4089                           
  4090                           ;helpers.c: 96: }
  4091                           ;helpers.c: 98: I2C_Master_Stop();
  4092  00F34C  EC04  F077         	call	_I2C_Master_Stop	;wreg free
  4093  00F350  0012               	return	
  4094  00F352                     __end_of_I2C_Send:
  4095                           	opt stack 0
  4096                           tosu	equ	0xFFF
  4097                           tosh	equ	0xFFE
  4098                           tosl	equ	0xFFD
  4099                           pclath	equ	0xFFA
  4100                           tblptru	equ	0xFF8
  4101                           tblptrh	equ	0xFF7
  4102                           tblptrl	equ	0xFF6
  4103                           tablat	equ	0xFF5
  4104                           prodh	equ	0xFF4
  4105                           prodl	equ	0xFF3
  4106                           indf0	equ	0xFEF
  4107                           postinc0	equ	0xFEE
  4108                           fsr0h	equ	0xFEA
  4109                           fsr0l	equ	0xFE9
  4110                           wreg	equ	0xFE8
  4111                           postdec1	equ	0xFE5
  4112                           fsr1l	equ	0xFE1
  4113                           indf2	equ	0xFDF
  4114                           postinc2	equ	0xFDE
  4115                           postdec2	equ	0xFDD
  4116                           fsr2h	equ	0xFDA
  4117                           fsr2l	equ	0xFD9
  4118                           status	equ	0xFD8
  4119                           
  4120 ;; *************** function _I2C_Master_Write *****************
  4121 ;; Defined at:
  4122 ;;		line 108 in file "I2C.c"
  4123 ;; Parameters:    Size  Location     Type
  4124 ;;  byteToWrite     2    1[COMRAM] unsigned int 
  4125 ;; Auto vars:     Size  Location     Type
  4126 ;;		None
  4127 ;; Return value:  Size  Location     Type
  4128 ;;                  1    wreg      void 
  4129 ;; Registers used:
  4130 ;;		wreg, status,2, status,0, cstack
  4131 ;; Tracked objects:
  4132 ;;		On entry : 0/0
  4133 ;;		On exit  : 0/0
  4134 ;;		Unchanged: 0/0
  4135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4136 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4139 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4140 ;;Total ram usage:        2 bytes
  4141 ;; Hardware stack levels used:    1
  4142 ;; Hardware stack levels required when called:    1
  4143 ;; This function calls:
  4144 ;;		_I2C_Master_Wait
  4145 ;; This function is called by:
  4146 ;;		_I2C_Send
  4147 ;;		_RTC_getTime
  4148 ;; This function uses a non-reentrant model
  4149 ;;
  4150                           
  4151                           	psect	text12
  4152  00EE10                     __ptext12:
  4153                           	opt stack 0
  4154  00EE10                     _I2C_Master_Write:
  4155                           	opt stack 26
  4156                           
  4157                           ;I2C.c: 116: I2C_Master_Wait();
  4158                           
  4159                           ;incstack = 0
  4160  00EE10  EC0D  F077         	call	_I2C_Master_Wait	;wreg free
  4161                           
  4162                           ;I2C.c: 117: SSPBUF = byteToWrite;
  4163  00EE14  C002  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  4164  00EE18  0012               	return		;funcret
  4165  00EE1A                     __end_of_I2C_Master_Write:
  4166                           	opt stack 0
  4167                           tosu	equ	0xFFF
  4168                           tosh	equ	0xFFE
  4169                           tosl	equ	0xFFD
  4170                           pclath	equ	0xFFA
  4171                           tblptru	equ	0xFF8
  4172                           tblptrh	equ	0xFF7
  4173                           tblptrl	equ	0xFF6
  4174                           tablat	equ	0xFF5
  4175                           prodh	equ	0xFF4
  4176                           prodl	equ	0xFF3
  4177                           indf0	equ	0xFEF
  4178                           postinc0	equ	0xFEE
  4179                           fsr0h	equ	0xFEA
  4180                           fsr0l	equ	0xFE9
  4181                           wreg	equ	0xFE8
  4182                           postdec1	equ	0xFE5
  4183                           fsr1l	equ	0xFE1
  4184                           indf2	equ	0xFDF
  4185                           postinc2	equ	0xFDE
  4186                           postdec2	equ	0xFDD
  4187                           fsr2h	equ	0xFDA
  4188                           fsr2l	equ	0xFD9
  4189                           status	equ	0xFD8
  4190                           
  4191 ;; *************** function _I2C_Master_Stop *****************
  4192 ;; Defined at:
  4193 ;;		line 95 in file "I2C.c"
  4194 ;; Parameters:    Size  Location     Type
  4195 ;;		None
  4196 ;; Auto vars:     Size  Location     Type
  4197 ;;		None
  4198 ;; Return value:  Size  Location     Type
  4199 ;;                  1    wreg      void 
  4200 ;; Registers used:
  4201 ;;		wreg, status,2, status,0, cstack
  4202 ;; Tracked objects:
  4203 ;;		On entry : 0/0
  4204 ;;		On exit  : 0/0
  4205 ;;		Unchanged: 0/0
  4206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4210 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4211 ;;Total ram usage:        0 bytes
  4212 ;; Hardware stack levels used:    1
  4213 ;; Hardware stack levels required when called:    1
  4214 ;; This function calls:
  4215 ;;		_I2C_Master_Wait
  4216 ;; This function is called by:
  4217 ;;		_I2C_Send
  4218 ;;		_RTC_getTime
  4219 ;; This function uses a non-reentrant model
  4220 ;;
  4221                           
  4222                           	psect	text13
  4223  00EE08                     __ptext13:
  4224                           	opt stack 0
  4225  00EE08                     _I2C_Master_Stop:
  4226                           	opt stack 26
  4227                           
  4228                           ;I2C.c: 104: I2C_Master_Wait();
  4229                           
  4230                           ;incstack = 0
  4231  00EE08  EC0D  F077         	call	_I2C_Master_Wait	;wreg free
  4232                           
  4233                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  4234  00EE0C  84C5               	bsf	4037,2,c	;volatile
  4235  00EE0E  0012               	return		;funcret
  4236  00EE10                     __end_of_I2C_Master_Stop:
  4237                           	opt stack 0
  4238                           tosu	equ	0xFFF
  4239                           tosh	equ	0xFFE
  4240                           tosl	equ	0xFFD
  4241                           pclath	equ	0xFFA
  4242                           tblptru	equ	0xFF8
  4243                           tblptrh	equ	0xFF7
  4244                           tblptrl	equ	0xFF6
  4245                           tablat	equ	0xFF5
  4246                           prodh	equ	0xFF4
  4247                           prodl	equ	0xFF3
  4248                           indf0	equ	0xFEF
  4249                           postinc0	equ	0xFEE
  4250                           fsr0h	equ	0xFEA
  4251                           fsr0l	equ	0xFE9
  4252                           wreg	equ	0xFE8
  4253                           postdec1	equ	0xFE5
  4254                           fsr1l	equ	0xFE1
  4255                           indf2	equ	0xFDF
  4256                           postinc2	equ	0xFDE
  4257                           postdec2	equ	0xFDD
  4258                           fsr2h	equ	0xFDA
  4259                           fsr2l	equ	0xFD9
  4260                           status	equ	0xFD8
  4261                           
  4262 ;; *************** function _I2C_Master_Start *****************
  4263 ;; Defined at:
  4264 ;;		line 69 in file "I2C.c"
  4265 ;; Parameters:    Size  Location     Type
  4266 ;;		None
  4267 ;; Auto vars:     Size  Location     Type
  4268 ;;		None
  4269 ;; Return value:  Size  Location     Type
  4270 ;;                  1    wreg      void 
  4271 ;; Registers used:
  4272 ;;		wreg, status,2, status,0, cstack
  4273 ;; Tracked objects:
  4274 ;;		On entry : 0/0
  4275 ;;		On exit  : 0/0
  4276 ;;		Unchanged: 0/0
  4277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4281 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4282 ;;Total ram usage:        0 bytes
  4283 ;; Hardware stack levels used:    1
  4284 ;; Hardware stack levels required when called:    1
  4285 ;; This function calls:
  4286 ;;		_I2C_Master_Wait
  4287 ;; This function is called by:
  4288 ;;		_I2C_Send
  4289 ;;		_RTC_getTime
  4290 ;; This function uses a non-reentrant model
  4291 ;;
  4292                           
  4293                           	psect	text14
  4294  00EE00                     __ptext14:
  4295                           	opt stack 0
  4296  00EE00                     _I2C_Master_Start:
  4297                           	opt stack 26
  4298                           
  4299                           ;I2C.c: 78: I2C_Master_Wait();
  4300                           
  4301                           ;incstack = 0
  4302  00EE00  EC0D  F077         	call	_I2C_Master_Wait	;wreg free
  4303                           
  4304                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
  4305  00EE04  80C5               	bsf	4037,0,c	;volatile
  4306  00EE06  0012               	return		;funcret
  4307  00EE08                     __end_of_I2C_Master_Start:
  4308                           	opt stack 0
  4309                           tosu	equ	0xFFF
  4310                           tosh	equ	0xFFE
  4311                           tosl	equ	0xFFD
  4312                           pclath	equ	0xFFA
  4313                           tblptru	equ	0xFF8
  4314                           tblptrh	equ	0xFF7
  4315                           tblptrl	equ	0xFF6
  4316                           tablat	equ	0xFF5
  4317                           prodh	equ	0xFF4
  4318                           prodl	equ	0xFF3
  4319                           indf0	equ	0xFEF
  4320                           postinc0	equ	0xFEE
  4321                           fsr0h	equ	0xFEA
  4322                           fsr0l	equ	0xFE9
  4323                           wreg	equ	0xFE8
  4324                           postdec1	equ	0xFE5
  4325                           fsr1l	equ	0xFE1
  4326                           indf2	equ	0xFDF
  4327                           postinc2	equ	0xFDE
  4328                           postdec2	equ	0xFDD
  4329                           fsr2h	equ	0xFDA
  4330                           fsr2l	equ	0xFD9
  4331                           status	equ	0xFD8
  4332                           
  4333 ;; *************** function _I2C_Master_Wait *****************
  4334 ;; Defined at:
  4335 ;;		line 51 in file "I2C.c"
  4336 ;; Parameters:    Size  Location     Type
  4337 ;;		None
  4338 ;; Auto vars:     Size  Location     Type
  4339 ;;		None
  4340 ;; Return value:  Size  Location     Type
  4341 ;;                  1    wreg      void 
  4342 ;; Registers used:
  4343 ;;		wreg, status,2, status,0
  4344 ;; Tracked objects:
  4345 ;;		On entry : 0/0
  4346 ;;		On exit  : 0/0
  4347 ;;		Unchanged: 0/0
  4348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4351 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4352 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4353 ;;Total ram usage:        1 bytes
  4354 ;; Hardware stack levels used:    1
  4355 ;; This function calls:
  4356 ;;		Nothing
  4357 ;; This function is called by:
  4358 ;;		_I2C_Master_Start
  4359 ;;		_I2C_Master_Stop
  4360 ;;		_I2C_Master_Write
  4361 ;;		_I2C_Master_Read
  4362 ;;		_I2C_Master_RepeatedStart
  4363 ;; This function uses a non-reentrant model
  4364 ;;
  4365                           
  4366                           	psect	text15
  4367  00EE1A                     __ptext15:
  4368                           	opt stack 0
  4369  00EE1A                     _I2C_Master_Wait:
  4370                           	opt stack 26
  4371                           
  4372                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  4373                           
  4374                           ;incstack = 0
  4375  00EE1A  B4C7               	btfsc	4039,2,c	;volatile
  4376  00EE1C  D7FE               	goto	_I2C_Master_Wait
  4377  00EE1E  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  4378  00EE22  0E1F               	movlw	31
  4379  00EE24  1601               	andwf	??_I2C_Master_Wait,f,c
  4380  00EE26  B4D8               	btfsc	status,2,c
  4381  00EE28  0012               	return	
  4382  00EE2A  D7F7               	goto	_I2C_Master_Wait
  4383  00EE2C                     __end_of_I2C_Master_Wait:
  4384                           	opt stack 0
  4385                           tosu	equ	0xFFF
  4386                           tosh	equ	0xFFE
  4387                           tosl	equ	0xFFD
  4388                           pclath	equ	0xFFA
  4389                           tblptru	equ	0xFF8
  4390                           tblptrh	equ	0xFF7
  4391                           tblptrl	equ	0xFF6
  4392                           tablat	equ	0xFF5
  4393                           prodh	equ	0xFF4
  4394                           prodl	equ	0xFF3
  4395                           indf0	equ	0xFEF
  4396                           postinc0	equ	0xFEE
  4397                           fsr0h	equ	0xFEA
  4398                           fsr0l	equ	0xFE9
  4399                           wreg	equ	0xFE8
  4400                           postdec1	equ	0xFE5
  4401                           fsr1l	equ	0xFE1
  4402                           indf2	equ	0xFDF
  4403                           postinc2	equ	0xFDE
  4404                           postdec2	equ	0xFDD
  4405                           fsr2h	equ	0xFDA
  4406                           fsr2l	equ	0xFD9
  4407                           status	equ	0xFD8
  4408                           
  4409 ;; *************** function _initLCD *****************
  4410 ;; Defined at:
  4411 ;;		line 61 in file "lcd.c"
  4412 ;; Parameters:    Size  Location     Type
  4413 ;;		None
  4414 ;; Auto vars:     Size  Location     Type
  4415 ;;		None
  4416 ;; Return value:  Size  Location     Type
  4417 ;;                  1    wreg      void 
  4418 ;; Registers used:
  4419 ;;		wreg, status,2, status,0, cstack
  4420 ;; Tracked objects:
  4421 ;;		On entry : 0/0
  4422 ;;		On exit  : 0/0
  4423 ;;		Unchanged: 0/0
  4424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4427 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4428 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4429 ;;Total ram usage:        1 bytes
  4430 ;; Hardware stack levels used:    1
  4431 ;; Hardware stack levels required when called:    2
  4432 ;; This function calls:
  4433 ;;		_lcdInst
  4434 ;; This function is called by:
  4435 ;;		_main
  4436 ;; This function uses a non-reentrant model
  4437 ;;
  4438                           
  4439                           	psect	text16
  4440  00EF60                     __ptext16:
  4441                           	opt stack 0
  4442  00EF60                     _initLCD:
  4443                           	opt stack 28
  4444                           
  4445                           ;lcd.c: 69: _delay((unsigned long)((15)*(40000000/4000.0)));
  4446                           
  4447                           ;incstack = 0
  4448  00EF60  0EC3               	movlw	195
  4449  00EF62  6E04               	movwf	??_initLCD& (0+255),c
  4450  00EF64  0ECD               	movlw	205
  4451  00EF66                     u3147:
  4452  00EF66  2EE8               	decfsz	wreg,f,c
  4453  00EF68  D7FE               	bra	u3147
  4454  00EF6A  2E04               	decfsz	??_initLCD& (0+255),f,c
  4455  00EF6C  D7FC               	bra	u3147
  4456  00EF6E  F000               	nop	
  4457                           
  4458                           ;lcd.c: 70: lcdInst(0b00110011);
  4459  00EF70  0E33               	movlw	51
  4460  00EF72  EC16  F077         	call	_lcdInst
  4461                           
  4462                           ;lcd.c: 71: lcdInst(0b00110010);
  4463  00EF76  0E32               	movlw	50
  4464  00EF78  EC16  F077         	call	_lcdInst
  4465                           
  4466                           ;lcd.c: 72: lcdInst(0b00101000);
  4467  00EF7C  0E28               	movlw	40
  4468  00EF7E  EC16  F077         	call	_lcdInst
  4469                           
  4470                           ;lcd.c: 73: lcdInst(0b00001111);
  4471  00EF82  0E0F               	movlw	15
  4472  00EF84  EC16  F077         	call	_lcdInst
  4473                           
  4474                           ;lcd.c: 74: lcdInst(0b00000110);
  4475  00EF88  0E06               	movlw	6
  4476  00EF8A  EC16  F077         	call	_lcdInst
  4477                           
  4478                           ;lcd.c: 75: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  4479  00EF8E  0E01               	movlw	1
  4480  00EF90  EC16  F077         	call	_lcdInst
  4481  00EF94  0EC3               	movlw	195
  4482  00EF96  6E04               	movwf	??_initLCD& (0+255),c
  4483  00EF98  0ECD               	movlw	205
  4484  00EF9A                     u3157:
  4485  00EF9A  2EE8               	decfsz	wreg,f,c
  4486  00EF9C  D7FE               	bra	u3157
  4487  00EF9E  2E04               	decfsz	??_initLCD& (0+255),f,c
  4488  00EFA0  D7FC               	bra	u3157
  4489  00EFA2  F000               	nop	
  4490                           
  4491                           ;lcd.c: 78: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  4492  00EFA4  0E0F               	movlw	15
  4493  00EFA6  EC16  F077         	call	_lcdInst
  4494  00EFAA  0012               	return		;funcret
  4495  00EFAC                     __end_of_initLCD:
  4496                           	opt stack 0
  4497                           tosu	equ	0xFFF
  4498                           tosh	equ	0xFFE
  4499                           tosl	equ	0xFFD
  4500                           pclath	equ	0xFFA
  4501                           tblptru	equ	0xFF8
  4502                           tblptrh	equ	0xFF7
  4503                           tblptrl	equ	0xFF6
  4504                           tablat	equ	0xFF5
  4505                           prodh	equ	0xFF4
  4506                           prodl	equ	0xFF3
  4507                           indf0	equ	0xFEF
  4508                           postinc0	equ	0xFEE
  4509                           fsr0h	equ	0xFEA
  4510                           fsr0l	equ	0xFE9
  4511                           wreg	equ	0xFE8
  4512                           postdec1	equ	0xFE5
  4513                           fsr1l	equ	0xFE1
  4514                           indf2	equ	0xFDF
  4515                           postinc2	equ	0xFDE
  4516                           postdec2	equ	0xFDD
  4517                           fsr2h	equ	0xFDA
  4518                           fsr2l	equ	0xFD9
  4519                           status	equ	0xFD8
  4520                           
  4521 ;; *************** function _lcdInst *****************
  4522 ;; Defined at:
  4523 ;;		line 12 in file "lcd.c"
  4524 ;; Parameters:    Size  Location     Type
  4525 ;;  data            1    wreg     unsigned char 
  4526 ;; Auto vars:     Size  Location     Type
  4527 ;;  data            1    2[COMRAM] unsigned char 
  4528 ;; Return value:  Size  Location     Type
  4529 ;;                  1    wreg      void 
  4530 ;; Registers used:
  4531 ;;		wreg, status,2, status,0, cstack
  4532 ;; Tracked objects:
  4533 ;;		On entry : 0/0
  4534 ;;		On exit  : 0/0
  4535 ;;		Unchanged: 0/0
  4536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4538 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4540 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4541 ;;Total ram usage:        1 bytes
  4542 ;; Hardware stack levels used:    1
  4543 ;; Hardware stack levels required when called:    1
  4544 ;; This function calls:
  4545 ;;		_lcdNibble
  4546 ;; This function is called by:
  4547 ;;		_packageCompartment
  4548 ;;		_main
  4549 ;;		_initLCD
  4550 ;;		_inputEntry
  4551 ;;		_lcd_set_cursor
  4552 ;;		_lcd_shift_cursor
  4553 ;;		_lcd_shift_display
  4554 ;;		_mainMenu
  4555 ;;		_printStringLCD
  4556 ;; This function uses a non-reentrant model
  4557 ;;
  4558                           
  4559                           	psect	text17
  4560  00EE2C                     __ptext17:
  4561                           	opt stack 0
  4562  00EE2C                     _lcdInst:
  4563                           	opt stack 28
  4564                           
  4565                           ;incstack = 0
  4566                           ;lcdInst@data stored from wreg
  4567  00EE2C  6E03               	movwf	lcdInst@data,c
  4568                           
  4569                           ;lcd.c: 20: LATDbits.LATD2 = 0;
  4570  00EE2E  948C               	bcf	3980,2,c	;volatile
  4571                           
  4572                           ;lcd.c: 21: lcdNibble(data);
  4573  00EE30  5003               	movf	lcdInst@data,w,c
  4574  00EE32  ECE0  F078         	call	_lcdNibble
  4575                           
  4576                           ;lcd.c: 22: _delay((unsigned long)((100)*(40000000/4000000.0)));
  4577  00EE36  0EC8               	movlw	200
  4578  00EE38                     u3167:
  4579  00EE38  D000               	nop2	
  4580  00EE3A  2EE8               	decfsz	wreg,f,c
  4581  00EE3C  D7FD               	bra	u3167
  4582  00EE3E  0012               	return		;funcret
  4583  00EE40                     __end_of_lcdInst:
  4584                           	opt stack 0
  4585                           tosu	equ	0xFFF
  4586                           tosh	equ	0xFFE
  4587                           tosl	equ	0xFFD
  4588                           pclath	equ	0xFFA
  4589                           tblptru	equ	0xFF8
  4590                           tblptrh	equ	0xFF7
  4591                           tblptrl	equ	0xFF6
  4592                           tablat	equ	0xFF5
  4593                           prodh	equ	0xFF4
  4594                           prodl	equ	0xFF3
  4595                           indf0	equ	0xFEF
  4596                           postinc0	equ	0xFEE
  4597                           fsr0h	equ	0xFEA
  4598                           fsr0l	equ	0xFE9
  4599                           wreg	equ	0xFE8
  4600                           postdec1	equ	0xFE5
  4601                           fsr1l	equ	0xFE1
  4602                           indf2	equ	0xFDF
  4603                           postinc2	equ	0xFDE
  4604                           postdec2	equ	0xFDD
  4605                           fsr2h	equ	0xFDA
  4606                           fsr2l	equ	0xFD9
  4607                           status	equ	0xFD8
  4608                           
  4609 ;; *************** function _lcdNibble *****************
  4610 ;; Defined at:
  4611 ;;		line 38 in file "lcd.c"
  4612 ;; Parameters:    Size  Location     Type
  4613 ;;  data            1    wreg     unsigned char 
  4614 ;; Auto vars:     Size  Location     Type
  4615 ;;  data            1    1[COMRAM] unsigned char 
  4616 ;;  temp            1    0[COMRAM] unsigned char 
  4617 ;; Return value:  Size  Location     Type
  4618 ;;                  1    wreg      void 
  4619 ;; Registers used:
  4620 ;;		wreg, status,2, status,0
  4621 ;; Tracked objects:
  4622 ;;		On entry : 0/0
  4623 ;;		On exit  : 0/0
  4624 ;;		Unchanged: 0/0
  4625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4627 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4629 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4630 ;;Total ram usage:        2 bytes
  4631 ;; Hardware stack levels used:    1
  4632 ;; This function calls:
  4633 ;;		Nothing
  4634 ;; This function is called by:
  4635 ;;		_lcdInst
  4636 ;;		_putch
  4637 ;; This function uses a non-reentrant model
  4638 ;;
  4639                           
  4640                           	psect	text18
  4641  00F1C0                     __ptext18:
  4642                           	opt stack 0
  4643  00F1C0                     _lcdNibble:
  4644                           	opt stack 27
  4645                           
  4646                           ;incstack = 0
  4647                           ;lcdNibble@data stored from wreg
  4648  00F1C0  6E02               	movwf	lcdNibble@data,c
  4649                           
  4650                           ;lcd.c: 46: char temp = (unsigned char) (data & 0xF0);
  4651  00F1C2  5002               	movf	lcdNibble@data,w,c
  4652  00F1C4  0BF0               	andlw	240
  4653  00F1C6  6E01               	movwf	lcdNibble@temp,c
  4654                           
  4655                           ;lcd.c: 47: LATD = (unsigned char) (LATD & 0x0F);
  4656  00F1C8  508C               	movf	3980,w,c	;volatile
  4657  00F1CA  0B0F               	andlw	15
  4658  00F1CC  6E8C               	movwf	3980,c	;volatile
  4659                           
  4660                           ;lcd.c: 48: LATD = (unsigned char) (temp | LATD);
  4661  00F1CE  5001               	movf	lcdNibble@temp,w,c
  4662  00F1D0  108C               	iorwf	3980,w,c	;volatile
  4663  00F1D2  6E8C               	movwf	3980,c	;volatile
  4664                           
  4665                           ;lcd.c: 50: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  4666  00F1D4  0E00               	movlw	0
  4667  00F1D6  BEF2               	btfsc	intcon,7,c	;volatile
  4668  00F1D8  0E01               	movlw	1
  4669  00F1DA  6E6A               	movwf	_LCDinterruptState,c
  4670  00F1DC  9EF2               	bcf	intcon,7,c	;volatile
  4671  00F1DE  868C               	bsf	3980,3,c	;volatile
  4672  00F1E0  0E53               	movlw	83
  4673  00F1E2                     u3177:
  4674  00F1E2  2EE8               	decfsz	wreg,f,c
  4675  00F1E4  D7FE               	bra	u3177
  4676  00F1E6  F000               	nop	
  4677  00F1E8  968C               	bcf	3980,3,c	;volatile
  4678  00F1EA  0EC8               	movlw	200
  4679  00F1EC                     u3187:
  4680  00F1EC  D000               	nop2	
  4681  00F1EE  2EE8               	decfsz	wreg,f,c
  4682  00F1F0  D7FD               	bra	u3187
  4683  00F1F2  B06A               	btfsc	_LCDinterruptState,0,c
  4684  00F1F4  D002               	bra	u1545
  4685  00F1F6  9EF2               	bcf	intcon,7,c	;volatile
  4686  00F1F8  D001               	bra	u1546
  4687  00F1FA                     u1545:
  4688  00F1FA  8EF2               	bsf	intcon,7,c	;volatile
  4689  00F1FC                     u1546:
  4690                           
  4691                           ;lcd.c: 53: data = (unsigned char) (data << 4);
  4692  00F1FC  3802               	swapf	lcdNibble@data,w,c
  4693  00F1FE  0BF0               	andlw	240
  4694  00F200  6E02               	movwf	lcdNibble@data,c
  4695                           
  4696                           ;lcd.c: 54: temp = (unsigned char) (data & 0xF0);
  4697  00F202  5002               	movf	lcdNibble@data,w,c
  4698  00F204  0BF0               	andlw	240
  4699  00F206  6E01               	movwf	lcdNibble@temp,c
  4700                           
  4701                           ;lcd.c: 55: LATD = (unsigned char) (LATD & 0x0F);
  4702  00F208  508C               	movf	3980,w,c	;volatile
  4703  00F20A  0B0F               	andlw	15
  4704  00F20C  6E8C               	movwf	3980,c	;volatile
  4705                           
  4706                           ;lcd.c: 56: LATD = (unsigned char) (temp | LATD);
  4707  00F20E  5001               	movf	lcdNibble@temp,w,c
  4708  00F210  108C               	iorwf	3980,w,c	;volatile
  4709  00F212  6E8C               	movwf	3980,c	;volatile
  4710                           
  4711                           ;lcd.c: 58: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  4712  00F214  0E00               	movlw	0
  4713  00F216  BEF2               	btfsc	intcon,7,c	;volatile
  4714  00F218  0E01               	movlw	1
  4715  00F21A  6E6A               	movwf	_LCDinterruptState,c
  4716  00F21C  9EF2               	bcf	intcon,7,c	;volatile
  4717  00F21E  868C               	bsf	3980,3,c	;volatile
  4718  00F220  0E53               	movlw	83
  4719  00F222                     u3197:
  4720  00F222  2EE8               	decfsz	wreg,f,c
  4721  00F224  D7FE               	bra	u3197
  4722  00F226  F000               	nop	
  4723  00F228  968C               	bcf	3980,3,c	;volatile
  4724  00F22A  0EC8               	movlw	200
  4725  00F22C                     u3207:
  4726  00F22C  D000               	nop2	
  4727  00F22E  2EE8               	decfsz	wreg,f,c
  4728  00F230  D7FD               	bra	u3207
  4729  00F232  B06A               	btfsc	_LCDinterruptState,0,c
  4730  00F234  D002               	bra	u1555
  4731  00F236  9EF2               	bcf	intcon,7,c	;volatile
  4732  00F238  D001               	bra	u1556
  4733  00F23A                     u1555:
  4734  00F23A  8EF2               	bsf	intcon,7,c	;volatile
  4735  00F23C                     u1556:
  4736  00F23C  0012               	return		;funcret
  4737  00F23E                     __end_of_lcdNibble:
  4738                           	opt stack 0
  4739                           tosu	equ	0xFFF
  4740                           tosh	equ	0xFFE
  4741                           tosl	equ	0xFFD
  4742                           pclath	equ	0xFFA
  4743                           tblptru	equ	0xFF8
  4744                           tblptrh	equ	0xFF7
  4745                           tblptrl	equ	0xFF6
  4746                           tablat	equ	0xFF5
  4747                           prodh	equ	0xFF4
  4748                           prodl	equ	0xFF3
  4749                           intcon	equ	0xFF2
  4750                           indf0	equ	0xFEF
  4751                           postinc0	equ	0xFEE
  4752                           fsr0h	equ	0xFEA
  4753                           fsr0l	equ	0xFE9
  4754                           wreg	equ	0xFE8
  4755                           postdec1	equ	0xFE5
  4756                           fsr1l	equ	0xFE1
  4757                           indf2	equ	0xFDF
  4758                           postinc2	equ	0xFDE
  4759                           postdec2	equ	0xFDD
  4760                           fsr2h	equ	0xFDA
  4761                           fsr2l	equ	0xFD9
  4762                           status	equ	0xFD8
  4763                           
  4764 ;; *************** function _I2C_Master_Init *****************
  4765 ;; Defined at:
  4766 ;;		line 14 in file "I2C.c"
  4767 ;; Parameters:    Size  Location     Type
  4768 ;;  clockFreq       4   13[COMRAM] const unsigned long 
  4769 ;; Auto vars:     Size  Location     Type
  4770 ;;		None
  4771 ;; Return value:  Size  Location     Type
  4772 ;;                  1    wreg      void 
  4773 ;; Registers used:
  4774 ;;		wreg, status,2, status,0, cstack
  4775 ;; Tracked objects:
  4776 ;;		On entry : 0/0
  4777 ;;		On exit  : 0/0
  4778 ;;		Unchanged: 0/0
  4779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4780 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4782 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4783 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4784 ;;Total ram usage:        8 bytes
  4785 ;; Hardware stack levels used:    1
  4786 ;; Hardware stack levels required when called:    1
  4787 ;; This function calls:
  4788 ;;		___lldiv
  4789 ;; This function is called by:
  4790 ;;		_main
  4791 ;; This function uses a non-reentrant model
  4792 ;;
  4793                           
  4794                           	psect	text19
  4795  00EFAC                     __ptext19:
  4796                           	opt stack 0
  4797  00EFAC                     _I2C_Master_Init:
  4798                           	opt stack 29
  4799                           
  4800                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
  4801                           
  4802                           ;incstack = 0
  4803  00EFAC  9AC6               	bcf	4038,5,c	;volatile
  4804                           
  4805                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
  4806  00EFAE  8694               	bsf	3988,3,c	;volatile
  4807                           
  4808                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
  4809  00EFB0  8894               	bsf	3988,4,c	;volatile
  4810                           
  4811                           ;I2C.c: 41: SSPSTAT = 0b10000000;
  4812  00EFB2  0E80               	movlw	128
  4813  00EFB4  6EC7               	movwf	4039,c	;volatile
  4814                           
  4815                           ;I2C.c: 42: SSPCON1 = 0b00101000;
  4816  00EFB6  0E28               	movlw	40
  4817  00EFB8  6EC6               	movwf	4038,c	;volatile
  4818                           
  4819                           ;I2C.c: 43: SSPCON2 = 0b00000000;
  4820  00EFBA  0E00               	movlw	0
  4821  00EFBC  6EC5               	movwf	4037,c	;volatile
  4822                           
  4823                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
  4824  00EFBE  0E00               	movlw	0
  4825  00EFC0  6E01               	movwf	___lldiv@dividend,c
  4826  00EFC2  0E5A               	movlw	90
  4827  00EFC4  6E02               	movwf	___lldiv@dividend+1,c
  4828  00EFC6  0E62               	movlw	98
  4829  00EFC8  6E03               	movwf	___lldiv@dividend+2,c
  4830  00EFCA  0E02               	movlw	2
  4831  00EFCC  6E04               	movwf	___lldiv@dividend+3,c
  4832  00EFCE  C00E  F012         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
  4833  00EFD2  C00F  F013         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
  4834  00EFD6  C010  F014         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
  4835  00EFDA  C011  F015         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
  4836  00EFDE  0E02               	movlw	2
  4837  00EFE0                     u2755:
  4838  00EFE0  90D8               	bcf	status,0,c
  4839  00EFE2  3612               	rlcf	??_I2C_Master_Init,f,c
  4840  00EFE4  3613               	rlcf	??_I2C_Master_Init+1,f,c
  4841  00EFE6  3614               	rlcf	??_I2C_Master_Init+2,f,c
  4842  00EFE8  3615               	rlcf	??_I2C_Master_Init+3,f,c
  4843  00EFEA  2EE8               	decfsz	wreg,f,c
  4844  00EFEC  D7F9               	goto	u2755
  4845  00EFEE  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  4846  00EFF2  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  4847  00EFF6  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  4848  00EFFA  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  4849  00EFFE  EC1F  F079         	call	___lldiv	;wreg free
  4850  00F002  0401               	decf	?___lldiv,w,c
  4851  00F004  6EC8               	movwf	4040,c	;volatile
  4852  00F006  0012               	return		;funcret
  4853  00F008                     __end_of_I2C_Master_Init:
  4854                           	opt stack 0
  4855                           tosu	equ	0xFFF
  4856                           tosh	equ	0xFFE
  4857                           tosl	equ	0xFFD
  4858                           pclath	equ	0xFFA
  4859                           tblptru	equ	0xFF8
  4860                           tblptrh	equ	0xFF7
  4861                           tblptrl	equ	0xFF6
  4862                           tablat	equ	0xFF5
  4863                           prodh	equ	0xFF4
  4864                           prodl	equ	0xFF3
  4865                           intcon	equ	0xFF2
  4866                           indf0	equ	0xFEF
  4867                           postinc0	equ	0xFEE
  4868                           fsr0h	equ	0xFEA
  4869                           fsr0l	equ	0xFE9
  4870                           wreg	equ	0xFE8
  4871                           postdec1	equ	0xFE5
  4872                           fsr1l	equ	0xFE1
  4873                           indf2	equ	0xFDF
  4874                           postinc2	equ	0xFDE
  4875                           postdec2	equ	0xFDD
  4876                           fsr2h	equ	0xFDA
  4877                           fsr2l	equ	0xFD9
  4878                           status	equ	0xFD8
  4879                           
  4880 ;; *************** function ___lldiv *****************
  4881 ;; Defined at:
  4882 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4883 ;; Parameters:    Size  Location     Type
  4884 ;;  dividend        4    0[COMRAM] unsigned long 
  4885 ;;  divisor         4    4[COMRAM] unsigned long 
  4886 ;; Auto vars:     Size  Location     Type
  4887 ;;  quotient        4    8[COMRAM] unsigned long 
  4888 ;;  counter         1   12[COMRAM] unsigned char 
  4889 ;; Return value:  Size  Location     Type
  4890 ;;                  4    0[COMRAM] unsigned long 
  4891 ;; Registers used:
  4892 ;;		wreg, status,2, status,0
  4893 ;; Tracked objects:
  4894 ;;		On entry : 0/0
  4895 ;;		On exit  : 0/0
  4896 ;;		Unchanged: 0/0
  4897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4898 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4899 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4901 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4902 ;;Total ram usage:       13 bytes
  4903 ;; Hardware stack levels used:    1
  4904 ;; This function calls:
  4905 ;;		Nothing
  4906 ;; This function is called by:
  4907 ;;		_I2C_Master_Init
  4908 ;;		__doprnt
  4909 ;; This function uses a non-reentrant model
  4910 ;;
  4911                           
  4912                           	psect	text20
  4913  00F23E                     __ptext20:
  4914                           	opt stack 0
  4915  00F23E                     ___lldiv:
  4916                           	opt stack 28
  4917                           
  4918                           ;incstack = 0
  4919  00F23E  0E00               	movlw	0
  4920  00F240  6E09               	movwf	___lldiv@quotient,c
  4921  00F242  0E00               	movlw	0
  4922  00F244  6E0A               	movwf	___lldiv@quotient+1,c
  4923  00F246  0E00               	movlw	0
  4924  00F248  6E0B               	movwf	___lldiv@quotient+2,c
  4925  00F24A  0E00               	movlw	0
  4926  00F24C  6E0C               	movwf	___lldiv@quotient+3,c
  4927  00F24E  5005               	movf	___lldiv@divisor,w,c
  4928  00F250  1006               	iorwf	___lldiv@divisor+1,w,c
  4929  00F252  1007               	iorwf	___lldiv@divisor+2,w,c
  4930  00F254  1008               	iorwf	___lldiv@divisor+3,w,c
  4931  00F256  B4D8               	btfsc	status,2,c
  4932  00F258  D02A               	goto	l843
  4933  00F25A  0E01               	movlw	1
  4934  00F25C  6E0D               	movwf	___lldiv@counter,c
  4935  00F25E  D006               	goto	l838
  4936  00F260  90D8               	bcf	status,0,c
  4937  00F262  3605               	rlcf	___lldiv@divisor,f,c
  4938  00F264  3606               	rlcf	___lldiv@divisor+1,f,c
  4939  00F266  3607               	rlcf	___lldiv@divisor+2,f,c
  4940  00F268  3608               	rlcf	___lldiv@divisor+3,f,c
  4941  00F26A  2A0D               	incf	___lldiv@counter,f,c
  4942  00F26C                     l838:
  4943  00F26C  AE08               	btfss	___lldiv@divisor+3,7,c
  4944  00F26E  D7F8               	goto	l839
  4945  00F270                     u1580:
  4946  00F270  90D8               	bcf	status,0,c
  4947  00F272  3609               	rlcf	___lldiv@quotient,f,c
  4948  00F274  360A               	rlcf	___lldiv@quotient+1,f,c
  4949  00F276  360B               	rlcf	___lldiv@quotient+2,f,c
  4950  00F278  360C               	rlcf	___lldiv@quotient+3,f,c
  4951  00F27A  5005               	movf	___lldiv@divisor,w,c
  4952  00F27C  5C01               	subwf	___lldiv@dividend,w,c
  4953  00F27E  5006               	movf	___lldiv@divisor+1,w,c
  4954  00F280  5802               	subwfb	___lldiv@dividend+1,w,c
  4955  00F282  5007               	movf	___lldiv@divisor+2,w,c
  4956  00F284  5803               	subwfb	___lldiv@dividend+2,w,c
  4957  00F286  5008               	movf	___lldiv@divisor+3,w,c
  4958  00F288  5804               	subwfb	___lldiv@dividend+3,w,c
  4959  00F28A  A0D8               	btfss	status,0,c
  4960  00F28C  D009               	goto	l842
  4961  00F28E  5005               	movf	___lldiv@divisor,w,c
  4962  00F290  5E01               	subwf	___lldiv@dividend,f,c
  4963  00F292  5006               	movf	___lldiv@divisor+1,w,c
  4964  00F294  5A02               	subwfb	___lldiv@dividend+1,f,c
  4965  00F296  5007               	movf	___lldiv@divisor+2,w,c
  4966  00F298  5A03               	subwfb	___lldiv@dividend+2,f,c
  4967  00F29A  5008               	movf	___lldiv@divisor+3,w,c
  4968  00F29C  5A04               	subwfb	___lldiv@dividend+3,f,c
  4969  00F29E  8009               	bsf	___lldiv@quotient,0,c
  4970  00F2A0                     l842:
  4971  00F2A0  90D8               	bcf	status,0,c
  4972  00F2A2  3208               	rrcf	___lldiv@divisor+3,f,c
  4973  00F2A4  3207               	rrcf	___lldiv@divisor+2,f,c
  4974  00F2A6  3206               	rrcf	___lldiv@divisor+1,f,c
  4975  00F2A8  3205               	rrcf	___lldiv@divisor,f,c
  4976  00F2AA  2E0D               	decfsz	___lldiv@counter,f,c
  4977  00F2AC  D7E1               	goto	u1580
  4978  00F2AE                     l843:
  4979  00F2AE  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4980  00F2B2  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4981  00F2B6  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4982  00F2BA  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4983  00F2BE  0012               	return		;funcret
  4984  00F2C0                     __end_of___lldiv:
  4985                           	opt stack 0
  4986                           tosu	equ	0xFFF
  4987                           tosh	equ	0xFFE
  4988                           tosl	equ	0xFFD
  4989                           pclath	equ	0xFFA
  4990                           tblptru	equ	0xFF8
  4991                           tblptrh	equ	0xFF7
  4992                           tblptrl	equ	0xFF6
  4993                           tablat	equ	0xFF5
  4994                           prodh	equ	0xFF4
  4995                           prodl	equ	0xFF3
  4996                           intcon	equ	0xFF2
  4997                           indf0	equ	0xFEF
  4998                           postinc0	equ	0xFEE
  4999                           fsr0h	equ	0xFEA
  5000                           fsr0l	equ	0xFE9
  5001                           wreg	equ	0xFE8
  5002                           postdec1	equ	0xFE5
  5003                           fsr1l	equ	0xFE1
  5004                           indf2	equ	0xFDF
  5005                           postinc2	equ	0xFDE
  5006                           postdec2	equ	0xFDD
  5007                           fsr2h	equ	0xFDA
  5008                           fsr2l	equ	0xFD9
  5009                           status	equ	0xFD8
  5010                           tosu	equ	0xFFF
  5011                           tosh	equ	0xFFE
  5012                           tosl	equ	0xFFD
  5013                           pclath	equ	0xFFA
  5014                           tblptru	equ	0xFF8
  5015                           tblptrh	equ	0xFF7
  5016                           tblptrl	equ	0xFF6
  5017                           tablat	equ	0xFF5
  5018                           prodh	equ	0xFF4
  5019                           prodl	equ	0xFF3
  5020                           intcon	equ	0xFF2
  5021                           indf0	equ	0xFEF
  5022                           postinc0	equ	0xFEE
  5023                           fsr0h	equ	0xFEA
  5024                           fsr0l	equ	0xFE9
  5025                           wreg	equ	0xFE8
  5026                           postdec1	equ	0xFE5
  5027                           fsr1l	equ	0xFE1
  5028                           indf2	equ	0xFDF
  5029                           postinc2	equ	0xFDE
  5030                           postdec2	equ	0xFDD
  5031                           fsr2h	equ	0xFDA
  5032                           fsr2l	equ	0xFD9
  5033                           status	equ	0xFD8
  5034                           
  5035                           	psect	text21
  5036  000000                     __ptext21:
  5037                           	opt stack 0
  5038                           tosu	equ	0xFFF
  5039                           tosh	equ	0xFFE
  5040                           tosl	equ	0xFFD
  5041                           pclath	equ	0xFFA
  5042                           tblptru	equ	0xFF8
  5043                           tblptrh	equ	0xFF7
  5044                           tblptrl	equ	0xFF6
  5045                           tablat	equ	0xFF5
  5046                           prodh	equ	0xFF4
  5047                           prodl	equ	0xFF3
  5048                           intcon	equ	0xFF2
  5049                           indf0	equ	0xFEF
  5050                           postinc0	equ	0xFEE
  5051                           fsr0h	equ	0xFEA
  5052                           fsr0l	equ	0xFE9
  5053                           wreg	equ	0xFE8
  5054                           postdec1	equ	0xFE5
  5055                           fsr1l	equ	0xFE1
  5056                           indf2	equ	0xFDF
  5057                           postinc2	equ	0xFDE
  5058                           postdec2	equ	0xFDD
  5059                           fsr2h	equ	0xFDA
  5060                           fsr2l	equ	0xFD9
  5061                           status	equ	0xFD8
  5062                           
  5063                           	psect	rparam
  5064  0000                     tosu	equ	0xFFF
  5065                           tosh	equ	0xFFE
  5066                           tosl	equ	0xFFD
  5067                           pclath	equ	0xFFA
  5068                           tblptru	equ	0xFF8
  5069                           tblptrh	equ	0xFF7
  5070                           tblptrl	equ	0xFF6
  5071                           tablat	equ	0xFF5
  5072                           prodh	equ	0xFF4
  5073                           prodl	equ	0xFF3
  5074                           intcon	equ	0xFF2
  5075                           indf0	equ	0xFEF
  5076                           postinc0	equ	0xFEE
  5077                           fsr0h	equ	0xFEA
  5078                           fsr0l	equ	0xFE9
  5079                           wreg	equ	0xFE8
  5080                           postdec1	equ	0xFE5
  5081                           fsr1l	equ	0xFE1
  5082                           indf2	equ	0xFDF
  5083                           postinc2	equ	0xFDE
  5084                           postdec2	equ	0xFDD
  5085                           fsr2h	equ	0xFDA
  5086                           fsr2l	equ	0xFD9
  5087                           status	equ	0xFD8


Data Sizes:
    Strings     257
    Constant    525
    Data        107
    BSS         43
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     63     108
    BANK0           128     71      71
    BANK1           256      0     105
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 33
		 -> packageCompartment@currTimeString(BANK0[33]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), packageCompartment@currTimeString(BANK0[33]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_17(CODE[12]), STR_16(CODE[9]), STR_11(CODE[9]), packageCompartment@currTimeString(BANK0[33]), 
		 -> STR_3(CODE[13]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), packageCompartment@currTimeString(BANK0[33]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_17(CODE[12]), STR_16(CODE[9]), STR_11(CODE[9]), STR_4(CODE[4]), 
		 -> packageCompartment@currTimeString(BANK0[33]), STR_3(CODE[13]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), printf@ap(COMRAM[2]), 

    _doprnt@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), NULL(NULL[0]), STR_18(CODE[7]), 
		 -> fSLookup(BANK1[105]), packageCompartment@currTimeString(BANK0[33]), 

    S908__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S908__prbuf$ptr	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), packageCompartment@currTimeString(BANK0[33]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 33
		 -> NULL(NULL[0]), packageCompartment@currTimeString(BANK0[33]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(COMRAM[4]), printf@pb(COMRAM[4]), 

    RTC_getTime@time	PTR unsigned char  size(2) Largest target is 7
		 -> RTC_getSeconds@time(COMRAM[7]), 

    I2C_Send@data	PTR unsigned char  size(2) Largest target is 3967
		 -> STR_12(CODE[16]), RAM(DATA[3967]), STR_10(CODE[19]), STR_9(CODE[16]), 
		 -> STR_8(CODE[16]), STR_7(CODE[13]), STR_6(CODE[15]), packageCompartment@currTimeString(BANK0[33]), 
		 -> STR_2(CODE[10]), STR_1(CODE[25]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 32
		 -> inputEntry@fastenerString(COMRAM[32]), 


Critical Paths under _main in COMRAM

    _main->_packageCompartment
    _packageCompartment->_printf
    _packageCompartment->_sprintf
    _sprintf->__doprnt
    _printf->__doprnt
    __doprnt->___llmod
    _putch->_lcdNibble
    ___llmod->___lldiv
    _RTC_getSeconds->_RTC_getTime
    _RTC_getSeconds->___wmul
    _RTC_getTime->_I2C_Master_Read
    _RTC_getTime->_I2C_Master_Write
    _I2C_Master_Read->_I2C_Master_Wait
    _I2C_Send->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _main in BANK0

    _main->_packageCompartment

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   16009
                                             62 COMRAM     1     1      0
                    _I2C_Master_Init
                           _I2C_Send
                            _initLCD
                            _lcdInst
                 _packageCompartment
                             _printf
 ---------------------------------------------------------------------------------
 (1) _packageCompartment                                  79    76      3   10578
                                             54 COMRAM     8     5      3
                                              0 BANK0     71    71      0
                           _I2C_Send
                     _RTC_getSeconds
                            _lcdInst
                             _printf
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             14     6      8    2771
                                             40 COMRAM    14     6      8
                            __doprnt
 ---------------------------------------------------------------------------------
 (1) _printf                                              14     6      8    2943
                                             40 COMRAM    14     6      8
                            __doprnt
 ---------------------------------------------------------------------------------
 (2) __doprnt                                             24    18      6    2440
                                             22 COMRAM    18    12      6
                   Absolute function *
                            ___lldiv
                            ___llmod
                              _putch *
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     311
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RTC_getSeconds                                      17    13      4    1846
                                              6 COMRAM    17    13      4
                        _RTC_getTime
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1071
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _RTC_getTime                                          3     1      2     635
                                              3 COMRAM     3     1      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Read                                      2     2      0      45
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Send                                             8     6      2    1654
                                              3 COMRAM     8     6      2
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Write                                     2     0      2     402
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     564
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     466
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Send
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _packageCompartment
     _I2C_Send
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _RTC_getSeconds
       _RTC_getTime
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       ___wmul
     _lcdInst
       _lcdNibble
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lldiv *
         ___llmod *
           ___lldiv (ARG)
         _putch *
           _lcdNibble
     _sprintf
       __doprnt
         Absolute function(Fake) *
         ___lldiv *
         ___llmod *
           ___lldiv (ARG)
         _putch *
           _lcdNibble
   _printf
     __doprnt
       Absolute function(Fake) *
       ___lldiv *
       ___llmod *
         ___lldiv (ARG)
       _putch *
         _lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      69       7       41.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     47      47       5       55.5%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     3F      6C       1       85.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     11C      34        0.0%
DATA                 0      0     11C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Feb 26 14:46:10 2018

             ___wmul@multiplicand 0003                       __CFG_BORV$3 000000  
                    __CFG_CP0$OFF 000000                       _RTC_getTime F0D8  
                    __CFG_CP1$OFF 000000                      __CFG_CP2$OFF 000000  
                    __CFG_CP3$OFF 000000                               l150 F67C  
                             l151 F6EA                               l152 F758  
                             l153 F77E                               l154 F7A2  
                             l155 F7C6                               l420 F2DA  
                             l156 F7EA                               l148 F4F6  
                             l149 F60E                               l450 F85C  
                             l194 F3F6                               l419 F318  
                             l451 F896                               l437 F114  
                             l461 FA76                               l470 F9F8  
                             l462 F8A0                               l455 FA24  
                             l480 FBAE                               l472 FAAC  
                             l473 FADE                               l465 F8DA  
                             l482 FBBA                               l474 FAF6  
                             l466 F940                               l458 F89C  
                             l483 FC76                               l467 F98E  
                             l484 FCA0                               l469 F9B8  
                             l479 FB84                               l842 F2A0  
                             l843 F2AE                               l852 F04E  
                             l853 F05C                               l838 F26C  
                             l839 F260                               l848 F026  
                             l849 F01A                      __CFG_CPB$OFF 000000  
                    __CFG_CPD$OFF 000000                               tosl 000FFD  
                             wreg 000FE8                      __CFG_LVP$OFF 000000  
                    __CFG_WDT$OFF 000000                              l2193 F10C  
                            l2291 FBBA                              l2267 FAFA  
                            STR_1 FF36                              STR_2 FFD8  
                            STR_3 FFBF                              STR_4 FFFB  
                            STR_5 FF81                              STR_6 FFA3  
                            STR_7 FFB2                              STR_8 FF73  
                            STR_9 FF83                              _LATA 000F89  
                            _LATB 000F8A                              _LATC 000F8B  
                            _LATD 000F8C                              _LATE 000F8D  
                            u1610 F02A                              u3107 F556  
                            u3117 F576                              u3207 F22C  
                            u3127 F84C                              u3047 F39C  
                            u1545 F1FA                              u3137 EE4C  
                            u3057 F3B2                              u1546 F1FC  
                            u1730 F938                              u1555 F23A  
                            u3147 EF66                              u3067 F4B2  
                            u1580 F270                              u1556 F23C  
                            u1660 F130                              u1900 FCB0  
                            u1740 F97A                              u3157 EF9A  
                            u1565 EE70                              u3077 F4C8  
                            u1566 EE72                              u1910 FCDE  
                            u1750 F9B0                              u3167 EE38  
                            u3087 F4E8                              u1920 FCE6  
                            u1840 FB38                              u1728 F906  
                            u3177 F1E2                              u1737 F92E  
                            u1729 F93A                              u3097 F540  
                            u1930 F308                              u3187 F1EC  
                            u1747 F970                              u1940 F346  
                            u3197 F222                              u1917 FCD4  
                            u1757 F9A6                              u1790 FA52  
                            u1937 F2FE                              u1698 F890  
                            u2755 EFE0                              u1947 F33C  
                            u1788 F9E4                              u1797 FA48  
                            u1878 FB70                              u1898 FC62  
                            _main F352      __end_of_assemblyStepEncoding FD3F  
                            fsr0h 000FEA                              indf0 000FEF  
                            fsr2h 000FDA                              fsr0l 000FE9  
                            indf2 000FDF                              fsr1l 000FE1  
                            fsr2l 000FD9                  __end_of_I2C_Send F352  
                            prodh 000FF4                              prodl 000FF3  
                            start 0000                     __CFG_IESO$OFF 000000  
                   __CFG_MCLRE$ON 000000                      ___param_bank 000000  
                __end_of_LCD_LEFT FD41             I2C_Master_Read@ackBit 0002  
                ?_I2C_Master_Init 000E                  ?_I2C_Master_Read 0001  
                ?_I2C_Master_Wait 0001                  ?_I2C_Master_Stop 0001  
                           ?_main 0001                             STR_10 FF4F  
                           STR_11 FFEB                             STR_12 FF93  
                           STR_13 FF62                             STR_14 FF1C  
                           STR_15 FEFE                             STR_16 FFE2  
                           STR_17 FFCC                             STR_18 FFF4  
                 __end_of___lldiv F2C0                   __end_of___llmod F06E  
                           _PORTB 000F81                   __end_of__doprnt FCF0  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISC 000F94                             _TRISD 000F95  
                           _TRISE 000F96                     __CFG_PWRT$OFF 000000  
              RTC_getSeconds@time 000D                     __CFG_WRT0$OFF 000000  
                   __CFG_WRT1$OFF 000000                     __CFG_WRT2$OFF 000000  
                   __CFG_WRT3$OFF 000000                   __end_of_lcdInst EE40  
                  __CFG_EBTR0$OFF 000000                    __CFG_FCMEN$OFF 000000  
                  __CFG_EBTR1$OFF 000000                    __CFG_EBTR2$OFF 000000  
                  __CFG_EBTR3$OFF 000000                     __CFG_WRTB$OFF 000000  
                   __CFG_WRTC$OFF 000000                     __CFG_WRTD$OFF 000000  
                 __end_of_errMsgs FE26                   __end_of_initLCD EFAC  
                  __CFG_EBTRB$OFF 000000                   __end_of_dpowers FD19  
                           _putch EE40                             pclath 000FFA  
                           tablat 000FF5                 _LCDinterruptState 006A  
                           status 000FD8       I2C_Master_Read@receivedByte 0003  
                 __end_of_sprintf EF16                   __initialization EF16  
                    __end_of_main F3F8                    _RTC_getSeconds F14A  
                  __CFG_OSC$HSPLL 000000                 __end_of_LCD_RIGHT FD42  
                          ??_main 003F                     __activetblptr 000003  
               ?_I2C_Master_Start 0001                 ?_I2C_Master_Write 0002  
                       I2C_Send@i 000A                ??_I2C_Master_Start 0002  
              ??_I2C_Master_Write 0004                  ___llmod@dividend 000E  
                          ?_putch 0001                            _SSPADD 000FC8  
                          _SSPBUF 000FC9                    __CFG_XINST$OFF 000000  
          __end_of_RTC_getSeconds F1C0                      RTC_getTime@i 0006  
                          ___wmul EE78                    __CFG_STVREN$ON 000000  
                __end_of_nanoAddr FD40                         ??___lldiv 0009  
                       ??___llmod 0016                         ??__doprnt 001D  
                          _params 0040                            clear_0 EF54  
                          _extras 005A                      __doprnt@flag 0021  
                       ??_lcdInst 0003                            _printf EE9E  
                    __doprnt@prec 001F                         ??_initLCD 0004  
            _assemblyStepEncoding FD3A                      __pdataCOMRAM 006B  
                       ?_I2C_Send 0004                      __mediumconst FCF0  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                         ??_sprintf 0031  
            __end_of_LCDMenuIcons FD3A                        __accesstop 0080  
         __end_of__initialization EF5A                   __CFG_PBADEN$OFF 000000  
                   ___rparam_used 000001                   ?_RTC_getSeconds 0007  
      packageCompartment@currTime 00C3                    __pcstackCOMRAM 0001  
                    __pidataBANK1 F06F        __end_of_packageCompartment F85A  
                   __end_of_putch EE54                      ?_RTC_getTime 0004  
              __size_of_lcdNibble 007E                        ??_I2C_Send 0006  
                      __doprnt@ap 001B                        __doprnt@cp 0026  
                      __doprnt@pb 0017                           ??_putch 0003  
             _inputEntryQuestions FE26                           ?___wmul 0001  
                         ?_printf 0029                      I2C_Send@data 0004  
                         _SSPCON1 000FC6                           _SSPCON2 000FC5  
                         _SSPSTAT 000FC7                 __end_of_lcdNibble F23E  
                         __Hparam 0000                           __Lparam 0000  
                         ___lldiv F23E                   __size_of___wmul 0026  
                         ___llmod F008                           __doprnt F85A  
                         __pcinit EF16                           __ramtop 1000  
                         _lcdInst EE2C                           __ptext0 F352  
                         __ptext1 F3F8                           __ptext2 EED4  
                         __ptext3 EE9E                           __ptext4 F85A  
                         __ptext5 EE40                           __ptext6 F008  
                         __ptext7 F14A                           __ptext8 EE78  
                         __ptext9 F0D8                   __size_of_printf 0036  
                         _errMsgs FD46                           _initLCD EF60  
                         _dpowers FCF1                         _LCD_RIGHT FD41  
        __size_of_I2C_Master_Init 005C          __size_of_I2C_Master_Read 0024  
        __size_of_I2C_Master_Wait 0012          __size_of_I2C_Master_Stop 0008  
                         _sprintf EED4              end_of_initialization EF5A  
           __end_of_LCD_SIZE_HORZ FD44             __end_of_LCD_SIZE_VERT FD43  
       __size_of_I2C_Master_Start 0008         __size_of_I2C_Master_Write 000A  
                 ___lldiv@divisor 0005                   ___lldiv@counter 000D  
          packageCompartment@numB 00B2            packageCompartment@numN 00B4  
          packageCompartment@numS 00B6            packageCompartment@numW 00B8  
                         printf@f 0029                           postdec1 000FE5  
                         postdec2 000FDD                           postinc0 000FEE  
                         postinc2 000FDE                      _LCDMenuIcons FD2A  
                       _PORTAbits 000F80                         _PORTBbits 000F81  
            __size_of_RTC_getTime 0072                         _TRISCbits 000F94  
               __size_of_I2C_Send 0092                  ??_RTC_getSeconds 000B  
                  __end_of___wmul EE9E                     __pidataCOMRAM EDFE  
                  __end_of_printf EED4               packageCompartment@b 00A1  
             packageCompartment@n 0037               packageCompartment@s 0038  
             packageCompartment@w 0039               start_initialization EF16  
              _packageCompartment F3F8                 ??_I2C_Master_Init 0012  
               ??_I2C_Master_Read 0002               ?_packageCompartment 0037  
               ??_I2C_Master_Wait 0001                 ??_I2C_Master_Stop 0002  
                 ___llmod@divisor 0012                   ___llmod@counter 0016  
                        ??___wmul 0005                       __doprnt@val 0022  
        I2C_Master_Init@clockFreq 000E                       __pdataBANK1 0100  
                __CFG_LPT1OSC$OFF 000000              ??_packageCompartment 003A  
                        ??_printf 0031                       __pbssCOMRAM 0040  
                   __pcstackBANK0 0080                   RTC_getTime@time 0004  
                       __doprnt@c 0028                         __doprnt@f 0019  
                _I2C_Master_Start EE00                  _I2C_Master_Write EE10  
               __CFG_CCP2MX$PORTC 000000                     __pmediumconst FCF0  
                       _lcdNibble F1C0                          ?___lldiv 0001  
                        ?___llmod 000E  packageCompartment@currTimeString 0080  
                        ?__doprnt 0017                          ?_lcdInst 0001  
                       _dispensed 0062                          ?_initLCD 0001  
                        _I2C_Send F2C0                          ?_sprintf 0029  
                  __size_of_putch 0014                   inputEntry@F3149 006B  
             __end_of_keypadChars FD2A                          _LCD_LEFT FD40  
                  _fastenerMatrix FEAA                    ___wmul@product 0005  
                        _LATBbits 000F8A                          _LATCbits 000F8B  
                        _LATDbits 000F8C      packageCompartment@resolution 00C2  
                __CFG_WDTPS$32768 000000                        ?_lcdNibble 0001  
     __end_of_inputEntryQuestions FEAA                 ___wmul@multiplier 0001  
                   lcdNibble@data 0002                     lcdNibble@temp 0001  
           RTC_getSeconds@seconds 0014                    _LCD_HORZ_LIMIT FD45  
                       copy_data0 EF2A            __end_of_fastenerMatrix FEFE  
                        __Hrparam 0000                          __Lrparam 0000  
              __CFG_BOREN$SBORDIS 000000                          _fSLookup 0100  
                 I2C_Send@address 0009                  __size_of___lldiv 0082  
                __size_of___llmod 0066                     ??_RTC_getTime 0006  
                __size_of__doprnt 0496                  __size_of_lcdInst 0014  
                 _I2C_Master_Init EFAC                   _I2C_Master_Read EE54  
                __size_of_initLCD 004C                   _I2C_Master_Wait EE1A  
                 _I2C_Master_Stop EE08            __end_of_LCD_HORZ_LIMIT FD46  
                     _keypadChars FD19                          __ptext10 EE54  
                        __ptext11 F2C0                          __ptext20 F23E  
                        __ptext12 EE10                          __ptext21 0000  
                        __ptext13 EE08                          __ptext14 EE00  
                        __ptext15 EE1A                          __ptext16 EF60  
                        __ptext17 EE2C                          __ptext18 F1C0  
                        __ptext19 EFAC                    _LCD_VERT_LIMIT FD44  
                __size_of_sprintf 0042                          _nanoAddr FD3F  
                   __size_of_main 00A6                       ??_lcdNibble 0001  
     I2C_Master_Write@byteToWrite 0002                         putch@data 0003  
        __end_of_I2C_Master_Start EE08          __end_of_I2C_Master_Write EE1A  
                      _INTCONbits 000FF2            __end_of_LCD_VERT_LIMIT FD45  
             __end_of_RTC_getTime F14A                         sprintf@ap 0031  
                       sprintf@pb 0033                         sprintf@wh 0029  
                   _LCD_SIZE_HORZ FD43                     _LCD_SIZE_VERT FD42  
                ___lldiv@dividend 0001           packageCompartment@doneB 00BA  
         packageCompartment@doneN 00BC           packageCompartment@doneS 00BE  
         packageCompartment@doneW 00C0           packageCompartment@timeB 00A2  
         packageCompartment@timeN 00A6           packageCompartment@timeS 00AA  
         packageCompartment@timeW 00AE                          printf@ap 0031  
                        printf@pb 0033           __size_of_RTC_getSeconds 0076  
         __end_of_I2C_Master_Init F008           __end_of_I2C_Master_Read EE78  
         __end_of_I2C_Master_Wait EE2C           __end_of_I2C_Master_Stop EE10  
                     lcdInst@data 0003       __size_of_packageCompartment 0462  
                        sprintf@f 002B                  ___lldiv@quotient 0009  
                     _SSPCON1bits 000FC6                       _SSPCON2bits 000FC5  
