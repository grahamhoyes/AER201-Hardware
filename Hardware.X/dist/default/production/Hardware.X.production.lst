

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar 13 02:04:43 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    66                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    67  0000                     
    68                           ; Version 1.45
    69                           ; Generated 16/11/2017 GMT
    70                           ; 
    71                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    72                           ; All rights reserved.
    73                           ; 
    74                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    75                           ; 
    76                           ; Redistribution and use in source and binary forms, with or without modification, are
    77                           ; permitted provided that the following conditions are met:
    78                           ; 
    79                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    80                           ;        conditions and the following disclaimer.
    81                           ; 
    82                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    83                           ;        of conditions and the following disclaimer in the documentation and/or other
    84                           ;        materials provided with the distribution.
    85                           ; 
    86                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    87                           ;        software without specific prior written permission.
    88                           ; 
    89                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    90                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    91                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    92                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    93                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    94                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    95                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    96                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    97                           ; 
    98                           ; 
    99                           ; Code-generator required, PIC18F4620 Definitions
   100                           ; 
   101                           ; SFR Addresses
   102  0000                     
   103                           	psect	idataCOMRAM
   104  002C34                     __pidataCOMRAM:
   105                           	opt stack 0
   106                           
   107                           ;initializer for _timeSinceLastTic
   108  002C34  00                 	db	0
   109  002C35  80                 	db	128
   110  002C36  BF                 	db	191
   111                           
   112                           ;initializer for timer@operatingTime
   113  002C37  00                 	db	0
   114  002C38  80                 	db	128
   115  002C39  BF                 	db	191
   116                           
   117                           ;initializer for inputEntry@F3177
   118  002C3A  43                 	db	67
   119  002C3B  30                 	db	48
   120                           
   121                           ;initializer for packaging@F3204
   122  002C3C  08                 	db	8
   123  002C3D  00                 	db	0
   124                           
   125                           	psect	idataBANK1
   126  00228C                     __pidataBANK1:
   127                           	opt stack 0
   128                           
   129                           ;initializer for packaging@F3206
   130  00228C  01                 	db	1
   131  00228D  53                 	db	83
   132  00228E  74                 	db	116
   133  00228F  61                 	db	97
   134  002290  72                 	db	114
   135  002291  74                 	db	116
   136  002292  65                 	db	101
   137  002293  64                 	db	100
   138  002294  20                 	db	32
   139  002295  70                 	db	112
   140  002296  61                 	db	97
   141  002297  63                 	db	99
   142  002298  6B                 	db	107
   143  002299  61                 	db	97
   144  00229A  67                 	db	103
   145  00229B  69                 	db	105
   146  00229C  6E                 	db	110
   147  00229D  67                 	db	103
   148  00229E  20                 	db	32
   149  00229F  63                 	db	99
   150  0022A0  6F                 	db	111
   151  0022A1  6D                 	db	109
   152  0022A2  70                 	db	112
   153  0022A3  61                 	db	97
   154  0022A4  72                 	db	114
   155  0022A5  74                 	db	116
   156  0022A6  6D                 	db	109
   157  0022A7  65                 	db	101
   158  0022A8  6E                 	db	110
   159  0022A9  74                 	db	116
   160  0022AA  20                 	db	32
   161  0022AB  78                 	db	120
   162  0022AC  00                 	db	0
   163  0022AD  00                 	db	0
   164                           
   165                           ;initializer for inputEntry@F3198
   166  0022AE  01                 	db	1
   167  0022AF  53                 	db	83
   168  0022B0  74                 	db	116
   169  0022B1  61                 	db	97
   170  0022B2  72                 	db	114
   171  0022B3  74                 	db	116
   172  0022B4  65                 	db	101
   173  0022B5  64                 	db	100
   174  0022B6  20                 	db	32
   175  0022B7  63                 	db	99
   176  0022B8  6F                 	db	111
   177  0022B9  6D                 	db	109
   178  0022BA  70                 	db	112
   179  0022BB  61                 	db	97
   180  0022BC  72                 	db	114
   181  0022BD  74                 	db	116
   182  0022BE  6D                 	db	109
   183  0022BF  65                 	db	101
   184  0022C0  6E                 	db	110
   185  0022C1  74                 	db	116
   186  0022C2  20                 	db	32
   187  0022C3  78                 	db	120
   188  0022C4  00                 	db	0
   189  0022C5  00                 	db	0
   190                           
   191                           ;initializer for _fSLookup
   192  0022C6  4E                 	db	78
   193  0022C7  4F                 	db	79
   194  0022C8  4E                 	db	78
   195  0022C9  45                 	db	69
   196  0022CA  00                 	db	0
   197  0022CB  42                 	db	66
   198  0022CC  00                 	db	0
   199  0022CD  00                 	db	0
   200  0022CE  00                 	db	0
   201  0022CF  00                 	db	0
   202  0022D0  4E                 	db	78
   203  0022D1  00                 	db	0
   204  0022D2  00                 	db	0
   205  0022D3  00                 	db	0
   206  0022D4  00                 	db	0
   207  0022D5  53                 	db	83
   208  0022D6  00                 	db	0
   209  0022D7  00                 	db	0
   210  0022D8  00                 	db	0
   211  0022D9  00                 	db	0
   212  0022DA  57                 	db	87
   213  0022DB  00                 	db	0
   214  0022DC  00                 	db	0
   215  0022DD  00                 	db	0
   216  0022DE  00                 	db	0
   217  0022DF  42                 	db	66
   218  0022E0  4E                 	db	78
   219  0022E1  00                 	db	0
   220  0022E2  00                 	db	0
   221  0022E3  00                 	db	0
   222  0022E4  42                 	db	66
   223  0022E5  53                 	db	83
   224  0022E6  00                 	db	0
   225  0022E7  00                 	db	0
   226  0022E8  00                 	db	0
   227  0022E9  42                 	db	66
   228  0022EA  57                 	db	87
   229  0022EB  00                 	db	0
   230  0022EC  00                 	db	0
   231  0022ED  00                 	db	0
   232  0022EE  42                 	db	66
   233  0022EF  42                 	db	66
   234  0022F0  4E                 	db	78
   235  0022F1  00                 	db	0
   236  0022F2  00                 	db	0
   237  0022F3  42                 	db	66
   238  0022F4  42                 	db	66
   239  0022F5  53                 	db	83
   240  0022F6  00                 	db	0
   241  0022F7  00                 	db	0
   242  0022F8  42                 	db	66
   243  0022F9  42                 	db	66
   244  0022FA  57                 	db	87
   245  0022FB  00                 	db	0
   246  0022FC  00                 	db	0
   247  0022FD  42                 	db	66
   248  0022FE  4E                 	db	78
   249  0022FF  57                 	db	87
   250  002300  00                 	db	0
   251  002301  00                 	db	0
   252  002302  42                 	db	66
   253  002303  53                 	db	83
   254  002304  57                 	db	87
   255  002305  00                 	db	0
   256  002306  00                 	db	0
   257  002307  42                 	db	66
   258  002308  57                 	db	87
   259  002309  57                 	db	87
   260  00230A  00                 	db	0
   261  00230B  00                 	db	0
   262  00230C  42                 	db	66
   263  00230D  4E                 	db	78
   264  00230E  4E                 	db	78
   265  00230F  57                 	db	87
   266  002310  00                 	db	0
   267  002311  42                 	db	66
   268  002312  53                 	db	83
   269  002313  57                 	db	87
   270  002314  57                 	db	87
   271  002315  00                 	db	0
   272  002316  42                 	db	66
   273  002317  42                 	db	66
   274  002318  53                 	db	83
   275  002319  57                 	db	87
   276  00231A  00                 	db	0
   277  00231B  42                 	db	66
   278  00231C  42                 	db	66
   279  00231D  4E                 	db	78
   280  00231E  57                 	db	87
   281  00231F  00                 	db	0
   282  002320  42                 	db	66
   283  002321  4E                 	db	78
   284  002322  4E                 	db	78
   285  002323  57                 	db	87
   286  002324  00                 	db	0
   287  002325  42                 	db	66
   288  002326  4E                 	db	78
   289  002327  4E                 	db	78
   290  002328  4E                 	db	78
   291  002329  00                 	db	0
   292  00232A  42                 	db	66
   293  00232B  57                 	db	87
   294  00232C  57                 	db	87
   295  00232D  57                 	db	87
   296  00232E  00                 	db	0
   297                           
   298                           	psect	mediumconst
   299  00FC30                     __pmediumconst:
   300                           	opt stack 0
   301  00FC30  00                 	db	0
   302  00FC31                     _dpowers:
   303                           	opt stack 0
   304  00FC31  0001               	dw	1
   305  00FC33  0000               	dw	0
   306  00FC35  000A               	dw	10
   307  00FC37  0000               	dw	0
   308  00FC39  0064               	dw	100
   309  00FC3B  0000               	dw	0
   310  00FC3D  03E8               	dw	1000
   311  00FC3F  0000               	dw	0
   312  00FC41  2710               	dw	10000
   313  00FC43  0000               	dw	0
   314  00FC45  86A0               	dw	34464
   315  00FC47  0001               	dw	1
   316  00FC49  4240               	dw	16960
   317  00FC4B  000F               	dw	15
   318  00FC4D  9680               	dw	38528
   319  00FC4F  0098               	dw	152
   320  00FC51  E100               	dw	57600
   321  00FC53  05F5               	dw	1525
   322  00FC55  CA00               	dw	51712
   323  00FC57  3B9A               	dw	15258
   324  00FC59                     __end_of_dpowers:
   325                           	opt stack 0
   326  00FC59                     _keypadChars:
   327                           	opt stack 0
   328  00FC59  31                 	db	49
   329  00FC5A  32                 	db	50
   330  00FC5B  33                 	db	51
   331  00FC5C  42                 	db	66
   332  00FC5D  34                 	db	52
   333  00FC5E  35                 	db	53
   334  00FC5F  36                 	db	54
   335  00FC60  4E                 	db	78
   336  00FC61  37                 	db	55
   337  00FC62  38                 	db	56
   338  00FC63  39                 	db	57
   339  00FC64  53                 	db	83
   340  00FC65  2A                 	db	42
   341  00FC66  30                 	db	48
   342  00FC67  23                 	db	35
   343  00FC68  57                 	db	87
   344  00FC69  00                 	db	0
   345  00FC6A                     __end_of_keypadChars:
   346                           	opt stack 0
   347  00FC6A                     _LCDMenuIcons:
   348                           	opt stack 0
   349  00FC6A  2A                 	db	42
   350  00FC6B  3C                 	db	60
   351  00FC6C  2D                 	db	45
   352  00FC6D  20                 	db	32
   353  00FC6E  20                 	db	32
   354  00FC6F  20                 	db	32
   355  00FC70  28                 	db	40
   356  00FC71  20                 	db	32
   357  00FC72  2D                 	db	45
   358  00FC73  20                 	db	32
   359  00FC74  29                 	db	41
   360  00FC75  20                 	db	32
   361  00FC76  20                 	db	32
   362  00FC77  20                 	db	32
   363  00FC78  20                 	db	32
   364  00FC79  00                 	db	0
   365  00FC7A                     __end_of_LCDMenuIcons:
   366                           	opt stack 0
   367  00FC7A                     _assemblyStepEncoding:
   368                           	opt stack 0
   369  00FC7A  55                 	db	85
   370  00FC7B  5B                 	db	91
   371  00FC7C  77                 	db	119
   372  00FC7D  7F                 	db	127
   373  00FC7E  FF                 	db	255
   374  00FC7F                     __end_of_assemblyStepEncoding:
   375                           	opt stack 0
   376  00FC7F                     _nanoAddr:
   377                           	opt stack 0
   378  00FC7F  10                 	db	16
   379  00FC80                     __end_of_nanoAddr:
   380                           	opt stack 0
   381  00FC80                     _LCD_LEFT:
   382                           	opt stack 0
   383  00FC80  00                 	db	0
   384  00FC81                     __end_of_LCD_LEFT:
   385                           	opt stack 0
   386  00FC81                     _LCD_RIGHT:
   387                           	opt stack 0
   388  00FC81  01                 	db	1
   389  00FC82                     __end_of_LCD_RIGHT:
   390                           	opt stack 0
   391  00FC82                     _LCD_SIZE_VERT:
   392                           	opt stack 0
   393  00FC82  02                 	db	2
   394  00FC83                     __end_of_LCD_SIZE_VERT:
   395                           	opt stack 0
   396  00FC83                     _LCD_SIZE_HORZ:
   397                           	opt stack 0
   398  00FC83  10                 	db	16
   399  00FC84                     __end_of_LCD_SIZE_HORZ:
   400                           	opt stack 0
   401  00FC84                     _LCD_VERT_LIMIT:
   402                           	opt stack 0
   403  00FC84  02                 	db	2
   404  00FC85                     __end_of_LCD_VERT_LIMIT:
   405                           	opt stack 0
   406  00FC85                     _LCD_HORZ_LIMIT:
   407                           	opt stack 0
   408  00FC85  28                 	db	40
   409  00FC86                     __end_of_LCD_HORZ_LIMIT:
   410                           	opt stack 0
   411  00FC86                     _errMsgs:
   412                           	opt stack 0
   413  00FC86  49                 	db	73
   414  00FC87  6E                 	db	110
   415  00FC88  76                 	db	118
   416  00FC89  61                 	db	97
   417  00FC8A  6C                 	db	108
   418  00FC8B  69                 	db	105
   419  00FC8C  64                 	db	100
   420  00FC8D  20                 	db	32
   421  00FC8E  65                 	db	101
   422  00FC8F  6E                 	db	110
   423  00FC90  74                 	db	116
   424  00FC91  72                 	db	114
   425  00FC92  79                 	db	121
   426  00FC93  0A                 	db	10
   427  00FC94  50                 	db	80
   428  00FC95  6C                 	db	108
   429  00FC96  65                 	db	101
   430  00FC97  61                 	db	97
   431  00FC98  73                 	db	115
   432  00FC99  65                 	db	101
   433  00FC9A  20                 	db	32
   434  00FC9B  74                 	db	116
   435  00FC9C  72                 	db	114
   436  00FC9D  79                 	db	121
   437  00FC9E  20                 	db	32
   438  00FC9F  61                 	db	97
   439  00FCA0  67                 	db	103
   440  00FCA1  61                 	db	97
   441  00FCA2  69                 	db	105
   442  00FCA3  6E                 	db	110
   443  00FCA4  00                 	db	0
   444  00FCA5  00                 	db	0
   445  00FCA6  54                 	db	84
   446  00FCA7  6F                 	db	111
   447  00FCA8  6F                 	db	111
   448  00FCA9  20                 	db	32
   449  00FCAA  6D                 	db	109
   450  00FCAB  61                 	db	97
   451  00FCAC  6E                 	db	110
   452  00FCAD  79                 	db	121
   453  00FCAE  20                 	db	32
   454  00FCAF  66                 	db	102
   455  00FCB0  61                 	db	97
   456  00FCB1  73                 	db	115
   457  00FCB2  74                 	db	116
   458  00FCB3  65                 	db	101
   459  00FCB4  6E                 	db	110
   460  00FCB5  65                 	db	101
   461  00FCB6  72                 	db	114
   462  00FCB7  73                 	db	115
   463  00FCB8  00                 	db	0
   464  00FCB9  00                 	db	0
   465  00FCBA  00                 	db	0
   466  00FCBB  00                 	db	0
   467  00FCBC  00                 	db	0
   468  00FCBD  00                 	db	0
   469  00FCBE  00                 	db	0
   470  00FCBF  00                 	db	0
   471  00FCC0  00                 	db	0
   472  00FCC1  00                 	db	0
   473  00FCC2  00                 	db	0
   474  00FCC3  00                 	db	0
   475  00FCC4  00                 	db	0
   476  00FCC5  00                 	db	0
   477  00FCC6  54                 	db	84
   478  00FCC7  6F                 	db	111
   479  00FCC8  6F                 	db	111
   480  00FCC9  20                 	db	32
   481  00FCCA  6D                 	db	109
   482  00FCCB  61                 	db	97
   483  00FCCC  6E                 	db	110
   484  00FCCD  79                 	db	121
   485  00FCCE  20                 	db	32
   486  00FCCF  62                 	db	98
   487  00FCD0  6F                 	db	111
   488  00FCD1  6C                 	db	108
   489  00FCD2  74                 	db	116
   490  00FCD3  73                 	db	115
   491  00FCD4  00                 	db	0
   492  00FCD5  00                 	db	0
   493  00FCD6  00                 	db	0
   494  00FCD7  00                 	db	0
   495  00FCD8  00                 	db	0
   496  00FCD9  00                 	db	0
   497  00FCDA  00                 	db	0
   498  00FCDB  00                 	db	0
   499  00FCDC  00                 	db	0
   500  00FCDD  00                 	db	0
   501  00FCDE  00                 	db	0
   502  00FCDF  00                 	db	0
   503  00FCE0  00                 	db	0
   504  00FCE1  00                 	db	0
   505  00FCE2  00                 	db	0
   506  00FCE3  00                 	db	0
   507  00FCE4  00                 	db	0
   508  00FCE5  00                 	db	0
   509  00FCE6  54                 	db	84
   510  00FCE7  6F                 	db	111
   511  00FCE8  6F                 	db	111
   512  00FCE9  20                 	db	32
   513  00FCEA  6D                 	db	109
   514  00FCEB  61                 	db	97
   515  00FCEC  6E                 	db	110
   516  00FCED  79                 	db	121
   517  00FCEE  20                 	db	32
   518  00FCEF  6E                 	db	110
   519  00FCF0  75                 	db	117
   520  00FCF1  74                 	db	116
   521  00FCF2  73                 	db	115
   522  00FCF3  00                 	db	0
   523  00FCF4  00                 	db	0
   524  00FCF5  00                 	db	0
   525  00FCF6  00                 	db	0
   526  00FCF7  00                 	db	0
   527  00FCF8  00                 	db	0
   528  00FCF9  00                 	db	0
   529  00FCFA  00                 	db	0
   530  00FCFB  00                 	db	0
   531  00FCFC  00                 	db	0
   532  00FCFD  00                 	db	0
   533  00FCFE  00                 	db	0
   534  00FCFF  00                 	db	0
   535  00FD00  00                 	db	0
   536  00FD01  00                 	db	0
   537  00FD02  00                 	db	0
   538  00FD03  00                 	db	0
   539  00FD04  00                 	db	0
   540  00FD05  00                 	db	0
   541  00FD06  54                 	db	84
   542  00FD07  6F                 	db	111
   543  00FD08  6F                 	db	111
   544  00FD09  20                 	db	32
   545  00FD0A  6D                 	db	109
   546  00FD0B  61                 	db	97
   547  00FD0C  6E                 	db	110
   548  00FD0D  79                 	db	121
   549  00FD0E  20                 	db	32
   550  00FD0F  77                 	db	119
   551  00FD10  61                 	db	97
   552  00FD11  73                 	db	115
   553  00FD12  68                 	db	104
   554  00FD13  65                 	db	101
   555  00FD14  72                 	db	114
   556  00FD15  73                 	db	115
   557  00FD16  00                 	db	0
   558  00FD17  00                 	db	0
   559  00FD18  00                 	db	0
   560  00FD19  00                 	db	0
   561  00FD1A  00                 	db	0
   562  00FD1B  00                 	db	0
   563  00FD1C  00                 	db	0
   564  00FD1D  00                 	db	0
   565  00FD1E  00                 	db	0
   566  00FD1F  00                 	db	0
   567  00FD20  00                 	db	0
   568  00FD21  00                 	db	0
   569  00FD22  00                 	db	0
   570  00FD23  00                 	db	0
   571  00FD24  00                 	db	0
   572  00FD25  00                 	db	0
   573  00FD26  54                 	db	84
   574  00FD27  6F                 	db	111
   575  00FD28  6F                 	db	111
   576  00FD29  20                 	db	32
   577  00FD2A  6D                 	db	109
   578  00FD2B  61                 	db	97
   579  00FD2C  6E                 	db	110
   580  00FD2D  79                 	db	121
   581  00FD2E  20                 	db	32
   582  00FD2F  73                 	db	115
   583  00FD30  70                 	db	112
   584  00FD31  61                 	db	97
   585  00FD32  63                 	db	99
   586  00FD33  65                 	db	101
   587  00FD34  72                 	db	114
   588  00FD35  73                 	db	115
   589  00FD36  00                 	db	0
   590  00FD37  00                 	db	0
   591  00FD38  00                 	db	0
   592  00FD39  00                 	db	0
   593  00FD3A  00                 	db	0
   594  00FD3B  00                 	db	0
   595  00FD3C  00                 	db	0
   596  00FD3D  00                 	db	0
   597  00FD3E  00                 	db	0
   598  00FD3F  00                 	db	0
   599  00FD40  00                 	db	0
   600  00FD41  00                 	db	0
   601  00FD42  00                 	db	0
   602  00FD43  00                 	db	0
   603  00FD44  00                 	db	0
   604  00FD45  00                 	db	0
   605  00FD46  4E                 	db	78
   606  00FD47  6F                 	db	111
   607  00FD48  20                 	db	32
   608  00FD49  66                 	db	102
   609  00FD4A  61                 	db	97
   610  00FD4B  73                 	db	115
   611  00FD4C  74                 	db	116
   612  00FD4D  65                 	db	101
   613  00FD4E  6E                 	db	110
   614  00FD4F  65                 	db	101
   615  00FD50  72                 	db	114
   616  00FD51  73                 	db	115
   617  00FD52  20                 	db	32
   618  00FD53  73                 	db	115
   619  00FD54  65                 	db	101
   620  00FD55  6C                 	db	108
   621  00FD56  65                 	db	101
   622  00FD57  63                 	db	99
   623  00FD58  74                 	db	116
   624  00FD59  65                 	db	101
   625  00FD5A  64                 	db	100
   626  00FD5B  00                 	db	0
   627  00FD5C  00                 	db	0
   628  00FD5D  00                 	db	0
   629  00FD5E  00                 	db	0
   630  00FD5F  00                 	db	0
   631  00FD60  00                 	db	0
   632  00FD61  00                 	db	0
   633  00FD62  00                 	db	0
   634  00FD63  00                 	db	0
   635  00FD64  00                 	db	0
   636  00FD65  00                 	db	0
   637  00FD66                     __end_of_errMsgs:
   638                           	opt stack 0
   639  00FD66                     _inputEntryQuestions:
   640                           	opt stack 0
   641  00FD66  41                 	db	65
   642  00FD67  73                 	db	115
   643  00FD68  73                 	db	115
   644  00FD69  65                 	db	101
   645  00FD6A  6D                 	db	109
   646  00FD6B  62                 	db	98
   647  00FD6C  6C                 	db	108
   648  00FD6D  79                 	db	121
   649  00FD6E  20                 	db	32
   650  00FD6F  73                 	db	115
   651  00FD70  74                 	db	116
   652  00FD71  65                 	db	101
   653  00FD72  70                 	db	112
   654  00FD73  73                 	db	115
   655  00FD74  0A                 	db	10
   656  00FD75  2A                 	db	42
   657  00FD76  3C                 	db	60
   658  00FD77  2D                 	db	45
   659  00FD78  20                 	db	32
   660  00FD79  20                 	db	32
   661  00FD7A  28                 	db	40
   662  00FD7B  34                 	db	52
   663  00FD7C  2D                 	db	45
   664  00FD7D  38                 	db	56
   665  00FD7E  29                 	db	41
   666  00FD7F  20                 	db	32
   667  00FD80  20                 	db	32
   668  00FD81  20                 	db	32
   669  00FD82  20                 	db	32
   670  00FD83  20                 	db	32
   671  00FD84  00                 	db	0
   672  00FD85  00                 	db	0
   673  00FD86  00                 	db	0
   674  00FD87  46                 	db	70
   675  00FD88  61                 	db	97
   676  00FD89  73                 	db	115
   677  00FD8A  74                 	db	116
   678  00FD8B  65                 	db	101
   679  00FD8C  6E                 	db	110
   680  00FD8D  65                 	db	101
   681  00FD8E  72                 	db	114
   682  00FD8F  73                 	db	115
   683  00FD90  20                 	db	32
   684  00FD91  69                 	db	105
   685  00FD92  6E                 	db	110
   686  00FD93  20                 	db	32
   687  00FD94  43                 	db	67
   688  00FD95  78                 	db	120
   689  00FD96  0A                 	db	10
   690  00FD97  2A                 	db	42
   691  00FD98  3C                 	db	60
   692  00FD99  2D                 	db	45
   693  00FD9A  28                 	db	40
   694  00FD9B  42                 	db	66
   695  00FD9C  4E                 	db	78
   696  00FD9D  53                 	db	83
   697  00FD9E  57                 	db	87
   698  00FD9F  29                 	db	41
   699  00FDA0  20                 	db	32
   700  00FDA1  20                 	db	32
   701  00FDA2  20                 	db	32
   702  00FDA3  20                 	db	32
   703  00FDA4  2D                 	db	45
   704  00FDA5  3E                 	db	62
   705  00FDA6  23                 	db	35
   706  00FDA7  00                 	db	0
   707  00FDA8  48                 	db	72
   708  00FDA9  6F                 	db	111
   709  00FDAA  77                 	db	119
   710  00FDAB  20                 	db	32
   711  00FDAC  6D                 	db	109
   712  00FDAD  61                 	db	97
   713  00FDAE  6E                 	db	110
   714  00FDAF  79                 	db	121
   715  00FDB0  20                 	db	32
   716  00FDB1  73                 	db	115
   717  00FDB2  65                 	db	101
   718  00FDB3  74                 	db	116
   719  00FDB4  73                 	db	115
   720  00FDB5  3F                 	db	63
   721  00FDB6  0A                 	db	10
   722  00FDB7  2A                 	db	42
   723  00FDB8  3C                 	db	60
   724  00FDB9  2D                 	db	45
   725  00FDBA  20                 	db	32
   726  00FDBB  20                 	db	32
   727  00FDBC  28                 	db	40
   728  00FDBD  31                 	db	49
   729  00FDBE  2D                 	db	45
   730  00FDBF  34                 	db	52
   731  00FDC0  29                 	db	41
   732  00FDC1  20                 	db	32
   733  00FDC2  20                 	db	32
   734  00FDC3  20                 	db	32
   735  00FDC4  20                 	db	32
   736  00FDC5  20                 	db	32
   737  00FDC6  00                 	db	0
   738  00FDC7  00                 	db	0
   739  00FDC8  00                 	db	0
   740  00FDC9  43                 	db	67
   741  00FDCA  6F                 	db	111
   742  00FDCB  6E                 	db	110
   743  00FDCC  66                 	db	102
   744  00FDCD  69                 	db	105
   745  00FDCE  72                 	db	114
   746  00FDCF  6D                 	db	109
   747  00FDD0  3F                 	db	63
   748  00FDD1  0A                 	db	10
   749  00FDD2  2A                 	db	42
   750  00FDD3  3C                 	db	60
   751  00FDD4  2D                 	db	45
   752  00FDD5  20                 	db	32
   753  00FDD6  20                 	db	32
   754  00FDD7  28                 	db	40
   755  00FDD8  41                 	db	65
   756  00FDD9  3A                 	db	58
   757  00FDDA  59                 	db	89
   758  00FDDB  2F                 	db	47
   759  00FDDC  42                 	db	66
   760  00FDDD  3A                 	db	58
   761  00FDDE  4E                 	db	78
   762  00FDDF  29                 	db	41
   763  00FDE0  20                 	db	32
   764  00FDE1  00                 	db	0
   765  00FDE2  00                 	db	0
   766  00FDE3  00                 	db	0
   767  00FDE4  00                 	db	0
   768  00FDE5  00                 	db	0
   769  00FDE6  00                 	db	0
   770  00FDE7  00                 	db	0
   771  00FDE8  00                 	db	0
   772  00FDE9  00                 	db	0
   773  00FDEA                     __end_of_inputEntryQuestions:
   774                           	opt stack 0
   775  00FDEA                     _fastenerMatrix:
   776                           	opt stack 0
   777  00FDEA  00                 	db	0
   778  00FDEB  00                 	db	0
   779  00FDEC  00                 	db	0
   780  00FDED  00                 	db	0
   781  00FDEE  01                 	db	1
   782  00FDEF  00                 	db	0
   783  00FDF0  00                 	db	0
   784  00FDF1  00                 	db	0
   785  00FDF2  00                 	db	0
   786  00FDF3  01                 	db	1
   787  00FDF4  00                 	db	0
   788  00FDF5  00                 	db	0
   789  00FDF6  00                 	db	0
   790  00FDF7  00                 	db	0
   791  00FDF8  01                 	db	1
   792  00FDF9  00                 	db	0
   793  00FDFA  00                 	db	0
   794  00FDFB  00                 	db	0
   795  00FDFC  00                 	db	0
   796  00FDFD  01                 	db	1
   797  00FDFE  01                 	db	1
   798  00FDFF  01                 	db	1
   799  00FE00  00                 	db	0
   800  00FE01  00                 	db	0
   801  00FE02  01                 	db	1
   802  00FE03  00                 	db	0
   803  00FE04  01                 	db	1
   804  00FE05  00                 	db	0
   805  00FE06  01                 	db	1
   806  00FE07  00                 	db	0
   807  00FE08  00                 	db	0
   808  00FE09  01                 	db	1
   809  00FE0A  02                 	db	2
   810  00FE0B  01                 	db	1
   811  00FE0C  00                 	db	0
   812  00FE0D  00                 	db	0
   813  00FE0E  02                 	db	2
   814  00FE0F  00                 	db	0
   815  00FE10  01                 	db	1
   816  00FE11  00                 	db	0
   817  00FE12  02                 	db	2
   818  00FE13  00                 	db	0
   819  00FE14  00                 	db	0
   820  00FE15  01                 	db	1
   821  00FE16  01                 	db	1
   822  00FE17  01                 	db	1
   823  00FE18  00                 	db	0
   824  00FE19  01                 	db	1
   825  00FE1A  01                 	db	1
   826  00FE1B  00                 	db	0
   827  00FE1C  01                 	db	1
   828  00FE1D  01                 	db	1
   829  00FE1E  01                 	db	1
   830  00FE1F  00                 	db	0
   831  00FE20  00                 	db	0
   832  00FE21  02                 	db	2
   833  00FE22  01                 	db	1
   834  00FE23  01                 	db	1
   835  00FE24  00                 	db	0
   836  00FE25  02                 	db	2
   837  00FE26  01                 	db	1
   838  00FE27  00                 	db	0
   839  00FE28  01                 	db	1
   840  00FE29  02                 	db	2
   841  00FE2A  02                 	db	2
   842  00FE2B  00                 	db	0
   843  00FE2C  01                 	db	1
   844  00FE2D  01                 	db	1
   845  00FE2E  02                 	db	2
   846  00FE2F  01                 	db	1
   847  00FE30  00                 	db	0
   848  00FE31  01                 	db	1
   849  00FE32  01                 	db	1
   850  00FE33  02                 	db	2
   851  00FE34  00                 	db	0
   852  00FE35  01                 	db	1
   853  00FE36  01                 	db	1
   854  00FE37  03                 	db	3
   855  00FE38  00                 	db	0
   856  00FE39  00                 	db	0
   857  00FE3A  01                 	db	1
   858  00FE3B  00                 	db	0
   859  00FE3C  00                 	db	0
   860  00FE3D  03                 	db	3
   861  00FE3E                     __end_of_fastenerMatrix:
   862                           	opt stack 0
   863  0000                     _LATEbits	set	3981
   864  0000                     _LATCbits	set	3979
   865  0000                     _LATBbits	set	3978
   866  0000                     _TMR0L	set	4054
   867  0000                     _TMR0H	set	4055
   868  0000                     _T0CONbits	set	4053
   869  0000                     _PORTB	set	3969
   870  0000                     _PORTBbits	set	3969
   871  0000                     _INTCONbits	set	4082
   872  0000                     _LATDbits	set	3980
   873  0000                     _SSPBUF	set	4041
   874  0000                     _SSPCON2bits	set	4037
   875  0000                     _SSPADD	set	4040
   876  0000                     _SSPCON2	set	4037
   877  0000                     _SSPCON1	set	4038
   878  0000                     _SSPSTAT	set	4039
   879  0000                     _TRISCbits	set	3988
   880  0000                     _SSPCON1bits	set	4038
   881  0000                     _ADCON1	set	4033
   882  0000                     _ADCON0	set	4034
   883  0000                     _TRISE	set	3990
   884  0000                     _TRISD	set	3989
   885  0000                     _TRISC	set	3988
   886  0000                     _TRISB	set	3987
   887  0000                     _LATE	set	3981
   888  0000                     _LATD	set	3980
   889  0000                     _LATC	set	3979
   890  0000                     _LATB	set	3978
   891  0000                     _LATA	set	3977
   892  0000                     _PORTAbits	set	3968
   893  0000                     _TRISA	set	3986
   894  0000                     _TMR0IE	set	32661
   895  0000                     _T0IF	set	32658
   896  0000                     _T0IE	set	32661
   897  0000                     _STOP	set	32316
   898  00FE3E                     STR_6:
   899  00FE3E  01                 	db	1
   900  00FE3F  45                 	db	69	;'E'
   901  00FE40  6E                 	db	110	;'n'
   902  00FE41  74                 	db	116	;'t'
   903  00FE42  65                 	db	101	;'e'
   904  00FE43  72                 	db	114	;'r'
   905  00FE44  65                 	db	101	;'e'
   906  00FE45  64                 	db	100	;'d'
   907  00FE46  20                 	db	32
   908  00FE47  74                 	db	116	;'t'
   909  00FE48  68                 	db	104	;'h'
   910  00FE49  65                 	db	101	;'e'
   911  00FE4A  20                 	db	32
   912  00FE4B  70                 	db	112	;'p'
   913  00FE4C  61                 	db	97	;'a'
   914  00FE4D  63                 	db	99	;'c'
   915  00FE4E  6B                 	db	107	;'k'
   916  00FE4F  61                 	db	97	;'a'
   917  00FE50  67                 	db	103	;'g'
   918  00FE51  69                 	db	105	;'i'
   919  00FE52  6E                 	db	110	;'n'
   920  00FE53  67                 	db	103	;'g'
   921  00FE54  20                 	db	32
   922  00FE55  66                 	db	102	;'f'
   923  00FE56  75                 	db	117	;'u'
   924  00FE57  6E                 	db	110	;'n'
   925  00FE58  63                 	db	99	;'c'
   926  00FE59  74                 	db	116	;'t'
   927  00FE5A  69                 	db	105	;'i'
   928  00FE5B  6F                 	db	111	;'o'
   929  00FE5C  6E                 	db	110	;'n'
   930  00FE5D  00                 	db	0
   931  00FE5E  00                 	db	0
   932  00FE5F                     STR_17:
   933  00FE5F  30                 	db	48	;'0'
   934  00FE60  3A                 	db	58	;':'
   935  00FE61  53                 	db	83	;'S'
   936  00FE62  6C                 	db	108	;'l'
   937  00FE63  65                 	db	101	;'e'
   938  00FE64  65                 	db	101	;'e'
   939  00FE65  70                 	db	112	;'p'
   940  00FE66  20                 	db	32
   941  00FE67  31                 	db	49	;'1'
   942  00FE68  3A                 	db	58	;':'
   943  00FE69  42                 	db	66	;'B'
   944  00FE6A  65                 	db	101	;'e'
   945  00FE6B  67                 	db	103	;'g'
   946  00FE6C  69                 	db	105	;'i'
   947  00FE6D  6E                 	db	110	;'n'
   948  00FE6E  20                 	db	32
   949  00FE6F  0A                 	db	10
   950  00FE70  32                 	db	50	;'2'
   951  00FE71  3A                 	db	58	;':'
   952  00FE72  20                 	db	32
   953  00FE73  56                 	db	86	;'V'
   954  00FE74  69                 	db	105	;'i'
   955  00FE75  65                 	db	101	;'e'
   956  00FE76  77                 	db	119	;'w'
   957  00FE77  20                 	db	32
   958  00FE78  4C                 	db	76	;'L'
   959  00FE79  6F                 	db	111	;'o'
   960  00FE7A  67                 	db	103	;'g'
   961  00FE7B  73                 	db	115	;'s'
   962  00FE7C  00                 	db	0
   963  00FE7D                     STR_14:
   964  00FE7D  4E                 	db	78	;'N'
   965  00FE7E  6F                 	db	111	;'o'
   966  00FE7F  74                 	db	116	;'t'
   967  00FE80  20                 	db	32
   968  00FE81  74                 	db	116	;'t'
   969  00FE82  68                 	db	104	;'h'
   970  00FE83  65                 	db	101	;'e'
   971  00FE84  72                 	db	114	;'r'
   972  00FE85  65                 	db	101	;'e'
   973  00FE86  20                 	db	32
   974  00FE87  79                 	db	121	;'y'
   975  00FE88  65                 	db	101	;'e'
   976  00FE89  74                 	db	116	;'t'
   977  00FE8A  0A                 	db	10
   978  00FE8B  2A                 	db	42
   979  00FE8C  20                 	db	32
   980  00FE8D  74                 	db	116	;'t'
   981  00FE8E  6F                 	db	111	;'o'
   982  00FE8F  20                 	db	32
   983  00FE90  72                 	db	114	;'r'
   984  00FE91  65                 	db	101	;'e'
   985  00FE92  74                 	db	116	;'t'
   986  00FE93  75                 	db	117	;'u'
   987  00FE94  72                 	db	114	;'r'
   988  00FE95  6E                 	db	110	;'n'
   989  00FE96  00                 	db	0
   990  00FE97                     STR_15:
   991  00FE97  53                 	db	83	;'S'
   992  00FE98  74                 	db	116	;'t'
   993  00FE99  61                 	db	97	;'a'
   994  00FE9A  72                 	db	114	;'r'
   995  00FE9B  74                 	db	116	;'t'
   996  00FE9C  65                 	db	101	;'e'
   997  00FE9D  64                 	db	100	;'d'
   998  00FE9E  20                 	db	32
   999  00FE9F  69                 	db	105	;'i'
  1000  00FEA0  6E                 	db	110	;'n'
  1001  00FEA1  70                 	db	112	;'p'
  1002  00FEA2  75                 	db	117	;'u'
  1003  00FEA3  74                 	db	116	;'t'
  1004  00FEA4  20                 	db	32
  1005  00FEA5  65                 	db	101	;'e'
  1006  00FEA6  6E                 	db	110	;'n'
  1007  00FEA7  74                 	db	116	;'t'
  1008  00FEA8  72                 	db	114	;'r'
  1009  00FEA9  79                 	db	121	;'y'
  1010  00FEAA  2C                 	db	44
  1011  00FEAB  20                 	db	32
  1012  00FEAC  68                 	db	104	;'h'
  1013  00FEAD  69                 	db	105	;'i'
  1014  00FEAE  00                 	db	0
  1015  00FEAF  00                 	db	0
  1016  00FEB0                     STR_7:
  1017  00FEB0  01                 	db	1
  1018  00FEB1  42                 	db	66	;'B'
  1019  00FEB2  3A                 	db	58	;':'
  1020  00FEB3  25                 	db	37
  1021  00FEB4  64                 	db	100	;'d'
  1022  00FEB5  20                 	db	32
  1023  00FEB6  4E                 	db	78	;'N'
  1024  00FEB7  3A                 	db	58	;':'
  1025  00FEB8  25                 	db	37
  1026  00FEB9  64                 	db	100	;'d'
  1027  00FEBA  20                 	db	32
  1028  00FEBB  53                 	db	83	;'S'
  1029  00FEBC  3A                 	db	58	;':'
  1030  00FEBD  25                 	db	37
  1031  00FEBE  64                 	db	100	;'d'
  1032  00FEBF  20                 	db	32
  1033  00FEC0  57                 	db	87	;'W'
  1034  00FEC1  3A                 	db	58	;':'
  1035  00FEC2  25                 	db	37
  1036  00FEC3  64                 	db	100	;'d'
  1037  00FEC4  00                 	db	0
  1038  00FEC5  00                 	db	0
  1039  00FEC6                     STR_21:
  1040  00FEC6  01                 	db	1
  1041  00FEC7  53                 	db	83	;'S'
  1042  00FEC8  74                 	db	116	;'t'
  1043  00FEC9  61                 	db	97	;'a'
  1044  00FECA  72                 	db	114	;'r'
  1045  00FECB  74                 	db	116	;'t'
  1046  00FECC  69                 	db	105	;'i'
  1047  00FECD  6E                 	db	110	;'n'
  1048  00FECE  67                 	db	103	;'g'
  1049  00FECF  20                 	db	32
  1050  00FED0  70                 	db	112	;'p'
  1051  00FED1  61                 	db	97	;'a'
  1052  00FED2  63                 	db	99	;'c'
  1053  00FED3  6B                 	db	107	;'k'
  1054  00FED4  61                 	db	97	;'a'
  1055  00FED5  67                 	db	103	;'g'
  1056  00FED6  69                 	db	105	;'i'
  1057  00FED7  6E                 	db	110	;'n'
  1058  00FED8  67                 	db	103	;'g'
  1059  00FED9  00                 	db	0
  1060  00FEDA  00                 	db	0
  1061  00FEDB                     STR_20:
  1062  00FEDB  53                 	db	83	;'S'
  1063  00FEDC  74                 	db	116	;'t'
  1064  00FEDD  61                 	db	97	;'a'
  1065  00FEDE  72                 	db	114	;'r'
  1066  00FEDF  74                 	db	116	;'t'
  1067  00FEE0  69                 	db	105	;'i'
  1068  00FEE1  6E                 	db	110	;'n'
  1069  00FEE2  67                 	db	103	;'g'
  1070  00FEE3  20                 	db	32
  1071  00FEE4  70                 	db	112	;'p'
  1072  00FEE5  61                 	db	97	;'a'
  1073  00FEE6  63                 	db	99	;'c'
  1074  00FEE7  6B                 	db	107	;'k'
  1075  00FEE8  61                 	db	97	;'a'
  1076  00FEE9  67                 	db	103	;'g'
  1077  00FEEA  69                 	db	105	;'i'
  1078  00FEEB  6E                 	db	110	;'n'
  1079  00FEEC  67                 	db	103	;'g'
  1080  00FEED  00                 	db	0
  1081  00FEEE                     STR_5:
  1082  00FEEE  01                 	db	1
  1083  00FEEF  44                 	db	68	;'D'
  1084  00FEF0  6F                 	db	111	;'o'
  1085  00FEF1  6E                 	db	110	;'n'
  1086  00FEF2  65                 	db	101	;'e'
  1087  00FEF3  20                 	db	32
  1088  00FEF4  63                 	db	99	;'c'
  1089  00FEF5  6F                 	db	111	;'o'
  1090  00FEF6  6D                 	db	109	;'m'
  1091  00FEF7  70                 	db	112	;'p'
  1092  00FEF8  61                 	db	97	;'a'
  1093  00FEF9  72                 	db	114	;'r'
  1094  00FEFA  74                 	db	116	;'t'
  1095  00FEFB  6D                 	db	109	;'m'
  1096  00FEFC  65                 	db	101	;'e'
  1097  00FEFD  6E                 	db	110	;'n'
  1098  00FEFE  74                 	db	116	;'t'
  1099  00FEFF  00                 	db	0
  1100  00FF00  00                 	db	0
  1101  00FF01                     STR_13:
  1102  00FF01  50                 	db	80	;'P'
  1103  00FF02  72                 	db	114	;'r'
  1104  00FF03  65                 	db	101	;'e'
  1105  00FF04  73                 	db	115	;'s'
  1106  00FF05  73                 	db	115	;'s'
  1107  00FF06  20                 	db	32
  1108  00FF07  31                 	db	49	;'1'
  1109  00FF08  20                 	db	32
  1110  00FF09  74                 	db	116	;'t'
  1111  00FF0A  6F                 	db	111	;'o'
  1112  00FF0B  20                 	db	32
  1113  00FF0C  62                 	db	98	;'b'
  1114  00FF0D  65                 	db	101	;'e'
  1115  00FF0E  67                 	db	103	;'g'
  1116  00FF0F  69                 	db	105	;'i'
  1117  00FF10  6E                 	db	110	;'n'
  1118  00FF11  00                 	db	0
  1119  00FF12                     STR_18:
  1120  00FF12  50                 	db	80	;'P'
  1121  00FF13  72                 	db	114	;'r'
  1122  00FF14  65                 	db	101	;'e'
  1123  00FF15  73                 	db	115	;'s'
  1124  00FF16  73                 	db	115	;'s'
  1125  00FF17  20                 	db	32
  1126  00FF18  31                 	db	49	;'1'
  1127  00FF19  20                 	db	32
  1128  00FF1A  74                 	db	116	;'t'
  1129  00FF1B  6F                 	db	111	;'o'
  1130  00FF1C  20                 	db	32
  1131  00FF1D  73                 	db	115	;'s'
  1132  00FF1E  74                 	db	116	;'t'
  1133  00FF1F  61                 	db	97	;'a'
  1134  00FF20  72                 	db	114	;'r'
  1135  00FF21  74                 	db	116	;'t'
  1136  00FF22  00                 	db	0
  1137  00FF23                     STR_3:
  1138  00FF23  01                 	db	1
  1139  00FF24  53                 	db	83	;'S'
  1140  00FF25  70                 	db	112	;'p'
  1141  00FF26  61                 	db	97	;'a'
  1142  00FF27  63                 	db	99	;'c'
  1143  00FF28  65                 	db	101	;'e'
  1144  00FF29  72                 	db	114	;'r'
  1145  00FF2A  20                 	db	32
  1146  00FF2B  43                 	db	67	;'C'
  1147  00FF2C  6F                 	db	111	;'o'
  1148  00FF2D  75                 	db	117	;'u'
  1149  00FF2E  6E                 	db	110	;'n'
  1150  00FF2F  74                 	db	116	;'t'
  1151  00FF30  65                 	db	101	;'e'
  1152  00FF31  64                 	db	100	;'d'
  1153  00FF32  00                 	db	0
  1154  00FF33  00                 	db	0
  1155  00FF34                     STR_4:
  1156  00FF34  01                 	db	1
  1157  00FF35  57                 	db	87	;'W'
  1158  00FF36  61                 	db	97	;'a'
  1159  00FF37  73                 	db	115	;'s'
  1160  00FF38  68                 	db	104	;'h'
  1161  00FF39  65                 	db	101	;'e'
  1162  00FF3A  72                 	db	114	;'r'
  1163  00FF3B  20                 	db	32
  1164  00FF3C  43                 	db	67	;'C'
  1165  00FF3D  6F                 	db	111	;'o'
  1166  00FF3E  75                 	db	117	;'u'
  1167  00FF3F  6E                 	db	110	;'n'
  1168  00FF40  74                 	db	116	;'t'
  1169  00FF41  65                 	db	101	;'e'
  1170  00FF42  64                 	db	100	;'d'
  1171  00FF43  00                 	db	0
  1172  00FF44  00                 	db	0
  1173  00FF45                     STR_11:
  1174  00FF45  01                 	db	1
  1175  00FF46  53                 	db	83	;'S'
  1176  00FF47  70                 	db	112	;'p'
  1177  00FF48  61                 	db	97	;'a'
  1178  00FF49  63                 	db	99	;'c'
  1179  00FF4A  65                 	db	101	;'e'
  1180  00FF4B  72                 	db	114	;'r'
  1181  00FF4C  20                 	db	32
  1182  00FF4D  63                 	db	99	;'c'
  1183  00FF4E  6F                 	db	111	;'o'
  1184  00FF4F  75                 	db	117	;'u'
  1185  00FF50  6E                 	db	110	;'n'
  1186  00FF51  74                 	db	116	;'t'
  1187  00FF52  65                 	db	101	;'e'
  1188  00FF53  64                 	db	100	;'d'
  1189  00FF54  00                 	db	0
  1190  00FF55  00                 	db	0
  1191  00FF56                     STR_12:
  1192  00FF56  01                 	db	1
  1193  00FF57  57                 	db	87	;'W'
  1194  00FF58  61                 	db	97	;'a'
  1195  00FF59  73                 	db	115	;'s'
  1196  00FF5A  68                 	db	104	;'h'
  1197  00FF5B  65                 	db	101	;'e'
  1198  00FF5C  72                 	db	114	;'r'
  1199  00FF5D  20                 	db	32
  1200  00FF5E  63                 	db	99	;'c'
  1201  00FF5F  6F                 	db	111	;'o'
  1202  00FF60  75                 	db	117	;'u'
  1203  00FF61  6E                 	db	110	;'n'
  1204  00FF62  74                 	db	116	;'t'
  1205  00FF63  65                 	db	101	;'e'
  1206  00FF64  64                 	db	100	;'d'
  1207  00FF65  00                 	db	0
  1208  00FF66  00                 	db	0
  1209  00FF67                     STR_25:
  1210  00FF67  42                 	db	66	;'B'
  1211  00FF68  25                 	db	37
  1212  00FF69  64                 	db	100	;'d'
  1213  00FF6A  20                 	db	32
  1214  00FF6B  4E                 	db	78	;'N'
  1215  00FF6C  25                 	db	37
  1216  00FF6D  64                 	db	100	;'d'
  1217  00FF6E  20                 	db	32
  1218  00FF6F  53                 	db	83	;'S'
  1219  00FF70  25                 	db	37
  1220  00FF71  64                 	db	100	;'d'
  1221  00FF72  20                 	db	32
  1222  00FF73  57                 	db	87	;'W'
  1223  00FF74  25                 	db	37
  1224  00FF75  64                 	db	100	;'d'
  1225  00FF76  00                 	db	0
  1226  00FF77                     STR_1:
  1227  00FF77  01                 	db	1
  1228  00FF78  42                 	db	66	;'B'
  1229  00FF79  6F                 	db	111	;'o'
  1230  00FF7A  6C                 	db	108	;'l'
  1231  00FF7B  74                 	db	116	;'t'
  1232  00FF7C  20                 	db	32
  1233  00FF7D  43                 	db	67	;'C'
  1234  00FF7E  6F                 	db	111	;'o'
  1235  00FF7F  75                 	db	117	;'u'
  1236  00FF80  6E                 	db	110	;'n'
  1237  00FF81  74                 	db	116	;'t'
  1238  00FF82  65                 	db	101	;'e'
  1239  00FF83  64                 	db	100	;'d'
  1240  00FF84  00                 	db	0
  1241  00FF85  00                 	db	0
  1242  00FF86                     STR_9:
  1243  00FF86  01                 	db	1
  1244  00FF87  42                 	db	66	;'B'
  1245  00FF88  6F                 	db	111	;'o'
  1246  00FF89  6C                 	db	108	;'l'
  1247  00FF8A  74                 	db	116	;'t'
  1248  00FF8B  20                 	db	32
  1249  00FF8C  63                 	db	99	;'c'
  1250  00FF8D  6F                 	db	111	;'o'
  1251  00FF8E  75                 	db	117	;'u'
  1252  00FF8F  6E                 	db	110	;'n'
  1253  00FF90  74                 	db	116	;'t'
  1254  00FF91  65                 	db	101	;'e'
  1255  00FF92  64                 	db	100	;'d'
  1256  00FF93  00                 	db	0
  1257  00FF94  00                 	db	0
  1258  00FF95                     STR_8:
  1259  00FF95  43                 	db	67	;'C'
  1260  00FF96  6F                 	db	111	;'o'
  1261  00FF97  6D                 	db	109	;'m'
  1262  00FF98  70                 	db	112	;'p'
  1263  00FF99  61                 	db	97	;'a'
  1264  00FF9A  72                 	db	114	;'r'
  1265  00FF9B  74                 	db	116	;'t'
  1266  00FF9C  6D                 	db	109	;'m'
  1267  00FF9D  65                 	db	101	;'e'
  1268  00FF9E  6E                 	db	110	;'n'
  1269  00FF9F  74                 	db	116	;'t'
  1270  00FFA0  20                 	db	32
  1271  00FFA1  25                 	db	37
  1272  00FFA2  64                 	db	100	;'d'
  1273  00FFA3  00                 	db	0
  1274  00FFA4                     STR_16:
  1275  00FFA4  01                 	db	1
  1276  00FFA5  44                 	db	68	;'D'
  1277  00FFA6  6F                 	db	111	;'o'
  1278  00FFA7  6E                 	db	110	;'n'
  1279  00FFA8  65                 	db	101	;'e'
  1280  00FFA9  20                 	db	32
  1281  00FFAA  69                 	db	105	;'i'
  1282  00FFAB  6E                 	db	110	;'n'
  1283  00FFAC  70                 	db	112	;'p'
  1284  00FFAD  75                 	db	117	;'u'
  1285  00FFAE  74                 	db	116	;'t'
  1286  00FFAF  73                 	db	115	;'s'
  1287  00FFB0  00                 	db	0
  1288  00FFB1  00                 	db	0
  1289  00FFB2                     STR_2:
  1290  00FFB2  01                 	db	1
  1291  00FFB3  4E                 	db	78	;'N'
  1292  00FFB4  75                 	db	117	;'u'
  1293  00FFB5  74                 	db	116	;'t'
  1294  00FFB6  20                 	db	32
  1295  00FFB7  43                 	db	67	;'C'
  1296  00FFB8  6F                 	db	111	;'o'
  1297  00FFB9  75                 	db	117	;'u'
  1298  00FFBA  6E                 	db	110	;'n'
  1299  00FFBB  74                 	db	116	;'t'
  1300  00FFBC  65                 	db	101	;'e'
  1301  00FFBD  64                 	db	100	;'d'
  1302  00FFBE  00                 	db	0
  1303  00FFBF  00                 	db	0
  1304  00FFC0                     STR_10:
  1305  00FFC0  01                 	db	1
  1306  00FFC1  4E                 	db	78	;'N'
  1307  00FFC2  75                 	db	117	;'u'
  1308  00FFC3  74                 	db	116	;'t'
  1309  00FFC4  20                 	db	32
  1310  00FFC5  63                 	db	99	;'c'
  1311  00FFC6  6F                 	db	111	;'o'
  1312  00FFC7  75                 	db	117	;'u'
  1313  00FFC8  6E                 	db	110	;'n'
  1314  00FFC9  74                 	db	116	;'t'
  1315  00FFCA  65                 	db	101	;'e'
  1316  00FFCB  64                 	db	100	;'d'
  1317  00FFCC  00                 	db	0
  1318  00FFCD  00                 	db	0
  1319  00FFCE                     STR_23:
  1320  00FFCE  43                 	db	67	;'C'
  1321  00FFCF  25                 	db	37
  1322  00FFD0  64                 	db	100	;'d'
  1323  00FFD1  3A                 	db	58	;':'
  1324  00FFD2  20                 	db	32
  1325  00FFD3  25                 	db	37
  1326  00FFD4  73                 	db	115	;'s'
  1327  00FFD5  20                 	db	32
  1328  00FFD6  78                 	db	120	;'x'
  1329  00FFD7  25                 	db	37
  1330  00FFD8  64                 	db	100	;'d'
  1331  00FFD9  00                 	db	0
  1332  00FFDA                     STR_24:
  1333  00FFDA  52                 	db	82	;'R'
  1334  00FFDB  65                 	db	101	;'e'
  1335  00FFDC  6D                 	db	109	;'m'
  1336  00FFDD  61                 	db	97	;'a'
  1337  00FFDE  69                 	db	105	;'i'
  1338  00FFDF  6E                 	db	110	;'n'
  1339  00FFE0  69                 	db	105	;'i'
  1340  00FFE1  6E                 	db	110	;'n'
  1341  00FFE2  67                 	db	103	;'g'
  1342  00FFE3  3A                 	db	58	;':'
  1343  00FFE4  00                 	db	0
  1344  00FFE5                     STR_22:
  1345  00FFE5  53                 	db	83	;'S'
  1346  00FFE6  75                 	db	117	;'u'
  1347  00FFE7  6D                 	db	109	;'m'
  1348  00FFE8  6D                 	db	109	;'m'
  1349  00FFE9  61                 	db	97	;'a'
  1350  00FFEA  72                 	db	114	;'r'
  1351  00FFEB  79                 	db	121	;'y'
  1352  00FFEC  3A                 	db	58	;':'
  1353  00FFED  00                 	db	0
  1354  00FFEE                     STR_28:
  1355  00FFEE  28                 	db	40
  1356  00FFEF  6E                 	db	110	;'n'
  1357  00FFF0  75                 	db	117	;'u'
  1358  00FFF1  6C                 	db	108	;'l'
  1359  00FFF2  6C                 	db	108	;'l'
  1360  00FFF3  29                 	db	41
  1361  00FFF4  00                 	db	0
  1362  00FFF5                     STR_26:
  1363  00FFF5  54                 	db	84	;'T'
  1364  00FFF6  69                 	db	105	;'i'
  1365  00FFF7  6D                 	db	109	;'m'
  1366  00FFF8  65                 	db	101	;'e'
  1367  00FFF9  3A                 	db	58	;':'
  1368  00FFFA  00                 	db	0
  1369  00FFFB                     STR_27:
  1370  00FFFB  25                 	db	37
  1371  00FFFC  6C                 	db	108	;'l'
  1372  00FFFD  64                 	db	100	;'d'
  1373  00FFFE  00                 	db	0
  1374  0000                     
  1375                           ; #config settings
  1376  00FFFF  00                 	db	0	; dummy byte at the end
  1377  0000                     
  1378                           	psect	cinit
  1379  00283A                     __pcinit:
  1380                           	opt stack 0
  1381  00283A                     start_initialization:
  1382                           	opt stack 0
  1383  00283A                     __initialization:
  1384                           	opt stack 0
  1385                           
  1386                           ; Initialize objects allocated to BANK1 (163 bytes)
  1387                           ; load TBLPTR registers with __pidataBANK1
  1388  00283A  0E8C               	movlw	low __pidataBANK1
  1389  00283C  6EF6               	movwf	tblptrl,c
  1390  00283E  0E22               	movlw	high __pidataBANK1
  1391  002840  6EF7               	movwf	tblptrh,c
  1392  002842  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1393  002844  6EF8               	movwf	tblptru,c
  1394  002846  EE01  F000         	lfsr	0,__pdataBANK1
  1395  00284A  EE10 F0A3          	lfsr	1,163
  1396  00284E                     copy_data0:
  1397  00284E  0009               	tblrd		*+
  1398  002850  CFF5 FFEE          	movff	tablat,postinc0
  1399  002854  50E5               	movf	postdec1,w,c
  1400  002856  50E1               	movf	fsr1l,w,c
  1401  002858  E1FA               	bnz	copy_data0
  1402                           
  1403                           ; Initialize objects allocated to COMRAM (10 bytes)
  1404                           ; load TBLPTR registers with __pidataCOMRAM
  1405  00285A  0E34               	movlw	low __pidataCOMRAM
  1406  00285C  6EF6               	movwf	tblptrl,c
  1407  00285E  0E2C               	movlw	high __pidataCOMRAM
  1408  002860  6EF7               	movwf	tblptrh,c
  1409  002862  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1410  002864  6EF8               	movwf	tblptru,c
  1411  002866  EE00  F04F         	lfsr	0,__pdataCOMRAM
  1412  00286A  EE10 F00A          	lfsr	1,10
  1413  00286E                     copy_data1:
  1414  00286E  0009               	tblrd		*+
  1415  002870  CFF5 FFEE          	movff	tablat,postinc0
  1416  002874  50E5               	movf	postdec1,w,c
  1417  002876  50E1               	movf	fsr1l,w,c
  1418  002878  E1FA               	bnz	copy_data1
  1419                           
  1420                           ; Clear objects allocated to BANK1 (34 bytes)
  1421  00287A  EE01  F0A3         	lfsr	0,__pbssBANK1
  1422  00287E  0E22               	movlw	34
  1423  002880                     clear_0:
  1424  002880  6AEE               	clrf	postinc0,c
  1425  002882  06E8               	decf	wreg,f,c
  1426  002884  E1FD               	bnz	clear_0
  1427                           
  1428                           ; Clear objects allocated to COMRAM (27 bytes)
  1429  002886  EE00  F034         	lfsr	0,__pbssCOMRAM
  1430  00288A  0E1B               	movlw	27
  1431  00288C                     clear_1:
  1432  00288C  6AEE               	clrf	postinc0,c
  1433  00288E  06E8               	decf	wreg,f,c
  1434  002890  E1FD               	bnz	clear_1
  1435  002892                     end_of_initialization:
  1436                           	opt stack 0
  1437  002892                     __end_of__initialization:
  1438                           	opt stack 0
  1439  002892  9059               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1440  002894  9259               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1441  002896  0100               	movlb	0
  1442  002898  EF7B  F012         	goto	_main	;jump to C main() function
  1443                           tblptru	equ	0xFF8
  1444                           tblptrh	equ	0xFF7
  1445                           tblptrl	equ	0xFF6
  1446                           tablat	equ	0xFF5
  1447                           postinc0	equ	0xFEE
  1448                           wreg	equ	0xFE8
  1449                           postdec1	equ	0xFE5
  1450                           fsr1l	equ	0xFE1
  1451                           
  1452                           	psect	bssCOMRAM
  1453  000034                     __pbssCOMRAM:
  1454                           	opt stack 0
  1455  000034                     _dispensed:
  1456                           	opt stack 0
  1457  000034                     	ds	8
  1458  00003C                     _extras:
  1459                           	opt stack 0
  1460  00003C                     	ds	8
  1461  000044                     _endTime:
  1462                           	opt stack 0
  1463  000044                     	ds	4
  1464  000048                     _startTime:
  1465                           	opt stack 0
  1466  000048                     	ds	4
  1467  00004C                     _timerInit:
  1468                           	opt stack 0
  1469  00004C                     	ds	1
  1470  00004D                     _operating:
  1471                           	opt stack 0
  1472  00004D                     	ds	1
  1473  00004E                     _LCDinterruptState:
  1474                           	opt stack 0
  1475  00004E                     	ds	1
  1476                           tblptru	equ	0xFF8
  1477                           tblptrh	equ	0xFF7
  1478                           tblptrl	equ	0xFF6
  1479                           tablat	equ	0xFF5
  1480                           postinc0	equ	0xFEE
  1481                           wreg	equ	0xFE8
  1482                           postdec1	equ	0xFE5
  1483                           fsr1l	equ	0xFE1
  1484                           
  1485                           	psect	dataCOMRAM
  1486  00004F                     __pdataCOMRAM:
  1487                           	opt stack 0
  1488  00004F                     _timeSinceLastTic:
  1489                           	opt stack 0
  1490  00004F                     	ds	3
  1491  000052                     timer@operatingTime:
  1492                           	opt stack 0
  1493  000052                     	ds	3
  1494  000055                     inputEntry@F3177:
  1495                           	opt stack 0
  1496  000055                     	ds	2
  1497  000057                     packaging@F3204:
  1498                           	opt stack 0
  1499  000057                     	ds	2
  1500                           tblptru	equ	0xFF8
  1501                           tblptrh	equ	0xFF7
  1502                           tblptrl	equ	0xFF6
  1503                           tablat	equ	0xFF5
  1504                           postinc0	equ	0xFEE
  1505                           wreg	equ	0xFE8
  1506                           postdec1	equ	0xFE5
  1507                           fsr1l	equ	0xFE1
  1508                           
  1509                           	psect	bssBANK1
  1510  0001A3                     __pbssBANK1:
  1511                           	opt stack 0
  1512  0001A3                     _params:
  1513                           	opt stack 0
  1514  0001A3                     	ds	26
  1515  0001BD                     _test:
  1516                           	opt stack 0
  1517  0001BD                     	ds	4
  1518  0001C1                     	ds	4
  1519                           tblptru	equ	0xFF8
  1520                           tblptrh	equ	0xFF7
  1521                           tblptrl	equ	0xFF6
  1522                           tablat	equ	0xFF5
  1523                           postinc0	equ	0xFEE
  1524                           wreg	equ	0xFE8
  1525                           postdec1	equ	0xFE5
  1526                           fsr1l	equ	0xFE1
  1527                           
  1528                           	psect	dataBANK1
  1529  000100                     __pdataBANK1:
  1530                           	opt stack 0
  1531  000100                     packaging@F3206:
  1532                           	opt stack 0
  1533  000100                     	ds	34
  1534  000122                     inputEntry@F3198:
  1535                           	opt stack 0
  1536  000122                     	ds	24
  1537  00013A                     _fSLookup:
  1538                           	opt stack 0
  1539  00013A                     	ds	105
  1540                           tblptru	equ	0xFF8
  1541                           tblptrh	equ	0xFF7
  1542                           tblptrl	equ	0xFF6
  1543                           tablat	equ	0xFF5
  1544                           postinc0	equ	0xFEE
  1545                           wreg	equ	0xFE8
  1546                           postdec1	equ	0xFE5
  1547                           fsr1l	equ	0xFE1
  1548                           
  1549                           	psect	cstackBANK2
  1550  000200                     __pcstackBANK2:
  1551                           	opt stack 0
  1552  000200                     packaging@msg:
  1553                           	opt stack 0
  1554                           
  1555                           ; 34 bytes @ 0x0
  1556  000200                     	ds	34
  1557  000222                     packaging@msg2:
  1558                           	opt stack 0
  1559                           
  1560                           ; 32 bytes @ 0x22
  1561  000222                     	ds	32
  1562  000242                     packaging@instr:
  1563                           	opt stack 0
  1564                           
  1565                           ; 2 bytes @ 0x42
  1566  000242                     	ds	2
  1567  000244                     packaging@compartmentNum:
  1568                           	opt stack 0
  1569                           
  1570                           ; 2 bytes @ 0x44
  1571  000244                     	ds	2
  1572  000246                     packaging@set:
  1573                           	opt stack 0
  1574                           
  1575                           ; 2 bytes @ 0x46
  1576  000246                     	ds	2
  1577  000248                     packaging@mult:
  1578                           	opt stack 0
  1579                           
  1580                           ; 2 bytes @ 0x48
  1581  000248                     	ds	2
  1582                           tblptru	equ	0xFF8
  1583                           tblptrh	equ	0xFF7
  1584                           tblptrl	equ	0xFF6
  1585                           tablat	equ	0xFF5
  1586                           postinc0	equ	0xFEE
  1587                           wreg	equ	0xFE8
  1588                           postdec1	equ	0xFE5
  1589                           fsr1l	equ	0xFE1
  1590                           
  1591                           	psect	cstackBANK0
  1592  000080                     __pcstackBANK0:
  1593                           	opt stack 0
  1594  000080                     ?___ftadd:
  1595                           	opt stack 0
  1596  000080                     ?___llmod:
  1597                           	opt stack 0
  1598  000080                     printStringLCD@j:
  1599                           	opt stack 0
  1600  000080                     ___ftadd@f1:
  1601                           	opt stack 0
  1602  000080                     I2C_Master_Init@clockFreq:
  1603                           	opt stack 0
  1604  000080                     ___llmod@dividend:
  1605                           	opt stack 0
  1606  000080                     RTC_getSeconds@time:
  1607                           	opt stack 0
  1608                           
  1609                           ; 7 bytes @ 0x0
  1610  000080                     	ds	2
  1611  000082                     printStringLCD@spaceIndex:
  1612                           	opt stack 0
  1613                           
  1614                           ; 2 bytes @ 0x2
  1615  000082                     	ds	1
  1616  000083                     ___ftadd@f2:
  1617                           	opt stack 0
  1618                           
  1619                           ; 3 bytes @ 0x3
  1620  000083                     	ds	1
  1621  000084                     ??_I2C_Master_Init:
  1622  000084                     printStringLCD@newlineIndex:
  1623                           	opt stack 0
  1624  000084                     ___llmod@divisor:
  1625                           	opt stack 0
  1626                           
  1627                           ; 4 bytes @ 0x4
  1628  000084                     	ds	2
  1629  000086                     ___ftadd@sign:
  1630                           	opt stack 0
  1631  000086                     printStringLCD@newlineCharIndex:
  1632                           	opt stack 0
  1633                           
  1634                           ; 2 bytes @ 0x6
  1635  000086                     	ds	1
  1636  000087                     ___ftadd@exp2:
  1637                           	opt stack 0
  1638  000087                     RTC_getSeconds@seconds:
  1639                           	opt stack 0
  1640                           
  1641                           ; 4 bytes @ 0x7
  1642  000087                     	ds	1
  1643  000088                     ___ftadd@exp1:
  1644                           	opt stack 0
  1645  000088                     ___llmod@counter:
  1646                           	opt stack 0
  1647  000088                     printStringLCD@i:
  1648                           	opt stack 0
  1649                           
  1650                           ; 2 bytes @ 0x8
  1651  000088                     	ds	1
  1652  000089                     ?__doprnt:
  1653                           	opt stack 0
  1654  000089                     __doprnt@pb:
  1655                           	opt stack 0
  1656  000089                     ___ftge@ff1:
  1657                           	opt stack 0
  1658                           
  1659                           ; 3 bytes @ 0x9
  1660  000089                     	ds	1
  1661  00008A                     ??_hibernate:
  1662  00008A                     ??_printErrorLCD:
  1663  00008A                     viewLogs@pressed:
  1664                           	opt stack 0
  1665                           
  1666                           ; 2 bytes @ 0xA
  1667  00008A                     	ds	1
  1668  00008B                     ?_RTC_getOperatingTime:
  1669                           	opt stack 0
  1670  00008B                     __doprnt@f:
  1671                           	opt stack 0
  1672                           
  1673                           ; 2 bytes @ 0xB
  1674  00008B                     	ds	1
  1675  00008C                     ??_inputEntry:
  1676  00008C                     ___ftge@ff2:
  1677                           	opt stack 0
  1678                           
  1679                           ; 3 bytes @ 0xC
  1680  00008C                     	ds	1
  1681  00008D                     __doprnt@ap:
  1682                           	opt stack 0
  1683                           
  1684                           ; 2 bytes @ 0xD
  1685  00008D                     	ds	2
  1686  00008F                     ??_RTC_getOperatingTime:
  1687  00008F                     ??__doprnt:
  1688  00008F                     ??___ftge:
  1689                           
  1690                           ; 1 bytes @ 0xF
  1691  00008F                     	ds	1
  1692  000090                     inputEntry@msg:
  1693                           	opt stack 0
  1694                           
  1695                           ; 24 bytes @ 0x10
  1696  000090                     	ds	1
  1697  000091                     __doprnt@prec:
  1698                           	opt stack 0
  1699                           
  1700                           ; 2 bytes @ 0x11
  1701  000091                     	ds	1
  1702  000092                     packageCompartment@n:
  1703                           	opt stack 0
  1704  000092                     clearing@spinTime:
  1705                           	opt stack 0
  1706                           
  1707                           ; 3 bytes @ 0x12
  1708  000092                     	ds	1
  1709  000093                     packageCompartment@s:
  1710                           	opt stack 0
  1711  000093                     __doprnt@flag:
  1712                           	opt stack 0
  1713                           
  1714                           ; 1 bytes @ 0x13
  1715  000093                     	ds	1
  1716  000094                     packageCompartment@w:
  1717                           	opt stack 0
  1718  000094                     __doprnt@val:
  1719                           	opt stack 0
  1720                           
  1721                           ; 4 bytes @ 0x14
  1722  000094                     	ds	1
  1723  000095                     ??_packageCompartment:
  1724  000095                     clearing@debounceTime:
  1725                           	opt stack 0
  1726                           
  1727                           ; 3 bytes @ 0x15
  1728  000095                     	ds	3
  1729  000098                     packageCompartment@b:
  1730                           	opt stack 0
  1731  000098                     __doprnt@cp:
  1732                           	opt stack 0
  1733  000098                     clearing@currTime:
  1734                           	opt stack 0
  1735                           
  1736                           ; 3 bytes @ 0x18
  1737  000098                     	ds	1
  1738  000099                     packageCompartment@timeB:
  1739                           	opt stack 0
  1740                           
  1741                           ; 3 bytes @ 0x19
  1742  000099                     	ds	1
  1743  00009A                     __doprnt@c:
  1744                           	opt stack 0
  1745                           
  1746                           ; 1 bytes @ 0x1A
  1747  00009A                     	ds	1
  1748  00009B                     ?_sprintf:
  1749                           	opt stack 0
  1750  00009B                     ?_printf:
  1751                           	opt stack 0
  1752  00009B                     printf@f:
  1753                           	opt stack 0
  1754  00009B                     sprintf@wh:
  1755                           	opt stack 0
  1756                           
  1757                           ; 2 bytes @ 0x1B
  1758  00009B                     	ds	1
  1759  00009C                     packageCompartment@timeN:
  1760                           	opt stack 0
  1761                           
  1762                           ; 3 bytes @ 0x1C
  1763  00009C                     	ds	1
  1764  00009D                     sprintf@f:
  1765                           	opt stack 0
  1766                           
  1767                           ; 2 bytes @ 0x1D
  1768  00009D                     	ds	2
  1769  00009F                     packageCompartment@timeS:
  1770                           	opt stack 0
  1771                           
  1772                           ; 3 bytes @ 0x1F
  1773  00009F                     	ds	3
  1774  0000A2                     packageCompartment@timeW:
  1775                           	opt stack 0
  1776                           
  1777                           ; 3 bytes @ 0x22
  1778  0000A2                     	ds	3
  1779  0000A5                     packageCompartment@numB:
  1780                           	opt stack 0
  1781  0000A5                     printf@ap:
  1782                           	opt stack 0
  1783                           
  1784                           ; 2 bytes @ 0x25
  1785  0000A5                     	ds	2
  1786  0000A7                     packageCompartment@numN:
  1787                           	opt stack 0
  1788  0000A7                     sprintf@ap:
  1789                           	opt stack 0
  1790  0000A7                     printf@pb:
  1791                           	opt stack 0
  1792                           
  1793                           ; 4 bytes @ 0x27
  1794  0000A7                     	ds	1
  1795  0000A8                     inputEntry@fastenerString:
  1796                           	opt stack 0
  1797                           
  1798                           ; 32 bytes @ 0x28
  1799  0000A8                     	ds	1
  1800  0000A9                     packageCompartment@numS:
  1801                           	opt stack 0
  1802  0000A9                     sprintf@pb:
  1803                           	opt stack 0
  1804                           
  1805                           ; 4 bytes @ 0x29
  1806  0000A9                     	ds	2
  1807  0000AB                     packageCompartment@numW:
  1808                           	opt stack 0
  1809                           
  1810                           ; 2 bytes @ 0x2B
  1811  0000AB                     	ds	2
  1812  0000AD                     packageCompartment@doneB:
  1813                           	opt stack 0
  1814                           
  1815                           ; 2 bytes @ 0x2D
  1816  0000AD                     	ds	2
  1817  0000AF                     packageCompartment@doneN:
  1818                           	opt stack 0
  1819                           
  1820                           ; 2 bytes @ 0x2F
  1821  0000AF                     	ds	2
  1822  0000B1                     packageCompartment@doneS:
  1823                           	opt stack 0
  1824                           
  1825                           ; 2 bytes @ 0x31
  1826  0000B1                     	ds	2
  1827  0000B3                     packageCompartment@doneW:
  1828                           	opt stack 0
  1829                           
  1830                           ; 2 bytes @ 0x33
  1831  0000B3                     	ds	2
  1832  0000B5                     packageCompartment@currTime:
  1833                           	opt stack 0
  1834                           
  1835                           ; 3 bytes @ 0x35
  1836  0000B5                     	ds	3
  1837  0000B8                     ??_packaging:
  1838                           
  1839                           ; 1 bytes @ 0x38
  1840  0000B8                     	ds	16
  1841  0000C8                     inputEntry@compartmentLabel:
  1842                           	opt stack 0
  1843                           
  1844                           ; 2 bytes @ 0x48
  1845  0000C8                     	ds	2
  1846  0000CA                     inputEntry@compartmentsToFill:
  1847                           	opt stack 0
  1848                           
  1849                           ; 1 bytes @ 0x4A
  1850  0000CA                     	ds	1
  1851  0000CB                     inputEntry@done:
  1852                           	opt stack 0
  1853                           
  1854                           ; 2 bytes @ 0x4B
  1855  0000CB                     	ds	2
  1856  0000CD                     inputEntry@found:
  1857                           	opt stack 0
  1858                           
  1859                           ; 2 bytes @ 0x4D
  1860  0000CD                     	ds	2
  1861  0000CF                     inputEntry@setIsGood:
  1862                           	opt stack 0
  1863                           
  1864                           ; 2 bytes @ 0x4F
  1865  0000CF                     	ds	2
  1866  0000D1                     inputEntry@doneMultiples:
  1867                           	opt stack 0
  1868                           
  1869                           ; 2 bytes @ 0x51
  1870  0000D1                     	ds	2
  1871  0000D3                     inputEntry@doneCompartment:
  1872                           	opt stack 0
  1873                           
  1874                           ; 2 bytes @ 0x53
  1875  0000D3                     	ds	2
  1876  0000D5                     inputEntry@sum:
  1877                           	opt stack 0
  1878                           
  1879                           ; 2 bytes @ 0x55
  1880  0000D5                     	ds	2
  1881  0000D7                     inputEntry@numB:
  1882                           	opt stack 0
  1883                           
  1884                           ; 2 bytes @ 0x57
  1885  0000D7                     	ds	2
  1886  0000D9                     inputEntry@numN:
  1887                           	opt stack 0
  1888                           
  1889                           ; 2 bytes @ 0x59
  1890  0000D9                     	ds	2
  1891  0000DB                     inputEntry@numS:
  1892                           	opt stack 0
  1893                           
  1894                           ; 2 bytes @ 0x5B
  1895  0000DB                     	ds	2
  1896  0000DD                     inputEntry@numW:
  1897                           	opt stack 0
  1898                           
  1899                           ; 2 bytes @ 0x5D
  1900  0000DD                     	ds	2
  1901  0000DF                     inputEntry@inputEntryStep:
  1902                           	opt stack 0
  1903                           
  1904                           ; 2 bytes @ 0x5F
  1905  0000DF                     	ds	2
  1906  0000E1                     inputEntry@numPressed:
  1907                           	opt stack 0
  1908                           
  1909                           ; 2 bytes @ 0x61
  1910  0000E1                     	ds	2
  1911  0000E3                     inputEntry@compartmentNum:
  1912                           	opt stack 0
  1913                           
  1914                           ; 2 bytes @ 0x63
  1915  0000E3                     	ds	2
  1916  0000E5                     inputEntry@i:
  1917                           	opt stack 0
  1918                           
  1919                           ; 2 bytes @ 0x65
  1920  0000E5                     	ds	2
  1921  0000E7                     inputEntry@pressed:
  1922                           	opt stack 0
  1923                           
  1924                           ; 1 bytes @ 0x67
  1925  0000E7                     	ds	1
  1926  0000E8                     ??_mainMenu:
  1927                           
  1928                           ; 1 bytes @ 0x68
  1929  0000E8                     	ds	4
  1930  0000EC                     mainMenu@operationTime:
  1931                           	opt stack 0
  1932                           
  1933                           ; 4 bytes @ 0x6C
  1934  0000EC                     	ds	4
  1935  0000F0                     mainMenu@startPress:
  1936                           	opt stack 0
  1937                           
  1938                           ; 2 bytes @ 0x70
  1939  0000F0                     	ds	2
  1940  0000F2                     mainMenu@needToPrint:
  1941                           	opt stack 0
  1942                           
  1943                           ; 2 bytes @ 0x72
  1944  0000F2                     	ds	2
  1945  0000F4                     mainMenu@pressed:
  1946                           	opt stack 0
  1947                           
  1948                           ; 2 bytes @ 0x74
  1949  0000F4                     	ds	2
  1950  0000F6                     mainMenu@i:
  1951                           	opt stack 0
  1952                           
  1953                           ; 2 bytes @ 0x76
  1954  0000F6                     	ds	2
  1955  0000F8                     ??_main:
  1956                           
  1957                           ; 1 bytes @ 0x78
  1958  0000F8                     	ds	1
  1959                           tblptru	equ	0xFF8
  1960                           tblptrh	equ	0xFF7
  1961                           tblptrl	equ	0xFF6
  1962                           tablat	equ	0xFF5
  1963                           postinc0	equ	0xFEE
  1964                           wreg	equ	0xFE8
  1965                           postdec1	equ	0xFE5
  1966                           fsr1l	equ	0xFE1
  1967                           
  1968                           	psect	cstackCOMRAM
  1969  000001                     __pcstackCOMRAM:
  1970                           	opt stack 0
  1971  000001                     ?i2___ftpack:
  1972                           	opt stack 0
  1973  000001                     i2___ftpack@arg:
  1974                           	opt stack 0
  1975                           
  1976                           ; 3 bytes @ 0x0
  1977  000001                     	ds	3
  1978  000004                     i2___ftpack@exp:
  1979                           	opt stack 0
  1980                           
  1981                           ; 1 bytes @ 0x3
  1982  000004                     	ds	1
  1983  000005                     i2___ftpack@sign:
  1984                           	opt stack 0
  1985                           
  1986                           ; 1 bytes @ 0x4
  1987  000005                     	ds	1
  1988  000006                     ??i2___ftpack:
  1989                           
  1990                           ; 1 bytes @ 0x5
  1991  000006                     	ds	3
  1992  000009                     ?i2___ftadd:
  1993                           	opt stack 0
  1994  000009                     i2___ftadd@f1:
  1995                           	opt stack 0
  1996                           
  1997                           ; 3 bytes @ 0x8
  1998  000009                     	ds	3
  1999  00000C                     i2___ftadd@f2:
  2000                           	opt stack 0
  2001                           
  2002                           ; 3 bytes @ 0xB
  2003  00000C                     	ds	3
  2004  00000F                     ??i2___ftadd:
  2005                           
  2006                           ; 1 bytes @ 0xE
  2007  00000F                     	ds	3
  2008  000012                     i2___ftadd@sign:
  2009                           	opt stack 0
  2010                           
  2011                           ; 1 bytes @ 0x11
  2012  000012                     	ds	1
  2013  000013                     i2___ftadd@exp2:
  2014                           	opt stack 0
  2015                           
  2016                           ; 1 bytes @ 0x12
  2017  000013                     	ds	1
  2018  000014                     i2___ftadd@exp1:
  2019                           	opt stack 0
  2020                           
  2021                           ; 1 bytes @ 0x13
  2022  000014                     	ds	1
  2023  000015                     ??_interruptHandler:
  2024                           
  2025                           ; 1 bytes @ 0x14
  2026  000015                     	ds	18
  2027  000027                     ??_I2C_Master_Wait:
  2028  000027                     ?___wmul:
  2029                           	opt stack 0
  2030  000027                     ?_tock:
  2031                           	opt stack 0
  2032  000027                     ?___ftpack:
  2033                           	opt stack 0
  2034  000027                     ?___lldiv:
  2035                           	opt stack 0
  2036  000027                     lcdNibble@temp:
  2037                           	opt stack 0
  2038  000027                     pollKeypad@keypress:
  2039                           	opt stack 0
  2040  000027                     motorControl@dir:
  2041                           	opt stack 0
  2042  000027                     ___wmul@multiplier:
  2043                           	opt stack 0
  2044  000027                     ___ftpack@arg:
  2045                           	opt stack 0
  2046  000027                     ___lldiv@dividend:
  2047                           	opt stack 0
  2048                           
  2049                           ; 4 bytes @ 0x26
  2050  000027                     	ds	1
  2051  000028                     I2C_Master_Read@ackBit:
  2052                           	opt stack 0
  2053  000028                     lcdNibble@data:
  2054                           	opt stack 0
  2055  000028                     motorControl@motor:
  2056                           	opt stack 0
  2057  000028                     I2C_Master_Write@byteToWrite:
  2058                           	opt stack 0
  2059                           
  2060                           ; 2 bytes @ 0x27
  2061  000028                     	ds	1
  2062  000029                     I2C_Master_Read@receivedByte:
  2063                           	opt stack 0
  2064  000029                     lcdInst@data:
  2065                           	opt stack 0
  2066  000029                     putch@data:
  2067                           	opt stack 0
  2068  000029                     ___wmul@multiplicand:
  2069                           	opt stack 0
  2070                           
  2071                           ; 2 bytes @ 0x28
  2072  000029                     	ds	1
  2073  00002A                     ??_initLCD:
  2074  00002A                     lcd_shift_cursor@direction:
  2075                           	opt stack 0
  2076  00002A                     ___ftpack@exp:
  2077                           	opt stack 0
  2078  00002A                     I2C_Send@data:
  2079                           	opt stack 0
  2080  00002A                     RTC_getTime@time:
  2081                           	opt stack 0
  2082                           
  2083                           ; 2 bytes @ 0x29
  2084  00002A                     	ds	1
  2085  00002B                     lcd_shift_cursor@numChars:
  2086                           	opt stack 0
  2087  00002B                     ___ftpack@sign:
  2088                           	opt stack 0
  2089  00002B                     ___wmul@product:
  2090                           	opt stack 0
  2091  00002B                     ___lldiv@divisor:
  2092                           	opt stack 0
  2093                           
  2094                           ; 4 bytes @ 0x2A
  2095  00002B                     	ds	1
  2096  00002C                     ??_I2C_Send:
  2097  00002C                     ??___ftpack:
  2098  00002C                     lcd_shift_cursor@n:
  2099                           	opt stack 0
  2100  00002C                     RTC_getTime@i:
  2101                           	opt stack 0
  2102                           
  2103                           ; 1 bytes @ 0x2B
  2104  00002C                     	ds	1
  2105  00002D                     ?_RTC_getSeconds:
  2106                           	opt stack 0
  2107  00002D                     lcd_set_cursor@y:
  2108                           	opt stack 0
  2109  00002D                     printStringLCD@string:
  2110                           	opt stack 0
  2111  00002D                     strcpy@to:
  2112                           	opt stack 0
  2113                           
  2114                           ; 2 bytes @ 0x2C
  2115  00002D                     	ds	1
  2116  00002E                     ??_lcd_set_cursor:
  2117                           
  2118                           ; 1 bytes @ 0x2D
  2119  00002E                     	ds	1
  2120  00002F                     ??_printStringLCD:
  2121  00002F                     ??___ftadd:
  2122  00002F                     lcd_set_cursor@i:
  2123                           	opt stack 0
  2124  00002F                     I2C_Send@address:
  2125                           	opt stack 0
  2126  00002F                     strcpy@from:
  2127                           	opt stack 0
  2128  00002F                     ___lldiv@quotient:
  2129                           	opt stack 0
  2130                           
  2131                           ; 4 bytes @ 0x2E
  2132  00002F                     	ds	1
  2133  000030                     lcd_set_cursor@x:
  2134                           	opt stack 0
  2135  000030                     I2C_Send@i:
  2136                           	opt stack 0
  2137                           
  2138                           ; 2 bytes @ 0x2F
  2139  000030                     	ds	1
  2140  000031                     ??_RTC_getSeconds:
  2141  000031                     strcpy@cp:
  2142                           	opt stack 0
  2143                           
  2144                           ; 2 bytes @ 0x30
  2145  000031                     	ds	1
  2146  000032                     ??_clearing:
  2147  000032                     ??_viewLogs:
  2148  000032                     hibernate@pressed:
  2149                           	opt stack 0
  2150  000032                     printErrorLCD@string:
  2151                           	opt stack 0
  2152                           
  2153                           ; 2 bytes @ 0x31
  2154  000032                     	ds	1
  2155  000033                     ___lldiv@counter:
  2156                           	opt stack 0
  2157                           
  2158                           ; 1 bytes @ 0x32
  2159  000033                     	ds	1
  2160  000034                     tblptru	equ	0xFF8
  2161                           tblptrh	equ	0xFF7
  2162                           tblptrl	equ	0xFF6
  2163                           tablat	equ	0xFF5
  2164                           postinc0	equ	0xFEE
  2165                           wreg	equ	0xFE8
  2166                           postdec1	equ	0xFE5
  2167                           fsr1l	equ	0xFE1
  2168                           
  2169                           ; 1 bytes @ 0x33
  2170 ;;
  2171 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2172 ;;
  2173 ;; *************** function _main *****************
  2174 ;; Defined at:
  2175 ;;		line 246 in file "main.c"
  2176 ;; Parameters:    Size  Location     Type
  2177 ;;		None
  2178 ;; Auto vars:     Size  Location     Type
  2179 ;;		None
  2180 ;; Return value:  Size  Location     Type
  2181 ;;                  1    wreg      void 
  2182 ;; Registers used:
  2183 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2184 ;; Tracked objects:
  2185 ;;		On entry : 0/0
  2186 ;;		On exit  : 0/0
  2187 ;;		Unchanged: 0/0
  2188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2191 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2192 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2193 ;;Total ram usage:        1 bytes
  2194 ;; Hardware stack levels required when called:   10
  2195 ;; This function calls:
  2196 ;;		_I2C_Master_Init
  2197 ;;		_hibernate
  2198 ;;		_initLCD
  2199 ;;		_lcdInst
  2200 ;;		_mainMenu
  2201 ;; This function is called by:
  2202 ;;		Startup code after reset
  2203 ;; This function uses a non-reentrant model
  2204 ;;
  2205                           
  2206                           	psect	text0
  2207  0024F6                     __ptext0:
  2208                           	opt stack 0
  2209  0024F6                     _main:
  2210                           	opt stack 21
  2211                           
  2212                           ;main.c: 251: LATA = 0x00;
  2213                           
  2214                           ;incstack = 0
  2215  0024F6  0E00               	movlw	0
  2216  0024F8  6E89               	movwf	3977,c	;volatile
  2217                           
  2218                           ;main.c: 252: LATB = 0x00;
  2219  0024FA  0E00               	movlw	0
  2220  0024FC  6E8A               	movwf	3978,c	;volatile
  2221                           
  2222                           ;main.c: 253: LATC = 0x00;
  2223  0024FE  0E00               	movlw	0
  2224  002500  6E8B               	movwf	3979,c	;volatile
  2225                           
  2226                           ;main.c: 254: LATD = 0x00;
  2227  002502  0E00               	movlw	0
  2228  002504  6E8C               	movwf	3980,c	;volatile
  2229                           
  2230                           ;main.c: 255: LATE = 0x00;
  2231  002506  0E00               	movlw	0
  2232  002508  6E8D               	movwf	3981,c	;volatile
  2233                           
  2234                           ;main.c: 258: TRISA = 0xFF;
  2235  00250A  6892               	setf	3986,c	;volatile
  2236                           
  2237                           ;main.c: 259: TRISB = 0b11110111;
  2238  00250C  0EF7               	movlw	247
  2239  00250E  6E93               	movwf	3987,c	;volatile
  2240                           
  2241                           ;main.c: 260: TRISC = 0x00;
  2242  002510  0E00               	movlw	0
  2243  002512  6E94               	movwf	3988,c	;volatile
  2244                           
  2245                           ;main.c: 261: TRISD = 0x00;
  2246  002514  0E00               	movlw	0
  2247  002516  6E95               	movwf	3989,c	;volatile
  2248                           
  2249                           ;main.c: 262: TRISE = 0x00;
  2250  002518  0E00               	movlw	0
  2251  00251A  6E96               	movwf	3990,c	;volatile
  2252                           
  2253                           ;main.c: 264: ADCON0 = 0x00;
  2254  00251C  0E00               	movlw	0
  2255  00251E  6EC2               	movwf	4034,c	;volatile
  2256                           
  2257                           ;main.c: 265: ADCON1 = 0x0F;
  2258  002520  0E0F               	movlw	15
  2259  002522  6EC1               	movwf	4033,c	;volatile
  2260                           
  2261                           ;main.c: 268: I2C_Master_Init(100000);
  2262  002524  0EA0               	movlw	160
  2263  002526  0100               	movlb	0	; () banked
  2264  002528  6F80               	movwf	I2C_Master_Init@clockFreq& (0+255),b
  2265  00252A  0E86               	movlw	134
  2266  00252C  6F81               	movwf	(I2C_Master_Init@clockFreq+1)& (0+255),b
  2267  00252E  0E01               	movlw	1
  2268  002530  6F82               	movwf	(I2C_Master_Init@clockFreq+2)& (0+255),b
  2269  002532  0E00               	movlw	0
  2270  002534  6F83               	movwf	(I2C_Master_Init@clockFreq+3)& (0+255),b
  2271  002536  EC4E  F014         	call	_I2C_Master_Init	;wreg free
  2272                           
  2273                           ;main.c: 270: initLCD();
  2274  00253A  ECA6  F014         	call	_initLCD	;wreg free
  2275                           
  2276                           ;main.c: 272: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2277  00253E  0E01               	movlw	1
  2278  002540  ECF7  F015         	call	_lcdInst
  2279  002544  0EC3               	movlw	195
  2280  002546  0100               	movlb	0	; () banked
  2281  002548  6FF8               	movwf	??_main& (0+255),b
  2282  00254A  0ECD               	movlw	205
  2283  00254C                     u6767:
  2284  00254C  2EE8               	decfsz	wreg,f,c
  2285  00254E  D7FE               	bra	u6767
  2286  002550  2FF8               	decfsz	??_main& (0+255),f,b
  2287  002552  D7FC               	bra	u6767
  2288                           
  2289                           ;main.c: 273: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2290  002554  0E80               	movlw	128
  2291  002556  ECF7  F015         	call	_lcdInst
  2292  00255A  0E41               	movlw	65
  2293  00255C  0100               	movlb	0	; () banked
  2294  00255E  6FF8               	movwf	??_main& (0+255),b
  2295  002560  0EEE               	movlw	238
  2296  002562                     u6777:
  2297  002562  2EE8               	decfsz	wreg,f,c
  2298  002564  D7FE               	bra	u6777
  2299  002566  2FF8               	decfsz	??_main& (0+255),f,b
  2300  002568  D7FC               	bra	u6777
  2301  00256A  F000               	nop	
  2302                           
  2303                           ;main.c: 275: hibernate();
  2304  00256C  EC0E  F015         	call	_hibernate	;wreg free
  2305                           
  2306                           ;main.c: 276: mainMenu();
  2307  002570  ECC9  F009         	call	_mainMenu	;wreg free
  2308  002574  EF07  F000         	goto	start
  2309  002578                     __end_of_main:
  2310                           	opt stack 0
  2311                           tblptru	equ	0xFF8
  2312                           tblptrh	equ	0xFF7
  2313                           tblptrl	equ	0xFF6
  2314                           tablat	equ	0xFF5
  2315                           postinc0	equ	0xFEE
  2316                           wreg	equ	0xFE8
  2317                           postdec1	equ	0xFE5
  2318                           fsr1l	equ	0xFE1
  2319                           
  2320 ;; *************** function _mainMenu *****************
  2321 ;; Defined at:
  2322 ;;		line 174 in file "menu.c"
  2323 ;; Parameters:    Size  Location     Type
  2324 ;;		None
  2325 ;; Auto vars:     Size  Location     Type
  2326 ;;  operationTim    4  108[BANK0 ] long 
  2327 ;;  i               2  118[BANK0 ] int 
  2328 ;;  startPress      2  112[BANK0 ] int 
  2329 ;;  pressed         2  116[BANK0 ] int 
  2330 ;;  needToPrint     2  114[BANK0 ] int 
  2331 ;; Return value:  Size  Location     Type
  2332 ;;                  1    wreg      void 
  2333 ;; Registers used:
  2334 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2335 ;; Tracked objects:
  2336 ;;		On entry : 0/0
  2337 ;;		On exit  : 0/0
  2338 ;;		Unchanged: 0/0
  2339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2341 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2342 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2343 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2344 ;;Total ram usage:       16 bytes
  2345 ;; Hardware stack levels used:    1
  2346 ;; Hardware stack levels required when called:    9
  2347 ;; This function calls:
  2348 ;;		_I2C_Send
  2349 ;;		_RTC_getOperatingTime
  2350 ;;		_RTC_startOperation
  2351 ;;		_clearing
  2352 ;;		_hibernate
  2353 ;;		_inputEntry
  2354 ;;		_lcdInst
  2355 ;;		_packaging
  2356 ;;		_pollKeypad
  2357 ;;		_printStringLCD
  2358 ;;		_printf
  2359 ;;		_putch
  2360 ;;		_viewLogs
  2361 ;; This function is called by:
  2362 ;;		_main
  2363 ;; This function uses a non-reentrant model
  2364 ;;
  2365                           
  2366                           	psect	text1
  2367  001392                     __ptext1:
  2368                           	opt stack 0
  2369  001392                     _mainMenu:
  2370                           	opt stack 21
  2371                           
  2372                           ;menu.c: 175: int pressed;
  2373                           ;menu.c: 176: int needToPrint = 1;
  2374                           
  2375                           ;incstack = 0
  2376  001392  0E00               	movlw	0
  2377  001394  0100               	movlb	0	; () banked
  2378  001396  6FF3               	movwf	(mainMenu@needToPrint+1)& (0+255),b
  2379  001398  0E01               	movlw	1
  2380  00139A  6FF2               	movwf	mainMenu@needToPrint& (0+255),b
  2381  00139C                     
  2382                           ;menu.c: 179: if (needToPrint) {
  2383                           
  2384                           ; BSR set to: 0
  2385  00139C  0100               	movlb	0	; () banked
  2386  00139E  51F2               	movf	mainMenu@needToPrint& (0+255),w,b
  2387  0013A0  11F3               	iorwf	(mainMenu@needToPrint+1)& (0+255),w,b
  2388  0013A2  B4D8               	btfsc	status,2,c
  2389  0013A4  D00B               	goto	l396
  2390                           
  2391                           ; BSR set to: 0
  2392                           ;menu.c: 180: printStringLCD("0:Sleep 1:Begin \n2: View Logs");
  2393  0013A6  0E5F               	movlw	low STR_17
  2394  0013A8  6E2D               	movwf	printStringLCD@string,c
  2395  0013AA  0EFE               	movlw	high STR_17
  2396  0013AC  6E2E               	movwf	printStringLCD@string+1,c
  2397  0013AE  EC2D  F00D         	call	_printStringLCD	;wreg free
  2398                           
  2399                           ;menu.c: 181: needToPrint = 0;
  2400  0013B2  0E00               	movlw	0
  2401  0013B4  0100               	movlb	0	; () banked
  2402  0013B6  6FF3               	movwf	(mainMenu@needToPrint+1)& (0+255),b
  2403  0013B8  0E00               	movlw	0
  2404  0013BA  6FF2               	movwf	mainMenu@needToPrint& (0+255),b
  2405  0013BC                     l396:
  2406                           
  2407                           ; BSR set to: 0
  2408                           ;menu.c: 182: }
  2409                           ;menu.c: 183: pressed = pollKeypad();
  2410                           
  2411                           ; BSR set to: 0
  2412  0013BC  EC61  F015         	call	_pollKeypad	;wreg free
  2413  0013C0  0100               	movlb	0	; () banked
  2414  0013C2  6FE8               	movwf	??_mainMenu& (0+255),b
  2415  0013C4  51E8               	movf	??_mainMenu& (0+255),w,b
  2416  0013C6  6FF4               	movwf	mainMenu@pressed& (0+255),b
  2417  0013C8  6BF5               	clrf	(mainMenu@pressed+1)& (0+255),b
  2418                           
  2419                           ; BSR set to: 0
  2420                           ;menu.c: 184: putch(pressed);
  2421  0013CA  51F4               	movf	mainMenu@pressed& (0+255),w,b
  2422  0013CC  ECED  F015         	call	_putch
  2423                           
  2424                           ;menu.c: 185: if (pressed - 48 == 0) {
  2425  0013D0  0ED0               	movlw	208
  2426  0013D2  0100               	movlb	0	; () banked
  2427  0013D4  6FE8               	movwf	??_mainMenu& (0+255),b
  2428  0013D6  0EFF               	movlw	255
  2429  0013D8  6FE9               	movwf	(??_mainMenu+1)& (0+255),b
  2430  0013DA  C0F4  F0EA         	movff	mainMenu@pressed,??_mainMenu+2
  2431  0013DE  C0F5  F0EB         	movff	mainMenu@pressed+1,??_mainMenu+3
  2432  0013E2  51E8               	movf	??_mainMenu& (0+255),w,b
  2433  0013E4  27EA               	addwf	(??_mainMenu+2)& (0+255),f,b
  2434  0013E6  51E9               	movf	(??_mainMenu+1)& (0+255),w,b
  2435  0013E8  23EB               	addwfc	(??_mainMenu+3)& (0+255),f,b
  2436  0013EA  51EA               	movf	(??_mainMenu+2)& (0+255),w,b
  2437  0013EC  11EB               	iorwf	(??_mainMenu+3)& (0+255),w,b
  2438  0013EE  A4D8               	btfss	status,2,c
  2439  0013F0  D003               	goto	l397
  2440                           
  2441                           ; BSR set to: 0
  2442                           ;menu.c: 186: hibernate();
  2443  0013F2  EC0E  F015         	call	_hibernate	;wreg free
  2444  0013F6  D7CD               	goto	_mainMenu
  2445  0013F8                     l397:
  2446                           
  2447                           ; BSR set to: 0
  2448                           
  2449                           ; BSR set to: 0
  2450  0013F8  0ED0               	movlw	208
  2451  0013FA  6FE8               	movwf	??_mainMenu& (0+255),b
  2452  0013FC  0EFF               	movlw	255
  2453  0013FE  6FE9               	movwf	(??_mainMenu+1)& (0+255),b
  2454  001400  C0F4  F0EA         	movff	mainMenu@pressed,??_mainMenu+2
  2455  001404  C0F5  F0EB         	movff	mainMenu@pressed+1,??_mainMenu+3
  2456  001408  51E8               	movf	??_mainMenu& (0+255),w,b
  2457  00140A  27EA               	addwf	(??_mainMenu+2)& (0+255),f,b
  2458  00140C  51E9               	movf	(??_mainMenu+1)& (0+255),w,b
  2459  00140E  23EB               	addwfc	(??_mainMenu+3)& (0+255),f,b
  2460  001410  05EA               	decf	(??_mainMenu+2)& (0+255),w,b
  2461  001412  11EB               	iorwf	(??_mainMenu+3)& (0+255),w,b
  2462  001414  A4D8               	btfss	status,2,c
  2463  001416  D173               	goto	l399
  2464                           
  2465                           ; BSR set to: 0
  2466                           ;menu.c: 189: inputEntry();
  2467  001418  EC09  F000         	call	_inputEntry	;wreg free
  2468                           
  2469                           ;menu.c: 190: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2470  00141C  0E01               	movlw	1
  2471  00141E  ECF7  F015         	call	_lcdInst
  2472  001422  0EC3               	movlw	195
  2473  001424  0100               	movlb	0	; () banked
  2474  001426  6FE8               	movwf	??_mainMenu& (0+255),b
  2475  001428  0ECD               	movlw	205
  2476  00142A                     u6787:
  2477  00142A  2EE8               	decfsz	wreg,f,c
  2478  00142C  D7FE               	bra	u6787
  2479  00142E  2FE8               	decfsz	??_mainMenu& (0+255),f,b
  2480  001430  D7FC               	bra	u6787
  2481                           
  2482                           ;menu.c: 191: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2483  001432  0E80               	movlw	128
  2484  001434  ECF7  F015         	call	_lcdInst
  2485  001438  0E41               	movlw	65
  2486  00143A  0100               	movlb	0	; () banked
  2487  00143C  6FE8               	movwf	??_mainMenu& (0+255),b
  2488  00143E  0EEE               	movlw	238
  2489  001440                     u6797:
  2490  001440  2EE8               	decfsz	wreg,f,c
  2491  001442  D7FE               	bra	u6797
  2492  001444  2FE8               	decfsz	??_mainMenu& (0+255),f,b
  2493  001446  D7FC               	bra	u6797
  2494  001448  F000               	nop	
  2495                           
  2496                           ;menu.c: 192: printf("Press 1 to start");
  2497  00144A  0E12               	movlw	low STR_18
  2498  00144C  0100               	movlb	0	; () banked
  2499  00144E  6F9B               	movwf	printf@f& (0+255),b
  2500  001450  0EFF               	movlw	high STR_18
  2501  001452  6F9C               	movwf	(printf@f+1)& (0+255),b
  2502  001454  EC2C  F015         	call	_printf	;wreg free
  2503                           
  2504                           ;menu.c: 193: lcdInst(0xC0);;
  2505  001458  0EC0               	movlw	192
  2506  00145A  ECF7  F015         	call	_lcdInst
  2507                           
  2508                           ;menu.c: 194: printf("packaging");
  2509  00145E  0EE4               	movlw	low (STR_20+9)
  2510  001460  0100               	movlb	0	; () banked
  2511  001462  6F9B               	movwf	printf@f& (0+255),b
  2512  001464  0EFE               	movlw	high (STR_20+9)
  2513  001466  6F9C               	movwf	(printf@f+1)& (0+255),b
  2514  001468  EC2C  F015         	call	_printf	;wreg free
  2515                           
  2516                           ;menu.c: 195: int startPress = pollKeypad();
  2517  00146C  EC61  F015         	call	_pollKeypad	;wreg free
  2518  001470  D002               	goto	L1
  2519  001472                     
  2520                           ; BSR set to: 0
  2521                           ;menu.c: 197: startPress = pollKeypad();
  2522                           
  2523                           ; BSR set to: 0
  2524  001472  EC61  F015         	call	_pollKeypad	;wreg free
  2525  001476                     L1:
  2526  001476  0100               	movlb	0	; () banked
  2527  001478  6FE8               	movwf	??_mainMenu& (0+255),b
  2528  00147A  51E8               	movf	??_mainMenu& (0+255),w,b
  2529  00147C  6FF0               	movwf	mainMenu@startPress& (0+255),b
  2530  00147E  6BF1               	clrf	(mainMenu@startPress+1)& (0+255),b
  2531                           
  2532                           ; BSR set to: 0
  2533                           
  2534                           ; BSR set to: 0
  2535  001480  0ED0               	movlw	208
  2536  001482  6FE8               	movwf	??_mainMenu& (0+255),b
  2537  001484  0EFF               	movlw	255
  2538  001486  6FE9               	movwf	(??_mainMenu+1)& (0+255),b
  2539  001488  C0F0  F0EA         	movff	mainMenu@startPress,??_mainMenu+2
  2540  00148C  C0F1  F0EB         	movff	mainMenu@startPress+1,??_mainMenu+3
  2541  001490  51E8               	movf	??_mainMenu& (0+255),w,b
  2542  001492  27EA               	addwf	(??_mainMenu+2)& (0+255),f,b
  2543  001494  51E9               	movf	(??_mainMenu+1)& (0+255),w,b
  2544  001496  23EB               	addwfc	(??_mainMenu+3)& (0+255),f,b
  2545  001498  05EA               	decf	(??_mainMenu+2)& (0+255),w,b
  2546  00149A  11EB               	iorwf	(??_mainMenu+3)& (0+255),w,b
  2547  00149C  A4D8               	btfss	status,2,c
  2548  00149E  D7E9               	goto	l401
  2549                           
  2550                           ; BSR set to: 0
  2551                           ;menu.c: 198: }
  2552                           ;menu.c: 199: RTC_startOperation();
  2553                           
  2554                           ; BSR set to: 0
  2555  0014A0  ECE2  F015         	call	_RTC_startOperation	;wreg free
  2556                           
  2557                           ;menu.c: 200: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2558  0014A4  0E01               	movlw	1
  2559  0014A6  ECF7  F015         	call	_lcdInst
  2560  0014AA  0EC3               	movlw	195
  2561  0014AC  0100               	movlb	0	; () banked
  2562  0014AE  6FE8               	movwf	??_mainMenu& (0+255),b
  2563  0014B0  0ECD               	movlw	205
  2564  0014B2                     u6807:
  2565  0014B2  2EE8               	decfsz	wreg,f,c
  2566  0014B4  D7FE               	bra	u6807
  2567  0014B6  2FE8               	decfsz	??_mainMenu& (0+255),f,b
  2568  0014B8  D7FC               	bra	u6807
  2569                           
  2570                           ;menu.c: 201: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2571  0014BA  0E80               	movlw	128
  2572  0014BC  ECF7  F015         	call	_lcdInst
  2573  0014C0  0E41               	movlw	65
  2574  0014C2  0100               	movlb	0	; () banked
  2575  0014C4  6FE8               	movwf	??_mainMenu& (0+255),b
  2576  0014C6  0EEE               	movlw	238
  2577  0014C8                     u6817:
  2578  0014C8  2EE8               	decfsz	wreg,f,c
  2579  0014CA  D7FE               	bra	u6817
  2580  0014CC  2FE8               	decfsz	??_mainMenu& (0+255),f,b
  2581  0014CE  D7FC               	bra	u6817
  2582  0014D0  F000               	nop	
  2583                           
  2584                           ;menu.c: 202: printf("Starting packaging");
  2585  0014D2  0EDB               	movlw	low STR_20
  2586  0014D4  0100               	movlb	0	; () banked
  2587  0014D6  6F9B               	movwf	printf@f& (0+255),b
  2588  0014D8  0EFE               	movlw	high STR_20
  2589  0014DA  6F9C               	movwf	(printf@f+1)& (0+255),b
  2590  0014DC  EC2C  F015         	call	_printf	;wreg free
  2591                           
  2592                           ;menu.c: 203: I2C_Send(nanoAddr, "\1Starting packaging\0");
  2593  0014E0  0EC6               	movlw	low STR_21
  2594  0014E2  6E2A               	movwf	I2C_Send@data,c
  2595  0014E4  0EFE               	movlw	high STR_21
  2596  0014E6  6E2B               	movwf	I2C_Send@data+1,c
  2597  0014E8  0E7F               	movlw	low _nanoAddr
  2598  0014EA  6EF6               	movwf	tblptrl,c
  2599  0014EC                     	if	1	;There is more than 1 active tblptr byte
  2600  0014EC  0EFC               	movlw	high _nanoAddr
  2601  0014EE  6EF7               	movwf	tblptrh,c
  2602  0014F0                     	endif
  2603  0014F0                     	if	1	;There are 3 active tblptr bytes
  2604  0014F0  0E00               	movlw	low (_nanoAddr shr (0+16))
  2605  0014F2  6EF8               	movwf	tblptru,c
  2606  0014F4                     	endif
  2607  0014F4  0008               	tblrd		*
  2608  0014F6  50F5               	movf	tablat,w,c
  2609  0014F8  EC32  F012         	call	_I2C_Send
  2610                           
  2611                           ;menu.c: 204: packaging();
  2612  0014FC  EC94  F00B         	call	_packaging	;wreg free
  2613                           
  2614                           ;menu.c: 205: clearing();
  2615  001500  EC82  F003         	call	_clearing	;wreg free
  2616                           
  2617                           ;menu.c: 206: long operationTime = RTC_getOperatingTime();
  2618  001504  EC7D  F014         	call	_RTC_getOperatingTime	;wreg free
  2619  001508  C08B  F0EC         	movff	?_RTC_getOperatingTime,mainMenu@operationTime
  2620  00150C  C08C  F0ED         	movff	?_RTC_getOperatingTime+1,mainMenu@operationTime+1
  2621  001510  C08D  F0EE         	movff	?_RTC_getOperatingTime+2,mainMenu@operationTime+2
  2622  001514  C08E  F0EF         	movff	?_RTC_getOperatingTime+3,mainMenu@operationTime+3
  2623                           
  2624                           ;menu.c: 208: printf("Summary:");
  2625  001518  0EE5               	movlw	low STR_22
  2626  00151A  0100               	movlb	0	; () banked
  2627  00151C  6F9B               	movwf	printf@f& (0+255),b
  2628  00151E  0EFF               	movlw	high STR_22
  2629  001520  6F9C               	movwf	(printf@f+1)& (0+255),b
  2630  001522  EC2C  F015         	call	_printf	;wreg free
  2631                           
  2632                           ;menu.c: 209: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2633  001526  0E33               	movlw	51
  2634  001528  0100               	movlb	0	; () banked
  2635  00152A  6FE9               	movwf	(??_mainMenu+1)& (0+255),b
  2636  00152C  0EBB               	movlw	187
  2637  00152E  6FE8               	movwf	??_mainMenu& (0+255),b
  2638  001530  0EDF               	movlw	223
  2639  001532                     u6827:
  2640  001532  2EE8               	decfsz	wreg,f,c
  2641  001534  D7FE               	bra	u6827
  2642  001536  2FE8               	decfsz	??_mainMenu& (0+255),f,b
  2643  001538  D7FC               	bra	u6827
  2644  00153A  2FE9               	decfsz	(??_mainMenu+1)& (0+255),f,b
  2645  00153C  D7FA               	bra	u6827
  2646  00153E  D000               	nop2	
  2647  001540                     
  2648                           ;menu.c: 212: for (i = 0; i < 8; i++) {
  2649  001540  0E00               	movlw	0
  2650  001542  0100               	movlb	0	; () banked
  2651  001544  6FF7               	movwf	(mainMenu@i+1)& (0+255),b
  2652  001546  0E00               	movlw	0
  2653  001548  6FF6               	movwf	mainMenu@i& (0+255),b
  2654  00154A                     l5399:
  2655                           
  2656                           ; BSR set to: 0
  2657  00154A  BFF7               	btfsc	(mainMenu@i+1)& (0+255),7,b
  2658  00154C  D006               	goto	l404
  2659  00154E  51F7               	movf	(mainMenu@i+1)& (0+255),w,b
  2660  001550  E155               	bnz	l5417
  2661  001552  0E08               	movlw	8
  2662  001554  5DF6               	subwf	mainMenu@i& (0+255),w,b
  2663  001556  B0D8               	btfsc	status,0,c
  2664  001558  D051               	goto	u6720
  2665  00155A                     l404:
  2666                           
  2667                           ; BSR set to: 0
  2668                           ;menu.c: 213: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2669                           
  2670                           ; BSR set to: 0
  2671  00155A  0E01               	movlw	1
  2672  00155C  ECF7  F015         	call	_lcdInst
  2673  001560  0EC3               	movlw	195
  2674  001562  0100               	movlb	0	; () banked
  2675  001564  6FE8               	movwf	??_mainMenu& (0+255),b
  2676  001566  0ECD               	movlw	205
  2677  001568                     u6837:
  2678  001568  2EE8               	decfsz	wreg,f,c
  2679  00156A  D7FE               	bra	u6837
  2680  00156C  2FE8               	decfsz	??_mainMenu& (0+255),f,b
  2681  00156E  D7FC               	bra	u6837
  2682                           
  2683                           ;menu.c: 214: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2684  001570  0E80               	movlw	128
  2685  001572  ECF7  F015         	call	_lcdInst
  2686  001576  0E41               	movlw	65
  2687  001578  0100               	movlb	0	; () banked
  2688  00157A  6FE8               	movwf	??_mainMenu& (0+255),b
  2689  00157C  0EEE               	movlw	238
  2690  00157E                     u6847:
  2691  00157E  2EE8               	decfsz	wreg,f,c
  2692  001580  D7FE               	bra	u6847
  2693  001582  2FE8               	decfsz	??_mainMenu& (0+255),f,b
  2694  001584  D7FC               	bra	u6847
  2695  001586  F000               	nop	
  2696                           
  2697                           ;menu.c: 215: printf("C%d: %s x%d", i+1, fSLookup[params.toFill[i]], params.setMultiple[
      +                          i]);
  2698  001588  0ECE               	movlw	low STR_23
  2699  00158A  0100               	movlb	0	; () banked
  2700  00158C  6F9B               	movwf	printf@f& (0+255),b
  2701  00158E  0EFF               	movlw	high STR_23
  2702  001590  6F9C               	movwf	(printf@f+1)& (0+255),b
  2703  001592  0E01               	movlw	1
  2704  001594  25F6               	addwf	mainMenu@i& (0+255),w,b
  2705  001596  6F9D               	movwf	(?_printf+2)& (0+255),b
  2706  001598  0E00               	movlw	0
  2707  00159A  21F7               	addwfc	(mainMenu@i+1)& (0+255),w,b
  2708  00159C  6F9E               	movwf	(?_printf+3)& (0+255),b
  2709  00159E  0EA5               	movlw	low (_params+2)
  2710  0015A0  25F6               	addwf	mainMenu@i& (0+255),w,b
  2711  0015A2  6ED9               	movwf	fsr2l,c
  2712  0015A4  0E01               	movlw	high (_params+2)
  2713  0015A6  21F7               	addwfc	(mainMenu@i+1)& (0+255),w,b
  2714  0015A8  6EDA               	movwf	fsr2h,c
  2715  0015AA  50DF               	movf	indf2,w,c
  2716  0015AC  6FE8               	movwf	??_mainMenu& (0+255),b
  2717  0015AE  51E8               	movf	??_mainMenu& (0+255),w,b
  2718  0015B0  0D05               	mullw	5
  2719  0015B2  0E3A               	movlw	low _fSLookup
  2720  0015B4  24F3               	addwf	prodl,w,c
  2721  0015B6  6F9F               	movwf	(?_printf+4)& (0+255),b
  2722  0015B8  0E01               	movlw	high _fSLookup
  2723  0015BA  20F4               	addwfc	prodh,w,c
  2724  0015BC  6FA0               	movwf	(?_printf+5)& (0+255),b
  2725  0015BE  90D8               	bcf	status,0,c
  2726  0015C0  35F6               	rlcf	mainMenu@i& (0+255),w,b
  2727  0015C2  6ED9               	movwf	fsr2l,c
  2728  0015C4  35F7               	rlcf	(mainMenu@i+1)& (0+255),w,b
  2729  0015C6  6EDA               	movwf	fsr2h,c
  2730  0015C8  0EAD               	movlw	low (_params+10)
  2731  0015CA  26D9               	addwf	fsr2l,f,c
  2732  0015CC  0E01               	movlw	high (_params+10)
  2733  0015CE  22DA               	addwfc	fsr2h,f,c
  2734  0015D0  CFDE F0A1          	movff	postinc2,?_printf+6
  2735  0015D4  CFDD F0A2          	movff	postdec2,?_printf+7
  2736  0015D8  EC2C  F015         	call	_printf	;wreg free
  2737                           
  2738                           ;menu.c: 216: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2739  0015DC  0E66               	movlw	102
  2740  0015DE  0100               	movlb	0	; () banked
  2741  0015E0  6FE9               	movwf	(??_mainMenu+1)& (0+255),b
  2742  0015E2  0E76               	movlw	118
  2743  0015E4  6FE8               	movwf	??_mainMenu& (0+255),b
  2744  0015E6  0EC1               	movlw	193
  2745  0015E8                     u6857:
  2746  0015E8  2EE8               	decfsz	wreg,f,c
  2747  0015EA  D7FE               	bra	u6857
  2748  0015EC  2FE8               	decfsz	??_mainMenu& (0+255),f,b
  2749  0015EE  D7FC               	bra	u6857
  2750  0015F0  2FE9               	decfsz	(??_mainMenu+1)& (0+255),f,b
  2751  0015F2  D7FA               	bra	u6857
  2752  0015F4  0100               	movlb	0	; () banked
  2753  0015F6  4BF6               	infsnz	mainMenu@i& (0+255),f,b
  2754  0015F8  2BF7               	incf	(mainMenu@i+1)& (0+255),f,b
  2755  0015FA  D7A7               	goto	l5399
  2756  0015FC                     u6720:
  2757  0015FC                     l5417:
  2758                           
  2759                           ; BSR set to: 0
  2760                           ;menu.c: 217: }
  2761                           ;menu.c: 219: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2762  0015FC  0E01               	movlw	1
  2763  0015FE  ECF7  F015         	call	_lcdInst
  2764  001602  0EC3               	movlw	195
  2765  001604  0100               	movlb	0	; () banked
  2766  001606  6FE8               	movwf	??_mainMenu& (0+255),b
  2767  001608  0ECD               	movlw	205
  2768  00160A                     u6867:
  2769  00160A  2EE8               	decfsz	wreg,f,c
  2770  00160C  D7FE               	bra	u6867
  2771  00160E  2FE8               	decfsz	??_mainMenu& (0+255),f,b
  2772  001610  D7FC               	bra	u6867
  2773                           
  2774                           ;menu.c: 220: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2775  001612  0E80               	movlw	128
  2776  001614  ECF7  F015         	call	_lcdInst
  2777  001618  0E41               	movlw	65
  2778  00161A  0100               	movlb	0	; () banked
  2779  00161C  6FE8               	movwf	??_mainMenu& (0+255),b
  2780  00161E  0EEE               	movlw	238
  2781  001620                     u6877:
  2782  001620  2EE8               	decfsz	wreg,f,c
  2783  001622  D7FE               	bra	u6877
  2784  001624  2FE8               	decfsz	??_mainMenu& (0+255),f,b
  2785  001626  D7FC               	bra	u6877
  2786  001628  F000               	nop	
  2787                           
  2788                           ;menu.c: 221: printf("Remaining:");
  2789  00162A  0EDA               	movlw	low STR_24
  2790  00162C  0100               	movlb	0	; () banked
  2791  00162E  6F9B               	movwf	printf@f& (0+255),b
  2792  001630  0EFF               	movlw	high STR_24
  2793  001632  6F9C               	movwf	(printf@f+1)& (0+255),b
  2794  001634  EC2C  F015         	call	_printf	;wreg free
  2795                           
  2796                           ;menu.c: 222: lcdInst(0xC0);;
  2797  001638  0EC0               	movlw	192
  2798  00163A  ECF7  F015         	call	_lcdInst
  2799                           
  2800                           ;menu.c: 223: printf("B%d N%d S%d W%d", extras.b, extras.n, extras.s, extras.w);
  2801  00163E  0E67               	movlw	low STR_25
  2802  001640  0100               	movlb	0	; () banked
  2803  001642  6F9B               	movwf	printf@f& (0+255),b
  2804  001644  0EFF               	movlw	high STR_25
  2805  001646  6F9C               	movwf	(printf@f+1)& (0+255),b
  2806  001648  C03C  F09D         	movff	_extras,?_printf+2
  2807  00164C  C03D  F09E         	movff	_extras+1,?_printf+3
  2808  001650  C03E  F09F         	movff	_extras+2,?_printf+4
  2809  001654  C03F  F0A0         	movff	_extras+3,?_printf+5
  2810  001658  C040  F0A1         	movff	_extras+4,?_printf+6
  2811  00165C  C041  F0A2         	movff	_extras+5,?_printf+7
  2812  001660  C042  F0A3         	movff	_extras+6,?_printf+8
  2813  001664  C043  F0A4         	movff	_extras+7,?_printf+9
  2814  001668  EC2C  F015         	call	_printf	;wreg free
  2815                           
  2816                           ;menu.c: 224: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2817  00166C  0E66               	movlw	102
  2818  00166E  0100               	movlb	0	; () banked
  2819  001670  6FE9               	movwf	(??_mainMenu+1)& (0+255),b
  2820  001672  0E76               	movlw	118
  2821  001674  6FE8               	movwf	??_mainMenu& (0+255),b
  2822  001676  0EC1               	movlw	193
  2823  001678                     u6887:
  2824  001678  2EE8               	decfsz	wreg,f,c
  2825  00167A  D7FE               	bra	u6887
  2826  00167C  2FE8               	decfsz	??_mainMenu& (0+255),f,b
  2827  00167E  D7FC               	bra	u6887
  2828  001680  2FE9               	decfsz	(??_mainMenu+1)& (0+255),f,b
  2829  001682  D7FA               	bra	u6887
  2830                           
  2831                           ;menu.c: 225: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2832  001684  0E01               	movlw	1
  2833  001686  ECF7  F015         	call	_lcdInst
  2834  00168A  0EC3               	movlw	195
  2835  00168C  0100               	movlb	0	; () banked
  2836  00168E  6FE8               	movwf	??_mainMenu& (0+255),b
  2837  001690  0ECD               	movlw	205
  2838  001692                     u6897:
  2839  001692  2EE8               	decfsz	wreg,f,c
  2840  001694  D7FE               	bra	u6897
  2841  001696  2FE8               	decfsz	??_mainMenu& (0+255),f,b
  2842  001698  D7FC               	bra	u6897
  2843                           
  2844                           ;menu.c: 226: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2845  00169A  0E80               	movlw	128
  2846  00169C  ECF7  F015         	call	_lcdInst
  2847  0016A0  0E41               	movlw	65
  2848  0016A2  0100               	movlb	0	; () banked
  2849  0016A4  6FE8               	movwf	??_mainMenu& (0+255),b
  2850  0016A6  0EEE               	movlw	238
  2851  0016A8                     u6907:
  2852  0016A8  2EE8               	decfsz	wreg,f,c
  2853  0016AA  D7FE               	bra	u6907
  2854  0016AC  2FE8               	decfsz	??_mainMenu& (0+255),f,b
  2855  0016AE  D7FC               	bra	u6907
  2856  0016B0  F000               	nop	
  2857                           
  2858                           ;menu.c: 227: printf("Time:");
  2859  0016B2  0EF5               	movlw	low STR_26
  2860  0016B4  0100               	movlb	0	; () banked
  2861  0016B6  6F9B               	movwf	printf@f& (0+255),b
  2862  0016B8  0EFF               	movlw	high STR_26
  2863  0016BA  6F9C               	movwf	(printf@f+1)& (0+255),b
  2864  0016BC  EC2C  F015         	call	_printf	;wreg free
  2865                           
  2866                           ;menu.c: 228: lcdInst(0xC0);;
  2867  0016C0  0EC0               	movlw	192
  2868  0016C2  ECF7  F015         	call	_lcdInst
  2869                           
  2870                           ;menu.c: 229: printf("%ld", operationTime);
  2871  0016C6  0EFB               	movlw	low STR_27
  2872  0016C8  0100               	movlb	0	; () banked
  2873  0016CA  6F9B               	movwf	printf@f& (0+255),b
  2874  0016CC  0EFF               	movlw	high STR_27
  2875  0016CE  6F9C               	movwf	(printf@f+1)& (0+255),b
  2876  0016D0  C0EC  F09D         	movff	mainMenu@operationTime,?_printf+2
  2877  0016D4  C0ED  F09E         	movff	mainMenu@operationTime+1,?_printf+3
  2878  0016D8  C0EE  F09F         	movff	mainMenu@operationTime+2,?_printf+4
  2879  0016DC  C0EF  F0A0         	movff	mainMenu@operationTime+3,?_printf+5
  2880  0016E0  EC2C  F015         	call	_printf	;wreg free
  2881                           
  2882                           ;menu.c: 230: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2883  0016E4  0E66               	movlw	102
  2884  0016E6  0100               	movlb	0	; () banked
  2885  0016E8  6FE9               	movwf	(??_mainMenu+1)& (0+255),b
  2886  0016EA  0E76               	movlw	118
  2887  0016EC  6FE8               	movwf	??_mainMenu& (0+255),b
  2888  0016EE  0EC1               	movlw	193
  2889  0016F0                     u6917:
  2890  0016F0  2EE8               	decfsz	wreg,f,c
  2891  0016F2  D7FE               	bra	u6917
  2892  0016F4  2FE8               	decfsz	??_mainMenu& (0+255),f,b
  2893  0016F6  D7FC               	bra	u6917
  2894  0016F8  2FE9               	decfsz	(??_mainMenu+1)& (0+255),f,b
  2895  0016FA  D7FA               	bra	u6917
  2896  0016FC  D721               	goto	l403
  2897  0016FE                     l399:
  2898  0016FE  0ED0               	movlw	208
  2899  001700  0100               	movlb	0	; () banked
  2900  001702  6FE8               	movwf	??_mainMenu& (0+255),b
  2901  001704  0EFF               	movlw	255
  2902  001706  6FE9               	movwf	(??_mainMenu+1)& (0+255),b
  2903  001708  C0F4  F0EA         	movff	mainMenu@pressed,??_mainMenu+2
  2904  00170C  C0F5  F0EB         	movff	mainMenu@pressed+1,??_mainMenu+3
  2905  001710  51E8               	movf	??_mainMenu& (0+255),w,b
  2906  001712  27EA               	addwf	(??_mainMenu+2)& (0+255),f,b
  2907  001714  51E9               	movf	(??_mainMenu+1)& (0+255),w,b
  2908  001716  23EB               	addwfc	(??_mainMenu+3)& (0+255),f,b
  2909  001718  0E02               	movlw	2
  2910  00171A  19EA               	xorwf	(??_mainMenu+2)& (0+255),w,b
  2911  00171C  11EB               	iorwf	(??_mainMenu+3)& (0+255),w,b
  2912  00171E  A4D8               	btfss	status,2,c
  2913  001720  D63D               	goto	l395
  2914                           
  2915                           ; BSR set to: 0
  2916                           ;menu.c: 234: viewLogs();
  2917  001722  EC78  F015         	call	_viewLogs	;wreg free
  2918  001726  D635               	goto	_mainMenu
  2919  001728                     __end_of_mainMenu:
  2920                           	opt stack 0
  2921                           tblptru	equ	0xFF8
  2922                           tblptrh	equ	0xFF7
  2923                           tblptrl	equ	0xFF6
  2924                           tablat	equ	0xFF5
  2925                           prodh	equ	0xFF4
  2926                           prodl	equ	0xFF3
  2927                           postinc0	equ	0xFEE
  2928                           wreg	equ	0xFE8
  2929                           postdec1	equ	0xFE5
  2930                           fsr1l	equ	0xFE1
  2931                           indf2	equ	0xFDF
  2932                           postinc2	equ	0xFDE
  2933                           postdec2	equ	0xFDD
  2934                           fsr2h	equ	0xFDA
  2935                           fsr2l	equ	0xFD9
  2936                           status	equ	0xFD8
  2937                           
  2938 ;; *************** function _viewLogs *****************
  2939 ;; Defined at:
  2940 ;;		line 22 in file "menu.c"
  2941 ;; Parameters:    Size  Location     Type
  2942 ;;		None
  2943 ;; Auto vars:     Size  Location     Type
  2944 ;;  pressed         2   10[BANK0 ] int 
  2945 ;; Return value:  Size  Location     Type
  2946 ;;                  1    wreg      void 
  2947 ;; Registers used:
  2948 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2949 ;; Tracked objects:
  2950 ;;		On entry : 0/0
  2951 ;;		On exit  : 0/0
  2952 ;;		Unchanged: 0/0
  2953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2955 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2956 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2957 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2958 ;;Total ram usage:        3 bytes
  2959 ;; Hardware stack levels used:    1
  2960 ;; Hardware stack levels required when called:    7
  2961 ;; This function calls:
  2962 ;;		_pollKeypad
  2963 ;;		_printStringLCD
  2964 ;; This function is called by:
  2965 ;;		_mainMenu
  2966 ;; This function uses a non-reentrant model
  2967 ;;
  2968                           
  2969                           	psect	text2
  2970  002AF0                     __ptext2:
  2971                           	opt stack 0
  2972  002AF0                     _viewLogs:
  2973                           	opt stack 22
  2974                           
  2975                           ;menu.c: 23: printStringLCD("Not there yet\n* to return");
  2976                           
  2977                           ; BSR set to: 0
  2978                           ;incstack = 0
  2979  002AF0  0E7D               	movlw	low STR_14
  2980  002AF2  6E2D               	movwf	printStringLCD@string,c
  2981  002AF4  0EFE               	movlw	high STR_14
  2982  002AF6  6E2E               	movwf	printStringLCD@string+1,c
  2983  002AF8  EC2D  F00D         	call	_printStringLCD	;wreg free
  2984  002AFC                     
  2985                           ;menu.c: 25: int pressed = pollKeypad();
  2986  002AFC  EC61  F015         	call	_pollKeypad	;wreg free
  2987  002B00  6E32               	movwf	??_viewLogs& (0+255),c
  2988  002B02  5032               	movf	??_viewLogs,w,c
  2989  002B04  0100               	movlb	0	; () banked
  2990  002B06  6F8A               	movwf	viewLogs@pressed& (0+255),b
  2991  002B08  6B8B               	clrf	(viewLogs@pressed+1)& (0+255),b
  2992                           
  2993                           ; BSR set to: 0
  2994                           ;menu.c: 26: if (pressed == 42) return;
  2995  002B0A  0E2A               	movlw	42
  2996  002B0C  198A               	xorwf	viewLogs@pressed& (0+255),w,b
  2997  002B0E  118B               	iorwf	(viewLogs@pressed+1)& (0+255),w,b
  2998  002B10  B4D8               	btfsc	status,2,c
  2999  002B12  0012               	return	
  3000  002B14  D7F3               	goto	l321
  3001  002B16                     __end_of_viewLogs:
  3002                           	opt stack 0
  3003                           tblptru	equ	0xFF8
  3004                           tblptrh	equ	0xFF7
  3005                           tblptrl	equ	0xFF6
  3006                           tablat	equ	0xFF5
  3007                           prodh	equ	0xFF4
  3008                           prodl	equ	0xFF3
  3009                           postinc0	equ	0xFEE
  3010                           wreg	equ	0xFE8
  3011                           postdec1	equ	0xFE5
  3012                           fsr1l	equ	0xFE1
  3013                           indf2	equ	0xFDF
  3014                           postinc2	equ	0xFDE
  3015                           postdec2	equ	0xFDD
  3016                           fsr2h	equ	0xFDA
  3017                           fsr2l	equ	0xFD9
  3018                           status	equ	0xFD8
  3019                           
  3020 ;; *************** function _packaging *****************
  3021 ;; Defined at:
  3022 ;;		line 112 in file "main.c"
  3023 ;; Parameters:    Size  Location     Type
  3024 ;;		None
  3025 ;; Auto vars:     Size  Location     Type
  3026 ;;  msg            34    0[BANK2 ] unsigned char [34]
  3027 ;;  msg2           32   34[BANK2 ] unsigned char [32]
  3028 ;;  mult            2   72[BANK2 ] int 
  3029 ;;  set             2   70[BANK2 ] PTR unsigned char 
  3030 ;;		 -> fastenerMatrix(84), 
  3031 ;;  compartmentN    2   68[BANK2 ] int 
  3032 ;;  instr           2   66[BANK2 ] unsigned char [2]
  3033 ;; Return value:  Size  Location     Type
  3034 ;;                  1    wreg      void 
  3035 ;; Registers used:
  3036 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3037 ;; Tracked objects:
  3038 ;;		On entry : 0/0
  3039 ;;		On exit  : 0/0
  3040 ;;		Unchanged: 0/0
  3041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3043 ;;      Locals:         0       0       0      74       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3044 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3045 ;;      Totals:         0       6       0      74       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3046 ;;Total ram usage:       80 bytes
  3047 ;; Hardware stack levels used:    1
  3048 ;; Hardware stack levels required when called:    8
  3049 ;; This function calls:
  3050 ;;		_I2C_Send
  3051 ;;		___wmul
  3052 ;;		_lcdInst
  3053 ;;		_packageCompartment
  3054 ;;		_printf
  3055 ;;		_sprintf
  3056 ;; This function is called by:
  3057 ;;		_mainMenu
  3058 ;; This function uses a non-reentrant model
  3059 ;;
  3060                           
  3061                           	psect	text3
  3062  001728                     __ptext3:
  3063                           	opt stack 0
  3064  001728                     _packaging:
  3065                           	opt stack 21
  3066                           
  3067                           ;main.c: 113: int compartmentNum;
  3068                           ;main.c: 118: dispensed.b = 0;
  3069                           
  3070                           ; BSR set to: 0
  3071                           ;incstack = 0
  3072  001728  0E00               	movlw	0
  3073  00172A  6E35               	movwf	_dispensed+1,c
  3074  00172C  0E00               	movlw	0
  3075  00172E  6E34               	movwf	_dispensed,c
  3076                           
  3077                           ;main.c: 119: dispensed.n = 0;
  3078  001730  0E00               	movlw	0
  3079  001732  6E37               	movwf	_dispensed+3,c
  3080  001734  0E00               	movlw	0
  3081  001736  6E36               	movwf	_dispensed+2,c
  3082                           
  3083                           ;main.c: 120: dispensed.s = 0;
  3084  001738  0E00               	movlw	0
  3085  00173A  6E39               	movwf	_dispensed+5,c
  3086  00173C  0E00               	movlw	0
  3087  00173E  6E38               	movwf	_dispensed+4,c
  3088                           
  3089                           ;main.c: 121: dispensed.w = 0;
  3090  001740  0E00               	movlw	0
  3091  001742  6E3B               	movwf	_dispensed+7,c
  3092  001744  0E00               	movlw	0
  3093  001746  6E3A               	movwf	_dispensed+6,c
  3094                           
  3095                           ;main.c: 123: I2C_Send(nanoAddr, "\1Entered the packaging function\0");
  3096  001748  0E3E               	movlw	low STR_6
  3097  00174A  6E2A               	movwf	I2C_Send@data,c
  3098  00174C  0EFE               	movlw	high STR_6
  3099  00174E  6E2B               	movwf	I2C_Send@data+1,c
  3100  001750  0E7F               	movlw	low _nanoAddr
  3101  001752  6EF6               	movwf	tblptrl,c
  3102  001754                     	if	1	;There is more than 1 active tblptr byte
  3103  001754  0EFC               	movlw	high _nanoAddr
  3104  001756  6EF7               	movwf	tblptrh,c
  3105  001758                     	endif
  3106  001758                     	if	1	;There are 3 active tblptr bytes
  3107  001758  0E00               	movlw	low (_nanoAddr shr (0+16))
  3108  00175A  6EF8               	movwf	tblptru,c
  3109  00175C                     	endif
  3110  00175C  0008               	tblrd		*
  3111  00175E  50F5               	movf	tablat,w,c
  3112  001760  EC32  F012         	call	_I2C_Send
  3113                           
  3114                           ;main.c: 124: char instr[2] = {8, 0};
  3115  001764  C057  F242         	movff	packaging@F3204,packaging@instr
  3116  001768  C058  F243         	movff	packaging@F3204+1,packaging@instr+1
  3117                           
  3118                           ;main.c: 125: I2C_Send(nanoAddr, &instr);
  3119  00176C  0E42               	movlw	low packaging@instr
  3120  00176E  6E2A               	movwf	I2C_Send@data,c
  3121  001770  0E02               	movlw	high packaging@instr
  3122  001772  6E2B               	movwf	I2C_Send@data+1,c
  3123  001774  0E7F               	movlw	low _nanoAddr
  3124  001776  6EF6               	movwf	tblptrl,c
  3125  001778                     	if	1	;There is more than 1 active tblptr byte
  3126  001778  0EFC               	movlw	high _nanoAddr
  3127  00177A  6EF7               	movwf	tblptrh,c
  3128  00177C                     	endif
  3129  00177C                     	if	1	;There are 3 active tblptr bytes
  3130  00177C  0E00               	movlw	low (_nanoAddr shr (0+16))
  3131  00177E  6EF8               	movwf	tblptru,c
  3132  001780                     	endif
  3133  001780  0008               	tblrd		*
  3134  001782  50F5               	movf	tablat,w,c
  3135  001784  EC32  F012         	call	_I2C_Send
  3136                           
  3137                           ;main.c: 127: for (compartmentNum = 8; compartmentNum > 0; compartmentNum--) {
  3138  001788  0E00               	movlw	0
  3139  00178A  0102               	movlb	2	; () banked
  3140  00178C  6F45               	movwf	(packaging@compartmentNum+1)& (0+255),b
  3141  00178E  0E08               	movlw	8
  3142  001790  6F44               	movwf	packaging@compartmentNum& (0+255),b
  3143                           
  3144                           ; BSR set to: 2
  3145  001792  BF45               	btfsc	(packaging@compartmentNum+1)& (0+255),7,b
  3146  001794  0012               	return	
  3147  001796  5145               	movf	(packaging@compartmentNum+1)& (0+255),w,b
  3148  001798  E103               	bnz	l4901
  3149  00179A  0544               	decf	packaging@compartmentNum& (0+255),w,b
  3150  00179C  A0D8               	btfss	status,0,c
  3151  00179E  0012               	return	
  3152  0017A0                     l4901:
  3153                           
  3154                           ; BSR set to: 2
  3155                           ;main.c: 129: char msg[] = "\1Started packaging compartment x\0";
  3156  0017A0  EE21  F000         	lfsr	2,packaging@F3206
  3157  0017A4  EE12  F000         	lfsr	1,packaging@msg
  3158  0017A8  0E21               	movlw	33
  3159  0017AA                     u6021:
  3160  0017AA  CFDB FFE3          	movff	plusw2,plusw1
  3161  0017AE  06E8               	decf	wreg,f,c
  3162  0017B0  E2FC               	bc	u6021
  3163                           
  3164                           ; BSR set to: 2
  3165                           ;main.c: 130: msg[31] = compartmentNum + 48;
  3166  0017B2  5144               	movf	packaging@compartmentNum& (0+255),w,b
  3167  0017B4  0F30               	addlw	48
  3168  0017B6  6F1F               	movwf	(packaging@msg+31)& (0+255),b
  3169                           
  3170                           ; BSR set to: 2
  3171                           ;main.c: 131: I2C_Send(nanoAddr, msg);
  3172  0017B8  0E00               	movlw	low packaging@msg
  3173  0017BA  6E2A               	movwf	I2C_Send@data,c
  3174  0017BC  0E02               	movlw	high packaging@msg
  3175  0017BE  6E2B               	movwf	I2C_Send@data+1,c
  3176  0017C0  0E7F               	movlw	low _nanoAddr
  3177  0017C2  6EF6               	movwf	tblptrl,c
  3178  0017C4                     	if	1	;There is more than 1 active tblptr byte
  3179  0017C4  0EFC               	movlw	high _nanoAddr
  3180  0017C6  6EF7               	movwf	tblptrh,c
  3181  0017C8                     	endif
  3182  0017C8                     	if	1	;There are 3 active tblptr bytes
  3183  0017C8  0E00               	movlw	low (_nanoAddr shr (0+16))
  3184  0017CA  6EF8               	movwf	tblptru,c
  3185  0017CC                     	endif
  3186  0017CC  0008               	tblrd		*
  3187  0017CE  50F5               	movf	tablat,w,c
  3188  0017D0  EC32  F012         	call	_I2C_Send
  3189                           
  3190                           ;main.c: 133: if (params.toFill[compartmentNum-1] == 0) continue;
  3191  0017D4  0EFF               	movlw	255
  3192  0017D6  0100               	movlb	0	; () banked
  3193  0017D8  6FB8               	movwf	??_packaging& (0+255),b
  3194  0017DA  0EFF               	movlw	255
  3195  0017DC  6FB9               	movwf	(??_packaging+1)& (0+255),b
  3196  0017DE  C244  F0BA         	movff	packaging@compartmentNum,??_packaging+2
  3197  0017E2  C245  F0BB         	movff	packaging@compartmentNum+1,??_packaging+3
  3198  0017E6  51B8               	movf	??_packaging& (0+255),w,b
  3199  0017E8  27BA               	addwf	(??_packaging+2)& (0+255),f,b
  3200  0017EA  51B9               	movf	(??_packaging+1)& (0+255),w,b
  3201  0017EC  23BB               	addwfc	(??_packaging+3)& (0+255),f,b
  3202  0017EE  0EA5               	movlw	low (_params+2)
  3203  0017F0  25BA               	addwf	(??_packaging+2)& (0+255),w,b
  3204  0017F2  6ED9               	movwf	fsr2l,c
  3205  0017F4  0E01               	movlw	high (_params+2)
  3206  0017F6  21BB               	addwfc	(??_packaging+3)& (0+255),w,b
  3207  0017F8  6EDA               	movwf	fsr2h,c
  3208  0017FA  50DF               	movf	indf2,w,c
  3209  0017FC  B4D8               	btfsc	status,2,c
  3210  0017FE  D123               	goto	l117
  3211                           
  3212                           ; BSR set to: 0
  3213                           ;main.c: 134: char * set = fastenerMatrix[params.toFill[compartmentNum-1]];
  3214                           
  3215                           ; BSR set to: 0
  3216                           
  3217                           ; BSR set to: 0
  3218  001800  0EFF               	movlw	255
  3219  001802  6FB8               	movwf	??_packaging& (0+255),b
  3220  001804  0EFF               	movlw	255
  3221  001806  6FB9               	movwf	(??_packaging+1)& (0+255),b
  3222  001808  C244  F0BA         	movff	packaging@compartmentNum,??_packaging+2
  3223  00180C  C245  F0BB         	movff	packaging@compartmentNum+1,??_packaging+3
  3224  001810  51B8               	movf	??_packaging& (0+255),w,b
  3225  001812  27BA               	addwf	(??_packaging+2)& (0+255),f,b
  3226  001814  51B9               	movf	(??_packaging+1)& (0+255),w,b
  3227  001816  23BB               	addwfc	(??_packaging+3)& (0+255),f,b
  3228  001818  0EA5               	movlw	low (_params+2)
  3229  00181A  25BA               	addwf	(??_packaging+2)& (0+255),w,b
  3230  00181C  6ED9               	movwf	fsr2l,c
  3231  00181E  0E01               	movlw	high (_params+2)
  3232  001820  21BB               	addwfc	(??_packaging+3)& (0+255),w,b
  3233  001822  6EDA               	movwf	fsr2h,c
  3234  001824  50DF               	movf	indf2,w,c
  3235  001826  6FBC               	movwf	(??_packaging+4)& (0+255),b
  3236  001828  51BC               	movf	(??_packaging+4)& (0+255),w,b
  3237  00182A  0D04               	mullw	4
  3238  00182C  0EEA               	movlw	low _fastenerMatrix
  3239  00182E  24F3               	addwf	prodl,w,c
  3240  001830  0102               	movlb	2	; () banked
  3241  001832  6F46               	movwf	packaging@set& (0+255),b
  3242  001834  0EFD               	movlw	high _fastenerMatrix
  3243  001836  20F4               	addwfc	prodh,w,c
  3244  001838  6F47               	movwf	(packaging@set+1)& (0+255),b
  3245                           
  3246                           ; BSR set to: 2
  3247                           ;main.c: 135: char msg2[32];
  3248                           ;main.c: 136: int mult = params.setMultiple[compartmentNum - 1];
  3249  00183A  0EFE               	movlw	254
  3250  00183C  0100               	movlb	0	; () banked
  3251  00183E  6FB8               	movwf	??_packaging& (0+255),b
  3252  001840  0EFF               	movlw	255
  3253  001842  6FB9               	movwf	(??_packaging+1)& (0+255),b
  3254  001844  C244  F0BA         	movff	packaging@compartmentNum,??_packaging+2
  3255  001848  C245  F0BB         	movff	packaging@compartmentNum+1,??_packaging+3
  3256  00184C  90D8               	bcf	status,0,c
  3257  00184E  37BA               	rlcf	(??_packaging+2)& (0+255),f,b
  3258  001850  37BB               	rlcf	(??_packaging+3)& (0+255),f,b
  3259  001852  51B8               	movf	??_packaging& (0+255),w,b
  3260  001854  27BA               	addwf	(??_packaging+2)& (0+255),f,b
  3261  001856  51B9               	movf	(??_packaging+1)& (0+255),w,b
  3262  001858  23BB               	addwfc	(??_packaging+3)& (0+255),f,b
  3263  00185A  0EAD               	movlw	low (_params+10)
  3264  00185C  25BA               	addwf	(??_packaging+2)& (0+255),w,b
  3265  00185E  6ED9               	movwf	fsr2l,c
  3266  001860  0E01               	movlw	high (_params+10)
  3267  001862  21BB               	addwfc	(??_packaging+3)& (0+255),w,b
  3268  001864  6EDA               	movwf	fsr2h,c
  3269  001866  CFDE F248          	movff	postinc2,packaging@mult
  3270  00186A  CFDD F249          	movff	postdec2,packaging@mult+1
  3271                           
  3272                           ; BSR set to: 0
  3273                           ;main.c: 137: sprintf(msg2, "\1B:%d N:%d S:%d W:%d\0", set[0]*mult, set[1]*mult, set[2]*
      +                          mult, set[3]*mult);
  3274  00186E  0E22               	movlw	low packaging@msg2
  3275  001870  6F9B               	movwf	sprintf@wh& (0+255),b
  3276  001872  0E02               	movlw	high packaging@msg2
  3277  001874  6F9C               	movwf	(sprintf@wh+1)& (0+255),b
  3278  001876  0EB0               	movlw	low STR_7
  3279  001878  6F9D               	movwf	sprintf@f& (0+255),b
  3280  00187A  0EFE               	movlw	high STR_7
  3281  00187C  6F9E               	movwf	(sprintf@f+1)& (0+255),b
  3282  00187E  C246  FFF6         	movff	packaging@set,tblptrl
  3283  001882  C247  FFF7         	movff	packaging@set+1,tblptrh
  3284  001886                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3285  001886  6AF8               	clrf	tblptru,c
  3286  001888                     	endif
  3287  001888                     	if	0	;tblptru may be non-zero
  3288  001888                     	endif
  3289  001888  0008               	tblrd		*
  3290  00188A  50F5               	movf	tablat,w,c
  3291  00188C  6E27               	movwf	___wmul@multiplier,c
  3292  00188E  6A28               	clrf	___wmul@multiplier+1,c
  3293  001890  C248  F029         	movff	packaging@mult,___wmul@multiplicand
  3294  001894  C249  F02A         	movff	packaging@mult+1,___wmul@multiplicand+1
  3295  001898  EC9E  F015         	call	___wmul	;wreg free
  3296  00189C  C027  F09F         	movff	?___wmul,?_sprintf+4
  3297  0018A0  C028  F0A0         	movff	?___wmul+1,?_sprintf+5
  3298  0018A4  0E01               	movlw	1
  3299  0018A6  0102               	movlb	2	; () banked
  3300  0018A8  2546               	addwf	packaging@set& (0+255),w,b
  3301  0018AA  0100               	movlb	0	; () banked
  3302  0018AC  6FB8               	movwf	??_packaging& (0+255),b
  3303  0018AE  0E00               	movlw	0
  3304  0018B0  0102               	movlb	2	; () banked
  3305  0018B2  2147               	addwfc	(packaging@set+1)& (0+255),w,b
  3306  0018B4  0100               	movlb	0	; () banked
  3307  0018B6  6FB9               	movwf	(??_packaging+1)& (0+255),b
  3308  0018B8  C0B8  FFF6         	movff	??_packaging,tblptrl
  3309  0018BC  C0B9  FFF7         	movff	??_packaging+1,tblptrh
  3310  0018C0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3311  0018C0  6AF8               	clrf	tblptru,c
  3312  0018C2                     	endif
  3313  0018C2                     	if	0	;tblptru may be non-zero
  3314  0018C2                     	endif
  3315  0018C2  0008               	tblrd		*
  3316  0018C4  50F5               	movf	tablat,w,c
  3317  0018C6  6E27               	movwf	___wmul@multiplier,c
  3318  0018C8  6A28               	clrf	___wmul@multiplier+1,c
  3319  0018CA  C248  F029         	movff	packaging@mult,___wmul@multiplicand
  3320  0018CE  C249  F02A         	movff	packaging@mult+1,___wmul@multiplicand+1
  3321  0018D2  EC9E  F015         	call	___wmul	;wreg free
  3322  0018D6  C027  F0A1         	movff	?___wmul,?_sprintf+6
  3323  0018DA  C028  F0A2         	movff	?___wmul+1,?_sprintf+7
  3324  0018DE  0E02               	movlw	2
  3325  0018E0  0102               	movlb	2	; () banked
  3326  0018E2  2546               	addwf	packaging@set& (0+255),w,b
  3327  0018E4  0100               	movlb	0	; () banked
  3328  0018E6  6FBA               	movwf	(??_packaging+2)& (0+255),b
  3329  0018E8  0E00               	movlw	0
  3330  0018EA  0102               	movlb	2	; () banked
  3331  0018EC  2147               	addwfc	(packaging@set+1)& (0+255),w,b
  3332  0018EE  0100               	movlb	0	; () banked
  3333  0018F0  6FBB               	movwf	(??_packaging+3)& (0+255),b
  3334  0018F2  C0BA  FFF6         	movff	??_packaging+2,tblptrl
  3335  0018F6  C0BB  FFF7         	movff	??_packaging+3,tblptrh
  3336  0018FA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3337  0018FA  6AF8               	clrf	tblptru,c
  3338  0018FC                     	endif
  3339  0018FC                     	if	0	;tblptru may be non-zero
  3340  0018FC                     	endif
  3341  0018FC  0008               	tblrd		*
  3342  0018FE  50F5               	movf	tablat,w,c
  3343  001900  6E27               	movwf	___wmul@multiplier,c
  3344  001902  6A28               	clrf	___wmul@multiplier+1,c
  3345  001904  C248  F029         	movff	packaging@mult,___wmul@multiplicand
  3346  001908  C249  F02A         	movff	packaging@mult+1,___wmul@multiplicand+1
  3347  00190C  EC9E  F015         	call	___wmul	;wreg free
  3348  001910  C027  F0A3         	movff	?___wmul,?_sprintf+8
  3349  001914  C028  F0A4         	movff	?___wmul+1,?_sprintf+9
  3350  001918  0E03               	movlw	3
  3351  00191A  0102               	movlb	2	; () banked
  3352  00191C  2546               	addwf	packaging@set& (0+255),w,b
  3353  00191E  0100               	movlb	0	; () banked
  3354  001920  6FBC               	movwf	(??_packaging+4)& (0+255),b
  3355  001922  0E00               	movlw	0
  3356  001924  0102               	movlb	2	; () banked
  3357  001926  2147               	addwfc	(packaging@set+1)& (0+255),w,b
  3358  001928  0100               	movlb	0	; () banked
  3359  00192A  6FBD               	movwf	(??_packaging+5)& (0+255),b
  3360  00192C  C0BC  FFF6         	movff	??_packaging+4,tblptrl
  3361  001930  C0BD  FFF7         	movff	??_packaging+5,tblptrh
  3362  001934                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3363  001934  6AF8               	clrf	tblptru,c
  3364  001936                     	endif
  3365  001936                     	if	0	;tblptru may be non-zero
  3366  001936                     	endif
  3367  001936  0008               	tblrd		*
  3368  001938  50F5               	movf	tablat,w,c
  3369  00193A  6E27               	movwf	___wmul@multiplier,c
  3370  00193C  6A28               	clrf	___wmul@multiplier+1,c
  3371  00193E  C248  F029         	movff	packaging@mult,___wmul@multiplicand
  3372  001942  C249  F02A         	movff	packaging@mult+1,___wmul@multiplicand+1
  3373  001946  EC9E  F015         	call	___wmul	;wreg free
  3374  00194A  C027  F0A5         	movff	?___wmul,?_sprintf+10
  3375  00194E  C028  F0A6         	movff	?___wmul+1,?_sprintf+11
  3376  001952  ECCC  F014         	call	_sprintf	;wreg free
  3377                           
  3378                           ;main.c: 138: I2C_Send(nanoAddr, msg2);
  3379  001956  0E22               	movlw	low packaging@msg2
  3380  001958  6E2A               	movwf	I2C_Send@data,c
  3381  00195A  0E02               	movlw	high packaging@msg2
  3382  00195C  6E2B               	movwf	I2C_Send@data+1,c
  3383  00195E  0E7F               	movlw	low _nanoAddr
  3384  001960  6EF6               	movwf	tblptrl,c
  3385  001962                     	if	1	;There is more than 1 active tblptr byte
  3386  001962  0EFC               	movlw	high _nanoAddr
  3387  001964  6EF7               	movwf	tblptrh,c
  3388  001966                     	endif
  3389  001966                     	if	1	;There are 3 active tblptr bytes
  3390  001966  0E00               	movlw	low (_nanoAddr shr (0+16))
  3391  001968  6EF8               	movwf	tblptru,c
  3392  00196A                     	endif
  3393  00196A  0008               	tblrd		*
  3394  00196C  50F5               	movf	tablat,w,c
  3395  00196E  EC32  F012         	call	_I2C_Send
  3396                           
  3397                           ;main.c: 139: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3398  001972  0E01               	movlw	1
  3399  001974  ECF7  F015         	call	_lcdInst
  3400  001978  0EC3               	movlw	195
  3401  00197A  0100               	movlb	0	; () banked
  3402  00197C  6FB8               	movwf	??_packaging& (0+255),b
  3403  00197E  0ECD               	movlw	205
  3404  001980                     u6927:
  3405  001980  2EE8               	decfsz	wreg,f,c
  3406  001982  D7FE               	bra	u6927
  3407  001984  2FB8               	decfsz	??_packaging& (0+255),f,b
  3408  001986  D7FC               	bra	u6927
  3409                           
  3410                           ;main.c: 140: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3411  001988  0E80               	movlw	128
  3412  00198A  ECF7  F015         	call	_lcdInst
  3413  00198E  0E41               	movlw	65
  3414  001990  0100               	movlb	0	; () banked
  3415  001992  6FB8               	movwf	??_packaging& (0+255),b
  3416  001994  0EEE               	movlw	238
  3417  001996                     u6937:
  3418  001996  2EE8               	decfsz	wreg,f,c
  3419  001998  D7FE               	bra	u6937
  3420  00199A  2FB8               	decfsz	??_packaging& (0+255),f,b
  3421  00199C  D7FC               	bra	u6937
  3422  00199E  F000               	nop	
  3423                           
  3424                           ;main.c: 141: printf("Compartment %d", compartmentNum);
  3425  0019A0  0E95               	movlw	low STR_8
  3426  0019A2  0100               	movlb	0	; () banked
  3427  0019A4  6F9B               	movwf	printf@f& (0+255),b
  3428  0019A6  0EFF               	movlw	high STR_8
  3429  0019A8  6F9C               	movwf	(printf@f+1)& (0+255),b
  3430  0019AA  C244  F09D         	movff	packaging@compartmentNum,?_printf+2
  3431  0019AE  C245  F09E         	movff	packaging@compartmentNum+1,?_printf+3
  3432  0019B2  EC2C  F015         	call	_printf	;wreg free
  3433                           
  3434                           ;main.c: 142: packageCompartment(set[0]*mult, set[1]*mult, set[2]*mult, set[3]*mult);
  3435  0019B6  0E01               	movlw	1
  3436  0019B8  0102               	movlb	2	; () banked
  3437  0019BA  2546               	addwf	packaging@set& (0+255),w,b
  3438  0019BC  0100               	movlb	0	; () banked
  3439  0019BE  6FB8               	movwf	??_packaging& (0+255),b
  3440  0019C0  0E00               	movlw	0
  3441  0019C2  0102               	movlb	2	; () banked
  3442  0019C4  2147               	addwfc	(packaging@set+1)& (0+255),w,b
  3443  0019C6  0100               	movlb	0	; () banked
  3444  0019C8  6FB9               	movwf	(??_packaging+1)& (0+255),b
  3445  0019CA  C0B8  FFF6         	movff	??_packaging,tblptrl
  3446  0019CE  C0B9  FFF7         	movff	??_packaging+1,tblptrh
  3447  0019D2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3448  0019D2  6AF8               	clrf	tblptru,c
  3449  0019D4                     	endif
  3450  0019D4                     	if	0	;tblptru may be non-zero
  3451  0019D4                     	endif
  3452  0019D4  0008               	tblrd		*
  3453  0019D6  50F5               	movf	tablat,w,c
  3454  0019D8  0102               	movlb	2	; () banked
  3455  0019DA  0348               	mulwf	packaging@mult& (0+255),b
  3456  0019DC  CFF3 F092          	movff	prodl,packageCompartment@n
  3457  0019E0  0E02               	movlw	2
  3458  0019E2  2546               	addwf	packaging@set& (0+255),w,b
  3459  0019E4  0100               	movlb	0	; () banked
  3460  0019E6  6FBA               	movwf	(??_packaging+2)& (0+255),b
  3461  0019E8  0E00               	movlw	0
  3462  0019EA  0102               	movlb	2	; () banked
  3463  0019EC  2147               	addwfc	(packaging@set+1)& (0+255),w,b
  3464  0019EE  0100               	movlb	0	; () banked
  3465  0019F0  6FBB               	movwf	(??_packaging+3)& (0+255),b
  3466  0019F2  C0BA  FFF6         	movff	??_packaging+2,tblptrl
  3467  0019F6  C0BB  FFF7         	movff	??_packaging+3,tblptrh
  3468  0019FA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3469  0019FA  6AF8               	clrf	tblptru,c
  3470  0019FC                     	endif
  3471  0019FC                     	if	0	;tblptru may be non-zero
  3472  0019FC                     	endif
  3473  0019FC  0008               	tblrd		*
  3474  0019FE  50F5               	movf	tablat,w,c
  3475  001A00  0102               	movlb	2	; () banked
  3476  001A02  0348               	mulwf	packaging@mult& (0+255),b
  3477  001A04  CFF3 F093          	movff	prodl,packageCompartment@s
  3478  001A08  0E03               	movlw	3
  3479  001A0A  2546               	addwf	packaging@set& (0+255),w,b
  3480  001A0C  0100               	movlb	0	; () banked
  3481  001A0E  6FBC               	movwf	(??_packaging+4)& (0+255),b
  3482  001A10  0E00               	movlw	0
  3483  001A12  0102               	movlb	2	; () banked
  3484  001A14  2147               	addwfc	(packaging@set+1)& (0+255),w,b
  3485  001A16  0100               	movlb	0	; () banked
  3486  001A18  6FBD               	movwf	(??_packaging+5)& (0+255),b
  3487  001A1A  C0BC  FFF6         	movff	??_packaging+4,tblptrl
  3488  001A1E  C0BD  FFF7         	movff	??_packaging+5,tblptrh
  3489  001A22                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3490  001A22  6AF8               	clrf	tblptru,c
  3491  001A24                     	endif
  3492  001A24                     	if	0	;tblptru may be non-zero
  3493  001A24                     	endif
  3494  001A24  0008               	tblrd		*
  3495  001A26  50F5               	movf	tablat,w,c
  3496  001A28  0102               	movlb	2	; () banked
  3497  001A2A  0348               	mulwf	packaging@mult& (0+255),b
  3498  001A2C  CFF3 F094          	movff	prodl,packageCompartment@w
  3499  001A30  C246  FFF6         	movff	packaging@set,tblptrl
  3500  001A34  C247  FFF7         	movff	packaging@set+1,tblptrh
  3501  001A38                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3502  001A38  6AF8               	clrf	tblptru,c
  3503  001A3A                     	endif
  3504  001A3A                     	if	0	;tblptru may be non-zero
  3505  001A3A                     	endif
  3506  001A3A  0008               	tblrd		*
  3507  001A3C  50F5               	movf	tablat,w,c
  3508  001A3E  0348               	mulwf	packaging@mult& (0+255),b
  3509  001A40  50F3               	movf	prodl,w,c
  3510  001A42  ECF0  F007         	call	_packageCompartment
  3511  001A46                     l117:
  3512  001A46  0102               	movlb	2	; () banked
  3513  001A48  0744               	decf	packaging@compartmentNum& (0+255),f,b
  3514  001A4A  A0D8               	btfss	status,0,c
  3515  001A4C  0745               	decf	(packaging@compartmentNum+1)& (0+255),f,b
  3516                           
  3517                           ; BSR set to: 2
  3518  001A4E  BF45               	btfsc	(packaging@compartmentNum+1)& (0+255),7,b
  3519  001A50  0012               	return	
  3520  001A52  5145               	movf	(packaging@compartmentNum+1)& (0+255),w,b
  3521  001A54  E101               	bnz	u6041
  3522  001A56  D6A1               	goto	L2
  3523  001A58                     u6041:
  3524  001A58  D6A3               	goto	l112
  3525  001A5A                     __end_of_packaging:
  3526                           	opt stack 0
  3527                           tblptru	equ	0xFF8
  3528                           tblptrh	equ	0xFF7
  3529                           tblptrl	equ	0xFF6
  3530                           tablat	equ	0xFF5
  3531                           prodh	equ	0xFF4
  3532                           prodl	equ	0xFF3
  3533                           postinc0	equ	0xFEE
  3534                           wreg	equ	0xFE8
  3535                           postdec1	equ	0xFE5
  3536                           plusw1	equ	0xFE3
  3537                           fsr1l	equ	0xFE1
  3538                           indf2	equ	0xFDF
  3539                           postinc2	equ	0xFDE
  3540                           postdec2	equ	0xFDD
  3541                           plusw2	equ	0xFDB
  3542                           fsr2h	equ	0xFDA
  3543                           fsr2l	equ	0xFD9
  3544                           status	equ	0xFD8
  3545                           
  3546 ;; *************** function _sprintf *****************
  3547 ;; Defined at:
  3548 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprintf.c"
  3549 ;; Parameters:    Size  Location     Type
  3550 ;;  wh              2   27[BANK0 ] PTR unsigned char 
  3551 ;;		 -> packaging@msg2(32), 
  3552 ;;  f               2   29[BANK0 ] PTR const unsigned char 
  3553 ;;		 -> STR_7(22), 
  3554 ;; Auto vars:     Size  Location     Type
  3555 ;;  pb              4   41[BANK0 ] struct __prbuf
  3556 ;;  ap              2   39[BANK0 ] PTR void [1]
  3557 ;;		 -> ?_sprintf(2), ?_printf(2), 
  3558 ;; Return value:  Size  Location     Type
  3559 ;;                  2   27[BANK0 ] int 
  3560 ;; Registers used:
  3561 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3562 ;; Tracked objects:
  3563 ;;		On entry : 0/0
  3564 ;;		On exit  : 0/0
  3565 ;;		Unchanged: 0/0
  3566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3567 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3568 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3570 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3571 ;;Total ram usage:       18 bytes
  3572 ;; Hardware stack levels used:    1
  3573 ;; Hardware stack levels required when called:    7
  3574 ;; This function calls:
  3575 ;;		__doprnt
  3576 ;; This function is called by:
  3577 ;;		_packaging
  3578 ;; This function uses a non-reentrant model
  3579 ;;
  3580                           
  3581                           	psect	text4
  3582  002998                     __ptext4:
  3583                           	opt stack 0
  3584  002998                     _sprintf:
  3585                           	opt stack 21
  3586                           
  3587                           ; BSR set to: 2
  3588                           ;incstack = 0
  3589  002998  C09B  F0A9         	movff	sprintf@wh,sprintf@pb
  3590  00299C  C09C  F0AA         	movff	sprintf@wh+1,sprintf@pb+1
  3591  0029A0  0E00               	movlw	0
  3592  0029A2  0100               	movlb	0	; () banked
  3593  0029A4  6FAB               	movwf	(sprintf@pb+2)& (0+255),b
  3594  0029A6  0E00               	movlw	0
  3595  0029A8  6FAC               	movwf	(sprintf@pb+3)& (0+255),b
  3596  0029AA  0E9F               	movlw	low (?_sprintf+4)
  3597  0029AC  6FA7               	movwf	sprintf@ap& (0+255),b
  3598  0029AE  0E00               	movlw	high (?_sprintf+4)
  3599  0029B0  6FA8               	movwf	(sprintf@ap+1)& (0+255),b
  3600                           
  3601                           ; BSR set to: 0
  3602  0029B2  0EA9               	movlw	low sprintf@pb
  3603  0029B4  6F89               	movwf	__doprnt@pb& (0+255),b
  3604  0029B6  0E00               	movlw	high sprintf@pb
  3605  0029B8  6F8A               	movwf	(__doprnt@pb+1)& (0+255),b
  3606  0029BA  C09D  F08B         	movff	sprintf@f,__doprnt@f
  3607  0029BE  C09E  F08C         	movff	sprintf@f+1,__doprnt@f+1
  3608  0029C2  0EA7               	movlw	low sprintf@ap
  3609  0029C4  6F8D               	movwf	__doprnt@ap& (0+255),b
  3610  0029C6  0E00               	movlw	high sprintf@ap
  3611  0029C8  6F8E               	movwf	(__doprnt@ap+1)& (0+255),b
  3612  0029CA  ECCE  F005         	call	__doprnt	;wreg free
  3613  0029CE  C0A9  FFD9         	movff	sprintf@pb,fsr2l
  3614  0029D2  C0AA  FFDA         	movff	sprintf@pb+1,fsr2h
  3615  0029D6  0E00               	movlw	0
  3616  0029D8  6EDF               	movwf	indf2,c
  3617  0029DA  0012               	return	
  3618  0029DC                     __end_of_sprintf:
  3619                           	opt stack 0
  3620                           tblptru	equ	0xFF8
  3621                           tblptrh	equ	0xFF7
  3622                           tblptrl	equ	0xFF6
  3623                           tablat	equ	0xFF5
  3624                           prodh	equ	0xFF4
  3625                           prodl	equ	0xFF3
  3626                           postinc0	equ	0xFEE
  3627                           wreg	equ	0xFE8
  3628                           postdec1	equ	0xFE5
  3629                           plusw1	equ	0xFE3
  3630                           fsr1l	equ	0xFE1
  3631                           indf2	equ	0xFDF
  3632                           postinc2	equ	0xFDE
  3633                           postdec2	equ	0xFDD
  3634                           plusw2	equ	0xFDB
  3635                           fsr2h	equ	0xFDA
  3636                           fsr2l	equ	0xFD9
  3637                           status	equ	0xFD8
  3638                           
  3639 ;; *************** function _printf *****************
  3640 ;; Defined at:
  3641 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\printf.c"
  3642 ;; Parameters:    Size  Location     Type
  3643 ;;  f               2   27[BANK0 ] PTR const unsigned char 
  3644 ;;		 -> STR_27(4), STR_26(6), STR_25(16), STR_24(11), 
  3645 ;;		 -> STR_23(12), STR_22(9), STR_20(19), STR_19(10), 
  3646 ;;		 -> STR_18(17), STR_8(15), 
  3647 ;; Auto vars:     Size  Location     Type
  3648 ;;  pb              4   39[BANK0 ] struct __prbuf
  3649 ;;  ap              2   37[BANK0 ] PTR void [1]
  3650 ;;		 -> ?_sprintf(2), ?_printf(2), 
  3651 ;; Return value:  Size  Location     Type
  3652 ;;                  2   27[BANK0 ] int 
  3653 ;; Registers used:
  3654 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3655 ;; Tracked objects:
  3656 ;;		On entry : 0/0
  3657 ;;		On exit  : 0/0
  3658 ;;		Unchanged: 0/0
  3659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3660 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3661 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3663 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3664 ;;Total ram usage:       16 bytes
  3665 ;; Hardware stack levels used:    1
  3666 ;; Hardware stack levels required when called:    7
  3667 ;; This function calls:
  3668 ;;		__doprnt
  3669 ;; This function is called by:
  3670 ;;		_packaging
  3671 ;;		_mainMenu
  3672 ;; This function uses a non-reentrant model
  3673 ;;
  3674                           
  3675                           	psect	text5
  3676  002A58                     __ptext5:
  3677                           	opt stack 0
  3678  002A58                     _printf:
  3679                           	opt stack 22
  3680                           
  3681                           ;incstack = 0
  3682  002A58  0E00               	movlw	0
  3683  002A5A  0100               	movlb	0	; () banked
  3684  002A5C  6FA7               	movwf	printf@pb& (0+255),b
  3685  002A5E  0E00               	movlw	0
  3686  002A60  6FA8               	movwf	(printf@pb+1)& (0+255),b
  3687  002A62  0EDA               	movlw	low _putch
  3688  002A64  6FA9               	movwf	(printf@pb+2)& (0+255),b
  3689  002A66  0E2B               	movlw	high _putch
  3690  002A68  6FAA               	movwf	(printf@pb+3)& (0+255),b
  3691  002A6A  0E9D               	movlw	low (?_printf+2)
  3692  002A6C  6FA5               	movwf	printf@ap& (0+255),b
  3693  002A6E  0E00               	movlw	high (?_printf+2)
  3694  002A70  6FA6               	movwf	(printf@ap+1)& (0+255),b
  3695                           
  3696                           ; BSR set to: 0
  3697                           ;	Return value of _printf is never used
  3698  002A72  0EA7               	movlw	low printf@pb
  3699  002A74  6F89               	movwf	__doprnt@pb& (0+255),b
  3700  002A76  0E00               	movlw	high printf@pb
  3701  002A78  6F8A               	movwf	(__doprnt@pb+1)& (0+255),b
  3702  002A7A  C09B  F08B         	movff	printf@f,__doprnt@f
  3703  002A7E  C09C  F08C         	movff	printf@f+1,__doprnt@f+1
  3704  002A82  0EA5               	movlw	low printf@ap
  3705  002A84  6F8D               	movwf	__doprnt@ap& (0+255),b
  3706  002A86  0E00               	movlw	high printf@ap
  3707  002A88  6F8E               	movwf	(__doprnt@ap+1)& (0+255),b
  3708  002A8A  ECCE  F005         	call	__doprnt	;wreg free
  3709  002A8E  0012               	return	
  3710  002A90                     __end_of_printf:
  3711                           	opt stack 0
  3712                           tblptru	equ	0xFF8
  3713                           tblptrh	equ	0xFF7
  3714                           tblptrl	equ	0xFF6
  3715                           tablat	equ	0xFF5
  3716                           prodh	equ	0xFF4
  3717                           prodl	equ	0xFF3
  3718                           postinc0	equ	0xFEE
  3719                           wreg	equ	0xFE8
  3720                           postdec1	equ	0xFE5
  3721                           plusw1	equ	0xFE3
  3722                           fsr1l	equ	0xFE1
  3723                           indf2	equ	0xFDF
  3724                           postinc2	equ	0xFDE
  3725                           postdec2	equ	0xFDD
  3726                           plusw2	equ	0xFDB
  3727                           fsr2h	equ	0xFDA
  3728                           fsr2l	equ	0xFD9
  3729                           status	equ	0xFD8
  3730                           
  3731 ;; *************** function __doprnt *****************
  3732 ;; Defined at:
  3733 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3734 ;; Parameters:    Size  Location     Type
  3735 ;;  pb              2    9[BANK0 ] PTR struct __prbuf
  3736 ;;		 -> sprintf@pb(4), printf@pb(4), 
  3737 ;;  f               2   11[BANK0 ] PTR const unsigned char 
  3738 ;;		 -> STR_27(4), STR_26(6), STR_25(16), STR_24(11), 
  3739 ;;		 -> STR_23(12), STR_22(9), STR_20(19), STR_19(10), 
  3740 ;;		 -> STR_18(17), STR_8(15), STR_7(22), 
  3741 ;;  ap              2   13[BANK0 ] PTR PTR void 
  3742 ;;		 -> sprintf@ap(2), printf@ap(2), 
  3743 ;; Auto vars:     Size  Location     Type
  3744 ;;  val             4   20[BANK0 ] unsigned long 
  3745 ;;  tmpval          4    0        struct .
  3746 ;;  cp              2   24[BANK0 ] PTR const unsigned char 
  3747 ;;		 -> ?_sprintf(2), ?_printf(2), NULL(0), STR_28(7), 
  3748 ;;		 -> fSLookup(105), packaging@msg2(32), 
  3749 ;;  prec            2   17[BANK0 ] int 
  3750 ;;  len             2    0        unsigned int 
  3751 ;;  c               1   26[BANK0 ] char 
  3752 ;;  flag            1   19[BANK0 ] unsigned char 
  3753 ;; Return value:  Size  Location     Type
  3754 ;;                  2    9[BANK0 ] int 
  3755 ;; Registers used:
  3756 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3757 ;; Tracked objects:
  3758 ;;		On entry : 0/0
  3759 ;;		On exit  : 0/0
  3760 ;;		Unchanged: 0/0
  3761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3762 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3763 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3764 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3765 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3766 ;;Total ram usage:       18 bytes
  3767 ;; Hardware stack levels used:    1
  3768 ;; Hardware stack levels required when called:    6
  3769 ;; This function calls:
  3770 ;;		Absolute function
  3771 ;;		___lldiv
  3772 ;;		___llmod
  3773 ;;		_putch
  3774 ;; This function is called by:
  3775 ;;		_printf
  3776 ;;		_sprintf
  3777 ;; This function uses a non-reentrant model
  3778 ;;
  3779                           
  3780                           	psect	text6
  3781  000B9C                     __ptext6:
  3782                           	opt stack 0
  3783  000B9C                     __doprnt:
  3784                           	opt stack 22
  3785                           
  3786                           ;doprnt.c: 499: signed char c;
  3787                           ;doprnt.c: 504: int prec;
  3788                           ;doprnt.c: 508: unsigned char flag;
  3789                           ;doprnt.c: 523: union {
  3790                           ;doprnt.c: 524: unsigned long vd;
  3791                           ;doprnt.c: 525: double integ;
  3792                           ;doprnt.c: 526: } tmpval;
  3793                           ;doprnt.c: 528: unsigned long val;
  3794                           ;doprnt.c: 529: unsigned len;
  3795                           ;doprnt.c: 530: const char * cp;
  3796                           ;doprnt.c: 536: while(c = *f++) {
  3797                           
  3798                           ;incstack = 0
  3799  000B9C  D20E               	goto	u5550
  3800  000B9E                     
  3801                           ;doprnt.c: 538: if(c != '%')
  3802  000B9E  0E25               	movlw	37
  3803  000BA0  0100               	movlb	0	; () banked
  3804  000BA2  199A               	xorwf	__doprnt@c& (0+255),w,b
  3805  000BA4  B4D8               	btfsc	status,2,c
  3806  000BA6  D036               	goto	l655
  3807                           
  3808                           ; BSR set to: 0
  3809                           ;doprnt.c: 540: {
  3810                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  3811  000BA8  EE20 F002          	lfsr	2,2
  3812  000BAC  5189               	movf	__doprnt@pb& (0+255),w,b
  3813  000BAE  26D9               	addwf	fsr2l,f,c
  3814  000BB0  518A               	movf	(__doprnt@pb+1)& (0+255),w,b
  3815  000BB2  22DA               	addwfc	fsr2h,f,c
  3816  000BB4  50DE               	movf	postinc2,w,c
  3817  000BB6  10DE               	iorwf	postinc2,w,c
  3818  000BB8  B4D8               	btfsc	status,2,c
  3819  000BBA  D016               	goto	l656
  3820                           
  3821                           ; BSR set to: 0
  3822  000BBC  EE20 F002          	lfsr	2,2
  3823  000BC0  5189               	movf	__doprnt@pb& (0+255),w,b
  3824  000BC2  26D9               	addwf	fsr2l,f,c
  3825  000BC4  518A               	movf	(__doprnt@pb+1)& (0+255),w,b
  3826  000BC6  22DA               	addwfc	fsr2h,f,c
  3827  000BC8  CFDE F08F          	movff	postinc2,??__doprnt
  3828  000BCC  CFDD F090          	movff	postdec2,??__doprnt+1
  3829  000BD0  D801               	call	u5378
  3830  000BD2  D1F3               	goto	u5550
  3831  000BD4                     u5378:
  3832  000BD4  0005               	push	
  3833  000BD6  6EFA               	movwf	pclath,c
  3834  000BD8  518F               	movf	??__doprnt& (0+255),w,b
  3835  000BDA  6EFD               	movwf	tosl,c
  3836  000BDC  5190               	movf	(??__doprnt+1)& (0+255),w,b
  3837  000BDE  6EFE               	movwf	tosh,c
  3838  000BE0  6AFF               	clrf	tosu,c
  3839  000BE2  50FA               	movf	pclath,w,c
  3840  000BE4  519A               	movf	__doprnt@c& (0+255),w,b
  3841  000BE6  0012               	return		;indir
  3842  000BE8                     l656:
  3843  000BE8  C089  FFD9         	movff	__doprnt@pb,fsr2l
  3844  000BEC  C08A  FFDA         	movff	__doprnt@pb+1,fsr2h
  3845  000BF0  CFDE F08F          	movff	postinc2,??__doprnt
  3846  000BF4  CFDD F090          	movff	postdec2,??__doprnt+1
  3847  000BF8  C08F  FFD9         	movff	??__doprnt,fsr2l
  3848  000BFC  C090  FFDA         	movff	??__doprnt+1,fsr2h
  3849  000C00  C09A  FFDF         	movff	__doprnt@c,indf2
  3850  000C04  C089  FFD9         	movff	__doprnt@pb,fsr2l
  3851  000C08  C08A  FFDA         	movff	__doprnt@pb+1,fsr2h
  3852  000C0C  2ADE               	incf	postinc2,f,c
  3853  000C0E  0E00               	movlw	0
  3854  000C10  22DD               	addwfc	postdec2,f,c
  3855                           
  3856                           ;doprnt.c: 542: continue;
  3857  000C12  D1D3               	goto	u5550
  3858  000C14                     l655:
  3859                           
  3860                           ;doprnt.c: 543: }
  3861                           ;doprnt.c: 548: flag = 0;
  3862  000C14  0E00               	movlw	0
  3863  000C16  0100               	movlb	0	; () banked
  3864  000C18  6F93               	movwf	__doprnt@flag& (0+255),b
  3865                           
  3866                           ; BSR set to: 0
  3867                           ;doprnt.c: 635: switch(c = *f++) {
  3868                           
  3869                           ;doprnt.c: 633: loop:
  3870  000C1A  D091               	goto	l659
  3871  000C1C                     
  3872                           ; BSR set to: 0
  3873                           ;doprnt.c: 643: flag |= 0x10;
  3874                           
  3875                           ; BSR set to: 0
  3876  000C1C  8993               	bsf	__doprnt@flag& (0+255),4,b
  3877                           
  3878                           ;doprnt.c: 644: goto loop;
  3879  000C1E  D08F               	goto	l659
  3880  000C20                     
  3881                           ; BSR set to: 0
  3882                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  3883                           
  3884                           ; BSR set to: 0
  3885  000C20  C08D  FFD9         	movff	__doprnt@ap,fsr2l
  3886  000C24  C08E  FFDA         	movff	__doprnt@ap+1,fsr2h
  3887  000C28  CFDF F08F          	movff	indf2,??__doprnt
  3888  000C2C  0E02               	movlw	2
  3889  000C2E  26DE               	addwf	postinc2,f,c
  3890  000C30  CFDF F090          	movff	indf2,??__doprnt+1
  3891  000C34  0E00               	movlw	0
  3892  000C36  22DD               	addwfc	postdec2,f,c
  3893  000C38  C08F  FFD9         	movff	??__doprnt,fsr2l
  3894  000C3C  C090  FFDA         	movff	??__doprnt+1,fsr2h
  3895  000C40  CFDE F098          	movff	postinc2,__doprnt@cp
  3896  000C44  CFDD F099          	movff	postdec2,__doprnt@cp+1
  3897                           
  3898                           ; BSR set to: 0
  3899                           ;doprnt.c: 740: if(!cp)
  3900  000C48  5198               	movf	__doprnt@cp& (0+255),w,b
  3901  000C4A  1199               	iorwf	(__doprnt@cp+1)& (0+255),w,b
  3902  000C4C  A4D8               	btfss	status,2,c
  3903  000C4E  D062               	goto	l671
  3904                           
  3905                           ; BSR set to: 0
  3906                           ;doprnt.c: 741: cp = "(null)";
  3907  000C50  0EEE               	movlw	low STR_28
  3908  000C52  6F98               	movwf	__doprnt@cp& (0+255),b
  3909  000C54  0EFF               	movlw	high STR_28
  3910  000C56  6F99               	movwf	(__doprnt@cp+1)& (0+255),b
  3911                           
  3912                           ; BSR set to: 0
  3913                           ;doprnt.c: 777: while(*cp)
  3914  000C58  D05D               	goto	l671
  3915  000C5A                     
  3916                           ;doprnt.c: 778: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
  3917                           
  3918                           ; BSR set to: 0
  3919  000C5A  0100               	movlb	0	; () banked
  3920  000C5C  EE20 F002          	lfsr	2,2
  3921  000C60  5189               	movf	__doprnt@pb& (0+255),w,b
  3922  000C62  26D9               	addwf	fsr2l,f,c
  3923  000C64  518A               	movf	(__doprnt@pb+1)& (0+255),w,b
  3924  000C66  22DA               	addwfc	fsr2h,f,c
  3925  000C68  50DE               	movf	postinc2,w,c
  3926  000C6A  10DE               	iorwf	postinc2,w,c
  3927  000C6C  B4D8               	btfsc	status,2,c
  3928  000C6E  D02A               	goto	l670
  3929                           
  3930                           ; BSR set to: 0
  3931  000C70  EE20 F002          	lfsr	2,2
  3932  000C74  5189               	movf	__doprnt@pb& (0+255),w,b
  3933  000C76  26D9               	addwf	fsr2l,f,c
  3934  000C78  518A               	movf	(__doprnt@pb+1)& (0+255),w,b
  3935  000C7A  22DA               	addwfc	fsr2h,f,c
  3936  000C7C  CFDE F08F          	movff	postinc2,??__doprnt
  3937  000C80  CFDD F090          	movff	postdec2,??__doprnt+1
  3938  000C84  D801               	call	u5408
  3939  000C86  D01A               	goto	u5409
  3940  000C88                     u5408:
  3941  000C88  0005               	push	
  3942  000C8A  6EFA               	movwf	pclath,c
  3943  000C8C  518F               	movf	??__doprnt& (0+255),w,b
  3944  000C8E  6EFD               	movwf	tosl,c
  3945  000C90  5190               	movf	(??__doprnt+1)& (0+255),w,b
  3946  000C92  6EFE               	movwf	tosh,c
  3947  000C94  6AFF               	clrf	tosu,c
  3948  000C96  50FA               	movf	pclath,w,c
  3949  000C98  C098  FFF6         	movff	__doprnt@cp,tblptrl
  3950  000C9C  C099  FFF7         	movff	__doprnt@cp+1,tblptrh
  3951  000CA0  0E00               	movlw	low (__mediumconst shr (0+16))
  3952  000CA2  6EF8               	movwf	tblptru,c
  3953  000CA4  0E0F               	movlw	(high __ramtop+-1)
  3954  000CA6  64F7               	cpfsgt	tblptrh,c
  3955  000CA8  D003               	bra	u5417
  3956  000CAA  0008               	tblrd		*
  3957  000CAC  50F5               	movf	tablat,w,c
  3958  000CAE  D005               	bra	u5410
  3959  000CB0                     u5417:
  3960  000CB0  CFF6 FFE9          	movff	tblptrl,fsr0l
  3961  000CB4  CFF7 FFEA          	movff	tblptrh,fsr0h
  3962  000CB8  50EF               	movf	indf0,w,c
  3963  000CBA                     u5410:
  3964  000CBA  0012               	return		;indir
  3965  000CBC                     u5409:
  3966  000CBC  0100               	movlb	0	; () banked
  3967  000CBE  4B98               	infsnz	__doprnt@cp& (0+255),f,b
  3968  000CC0  2B99               	incf	(__doprnt@cp+1)& (0+255),f,b
  3969  000CC2  D028               	goto	l671
  3970  000CC4                     l670:
  3971                           
  3972                           ; BSR set to: 0
  3973                           
  3974                           ; BSR set to: 0
  3975  000CC4  C098  FFF6         	movff	__doprnt@cp,tblptrl
  3976  000CC8  C099  FFF7         	movff	__doprnt@cp+1,tblptrh
  3977  000CCC  0E00               	movlw	low (__mediumconst shr (0+16))
  3978  000CCE  6EF8               	movwf	tblptru,c
  3979  000CD0  C089  FFD9         	movff	__doprnt@pb,fsr2l
  3980  000CD4  C08A  FFDA         	movff	__doprnt@pb+1,fsr2h
  3981  000CD8  CFDE F08F          	movff	postinc2,??__doprnt
  3982  000CDC  CFDD F090          	movff	postdec2,??__doprnt+1
  3983  000CE0  C08F  FFD9         	movff	??__doprnt,fsr2l
  3984  000CE4  C090  FFDA         	movff	??__doprnt+1,fsr2h
  3985  000CE8  0E0F               	movlw	(high __ramtop+-1)
  3986  000CEA  64F7               	cpfsgt	tblptrh,c
  3987  000CEC  D003               	bra	u5427
  3988  000CEE  0008               	tblrd		*
  3989  000CF0  50F5               	movf	tablat,w,c
  3990  000CF2  D005               	bra	u5420
  3991  000CF4                     u5427:
  3992  000CF4  CFF6 FFE9          	movff	tblptrl,fsr0l
  3993  000CF8  CFF7 FFEA          	movff	tblptrh,fsr0h
  3994  000CFC  50EF               	movf	indf0,w,c
  3995  000CFE                     u5420:
  3996  000CFE  6EDF               	movwf	indf2,c
  3997  000D00  0100               	movlb	0	; () banked
  3998  000D02  4B98               	infsnz	__doprnt@cp& (0+255),f,b
  3999  000D04  2B99               	incf	(__doprnt@cp+1)& (0+255),f,b
  4000                           
  4001                           ; BSR set to: 0
  4002  000D06  C089  FFD9         	movff	__doprnt@pb,fsr2l
  4003  000D0A  C08A  FFDA         	movff	__doprnt@pb+1,fsr2h
  4004  000D0E  2ADE               	incf	postinc2,f,c
  4005  000D10  0E00               	movlw	0
  4006  000D12  22DD               	addwfc	postdec2,f,c
  4007  000D14                     l671:
  4008                           
  4009                           ; BSR set to: 0
  4010                           
  4011                           ; BSR set to: 0
  4012                           
  4013                           ; BSR set to: 0
  4014  000D14  C098  FFF6         	movff	__doprnt@cp,tblptrl
  4015  000D18  C099  FFF7         	movff	__doprnt@cp+1,tblptrh
  4016  000D1C  0E00               	movlw	low (__mediumconst shr (0+16))
  4017  000D1E  6EF8               	movwf	tblptru,c
  4018  000D20  0E0F               	movlw	(high __ramtop+-1)
  4019  000D22  64F7               	cpfsgt	tblptrh,c
  4020  000D24  D003               	bra	u5437
  4021  000D26  0008               	tblrd		*
  4022  000D28  50F5               	movf	tablat,w,c
  4023  000D2A  D005               	bra	u5430
  4024  000D2C                     u5437:
  4025  000D2C  CFF6 FFE9          	movff	tblptrl,fsr0l
  4026  000D30  CFF7 FFEA          	movff	tblptrh,fsr0h
  4027  000D34  50EF               	movf	indf0,w,c
  4028  000D36                     u5430:
  4029  000D36  0900               	iorlw	0
  4030  000D38  B4D8               	btfsc	status,2,c
  4031  000D3A  D13F               	goto	u5550
  4032  000D3C  D78E               	goto	l669
  4033  000D3E                     l659:
  4034  000D3E  C08B  FFF6         	movff	__doprnt@f,tblptrl
  4035  000D42  C08C  FFF7         	movff	__doprnt@f+1,tblptrh
  4036  000D46  0100               	movlb	0	; () banked
  4037  000D48  4B8B               	infsnz	__doprnt@f& (0+255),f,b
  4038  000D4A  2B8C               	incf	(__doprnt@f+1)& (0+255),f,b
  4039  000D4C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4040  000D4C  6AF8               	clrf	tblptru,c
  4041  000D4E                     	endif
  4042  000D4E                     	if	0	;tblptru may be non-zero
  4043  000D4E                     	endif
  4044  000D4E  0008               	tblrd		*
  4045  000D50  CFF5 F09A          	movff	tablat,__doprnt@c
  4046  000D54  519A               	movf	__doprnt@c& (0+255),w,b
  4047                           
  4048                           ; Switch size 1, requested type "space"
  4049                           ; Number of cases is 5, Range of values is 0 to 115
  4050                           ; switch strategies available:
  4051                           ; Name         Instructions Cycles
  4052                           ; simple_byte           16     9 (average)
  4053                           ;	Chosen strategy is simple_byte
  4054  000D56  0A00               	xorlw	0	; case 0
  4055  000D58  B4D8               	btfsc	status,2,c
  4056  000D5A  D13D               	goto	u5560
  4057  000D5C  0A64               	xorlw	100	; case 100
  4058  000D5E  B4D8               	btfsc	status,2,c
  4059  000D60  D00A               	goto	l665
  4060  000D62  0A0D               	xorlw	13	; case 105
  4061  000D64  B4D8               	btfsc	status,2,c
  4062  000D66  D007               	goto	l665
  4063  000D68  0A05               	xorlw	5	; case 108
  4064  000D6A  B4D8               	btfsc	status,2,c
  4065  000D6C  D757               	goto	l662
  4066  000D6E  0A1F               	xorlw	31	; case 115
  4067  000D70  B4D8               	btfsc	status,2,c
  4068  000D72  D756               	goto	l666
  4069  000D74  D122               	goto	u5550
  4070  000D76                     l665:
  4071                           
  4072                           ;doprnt.c: 1253: {
  4073                           ;doprnt.c: 1255: if(flag & 0x10)
  4074  000D76  0100               	movlb	0	; () banked
  4075  000D78  A993               	btfss	__doprnt@flag& (0+255),4,b
  4076  000D7A  D019               	goto	l674
  4077                           
  4078                           ; BSR set to: 0
  4079                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  4080  000D7C  C08D  FFD9         	movff	__doprnt@ap,fsr2l
  4081  000D80  C08E  FFDA         	movff	__doprnt@ap+1,fsr2h
  4082  000D84  CFDF F08F          	movff	indf2,??__doprnt
  4083  000D88  0E04               	movlw	4
  4084  000D8A  26DE               	addwf	postinc2,f,c
  4085  000D8C  CFDF F090          	movff	indf2,??__doprnt+1
  4086  000D90  0E00               	movlw	0
  4087  000D92  22DD               	addwfc	postdec2,f,c
  4088  000D94  C08F  FFD9         	movff	??__doprnt,fsr2l
  4089  000D98  C090  FFDA         	movff	??__doprnt+1,fsr2h
  4090  000D9C  CFDE F094          	movff	postinc2,__doprnt@val
  4091  000DA0  CFDE F095          	movff	postinc2,__doprnt@val+1
  4092  000DA4  CFDE F096          	movff	postinc2,__doprnt@val+2
  4093  000DA8  CFDE F097          	movff	postinc2,__doprnt@val+3
  4094  000DAC  D019               	goto	l675
  4095  000DAE                     l674:
  4096                           
  4097                           ; BSR set to: 0
  4098                           ;doprnt.c: 1257: else
  4099                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4100                           
  4101                           ; BSR set to: 0
  4102  000DAE  C08D  FFD9         	movff	__doprnt@ap,fsr2l
  4103  000DB2  C08E  FFDA         	movff	__doprnt@ap+1,fsr2h
  4104  000DB6  CFDF F08F          	movff	indf2,??__doprnt
  4105  000DBA  0E02               	movlw	2
  4106  000DBC  26DE               	addwf	postinc2,f,c
  4107  000DBE  CFDF F090          	movff	indf2,??__doprnt+1
  4108  000DC2  0E00               	movlw	0
  4109  000DC4  22DD               	addwfc	postdec2,f,c
  4110  000DC6  C08F  FFD9         	movff	??__doprnt,fsr2l
  4111  000DCA  C090  FFDA         	movff	??__doprnt+1,fsr2h
  4112  000DCE  CFDE F094          	movff	postinc2,__doprnt@val
  4113  000DD2  CFDD F095          	movff	postdec2,__doprnt@val+1
  4114  000DD6  0E00               	movlw	0
  4115  000DD8  BF95               	btfsc	(__doprnt@val+1)& (0+255),7,b
  4116  000DDA  0EFF               	movlw	-1
  4117  000DDC  6F96               	movwf	(__doprnt@val+2)& (0+255),b
  4118  000DDE  6F97               	movwf	(__doprnt@val+3)& (0+255),b
  4119  000DE0                     l675:
  4120                           
  4121                           ; BSR set to: 0
  4122                           ;doprnt.c: 1261: if((long)val < 0) {
  4123                           
  4124                           ; BSR set to: 0
  4125  000DE0  AF97               	btfss	(__doprnt@val+3)& (0+255),7,b
  4126  000DE2  D00A               	goto	l676
  4127                           
  4128                           ; BSR set to: 0
  4129                           ;doprnt.c: 1262: flag |= 0x03;
  4130  000DE4  0E03               	movlw	3
  4131  000DE6  1393               	iorwf	__doprnt@flag& (0+255),f,b
  4132                           
  4133                           ; BSR set to: 0
  4134                           ;doprnt.c: 1263: val = -val;
  4135  000DE8  1F97               	comf	(__doprnt@val+3)& (0+255),f,b
  4136  000DEA  1F96               	comf	(__doprnt@val+2)& (0+255),f,b
  4137  000DEC  1F95               	comf	(__doprnt@val+1)& (0+255),f,b
  4138  000DEE  6D94               	negf	__doprnt@val& (0+255),b
  4139  000DF0  0E00               	movlw	0
  4140  000DF2  2395               	addwfc	(__doprnt@val+1)& (0+255),f,b
  4141  000DF4  2396               	addwfc	(__doprnt@val+2)& (0+255),f,b
  4142  000DF6  2397               	addwfc	(__doprnt@val+3)& (0+255),f,b
  4143  000DF8                     l676:
  4144                           
  4145                           ; BSR set to: 0
  4146                           ;doprnt.c: 1264: }
  4147                           ;doprnt.c: 1266: }
  4148                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4149                           
  4150                           ; BSR set to: 0
  4151  000DF8  0E01               	movlw	1
  4152  000DFA  6F9A               	movwf	__doprnt@c& (0+255),b
  4153  000DFC                     l4593:
  4154                           
  4155                           ; BSR set to: 0
  4156  000DFC  0E0A               	movlw	10
  4157  000DFE  199A               	xorwf	__doprnt@c& (0+255),w,b
  4158  000E00  B4D8               	btfsc	status,2,c
  4159  000E02  D01B               	goto	u5490
  4160                           
  4161                           ; BSR set to: 0
  4162                           ;doprnt.c: 1306: if(val < dpowers[c])
  4163                           
  4164                           ; BSR set to: 0
  4165                           
  4166                           ; BSR set to: 0
  4167  000E04  519A               	movf	__doprnt@c& (0+255),w,b
  4168  000E06  0D04               	mullw	4
  4169  000E08  0E31               	movlw	low _dpowers
  4170  000E0A  24F3               	addwf	prodl,w,c
  4171  000E0C  6EF6               	movwf	tblptrl,c
  4172  000E0E  0EFC               	movlw	high _dpowers
  4173  000E10  20F4               	addwfc	prodh,w,c
  4174  000E12  6EF7               	movwf	tblptrh,c
  4175  000E14                     	if	1	;There are 3 active tblptr bytes
  4176  000E14  6AF8               	clrf	tblptru,c
  4177  000E16  0E00               	movlw	low (__mediumconst shr (0+16))
  4178  000E18  22F8               	addwfc	tblptru,f,c
  4179  000E1A                     	endif
  4180  000E1A  0009               	tblrd		*+
  4181  000E1C  50F5               	movf	tablat,w,c
  4182  000E1E  5D94               	subwf	__doprnt@val& (0+255),w,b
  4183  000E20  0009               	tblrd		*+
  4184  000E22  50F5               	movf	tablat,w,c
  4185  000E24  5995               	subwfb	(__doprnt@val+1)& (0+255),w,b
  4186  000E26  0009               	tblrd		*+
  4187  000E28  50F5               	movf	tablat,w,c
  4188  000E2A  5996               	subwfb	(__doprnt@val+2)& (0+255),w,b
  4189  000E2C  0009               	tblrd		*+
  4190  000E2E  50F5               	movf	tablat,w,c
  4191  000E30  5997               	subwfb	(__doprnt@val+3)& (0+255),w,b
  4192  000E32  A0D8               	btfss	status,0,c
  4193  000E34  D002               	goto	u5490
  4194                           
  4195                           ; BSR set to: 0
  4196                           
  4197                           ; BSR set to: 0
  4198                           
  4199                           ; BSR set to: 0
  4200                           ;doprnt.c: 1307: break;
  4201  000E36  2B9A               	incf	__doprnt@c& (0+255),f,b
  4202  000E38  D7E1               	goto	l4593
  4203  000E3A                     u5490:
  4204                           
  4205                           ; BSR set to: 0
  4206                           ;doprnt.c: 1422: {
  4207                           ;doprnt.c: 1438: if(flag & 0x03)
  4208                           
  4209                           ; BSR set to: 0
  4210  000E3A  C093  F08F         	movff	__doprnt@flag,??__doprnt
  4211  000E3E  0E03               	movlw	3
  4212  000E40  178F               	andwf	??__doprnt& (0+255),f,b
  4213  000E42  B4D8               	btfsc	status,2,c
  4214  000E44  D035               	goto	l682
  4215                           
  4216                           ; BSR set to: 0
  4217                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  4218  000E46  EE20 F002          	lfsr	2,2
  4219  000E4A  5189               	movf	__doprnt@pb& (0+255),w,b
  4220  000E4C  26D9               	addwf	fsr2l,f,c
  4221  000E4E  518A               	movf	(__doprnt@pb+1)& (0+255),w,b
  4222  000E50  22DA               	addwfc	fsr2h,f,c
  4223  000E52  50DE               	movf	postinc2,w,c
  4224  000E54  10DE               	iorwf	postinc2,w,c
  4225  000E56  B4D8               	btfsc	status,2,c
  4226  000E58  D016               	goto	l681
  4227                           
  4228                           ; BSR set to: 0
  4229  000E5A  EE20 F002          	lfsr	2,2
  4230  000E5E  5189               	movf	__doprnt@pb& (0+255),w,b
  4231  000E60  26D9               	addwf	fsr2l,f,c
  4232  000E62  518A               	movf	(__doprnt@pb+1)& (0+255),w,b
  4233  000E64  22DA               	addwfc	fsr2h,f,c
  4234  000E66  CFDE F08F          	movff	postinc2,??__doprnt
  4235  000E6A  CFDD F090          	movff	postdec2,??__doprnt+1
  4236  000E6E  D801               	call	u5528
  4237  000E70  D01F               	goto	l682
  4238  000E72                     u5528:
  4239  000E72  0005               	push	
  4240  000E74  6EFA               	movwf	pclath,c
  4241  000E76  518F               	movf	??__doprnt& (0+255),w,b
  4242  000E78  6EFD               	movwf	tosl,c
  4243  000E7A  5190               	movf	(??__doprnt+1)& (0+255),w,b
  4244  000E7C  6EFE               	movwf	tosh,c
  4245  000E7E  6AFF               	clrf	tosu,c
  4246  000E80  50FA               	movf	pclath,w,c
  4247  000E82  0E2D               	movlw	45
  4248  000E84  0012               	return		;indir
  4249  000E86                     l681:
  4250  000E86  C089  FFD9         	movff	__doprnt@pb,fsr2l
  4251  000E8A  C08A  FFDA         	movff	__doprnt@pb+1,fsr2h
  4252  000E8E  CFDE F08F          	movff	postinc2,??__doprnt
  4253  000E92  CFDD F090          	movff	postdec2,??__doprnt+1
  4254  000E96  C08F  FFD9         	movff	??__doprnt,fsr2l
  4255  000E9A  C090  FFDA         	movff	??__doprnt+1,fsr2h
  4256  000E9E  0E2D               	movlw	45
  4257  000EA0  6EDF               	movwf	indf2,c
  4258  000EA2  C089  FFD9         	movff	__doprnt@pb,fsr2l
  4259  000EA6  C08A  FFDA         	movff	__doprnt@pb+1,fsr2h
  4260  000EAA  2ADE               	incf	postinc2,f,c
  4261  000EAC  0E00               	movlw	0
  4262  000EAE  22DD               	addwfc	postdec2,f,c
  4263  000EB0                     l682:
  4264                           
  4265                           ;doprnt.c: 1469: }
  4266                           ;doprnt.c: 1472: prec = c;
  4267  000EB0  0100               	movlb	0	; () banked
  4268  000EB2  519A               	movf	__doprnt@c& (0+255),w,b
  4269  000EB4  6F91               	movwf	__doprnt@prec& (0+255),b
  4270  000EB6  6B92               	clrf	(__doprnt@prec+1)& (0+255),b
  4271  000EB8  BF91               	btfsc	__doprnt@prec& (0+255),7,b
  4272  000EBA  0792               	decf	(__doprnt@prec+1)& (0+255),f,b
  4273                           
  4274                           ;doprnt.c: 1474: while(prec--) {
  4275  000EBC  D075               	goto	l686
  4276  000EBE                     l4617:
  4277                           
  4278                           ; BSR set to: 0
  4279                           ;doprnt.c: 1478: {
  4280                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4281  000EBE  C091  F08F         	movff	__doprnt@prec,??__doprnt
  4282  000EC2  C092  F090         	movff	__doprnt@prec+1,??__doprnt+1
  4283  000EC6  90D8               	bcf	status,0,c
  4284  000EC8  378F               	rlcf	??__doprnt& (0+255),f,b
  4285  000ECA  3790               	rlcf	(??__doprnt+1)& (0+255),f,b
  4286  000ECC  90D8               	bcf	status,0,c
  4287  000ECE  378F               	rlcf	??__doprnt& (0+255),f,b
  4288  000ED0  3790               	rlcf	(??__doprnt+1)& (0+255),f,b
  4289  000ED2  0E31               	movlw	low _dpowers
  4290  000ED4  258F               	addwf	??__doprnt& (0+255),w,b
  4291  000ED6  6EF6               	movwf	tblptrl,c
  4292  000ED8  0EFC               	movlw	high _dpowers
  4293  000EDA  2190               	addwfc	(??__doprnt+1)& (0+255),w,b
  4294  000EDC  6EF7               	movwf	tblptrh,c
  4295  000EDE                     	if	1	;There are 3 active tblptr bytes
  4296  000EDE  6AF8               	clrf	tblptru,c
  4297  000EE0  0E00               	movlw	low (__mediumconst shr (0+16))
  4298  000EE2  22F8               	addwfc	tblptru,f,c
  4299  000EE4                     	endif
  4300  000EE4  0009               	tblrd		*+
  4301  000EE6  CFF5 F02B          	movff	tablat,___lldiv@divisor
  4302  000EEA  0009               	tblrd		*+
  4303  000EEC  CFF5 F02C          	movff	tablat,___lldiv@divisor+1
  4304  000EF0  0009               	tblrd		*+
  4305  000EF2  CFF5 F02D          	movff	tablat,___lldiv@divisor+2
  4306  000EF6  000A               	tblrd		*-
  4307  000EF8  CFF5 F02E          	movff	tablat,___lldiv@divisor+3
  4308  000EFC  C094  F027         	movff	__doprnt@val,___lldiv@dividend
  4309  000F00  C095  F028         	movff	__doprnt@val+1,___lldiv@dividend+1
  4310  000F04  C096  F029         	movff	__doprnt@val+2,___lldiv@dividend+2
  4311  000F08  C097  F02A         	movff	__doprnt@val+3,___lldiv@dividend+3
  4312  000F0C  ECBC  F012         	call	___lldiv
  4313  000F10  C027  F080         	movff	?___lldiv,___llmod@dividend
  4314  000F14  C028  F081         	movff	?___lldiv+1,___llmod@dividend+1
  4315  000F18  C029  F082         	movff	?___lldiv+2,___llmod@dividend+2
  4316  000F1C  C02A  F083         	movff	?___lldiv+3,___llmod@dividend+3
  4317  000F20  0E0A               	movlw	10
  4318  000F22  0100               	movlb	0	; () banked
  4319  000F24  6F84               	movwf	___llmod@divisor& (0+255),b
  4320  000F26  0E00               	movlw	0
  4321  000F28  6F85               	movwf	(___llmod@divisor+1)& (0+255),b
  4322  000F2A  0E00               	movlw	0
  4323  000F2C  6F86               	movwf	(___llmod@divisor+2)& (0+255),b
  4324  000F2E  0E00               	movlw	0
  4325  000F30  6F87               	movwf	(___llmod@divisor+3)& (0+255),b
  4326  000F32  ECE9  F013         	call	___llmod	;wreg free
  4327  000F36  0100               	movlb	0	; () banked
  4328  000F38  5180               	movf	?___llmod& (0+255),w,b
  4329  000F3A  0F30               	addlw	48
  4330  000F3C  6F9A               	movwf	__doprnt@c& (0+255),b
  4331                           
  4332                           ; BSR set to: 0
  4333                           ;doprnt.c: 1523: }
  4334                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  4335  000F3E  EE20 F002          	lfsr	2,2
  4336  000F42  5189               	movf	__doprnt@pb& (0+255),w,b
  4337  000F44  26D9               	addwf	fsr2l,f,c
  4338  000F46  518A               	movf	(__doprnt@pb+1)& (0+255),w,b
  4339  000F48  22DA               	addwfc	fsr2h,f,c
  4340  000F4A  50DE               	movf	postinc2,w,c
  4341  000F4C  10DE               	iorwf	postinc2,w,c
  4342  000F4E  B4D8               	btfsc	status,2,c
  4343  000F50  D016               	goto	l685
  4344                           
  4345                           ; BSR set to: 0
  4346  000F52  EE20 F002          	lfsr	2,2
  4347  000F56  5189               	movf	__doprnt@pb& (0+255),w,b
  4348  000F58  26D9               	addwf	fsr2l,f,c
  4349  000F5A  518A               	movf	(__doprnt@pb+1)& (0+255),w,b
  4350  000F5C  22DA               	addwfc	fsr2h,f,c
  4351  000F5E  CFDE F08F          	movff	postinc2,??__doprnt
  4352  000F62  CFDD F090          	movff	postdec2,??__doprnt+1
  4353  000F66  D801               	call	u5548
  4354  000F68  D01F               	goto	l686
  4355  000F6A                     u5548:
  4356  000F6A  0005               	push	
  4357  000F6C  6EFA               	movwf	pclath,c
  4358  000F6E  518F               	movf	??__doprnt& (0+255),w,b
  4359  000F70  6EFD               	movwf	tosl,c
  4360  000F72  5190               	movf	(??__doprnt+1)& (0+255),w,b
  4361  000F74  6EFE               	movwf	tosh,c
  4362  000F76  6AFF               	clrf	tosu,c
  4363  000F78  50FA               	movf	pclath,w,c
  4364  000F7A  519A               	movf	__doprnt@c& (0+255),w,b
  4365  000F7C  0012               	return		;indir
  4366  000F7E                     l685:
  4367  000F7E  C089  FFD9         	movff	__doprnt@pb,fsr2l
  4368  000F82  C08A  FFDA         	movff	__doprnt@pb+1,fsr2h
  4369  000F86  CFDE F08F          	movff	postinc2,??__doprnt
  4370  000F8A  CFDD F090          	movff	postdec2,??__doprnt+1
  4371  000F8E  C08F  FFD9         	movff	??__doprnt,fsr2l
  4372  000F92  C090  FFDA         	movff	??__doprnt+1,fsr2h
  4373  000F96  C09A  FFDF         	movff	__doprnt@c,indf2
  4374  000F9A  C089  FFD9         	movff	__doprnt@pb,fsr2l
  4375  000F9E  C08A  FFDA         	movff	__doprnt@pb+1,fsr2h
  4376  000FA2  2ADE               	incf	postinc2,f,c
  4377  000FA4  0E00               	movlw	0
  4378  000FA6  22DD               	addwfc	postdec2,f,c
  4379  000FA8                     l686:
  4380  000FA8  0100               	movlb	0	; () banked
  4381  000FAA  0791               	decf	__doprnt@prec& (0+255),f,b
  4382  000FAC  A0D8               	btfss	status,0,c
  4383  000FAE  0792               	decf	(__doprnt@prec+1)& (0+255),f,b
  4384  000FB0  2991               	incf	__doprnt@prec& (0+255),w,b
  4385  000FB2  E185               	bnz	l4617
  4386  000FB4  2992               	incf	(__doprnt@prec+1)& (0+255),w,b
  4387  000FB6  A4D8               	btfss	status,2,c
  4388  000FB8  D782               	goto	l684
  4389  000FBA                     u5550:
  4390                           
  4391                           ; BSR set to: 0
  4392                           
  4393                           ; BSR set to: 0
  4394  000FBA  C08B  FFF6         	movff	__doprnt@f,tblptrl
  4395  000FBE  C08C  FFF7         	movff	__doprnt@f+1,tblptrh
  4396  000FC2  0100               	movlb	0	; () banked
  4397  000FC4  4B8B               	infsnz	__doprnt@f& (0+255),f,b
  4398  000FC6  2B8C               	incf	(__doprnt@f+1)& (0+255),f,b
  4399  000FC8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4400  000FC8  6AF8               	clrf	tblptru,c
  4401  000FCA                     	endif
  4402  000FCA                     	if	0	;tblptru may be non-zero
  4403  000FCA                     	endif
  4404  000FCA  0008               	tblrd		*
  4405  000FCC  CFF5 F09A          	movff	tablat,__doprnt@c
  4406  000FD0  519A               	movf	__doprnt@c& (0+255),w,b
  4407  000FD2  A4D8               	btfss	status,2,c
  4408  000FD4  D5E4               	goto	l654
  4409  000FD6                     u5560:
  4410                           
  4411                           ; BSR set to: 0
  4412                           ;doprnt.c: 1540: return 0;
  4413                           
  4414                           ; BSR set to: 0
  4415                           
  4416                           ;doprnt.c: 1525: }
  4417                           ;doprnt.c: 1533: }
  4418                           ;doprnt.c: 1535: alldone:
  4419                           
  4420                           ; BSR set to: 0
  4421  000FD6  0E00               	movlw	0
  4422  000FD8  6F8A               	movwf	(?__doprnt+1)& (0+255),b
  4423  000FDA  0E00               	movlw	0
  4424  000FDC  6F89               	movwf	?__doprnt& (0+255),b
  4425  000FDE  0012               	return	
  4426  000FE0                     __end_of__doprnt:
  4427                           	opt stack 0
  4428                           tosu	equ	0xFFF
  4429                           tosh	equ	0xFFE
  4430                           tosl	equ	0xFFD
  4431                           pclath	equ	0xFFA
  4432                           tblptru	equ	0xFF8
  4433                           tblptrh	equ	0xFF7
  4434                           tblptrl	equ	0xFF6
  4435                           tablat	equ	0xFF5
  4436                           prodh	equ	0xFF4
  4437                           prodl	equ	0xFF3
  4438                           indf0	equ	0xFEF
  4439                           postinc0	equ	0xFEE
  4440                           fsr0h	equ	0xFEA
  4441                           fsr0l	equ	0xFE9
  4442                           wreg	equ	0xFE8
  4443                           postdec1	equ	0xFE5
  4444                           plusw1	equ	0xFE3
  4445                           fsr1l	equ	0xFE1
  4446                           indf2	equ	0xFDF
  4447                           postinc2	equ	0xFDE
  4448                           postdec2	equ	0xFDD
  4449                           plusw2	equ	0xFDB
  4450                           fsr2h	equ	0xFDA
  4451                           fsr2l	equ	0xFD9
  4452                           status	equ	0xFD8
  4453                           
  4454 ;; *************** function ___llmod *****************
  4455 ;; Defined at:
  4456 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  4457 ;; Parameters:    Size  Location     Type
  4458 ;;  dividend        4    0[BANK0 ] unsigned long 
  4459 ;;  divisor         4    4[BANK0 ] unsigned long 
  4460 ;; Auto vars:     Size  Location     Type
  4461 ;;  counter         1    8[BANK0 ] unsigned char 
  4462 ;; Return value:  Size  Location     Type
  4463 ;;                  4    0[BANK0 ] unsigned long 
  4464 ;; Registers used:
  4465 ;;		wreg, status,2, status,0
  4466 ;; Tracked objects:
  4467 ;;		On entry : 0/0
  4468 ;;		On exit  : 0/0
  4469 ;;		Unchanged: 0/0
  4470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4471 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4472 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4474 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4475 ;;Total ram usage:        9 bytes
  4476 ;; Hardware stack levels used:    1
  4477 ;; Hardware stack levels required when called:    4
  4478 ;; This function calls:
  4479 ;;		Nothing
  4480 ;; This function is called by:
  4481 ;;		__doprnt
  4482 ;; This function uses a non-reentrant model
  4483 ;;
  4484                           
  4485                           	psect	text7
  4486  0027D2                     __ptext7:
  4487                           	opt stack 0
  4488  0027D2                     ___llmod:
  4489                           	opt stack 23
  4490                           
  4491                           ; BSR set to: 0
  4492                           ;incstack = 0
  4493  0027D2  0100               	movlb	0	; () banked
  4494  0027D4  5184               	movf	___llmod@divisor& (0+255),w,b
  4495  0027D6  1185               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  4496  0027D8  1186               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  4497  0027DA  1187               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  4498  0027DC  B4D8               	btfsc	status,2,c
  4499  0027DE  D024               	goto	l1055
  4500                           
  4501                           ; BSR set to: 0
  4502  0027E0  0E01               	movlw	1
  4503  0027E2  6F88               	movwf	___llmod@counter& (0+255),b
  4504  0027E4  D006               	goto	l1050
  4505  0027E6                     
  4506                           ; BSR set to: 0
  4507                           
  4508                           ; BSR set to: 0
  4509  0027E6  90D8               	bcf	status,0,c
  4510  0027E8  3784               	rlcf	___llmod@divisor& (0+255),f,b
  4511  0027EA  3785               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  4512  0027EC  3786               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  4513  0027EE  3787               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  4514  0027F0  2B88               	incf	___llmod@counter& (0+255),f,b
  4515  0027F2                     l1050:
  4516                           
  4517                           ; BSR set to: 0
  4518                           
  4519                           ; BSR set to: 0
  4520  0027F2  AF87               	btfss	(___llmod@divisor+3)& (0+255),7,b
  4521  0027F4  D7F8               	goto	l1051
  4522  0027F6                     u4910:
  4523                           
  4524                           ; BSR set to: 0
  4525                           
  4526                           ; BSR set to: 0
  4527                           
  4528                           ; BSR set to: 0
  4529  0027F6  5184               	movf	___llmod@divisor& (0+255),w,b
  4530  0027F8  5D80               	subwf	___llmod@dividend& (0+255),w,b
  4531  0027FA  5185               	movf	(___llmod@divisor+1)& (0+255),w,b
  4532  0027FC  5981               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  4533  0027FE  5186               	movf	(___llmod@divisor+2)& (0+255),w,b
  4534  002800  5982               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  4535  002802  5187               	movf	(___llmod@divisor+3)& (0+255),w,b
  4536  002804  5983               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  4537  002806  A0D8               	btfss	status,0,c
  4538  002808  D008               	goto	l1054
  4539                           
  4540                           ; BSR set to: 0
  4541  00280A  5184               	movf	___llmod@divisor& (0+255),w,b
  4542  00280C  5F80               	subwf	___llmod@dividend& (0+255),f,b
  4543  00280E  5185               	movf	(___llmod@divisor+1)& (0+255),w,b
  4544  002810  5B81               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  4545  002812  5186               	movf	(___llmod@divisor+2)& (0+255),w,b
  4546  002814  5B82               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  4547  002816  5187               	movf	(___llmod@divisor+3)& (0+255),w,b
  4548  002818  5B83               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  4549  00281A                     l1054:
  4550                           
  4551                           ; BSR set to: 0
  4552                           
  4553                           ; BSR set to: 0
  4554  00281A  90D8               	bcf	status,0,c
  4555  00281C  3387               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  4556  00281E  3386               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  4557  002820  3385               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  4558  002822  3384               	rrcf	___llmod@divisor& (0+255),f,b
  4559                           
  4560                           ; BSR set to: 0
  4561  002824  2F88               	decfsz	___llmod@counter& (0+255),f,b
  4562  002826  D7E7               	goto	u4910
  4563  002828                     l1055:
  4564                           
  4565                           ; BSR set to: 0
  4566                           
  4567                           ; BSR set to: 0
  4568  002828  C080  F080         	movff	___llmod@dividend,?___llmod
  4569  00282C  C081  F081         	movff	___llmod@dividend+1,?___llmod+1
  4570  002830  C082  F082         	movff	___llmod@dividend+2,?___llmod+2
  4571  002834  C083  F083         	movff	___llmod@dividend+3,?___llmod+3
  4572                           
  4573                           ; BSR set to: 0
  4574  002838  0012               	return		;funcret
  4575  00283A                     __end_of___llmod:
  4576                           	opt stack 0
  4577                           tosu	equ	0xFFF
  4578                           tosh	equ	0xFFE
  4579                           tosl	equ	0xFFD
  4580                           pclath	equ	0xFFA
  4581                           tblptru	equ	0xFF8
  4582                           tblptrh	equ	0xFF7
  4583                           tblptrl	equ	0xFF6
  4584                           tablat	equ	0xFF5
  4585                           prodh	equ	0xFF4
  4586                           prodl	equ	0xFF3
  4587                           indf0	equ	0xFEF
  4588                           postinc0	equ	0xFEE
  4589                           fsr0h	equ	0xFEA
  4590                           fsr0l	equ	0xFE9
  4591                           wreg	equ	0xFE8
  4592                           postdec1	equ	0xFE5
  4593                           plusw1	equ	0xFE3
  4594                           fsr1l	equ	0xFE1
  4595                           indf2	equ	0xFDF
  4596                           postinc2	equ	0xFDE
  4597                           postdec2	equ	0xFDD
  4598                           plusw2	equ	0xFDB
  4599                           fsr2h	equ	0xFDA
  4600                           fsr2l	equ	0xFD9
  4601                           status	equ	0xFD8
  4602                           
  4603 ;; *************** function _packageCompartment *****************
  4604 ;; Defined at:
  4605 ;;		line 25 in file "main.c"
  4606 ;; Parameters:    Size  Location     Type
  4607 ;;  b               1    wreg     unsigned char 
  4608 ;;  n               1   18[BANK0 ] unsigned char 
  4609 ;;  s               1   19[BANK0 ] unsigned char 
  4610 ;;  w               1   20[BANK0 ] unsigned char 
  4611 ;; Auto vars:     Size  Location     Type
  4612 ;;  b               1   24[BANK0 ] unsigned char 
  4613 ;;  currTime        3   53[BANK0 ] unsigned char 
  4614 ;;  timeW           3   34[BANK0 ] unsigned char 
  4615 ;;  timeS           3   31[BANK0 ] unsigned char 
  4616 ;;  timeN           3   28[BANK0 ] unsigned char 
  4617 ;;  timeB           3   25[BANK0 ] unsigned char 
  4618 ;;  doneW           2   51[BANK0 ] int 
  4619 ;;  doneS           2   49[BANK0 ] int 
  4620 ;;  doneN           2   47[BANK0 ] int 
  4621 ;;  doneB           2   45[BANK0 ] int 
  4622 ;;  numW            2   43[BANK0 ] int 
  4623 ;;  numS            2   41[BANK0 ] int 
  4624 ;;  numN            2   39[BANK0 ] int 
  4625 ;;  numB            2   37[BANK0 ] int 
  4626 ;; Return value:  Size  Location     Type
  4627 ;;                  1    wreg      void 
  4628 ;; Registers used:
  4629 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4630 ;; Tracked objects:
  4631 ;;		On entry : 0/0
  4632 ;;		On exit  : 0/0
  4633 ;;		Unchanged: 0/0
  4634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4635 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4636 ;;      Locals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4637 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4638 ;;      Totals:         0      38       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4639 ;;Total ram usage:       38 bytes
  4640 ;; Hardware stack levels used:    1
  4641 ;; Hardware stack levels required when called:    7
  4642 ;; This function calls:
  4643 ;;		_I2C_Send
  4644 ;;		___ftadd
  4645 ;;		___ftge
  4646 ;;		_motorControl
  4647 ;;		_tic
  4648 ;;		_tock
  4649 ;; This function is called by:
  4650 ;;		_packaging
  4651 ;; This function uses a non-reentrant model
  4652 ;;
  4653                           
  4654                           	psect	text8
  4655  000FE0                     __ptext8:
  4656                           	opt stack 0
  4657  000FE0                     _packageCompartment:
  4658                           	opt stack 21
  4659                           
  4660                           ; BSR set to: 0
  4661                           ;incstack = 0
  4662                           ;packageCompartment@b stored from wreg
  4663  000FE0  0100               	movlb	0	; () banked
  4664  000FE2  6F98               	movwf	packageCompartment@b& (0+255),b
  4665                           
  4666                           ;main.c: 26: TRISA = 0xFF;
  4667  000FE4  6892               	setf	3986,c	;volatile
  4668                           
  4669                           ;main.c: 29: motorControl(BOLT, FORWARD);
  4670  000FE6  0E00               	movlw	0
  4671  000FE8  6E27               	movwf	motorControl@dir,c
  4672  000FEA  0E00               	movlw	0
  4673  000FEC  EC3C  F010         	call	_motorControl
  4674                           
  4675                           ;main.c: 30: motorControl(NUT, FORWARD);
  4676  000FF0  0E00               	movlw	0
  4677  000FF2  6E27               	movwf	motorControl@dir,c
  4678  000FF4  0E01               	movlw	1
  4679  000FF6  EC3C  F010         	call	_motorControl
  4680                           
  4681                           ;main.c: 31: motorControl(SPACER, FORWARD);
  4682  000FFA  0E00               	movlw	0
  4683  000FFC  6E27               	movwf	motorControl@dir,c
  4684  000FFE  0E02               	movlw	2
  4685  001000  EC3C  F010         	call	_motorControl
  4686                           
  4687                           ;main.c: 32: motorControl(WASHER, FORWARD);
  4688  001004  0E00               	movlw	0
  4689  001006  6E27               	movwf	motorControl@dir,c
  4690  001008  0E03               	movlw	3
  4691  00100A  EC3C  F010         	call	_motorControl
  4692                           
  4693                           ;main.c: 34: int numB=0, numN=0, numS=0, numW=0;
  4694  00100E  0E00               	movlw	0
  4695  001010  0100               	movlb	0	; () banked
  4696  001012  6FA6               	movwf	(packageCompartment@numB+1)& (0+255),b
  4697  001014  0E00               	movlw	0
  4698  001016  6FA5               	movwf	packageCompartment@numB& (0+255),b
  4699                           
  4700                           ; BSR set to: 0
  4701  001018  0E00               	movlw	0
  4702  00101A  6FA8               	movwf	(packageCompartment@numN+1)& (0+255),b
  4703  00101C  0E00               	movlw	0
  4704  00101E  6FA7               	movwf	packageCompartment@numN& (0+255),b
  4705                           
  4706                           ; BSR set to: 0
  4707  001020  0E00               	movlw	0
  4708  001022  6FAA               	movwf	(packageCompartment@numS+1)& (0+255),b
  4709  001024  0E00               	movlw	0
  4710  001026  6FA9               	movwf	packageCompartment@numS& (0+255),b
  4711                           
  4712                           ; BSR set to: 0
  4713  001028  0E00               	movlw	0
  4714  00102A  6FAC               	movwf	(packageCompartment@numW+1)& (0+255),b
  4715  00102C  0E00               	movlw	0
  4716  00102E  6FAB               	movwf	packageCompartment@numW& (0+255),b
  4717                           
  4718                           ; BSR set to: 0
  4719                           ;main.c: 35: int doneB=0, doneN=0, doneS=0, doneW=0;
  4720  001030  0E00               	movlw	0
  4721  001032  6FAE               	movwf	(packageCompartment@doneB+1)& (0+255),b
  4722  001034  0E00               	movlw	0
  4723  001036  6FAD               	movwf	packageCompartment@doneB& (0+255),b
  4724                           
  4725                           ; BSR set to: 0
  4726  001038  0E00               	movlw	0
  4727  00103A  6FB0               	movwf	(packageCompartment@doneN+1)& (0+255),b
  4728  00103C  0E00               	movlw	0
  4729  00103E  6FAF               	movwf	packageCompartment@doneN& (0+255),b
  4730                           
  4731                           ; BSR set to: 0
  4732  001040  0E00               	movlw	0
  4733  001042  6FB2               	movwf	(packageCompartment@doneS+1)& (0+255),b
  4734  001044  0E00               	movlw	0
  4735  001046  6FB1               	movwf	packageCompartment@doneS& (0+255),b
  4736                           
  4737                           ; BSR set to: 0
  4738  001048  0E00               	movlw	0
  4739  00104A  6FB4               	movwf	(packageCompartment@doneW+1)& (0+255),b
  4740  00104C  0E00               	movlw	0
  4741  00104E  6FB3               	movwf	packageCompartment@doneW& (0+255),b
  4742                           
  4743                           ; BSR set to: 0
  4744                           ;main.c: 36: double currTime, timeB=0, timeN=0, timeS=0, timeW=0;
  4745  001050  0E00               	movlw	0
  4746  001052  6F99               	movwf	packageCompartment@timeB& (0+255),b
  4747  001054  0E00               	movlw	0
  4748  001056  6F9A               	movwf	(packageCompartment@timeB+1)& (0+255),b
  4749  001058  0E00               	movlw	0
  4750  00105A  6F9B               	movwf	(packageCompartment@timeB+2)& (0+255),b
  4751                           
  4752                           ; BSR set to: 0
  4753  00105C  0E00               	movlw	0
  4754  00105E  6F9C               	movwf	packageCompartment@timeN& (0+255),b
  4755  001060  0E00               	movlw	0
  4756  001062  6F9D               	movwf	(packageCompartment@timeN+1)& (0+255),b
  4757  001064  0E00               	movlw	0
  4758  001066  6F9E               	movwf	(packageCompartment@timeN+2)& (0+255),b
  4759                           
  4760                           ; BSR set to: 0
  4761  001068  0E00               	movlw	0
  4762  00106A  6F9F               	movwf	packageCompartment@timeS& (0+255),b
  4763  00106C  0E00               	movlw	0
  4764  00106E  6FA0               	movwf	(packageCompartment@timeS+1)& (0+255),b
  4765  001070  0E00               	movlw	0
  4766  001072  6FA1               	movwf	(packageCompartment@timeS+2)& (0+255),b
  4767                           
  4768                           ; BSR set to: 0
  4769  001074  0E00               	movlw	0
  4770  001076  6FA2               	movwf	packageCompartment@timeW& (0+255),b
  4771  001078  0E00               	movlw	0
  4772  00107A  6FA3               	movwf	(packageCompartment@timeW+1)& (0+255),b
  4773  00107C  0E00               	movlw	0
  4774  00107E  6FA4               	movwf	(packageCompartment@timeW+2)& (0+255),b
  4775                           
  4776                           ; BSR set to: 0
  4777                           ;main.c: 38: tic();
  4778  001080  EC01  F016         	call	_tic	;wreg free
  4779  001084                     
  4780                           ;main.c: 40: currTime = tock();
  4781  001084  EC13  F016         	call	_tock	;wreg free
  4782  001088  C027  F0B5         	movff	?_tock,packageCompartment@currTime
  4783  00108C  C028  F0B6         	movff	?_tock+1,packageCompartment@currTime+1
  4784  001090  C029  F0B7         	movff	?_tock+2,packageCompartment@currTime+2
  4785                           
  4786                           ;main.c: 52: if (PORTAbits.RA0 == 0 && currTime > timeB + 2) {
  4787  001094  B080               	btfsc	3968,0,c	;volatile
  4788  001096  D038               	goto	l96
  4789  001098  0E00               	movlw	0
  4790  00109A  0100               	movlb	0	; () banked
  4791  00109C  6F83               	movwf	___ftadd@f2& (0+255),b
  4792  00109E  0E00               	movlw	0
  4793  0010A0  6F84               	movwf	(___ftadd@f2+1)& (0+255),b
  4794  0010A2  0E40               	movlw	64
  4795  0010A4  6F85               	movwf	(___ftadd@f2+2)& (0+255),b
  4796  0010A6  C099  F080         	movff	packageCompartment@timeB,___ftadd@f1
  4797  0010AA  C09A  F081         	movff	packageCompartment@timeB+1,___ftadd@f1+1
  4798  0010AE  C09B  F082         	movff	packageCompartment@timeB+2,___ftadd@f1+2
  4799  0010B2  EC8F  F00E         	call	___ftadd	;wreg free
  4800  0010B6  C080  F089         	movff	?___ftadd,___ftge@ff1
  4801  0010BA  C081  F08A         	movff	?___ftadd+1,___ftge@ff1+1
  4802  0010BE  C082  F08B         	movff	?___ftadd+2,___ftge@ff1+2
  4803  0010C2  C0B5  F08C         	movff	packageCompartment@currTime,___ftge@ff2
  4804  0010C6  C0B6  F08D         	movff	packageCompartment@currTime+1,___ftge@ff2+1
  4805  0010CA  C0B7  F08E         	movff	packageCompartment@currTime+2,___ftge@ff2+2
  4806  0010CE  ECE9  F011         	call	___ftge	;wreg free
  4807  0010D2  0100               	movlb	0	; () banked
  4808  0010D4  B0D8               	btfsc	status,0,c
  4809  0010D6  D018               	goto	l96
  4810                           
  4811                           ; BSR set to: 0
  4812                           ;main.c: 53: timeB = currTime;
  4813  0010D8  C0B5  F099         	movff	packageCompartment@currTime,packageCompartment@timeB
  4814  0010DC  C0B6  F09A         	movff	packageCompartment@currTime+1,packageCompartment@timeB+1
  4815  0010E0  C0B7  F09B         	movff	packageCompartment@currTime+2,packageCompartment@timeB+2
  4816                           
  4817                           ; BSR set to: 0
  4818                           ;main.c: 54: numB++;
  4819  0010E4  4BA5               	infsnz	packageCompartment@numB& (0+255),f,b
  4820  0010E6  2BA6               	incf	(packageCompartment@numB+1)& (0+255),f,b
  4821                           
  4822                           ;main.c: 55: dispensed.b++;
  4823  0010E8  4A34               	infsnz	_dispensed,f,c
  4824  0010EA  2A35               	incf	_dispensed+1,f,c
  4825                           
  4826                           ; BSR set to: 0
  4827                           ;main.c: 56: I2C_Send(nanoAddr, "\1Bolt Counted\0");
  4828  0010EC  0E77               	movlw	low STR_1
  4829  0010EE  6E2A               	movwf	I2C_Send@data,c
  4830  0010F0  0EFF               	movlw	high STR_1
  4831  0010F2  6E2B               	movwf	I2C_Send@data+1,c
  4832  0010F4  0E7F               	movlw	low _nanoAddr
  4833  0010F6  6EF6               	movwf	tblptrl,c
  4834  0010F8                     	if	1	;There is more than 1 active tblptr byte
  4835  0010F8  0EFC               	movlw	high _nanoAddr
  4836  0010FA  6EF7               	movwf	tblptrh,c
  4837  0010FC                     	endif
  4838  0010FC                     	if	1	;There are 3 active tblptr bytes
  4839  0010FC  0E00               	movlw	low (_nanoAddr shr (0+16))
  4840  0010FE  6EF8               	movwf	tblptru,c
  4841  001100                     	endif
  4842  001100  0008               	tblrd		*
  4843  001102  50F5               	movf	tablat,w,c
  4844  001104  EC32  F012         	call	_I2C_Send
  4845  001108                     l96:
  4846                           
  4847                           ;main.c: 57: }
  4848                           ;main.c: 60: if (PORTAbits.RA1 == 0 && currTime > timeN + 2) {
  4849  001108  B280               	btfsc	3968,1,c	;volatile
  4850  00110A  D038               	goto	l97
  4851  00110C  0E00               	movlw	0
  4852  00110E  0100               	movlb	0	; () banked
  4853  001110  6F83               	movwf	___ftadd@f2& (0+255),b
  4854  001112  0E00               	movlw	0
  4855  001114  6F84               	movwf	(___ftadd@f2+1)& (0+255),b
  4856  001116  0E40               	movlw	64
  4857  001118  6F85               	movwf	(___ftadd@f2+2)& (0+255),b
  4858  00111A  C09C  F080         	movff	packageCompartment@timeN,___ftadd@f1
  4859  00111E  C09D  F081         	movff	packageCompartment@timeN+1,___ftadd@f1+1
  4860  001122  C09E  F082         	movff	packageCompartment@timeN+2,___ftadd@f1+2
  4861  001126  EC8F  F00E         	call	___ftadd	;wreg free
  4862  00112A  C080  F089         	movff	?___ftadd,___ftge@ff1
  4863  00112E  C081  F08A         	movff	?___ftadd+1,___ftge@ff1+1
  4864  001132  C082  F08B         	movff	?___ftadd+2,___ftge@ff1+2
  4865  001136  C0B5  F08C         	movff	packageCompartment@currTime,___ftge@ff2
  4866  00113A  C0B6  F08D         	movff	packageCompartment@currTime+1,___ftge@ff2+1
  4867  00113E  C0B7  F08E         	movff	packageCompartment@currTime+2,___ftge@ff2+2
  4868  001142  ECE9  F011         	call	___ftge	;wreg free
  4869  001146  0100               	movlb	0	; () banked
  4870  001148  B0D8               	btfsc	status,0,c
  4871  00114A  D018               	goto	l97
  4872                           
  4873                           ; BSR set to: 0
  4874                           ;main.c: 61: timeN = currTime;
  4875  00114C  C0B5  F09C         	movff	packageCompartment@currTime,packageCompartment@timeN
  4876  001150  C0B6  F09D         	movff	packageCompartment@currTime+1,packageCompartment@timeN+1
  4877  001154  C0B7  F09E         	movff	packageCompartment@currTime+2,packageCompartment@timeN+2
  4878                           
  4879                           ; BSR set to: 0
  4880                           ;main.c: 62: numN++;
  4881  001158  4BA7               	infsnz	packageCompartment@numN& (0+255),f,b
  4882  00115A  2BA8               	incf	(packageCompartment@numN+1)& (0+255),f,b
  4883                           
  4884                           ;main.c: 63: dispensed.n++;
  4885  00115C  4A36               	infsnz	_dispensed+2,f,c
  4886  00115E  2A37               	incf	_dispensed+3,f,c
  4887                           
  4888                           ; BSR set to: 0
  4889                           ;main.c: 64: I2C_Send(nanoAddr, "\1Nut Counted\0");
  4890  001160  0EB2               	movlw	low STR_2
  4891  001162  6E2A               	movwf	I2C_Send@data,c
  4892  001164  0EFF               	movlw	high STR_2
  4893  001166  6E2B               	movwf	I2C_Send@data+1,c
  4894  001168  0E7F               	movlw	low _nanoAddr
  4895  00116A  6EF6               	movwf	tblptrl,c
  4896  00116C                     	if	1	;There is more than 1 active tblptr byte
  4897  00116C  0EFC               	movlw	high _nanoAddr
  4898  00116E  6EF7               	movwf	tblptrh,c
  4899  001170                     	endif
  4900  001170                     	if	1	;There are 3 active tblptr bytes
  4901  001170  0E00               	movlw	low (_nanoAddr shr (0+16))
  4902  001172  6EF8               	movwf	tblptru,c
  4903  001174                     	endif
  4904  001174  0008               	tblrd		*
  4905  001176  50F5               	movf	tablat,w,c
  4906  001178  EC32  F012         	call	_I2C_Send
  4907  00117C                     l97:
  4908                           
  4909                           ;main.c: 65: }
  4910                           ;main.c: 68: if (PORTAbits.RA2 == 0 && currTime > timeS + 2) {
  4911  00117C  B480               	btfsc	3968,2,c	;volatile
  4912  00117E  D038               	goto	l98
  4913  001180  0E00               	movlw	0
  4914  001182  0100               	movlb	0	; () banked
  4915  001184  6F83               	movwf	___ftadd@f2& (0+255),b
  4916  001186  0E00               	movlw	0
  4917  001188  6F84               	movwf	(___ftadd@f2+1)& (0+255),b
  4918  00118A  0E40               	movlw	64
  4919  00118C  6F85               	movwf	(___ftadd@f2+2)& (0+255),b
  4920  00118E  C09F  F080         	movff	packageCompartment@timeS,___ftadd@f1
  4921  001192  C0A0  F081         	movff	packageCompartment@timeS+1,___ftadd@f1+1
  4922  001196  C0A1  F082         	movff	packageCompartment@timeS+2,___ftadd@f1+2
  4923  00119A  EC8F  F00E         	call	___ftadd	;wreg free
  4924  00119E  C080  F089         	movff	?___ftadd,___ftge@ff1
  4925  0011A2  C081  F08A         	movff	?___ftadd+1,___ftge@ff1+1
  4926  0011A6  C082  F08B         	movff	?___ftadd+2,___ftge@ff1+2
  4927  0011AA  C0B5  F08C         	movff	packageCompartment@currTime,___ftge@ff2
  4928  0011AE  C0B6  F08D         	movff	packageCompartment@currTime+1,___ftge@ff2+1
  4929  0011B2  C0B7  F08E         	movff	packageCompartment@currTime+2,___ftge@ff2+2
  4930  0011B6  ECE9  F011         	call	___ftge	;wreg free
  4931  0011BA  0100               	movlb	0	; () banked
  4932  0011BC  B0D8               	btfsc	status,0,c
  4933  0011BE  D018               	goto	l98
  4934                           
  4935                           ; BSR set to: 0
  4936                           ;main.c: 69: timeS = currTime;
  4937  0011C0  C0B5  F09F         	movff	packageCompartment@currTime,packageCompartment@timeS
  4938  0011C4  C0B6  F0A0         	movff	packageCompartment@currTime+1,packageCompartment@timeS+1
  4939  0011C8  C0B7  F0A1         	movff	packageCompartment@currTime+2,packageCompartment@timeS+2
  4940                           
  4941                           ; BSR set to: 0
  4942                           ;main.c: 70: numS++;
  4943  0011CC  4BA9               	infsnz	packageCompartment@numS& (0+255),f,b
  4944  0011CE  2BAA               	incf	(packageCompartment@numS+1)& (0+255),f,b
  4945                           
  4946                           ;main.c: 71: dispensed.s++;
  4947  0011D0  4A38               	infsnz	_dispensed+4,f,c
  4948  0011D2  2A39               	incf	_dispensed+5,f,c
  4949                           
  4950                           ; BSR set to: 0
  4951                           ;main.c: 72: I2C_Send(nanoAddr, "\1Spacer Counted\0");
  4952  0011D4  0E23               	movlw	low STR_3
  4953  0011D6  6E2A               	movwf	I2C_Send@data,c
  4954  0011D8  0EFF               	movlw	high STR_3
  4955  0011DA  6E2B               	movwf	I2C_Send@data+1,c
  4956  0011DC  0E7F               	movlw	low _nanoAddr
  4957  0011DE  6EF6               	movwf	tblptrl,c
  4958  0011E0                     	if	1	;There is more than 1 active tblptr byte
  4959  0011E0  0EFC               	movlw	high _nanoAddr
  4960  0011E2  6EF7               	movwf	tblptrh,c
  4961  0011E4                     	endif
  4962  0011E4                     	if	1	;There are 3 active tblptr bytes
  4963  0011E4  0E00               	movlw	low (_nanoAddr shr (0+16))
  4964  0011E6  6EF8               	movwf	tblptru,c
  4965  0011E8                     	endif
  4966  0011E8  0008               	tblrd		*
  4967  0011EA  50F5               	movf	tablat,w,c
  4968  0011EC  EC32  F012         	call	_I2C_Send
  4969  0011F0                     l98:
  4970                           
  4971                           ;main.c: 73: }
  4972                           ;main.c: 76: if (PORTAbits.RA3 == 0 && currTime > timeW + 2) {
  4973  0011F0  B680               	btfsc	3968,3,c	;volatile
  4974  0011F2  D038               	goto	l99
  4975  0011F4  0E00               	movlw	0
  4976  0011F6  0100               	movlb	0	; () banked
  4977  0011F8  6F83               	movwf	___ftadd@f2& (0+255),b
  4978  0011FA  0E00               	movlw	0
  4979  0011FC  6F84               	movwf	(___ftadd@f2+1)& (0+255),b
  4980  0011FE  0E40               	movlw	64
  4981  001200  6F85               	movwf	(___ftadd@f2+2)& (0+255),b
  4982  001202  C0A2  F080         	movff	packageCompartment@timeW,___ftadd@f1
  4983  001206  C0A3  F081         	movff	packageCompartment@timeW+1,___ftadd@f1+1
  4984  00120A  C0A4  F082         	movff	packageCompartment@timeW+2,___ftadd@f1+2
  4985  00120E  EC8F  F00E         	call	___ftadd	;wreg free
  4986  001212  C080  F089         	movff	?___ftadd,___ftge@ff1
  4987  001216  C081  F08A         	movff	?___ftadd+1,___ftge@ff1+1
  4988  00121A  C082  F08B         	movff	?___ftadd+2,___ftge@ff1+2
  4989  00121E  C0B5  F08C         	movff	packageCompartment@currTime,___ftge@ff2
  4990  001222  C0B6  F08D         	movff	packageCompartment@currTime+1,___ftge@ff2+1
  4991  001226  C0B7  F08E         	movff	packageCompartment@currTime+2,___ftge@ff2+2
  4992  00122A  ECE9  F011         	call	___ftge	;wreg free
  4993  00122E  0100               	movlb	0	; () banked
  4994  001230  B0D8               	btfsc	status,0,c
  4995  001232  D018               	goto	l99
  4996                           
  4997                           ; BSR set to: 0
  4998                           ;main.c: 77: timeW = currTime;
  4999  001234  C0B5  F0A2         	movff	packageCompartment@currTime,packageCompartment@timeW
  5000  001238  C0B6  F0A3         	movff	packageCompartment@currTime+1,packageCompartment@timeW+1
  5001  00123C  C0B7  F0A4         	movff	packageCompartment@currTime+2,packageCompartment@timeW+2
  5002                           
  5003                           ; BSR set to: 0
  5004                           ;main.c: 78: numW++;
  5005  001240  4BAB               	infsnz	packageCompartment@numW& (0+255),f,b
  5006  001242  2BAC               	incf	(packageCompartment@numW+1)& (0+255),f,b
  5007                           
  5008                           ;main.c: 79: dispensed.w++;
  5009  001244  4A3A               	infsnz	_dispensed+6,f,c
  5010  001246  2A3B               	incf	_dispensed+7,f,c
  5011                           
  5012                           ; BSR set to: 0
  5013                           ;main.c: 80: I2C_Send(nanoAddr, "\1Washer Counted\0");
  5014  001248  0E34               	movlw	low STR_4
  5015  00124A  6E2A               	movwf	I2C_Send@data,c
  5016  00124C  0EFF               	movlw	high STR_4
  5017  00124E  6E2B               	movwf	I2C_Send@data+1,c
  5018  001250  0E7F               	movlw	low _nanoAddr
  5019  001252  6EF6               	movwf	tblptrl,c
  5020  001254                     	if	1	;There is more than 1 active tblptr byte
  5021  001254  0EFC               	movlw	high _nanoAddr
  5022  001256  6EF7               	movwf	tblptrh,c
  5023  001258                     	endif
  5024  001258                     	if	1	;There are 3 active tblptr bytes
  5025  001258  0E00               	movlw	low (_nanoAddr shr (0+16))
  5026  00125A  6EF8               	movwf	tblptru,c
  5027  00125C                     	endif
  5028  00125C  0008               	tblrd		*
  5029  00125E  50F5               	movf	tablat,w,c
  5030  001260  EC32  F012         	call	_I2C_Send
  5031  001264                     l99:
  5032                           
  5033                           ;main.c: 81: }
  5034                           ;main.c: 84: if (numB >= b) {
  5035  001264  0100               	movlb	0	; () banked
  5036  001266  5198               	movf	packageCompartment@b& (0+255),w,b
  5037  001268  6F95               	movwf	??_packageCompartment& (0+255),b
  5038  00126A  6B96               	clrf	(??_packageCompartment+1)& (0+255),b
  5039  00126C  5195               	movf	??_packageCompartment& (0+255),w,b
  5040  00126E  5DA5               	subwf	packageCompartment@numB& (0+255),w,b
  5041  001270  51A6               	movf	(packageCompartment@numB+1)& (0+255),w,b
  5042  001272  0A80               	xorlw	128
  5043  001274  6F97               	movwf	(??_packageCompartment+2)& (0+255),b
  5044  001276  5196               	movf	(??_packageCompartment+1)& (0+255),w,b
  5045  001278  0A80               	xorlw	128
  5046  00127A  5997               	subwfb	(??_packageCompartment+2)& (0+255),w,b
  5047  00127C  A0D8               	btfss	status,0,c
  5048  00127E  D00A               	goto	l100
  5049                           
  5050                           ; BSR set to: 0
  5051                           ;main.c: 85: motorControl(BOLT, STOPMOTOR);
  5052  001280  0E02               	movlw	2
  5053  001282  6E27               	movwf	motorControl@dir,c
  5054  001284  0E00               	movlw	0
  5055  001286  EC3C  F010         	call	_motorControl
  5056                           
  5057                           ;main.c: 86: doneB=1;
  5058  00128A  0E00               	movlw	0
  5059  00128C  0100               	movlb	0	; () banked
  5060  00128E  6FAE               	movwf	(packageCompartment@doneB+1)& (0+255),b
  5061  001290  0E01               	movlw	1
  5062  001292  6FAD               	movwf	packageCompartment@doneB& (0+255),b
  5063  001294                     l100:
  5064                           
  5065                           ; BSR set to: 0
  5066                           ;main.c: 87: }
  5067                           ;main.c: 88: if (numN >= n) {
  5068                           
  5069                           ; BSR set to: 0
  5070  001294  5192               	movf	packageCompartment@n& (0+255),w,b
  5071  001296  6F95               	movwf	??_packageCompartment& (0+255),b
  5072  001298  6B96               	clrf	(??_packageCompartment+1)& (0+255),b
  5073  00129A  5195               	movf	??_packageCompartment& (0+255),w,b
  5074  00129C  5DA7               	subwf	packageCompartment@numN& (0+255),w,b
  5075  00129E  51A8               	movf	(packageCompartment@numN+1)& (0+255),w,b
  5076  0012A0  0A80               	xorlw	128
  5077  0012A2  6F97               	movwf	(??_packageCompartment+2)& (0+255),b
  5078  0012A4  5196               	movf	(??_packageCompartment+1)& (0+255),w,b
  5079  0012A6  0A80               	xorlw	128
  5080  0012A8  5997               	subwfb	(??_packageCompartment+2)& (0+255),w,b
  5081  0012AA  A0D8               	btfss	status,0,c
  5082  0012AC  D00A               	goto	l101
  5083                           
  5084                           ; BSR set to: 0
  5085                           ;main.c: 89: motorControl(NUT, STOPMOTOR);
  5086  0012AE  0E02               	movlw	2
  5087  0012B0  6E27               	movwf	motorControl@dir,c
  5088  0012B2  0E01               	movlw	1
  5089  0012B4  EC3C  F010         	call	_motorControl
  5090                           
  5091                           ;main.c: 90: doneN=1;
  5092  0012B8  0E00               	movlw	0
  5093  0012BA  0100               	movlb	0	; () banked
  5094  0012BC  6FB0               	movwf	(packageCompartment@doneN+1)& (0+255),b
  5095  0012BE  0E01               	movlw	1
  5096  0012C0  6FAF               	movwf	packageCompartment@doneN& (0+255),b
  5097  0012C2                     l101:
  5098                           
  5099                           ; BSR set to: 0
  5100                           ;main.c: 91: }
  5101                           ;main.c: 92: if (numS >= s) {
  5102                           
  5103                           ; BSR set to: 0
  5104  0012C2  5193               	movf	packageCompartment@s& (0+255),w,b
  5105  0012C4  6F95               	movwf	??_packageCompartment& (0+255),b
  5106  0012C6  6B96               	clrf	(??_packageCompartment+1)& (0+255),b
  5107  0012C8  5195               	movf	??_packageCompartment& (0+255),w,b
  5108  0012CA  5DA9               	subwf	packageCompartment@numS& (0+255),w,b
  5109  0012CC  51AA               	movf	(packageCompartment@numS+1)& (0+255),w,b
  5110  0012CE  0A80               	xorlw	128
  5111  0012D0  6F97               	movwf	(??_packageCompartment+2)& (0+255),b
  5112  0012D2  5196               	movf	(??_packageCompartment+1)& (0+255),w,b
  5113  0012D4  0A80               	xorlw	128
  5114  0012D6  5997               	subwfb	(??_packageCompartment+2)& (0+255),w,b
  5115  0012D8  A0D8               	btfss	status,0,c
  5116  0012DA  D00A               	goto	l102
  5117                           
  5118                           ; BSR set to: 0
  5119                           ;main.c: 93: motorControl(SPACER, STOPMOTOR);
  5120  0012DC  0E02               	movlw	2
  5121  0012DE  6E27               	movwf	motorControl@dir,c
  5122  0012E0  0E02               	movlw	2
  5123  0012E2  EC3C  F010         	call	_motorControl
  5124                           
  5125                           ;main.c: 94: doneS=1;
  5126  0012E6  0E00               	movlw	0
  5127  0012E8  0100               	movlb	0	; () banked
  5128  0012EA  6FB2               	movwf	(packageCompartment@doneS+1)& (0+255),b
  5129  0012EC  0E01               	movlw	1
  5130  0012EE  6FB1               	movwf	packageCompartment@doneS& (0+255),b
  5131  0012F0                     l102:
  5132                           
  5133                           ; BSR set to: 0
  5134                           ;main.c: 95: }
  5135                           ;main.c: 96: if (numW >= w) {
  5136                           
  5137                           ; BSR set to: 0
  5138  0012F0  5194               	movf	packageCompartment@w& (0+255),w,b
  5139  0012F2  6F95               	movwf	??_packageCompartment& (0+255),b
  5140  0012F4  6B96               	clrf	(??_packageCompartment+1)& (0+255),b
  5141  0012F6  5195               	movf	??_packageCompartment& (0+255),w,b
  5142  0012F8  5DAB               	subwf	packageCompartment@numW& (0+255),w,b
  5143  0012FA  51AC               	movf	(packageCompartment@numW+1)& (0+255),w,b
  5144  0012FC  0A80               	xorlw	128
  5145  0012FE  6F97               	movwf	(??_packageCompartment+2)& (0+255),b
  5146  001300  5196               	movf	(??_packageCompartment+1)& (0+255),w,b
  5147  001302  0A80               	xorlw	128
  5148  001304  5997               	subwfb	(??_packageCompartment+2)& (0+255),w,b
  5149  001306  A0D8               	btfss	status,0,c
  5150  001308  D00A               	goto	l103
  5151                           
  5152                           ; BSR set to: 0
  5153                           ;main.c: 97: motorControl(WASHER, STOPMOTOR);
  5154  00130A  0E02               	movlw	2
  5155  00130C  6E27               	movwf	motorControl@dir,c
  5156  00130E  0E03               	movlw	3
  5157  001310  EC3C  F010         	call	_motorControl
  5158                           
  5159                           ;main.c: 98: doneW=1;
  5160  001314  0E00               	movlw	0
  5161  001316  0100               	movlb	0	; () banked
  5162  001318  6FB4               	movwf	(packageCompartment@doneW+1)& (0+255),b
  5163  00131A  0E01               	movlw	1
  5164  00131C  6FB3               	movwf	packageCompartment@doneW& (0+255),b
  5165  00131E                     l103:
  5166                           
  5167                           ; BSR set to: 0
  5168                           ;main.c: 99: }
  5169                           ;main.c: 101: if (doneB && doneN && doneS && doneW) {
  5170                           
  5171                           ; BSR set to: 0
  5172  00131E  51AD               	movf	packageCompartment@doneB& (0+255),w,b
  5173  001320  11AE               	iorwf	(packageCompartment@doneB+1)& (0+255),w,b
  5174  001322  B4D8               	btfsc	status,2,c
  5175  001324  D6AF               	goto	l95
  5176                           
  5177                           ; BSR set to: 0
  5178  001326  51AF               	movf	packageCompartment@doneN& (0+255),w,b
  5179  001328  11B0               	iorwf	(packageCompartment@doneN+1)& (0+255),w,b
  5180  00132A  B4D8               	btfsc	status,2,c
  5181  00132C  D6AB               	goto	l95
  5182                           
  5183                           ; BSR set to: 0
  5184  00132E  51B1               	movf	packageCompartment@doneS& (0+255),w,b
  5185  001330  11B2               	iorwf	(packageCompartment@doneS+1)& (0+255),w,b
  5186  001332  B4D8               	btfsc	status,2,c
  5187  001334  D6A7               	goto	l95
  5188                           
  5189                           ; BSR set to: 0
  5190  001336  51B3               	movf	packageCompartment@doneW& (0+255),w,b
  5191  001338  11B4               	iorwf	(packageCompartment@doneW+1)& (0+255),w,b
  5192  00133A  B4D8               	btfsc	status,2,c
  5193  00133C  D6A3               	goto	l95
  5194                           
  5195                           ; BSR set to: 0
  5196                           ;main.c: 102: I2C_Send(nanoAddr, "\1Done compartment\0");
  5197  00133E  0EEE               	movlw	low STR_5
  5198  001340  6E2A               	movwf	I2C_Send@data,c
  5199  001342  0EFE               	movlw	high STR_5
  5200  001344  6E2B               	movwf	I2C_Send@data+1,c
  5201  001346  0E7F               	movlw	low _nanoAddr
  5202  001348  6EF6               	movwf	tblptrl,c
  5203  00134A                     	if	1	;There is more than 1 active tblptr byte
  5204  00134A  0EFC               	movlw	high _nanoAddr
  5205  00134C  6EF7               	movwf	tblptrh,c
  5206  00134E                     	endif
  5207  00134E                     	if	1	;There are 3 active tblptr bytes
  5208  00134E  0E00               	movlw	low (_nanoAddr shr (0+16))
  5209  001350  6EF8               	movwf	tblptru,c
  5210  001352                     	endif
  5211  001352  0008               	tblrd		*
  5212  001354  50F5               	movf	tablat,w,c
  5213  001356  EC32  F012         	call	_I2C_Send
  5214                           
  5215                           ;main.c: 104: }
  5216                           ;main.c: 105: }
  5217                           ;main.c: 108: I2C_Send(nanoAddr, 2);
  5218                           
  5219                           ;main.c: 103: break;
  5220  00135A  0E02               	movlw	2
  5221  00135C  6E2A               	movwf	I2C_Send@data,c
  5222  00135E  0E00               	movlw	0
  5223  001360  6E2B               	movwf	I2C_Send@data+1,c
  5224  001362  0E7F               	movlw	low _nanoAddr
  5225  001364  6EF6               	movwf	tblptrl,c
  5226  001366                     	if	1	;There is more than 1 active tblptr byte
  5227  001366  0EFC               	movlw	high _nanoAddr
  5228  001368  6EF7               	movwf	tblptrh,c
  5229  00136A                     	endif
  5230  00136A                     	if	1	;There are 3 active tblptr bytes
  5231  00136A  0E00               	movlw	low (_nanoAddr shr (0+16))
  5232  00136C  6EF8               	movwf	tblptru,c
  5233  00136E                     	endif
  5234  00136E  0008               	tblrd		*
  5235  001370  50F5               	movf	tablat,w,c
  5236  001372  EC32  F012         	call	_I2C_Send
  5237                           
  5238                           ;main.c: 109: _delay((unsigned long)((5000)*(40000000/4000.0)));
  5239  001376  0EFE               	movlw	254
  5240  001378  0100               	movlb	0	; () banked
  5241  00137A  6F96               	movwf	(??_packageCompartment+1)& (0+255),b
  5242  00137C  0EA7               	movlw	167
  5243  00137E  6F95               	movwf	??_packageCompartment& (0+255),b
  5244  001380  0E65               	movlw	101
  5245  001382                     u6947:
  5246  001382  2EE8               	decfsz	wreg,f,c
  5247  001384  D7FE               	bra	u6947
  5248  001386  2F95               	decfsz	??_packageCompartment& (0+255),f,b
  5249  001388  D7FC               	bra	u6947
  5250  00138A  2F96               	decfsz	(??_packageCompartment+1)& (0+255),f,b
  5251  00138C  D7FA               	bra	u6947
  5252  00138E  D000               	nop2	
  5253  001390  0012               	return		;funcret
  5254  001392                     __end_of_packageCompartment:
  5255                           	opt stack 0
  5256                           tosu	equ	0xFFF
  5257                           tosh	equ	0xFFE
  5258                           tosl	equ	0xFFD
  5259                           pclath	equ	0xFFA
  5260                           tblptru	equ	0xFF8
  5261                           tblptrh	equ	0xFF7
  5262                           tblptrl	equ	0xFF6
  5263                           tablat	equ	0xFF5
  5264                           prodh	equ	0xFF4
  5265                           prodl	equ	0xFF3
  5266                           indf0	equ	0xFEF
  5267                           postinc0	equ	0xFEE
  5268                           fsr0h	equ	0xFEA
  5269                           fsr0l	equ	0xFE9
  5270                           wreg	equ	0xFE8
  5271                           postdec1	equ	0xFE5
  5272                           plusw1	equ	0xFE3
  5273                           fsr1l	equ	0xFE1
  5274                           indf2	equ	0xFDF
  5275                           postinc2	equ	0xFDE
  5276                           postdec2	equ	0xFDD
  5277                           plusw2	equ	0xFDB
  5278                           fsr2h	equ	0xFDA
  5279                           fsr2l	equ	0xFD9
  5280                           status	equ	0xFD8
  5281                           
  5282 ;; *************** function _inputEntry *****************
  5283 ;; Defined at:
  5284 ;;		line 30 in file "menu.c"
  5285 ;; Parameters:    Size  Location     Type
  5286 ;;		None
  5287 ;; Auto vars:     Size  Location     Type
  5288 ;;  sum             2   85[BANK0 ] int 
  5289 ;;  fastenerStri   32   40[BANK0 ] unsigned char [32]
  5290 ;;  msg            24   16[BANK0 ] unsigned char [24]
  5291 ;;  compartments    1   74[BANK0 ] unsigned char 
  5292 ;;  i               2  101[BANK0 ] int 
  5293 ;;  compartmentN    2   99[BANK0 ] int 
  5294 ;;  numPressed      2   97[BANK0 ] int 
  5295 ;;  inputEntrySt    2   95[BANK0 ] int 
  5296 ;;  numW            2   93[BANK0 ] int 
  5297 ;;  numS            2   91[BANK0 ] int 
  5298 ;;  numN            2   89[BANK0 ] int 
  5299 ;;  numB            2   87[BANK0 ] int 
  5300 ;;  doneCompartm    2   83[BANK0 ] int 
  5301 ;;  doneMultiple    2   81[BANK0 ] int 
  5302 ;;  setIsGood       2   79[BANK0 ] int 
  5303 ;;  found           2   77[BANK0 ] int 
  5304 ;;  done            2   75[BANK0 ] int 
  5305 ;;  compartmentL    2   72[BANK0 ] unsigned char [2]
  5306 ;;  numFasteners    2    0        int 
  5307 ;;  pressed         1  103[BANK0 ] unsigned char 
  5308 ;; Return value:  Size  Location     Type
  5309 ;;                  1    wreg      void 
  5310 ;; Registers used:
  5311 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5312 ;; Tracked objects:
  5313 ;;		On entry : 0/0
  5314 ;;		On exit  : 0/0
  5315 ;;		Unchanged: 0/0
  5316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5318 ;;      Locals:         0      88       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5319 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5320 ;;      Totals:         0      92       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5321 ;;Total ram usage:       92 bytes
  5322 ;; Hardware stack levels used:    1
  5323 ;; Hardware stack levels required when called:    8
  5324 ;; This function calls:
  5325 ;;		_I2C_Send
  5326 ;;		___wmul
  5327 ;;		_lcdInst
  5328 ;;		_lcd_set_cursor
  5329 ;;		_pollKeypad
  5330 ;;		_printErrorLCD
  5331 ;;		_printStringLCD
  5332 ;;		_putch
  5333 ;;		_strcpy
  5334 ;; This function is called by:
  5335 ;;		_mainMenu
  5336 ;; This function uses a non-reentrant model
  5337 ;;
  5338                           
  5339                           	psect	text9
  5340  000012                     __ptext9:
  5341                           	opt stack 0
  5342  000012                     _inputEntry:
  5343                           	opt stack 21
  5344                           
  5345                           ;menu.c: 31: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5346                           
  5347                           ;incstack = 0
  5348  000012  0E01               	movlw	1
  5349  000014  ECF7  F015         	call	_lcdInst
  5350  000018  0EC3               	movlw	195
  5351  00001A  0100               	movlb	0	; () banked
  5352  00001C  6F8C               	movwf	??_inputEntry& (0+255),b
  5353  00001E  0ECD               	movlw	205
  5354  000020                     u6957:
  5355  000020  2EE8               	decfsz	wreg,f,c
  5356  000022  D7FE               	bra	u6957
  5357  000024  2F8C               	decfsz	??_inputEntry& (0+255),f,b
  5358  000026  D7FC               	bra	u6957
  5359                           
  5360                           ;menu.c: 32: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  5361  000028  0E80               	movlw	128
  5362  00002A  ECF7  F015         	call	_lcdInst
  5363  00002E  0E41               	movlw	65
  5364  000030  0100               	movlb	0	; () banked
  5365  000032  6F8C               	movwf	??_inputEntry& (0+255),b
  5366  000034  0EEE               	movlw	238
  5367  000036                     u6967:
  5368  000036  2EE8               	decfsz	wreg,f,c
  5369  000038  D7FE               	bra	u6967
  5370  00003A  2F8C               	decfsz	??_inputEntry& (0+255),f,b
  5371  00003C  D7FC               	bra	u6967
  5372  00003E  F000               	nop	
  5373                           
  5374                           ;menu.c: 34: I2C_Send(nanoAddr, "Started input entry, hi\0");
  5375  000040  0E97               	movlw	low STR_15
  5376  000042  6E2A               	movwf	I2C_Send@data,c
  5377  000044  0EFE               	movlw	high STR_15
  5378  000046  6E2B               	movwf	I2C_Send@data+1,c
  5379  000048  0E7F               	movlw	low _nanoAddr
  5380  00004A  6EF6               	movwf	tblptrl,c
  5381  00004C                     	if	1	;There is more than 1 active tblptr byte
  5382  00004C  0EFC               	movlw	high _nanoAddr
  5383  00004E  6EF7               	movwf	tblptrh,c
  5384  000050                     	endif
  5385  000050                     	if	1	;There are 3 active tblptr bytes
  5386  000050  0E00               	movlw	low (_nanoAddr shr (0+16))
  5387  000052  6EF8               	movwf	tblptru,c
  5388  000054                     	endif
  5389  000054  0008               	tblrd		*
  5390  000056  50F5               	movf	tablat,w,c
  5391  000058  EC32  F012         	call	_I2C_Send
  5392                           
  5393                           ;menu.c: 36: int compartmentNum = 0;
  5394  00005C  0E00               	movlw	0
  5395  00005E  0100               	movlb	0	; () banked
  5396  000060  6FE4               	movwf	(inputEntry@compartmentNum+1)& (0+255),b
  5397  000062  0E00               	movlw	0
  5398  000064  6FE3               	movwf	inputEntry@compartmentNum& (0+255),b
  5399                           
  5400                           ; BSR set to: 0
  5401                           ;menu.c: 37: char compartmentLabel[2] = "C0";
  5402  000066  C055  F0C8         	movff	inputEntry@F3177,inputEntry@compartmentLabel
  5403  00006A  C056  F0C9         	movff	inputEntry@F3177+1,inputEntry@compartmentLabel+1
  5404                           
  5405                           ; BSR set to: 0
  5406                           ;menu.c: 38: int inputEntryStep = 0;
  5407  00006E  0E00               	movlw	0
  5408  000070  6FE0               	movwf	(inputEntry@inputEntryStep+1)& (0+255),b
  5409  000072  0E00               	movlw	0
  5410  000074  6FDF               	movwf	inputEntry@inputEntryStep& (0+255),b
  5411                           
  5412                           ; BSR set to: 0
  5413                           ;menu.c: 39: int done = 0;
  5414  000076  0E00               	movlw	0
  5415  000078  6FCC               	movwf	(inputEntry@done+1)& (0+255),b
  5416  00007A  0E00               	movlw	0
  5417  00007C  6FCB               	movwf	inputEntry@done& (0+255),b
  5418                           
  5419                           ;menu.c: 41: int i, numPressed, doneCompartment, numB, numN, numS, numW, found, numFaste
      +                          ners;
  5420                           ;menu.c: 42: int setIsGood, doneMultiples;
  5421                           ;menu.c: 43: unsigned char pressed;
  5422                           ;menu.c: 45: while (!done) {
  5423  00007E  D33C               	goto	l336
  5424  000080                     
  5425                           ; BSR set to: 0
  5426                           ;menu.c: 47: if (inputEntryStep == 0) {
  5427                           
  5428                           ; BSR set to: 0
  5429  000080  51DF               	movf	inputEntry@inputEntryStep& (0+255),w,b
  5430  000082  11E0               	iorwf	(inputEntry@inputEntryStep+1)& (0+255),w,b
  5431  000084  A4D8               	btfss	status,2,c
  5432  000086  D04B               	goto	l332
  5433                           
  5434                           ; BSR set to: 0
  5435                           ;menu.c: 48: printStringLCD(inputEntryQuestions[inputEntryStep]);
  5436  000088  C0DF  F027         	movff	inputEntry@inputEntryStep,___wmul@multiplier
  5437  00008C  C0E0  F028         	movff	inputEntry@inputEntryStep+1,___wmul@multiplier+1
  5438  000090  0E00               	movlw	0
  5439  000092  6E2A               	movwf	___wmul@multiplicand+1,c
  5440  000094  0E21               	movlw	33
  5441  000096  6E29               	movwf	___wmul@multiplicand,c
  5442  000098  EC9E  F015         	call	___wmul	;wreg free
  5443  00009C  0E66               	movlw	low _inputEntryQuestions
  5444  00009E  2427               	addwf	?___wmul,w,c
  5445  0000A0  6E2D               	movwf	printStringLCD@string,c
  5446  0000A2  0EFD               	movlw	high _inputEntryQuestions
  5447  0000A4  2028               	addwfc	?___wmul+1,w,c
  5448  0000A6  6E2E               	movwf	printStringLCD@string+1,c
  5449  0000A8  EC2D  F00D         	call	_printStringLCD	;wreg free
  5450                           
  5451                           ;menu.c: 50: pressed = pollKeypad();
  5452  0000AC  EC61  F015         	call	_pollKeypad	;wreg free
  5453  0000B0  0100               	movlb	0	; () banked
  5454  0000B2  6FE7               	movwf	inputEntry@pressed& (0+255),b
  5455                           
  5456                           ; BSR set to: 0
  5457                           ;menu.c: 51: numPressed = pressed - 48;
  5458  0000B4  0ED0               	movlw	208
  5459  0000B6  25E7               	addwf	inputEntry@pressed& (0+255),w,b
  5460  0000B8  6FE1               	movwf	inputEntry@numPressed& (0+255),b
  5461  0000BA  6BE2               	clrf	(inputEntry@numPressed+1)& (0+255),b
  5462  0000BC  0EFF               	movlw	255
  5463  0000BE  23E2               	addwfc	(inputEntry@numPressed+1)& (0+255),f,b
  5464                           
  5465                           ; BSR set to: 0
  5466                           ;menu.c: 53: putch(pressed);
  5467  0000C0  51E7               	movf	inputEntry@pressed& (0+255),w,b
  5468  0000C2  ECED  F015         	call	_putch
  5469                           
  5470                           ;menu.c: 54: _delay((unsigned long)((500)*(40000000/4000.0)));
  5471  0000C6  0E1A               	movlw	26
  5472  0000C8  0100               	movlb	0	; () banked
  5473  0000CA  6F8D               	movwf	(??_inputEntry+1)& (0+255),b
  5474  0000CC  0E5E               	movlw	94
  5475  0000CE  6F8C               	movwf	??_inputEntry& (0+255),b
  5476  0000D0  0E6E               	movlw	110
  5477  0000D2                     u6977:
  5478  0000D2  2EE8               	decfsz	wreg,f,c
  5479  0000D4  D7FE               	bra	u6977
  5480  0000D6  2F8C               	decfsz	??_inputEntry& (0+255),f,b
  5481  0000D8  D7FC               	bra	u6977
  5482  0000DA  2F8D               	decfsz	(??_inputEntry+1)& (0+255),f,b
  5483  0000DC  D7FA               	bra	u6977
  5484  0000DE  F000               	nop	
  5485                           
  5486                           ;menu.c: 56: if (numPressed >= 4 && numPressed <= 8) {
  5487  0000E0  0100               	movlb	0	; () banked
  5488  0000E2  BFE2               	btfsc	(inputEntry@numPressed+1)& (0+255),7,b
  5489  0000E4  D015               	goto	l333
  5490  0000E6  51E2               	movf	(inputEntry@numPressed+1)& (0+255),w,b
  5491  0000E8  E104               	bnz	u6240
  5492  0000EA  0E04               	movlw	4
  5493  0000EC  5DE1               	subwf	inputEntry@numPressed& (0+255),w,b
  5494  0000EE  A0D8               	btfss	status,0,c
  5495  0000F0  D00F               	goto	l333
  5496  0000F2                     u6240:
  5497                           
  5498                           ; BSR set to: 0
  5499  0000F2  BFE2               	btfsc	(inputEntry@numPressed+1)& (0+255),7,b
  5500  0000F4  D006               	goto	u6250
  5501  0000F6  51E2               	movf	(inputEntry@numPressed+1)& (0+255),w,b
  5502  0000F8  E10B               	bnz	l5115
  5503  0000FA  0E09               	movlw	9
  5504  0000FC  5DE1               	subwf	inputEntry@numPressed& (0+255),w,b
  5505  0000FE  B0D8               	btfsc	status,0,c
  5506  000100  D007               	goto	l333
  5507  000102                     u6250:
  5508                           
  5509                           ; BSR set to: 0
  5510                           ;menu.c: 57: params.steps = numPressed;
  5511  000102  C0E1  F1A3         	movff	inputEntry@numPressed,_params
  5512  000106  C0E2  F1A4         	movff	inputEntry@numPressed+1,_params+1
  5513                           
  5514                           ; BSR set to: 0
  5515                           ;menu.c: 58: inputEntryStep++;
  5516  00010A  4BDF               	infsnz	inputEntry@inputEntryStep& (0+255),f,b
  5517  00010C  2BE0               	incf	(inputEntry@inputEntryStep+1)& (0+255),f,b
  5518                           
  5519                           ;menu.c: 59: } else printErrorLCD(errMsgs.badEntry);
  5520  00010E  D2F4               	goto	l336
  5521  000110                     l333:
  5522  000110                     l5115:
  5523                           
  5524                           ; BSR set to: 0
  5525  000110  0E86               	movlw	low _errMsgs
  5526  000112  6E32               	movwf	printErrorLCD@string,c
  5527  000114  0EFC               	movlw	high _errMsgs
  5528  000116  6E33               	movwf	printErrorLCD@string+1,c
  5529  000118  EC8B  F015         	call	_printErrorLCD	;wreg free
  5530                           
  5531                           ;menu.c: 60: } else if (inputEntryStep == 1) {
  5532  00011C  D2ED               	goto	l336
  5533  00011E                     l332:
  5534  00011E  0100               	movlb	0	; () banked
  5535  000120  05DF               	decf	inputEntry@inputEntryStep& (0+255),w,b
  5536  000122  11E0               	iorwf	(inputEntry@inputEntryStep+1)& (0+255),w,b
  5537  000124  A4D8               	btfss	status,2,c
  5538  000126  D2E8               	goto	l336
  5539                           
  5540                           ; BSR set to: 0
  5541                           ;menu.c: 62: char compartmentsToFill = assemblyStepEncoding[params.steps - 4];
  5542  000128  0EFC               	movlw	252
  5543  00012A  6F8C               	movwf	??_inputEntry& (0+255),b
  5544  00012C  0EFF               	movlw	255
  5545  00012E  6F8D               	movwf	(??_inputEntry+1)& (0+255),b
  5546  000130  C1A3  F08E         	movff	_params,??_inputEntry+2
  5547  000134  C1A4  F08F         	movff	_params+1,??_inputEntry+3
  5548  000138  518C               	movf	??_inputEntry& (0+255),w,b
  5549  00013A  278E               	addwf	(??_inputEntry+2)& (0+255),f,b
  5550  00013C  518D               	movf	(??_inputEntry+1)& (0+255),w,b
  5551  00013E  238F               	addwfc	(??_inputEntry+3)& (0+255),f,b
  5552  000140  0E7A               	movlw	low _assemblyStepEncoding
  5553  000142  258E               	addwf	(??_inputEntry+2)& (0+255),w,b
  5554  000144  6EF6               	movwf	tblptrl,c
  5555  000146  0EFC               	movlw	high _assemblyStepEncoding
  5556  000148  218F               	addwfc	(??_inputEntry+3)& (0+255),w,b
  5557  00014A  6EF7               	movwf	tblptrh,c
  5558  00014C                     	if	1	;There are 3 active tblptr bytes
  5559  00014C  6AF8               	clrf	tblptru,c
  5560  00014E  0E00               	movlw	low (__mediumconst shr (0+16))
  5561  000150  22F8               	addwfc	tblptru,f,c
  5562  000152                     	endif
  5563  000152  0008               	tblrd		*
  5564  000154  CFF5 F0CA          	movff	tablat,inputEntry@compartmentsToFill
  5565                           
  5566                           ; BSR set to: 0
  5567                           ;menu.c: 63: for (compartmentNum = 0; compartmentNum < 8; compartmentNum++) {
  5568  000158  0E00               	movlw	0
  5569  00015A  6FE4               	movwf	(inputEntry@compartmentNum+1)& (0+255),b
  5570  00015C  0E00               	movlw	0
  5571  00015E  6FE3               	movwf	inputEntry@compartmentNum& (0+255),b
  5572                           
  5573                           ; BSR set to: 0
  5574  000160  BFE4               	btfsc	(inputEntry@compartmentNum+1)& (0+255),7,b
  5575  000162  D008               	goto	l337
  5576  000164  51E4               	movf	(inputEntry@compartmentNum+1)& (0+255),w,b
  5577  000166  E105               	bnz	u6270
  5578  000168  0E08               	movlw	8
  5579  00016A  5DE3               	subwf	inputEntry@compartmentNum& (0+255),w,b
  5580  00016C  B0D8               	btfsc	status,0,c
  5581  00016E  D2B2               	goto	u6640
  5582  000170  D001               	goto	l337
  5583  000172                     u6270:
  5584                           
  5585                           ; BSR set to: 0
  5586  000172  D2B0               	goto	u6640
  5587  000174                     l337:
  5588                           
  5589                           ; BSR set to: 0
  5590                           ;menu.c: 65: if ((compartmentsToFill >> compartmentNum) & 0b1) {
  5591                           
  5592                           ; BSR set to: 0
  5593                           
  5594                           ;menu.c: 64: STARTCOMPARTMENT:
  5595                           
  5596                           ; BSR set to: 0
  5597  000174  C0E3  F08C         	movff	inputEntry@compartmentNum,??_inputEntry
  5598  000178  C0CA  F08D         	movff	inputEntry@compartmentsToFill,??_inputEntry+1
  5599  00017C  2B8C               	incf	??_inputEntry& (0+255),f,b
  5600  00017E  D002               	goto	u6284
  5601  000180                     u6285:
  5602  000180  90D8               	bcf	status,0,c
  5603  000182  338D               	rrcf	(??_inputEntry+1)& (0+255),f,b
  5604  000184                     u6284:
  5605  000184  2F8C               	decfsz	??_inputEntry& (0+255),f,b
  5606  000186  D7FC               	goto	u6285
  5607  000188  0100               	movlb	0	; () banked
  5608  00018A  A18D               	btfss	(??_inputEntry+1)& (0+255),0,b
  5609  00018C  D284               	goto	l340
  5610                           
  5611                           ; BSR set to: 0
  5612                           ;menu.c: 66: char msg[] = "\1Started compartment x\0";
  5613  00018E  EE21  F022         	lfsr	2,inputEntry@F3198
  5614  000192  EE10  F090         	lfsr	1,inputEntry@msg
  5615  000196  0E17               	movlw	23
  5616  000198                     u6301:
  5617  000198  CFDB FFE3          	movff	plusw2,plusw1
  5618  00019C  06E8               	decf	wreg,f,c
  5619  00019E  E2FC               	bc	u6301
  5620                           
  5621                           ; BSR set to: 0
  5622                           ;menu.c: 67: msg[21] = compartmentNum + 1 + 48;
  5623  0001A0  51E3               	movf	inputEntry@compartmentNum& (0+255),w,b
  5624  0001A2  0F31               	addlw	49
  5625  0001A4  6FA5               	movwf	(inputEntry@msg+21)& (0+255),b
  5626                           
  5627                           ; BSR set to: 0
  5628                           ;menu.c: 68: I2C_Send(nanoAddr, msg);
  5629  0001A6  0E90               	movlw	low inputEntry@msg
  5630  0001A8  6E2A               	movwf	I2C_Send@data,c
  5631  0001AA  0E00               	movlw	high inputEntry@msg
  5632  0001AC  6E2B               	movwf	I2C_Send@data+1,c
  5633  0001AE  0E7F               	movlw	low _nanoAddr
  5634  0001B0  6EF6               	movwf	tblptrl,c
  5635  0001B2                     	if	1	;There is more than 1 active tblptr byte
  5636  0001B2  0EFC               	movlw	high _nanoAddr
  5637  0001B4  6EF7               	movwf	tblptrh,c
  5638  0001B6                     	endif
  5639  0001B6                     	if	1	;There are 3 active tblptr bytes
  5640  0001B6  0E00               	movlw	low (_nanoAddr shr (0+16))
  5641  0001B8  6EF8               	movwf	tblptru,c
  5642  0001BA                     	endif
  5643  0001BA  0008               	tblrd		*
  5644  0001BC  50F5               	movf	tablat,w,c
  5645  0001BE  EC32  F012         	call	_I2C_Send
  5646                           
  5647                           ;menu.c: 70: setIsGood = 0;
  5648  0001C2  0E00               	movlw	0
  5649  0001C4  0100               	movlb	0	; () banked
  5650  0001C6  6FD0               	movwf	(inputEntry@setIsGood+1)& (0+255),b
  5651  0001C8  0E00               	movlw	0
  5652  0001CA  D151               	goto	L3
  5653  0001CC                     
  5654                           ; BSR set to: 0
  5655                           ;menu.c: 72: numB = 0;
  5656                           
  5657                           ; BSR set to: 0
  5658  0001CC  0E00               	movlw	0
  5659  0001CE  6FD8               	movwf	(inputEntry@numB+1)& (0+255),b
  5660  0001D0  0E00               	movlw	0
  5661  0001D2  6FD7               	movwf	inputEntry@numB& (0+255),b
  5662                           
  5663                           ;menu.c: 73: numN = 0;
  5664  0001D4  0E00               	movlw	0
  5665  0001D6  6FDA               	movwf	(inputEntry@numN+1)& (0+255),b
  5666  0001D8  0E00               	movlw	0
  5667  0001DA  6FD9               	movwf	inputEntry@numN& (0+255),b
  5668                           
  5669                           ;menu.c: 74: numS = 0;
  5670  0001DC  0E00               	movlw	0
  5671  0001DE  6FDC               	movwf	(inputEntry@numS+1)& (0+255),b
  5672  0001E0  0E00               	movlw	0
  5673  0001E2  6FDB               	movwf	inputEntry@numS& (0+255),b
  5674                           
  5675                           ;menu.c: 75: numW = 0;
  5676  0001E4  0E00               	movlw	0
  5677  0001E6  6FDE               	movwf	(inputEntry@numW+1)& (0+255),b
  5678  0001E8  0E00               	movlw	0
  5679  0001EA  6FDD               	movwf	inputEntry@numW& (0+255),b
  5680                           
  5681                           ; BSR set to: 0
  5682                           ;menu.c: 76: char fastenerString[32];
  5683                           ;menu.c: 77: strcpy(fastenerString, inputEntryQuestions[inputEntryStep]);
  5684  0001EC  0EA8               	movlw	low inputEntry@fastenerString
  5685  0001EE  6E2D               	movwf	strcpy@to,c
  5686  0001F0  0E00               	movlw	high inputEntry@fastenerString
  5687  0001F2  6E2E               	movwf	strcpy@to+1,c
  5688  0001F4  C0DF  F027         	movff	inputEntry@inputEntryStep,___wmul@multiplier
  5689  0001F8  C0E0  F028         	movff	inputEntry@inputEntryStep+1,___wmul@multiplier+1
  5690  0001FC  0E00               	movlw	0
  5691  0001FE  6E2A               	movwf	___wmul@multiplicand+1,c
  5692  000200  0E21               	movlw	33
  5693  000202  6E29               	movwf	___wmul@multiplicand,c
  5694  000204  EC9E  F015         	call	___wmul	;wreg free
  5695  000208  0E66               	movlw	low _inputEntryQuestions
  5696  00020A  2427               	addwf	?___wmul,w,c
  5697  00020C  6E2F               	movwf	strcpy@from,c
  5698  00020E  0EFD               	movlw	high _inputEntryQuestions
  5699  000210  2028               	addwfc	?___wmul+1,w,c
  5700  000212  6E30               	movwf	strcpy@from+1,c
  5701  000214  EC48  F015         	call	_strcpy	;wreg free
  5702                           
  5703                           ;menu.c: 78: fastenerString[14] = compartmentNum + 1 + 48;
  5704  000218  0100               	movlb	0	; () banked
  5705  00021A  51E3               	movf	inputEntry@compartmentNum& (0+255),w,b
  5706  00021C  0F31               	addlw	49
  5707  00021E  6FB6               	movwf	(inputEntry@fastenerString+14)& (0+255),b
  5708                           
  5709                           ; BSR set to: 0
  5710                           ;menu.c: 80: printStringLCD(fastenerString);
  5711  000220  0EA8               	movlw	low inputEntry@fastenerString
  5712  000222  6E2D               	movwf	printStringLCD@string,c
  5713  000224  0E00               	movlw	high inputEntry@fastenerString
  5714  000226  6E2E               	movwf	printStringLCD@string+1,c
  5715  000228  EC2D  F00D         	call	_printStringLCD	;wreg free
  5716                           
  5717                           ;menu.c: 81: lcd_set_cursor(9, 1);
  5718  00022C  0E01               	movlw	1
  5719  00022E  6E2D               	movwf	lcd_set_cursor@y,c
  5720  000230  0E09               	movlw	9
  5721  000232  ECEE  F014         	call	_lcd_set_cursor
  5722                           
  5723                           ;menu.c: 82: doneCompartment = 0;
  5724  000236  0E00               	movlw	0
  5725  000238  0100               	movlb	0	; () banked
  5726  00023A  6FD4               	movwf	(inputEntry@doneCompartment+1)& (0+255),b
  5727  00023C  0E00               	movlw	0
  5728  00023E  D04D               	goto	L4
  5729  000240                     
  5730                           ; BSR set to: 0
  5731                           ;menu.c: 85: pressed = pollKeypad();
  5732                           
  5733                           ; BSR set to: 0
  5734  000240  EC61  F015         	call	_pollKeypad	;wreg free
  5735  000244  0100               	movlb	0	; () banked
  5736  000246  6FE7               	movwf	inputEntry@pressed& (0+255),b
  5737                           
  5738                           ; BSR set to: 0
  5739                           ;menu.c: 86: if (pressed == 66 || pressed == 78 || pressed == 83 || pressed == 87) {
  5740  000248  0E42               	movlw	66
  5741  00024A  19E7               	xorwf	inputEntry@pressed& (0+255),w,b
  5742  00024C  B4D8               	btfsc	status,2,c
  5743  00024E  D00C               	goto	u6340
  5744                           
  5745                           ; BSR set to: 0
  5746  000250  0E4E               	movlw	78
  5747  000252  19E7               	xorwf	inputEntry@pressed& (0+255),w,b
  5748  000254  B4D8               	btfsc	status,2,c
  5749  000256  D008               	goto	u6340
  5750                           
  5751                           ; BSR set to: 0
  5752  000258  0E53               	movlw	83
  5753  00025A  19E7               	xorwf	inputEntry@pressed& (0+255),w,b
  5754  00025C  B4D8               	btfsc	status,2,c
  5755  00025E  D004               	goto	u6340
  5756                           
  5757                           ; BSR set to: 0
  5758  000260  0E57               	movlw	87
  5759  000262  19E7               	xorwf	inputEntry@pressed& (0+255),w,b
  5760  000264  A4D8               	btfss	status,2,c
  5761  000266  D022               	goto	l347
  5762  000268                     u6340:
  5763                           
  5764                           ; BSR set to: 0
  5765                           ;menu.c: 87: putch(pressed);
  5766                           
  5767                           ; BSR set to: 0
  5768  000268  51E7               	movf	inputEntry@pressed& (0+255),w,b
  5769  00026A  ECED  F015         	call	_putch
  5770                           
  5771                           ;menu.c: 88: if (pressed == 66) numB++;
  5772  00026E  0E42               	movlw	66
  5773  000270  0100               	movlb	0	; () banked
  5774  000272  19E7               	xorwf	inputEntry@pressed& (0+255),w,b
  5775  000274  A4D8               	btfss	status,2,c
  5776  000276  D003               	goto	l350
  5777                           
  5778                           ; BSR set to: 0
  5779  000278  4BD7               	infsnz	inputEntry@numB& (0+255),f,b
  5780  00027A  2BD8               	incf	(inputEntry@numB+1)& (0+255),f,b
  5781  00027C  D014               	goto	l356
  5782  00027E                     l350:
  5783                           
  5784                           ; BSR set to: 0
  5785                           ;menu.c: 89: else if (pressed == 78) numN++;
  5786                           
  5787                           ; BSR set to: 0
  5788  00027E  0E4E               	movlw	78
  5789  000280  19E7               	xorwf	inputEntry@pressed& (0+255),w,b
  5790  000282  A4D8               	btfss	status,2,c
  5791  000284  D003               	goto	l352
  5792                           
  5793                           ; BSR set to: 0
  5794  000286  4BD9               	infsnz	inputEntry@numN& (0+255),f,b
  5795  000288  2BDA               	incf	(inputEntry@numN+1)& (0+255),f,b
  5796  00028A  D00D               	goto	l356
  5797  00028C                     l352:
  5798                           
  5799                           ; BSR set to: 0
  5800                           ;menu.c: 90: else if (pressed == 83) numS ++;
  5801                           
  5802                           ; BSR set to: 0
  5803  00028C  0E53               	movlw	83
  5804  00028E  19E7               	xorwf	inputEntry@pressed& (0+255),w,b
  5805  000290  A4D8               	btfss	status,2,c
  5806  000292  D003               	goto	l354
  5807                           
  5808                           ; BSR set to: 0
  5809  000294  4BDB               	infsnz	inputEntry@numS& (0+255),f,b
  5810  000296  2BDC               	incf	(inputEntry@numS+1)& (0+255),f,b
  5811  000298  D006               	goto	l356
  5812  00029A                     l354:
  5813                           
  5814                           ; BSR set to: 0
  5815                           ;menu.c: 91: else if (pressed == 87) numW++;
  5816                           
  5817                           ; BSR set to: 0
  5818  00029A  0E57               	movlw	87
  5819  00029C  19E7               	xorwf	inputEntry@pressed& (0+255),w,b
  5820  00029E  A4D8               	btfss	status,2,c
  5821  0002A0  D002               	goto	l356
  5822                           
  5823                           ; BSR set to: 0
  5824  0002A2  4BDD               	infsnz	inputEntry@numW& (0+255),f,b
  5825  0002A4  2BDE               	incf	(inputEntry@numW+1)& (0+255),f,b
  5826  0002A6                     l356:
  5827                           
  5828                           ; BSR set to: 0
  5829                           ;menu.c: 92: doneCompartment++;
  5830                           
  5831                           ; BSR set to: 0
  5832                           
  5833                           ; BSR set to: 0
  5834                           
  5835                           ; BSR set to: 0
  5836  0002A6  4BD3               	infsnz	inputEntry@doneCompartment& (0+255),f,b
  5837  0002A8  2BD4               	incf	(inputEntry@doneCompartment+1)& (0+255),f,b
  5838                           
  5839                           ;menu.c: 93: } else if (pressed == 35) {
  5840  0002AA  D021               	goto	l363
  5841  0002AC                     l347:
  5842                           
  5843                           ; BSR set to: 0
  5844                           
  5845                           ; BSR set to: 0
  5846  0002AC  0E23               	movlw	35
  5847  0002AE  19E7               	xorwf	inputEntry@pressed& (0+255),w,b
  5848  0002B0  A4D8               	btfss	status,2,c
  5849  0002B2  D015               	goto	l358
  5850                           
  5851                           ; BSR set to: 0
  5852                           ;menu.c: 94: if (numB != 0 || numN != 0 || numS != 0 || numW != 0) doneCompartment = 4;
  5853  0002B4  51D7               	movf	inputEntry@numB& (0+255),w,b
  5854  0002B6  11D8               	iorwf	(inputEntry@numB+1)& (0+255),w,b
  5855  0002B8  A4D8               	btfss	status,2,c
  5856  0002BA  D00C               	goto	u6430
  5857                           
  5858                           ; BSR set to: 0
  5859  0002BC  51D9               	movf	inputEntry@numN& (0+255),w,b
  5860  0002BE  11DA               	iorwf	(inputEntry@numN+1)& (0+255),w,b
  5861  0002C0  A4D8               	btfss	status,2,c
  5862  0002C2  D008               	goto	u6430
  5863                           
  5864                           ; BSR set to: 0
  5865  0002C4  51DB               	movf	inputEntry@numS& (0+255),w,b
  5866  0002C6  11DC               	iorwf	(inputEntry@numS+1)& (0+255),w,b
  5867  0002C8  A4D8               	btfss	status,2,c
  5868  0002CA  D004               	goto	u6430
  5869                           
  5870                           ; BSR set to: 0
  5871  0002CC  51DD               	movf	inputEntry@numW& (0+255),w,b
  5872  0002CE  11DE               	iorwf	(inputEntry@numW+1)& (0+255),w,b
  5873  0002D0  B4D8               	btfsc	status,2,c
  5874  0002D2  D00D               	goto	l363
  5875  0002D4                     u6430:
  5876                           
  5877                           ; BSR set to: 0
  5878                           
  5879                           ; BSR set to: 0
  5880  0002D4  0E00               	movlw	0
  5881  0002D6  6FD4               	movwf	(inputEntry@doneCompartment+1)& (0+255),b
  5882  0002D8  0E04               	movlw	4
  5883  0002DA                     L4:
  5884  0002DA  6FD3               	movwf	inputEntry@doneCompartment& (0+255),b
  5885                           
  5886                           ; BSR set to: 0
  5887                           ;menu.c: 95: } else if (pressed == 42) {
  5888  0002DC  D008               	goto	l363
  5889  0002DE                     l358:
  5890                           
  5891                           ; BSR set to: 0
  5892                           
  5893                           ; BSR set to: 0
  5894  0002DE  0E2A               	movlw	42
  5895  0002E0  19E7               	xorwf	inputEntry@pressed& (0+255),w,b
  5896  0002E2  A4D8               	btfss	status,2,c
  5897  0002E4  D004               	goto	l363
  5898                           
  5899                           ; BSR set to: 0
  5900                           ;menu.c: 96: compartmentNum--;
  5901  0002E6  07E3               	decf	inputEntry@compartmentNum& (0+255),f,b
  5902  0002E8  A0D8               	btfss	status,0,c
  5903  0002EA  07E4               	decf	(inputEntry@compartmentNum+1)& (0+255),f,b
  5904                           
  5905                           ;menu.c: 97: goto STARTMULTIPLES;
  5906  0002EC  D0C6               	goto	u6530
  5907  0002EE                     l363:
  5908                           
  5909                           ; BSR set to: 0
  5910                           
  5911                           ; BSR set to: 0
  5912                           
  5913                           ; BSR set to: 0
  5914                           
  5915                           ; BSR set to: 0
  5916                           
  5917                           ; BSR set to: 0
  5918  0002EE  BFD4               	btfsc	(inputEntry@doneCompartment+1)& (0+255),7,b
  5919  0002F0  D7A7               	goto	l346
  5920  0002F2  51D4               	movf	(inputEntry@doneCompartment+1)& (0+255),w,b
  5921  0002F4  E104               	bnz	l5195
  5922  0002F6  0E04               	movlw	4
  5923  0002F8  5DD3               	subwf	inputEntry@doneCompartment& (0+255),w,b
  5924  0002FA  A0D8               	btfss	status,0,c
  5925  0002FC  D7A1               	goto	l346
  5926  0002FE                     l5195:
  5927                           
  5928                           ; BSR set to: 0
  5929                           ;menu.c: 98: }
  5930                           ;menu.c: 99: }
  5931                           ;menu.c: 102: found = 0;
  5932  0002FE  0E00               	movlw	0
  5933  000300  6FCE               	movwf	(inputEntry@found+1)& (0+255),b
  5934  000302  0E00               	movlw	0
  5935  000304  6FCD               	movwf	inputEntry@found& (0+255),b
  5936                           
  5937                           ;menu.c: 103: for (i = 0; i < 21; i++) {
  5938  000306  0E00               	movlw	0
  5939  000308  6FE6               	movwf	(inputEntry@i+1)& (0+255),b
  5940  00030A  0E00               	movlw	0
  5941  00030C  6FE5               	movwf	inputEntry@i& (0+255),b
  5942                           
  5943                           ; BSR set to: 0
  5944  00030E  BFE6               	btfsc	(inputEntry@i+1)& (0+255),7,b
  5945  000310  D008               	goto	l366
  5946  000312  51E6               	movf	(inputEntry@i+1)& (0+255),w,b
  5947  000314  E105               	bnz	u6460
  5948  000316  0E15               	movlw	21
  5949  000318  5DE5               	subwf	inputEntry@i& (0+255),w,b
  5950  00031A  B0D8               	btfsc	status,0,c
  5951  00031C  D099               	goto	u6510
  5952  00031E  D001               	goto	l366
  5953  000320                     u6460:
  5954                           
  5955                           ; BSR set to: 0
  5956  000320  D097               	goto	u6510
  5957  000322                     l366:
  5958                           
  5959                           ; BSR set to: 0
  5960                           ;menu.c: 104: if (fastenerMatrix[i][0] == numB &&
  5961                           ;menu.c: 105: fastenerMatrix[i][1] == numN &&
  5962                           ;menu.c: 106: fastenerMatrix[i][2] == numS &&
  5963                           ;menu.c: 107: fastenerMatrix[i][3] == numW)
  5964                           
  5965                           ; BSR set to: 0
  5966  000322  C0E5  F08C         	movff	inputEntry@i,??_inputEntry
  5967  000326  C0E6  F08D         	movff	inputEntry@i+1,??_inputEntry+1
  5968  00032A  90D8               	bcf	status,0,c
  5969  00032C  378C               	rlcf	??_inputEntry& (0+255),f,b
  5970  00032E  378D               	rlcf	(??_inputEntry+1)& (0+255),f,b
  5971  000330  90D8               	bcf	status,0,c
  5972  000332  378C               	rlcf	??_inputEntry& (0+255),f,b
  5973  000334  378D               	rlcf	(??_inputEntry+1)& (0+255),f,b
  5974  000336  0EEA               	movlw	low _fastenerMatrix
  5975  000338  258C               	addwf	??_inputEntry& (0+255),w,b
  5976  00033A  6EF6               	movwf	tblptrl,c
  5977  00033C  0EFD               	movlw	high _fastenerMatrix
  5978  00033E  218D               	addwfc	(??_inputEntry+1)& (0+255),w,b
  5979  000340  6EF7               	movwf	tblptrh,c
  5980  000342                     	if	1	;There are 3 active tblptr bytes
  5981  000342  6AF8               	clrf	tblptru,c
  5982  000344  0E00               	movlw	low (__mediumconst shr (0+16))
  5983  000346  22F8               	addwfc	tblptru,f,c
  5984  000348                     	endif
  5985  000348  0008               	tblrd		*
  5986  00034A  50F5               	movf	tablat,w,c
  5987  00034C  6F8E               	movwf	(??_inputEntry+2)& (0+255),b
  5988  00034E  6B8F               	clrf	(??_inputEntry+3)& (0+255),b
  5989  000350  51D7               	movf	inputEntry@numB& (0+255),w,b
  5990  000352  198E               	xorwf	(??_inputEntry+2)& (0+255),w,b
  5991  000354  E176               	bnz	l5213
  5992  000356  51D8               	movf	(inputEntry@numB+1)& (0+255),w,b
  5993  000358  198F               	xorwf	(??_inputEntry+3)& (0+255),w,b
  5994  00035A  A4D8               	btfss	status,2,c
  5995  00035C  D072               	goto	l368
  5996                           
  5997                           ; BSR set to: 0
  5998  00035E  C0E5  F08C         	movff	inputEntry@i,??_inputEntry
  5999  000362  C0E6  F08D         	movff	inputEntry@i+1,??_inputEntry+1
  6000  000366  90D8               	bcf	status,0,c
  6001  000368  378C               	rlcf	??_inputEntry& (0+255),f,b
  6002  00036A  378D               	rlcf	(??_inputEntry+1)& (0+255),f,b
  6003  00036C  90D8               	bcf	status,0,c
  6004  00036E  378C               	rlcf	??_inputEntry& (0+255),f,b
  6005  000370  378D               	rlcf	(??_inputEntry+1)& (0+255),f,b
  6006  000372  0E01               	movlw	1
  6007  000374  278C               	addwf	??_inputEntry& (0+255),f,b
  6008  000376  0E00               	movlw	0
  6009  000378  238D               	addwfc	(??_inputEntry+1)& (0+255),f,b
  6010  00037A  0EEA               	movlw	low _fastenerMatrix
  6011  00037C  258C               	addwf	??_inputEntry& (0+255),w,b
  6012  00037E  6EF6               	movwf	tblptrl,c
  6013  000380  0EFD               	movlw	high _fastenerMatrix
  6014  000382  218D               	addwfc	(??_inputEntry+1)& (0+255),w,b
  6015  000384  6EF7               	movwf	tblptrh,c
  6016  000386                     	if	1	;There are 3 active tblptr bytes
  6017  000386  6AF8               	clrf	tblptru,c
  6018  000388  0E00               	movlw	low (__mediumconst shr (0+16))
  6019  00038A  22F8               	addwfc	tblptru,f,c
  6020  00038C                     	endif
  6021  00038C  0008               	tblrd		*
  6022  00038E  50F5               	movf	tablat,w,c
  6023  000390  6F8E               	movwf	(??_inputEntry+2)& (0+255),b
  6024  000392  6B8F               	clrf	(??_inputEntry+3)& (0+255),b
  6025  000394  51D9               	movf	inputEntry@numN& (0+255),w,b
  6026  000396  198E               	xorwf	(??_inputEntry+2)& (0+255),w,b
  6027  000398  E154               	bnz	l5213
  6028  00039A  51DA               	movf	(inputEntry@numN+1)& (0+255),w,b
  6029  00039C  198F               	xorwf	(??_inputEntry+3)& (0+255),w,b
  6030  00039E  A4D8               	btfss	status,2,c
  6031  0003A0  D050               	goto	l368
  6032                           
  6033                           ; BSR set to: 0
  6034  0003A2  C0E5  F08C         	movff	inputEntry@i,??_inputEntry
  6035  0003A6  C0E6  F08D         	movff	inputEntry@i+1,??_inputEntry+1
  6036  0003AA  90D8               	bcf	status,0,c
  6037  0003AC  378C               	rlcf	??_inputEntry& (0+255),f,b
  6038  0003AE  378D               	rlcf	(??_inputEntry+1)& (0+255),f,b
  6039  0003B0  90D8               	bcf	status,0,c
  6040  0003B2  378C               	rlcf	??_inputEntry& (0+255),f,b
  6041  0003B4  378D               	rlcf	(??_inputEntry+1)& (0+255),f,b
  6042  0003B6  0E02               	movlw	2
  6043  0003B8  278C               	addwf	??_inputEntry& (0+255),f,b
  6044  0003BA  0E00               	movlw	0
  6045  0003BC  238D               	addwfc	(??_inputEntry+1)& (0+255),f,b
  6046  0003BE  0EEA               	movlw	low _fastenerMatrix
  6047  0003C0  258C               	addwf	??_inputEntry& (0+255),w,b
  6048  0003C2  6EF6               	movwf	tblptrl,c
  6049  0003C4  0EFD               	movlw	high _fastenerMatrix
  6050  0003C6  218D               	addwfc	(??_inputEntry+1)& (0+255),w,b
  6051  0003C8  6EF7               	movwf	tblptrh,c
  6052  0003CA                     	if	1	;There are 3 active tblptr bytes
  6053  0003CA  6AF8               	clrf	tblptru,c
  6054  0003CC  0E00               	movlw	low (__mediumconst shr (0+16))
  6055  0003CE  22F8               	addwfc	tblptru,f,c
  6056  0003D0                     	endif
  6057  0003D0  0008               	tblrd		*
  6058  0003D2  50F5               	movf	tablat,w,c
  6059  0003D4  6F8E               	movwf	(??_inputEntry+2)& (0+255),b
  6060  0003D6  6B8F               	clrf	(??_inputEntry+3)& (0+255),b
  6061  0003D8  51DB               	movf	inputEntry@numS& (0+255),w,b
  6062  0003DA  198E               	xorwf	(??_inputEntry+2)& (0+255),w,b
  6063  0003DC  E132               	bnz	l5213
  6064  0003DE  51DC               	movf	(inputEntry@numS+1)& (0+255),w,b
  6065  0003E0  198F               	xorwf	(??_inputEntry+3)& (0+255),w,b
  6066  0003E2  A4D8               	btfss	status,2,c
  6067  0003E4  D02E               	goto	l368
  6068                           
  6069                           ; BSR set to: 0
  6070  0003E6  C0E5  F08C         	movff	inputEntry@i,??_inputEntry
  6071  0003EA  C0E6  F08D         	movff	inputEntry@i+1,??_inputEntry+1
  6072  0003EE  90D8               	bcf	status,0,c
  6073  0003F0  378C               	rlcf	??_inputEntry& (0+255),f,b
  6074  0003F2  378D               	rlcf	(??_inputEntry+1)& (0+255),f,b
  6075  0003F4  90D8               	bcf	status,0,c
  6076  0003F6  378C               	rlcf	??_inputEntry& (0+255),f,b
  6077  0003F8  378D               	rlcf	(??_inputEntry+1)& (0+255),f,b
  6078  0003FA  0E03               	movlw	3
  6079  0003FC  278C               	addwf	??_inputEntry& (0+255),f,b
  6080  0003FE  0E00               	movlw	0
  6081  000400  238D               	addwfc	(??_inputEntry+1)& (0+255),f,b
  6082  000402  0EEA               	movlw	low _fastenerMatrix
  6083  000404  258C               	addwf	??_inputEntry& (0+255),w,b
  6084  000406  6EF6               	movwf	tblptrl,c
  6085  000408  0EFD               	movlw	high _fastenerMatrix
  6086  00040A  218D               	addwfc	(??_inputEntry+1)& (0+255),w,b
  6087  00040C  6EF7               	movwf	tblptrh,c
  6088  00040E                     	if	1	;There are 3 active tblptr bytes
  6089  00040E  6AF8               	clrf	tblptru,c
  6090  000410  0E00               	movlw	low (__mediumconst shr (0+16))
  6091  000412  22F8               	addwfc	tblptru,f,c
  6092  000414                     	endif
  6093  000414  0008               	tblrd		*
  6094  000416  50F5               	movf	tablat,w,c
  6095  000418  6F8E               	movwf	(??_inputEntry+2)& (0+255),b
  6096  00041A  6B8F               	clrf	(??_inputEntry+3)& (0+255),b
  6097  00041C  51DD               	movf	inputEntry@numW& (0+255),w,b
  6098  00041E  198E               	xorwf	(??_inputEntry+2)& (0+255),w,b
  6099  000420  E110               	bnz	l5213
  6100  000422  51DE               	movf	(inputEntry@numW+1)& (0+255),w,b
  6101  000424  198F               	xorwf	(??_inputEntry+3)& (0+255),w,b
  6102  000426  A4D8               	btfss	status,2,c
  6103  000428  D00C               	goto	l368
  6104                           
  6105                           ; BSR set to: 0
  6106                           ;menu.c: 108: {
  6107                           ;menu.c: 109: params.toFill[compartmentNum] = i;
  6108  00042A  0EA5               	movlw	low (_params+2)
  6109  00042C  25E3               	addwf	inputEntry@compartmentNum& (0+255),w,b
  6110  00042E  6ED9               	movwf	fsr2l,c
  6111  000430  0E01               	movlw	high (_params+2)
  6112  000432  21E4               	addwfc	(inputEntry@compartmentNum+1)& (0+255),w,b
  6113  000434  6EDA               	movwf	fsr2h,c
  6114  000436  C0E5  FFDF         	movff	inputEntry@i,indf2
  6115                           
  6116                           ; BSR set to: 0
  6117                           ;menu.c: 110: found = 1;
  6118  00043A  0E00               	movlw	0
  6119  00043C  6FCE               	movwf	(inputEntry@found+1)& (0+255),b
  6120  00043E  0E01               	movlw	1
  6121  000440  6FCD               	movwf	inputEntry@found& (0+255),b
  6122  000442                     l368:
  6123  000442                     l5213:
  6124                           
  6125                           ; BSR set to: 0
  6126  000442  4BE5               	infsnz	inputEntry@i& (0+255),f,b
  6127  000444  2BE6               	incf	(inputEntry@i+1)& (0+255),f,b
  6128                           
  6129                           ; BSR set to: 0
  6130  000446  BFE6               	btfsc	(inputEntry@i+1)& (0+255),7,b
  6131  000448  D76C               	goto	l366
  6132  00044A  51E6               	movf	(inputEntry@i+1)& (0+255),w,b
  6133  00044C  E101               	bnz	l5217
  6134  00044E  D763               	goto	L5
  6135  000450                     u6510:
  6136  000450                     l5217:
  6137                           
  6138                           ; BSR set to: 0
  6139                           ;menu.c: 111: }
  6140                           ;menu.c: 112: }
  6141                           ;menu.c: 113: if (!found) {
  6142  000450  51CD               	movf	inputEntry@found& (0+255),w,b
  6143  000452  11CE               	iorwf	(inputEntry@found+1)& (0+255),w,b
  6144  000454  A4D8               	btfss	status,2,c
  6145  000456  D007               	goto	l369
  6146                           
  6147                           ; BSR set to: 0
  6148                           ;menu.c: 114: printErrorLCD(errMsgs.badEntry);
  6149  000458  0E86               	movlw	low _errMsgs
  6150  00045A  6E32               	movwf	printErrorLCD@string,c
  6151  00045C  0EFC               	movlw	high _errMsgs
  6152  00045E  6E33               	movwf	printErrorLCD@string+1,c
  6153  000460  EC8B  F015         	call	_printErrorLCD	;wreg free
  6154                           
  6155                           ;menu.c: 118: } else {
  6156                           
  6157                           ;menu.c: 117: continue;
  6158  000464  D005               	goto	l370
  6159  000466                     l369:
  6160                           
  6161                           ;menu.c: 119: setIsGood = 1;
  6162  000466  0E00               	movlw	0
  6163  000468  0100               	movlb	0	; () banked
  6164  00046A  6FD0               	movwf	(inputEntry@setIsGood+1)& (0+255),b
  6165  00046C  0E01               	movlw	1
  6166  00046E                     L3:
  6167  00046E  6FCF               	movwf	inputEntry@setIsGood& (0+255),b
  6168  000470                     l370:
  6169                           
  6170                           ; BSR set to: 0
  6171                           
  6172                           ; BSR set to: 0
  6173  000470  0100               	movlb	0	; () banked
  6174  000472  51CF               	movf	inputEntry@setIsGood& (0+255),w,b
  6175  000474  11D0               	iorwf	(inputEntry@setIsGood+1)& (0+255),w,b
  6176  000476  B4D8               	btfsc	status,2,c
  6177  000478  D6A9               	goto	l344
  6178  00047A                     u6530:
  6179                           
  6180                           ; BSR set to: 0
  6181                           ;menu.c: 125: doneMultiples = 0;
  6182                           
  6183                           ; BSR set to: 0
  6184                           
  6185                           ;menu.c: 120: }
  6186                           ;menu.c: 121: }
  6187                           ;menu.c: 124: STARTMULTIPLES:
  6188                           
  6189                           ; BSR set to: 0
  6190  00047A  0E00               	movlw	0
  6191  00047C  6FD2               	movwf	(inputEntry@doneMultiples+1)& (0+255),b
  6192  00047E  0E00               	movlw	0
  6193  000480  D103               	goto	L6
  6194  000482                     
  6195                           ; BSR set to: 0
  6196                           ;menu.c: 127: printStringLCD(inputEntryQuestions[2]);
  6197                           
  6198                           ; BSR set to: 0
  6199  000482  0EA8               	movlw	low (_inputEntryQuestions+66)
  6200  000484  6E2D               	movwf	printStringLCD@string,c
  6201  000486  0EFD               	movlw	high (_inputEntryQuestions+66)
  6202  000488  6E2E               	movwf	printStringLCD@string+1,c
  6203  00048A  EC2D  F00D         	call	_printStringLCD	;wreg free
  6204                           
  6205                           ;menu.c: 128: lcd_set_cursor(14, 1);
  6206  00048E  0E01               	movlw	1
  6207  000490  6E2D               	movwf	lcd_set_cursor@y,c
  6208  000492  0E0E               	movlw	14
  6209  000494  ECEE  F014         	call	_lcd_set_cursor
  6210                           
  6211                           ;menu.c: 130: pressed = pollKeypad();
  6212  000498  EC61  F015         	call	_pollKeypad	;wreg free
  6213  00049C  0100               	movlb	0	; () banked
  6214  00049E  6FE7               	movwf	inputEntry@pressed& (0+255),b
  6215                           
  6216                           ; BSR set to: 0
  6217                           ;menu.c: 131: numPressed = pressed - 48;
  6218  0004A0  0ED0               	movlw	208
  6219  0004A2  25E7               	addwf	inputEntry@pressed& (0+255),w,b
  6220  0004A4  6FE1               	movwf	inputEntry@numPressed& (0+255),b
  6221  0004A6  6BE2               	clrf	(inputEntry@numPressed+1)& (0+255),b
  6222  0004A8  0EFF               	movlw	255
  6223  0004AA  23E2               	addwfc	(inputEntry@numPressed+1)& (0+255),f,b
  6224                           
  6225                           ; BSR set to: 0
  6226                           ;menu.c: 133: if (pressed == 42) goto STARTCOMPARTMENT;
  6227  0004AC  0E2A               	movlw	42
  6228  0004AE  19E7               	xorwf	inputEntry@pressed& (0+255),w,b
  6229  0004B0  B4D8               	btfsc	status,2,c
  6230  0004B2  D660               	goto	l337
  6231                           
  6232                           ; BSR set to: 0
  6233                           ;menu.c: 136: putch(pressed);
  6234                           
  6235                           ; BSR set to: 0
  6236                           
  6237                           ; BSR set to: 0
  6238  0004B4  51E7               	movf	inputEntry@pressed& (0+255),w,b
  6239  0004B6  ECED  F015         	call	_putch
  6240                           
  6241                           ;menu.c: 137: _delay((unsigned long)((500)*(40000000/4000.0)));
  6242  0004BA  0E1A               	movlw	26
  6243  0004BC  0100               	movlb	0	; () banked
  6244  0004BE  6F8D               	movwf	(??_inputEntry+1)& (0+255),b
  6245  0004C0  0E5E               	movlw	94
  6246  0004C2  6F8C               	movwf	??_inputEntry& (0+255),b
  6247  0004C4  0E6E               	movlw	110
  6248  0004C6                     u6987:
  6249  0004C6  2EE8               	decfsz	wreg,f,c
  6250  0004C8  D7FE               	bra	u6987
  6251  0004CA  2F8C               	decfsz	??_inputEntry& (0+255),f,b
  6252  0004CC  D7FC               	bra	u6987
  6253  0004CE  2F8D               	decfsz	(??_inputEntry+1)& (0+255),f,b
  6254  0004D0  D7FA               	bra	u6987
  6255  0004D2  F000               	nop	
  6256                           
  6257                           ;menu.c: 139: int sum = 0;
  6258  0004D4  0E00               	movlw	0
  6259  0004D6  0100               	movlb	0	; () banked
  6260  0004D8  6FD6               	movwf	(inputEntry@sum+1)& (0+255),b
  6261  0004DA  0E00               	movlw	0
  6262  0004DC  6FD5               	movwf	inputEntry@sum& (0+255),b
  6263                           
  6264                           ; BSR set to: 0
  6265                           ;menu.c: 140: for (i = 0; i < 4; i++) {
  6266  0004DE  0E00               	movlw	0
  6267  0004E0  6FE6               	movwf	(inputEntry@i+1)& (0+255),b
  6268  0004E2  0E00               	movlw	0
  6269  0004E4  6FE5               	movwf	inputEntry@i& (0+255),b
  6270  0004E6                     l5249:
  6271                           
  6272                           ; BSR set to: 0
  6273  0004E6  BFE6               	btfsc	(inputEntry@i+1)& (0+255),7,b
  6274  0004E8  D006               	goto	l375
  6275  0004EA  51E6               	movf	(inputEntry@i+1)& (0+255),w,b
  6276  0004EC  E127               	bnz	l5259
  6277  0004EE  0E04               	movlw	4
  6278  0004F0  5DE5               	subwf	inputEntry@i& (0+255),w,b
  6279  0004F2  B0D8               	btfsc	status,0,c
  6280  0004F4  D023               	goto	u6560
  6281  0004F6                     l375:
  6282                           
  6283                           ; BSR set to: 0
  6284                           ;menu.c: 141: sum += fastenerMatrix[params.toFill[compartmentNum]][i];
  6285                           
  6286                           ; BSR set to: 0
  6287  0004F6  0EA5               	movlw	low (_params+2)
  6288  0004F8  25E3               	addwf	inputEntry@compartmentNum& (0+255),w,b
  6289  0004FA  6ED9               	movwf	fsr2l,c
  6290  0004FC  0E01               	movlw	high (_params+2)
  6291  0004FE  21E4               	addwfc	(inputEntry@compartmentNum+1)& (0+255),w,b
  6292  000500  6EDA               	movwf	fsr2h,c
  6293  000502  50DF               	movf	indf2,w,c
  6294  000504  6F8C               	movwf	??_inputEntry& (0+255),b
  6295  000506  518C               	movf	??_inputEntry& (0+255),w,b
  6296  000508  0D04               	mullw	4
  6297  00050A  0EEA               	movlw	low _fastenerMatrix
  6298  00050C  6F8D               	movwf	(??_inputEntry+1)& (0+255),b
  6299  00050E  0EFD               	movlw	high _fastenerMatrix
  6300  000510  6F8E               	movwf	(??_inputEntry+2)& (0+255),b
  6301  000512  50F3               	movf	prodl,w,c
  6302  000514  278D               	addwf	(??_inputEntry+1)& (0+255),f,b
  6303  000516  50F4               	movf	prodh,w,c
  6304  000518  238E               	addwfc	(??_inputEntry+2)& (0+255),f,b
  6305  00051A  51E5               	movf	inputEntry@i& (0+255),w,b
  6306  00051C  278D               	addwf	(??_inputEntry+1)& (0+255),f,b
  6307  00051E  51E6               	movf	(inputEntry@i+1)& (0+255),w,b
  6308  000520  238E               	addwfc	(??_inputEntry+2)& (0+255),f,b
  6309  000522  C08D  FFF6         	movff	??_inputEntry+1,tblptrl
  6310  000526  C08E  FFF7         	movff	??_inputEntry+2,tblptrh
  6311  00052A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6312  00052A  6AF8               	clrf	tblptru,c
  6313  00052C                     	endif
  6314  00052C                     	if	0	;tblptru may be non-zero
  6315  00052C                     	endif
  6316  00052C  0008               	tblrd		*
  6317  00052E  50F5               	movf	tablat,w,c
  6318  000530  27D5               	addwf	inputEntry@sum& (0+255),f,b
  6319  000532  0E00               	movlw	0
  6320  000534  23D6               	addwfc	(inputEntry@sum+1)& (0+255),f,b
  6321                           
  6322                           ; BSR set to: 0
  6323  000536  4BE5               	infsnz	inputEntry@i& (0+255),f,b
  6324  000538  2BE6               	incf	(inputEntry@i+1)& (0+255),f,b
  6325  00053A  D7D5               	goto	l5249
  6326  00053C                     u6560:
  6327  00053C                     l5259:
  6328                           
  6329                           ; BSR set to: 0
  6330                           ;menu.c: 142: };
  6331                           ;menu.c: 143: if (numPressed * sum > 4) {
  6332  00053C  C0E1  F027         	movff	inputEntry@numPressed,___wmul@multiplier
  6333  000540  C0E2  F028         	movff	inputEntry@numPressed+1,___wmul@multiplier+1
  6334  000544  C0D5  F029         	movff	inputEntry@sum,___wmul@multiplicand
  6335  000548  C0D6  F02A         	movff	inputEntry@sum+1,___wmul@multiplicand+1
  6336  00054C  EC9E  F015         	call	___wmul	;wreg free
  6337  000550  BE28               	btfsc	?___wmul+1,7,c
  6338  000552  D00D               	goto	l377
  6339  000554  5028               	movf	?___wmul+1,w,c
  6340  000556  E104               	bnz	u6570
  6341  000558  0E05               	movlw	5
  6342  00055A  5C27               	subwf	?___wmul,w,c
  6343  00055C  A0D8               	btfss	status,0,c
  6344  00055E  D007               	goto	l377
  6345  000560                     u6570:
  6346                           
  6347                           ;menu.c: 144: printErrorLCD(errMsgs.tooManyFasteners);
  6348  000560  0EA6               	movlw	low (_errMsgs+32)
  6349  000562  6E32               	movwf	printErrorLCD@string,c
  6350  000564  0EFC               	movlw	high (_errMsgs+32)
  6351  000566  6E33               	movwf	printErrorLCD@string+1,c
  6352  000568  EC8B  F015         	call	_printErrorLCD	;wreg free
  6353                           
  6354                           ;menu.c: 145: } else if (numPressed * sum <= 0) {
  6355  00056C  D08E               	goto	l388
  6356  00056E                     l377:
  6357  00056E  C0E1  F027         	movff	inputEntry@numPressed,___wmul@multiplier
  6358  000572  C0E2  F028         	movff	inputEntry@numPressed+1,___wmul@multiplier+1
  6359  000576  C0D5  F029         	movff	inputEntry@sum,___wmul@multiplicand
  6360  00057A  C0D6  F02A         	movff	inputEntry@sum+1,___wmul@multiplicand+1
  6361  00057E  EC9E  F015         	call	___wmul	;wreg free
  6362  000582  BE28               	btfsc	?___wmul+1,7,c
  6363  000584  D005               	goto	u6580
  6364  000586  5028               	movf	?___wmul+1,w,c
  6365  000588  E10A               	bnz	l5267
  6366  00058A  0427               	decf	?___wmul,w,c
  6367  00058C  B0D8               	btfsc	status,0,c
  6368  00058E  D007               	goto	l379
  6369  000590                     u6580:
  6370                           
  6371                           ;menu.c: 146: printErrorLCD(errMsgs.noFasteners);
  6372  000590  0E46               	movlw	low (_errMsgs+192)
  6373  000592  6E32               	movwf	printErrorLCD@string,c
  6374  000594  0EFD               	movlw	high (_errMsgs+192)
  6375  000596  6E33               	movwf	printErrorLCD@string+1,c
  6376  000598  EC8B  F015         	call	_printErrorLCD	;wreg free
  6377                           
  6378                           ;menu.c: 150: } else if (numB * numPressed > 2) {
  6379  00059C  D076               	goto	l388
  6380  00059E                     l379:
  6381  00059E                     l5267:
  6382  00059E  C0D7  F027         	movff	inputEntry@numB,___wmul@multiplier
  6383  0005A2  C0D8  F028         	movff	inputEntry@numB+1,___wmul@multiplier+1
  6384  0005A6  C0E1  F029         	movff	inputEntry@numPressed,___wmul@multiplicand
  6385  0005AA  C0E2  F02A         	movff	inputEntry@numPressed+1,___wmul@multiplicand+1
  6386  0005AE  EC9E  F015         	call	___wmul	;wreg free
  6387  0005B2  BE28               	btfsc	?___wmul+1,7,c
  6388  0005B4  D00D               	goto	l381
  6389  0005B6  5028               	movf	?___wmul+1,w,c
  6390  0005B8  E104               	bnz	u6590
  6391  0005BA  0E03               	movlw	3
  6392  0005BC  5C27               	subwf	?___wmul,w,c
  6393  0005BE  A0D8               	btfss	status,0,c
  6394  0005C0  D007               	goto	l381
  6395  0005C2                     u6590:
  6396                           
  6397                           ;menu.c: 151: printErrorLCD(errMsgs.tooManyBolts);
  6398  0005C2  0EC6               	movlw	low (_errMsgs+64)
  6399  0005C4  6E32               	movwf	printErrorLCD@string,c
  6400  0005C6  0EFC               	movlw	high (_errMsgs+64)
  6401  0005C8  6E33               	movwf	printErrorLCD@string+1,c
  6402  0005CA  EC8B  F015         	call	_printErrorLCD	;wreg free
  6403                           
  6404                           ;menu.c: 152: } else if (numN * numPressed > 3) {
  6405  0005CE  D05D               	goto	l388
  6406  0005D0                     l381:
  6407  0005D0  C0D9  F027         	movff	inputEntry@numN,___wmul@multiplier
  6408  0005D4  C0DA  F028         	movff	inputEntry@numN+1,___wmul@multiplier+1
  6409  0005D8  C0E1  F029         	movff	inputEntry@numPressed,___wmul@multiplicand
  6410  0005DC  C0E2  F02A         	movff	inputEntry@numPressed+1,___wmul@multiplicand+1
  6411  0005E0  EC9E  F015         	call	___wmul	;wreg free
  6412  0005E4  BE28               	btfsc	?___wmul+1,7,c
  6413  0005E6  D00D               	goto	l383
  6414  0005E8  5028               	movf	?___wmul+1,w,c
  6415  0005EA  E104               	bnz	u6600
  6416  0005EC  0E04               	movlw	4
  6417  0005EE  5C27               	subwf	?___wmul,w,c
  6418  0005F0  A0D8               	btfss	status,0,c
  6419  0005F2  D007               	goto	l383
  6420  0005F4                     u6600:
  6421                           
  6422                           ;menu.c: 153: printErrorLCD(errMsgs.tooManyNuts);
  6423  0005F4  0EE6               	movlw	low (_errMsgs+96)
  6424  0005F6  6E32               	movwf	printErrorLCD@string,c
  6425  0005F8  0EFC               	movlw	high (_errMsgs+96)
  6426  0005FA  6E33               	movwf	printErrorLCD@string+1,c
  6427  0005FC  EC8B  F015         	call	_printErrorLCD	;wreg free
  6428                           
  6429                           ;menu.c: 154: } else if (numS * numPressed > 2) {
  6430  000600  D044               	goto	l388
  6431  000602                     l383:
  6432  000602  C0DB  F027         	movff	inputEntry@numS,___wmul@multiplier
  6433  000606  C0DC  F028         	movff	inputEntry@numS+1,___wmul@multiplier+1
  6434  00060A  C0E1  F029         	movff	inputEntry@numPressed,___wmul@multiplicand
  6435  00060E  C0E2  F02A         	movff	inputEntry@numPressed+1,___wmul@multiplicand+1
  6436  000612  EC9E  F015         	call	___wmul	;wreg free
  6437  000616  BE28               	btfsc	?___wmul+1,7,c
  6438  000618  D00D               	goto	l385
  6439  00061A  5028               	movf	?___wmul+1,w,c
  6440  00061C  E104               	bnz	u6610
  6441  00061E  0E03               	movlw	3
  6442  000620  5C27               	subwf	?___wmul,w,c
  6443  000622  A0D8               	btfss	status,0,c
  6444  000624  D007               	goto	l385
  6445  000626                     u6610:
  6446                           
  6447                           ;menu.c: 155: printErrorLCD(errMsgs.tooManySpacers);
  6448  000626  0E26               	movlw	low (_errMsgs+160)
  6449  000628  6E32               	movwf	printErrorLCD@string,c
  6450  00062A  0EFD               	movlw	high (_errMsgs+160)
  6451  00062C  6E33               	movwf	printErrorLCD@string+1,c
  6452  00062E  EC8B  F015         	call	_printErrorLCD	;wreg free
  6453                           
  6454                           ;menu.c: 156: } else if (numW * numPressed > 4) {
  6455  000632  D02B               	goto	l388
  6456  000634                     l385:
  6457  000634  C0DD  F027         	movff	inputEntry@numW,___wmul@multiplier
  6458  000638  C0DE  F028         	movff	inputEntry@numW+1,___wmul@multiplier+1
  6459  00063C  C0E1  F029         	movff	inputEntry@numPressed,___wmul@multiplicand
  6460  000640  C0E2  F02A         	movff	inputEntry@numPressed+1,___wmul@multiplicand+1
  6461  000644  EC9E  F015         	call	___wmul	;wreg free
  6462  000648  BE28               	btfsc	?___wmul+1,7,c
  6463  00064A  D00D               	goto	l387
  6464  00064C  5028               	movf	?___wmul+1,w,c
  6465  00064E  E104               	bnz	u6620
  6466  000650  0E05               	movlw	5
  6467  000652  5C27               	subwf	?___wmul,w,c
  6468  000654  A0D8               	btfss	status,0,c
  6469  000656  D007               	goto	l387
  6470  000658                     u6620:
  6471                           
  6472                           ;menu.c: 157: printErrorLCD(errMsgs.tooManyWashers);
  6473  000658  0E06               	movlw	low (_errMsgs+128)
  6474  00065A  6E32               	movwf	printErrorLCD@string,c
  6475  00065C  0EFD               	movlw	high (_errMsgs+128)
  6476  00065E  6E33               	movwf	printErrorLCD@string+1,c
  6477  000660  EC8B  F015         	call	_printErrorLCD	;wreg free
  6478                           
  6479                           ;menu.c: 158: } else {
  6480  000664  D012               	goto	l388
  6481  000666                     l387:
  6482                           
  6483                           ;menu.c: 159: params.setMultiple[compartmentNum] = numPressed;
  6484  000666  90D8               	bcf	status,0,c
  6485  000668  0100               	movlb	0	; () banked
  6486  00066A  35E3               	rlcf	inputEntry@compartmentNum& (0+255),w,b
  6487  00066C  6ED9               	movwf	fsr2l,c
  6488  00066E  35E4               	rlcf	(inputEntry@compartmentNum+1)& (0+255),w,b
  6489  000670  6EDA               	movwf	fsr2h,c
  6490  000672  0EAD               	movlw	low (_params+10)
  6491  000674  26D9               	addwf	fsr2l,f,c
  6492  000676  0E01               	movlw	high (_params+10)
  6493  000678  22DA               	addwfc	fsr2h,f,c
  6494  00067A  C0E1  FFDE         	movff	inputEntry@numPressed,postinc2
  6495  00067E  C0E2  FFDD         	movff	inputEntry@numPressed+1,postdec2
  6496                           
  6497                           ; BSR set to: 0
  6498                           ;menu.c: 160: doneMultiples = 1;
  6499  000682  0E00               	movlw	0
  6500  000684  6FD2               	movwf	(inputEntry@doneMultiples+1)& (0+255),b
  6501  000686  0E01               	movlw	1
  6502  000688                     L6:
  6503  000688  6FD1               	movwf	inputEntry@doneMultiples& (0+255),b
  6504  00068A                     l388:
  6505                           
  6506                           ; BSR set to: 0
  6507                           
  6508                           ; BSR set to: 0
  6509                           
  6510                           ; BSR set to: 0
  6511                           
  6512                           ; BSR set to: 0
  6513                           
  6514                           ; BSR set to: 0
  6515                           
  6516                           ; BSR set to: 0
  6517                           
  6518                           ; BSR set to: 0
  6519  00068A  0100               	movlb	0	; () banked
  6520  00068C  51D1               	movf	inputEntry@doneMultiples& (0+255),w,b
  6521  00068E  11D2               	iorwf	(inputEntry@doneMultiples+1)& (0+255),w,b
  6522  000690  A4D8               	btfss	status,2,c
  6523  000692  D016               	goto	l390
  6524  000694  D6F6               	goto	l373
  6525  000696                     l340:
  6526                           
  6527                           ; BSR set to: 0
  6528                           ;menu.c: 164: params.toFill[compartmentNum] = NONE;
  6529                           
  6530                           ; BSR set to: 0
  6531  000696  0EA5               	movlw	low (_params+2)
  6532  000698  25E3               	addwf	inputEntry@compartmentNum& (0+255),w,b
  6533  00069A  6ED9               	movwf	fsr2l,c
  6534  00069C  0E01               	movlw	high (_params+2)
  6535  00069E  21E4               	addwfc	(inputEntry@compartmentNum+1)& (0+255),w,b
  6536  0006A0  6EDA               	movwf	fsr2h,c
  6537  0006A2  0E00               	movlw	0
  6538  0006A4  6EDF               	movwf	indf2,c
  6539                           
  6540                           ;menu.c: 165: params.setMultiple[compartmentNum] = 0;
  6541  0006A6  90D8               	bcf	status,0,c
  6542  0006A8  35E3               	rlcf	inputEntry@compartmentNum& (0+255),w,b
  6543  0006AA  6ED9               	movwf	fsr2l,c
  6544  0006AC  35E4               	rlcf	(inputEntry@compartmentNum+1)& (0+255),w,b
  6545  0006AE  6EDA               	movwf	fsr2h,c
  6546  0006B0  0EAD               	movlw	low (_params+10)
  6547  0006B2  26D9               	addwf	fsr2l,f,c
  6548  0006B4  0E01               	movlw	high (_params+10)
  6549  0006B6  22DA               	addwfc	fsr2h,f,c
  6550  0006B8  0E00               	movlw	0
  6551  0006BA  6EDE               	movwf	postinc2,c
  6552  0006BC  0E00               	movlw	0
  6553  0006BE  6EDD               	movwf	postdec2,c
  6554  0006C0                     l390:
  6555                           
  6556                           ; BSR set to: 0
  6557                           
  6558                           ; BSR set to: 0
  6559  0006C0  4BE3               	infsnz	inputEntry@compartmentNum& (0+255),f,b
  6560  0006C2  2BE4               	incf	(inputEntry@compartmentNum+1)& (0+255),f,b
  6561                           
  6562                           ; BSR set to: 0
  6563  0006C4  BFE4               	btfsc	(inputEntry@compartmentNum+1)& (0+255),7,b
  6564  0006C6  D556               	goto	l337
  6565  0006C8  51E4               	movf	(inputEntry@compartmentNum+1)& (0+255),w,b
  6566  0006CA  E104               	bnz	l5295
  6567  0006CC  0E08               	movlw	8
  6568  0006CE  5DE3               	subwf	inputEntry@compartmentNum& (0+255),w,b
  6569  0006D0  A0D8               	btfss	status,0,c
  6570  0006D2  D550               	goto	l337
  6571  0006D4                     u6640:
  6572  0006D4                     l5295:
  6573                           
  6574                           ; BSR set to: 0
  6575                           ;menu.c: 166: }
  6576                           ;menu.c: 167: }
  6577                           ;menu.c: 168: done = 1;
  6578  0006D4  0E00               	movlw	0
  6579  0006D6  6FCC               	movwf	(inputEntry@done+1)& (0+255),b
  6580  0006D8  0E01               	movlw	1
  6581  0006DA  6FCB               	movwf	inputEntry@done& (0+255),b
  6582                           
  6583                           ; BSR set to: 0
  6584                           ;menu.c: 169: I2C_Send(nanoAddr, "\1Done inputs\0");
  6585  0006DC  0EA4               	movlw	low STR_16
  6586  0006DE  6E2A               	movwf	I2C_Send@data,c
  6587  0006E0  0EFF               	movlw	high STR_16
  6588  0006E2  6E2B               	movwf	I2C_Send@data+1,c
  6589  0006E4  0E7F               	movlw	low _nanoAddr
  6590  0006E6  6EF6               	movwf	tblptrl,c
  6591  0006E8                     	if	1	;There is more than 1 active tblptr byte
  6592  0006E8  0EFC               	movlw	high _nanoAddr
  6593  0006EA  6EF7               	movwf	tblptrh,c
  6594  0006EC                     	endif
  6595  0006EC                     	if	1	;There are 3 active tblptr bytes
  6596  0006EC  0E00               	movlw	low (_nanoAddr shr (0+16))
  6597  0006EE  6EF8               	movwf	tblptru,c
  6598  0006F0                     	endif
  6599  0006F0  0008               	tblrd		*
  6600  0006F2  50F5               	movf	tablat,w,c
  6601  0006F4  EC32  F012         	call	_I2C_Send
  6602  0006F8                     l336:
  6603  0006F8  0100               	movlb	0	; () banked
  6604  0006FA  51CB               	movf	inputEntry@done& (0+255),w,b
  6605  0006FC  11CC               	iorwf	(inputEntry@done+1)& (0+255),w,b
  6606  0006FE  A4D8               	btfss	status,2,c
  6607  000700  0012               	return	
  6608  000702  D4BE               	goto	l331
  6609  000704                     __end_of_inputEntry:
  6610                           	opt stack 0
  6611                           tosu	equ	0xFFF
  6612                           tosh	equ	0xFFE
  6613                           tosl	equ	0xFFD
  6614                           pclath	equ	0xFFA
  6615                           tblptru	equ	0xFF8
  6616                           tblptrh	equ	0xFF7
  6617                           tblptrl	equ	0xFF6
  6618                           tablat	equ	0xFF5
  6619                           prodh	equ	0xFF4
  6620                           prodl	equ	0xFF3
  6621                           indf0	equ	0xFEF
  6622                           postinc0	equ	0xFEE
  6623                           fsr0h	equ	0xFEA
  6624                           fsr0l	equ	0xFE9
  6625                           wreg	equ	0xFE8
  6626                           postdec1	equ	0xFE5
  6627                           plusw1	equ	0xFE3
  6628                           fsr1l	equ	0xFE1
  6629                           indf2	equ	0xFDF
  6630                           postinc2	equ	0xFDE
  6631                           postdec2	equ	0xFDD
  6632                           plusw2	equ	0xFDB
  6633                           fsr2h	equ	0xFDA
  6634                           fsr2l	equ	0xFD9
  6635                           status	equ	0xFD8
  6636                           
  6637 ;; *************** function _strcpy *****************
  6638 ;; Defined at:
  6639 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
  6640 ;; Parameters:    Size  Location     Type
  6641 ;;  to              2   44[COMRAM] PTR unsigned char 
  6642 ;;		 -> inputEntry@fastenerString(32), 
  6643 ;;  from            2   46[COMRAM] PTR const unsigned char 
  6644 ;;		 -> inputEntryQuestions(132), 
  6645 ;; Auto vars:     Size  Location     Type
  6646 ;;  cp              2   48[COMRAM] PTR unsigned char 
  6647 ;;		 -> inputEntry@fastenerString(32), 
  6648 ;; Return value:  Size  Location     Type
  6649 ;;                  2   44[COMRAM] PTR unsigned char 
  6650 ;; Registers used:
  6651 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  6652 ;; Tracked objects:
  6653 ;;		On entry : 0/0
  6654 ;;		On exit  : 0/0
  6655 ;;		Unchanged: 0/0
  6656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6657 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6658 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6660 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6661 ;;Total ram usage:        6 bytes
  6662 ;; Hardware stack levels used:    1
  6663 ;; Hardware stack levels required when called:    4
  6664 ;; This function calls:
  6665 ;;		Nothing
  6666 ;; This function is called by:
  6667 ;;		_inputEntry
  6668 ;; This function uses a non-reentrant model
  6669 ;;
  6670                           
  6671                           	psect	text10
  6672  002A90                     __ptext10:
  6673                           	opt stack 0
  6674  002A90                     _strcpy:
  6675                           	opt stack 24
  6676                           
  6677                           ; BSR set to: 0
  6678                           ;incstack = 0
  6679  002A90  C02D  F031         	movff	strcpy@to,strcpy@cp
  6680  002A94  C02E  F032         	movff	strcpy@to+1,strcpy@cp+1
  6681  002A98  D004               	goto	l1253
  6682  002A9A  4A31               	infsnz	strcpy@cp,f,c
  6683  002A9C  2A32               	incf	strcpy@cp+1,f,c
  6684  002A9E  4A2F               	infsnz	strcpy@from,f,c
  6685  002AA0  2A30               	incf	strcpy@from+1,f,c
  6686  002AA2                     l1253:
  6687  002AA2  C02F  FFF6         	movff	strcpy@from,tblptrl
  6688  002AA6  C030  FFF7         	movff	strcpy@from+1,tblptrh
  6689  002AAA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6690  002AAA  6AF8               	clrf	tblptru,c
  6691  002AAC                     	endif
  6692  002AAC                     	if	0	;tblptru may be non-zero
  6693  002AAC                     	endif
  6694  002AAC  C031  FFD9         	movff	strcpy@cp,fsr2l
  6695  002AB0  C032  FFDA         	movff	strcpy@cp+1,fsr2h
  6696  002AB4  0008               	tblrd		*
  6697  002AB6  CFF5 FFDF          	movff	tablat,indf2
  6698  002ABA  50DF               	movf	indf2,w,c
  6699  002ABC  B4D8               	btfsc	status,2,c
  6700  002ABE  0012               	return	
  6701  002AC0  D7EC               	goto	l1254
  6702  002AC2                     __end_of_strcpy:
  6703                           	opt stack 0
  6704                           tosu	equ	0xFFF
  6705                           tosh	equ	0xFFE
  6706                           tosl	equ	0xFFD
  6707                           pclath	equ	0xFFA
  6708                           tblptru	equ	0xFF8
  6709                           tblptrh	equ	0xFF7
  6710                           tblptrl	equ	0xFF6
  6711                           tablat	equ	0xFF5
  6712                           prodh	equ	0xFF4
  6713                           prodl	equ	0xFF3
  6714                           indf0	equ	0xFEF
  6715                           postinc0	equ	0xFEE
  6716                           fsr0h	equ	0xFEA
  6717                           fsr0l	equ	0xFE9
  6718                           wreg	equ	0xFE8
  6719                           postdec1	equ	0xFE5
  6720                           plusw1	equ	0xFE3
  6721                           fsr1l	equ	0xFE1
  6722                           indf2	equ	0xFDF
  6723                           postinc2	equ	0xFDE
  6724                           postdec2	equ	0xFDD
  6725                           plusw2	equ	0xFDB
  6726                           fsr2h	equ	0xFDA
  6727                           fsr2l	equ	0xFD9
  6728                           status	equ	0xFD8
  6729                           
  6730 ;; *************** function _printErrorLCD *****************
  6731 ;; Defined at:
  6732 ;;		line 62 in file "helpers.c"
  6733 ;; Parameters:    Size  Location     Type
  6734 ;;  string          2   49[COMRAM] PTR unsigned char 
  6735 ;;		 -> errMsgs.noFasteners(32), errMsgs.tooManySpacers(32), errMsgs.tooManyWashers(32), errMsgs.tooManyNuts(32), 
  6736 ;;		 -> errMsgs.tooManyBolts(32), errMsgs.tooManyFasteners(32), errMsgs.badEntry(32), errMsgs(224), 
  6737 ;; Auto vars:     Size  Location     Type
  6738 ;;		None
  6739 ;; Return value:  Size  Location     Type
  6740 ;;                  1    wreg      void 
  6741 ;; Registers used:
  6742 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6743 ;; Tracked objects:
  6744 ;;		On entry : 0/0
  6745 ;;		On exit  : 0/0
  6746 ;;		Unchanged: 0/0
  6747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6748 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6750 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6751 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6752 ;;Total ram usage:        4 bytes
  6753 ;; Hardware stack levels used:    1
  6754 ;; Hardware stack levels required when called:    7
  6755 ;; This function calls:
  6756 ;;		_printStringLCD
  6757 ;; This function is called by:
  6758 ;;		_inputEntry
  6759 ;; This function uses a non-reentrant model
  6760 ;;
  6761                           
  6762                           	psect	text11
  6763  002B16                     __ptext11:
  6764                           	opt stack 0
  6765  002B16                     _printErrorLCD:
  6766                           	opt stack 21
  6767                           
  6768                           ;helpers.c: 63: printStringLCD(string);
  6769                           
  6770                           ;incstack = 0
  6771  002B16  C032  F02D         	movff	printErrorLCD@string,printStringLCD@string
  6772  002B1A  C033  F02E         	movff	printErrorLCD@string+1,printStringLCD@string+1
  6773  002B1E  EC2D  F00D         	call	_printStringLCD	;wreg free
  6774                           
  6775                           ;helpers.c: 64: _delay((unsigned long)((2000)*(40000000/4000.0)));
  6776  002B22  0E66               	movlw	102
  6777  002B24  0100               	movlb	0	; () banked
  6778  002B26  6F8B               	movwf	(??_printErrorLCD+1)& (0+255),b
  6779  002B28  0E76               	movlw	118
  6780  002B2A  6F8A               	movwf	??_printErrorLCD& (0+255),b
  6781  002B2C  0EC1               	movlw	193
  6782  002B2E                     u6997:
  6783  002B2E  2EE8               	decfsz	wreg,f,c
  6784  002B30  D7FE               	bra	u6997
  6785  002B32  2F8A               	decfsz	??_printErrorLCD& (0+255),f,b
  6786  002B34  D7FC               	bra	u6997
  6787  002B36  2F8B               	decfsz	(??_printErrorLCD+1)& (0+255),f,b
  6788  002B38  D7FA               	bra	u6997
  6789  002B3A  0012               	return		;funcret
  6790  002B3C                     __end_of_printErrorLCD:
  6791                           	opt stack 0
  6792                           tosu	equ	0xFFF
  6793                           tosh	equ	0xFFE
  6794                           tosl	equ	0xFFD
  6795                           pclath	equ	0xFFA
  6796                           tblptru	equ	0xFF8
  6797                           tblptrh	equ	0xFF7
  6798                           tblptrl	equ	0xFF6
  6799                           tablat	equ	0xFF5
  6800                           prodh	equ	0xFF4
  6801                           prodl	equ	0xFF3
  6802                           indf0	equ	0xFEF
  6803                           postinc0	equ	0xFEE
  6804                           fsr0h	equ	0xFEA
  6805                           fsr0l	equ	0xFE9
  6806                           wreg	equ	0xFE8
  6807                           postdec1	equ	0xFE5
  6808                           plusw1	equ	0xFE3
  6809                           fsr1l	equ	0xFE1
  6810                           indf2	equ	0xFDF
  6811                           postinc2	equ	0xFDE
  6812                           postdec2	equ	0xFDD
  6813                           plusw2	equ	0xFDB
  6814                           fsr2h	equ	0xFDA
  6815                           fsr2l	equ	0xFD9
  6816                           status	equ	0xFD8
  6817                           
  6818 ;; *************** function _lcd_set_cursor *****************
  6819 ;; Defined at:
  6820 ;;		line 81 in file "lcd.c"
  6821 ;; Parameters:    Size  Location     Type
  6822 ;;  x               1    wreg     unsigned char 
  6823 ;;  y               1   44[COMRAM] unsigned char 
  6824 ;; Auto vars:     Size  Location     Type
  6825 ;;  x               1   47[COMRAM] unsigned char 
  6826 ;;  i               1   46[COMRAM] unsigned char 
  6827 ;; Return value:  Size  Location     Type
  6828 ;;                  1    wreg      void 
  6829 ;; Registers used:
  6830 ;;		wreg, status,2, status,0, cstack
  6831 ;; Tracked objects:
  6832 ;;		On entry : 0/0
  6833 ;;		On exit  : 0/0
  6834 ;;		Unchanged: 0/0
  6835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6836 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6837 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6838 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6839 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6840 ;;Total ram usage:        4 bytes
  6841 ;; Hardware stack levels used:    1
  6842 ;; Hardware stack levels required when called:    7
  6843 ;; This function calls:
  6844 ;;		_lcdInst
  6845 ;;		_lcd_shift_cursor
  6846 ;; This function is called by:
  6847 ;;		_inputEntry
  6848 ;; This function uses a non-reentrant model
  6849 ;;
  6850                           
  6851                           	psect	text12
  6852  0029DC                     __ptext12:
  6853                           	opt stack 0
  6854  0029DC                     _lcd_set_cursor:
  6855                           	opt stack 21
  6856                           
  6857                           ;incstack = 0
  6858                           ;lcd_set_cursor@x stored from wreg
  6859  0029DC  6E30               	movwf	lcd_set_cursor@x,c
  6860                           
  6861                           ;lcd.c: 91: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  6862  0029DE  0E80               	movlw	128
  6863  0029E0  ECF7  F015         	call	_lcdInst
  6864  0029E4  0E41               	movlw	65
  6865  0029E6  6E2E               	movwf	??_lcd_set_cursor& (0+255),c
  6866  0029E8  0EEE               	movlw	238
  6867  0029EA                     u7007:
  6868  0029EA  2EE8               	decfsz	wreg,f,c
  6869  0029EC  D7FE               	bra	u7007
  6870  0029EE  2E2E               	decfsz	??_lcd_set_cursor& (0+255),f,c
  6871  0029F0  D7FC               	bra	u7007
  6872  0029F2  D000               	nop2	
  6873                           
  6874                           ;lcd.c: 92: for(unsigned char i = 0; i < y; i++){lcdInst(0xC0);;}
  6875  0029F4  0E00               	movlw	0
  6876  0029F6  6E2F               	movwf	lcd_set_cursor@i,c
  6877  0029F8  D004               	goto	l235
  6878  0029FA  0EC0               	movlw	192
  6879  0029FC  ECF7  F015         	call	_lcdInst
  6880  002A00  2A2F               	incf	lcd_set_cursor@i,f,c
  6881  002A02                     l235:
  6882  002A02  502D               	movf	lcd_set_cursor@y,w,c
  6883  002A04  5C2F               	subwf	lcd_set_cursor@i,w,c
  6884  002A06  A0D8               	btfss	status,0,c
  6885  002A08  D7F8               	goto	l236
  6886                           
  6887                           ;lcd.c: 93: if(x > 0){
  6888  002A0A  5030               	movf	lcd_set_cursor@x,w,c
  6889  002A0C  B4D8               	btfsc	status,2,c
  6890  002A0E  0012               	return	
  6891                           
  6892                           ;lcd.c: 94: lcd_shift_cursor(x, 1);
  6893  002A10  0E01               	movlw	1
  6894  002A12  6E2A               	movwf	lcd_shift_cursor@direction,c
  6895  002A14  5030               	movf	lcd_set_cursor@x,w,c
  6896  002A16  ECD4  F015         	call	_lcd_shift_cursor
  6897  002A1A  0012               	return	
  6898  002A1C                     __end_of_lcd_set_cursor:
  6899                           	opt stack 0
  6900                           tosu	equ	0xFFF
  6901                           tosh	equ	0xFFE
  6902                           tosl	equ	0xFFD
  6903                           pclath	equ	0xFFA
  6904                           tblptru	equ	0xFF8
  6905                           tblptrh	equ	0xFF7
  6906                           tblptrl	equ	0xFF6
  6907                           tablat	equ	0xFF5
  6908                           prodh	equ	0xFF4
  6909                           prodl	equ	0xFF3
  6910                           indf0	equ	0xFEF
  6911                           postinc0	equ	0xFEE
  6912                           fsr0h	equ	0xFEA
  6913                           fsr0l	equ	0xFE9
  6914                           wreg	equ	0xFE8
  6915                           postdec1	equ	0xFE5
  6916                           plusw1	equ	0xFE3
  6917                           fsr1l	equ	0xFE1
  6918                           indf2	equ	0xFDF
  6919                           postinc2	equ	0xFDE
  6920                           postdec2	equ	0xFDD
  6921                           plusw2	equ	0xFDB
  6922                           fsr2h	equ	0xFDA
  6923                           fsr2l	equ	0xFD9
  6924                           status	equ	0xFD8
  6925                           
  6926 ;; *************** function _lcd_shift_cursor *****************
  6927 ;; Defined at:
  6928 ;;		line 98 in file "lcd.c"
  6929 ;; Parameters:    Size  Location     Type
  6930 ;;  numChars        1    wreg     unsigned char 
  6931 ;;  direction       1   41[COMRAM] unsigned char 
  6932 ;; Auto vars:     Size  Location     Type
  6933 ;;  numChars        1   42[COMRAM] unsigned char 
  6934 ;;  n               1   43[COMRAM] unsigned char 
  6935 ;; Return value:  Size  Location     Type
  6936 ;;                  1    wreg      void 
  6937 ;; Registers used:
  6938 ;;		wreg, status,2, status,0, cstack
  6939 ;; Tracked objects:
  6940 ;;		On entry : 0/0
  6941 ;;		On exit  : 0/0
  6942 ;;		Unchanged: 0/0
  6943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6944 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6945 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6947 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6948 ;;Total ram usage:        3 bytes
  6949 ;; Hardware stack levels used:    1
  6950 ;; Hardware stack levels required when called:    6
  6951 ;; This function calls:
  6952 ;;		_lcdInst
  6953 ;; This function is called by:
  6954 ;;		_lcd_set_cursor
  6955 ;; This function uses a non-reentrant model
  6956 ;;
  6957                           
  6958                           	psect	text13
  6959  002BA8                     __ptext13:
  6960                           	opt stack 0
  6961  002BA8                     _lcd_shift_cursor:
  6962                           	opt stack 21
  6963                           
  6964                           ;incstack = 0
  6965                           ;lcd_shift_cursor@numChars stored from wreg
  6966  002BA8  6E2B               	movwf	lcd_shift_cursor@numChars,c
  6967                           
  6968                           ;lcd.c: 110: for(unsigned char n = numChars; n > 0; n--){
  6969  002BAA  C02B  F02C         	movff	lcd_shift_cursor@numChars,lcd_shift_cursor@n
  6970  002BAE                     l4445:
  6971  002BAE  502C               	movf	lcd_shift_cursor@n,w,c
  6972  002BB0  B4D8               	btfsc	status,2,c
  6973  002BB2  0012               	return	
  6974                           
  6975                           ;lcd.c: 111: lcdInst((unsigned char)(0x10 | (direction << 2)));
  6976  002BB4  442A               	rlncf	lcd_shift_cursor@direction,w,c
  6977  002BB6  46E8               	rlncf	wreg,f,c
  6978  002BB8  0BFC               	andlw	252
  6979  002BBA  0910               	iorlw	16
  6980  002BBC  ECF7  F015         	call	_lcdInst
  6981  002BC0  062C               	decf	lcd_shift_cursor@n,f,c
  6982  002BC2  D7F5               	goto	l4445
  6983  002BC4                     __end_of_lcd_shift_cursor:
  6984                           	opt stack 0
  6985                           tosu	equ	0xFFF
  6986                           tosh	equ	0xFFE
  6987                           tosl	equ	0xFFD
  6988                           pclath	equ	0xFFA
  6989                           tblptru	equ	0xFF8
  6990                           tblptrh	equ	0xFF7
  6991                           tblptrl	equ	0xFF6
  6992                           tablat	equ	0xFF5
  6993                           prodh	equ	0xFF4
  6994                           prodl	equ	0xFF3
  6995                           indf0	equ	0xFEF
  6996                           postinc0	equ	0xFEE
  6997                           fsr0h	equ	0xFEA
  6998                           fsr0l	equ	0xFE9
  6999                           wreg	equ	0xFE8
  7000                           postdec1	equ	0xFE5
  7001                           plusw1	equ	0xFE3
  7002                           fsr1l	equ	0xFE1
  7003                           indf2	equ	0xFDF
  7004                           postinc2	equ	0xFDE
  7005                           postdec2	equ	0xFDD
  7006                           plusw2	equ	0xFDB
  7007                           fsr2h	equ	0xFDA
  7008                           fsr2l	equ	0xFD9
  7009                           status	equ	0xFD8
  7010                           
  7011 ;; *************** function _hibernate *****************
  7012 ;; Defined at:
  7013 ;;		line 11 in file "menu.c"
  7014 ;; Parameters:    Size  Location     Type
  7015 ;;		None
  7016 ;; Auto vars:     Size  Location     Type
  7017 ;;  pressed         2   49[COMRAM] int 
  7018 ;; Return value:  Size  Location     Type
  7019 ;;                  1    wreg      void 
  7020 ;; Registers used:
  7021 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7022 ;; Tracked objects:
  7023 ;;		On entry : 0/0
  7024 ;;		On exit  : 0/0
  7025 ;;		Unchanged: 0/0
  7026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7028 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7029 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7030 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7031 ;;Total ram usage:        6 bytes
  7032 ;; Hardware stack levels used:    1
  7033 ;; Hardware stack levels required when called:    7
  7034 ;; This function calls:
  7035 ;;		_pollKeypad
  7036 ;;		_printStringLCD
  7037 ;; This function is called by:
  7038 ;;		_main
  7039 ;;		_mainMenu
  7040 ;; This function uses a non-reentrant model
  7041 ;;
  7042                           
  7043                           	psect	text14
  7044  002A1C                     __ptext14:
  7045                           	opt stack 0
  7046  002A1C                     _hibernate:
  7047                           	opt stack 22
  7048                           
  7049                           ;menu.c: 12: printStringLCD("Press 1 to begin");
  7050                           
  7051                           ;incstack = 0
  7052  002A1C  0E01               	movlw	low STR_13
  7053  002A1E  6E2D               	movwf	printStringLCD@string,c
  7054  002A20  0EFF               	movlw	high STR_13
  7055  002A22  6E2E               	movwf	printStringLCD@string+1,c
  7056  002A24  EC2D  F00D         	call	_printStringLCD	;wreg free
  7057  002A28                     
  7058                           ;menu.c: 15: pressed = pollKeypad();
  7059  002A28  EC61  F015         	call	_pollKeypad	;wreg free
  7060  002A2C  0100               	movlb	0	; () banked
  7061  002A2E  6F8A               	movwf	??_hibernate& (0+255),b
  7062  002A30  518A               	movf	??_hibernate& (0+255),w,b
  7063  002A32  6E32               	movwf	hibernate@pressed,c
  7064  002A34  6A33               	clrf	hibernate@pressed+1,c
  7065                           
  7066                           ; BSR set to: 0
  7067                           ;menu.c: 16: if (pressed - 48 == 1) {
  7068  002A36  0ED0               	movlw	208
  7069  002A38  6F8A               	movwf	??_hibernate& (0+255),b
  7070  002A3A  0EFF               	movlw	255
  7071  002A3C  6F8B               	movwf	(??_hibernate+1)& (0+255),b
  7072  002A3E  C032  F08C         	movff	hibernate@pressed,??_hibernate+2
  7073  002A42  C033  F08D         	movff	hibernate@pressed+1,??_hibernate+3
  7074  002A46  518A               	movf	??_hibernate& (0+255),w,b
  7075  002A48  278C               	addwf	(??_hibernate+2)& (0+255),f,b
  7076  002A4A  518B               	movf	(??_hibernate+1)& (0+255),w,b
  7077  002A4C  238D               	addwfc	(??_hibernate+3)& (0+255),f,b
  7078  002A4E  058C               	decf	(??_hibernate+2)& (0+255),w,b
  7079  002A50  118D               	iorwf	(??_hibernate+3)& (0+255),w,b
  7080  002A52  B4D8               	btfsc	status,2,c
  7081  002A54  0012               	return	
  7082  002A56  D7E8               	goto	l314
  7083  002A58                     __end_of_hibernate:
  7084                           	opt stack 0
  7085                           tosu	equ	0xFFF
  7086                           tosh	equ	0xFFE
  7087                           tosl	equ	0xFFD
  7088                           pclath	equ	0xFFA
  7089                           tblptru	equ	0xFF8
  7090                           tblptrh	equ	0xFF7
  7091                           tblptrl	equ	0xFF6
  7092                           tablat	equ	0xFF5
  7093                           prodh	equ	0xFF4
  7094                           prodl	equ	0xFF3
  7095                           indf0	equ	0xFEF
  7096                           postinc0	equ	0xFEE
  7097                           fsr0h	equ	0xFEA
  7098                           fsr0l	equ	0xFE9
  7099                           wreg	equ	0xFE8
  7100                           postdec1	equ	0xFE5
  7101                           plusw1	equ	0xFE3
  7102                           fsr1l	equ	0xFE1
  7103                           indf2	equ	0xFDF
  7104                           postinc2	equ	0xFDE
  7105                           postdec2	equ	0xFDD
  7106                           plusw2	equ	0xFDB
  7107                           fsr2h	equ	0xFDA
  7108                           fsr2l	equ	0xFD9
  7109                           status	equ	0xFD8
  7110                           
  7111 ;; *************** function _printStringLCD *****************
  7112 ;; Defined at:
  7113 ;;		line 7 in file "helpers.c"
  7114 ;; Parameters:    Size  Location     Type
  7115 ;;  string          2   44[COMRAM] PTR unsigned char 
  7116 ;;		 -> STR_17(30), inputEntry@fastenerString(32), inputEntryQuestions(132), STR_14(26), 
  7117 ;;		 -> STR_13(17), errMsgs.noFasteners(32), errMsgs.tooManySpacers(32), errMsgs.tooManyWashers(32), 
  7118 ;;		 -> errMsgs.tooManyNuts(32), errMsgs.tooManyBolts(32), errMsgs.tooManyFasteners(32), errMsgs.badEntry(32), 
  7119 ;;		 -> errMsgs(224), 
  7120 ;; Auto vars:     Size  Location     Type
  7121 ;;  i               2    8[BANK0 ] int 
  7122 ;;  newlineCharI    2    6[BANK0 ] int 
  7123 ;;  newlineIndex    2    4[BANK0 ] int 
  7124 ;;  spaceIndex      2    2[BANK0 ] int 
  7125 ;;  j               2    0[BANK0 ] int 
  7126 ;; Return value:  Size  Location     Type
  7127 ;;                  1    wreg      void 
  7128 ;; Registers used:
  7129 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7130 ;; Tracked objects:
  7131 ;;		On entry : 0/0
  7132 ;;		On exit  : 0/0
  7133 ;;		Unchanged: 0/0
  7134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7135 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7136 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7137 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7138 ;;      Totals:         5      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7139 ;;Total ram usage:       15 bytes
  7140 ;; Hardware stack levels used:    1
  7141 ;; Hardware stack levels required when called:    6
  7142 ;; This function calls:
  7143 ;;		_lcdInst
  7144 ;;		_putch
  7145 ;; This function is called by:
  7146 ;;		_hibernate
  7147 ;;		_viewLogs
  7148 ;;		_inputEntry
  7149 ;;		_mainMenu
  7150 ;;		_printErrorLCD
  7151 ;; This function uses a non-reentrant model
  7152 ;;
  7153                           
  7154                           	psect	text15
  7155  001A5A                     __ptext15:
  7156                           	opt stack 0
  7157  001A5A                     _printStringLCD:
  7158                           	opt stack 22
  7159                           
  7160                           ;helpers.c: 12: int i;
  7161                           ;helpers.c: 13: int j = 1;
  7162                           
  7163                           ; BSR set to: 0
  7164                           ;incstack = 0
  7165  001A5A  0E00               	movlw	0
  7166  001A5C  0100               	movlb	0	; () banked
  7167  001A5E  6F81               	movwf	(printStringLCD@j+1)& (0+255),b
  7168  001A60  0E01               	movlw	1
  7169  001A62  6F80               	movwf	printStringLCD@j& (0+255),b
  7170                           
  7171                           ;helpers.c: 14: int newlineIndex = 16;
  7172  001A64  0E00               	movlw	0
  7173  001A66  6F85               	movwf	(printStringLCD@newlineIndex+1)& (0+255),b
  7174  001A68  0E10               	movlw	16
  7175  001A6A  6F84               	movwf	printStringLCD@newlineIndex& (0+255),b
  7176                           
  7177                           ; BSR set to: 0
  7178                           ;helpers.c: 15: int newlineCharIndex = -1;
  7179  001A6C  6986               	setf	printStringLCD@newlineCharIndex& (0+255),b
  7180  001A6E  6987               	setf	(printStringLCD@newlineCharIndex+1)& (0+255),b
  7181                           
  7182                           ;helpers.c: 16: int spaceIndex = 0;
  7183  001A70  0E00               	movlw	0
  7184  001A72  6F83               	movwf	(printStringLCD@spaceIndex+1)& (0+255),b
  7185  001A74  0E00               	movlw	0
  7186  001A76  6F82               	movwf	printStringLCD@spaceIndex& (0+255),b
  7187                           
  7188                           ; BSR set to: 0
  7189                           ;helpers.c: 18: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  7190  001A78  0E01               	movlw	1
  7191  001A7A  ECF7  F015         	call	_lcdInst
  7192  001A7E  0EC3               	movlw	195
  7193  001A80  6E2F               	movwf	??_printStringLCD& (0+255),c
  7194  001A82  0ECD               	movlw	205
  7195  001A84                     u7017:
  7196  001A84  2EE8               	decfsz	wreg,f,c
  7197  001A86  D7FE               	bra	u7017
  7198  001A88  2E2F               	decfsz	??_printStringLCD& (0+255),f,c
  7199  001A8A  D7FC               	bra	u7017
  7200  001A8C  F000               	nop	
  7201                           
  7202                           ;helpers.c: 19: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  7203  001A8E  0E80               	movlw	128
  7204  001A90  ECF7  F015         	call	_lcdInst
  7205  001A94  0E41               	movlw	65
  7206  001A96  6E2F               	movwf	??_printStringLCD& (0+255),c
  7207  001A98  0EEE               	movlw	238
  7208  001A9A                     u7027:
  7209  001A9A  2EE8               	decfsz	wreg,f,c
  7210  001A9C  D7FE               	bra	u7027
  7211  001A9E  2E2F               	decfsz	??_printStringLCD& (0+255),f,c
  7212  001AA0  D7FC               	bra	u7027
  7213  001AA2  D000               	nop2	
  7214                           
  7215                           ;helpers.c: 22: for (i = 0; i < 17; i++) {
  7216  001AA4  0E00               	movlw	0
  7217  001AA6  0100               	movlb	0	; () banked
  7218  001AA8  6F89               	movwf	(printStringLCD@i+1)& (0+255),b
  7219  001AAA  0E00               	movlw	0
  7220  001AAC  6F88               	movwf	printStringLCD@i& (0+255),b
  7221                           
  7222                           ; BSR set to: 0
  7223  001AAE  BF89               	btfsc	(printStringLCD@i+1)& (0+255),7,b
  7224  001AB0  D008               	goto	l449
  7225  001AB2  5189               	movf	(printStringLCD@i+1)& (0+255),w,b
  7226  001AB4  E105               	bnz	u5100
  7227  001AB6  0E11               	movlw	17
  7228  001AB8  5D88               	subwf	printStringLCD@i& (0+255),w,b
  7229  001ABA  B0D8               	btfsc	status,0,c
  7230  001ABC  D08D               	goto	u5210
  7231  001ABE  D001               	goto	l449
  7232  001AC0                     u5100:
  7233                           
  7234                           ; BSR set to: 0
  7235  001AC0  D08B               	goto	u5210
  7236  001AC2                     l449:
  7237                           
  7238                           ; BSR set to: 0
  7239                           ;helpers.c: 23: if (string[i] == 0) break;
  7240                           
  7241                           ; BSR set to: 0
  7242  001AC2  5188               	movf	printStringLCD@i& (0+255),w,b
  7243  001AC4  242D               	addwf	printStringLCD@string,w,c
  7244  001AC6  6E2F               	movwf	??_printStringLCD& (0+255),c
  7245  001AC8  5189               	movf	(printStringLCD@i+1)& (0+255),w,b
  7246  001ACA  202E               	addwfc	printStringLCD@string+1,w,c
  7247  001ACC  6E30               	movwf	(??_printStringLCD+1)& (0+255),c
  7248  001ACE  C02F  FFF6         	movff	??_printStringLCD,tblptrl
  7249  001AD2  C030  FFF7         	movff	??_printStringLCD+1,tblptrh
  7250  001AD6  0E00               	movlw	low (__mediumconst shr (0+16))
  7251  001AD8  6EF8               	movwf	tblptru,c
  7252  001ADA  0E0F               	movlw	(high __ramtop+-1)
  7253  001ADC  64F7               	cpfsgt	tblptrh,c
  7254  001ADE  D003               	bra	u5117
  7255  001AE0  0008               	tblrd		*
  7256  001AE2  50F5               	movf	tablat,w,c
  7257  001AE4  D005               	bra	u5110
  7258  001AE6                     u5117:
  7259  001AE6  CFF6 FFE9          	movff	tblptrl,fsr0l
  7260  001AEA  CFF7 FFEA          	movff	tblptrh,fsr0h
  7261  001AEE  50EF               	movf	indf0,w,c
  7262  001AF0                     u5110:
  7263  001AF0  0900               	iorlw	0
  7264  001AF2  B4D8               	btfsc	status,2,c
  7265  001AF4  D071               	goto	u5210
  7266                           
  7267                           ;helpers.c: 24: if (string[i] == 32) {
  7268  001AF6  0100               	movlb	0	; () banked
  7269  001AF8  5188               	movf	printStringLCD@i& (0+255),w,b
  7270  001AFA  242D               	addwf	printStringLCD@string,w,c
  7271  001AFC  6E2F               	movwf	??_printStringLCD& (0+255),c
  7272  001AFE  5189               	movf	(printStringLCD@i+1)& (0+255),w,b
  7273  001B00  202E               	addwfc	printStringLCD@string+1,w,c
  7274  001B02  6E30               	movwf	(??_printStringLCD+1)& (0+255),c
  7275  001B04  C02F  FFF6         	movff	??_printStringLCD,tblptrl
  7276  001B08  C030  FFF7         	movff	??_printStringLCD+1,tblptrh
  7277  001B0C  0E00               	movlw	low (__mediumconst shr (0+16))
  7278  001B0E  6EF8               	movwf	tblptru,c
  7279  001B10  0E0F               	movlw	(high __ramtop+-1)
  7280  001B12  64F7               	cpfsgt	tblptrh,c
  7281  001B14  D003               	bra	u5137
  7282  001B16  0008               	tblrd		*
  7283  001B18  50F5               	movf	tablat,w,c
  7284  001B1A  D005               	bra	u5130
  7285  001B1C                     u5137:
  7286  001B1C  CFF6 FFE9          	movff	tblptrl,fsr0l
  7287  001B20  CFF7 FFEA          	movff	tblptrh,fsr0h
  7288  001B24  50EF               	movf	indf0,w,c
  7289  001B26                     u5130:
  7290  001B26  0A20               	xorlw	32
  7291  001B28  A4D8               	btfss	status,2,c
  7292  001B2A  D004               	goto	l452
  7293                           
  7294                           ;helpers.c: 25: spaceIndex = i;
  7295  001B2C  C088  F082         	movff	printStringLCD@i,printStringLCD@spaceIndex
  7296  001B30  C089  F083         	movff	printStringLCD@i+1,printStringLCD@spaceIndex+1
  7297  001B34                     l452:
  7298                           
  7299                           ;helpers.c: 26: }
  7300                           ;helpers.c: 28: if (string[i] == 10) {
  7301  001B34  0100               	movlb	0	; () banked
  7302  001B36  5188               	movf	printStringLCD@i& (0+255),w,b
  7303  001B38  242D               	addwf	printStringLCD@string,w,c
  7304  001B3A  6E2F               	movwf	??_printStringLCD& (0+255),c
  7305  001B3C  5189               	movf	(printStringLCD@i+1)& (0+255),w,b
  7306  001B3E  202E               	addwfc	printStringLCD@string+1,w,c
  7307  001B40  6E30               	movwf	(??_printStringLCD+1)& (0+255),c
  7308  001B42  C02F  FFF6         	movff	??_printStringLCD,tblptrl
  7309  001B46  C030  FFF7         	movff	??_printStringLCD+1,tblptrh
  7310  001B4A  0E00               	movlw	low (__mediumconst shr (0+16))
  7311  001B4C  6EF8               	movwf	tblptru,c
  7312  001B4E  0E0F               	movlw	(high __ramtop+-1)
  7313  001B50  64F7               	cpfsgt	tblptrh,c
  7314  001B52  D003               	bra	u5157
  7315  001B54  0008               	tblrd		*
  7316  001B56  50F5               	movf	tablat,w,c
  7317  001B58  D005               	bra	u5150
  7318  001B5A                     u5157:
  7319  001B5A  CFF6 FFE9          	movff	tblptrl,fsr0l
  7320  001B5E  CFF7 FFEA          	movff	tblptrh,fsr0h
  7321  001B62  50EF               	movf	indf0,w,c
  7322  001B64                     u5150:
  7323  001B64  0A0A               	xorlw	10
  7324  001B66  A4D8               	btfss	status,2,c
  7325  001B68  D008               	goto	l453
  7326                           
  7327                           ;helpers.c: 29: newlineCharIndex = i;
  7328  001B6A  C088  F086         	movff	printStringLCD@i,printStringLCD@newlineCharIndex
  7329  001B6E  C089  F087         	movff	printStringLCD@i+1,printStringLCD@newlineCharIndex+1
  7330                           
  7331                           ;helpers.c: 30: newlineIndex = newlineCharIndex;
  7332  001B72  C086  F084         	movff	printStringLCD@newlineCharIndex,printStringLCD@newlineIndex
  7333  001B76  C087  F085         	movff	printStringLCD@newlineCharIndex+1,printStringLCD@newlineIndex+1
  7334  001B7A                     l453:
  7335                           
  7336                           ;helpers.c: 31: }
  7337                           ;helpers.c: 34: if (i == 16 && string[i] != 32 && newlineCharIndex < 0) {
  7338  001B7A  0E10               	movlw	16
  7339  001B7C  0100               	movlb	0	; () banked
  7340  001B7E  1988               	xorwf	printStringLCD@i& (0+255),w,b
  7341  001B80  1189               	iorwf	(printStringLCD@i+1)& (0+255),w,b
  7342  001B82  A4D8               	btfss	status,2,c
  7343  001B84  D021               	goto	l454
  7344                           
  7345                           ; BSR set to: 0
  7346  001B86  5188               	movf	printStringLCD@i& (0+255),w,b
  7347  001B88  242D               	addwf	printStringLCD@string,w,c
  7348  001B8A  6E2F               	movwf	??_printStringLCD& (0+255),c
  7349  001B8C  5189               	movf	(printStringLCD@i+1)& (0+255),w,b
  7350  001B8E  202E               	addwfc	printStringLCD@string+1,w,c
  7351  001B90  6E30               	movwf	(??_printStringLCD+1)& (0+255),c
  7352  001B92  C02F  FFF6         	movff	??_printStringLCD,tblptrl
  7353  001B96  C030  FFF7         	movff	??_printStringLCD+1,tblptrh
  7354  001B9A  0E00               	movlw	low (__mediumconst shr (0+16))
  7355  001B9C  6EF8               	movwf	tblptru,c
  7356  001B9E  0E0F               	movlw	(high __ramtop+-1)
  7357  001BA0  64F7               	cpfsgt	tblptrh,c
  7358  001BA2  D003               	bra	u5187
  7359  001BA4  0008               	tblrd		*
  7360  001BA6  50F5               	movf	tablat,w,c
  7361  001BA8  D005               	bra	u5180
  7362  001BAA                     u5187:
  7363  001BAA  CFF6 FFE9          	movff	tblptrl,fsr0l
  7364  001BAE  CFF7 FFEA          	movff	tblptrh,fsr0h
  7365  001BB2  50EF               	movf	indf0,w,c
  7366  001BB4                     u5180:
  7367  001BB4  0A20               	xorlw	32
  7368  001BB6  B4D8               	btfsc	status,2,c
  7369  001BB8  D007               	goto	l454
  7370  001BBA  0100               	movlb	0	; () banked
  7371  001BBC  AF87               	btfss	(printStringLCD@newlineCharIndex+1)& (0+255),7,b
  7372  001BBE  D004               	goto	l454
  7373                           
  7374                           ; BSR set to: 0
  7375                           ;helpers.c: 35: newlineIndex = spaceIndex;
  7376  001BC0  C082  F084         	movff	printStringLCD@spaceIndex,printStringLCD@newlineIndex
  7377  001BC4  C083  F085         	movff	printStringLCD@spaceIndex+1,printStringLCD@newlineIndex+1
  7378  001BC8                     l454:
  7379                           
  7380                           ; BSR set to: 0
  7381  001BC8  0100               	movlb	0	; () banked
  7382  001BCA  4B88               	infsnz	printStringLCD@i& (0+255),f,b
  7383  001BCC  2B89               	incf	(printStringLCD@i+1)& (0+255),f,b
  7384                           
  7385                           ; BSR set to: 0
  7386  001BCE  BF89               	btfsc	(printStringLCD@i+1)& (0+255),7,b
  7387  001BD0  D778               	goto	l449
  7388  001BD2  5189               	movf	(printStringLCD@i+1)& (0+255),w,b
  7389  001BD4  E101               	bnz	l4495
  7390  001BD6  D76F               	goto	L7
  7391  001BD8                     u5210:
  7392  001BD8                     l4495:
  7393                           
  7394                           ;helpers.c: 36: }
  7395                           ;helpers.c: 37: }
  7396                           ;helpers.c: 40: for (i = 0; i < 32; i++) {
  7397  001BD8  0E00               	movlw	0
  7398  001BDA  0100               	movlb	0	; () banked
  7399  001BDC  6F89               	movwf	(printStringLCD@i+1)& (0+255),b
  7400  001BDE  0E00               	movlw	0
  7401  001BE0  6F88               	movwf	printStringLCD@i& (0+255),b
  7402                           
  7403                           ; BSR set to: 0
  7404  001BE2  BF89               	btfsc	(printStringLCD@i+1)& (0+255),7,b
  7405  001BE4  D008               	goto	l455
  7406  001BE6  5189               	movf	(printStringLCD@i+1)& (0+255),w,b
  7407  001BE8  E105               	bnz	u5220
  7408  001BEA  0E20               	movlw	32
  7409  001BEC  5D88               	subwf	printStringLCD@i& (0+255),w,b
  7410  001BEE  B0D8               	btfsc	status,0,c
  7411  001BF0  0012               	return	
  7412  001BF2  D001               	goto	l455
  7413  001BF4                     u5220:
  7414                           
  7415                           ; BSR set to: 0
  7416  001BF4  0012               	return	
  7417  001BF6                     l455:
  7418                           
  7419                           ; BSR set to: 0
  7420                           ;helpers.c: 41: if (string[i] == 0) break;
  7421                           
  7422                           ; BSR set to: 0
  7423  001BF6  5188               	movf	printStringLCD@i& (0+255),w,b
  7424  001BF8  242D               	addwf	printStringLCD@string,w,c
  7425  001BFA  6E2F               	movwf	??_printStringLCD& (0+255),c
  7426  001BFC  5189               	movf	(printStringLCD@i+1)& (0+255),w,b
  7427  001BFE  202E               	addwfc	printStringLCD@string+1,w,c
  7428  001C00  6E30               	movwf	(??_printStringLCD+1)& (0+255),c
  7429  001C02  C02F  FFF6         	movff	??_printStringLCD,tblptrl
  7430  001C06  C030  FFF7         	movff	??_printStringLCD+1,tblptrh
  7431  001C0A  0E00               	movlw	low (__mediumconst shr (0+16))
  7432  001C0C  6EF8               	movwf	tblptru,c
  7433  001C0E  0E0F               	movlw	(high __ramtop+-1)
  7434  001C10  64F7               	cpfsgt	tblptrh,c
  7435  001C12  D003               	bra	u5237
  7436  001C14  0008               	tblrd		*
  7437  001C16  50F5               	movf	tablat,w,c
  7438  001C18  D005               	bra	u5230
  7439  001C1A                     u5237:
  7440  001C1A  CFF6 FFE9          	movff	tblptrl,fsr0l
  7441  001C1E  CFF7 FFEA          	movff	tblptrh,fsr0h
  7442  001C22  50EF               	movf	indf0,w,c
  7443  001C24                     u5230:
  7444  001C24  0900               	iorlw	0
  7445  001C26  B4D8               	btfsc	status,2,c
  7446  001C28  0012               	return	
  7447                           
  7448                           ;helpers.c: 52: if (i == newlineIndex && j < LCD_SIZE_VERT) {
  7449  001C2A  0100               	movlb	0	; () banked
  7450  001C2C  5184               	movf	printStringLCD@newlineIndex& (0+255),w,b
  7451  001C2E  1988               	xorwf	printStringLCD@i& (0+255),w,b
  7452  001C30  E153               	bnz	l4517
  7453  001C32  5185               	movf	(printStringLCD@newlineIndex+1)& (0+255),w,b
  7454  001C34  1989               	xorwf	(printStringLCD@i+1)& (0+255),w,b
  7455  001C36  A4D8               	btfss	status,2,c
  7456  001C38  D04F               	goto	l459
  7457                           
  7458                           ; BSR set to: 0
  7459  001C3A  0E82               	movlw	low _LCD_SIZE_VERT
  7460  001C3C  6EF6               	movwf	tblptrl,c
  7461  001C3E                     	if	1	;There is more than 1 active tblptr byte
  7462  001C3E  0EFC               	movlw	high _LCD_SIZE_VERT
  7463  001C40  6EF7               	movwf	tblptrh,c
  7464  001C42                     	endif
  7465  001C42                     	if	1	;There are 3 active tblptr bytes
  7466  001C42  0E00               	movlw	low (_LCD_SIZE_VERT shr (0+16))
  7467  001C44  6EF8               	movwf	tblptru,c
  7468  001C46                     	endif
  7469  001C46  0008               	tblrd		*
  7470  001C48  50F5               	movf	tablat,w,c
  7471  001C4A  6E2F               	movwf	??_printStringLCD& (0+255),c
  7472  001C4C  6A30               	clrf	(??_printStringLCD+1)& (0+255),c
  7473  001C4E  502F               	movf	??_printStringLCD,w,c
  7474  001C50  5D80               	subwf	printStringLCD@j& (0+255),w,b
  7475  001C52  5181               	movf	(printStringLCD@j+1)& (0+255),w,b
  7476  001C54  0A80               	xorlw	128
  7477  001C56  6E31               	movwf	(??_printStringLCD+2)& (0+255),c
  7478  001C58  5030               	movf	??_printStringLCD+1,w,c
  7479  001C5A  0A80               	xorlw	128
  7480  001C5C  5831               	subwfb	(??_printStringLCD+2)& (0+255),w,c
  7481  001C5E  B0D8               	btfsc	status,0,c
  7482  001C60  D03B               	goto	l459
  7483                           
  7484                           ; BSR set to: 0
  7485                           ;helpers.c: 53: j++;
  7486  001C62  4B80               	infsnz	printStringLCD@j& (0+255),f,b
  7487  001C64  2B81               	incf	(printStringLCD@j+1)& (0+255),f,b
  7488                           
  7489                           ; BSR set to: 0
  7490                           ;helpers.c: 54: lcdInst(0xC0);;
  7491  001C66  0EC0               	movlw	192
  7492  001C68  ECF7  F015         	call	_lcdInst
  7493                           
  7494                           ;helpers.c: 55: if (string[i] == 32 || string[i] == 10) continue;
  7495  001C6C  0100               	movlb	0	; () banked
  7496  001C6E  5188               	movf	printStringLCD@i& (0+255),w,b
  7497  001C70  242D               	addwf	printStringLCD@string,w,c
  7498  001C72  6E2F               	movwf	??_printStringLCD& (0+255),c
  7499  001C74  5189               	movf	(printStringLCD@i+1)& (0+255),w,b
  7500  001C76  202E               	addwfc	printStringLCD@string+1,w,c
  7501  001C78  6E30               	movwf	(??_printStringLCD+1)& (0+255),c
  7502  001C7A  C02F  FFF6         	movff	??_printStringLCD,tblptrl
  7503  001C7E  C030  FFF7         	movff	??_printStringLCD+1,tblptrh
  7504  001C82  0E00               	movlw	low (__mediumconst shr (0+16))
  7505  001C84  6EF8               	movwf	tblptru,c
  7506  001C86  0E0F               	movlw	(high __ramtop+-1)
  7507  001C88  64F7               	cpfsgt	tblptrh,c
  7508  001C8A  D003               	bra	u5277
  7509  001C8C  0008               	tblrd		*
  7510  001C8E  50F5               	movf	tablat,w,c
  7511  001C90  D005               	bra	u5270
  7512  001C92                     u5277:
  7513  001C92  CFF6 FFE9          	movff	tblptrl,fsr0l
  7514  001C96  CFF7 FFEA          	movff	tblptrh,fsr0h
  7515  001C9A  50EF               	movf	indf0,w,c
  7516  001C9C                     u5270:
  7517  001C9C  0A20               	xorlw	32
  7518  001C9E  B4D8               	btfsc	status,2,c
  7519  001CA0  D035               	goto	l462
  7520  001CA2  0100               	movlb	0	; () banked
  7521  001CA4  5188               	movf	printStringLCD@i& (0+255),w,b
  7522  001CA6  242D               	addwf	printStringLCD@string,w,c
  7523  001CA8  6E2F               	movwf	??_printStringLCD& (0+255),c
  7524  001CAA  5189               	movf	(printStringLCD@i+1)& (0+255),w,b
  7525  001CAC  202E               	addwfc	printStringLCD@string+1,w,c
  7526  001CAE  6E30               	movwf	(??_printStringLCD+1)& (0+255),c
  7527  001CB0  C02F  FFF6         	movff	??_printStringLCD,tblptrl
  7528  001CB4  C030  FFF7         	movff	??_printStringLCD+1,tblptrh
  7529  001CB8  0E00               	movlw	low (__mediumconst shr (0+16))
  7530  001CBA  6EF8               	movwf	tblptru,c
  7531  001CBC  0E0F               	movlw	(high __ramtop+-1)
  7532  001CBE  64F7               	cpfsgt	tblptrh,c
  7533  001CC0  D003               	bra	u5297
  7534  001CC2  0008               	tblrd		*
  7535  001CC4  50F5               	movf	tablat,w,c
  7536  001CC6  D005               	bra	u5290
  7537  001CC8                     u5297:
  7538  001CC8  CFF6 FFE9          	movff	tblptrl,fsr0l
  7539  001CCC  CFF7 FFEA          	movff	tblptrh,fsr0h
  7540  001CD0  50EF               	movf	indf0,w,c
  7541  001CD2                     u5290:
  7542  001CD2  0A0A               	xorlw	10
  7543  001CD4  B4D8               	btfsc	status,2,c
  7544  001CD6  D01A               	goto	l462
  7545  001CD8                     l459:
  7546  001CD8                     l4517:
  7547                           
  7548                           ;helpers.c: 56: }
  7549                           ;helpers.c: 58: putch(string[i]);
  7550  001CD8  0100               	movlb	0	; () banked
  7551  001CDA  5188               	movf	printStringLCD@i& (0+255),w,b
  7552  001CDC  242D               	addwf	printStringLCD@string,w,c
  7553  001CDE  6E2F               	movwf	??_printStringLCD& (0+255),c
  7554  001CE0  5189               	movf	(printStringLCD@i+1)& (0+255),w,b
  7555  001CE2  202E               	addwfc	printStringLCD@string+1,w,c
  7556  001CE4  6E30               	movwf	(??_printStringLCD+1)& (0+255),c
  7557  001CE6  C02F  FFF6         	movff	??_printStringLCD,tblptrl
  7558  001CEA  C030  FFF7         	movff	??_printStringLCD+1,tblptrh
  7559  001CEE  0E00               	movlw	low (__mediumconst shr (0+16))
  7560  001CF0  6EF8               	movwf	tblptru,c
  7561  001CF2  0E0F               	movlw	(high __ramtop+-1)
  7562  001CF4  64F7               	cpfsgt	tblptrh,c
  7563  001CF6  D003               	bra	u5317
  7564  001CF8  0008               	tblrd		*
  7565  001CFA  50F5               	movf	tablat,w,c
  7566  001CFC  D005               	bra	u5310
  7567  001CFE                     u5317:
  7568  001CFE  CFF6 FFE9          	movff	tblptrl,fsr0l
  7569  001D02  CFF7 FFEA          	movff	tblptrh,fsr0h
  7570  001D06  50EF               	movf	indf0,w,c
  7571  001D08                     u5310:
  7572  001D08  ECED  F015         	call	_putch
  7573  001D0C                     l462:
  7574  001D0C  0100               	movlb	0	; () banked
  7575  001D0E  4B88               	infsnz	printStringLCD@i& (0+255),f,b
  7576  001D10  2B89               	incf	(printStringLCD@i+1)& (0+255),f,b
  7577                           
  7578                           ; BSR set to: 0
  7579  001D12  BF89               	btfsc	(printStringLCD@i+1)& (0+255),7,b
  7580  001D14  D770               	goto	l455
  7581  001D16  5189               	movf	(printStringLCD@i+1)& (0+255),w,b
  7582  001D18  E101               	bnz	l463
  7583  001D1A  D767               	goto	L8
  7584  001D1C                     l463:
  7585  001D1C  0012               	return		;funcret
  7586  001D1E                     __end_of_printStringLCD:
  7587                           	opt stack 0
  7588                           tosu	equ	0xFFF
  7589                           tosh	equ	0xFFE
  7590                           tosl	equ	0xFFD
  7591                           pclath	equ	0xFFA
  7592                           tblptru	equ	0xFF8
  7593                           tblptrh	equ	0xFF7
  7594                           tblptrl	equ	0xFF6
  7595                           tablat	equ	0xFF5
  7596                           prodh	equ	0xFF4
  7597                           prodl	equ	0xFF3
  7598                           indf0	equ	0xFEF
  7599                           postinc0	equ	0xFEE
  7600                           fsr0h	equ	0xFEA
  7601                           fsr0l	equ	0xFE9
  7602                           wreg	equ	0xFE8
  7603                           postdec1	equ	0xFE5
  7604                           plusw1	equ	0xFE3
  7605                           fsr1l	equ	0xFE1
  7606                           indf2	equ	0xFDF
  7607                           postinc2	equ	0xFDE
  7608                           postdec2	equ	0xFDD
  7609                           plusw2	equ	0xFDB
  7610                           fsr2h	equ	0xFDA
  7611                           fsr2l	equ	0xFD9
  7612                           status	equ	0xFD8
  7613                           
  7614 ;; *************** function _putch *****************
  7615 ;; Defined at:
  7616 ;;		line 25 in file "lcd.c"
  7617 ;; Parameters:    Size  Location     Type
  7618 ;;  data            1    wreg     unsigned char 
  7619 ;; Auto vars:     Size  Location     Type
  7620 ;;  data            1   40[COMRAM] unsigned char 
  7621 ;; Return value:  Size  Location     Type
  7622 ;;                  1    wreg      void 
  7623 ;; Registers used:
  7624 ;;		wreg, status,2, status,0, cstack
  7625 ;; Tracked objects:
  7626 ;;		On entry : 0/0
  7627 ;;		On exit  : 0/0
  7628 ;;		Unchanged: 0/0
  7629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7631 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7633 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7634 ;;Total ram usage:        1 bytes
  7635 ;; Hardware stack levels used:    1
  7636 ;; Hardware stack levels required when called:    5
  7637 ;; This function calls:
  7638 ;;		_lcdNibble
  7639 ;; This function is called by:
  7640 ;;		_inputEntry
  7641 ;;		_mainMenu
  7642 ;;		_printStringLCD
  7643 ;;		_printf
  7644 ;;		__doprnt
  7645 ;; This function uses a non-reentrant model
  7646 ;;
  7647                           
  7648                           	psect	text16
  7649  002BDA                     __ptext16:
  7650                           	opt stack 0
  7651  002BDA                     _putch:
  7652                           	opt stack 22
  7653                           
  7654                           ;incstack = 0
  7655                           ;putch@data stored from wreg
  7656  002BDA  6E29               	movwf	putch@data,c
  7657                           
  7658                           ;lcd.c: 33: LATDbits.LATD2 = 1;
  7659  002BDC  848C               	bsf	3980,2,c	;volatile
  7660                           
  7661                           ;lcd.c: 34: lcdNibble(data);
  7662  002BDE  5029               	movf	putch@data,w,c
  7663  002BE0  ECFD  F012         	call	_lcdNibble
  7664                           
  7665                           ;lcd.c: 35: _delay((unsigned long)((100)*(40000000/4000000.0)));
  7666  002BE4  0EC8               	movlw	200
  7667  002BE6                     u7037:
  7668  002BE6  D000               	nop2	
  7669  002BE8  2EE8               	decfsz	wreg,f,c
  7670  002BEA  D7FD               	bra	u7037
  7671  002BEC  0012               	return		;funcret
  7672  002BEE                     __end_of_putch:
  7673                           	opt stack 0
  7674                           tosu	equ	0xFFF
  7675                           tosh	equ	0xFFE
  7676                           tosl	equ	0xFFD
  7677                           pclath	equ	0xFFA
  7678                           tblptru	equ	0xFF8
  7679                           tblptrh	equ	0xFF7
  7680                           tblptrl	equ	0xFF6
  7681                           tablat	equ	0xFF5
  7682                           prodh	equ	0xFF4
  7683                           prodl	equ	0xFF3
  7684                           indf0	equ	0xFEF
  7685                           postinc0	equ	0xFEE
  7686                           fsr0h	equ	0xFEA
  7687                           fsr0l	equ	0xFE9
  7688                           wreg	equ	0xFE8
  7689                           postdec1	equ	0xFE5
  7690                           plusw1	equ	0xFE3
  7691                           fsr1l	equ	0xFE1
  7692                           indf2	equ	0xFDF
  7693                           postinc2	equ	0xFDE
  7694                           postdec2	equ	0xFDD
  7695                           plusw2	equ	0xFDB
  7696                           fsr2h	equ	0xFDA
  7697                           fsr2l	equ	0xFD9
  7698                           status	equ	0xFD8
  7699                           
  7700 ;; *************** function _pollKeypad *****************
  7701 ;; Defined at:
  7702 ;;		line 68 in file "helpers.c"
  7703 ;; Parameters:    Size  Location     Type
  7704 ;;		None
  7705 ;; Auto vars:     Size  Location     Type
  7706 ;;  keypress        1   38[COMRAM] unsigned char 
  7707 ;; Return value:  Size  Location     Type
  7708 ;;                  1    wreg      unsigned char 
  7709 ;; Registers used:
  7710 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  7711 ;; Tracked objects:
  7712 ;;		On entry : 0/0
  7713 ;;		On exit  : 0/0
  7714 ;;		Unchanged: 0/0
  7715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7717 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7719 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7720 ;;Total ram usage:        1 bytes
  7721 ;; Hardware stack levels used:    1
  7722 ;; Hardware stack levels required when called:    4
  7723 ;; This function calls:
  7724 ;;		Nothing
  7725 ;; This function is called by:
  7726 ;;		_hibernate
  7727 ;;		_viewLogs
  7728 ;;		_inputEntry
  7729 ;;		_mainMenu
  7730 ;; This function uses a non-reentrant model
  7731 ;;
  7732                           
  7733                           	psect	text17
  7734  002AC2                     __ptext17:
  7735                           	opt stack 0
  7736  002AC2                     _pollKeypad:
  7737                           	opt stack 24
  7738                           
  7739                           ;helpers.c: 70: while (PORTBbits.RB1 == 0) {continue;}
  7740                           
  7741                           ;incstack = 0
  7742  002AC2  A281               	btfss	3969,1,c	;volatile
  7743  002AC4  D7FE               	goto	_pollKeypad
  7744                           
  7745                           ;helpers.c: 73: unsigned char keypress = (unsigned char)(PORTB & 0xF0) >> 4;
  7746  002AC6  3881               	swapf	3969,w,c	;volatile
  7747  002AC8  0B0F               	andlw	15
  7748  002ACA  0B0F               	andlw	15
  7749  002ACC  6E27               	movwf	pollKeypad@keypress,c
  7750  002ACE  B281               	btfsc	3969,1,c	;volatile
  7751  002AD0  D7FE               	goto	l473
  7752                           
  7753                           ;helpers.c: 78: __nop();
  7754  002AD2  F000               	nop	
  7755                           
  7756                           ;helpers.c: 80: return keypadChars[keypress];
  7757  002AD4  5027               	movf	pollKeypad@keypress,w,c
  7758  002AD6  0D01               	mullw	1
  7759  002AD8  0E59               	movlw	low _keypadChars
  7760  002ADA  24F3               	addwf	prodl,w,c
  7761  002ADC  6EF6               	movwf	tblptrl,c
  7762  002ADE  0EFC               	movlw	high _keypadChars
  7763  002AE0  20F4               	addwfc	prodh,w,c
  7764  002AE2  6EF7               	movwf	tblptrh,c
  7765  002AE4                     	if	1	;There are 3 active tblptr bytes
  7766  002AE4  6AF8               	clrf	tblptru,c
  7767  002AE6  0E00               	movlw	low (__mediumconst shr (0+16))
  7768  002AE8  22F8               	addwfc	tblptru,f,c
  7769  002AEA                     	endif
  7770  002AEA  0008               	tblrd		*
  7771  002AEC  50F5               	movf	tablat,w,c
  7772  002AEE  0012               	return	
  7773  002AF0                     __end_of_pollKeypad:
  7774                           	opt stack 0
  7775                           tosu	equ	0xFFF
  7776                           tosh	equ	0xFFE
  7777                           tosl	equ	0xFFD
  7778                           pclath	equ	0xFFA
  7779                           tblptru	equ	0xFF8
  7780                           tblptrh	equ	0xFF7
  7781                           tblptrl	equ	0xFF6
  7782                           tablat	equ	0xFF5
  7783                           prodh	equ	0xFF4
  7784                           prodl	equ	0xFF3
  7785                           indf0	equ	0xFEF
  7786                           postinc0	equ	0xFEE
  7787                           fsr0h	equ	0xFEA
  7788                           fsr0l	equ	0xFE9
  7789                           wreg	equ	0xFE8
  7790                           postdec1	equ	0xFE5
  7791                           plusw1	equ	0xFE3
  7792                           fsr1l	equ	0xFE1
  7793                           indf2	equ	0xFDF
  7794                           postinc2	equ	0xFDE
  7795                           postdec2	equ	0xFDD
  7796                           plusw2	equ	0xFDB
  7797                           fsr2h	equ	0xFDA
  7798                           fsr2l	equ	0xFD9
  7799                           status	equ	0xFD8
  7800                           
  7801 ;; *************** function _clearing *****************
  7802 ;; Defined at:
  7803 ;;		line 146 in file "main.c"
  7804 ;; Parameters:    Size  Location     Type
  7805 ;;		None
  7806 ;; Auto vars:     Size  Location     Type
  7807 ;;  startTime       4    0        long 
  7808 ;;  currTime        3   24[BANK0 ] long 
  7809 ;;  debounceTime    3   21[BANK0 ] long 
  7810 ;;  spinTime        3   18[BANK0 ] long 
  7811 ;;  i               2    0        int 
  7812 ;; Return value:  Size  Location     Type
  7813 ;;                  1    wreg      void 
  7814 ;; Registers used:
  7815 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7816 ;; Tracked objects:
  7817 ;;		On entry : 0/0
  7818 ;;		On exit  : 0/0
  7819 ;;		Unchanged: 0/0
  7820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7822 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7823 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7824 ;;      Totals:         2       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7825 ;;Total ram usage:       11 bytes
  7826 ;; Hardware stack levels used:    1
  7827 ;; Hardware stack levels required when called:    7
  7828 ;; This function calls:
  7829 ;;		_I2C_Send
  7830 ;;		___ftadd
  7831 ;;		___ftge
  7832 ;;		_motorControl
  7833 ;;		_tic
  7834 ;;		_tock
  7835 ;; This function is called by:
  7836 ;;		_mainMenu
  7837 ;; This function uses a non-reentrant model
  7838 ;;
  7839                           
  7840                           	psect	text18
  7841  000704                     __ptext18:
  7842                           	opt stack 0
  7843  000704                     _clearing:
  7844                           	opt stack 22
  7845                           
  7846                           ;main.c: 151: I2C_Send(nanoAddr, 3);
  7847                           
  7848                           ;incstack = 0
  7849  000704  0E03               	movlw	3
  7850  000706  6E2A               	movwf	I2C_Send@data,c
  7851  000708  0E00               	movlw	0
  7852  00070A  6E2B               	movwf	I2C_Send@data+1,c
  7853  00070C  0E7F               	movlw	low _nanoAddr
  7854  00070E  6EF6               	movwf	tblptrl,c
  7855  000710                     	if	1	;There is more than 1 active tblptr byte
  7856  000710  0EFC               	movlw	high _nanoAddr
  7857  000712  6EF7               	movwf	tblptrh,c
  7858  000714                     	endif
  7859  000714                     	if	1	;There are 3 active tblptr bytes
  7860  000714  0E00               	movlw	low (_nanoAddr shr (0+16))
  7861  000716  6EF8               	movwf	tblptru,c
  7862  000718                     	endif
  7863  000718  0008               	tblrd		*
  7864  00071A  50F5               	movf	tablat,w,c
  7865  00071C  EC32  F012         	call	_I2C_Send
  7866                           
  7867                           ;main.c: 153: int i;
  7868                           ;main.c: 154: double spinTime=20.0;
  7869  000720  0E00               	movlw	0
  7870  000722  0100               	movlb	0	; () banked
  7871  000724  6F92               	movwf	clearing@spinTime& (0+255),b
  7872  000726  0EA0               	movlw	160
  7873  000728  6F93               	movwf	(clearing@spinTime+1)& (0+255),b
  7874  00072A  0E41               	movlw	65
  7875  00072C  6F94               	movwf	(clearing@spinTime+2)& (0+255),b
  7876                           
  7877                           ; BSR set to: 0
  7878                           ;main.c: 155: long startTime;
  7879                           ;main.c: 156: double currTime, debounceTime=0;
  7880  00072E  0E00               	movlw	0
  7881  000730  6F95               	movwf	clearing@debounceTime& (0+255),b
  7882  000732  0E00               	movlw	0
  7883  000734  6F96               	movwf	(clearing@debounceTime+1)& (0+255),b
  7884  000736  0E00               	movlw	0
  7885  000738  6F97               	movwf	(clearing@debounceTime+2)& (0+255),b
  7886                           
  7887                           ; BSR set to: 0
  7888                           ;main.c: 158: extras.b = 0;
  7889  00073A  0E00               	movlw	0
  7890  00073C  6E3D               	movwf	_extras+1,c
  7891  00073E  0E00               	movlw	0
  7892  000740  6E3C               	movwf	_extras,c
  7893                           
  7894                           ; BSR set to: 0
  7895                           ;main.c: 159: extras.n = 0;
  7896  000742  0E00               	movlw	0
  7897  000744  6E3F               	movwf	_extras+3,c
  7898  000746  0E00               	movlw	0
  7899  000748  6E3E               	movwf	_extras+2,c
  7900                           
  7901                           ; BSR set to: 0
  7902                           ;main.c: 160: extras.s = 0;
  7903  00074A  0E00               	movlw	0
  7904  00074C  6E41               	movwf	_extras+5,c
  7905  00074E  0E00               	movlw	0
  7906  000750  6E40               	movwf	_extras+4,c
  7907                           
  7908                           ; BSR set to: 0
  7909                           ;main.c: 161: extras.w = 0;
  7910  000752  0E00               	movlw	0
  7911  000754  6E43               	movwf	_extras+7,c
  7912  000756  0E00               	movlw	0
  7913  000758  6E42               	movwf	_extras+6,c
  7914                           
  7915                           ; BSR set to: 0
  7916                           ;main.c: 163: tic();
  7917  00075A  EC01  F016         	call	_tic	;wreg free
  7918                           
  7919                           ;main.c: 165: motorControl(BOLT, FORWARD);
  7920  00075E  0E00               	movlw	0
  7921  000760  6E27               	movwf	motorControl@dir,c
  7922  000762  0E00               	movlw	0
  7923  000764  EC3C  F010         	call	_motorControl
  7924                           
  7925                           ;main.c: 166: while (extras.b + dispensed.b < 20) {
  7926  000768  D051               	goto	l124
  7927  00076A                     
  7928                           ;main.c: 167: currTime = tock();
  7929  00076A  EC13  F016         	call	_tock	;wreg free
  7930  00076E  C027  F098         	movff	?_tock,clearing@currTime
  7931  000772  C028  F099         	movff	?_tock+1,clearing@currTime+1
  7932  000776  C029  F09A         	movff	?_tock+2,clearing@currTime+2
  7933                           
  7934                           ;main.c: 168: if (PORTAbits.RA0 == 0 && currTime > debounceTime + 2) {
  7935  00077A  B080               	btfsc	3968,0,c	;volatile
  7936  00077C  D036               	goto	l123
  7937  00077E  0E00               	movlw	0
  7938  000780  0100               	movlb	0	; () banked
  7939  000782  6F83               	movwf	___ftadd@f2& (0+255),b
  7940  000784  0E00               	movlw	0
  7941  000786  6F84               	movwf	(___ftadd@f2+1)& (0+255),b
  7942  000788  0E40               	movlw	64
  7943  00078A  6F85               	movwf	(___ftadd@f2+2)& (0+255),b
  7944  00078C  C095  F080         	movff	clearing@debounceTime,___ftadd@f1
  7945  000790  C096  F081         	movff	clearing@debounceTime+1,___ftadd@f1+1
  7946  000794  C097  F082         	movff	clearing@debounceTime+2,___ftadd@f1+2
  7947  000798  EC8F  F00E         	call	___ftadd	;wreg free
  7948  00079C  C080  F089         	movff	?___ftadd,___ftge@ff1
  7949  0007A0  C081  F08A         	movff	?___ftadd+1,___ftge@ff1+1
  7950  0007A4  C082  F08B         	movff	?___ftadd+2,___ftge@ff1+2
  7951  0007A8  C098  F08C         	movff	clearing@currTime,___ftge@ff2
  7952  0007AC  C099  F08D         	movff	clearing@currTime+1,___ftge@ff2+1
  7953  0007B0  C09A  F08E         	movff	clearing@currTime+2,___ftge@ff2+2
  7954  0007B4  ECE9  F011         	call	___ftge	;wreg free
  7955  0007B8  0100               	movlb	0	; () banked
  7956  0007BA  B0D8               	btfsc	status,0,c
  7957  0007BC  D016               	goto	l123
  7958                           
  7959                           ; BSR set to: 0
  7960                           ;main.c: 169: debounceTime = currTime;
  7961  0007BE  C098  F095         	movff	clearing@currTime,clearing@debounceTime
  7962  0007C2  C099  F096         	movff	clearing@currTime+1,clearing@debounceTime+1
  7963  0007C6  C09A  F097         	movff	clearing@currTime+2,clearing@debounceTime+2
  7964                           
  7965                           ; BSR set to: 0
  7966                           ;main.c: 170: extras.b++;
  7967  0007CA  4A3C               	infsnz	_extras,f,c
  7968  0007CC  2A3D               	incf	_extras+1,f,c
  7969                           
  7970                           ; BSR set to: 0
  7971                           ;main.c: 171: I2C_Send(nanoAddr, "\1Bolt counted\0");
  7972  0007CE  0E86               	movlw	low STR_9
  7973  0007D0  6E2A               	movwf	I2C_Send@data,c
  7974  0007D2  0EFF               	movlw	high STR_9
  7975  0007D4  6E2B               	movwf	I2C_Send@data+1,c
  7976  0007D6  0E7F               	movlw	low _nanoAddr
  7977  0007D8  6EF6               	movwf	tblptrl,c
  7978  0007DA                     	if	1	;There is more than 1 active tblptr byte
  7979  0007DA  0EFC               	movlw	high _nanoAddr
  7980  0007DC  6EF7               	movwf	tblptrh,c
  7981  0007DE                     	endif
  7982  0007DE                     	if	1	;There are 3 active tblptr bytes
  7983  0007DE  0E00               	movlw	low (_nanoAddr shr (0+16))
  7984  0007E0  6EF8               	movwf	tblptru,c
  7985  0007E2                     	endif
  7986  0007E2  0008               	tblrd		*
  7987  0007E4  50F5               	movf	tablat,w,c
  7988  0007E6  EC32  F012         	call	_I2C_Send
  7989  0007EA                     l123:
  7990                           
  7991                           ;main.c: 172: }
  7992                           ;main.c: 174: if (currTime >= spinTime) break;
  7993  0007EA  C098  F089         	movff	clearing@currTime,___ftge@ff1
  7994  0007EE  C099  F08A         	movff	clearing@currTime+1,___ftge@ff1+1
  7995  0007F2  C09A  F08B         	movff	clearing@currTime+2,___ftge@ff1+2
  7996  0007F6  C092  F08C         	movff	clearing@spinTime,___ftge@ff2
  7997  0007FA  C093  F08D         	movff	clearing@spinTime+1,___ftge@ff2+1
  7998  0007FE  C094  F08E         	movff	clearing@spinTime+2,___ftge@ff2+2
  7999  000802  ECE9  F011         	call	___ftge	;wreg free
  8000  000806  0100               	movlb	0	; () banked
  8001  000808  B0D8               	btfsc	status,0,c
  8002  00080A  D00E               	goto	u6080
  8003  00080C                     l124:
  8004                           
  8005                           ; BSR set to: 0
  8006                           
  8007                           ; BSR set to: 0
  8008  00080C  5034               	movf	_dispensed,w,c
  8009  00080E  243C               	addwf	_extras,w,c
  8010  000810  6E32               	movwf	??_clearing& (0+255),c
  8011  000812  5035               	movf	_dispensed+1,w,c
  8012  000814  203D               	addwfc	_extras+1,w,c
  8013  000816  6E33               	movwf	(??_clearing+1)& (0+255),c
  8014  000818  BE33               	btfsc	??_clearing+1,7,c
  8015  00081A  D7A7               	goto	l122
  8016  00081C  5033               	movf	??_clearing+1,w,c
  8017  00081E  E104               	bnz	l4969
  8018  000820  0E14               	movlw	20
  8019  000822  5C32               	subwf	??_clearing,w,c
  8020  000824  A0D8               	btfss	status,0,c
  8021  000826  D7A1               	goto	l122
  8022  000828                     u6080:
  8023  000828                     l4969:
  8024                           
  8025                           ;main.c: 175: }
  8026                           ;main.c: 176: motorControl(BOLT, STOPMOTOR);
  8027  000828  0E02               	movlw	2
  8028  00082A  6E27               	movwf	motorControl@dir,c
  8029  00082C  0E00               	movlw	0
  8030  00082E  EC3C  F010         	call	_motorControl
  8031                           
  8032                           ;main.c: 178: I2C_Send(nanoAddr, 4);
  8033  000832  0E04               	movlw	4
  8034  000834  6E2A               	movwf	I2C_Send@data,c
  8035  000836  0E00               	movlw	0
  8036  000838  6E2B               	movwf	I2C_Send@data+1,c
  8037  00083A  0E7F               	movlw	low _nanoAddr
  8038  00083C  6EF6               	movwf	tblptrl,c
  8039  00083E                     	if	1	;There is more than 1 active tblptr byte
  8040  00083E  0EFC               	movlw	high _nanoAddr
  8041  000840  6EF7               	movwf	tblptrh,c
  8042  000842                     	endif
  8043  000842                     	if	1	;There are 3 active tblptr bytes
  8044  000842  0E00               	movlw	low (_nanoAddr shr (0+16))
  8045  000844  6EF8               	movwf	tblptru,c
  8046  000846                     	endif
  8047  000846  0008               	tblrd		*
  8048  000848  50F5               	movf	tablat,w,c
  8049  00084A  EC32  F012         	call	_I2C_Send
  8050                           
  8051                           ;main.c: 179: _delay((unsigned long)((5000)*(40000000/4000.0)));
  8052  00084E  0EFE               	movlw	254
  8053  000850  6E33               	movwf	(??_clearing+1)& (0+255),c
  8054  000852  0EA7               	movlw	167
  8055  000854  6E32               	movwf	??_clearing& (0+255),c
  8056  000856  0E66               	movlw	102
  8057  000858                     u7047:
  8058  000858  2EE8               	decfsz	wreg,f,c
  8059  00085A  D7FE               	bra	u7047
  8060  00085C  2E32               	decfsz	??_clearing& (0+255),f,c
  8061  00085E  D7FC               	bra	u7047
  8062  000860  2E33               	decfsz	(??_clearing+1)& (0+255),f,c
  8063  000862  D7FA               	bra	u7047
  8064                           
  8065                           ;main.c: 181: tic();
  8066  000864  EC01  F016         	call	_tic	;wreg free
  8067                           
  8068                           ;main.c: 182: debounceTime = 0;
  8069  000868  0E00               	movlw	0
  8070  00086A  0100               	movlb	0	; () banked
  8071  00086C  6F95               	movwf	clearing@debounceTime& (0+255),b
  8072  00086E  0E00               	movlw	0
  8073  000870  6F96               	movwf	(clearing@debounceTime+1)& (0+255),b
  8074  000872  0E00               	movlw	0
  8075  000874  6F97               	movwf	(clearing@debounceTime+2)& (0+255),b
  8076                           
  8077                           ; BSR set to: 0
  8078                           ;main.c: 183: motorControl(NUT, FORWARD);
  8079  000876  0E00               	movlw	0
  8080  000878  6E27               	movwf	motorControl@dir,c
  8081  00087A  0E01               	movlw	1
  8082  00087C  EC3C  F010         	call	_motorControl
  8083                           
  8084                           ;main.c: 184: while (extras.n + dispensed.n < 25) {
  8085  000880  D051               	goto	l129
  8086  000882                     
  8087                           ;main.c: 185: currTime = tock();
  8088  000882  EC13  F016         	call	_tock	;wreg free
  8089  000886  C027  F098         	movff	?_tock,clearing@currTime
  8090  00088A  C028  F099         	movff	?_tock+1,clearing@currTime+1
  8091  00088E  C029  F09A         	movff	?_tock+2,clearing@currTime+2
  8092                           
  8093                           ;main.c: 186: if (PORTAbits.RA1 == 0 && currTime > debounceTime + 2) {
  8094  000892  B280               	btfsc	3968,1,c	;volatile
  8095  000894  D036               	goto	l128
  8096  000896  0E00               	movlw	0
  8097  000898  0100               	movlb	0	; () banked
  8098  00089A  6F83               	movwf	___ftadd@f2& (0+255),b
  8099  00089C  0E00               	movlw	0
  8100  00089E  6F84               	movwf	(___ftadd@f2+1)& (0+255),b
  8101  0008A0  0E40               	movlw	64
  8102  0008A2  6F85               	movwf	(___ftadd@f2+2)& (0+255),b
  8103  0008A4  C095  F080         	movff	clearing@debounceTime,___ftadd@f1
  8104  0008A8  C096  F081         	movff	clearing@debounceTime+1,___ftadd@f1+1
  8105  0008AC  C097  F082         	movff	clearing@debounceTime+2,___ftadd@f1+2
  8106  0008B0  EC8F  F00E         	call	___ftadd	;wreg free
  8107  0008B4  C080  F089         	movff	?___ftadd,___ftge@ff1
  8108  0008B8  C081  F08A         	movff	?___ftadd+1,___ftge@ff1+1
  8109  0008BC  C082  F08B         	movff	?___ftadd+2,___ftge@ff1+2
  8110  0008C0  C098  F08C         	movff	clearing@currTime,___ftge@ff2
  8111  0008C4  C099  F08D         	movff	clearing@currTime+1,___ftge@ff2+1
  8112  0008C8  C09A  F08E         	movff	clearing@currTime+2,___ftge@ff2+2
  8113  0008CC  ECE9  F011         	call	___ftge	;wreg free
  8114  0008D0  0100               	movlb	0	; () banked
  8115  0008D2  B0D8               	btfsc	status,0,c
  8116  0008D4  D016               	goto	l128
  8117                           
  8118                           ; BSR set to: 0
  8119                           ;main.c: 187: debounceTime = currTime;
  8120  0008D6  C098  F095         	movff	clearing@currTime,clearing@debounceTime
  8121  0008DA  C099  F096         	movff	clearing@currTime+1,clearing@debounceTime+1
  8122  0008DE  C09A  F097         	movff	clearing@currTime+2,clearing@debounceTime+2
  8123                           
  8124                           ; BSR set to: 0
  8125                           ;main.c: 188: extras.n++;
  8126  0008E2  4A3E               	infsnz	_extras+2,f,c
  8127  0008E4  2A3F               	incf	_extras+3,f,c
  8128                           
  8129                           ; BSR set to: 0
  8130                           ;main.c: 189: I2C_Send(nanoAddr, "\1Nut counted\0");
  8131  0008E6  0EC0               	movlw	low STR_10
  8132  0008E8  6E2A               	movwf	I2C_Send@data,c
  8133  0008EA  0EFF               	movlw	high STR_10
  8134  0008EC  6E2B               	movwf	I2C_Send@data+1,c
  8135  0008EE  0E7F               	movlw	low _nanoAddr
  8136  0008F0  6EF6               	movwf	tblptrl,c
  8137  0008F2                     	if	1	;There is more than 1 active tblptr byte
  8138  0008F2  0EFC               	movlw	high _nanoAddr
  8139  0008F4  6EF7               	movwf	tblptrh,c
  8140  0008F6                     	endif
  8141  0008F6                     	if	1	;There are 3 active tblptr bytes
  8142  0008F6  0E00               	movlw	low (_nanoAddr shr (0+16))
  8143  0008F8  6EF8               	movwf	tblptru,c
  8144  0008FA                     	endif
  8145  0008FA  0008               	tblrd		*
  8146  0008FC  50F5               	movf	tablat,w,c
  8147  0008FE  EC32  F012         	call	_I2C_Send
  8148  000902                     l128:
  8149                           
  8150                           ;main.c: 190: }
  8151                           ;main.c: 192: if (currTime >= spinTime) break;
  8152  000902  C098  F089         	movff	clearing@currTime,___ftge@ff1
  8153  000906  C099  F08A         	movff	clearing@currTime+1,___ftge@ff1+1
  8154  00090A  C09A  F08B         	movff	clearing@currTime+2,___ftge@ff1+2
  8155  00090E  C092  F08C         	movff	clearing@spinTime,___ftge@ff2
  8156  000912  C093  F08D         	movff	clearing@spinTime+1,___ftge@ff2+1
  8157  000916  C094  F08E         	movff	clearing@spinTime+2,___ftge@ff2+2
  8158  00091A  ECE9  F011         	call	___ftge	;wreg free
  8159  00091E  0100               	movlb	0	; () banked
  8160  000920  B0D8               	btfsc	status,0,c
  8161  000922  D00E               	goto	u6120
  8162  000924                     l129:
  8163                           
  8164                           ; BSR set to: 0
  8165                           
  8166                           ; BSR set to: 0
  8167  000924  5036               	movf	_dispensed+2,w,c
  8168  000926  243E               	addwf	_extras+2,w,c
  8169  000928  6E32               	movwf	??_clearing& (0+255),c
  8170  00092A  5037               	movf	_dispensed+3,w,c
  8171  00092C  203F               	addwfc	_extras+3,w,c
  8172  00092E  6E33               	movwf	(??_clearing+1)& (0+255),c
  8173  000930  BE33               	btfsc	??_clearing+1,7,c
  8174  000932  D7A7               	goto	l127
  8175  000934  5033               	movf	??_clearing+1,w,c
  8176  000936  E104               	bnz	l4999
  8177  000938  0E19               	movlw	25
  8178  00093A  5C32               	subwf	??_clearing,w,c
  8179  00093C  A0D8               	btfss	status,0,c
  8180  00093E  D7A1               	goto	l127
  8181  000940                     u6120:
  8182  000940                     l4999:
  8183                           
  8184                           ;main.c: 193: }
  8185                           ;main.c: 195: motorControl(NUT, STOPMOTOR);
  8186  000940  0E02               	movlw	2
  8187  000942  6E27               	movwf	motorControl@dir,c
  8188  000944  0E01               	movlw	1
  8189  000946  EC3C  F010         	call	_motorControl
  8190                           
  8191                           ;main.c: 197: I2C_Send(nanoAddr, 5);
  8192  00094A  0E05               	movlw	5
  8193  00094C  6E2A               	movwf	I2C_Send@data,c
  8194  00094E  0E00               	movlw	0
  8195  000950  6E2B               	movwf	I2C_Send@data+1,c
  8196  000952  0E7F               	movlw	low _nanoAddr
  8197  000954  6EF6               	movwf	tblptrl,c
  8198  000956                     	if	1	;There is more than 1 active tblptr byte
  8199  000956  0EFC               	movlw	high _nanoAddr
  8200  000958  6EF7               	movwf	tblptrh,c
  8201  00095A                     	endif
  8202  00095A                     	if	1	;There are 3 active tblptr bytes
  8203  00095A  0E00               	movlw	low (_nanoAddr shr (0+16))
  8204  00095C  6EF8               	movwf	tblptru,c
  8205  00095E                     	endif
  8206  00095E  0008               	tblrd		*
  8207  000960  50F5               	movf	tablat,w,c
  8208  000962  EC32  F012         	call	_I2C_Send
  8209                           
  8210                           ;main.c: 198: _delay((unsigned long)((5000)*(40000000/4000.0)));
  8211  000966  0EFE               	movlw	254
  8212  000968  6E33               	movwf	(??_clearing+1)& (0+255),c
  8213  00096A  0EA7               	movlw	167
  8214  00096C  6E32               	movwf	??_clearing& (0+255),c
  8215  00096E  0E66               	movlw	102
  8216  000970                     u7057:
  8217  000970  2EE8               	decfsz	wreg,f,c
  8218  000972  D7FE               	bra	u7057
  8219  000974  2E32               	decfsz	??_clearing& (0+255),f,c
  8220  000976  D7FC               	bra	u7057
  8221  000978  2E33               	decfsz	(??_clearing+1)& (0+255),f,c
  8222  00097A  D7FA               	bra	u7057
  8223                           
  8224                           ;main.c: 200: tic();
  8225  00097C  EC01  F016         	call	_tic	;wreg free
  8226                           
  8227                           ;main.c: 201: debounceTime = 0;
  8228  000980  0E00               	movlw	0
  8229  000982  0100               	movlb	0	; () banked
  8230  000984  6F95               	movwf	clearing@debounceTime& (0+255),b
  8231  000986  0E00               	movlw	0
  8232  000988  6F96               	movwf	(clearing@debounceTime+1)& (0+255),b
  8233  00098A  0E00               	movlw	0
  8234  00098C  6F97               	movwf	(clearing@debounceTime+2)& (0+255),b
  8235                           
  8236                           ; BSR set to: 0
  8237                           ;main.c: 202: motorControl(SPACER, FORWARD);
  8238  00098E  0E00               	movlw	0
  8239  000990  6E27               	movwf	motorControl@dir,c
  8240  000992  0E02               	movlw	2
  8241  000994  EC3C  F010         	call	_motorControl
  8242                           
  8243                           ;main.c: 203: while (extras.s + dispensed.s < 20) {
  8244  000998  D051               	goto	l134
  8245  00099A                     
  8246                           ;main.c: 204: currTime = tock();
  8247  00099A  EC13  F016         	call	_tock	;wreg free
  8248  00099E  C027  F098         	movff	?_tock,clearing@currTime
  8249  0009A2  C028  F099         	movff	?_tock+1,clearing@currTime+1
  8250  0009A6  C029  F09A         	movff	?_tock+2,clearing@currTime+2
  8251                           
  8252                           ;main.c: 205: if (PORTAbits.RA2 == 0 && currTime > debounceTime + 2) {
  8253  0009AA  B480               	btfsc	3968,2,c	;volatile
  8254  0009AC  D036               	goto	l133
  8255  0009AE  0E00               	movlw	0
  8256  0009B0  0100               	movlb	0	; () banked
  8257  0009B2  6F83               	movwf	___ftadd@f2& (0+255),b
  8258  0009B4  0E00               	movlw	0
  8259  0009B6  6F84               	movwf	(___ftadd@f2+1)& (0+255),b
  8260  0009B8  0E40               	movlw	64
  8261  0009BA  6F85               	movwf	(___ftadd@f2+2)& (0+255),b
  8262  0009BC  C095  F080         	movff	clearing@debounceTime,___ftadd@f1
  8263  0009C0  C096  F081         	movff	clearing@debounceTime+1,___ftadd@f1+1
  8264  0009C4  C097  F082         	movff	clearing@debounceTime+2,___ftadd@f1+2
  8265  0009C8  EC8F  F00E         	call	___ftadd	;wreg free
  8266  0009CC  C080  F089         	movff	?___ftadd,___ftge@ff1
  8267  0009D0  C081  F08A         	movff	?___ftadd+1,___ftge@ff1+1
  8268  0009D4  C082  F08B         	movff	?___ftadd+2,___ftge@ff1+2
  8269  0009D8  C098  F08C         	movff	clearing@currTime,___ftge@ff2
  8270  0009DC  C099  F08D         	movff	clearing@currTime+1,___ftge@ff2+1
  8271  0009E0  C09A  F08E         	movff	clearing@currTime+2,___ftge@ff2+2
  8272  0009E4  ECE9  F011         	call	___ftge	;wreg free
  8273  0009E8  0100               	movlb	0	; () banked
  8274  0009EA  B0D8               	btfsc	status,0,c
  8275  0009EC  D016               	goto	l133
  8276                           
  8277                           ; BSR set to: 0
  8278                           ;main.c: 206: debounceTime = currTime;
  8279  0009EE  C098  F095         	movff	clearing@currTime,clearing@debounceTime
  8280  0009F2  C099  F096         	movff	clearing@currTime+1,clearing@debounceTime+1
  8281  0009F6  C09A  F097         	movff	clearing@currTime+2,clearing@debounceTime+2
  8282                           
  8283                           ; BSR set to: 0
  8284                           ;main.c: 207: extras.s++;
  8285  0009FA  4A40               	infsnz	_extras+4,f,c
  8286  0009FC  2A41               	incf	_extras+5,f,c
  8287                           
  8288                           ; BSR set to: 0
  8289                           ;main.c: 208: I2C_Send(nanoAddr, "\1Spacer counted\0");
  8290  0009FE  0E45               	movlw	low STR_11
  8291  000A00  6E2A               	movwf	I2C_Send@data,c
  8292  000A02  0EFF               	movlw	high STR_11
  8293  000A04  6E2B               	movwf	I2C_Send@data+1,c
  8294  000A06  0E7F               	movlw	low _nanoAddr
  8295  000A08  6EF6               	movwf	tblptrl,c
  8296  000A0A                     	if	1	;There is more than 1 active tblptr byte
  8297  000A0A  0EFC               	movlw	high _nanoAddr
  8298  000A0C  6EF7               	movwf	tblptrh,c
  8299  000A0E                     	endif
  8300  000A0E                     	if	1	;There are 3 active tblptr bytes
  8301  000A0E  0E00               	movlw	low (_nanoAddr shr (0+16))
  8302  000A10  6EF8               	movwf	tblptru,c
  8303  000A12                     	endif
  8304  000A12  0008               	tblrd		*
  8305  000A14  50F5               	movf	tablat,w,c
  8306  000A16  EC32  F012         	call	_I2C_Send
  8307  000A1A                     l133:
  8308                           
  8309                           ;main.c: 209: }
  8310                           ;main.c: 211: if (currTime >= spinTime) break;
  8311  000A1A  C098  F089         	movff	clearing@currTime,___ftge@ff1
  8312  000A1E  C099  F08A         	movff	clearing@currTime+1,___ftge@ff1+1
  8313  000A22  C09A  F08B         	movff	clearing@currTime+2,___ftge@ff1+2
  8314  000A26  C092  F08C         	movff	clearing@spinTime,___ftge@ff2
  8315  000A2A  C093  F08D         	movff	clearing@spinTime+1,___ftge@ff2+1
  8316  000A2E  C094  F08E         	movff	clearing@spinTime+2,___ftge@ff2+2
  8317  000A32  ECE9  F011         	call	___ftge	;wreg free
  8318  000A36  0100               	movlb	0	; () banked
  8319  000A38  B0D8               	btfsc	status,0,c
  8320  000A3A  D00E               	goto	u6160
  8321  000A3C                     l134:
  8322                           
  8323                           ; BSR set to: 0
  8324                           
  8325                           ; BSR set to: 0
  8326  000A3C  5038               	movf	_dispensed+4,w,c
  8327  000A3E  2440               	addwf	_extras+4,w,c
  8328  000A40  6E32               	movwf	??_clearing& (0+255),c
  8329  000A42  5039               	movf	_dispensed+5,w,c
  8330  000A44  2041               	addwfc	_extras+5,w,c
  8331  000A46  6E33               	movwf	(??_clearing+1)& (0+255),c
  8332  000A48  BE33               	btfsc	??_clearing+1,7,c
  8333  000A4A  D7A7               	goto	l132
  8334  000A4C  5033               	movf	??_clearing+1,w,c
  8335  000A4E  E104               	bnz	l5029
  8336  000A50  0E14               	movlw	20
  8337  000A52  5C32               	subwf	??_clearing,w,c
  8338  000A54  A0D8               	btfss	status,0,c
  8339  000A56  D7A1               	goto	l132
  8340  000A58                     u6160:
  8341  000A58                     l5029:
  8342                           
  8343                           ;main.c: 212: }
  8344                           ;main.c: 214: motorControl(SPACER, STOPMOTOR);
  8345  000A58  0E02               	movlw	2
  8346  000A5A  6E27               	movwf	motorControl@dir,c
  8347  000A5C  0E02               	movlw	2
  8348  000A5E  EC3C  F010         	call	_motorControl
  8349                           
  8350                           ;main.c: 216: I2C_Send(nanoAddr, 6);
  8351  000A62  0E06               	movlw	6
  8352  000A64  6E2A               	movwf	I2C_Send@data,c
  8353  000A66  0E00               	movlw	0
  8354  000A68  6E2B               	movwf	I2C_Send@data+1,c
  8355  000A6A  0E7F               	movlw	low _nanoAddr
  8356  000A6C  6EF6               	movwf	tblptrl,c
  8357  000A6E                     	if	1	;There is more than 1 active tblptr byte
  8358  000A6E  0EFC               	movlw	high _nanoAddr
  8359  000A70  6EF7               	movwf	tblptrh,c
  8360  000A72                     	endif
  8361  000A72                     	if	1	;There are 3 active tblptr bytes
  8362  000A72  0E00               	movlw	low (_nanoAddr shr (0+16))
  8363  000A74  6EF8               	movwf	tblptru,c
  8364  000A76                     	endif
  8365  000A76  0008               	tblrd		*
  8366  000A78  50F5               	movf	tablat,w,c
  8367  000A7A  EC32  F012         	call	_I2C_Send
  8368                           
  8369                           ;main.c: 217: _delay((unsigned long)((5000)*(40000000/4000.0)));
  8370  000A7E  0EFE               	movlw	254
  8371  000A80  6E33               	movwf	(??_clearing+1)& (0+255),c
  8372  000A82  0EA7               	movlw	167
  8373  000A84  6E32               	movwf	??_clearing& (0+255),c
  8374  000A86  0E66               	movlw	102
  8375  000A88                     u7067:
  8376  000A88  2EE8               	decfsz	wreg,f,c
  8377  000A8A  D7FE               	bra	u7067
  8378  000A8C  2E32               	decfsz	??_clearing& (0+255),f,c
  8379  000A8E  D7FC               	bra	u7067
  8380  000A90  2E33               	decfsz	(??_clearing+1)& (0+255),f,c
  8381  000A92  D7FA               	bra	u7067
  8382                           
  8383                           ;main.c: 219: tic();
  8384  000A94  EC01  F016         	call	_tic	;wreg free
  8385                           
  8386                           ;main.c: 220: debounceTime = 0;
  8387  000A98  0E00               	movlw	0
  8388  000A9A  0100               	movlb	0	; () banked
  8389  000A9C  6F95               	movwf	clearing@debounceTime& (0+255),b
  8390  000A9E  0E00               	movlw	0
  8391  000AA0  6F96               	movwf	(clearing@debounceTime+1)& (0+255),b
  8392  000AA2  0E00               	movlw	0
  8393  000AA4  6F97               	movwf	(clearing@debounceTime+2)& (0+255),b
  8394                           
  8395                           ; BSR set to: 0
  8396                           ;main.c: 221: motorControl(WASHER, FORWARD);
  8397  000AA6  0E00               	movlw	0
  8398  000AA8  6E27               	movwf	motorControl@dir,c
  8399  000AAA  0E03               	movlw	3
  8400  000AAC  EC3C  F010         	call	_motorControl
  8401                           
  8402                           ;main.c: 222: while (extras.w + dispensed.w < 35) {
  8403  000AB0  D051               	goto	l139
  8404  000AB2                     
  8405                           ;main.c: 223: currTime = tock();
  8406  000AB2  EC13  F016         	call	_tock	;wreg free
  8407  000AB6  C027  F098         	movff	?_tock,clearing@currTime
  8408  000ABA  C028  F099         	movff	?_tock+1,clearing@currTime+1
  8409  000ABE  C029  F09A         	movff	?_tock+2,clearing@currTime+2
  8410                           
  8411                           ;main.c: 224: if (PORTAbits.RA3 == 0 && currTime > debounceTime + 2) {
  8412  000AC2  B680               	btfsc	3968,3,c	;volatile
  8413  000AC4  D036               	goto	l138
  8414  000AC6  0E00               	movlw	0
  8415  000AC8  0100               	movlb	0	; () banked
  8416  000ACA  6F83               	movwf	___ftadd@f2& (0+255),b
  8417  000ACC  0E00               	movlw	0
  8418  000ACE  6F84               	movwf	(___ftadd@f2+1)& (0+255),b
  8419  000AD0  0E40               	movlw	64
  8420  000AD2  6F85               	movwf	(___ftadd@f2+2)& (0+255),b
  8421  000AD4  C095  F080         	movff	clearing@debounceTime,___ftadd@f1
  8422  000AD8  C096  F081         	movff	clearing@debounceTime+1,___ftadd@f1+1
  8423  000ADC  C097  F082         	movff	clearing@debounceTime+2,___ftadd@f1+2
  8424  000AE0  EC8F  F00E         	call	___ftadd	;wreg free
  8425  000AE4  C080  F089         	movff	?___ftadd,___ftge@ff1
  8426  000AE8  C081  F08A         	movff	?___ftadd+1,___ftge@ff1+1
  8427  000AEC  C082  F08B         	movff	?___ftadd+2,___ftge@ff1+2
  8428  000AF0  C098  F08C         	movff	clearing@currTime,___ftge@ff2
  8429  000AF4  C099  F08D         	movff	clearing@currTime+1,___ftge@ff2+1
  8430  000AF8  C09A  F08E         	movff	clearing@currTime+2,___ftge@ff2+2
  8431  000AFC  ECE9  F011         	call	___ftge	;wreg free
  8432  000B00  0100               	movlb	0	; () banked
  8433  000B02  B0D8               	btfsc	status,0,c
  8434  000B04  D016               	goto	l138
  8435                           
  8436                           ; BSR set to: 0
  8437                           ;main.c: 225: debounceTime = currTime;
  8438  000B06  C098  F095         	movff	clearing@currTime,clearing@debounceTime
  8439  000B0A  C099  F096         	movff	clearing@currTime+1,clearing@debounceTime+1
  8440  000B0E  C09A  F097         	movff	clearing@currTime+2,clearing@debounceTime+2
  8441                           
  8442                           ; BSR set to: 0
  8443                           ;main.c: 226: extras.w++;
  8444  000B12  4A42               	infsnz	_extras+6,f,c
  8445  000B14  2A43               	incf	_extras+7,f,c
  8446                           
  8447                           ; BSR set to: 0
  8448                           ;main.c: 227: I2C_Send(nanoAddr, "\1Washer counted\0");
  8449  000B16  0E56               	movlw	low STR_12
  8450  000B18  6E2A               	movwf	I2C_Send@data,c
  8451  000B1A  0EFF               	movlw	high STR_12
  8452  000B1C  6E2B               	movwf	I2C_Send@data+1,c
  8453  000B1E  0E7F               	movlw	low _nanoAddr
  8454  000B20  6EF6               	movwf	tblptrl,c
  8455  000B22                     	if	1	;There is more than 1 active tblptr byte
  8456  000B22  0EFC               	movlw	high _nanoAddr
  8457  000B24  6EF7               	movwf	tblptrh,c
  8458  000B26                     	endif
  8459  000B26                     	if	1	;There are 3 active tblptr bytes
  8460  000B26  0E00               	movlw	low (_nanoAddr shr (0+16))
  8461  000B28  6EF8               	movwf	tblptru,c
  8462  000B2A                     	endif
  8463  000B2A  0008               	tblrd		*
  8464  000B2C  50F5               	movf	tablat,w,c
  8465  000B2E  EC32  F012         	call	_I2C_Send
  8466  000B32                     l138:
  8467                           
  8468                           ;main.c: 228: }
  8469                           ;main.c: 230: if (currTime >= spinTime) break;
  8470  000B32  C098  F089         	movff	clearing@currTime,___ftge@ff1
  8471  000B36  C099  F08A         	movff	clearing@currTime+1,___ftge@ff1+1
  8472  000B3A  C09A  F08B         	movff	clearing@currTime+2,___ftge@ff1+2
  8473  000B3E  C092  F08C         	movff	clearing@spinTime,___ftge@ff2
  8474  000B42  C093  F08D         	movff	clearing@spinTime+1,___ftge@ff2+1
  8475  000B46  C094  F08E         	movff	clearing@spinTime+2,___ftge@ff2+2
  8476  000B4A  ECE9  F011         	call	___ftge	;wreg free
  8477  000B4E  0100               	movlb	0	; () banked
  8478  000B50  B0D8               	btfsc	status,0,c
  8479  000B52  D00E               	goto	u6200
  8480  000B54                     l139:
  8481                           
  8482                           ; BSR set to: 0
  8483                           
  8484                           ; BSR set to: 0
  8485  000B54  503A               	movf	_dispensed+6,w,c
  8486  000B56  2442               	addwf	_extras+6,w,c
  8487  000B58  6E32               	movwf	??_clearing& (0+255),c
  8488  000B5A  503B               	movf	_dispensed+7,w,c
  8489  000B5C  2043               	addwfc	_extras+7,w,c
  8490  000B5E  6E33               	movwf	(??_clearing+1)& (0+255),c
  8491  000B60  BE33               	btfsc	??_clearing+1,7,c
  8492  000B62  D7A7               	goto	l137
  8493  000B64  5033               	movf	??_clearing+1,w,c
  8494  000B66  E104               	bnz	l5059
  8495  000B68  0E23               	movlw	35
  8496  000B6A  5C32               	subwf	??_clearing,w,c
  8497  000B6C  A0D8               	btfss	status,0,c
  8498  000B6E  D7A1               	goto	l137
  8499  000B70                     u6200:
  8500  000B70                     l5059:
  8501                           
  8502                           ;main.c: 231: }
  8503                           ;main.c: 233: motorControl(WASHER, STOP);
  8504  000B70  0E00               	movlw	0
  8505  000B72  B8C7               	btfsc	4039,4,c	;volatile
  8506  000B74  0E01               	movlw	1
  8507  000B76  6E27               	movwf	motorControl@dir,c
  8508  000B78  0E03               	movlw	3
  8509  000B7A  EC3C  F010         	call	_motorControl
  8510                           
  8511                           ;main.c: 235: I2C_Send(nanoAddr, 7);
  8512  000B7E  0E07               	movlw	7
  8513  000B80  6E2A               	movwf	I2C_Send@data,c
  8514  000B82  0E00               	movlw	0
  8515  000B84  6E2B               	movwf	I2C_Send@data+1,c
  8516  000B86  0E7F               	movlw	low _nanoAddr
  8517  000B88  6EF6               	movwf	tblptrl,c
  8518  000B8A                     	if	1	;There is more than 1 active tblptr byte
  8519  000B8A  0EFC               	movlw	high _nanoAddr
  8520  000B8C  6EF7               	movwf	tblptrh,c
  8521  000B8E                     	endif
  8522  000B8E                     	if	1	;There are 3 active tblptr bytes
  8523  000B8E  0E00               	movlw	low (_nanoAddr shr (0+16))
  8524  000B90  6EF8               	movwf	tblptru,c
  8525  000B92                     	endif
  8526  000B92  0008               	tblrd		*
  8527  000B94  50F5               	movf	tablat,w,c
  8528  000B96  EC32  F012         	call	_I2C_Send
  8529  000B9A  0012               	return		;funcret
  8530  000B9C                     __end_of_clearing:
  8531                           	opt stack 0
  8532                           tosu	equ	0xFFF
  8533                           tosh	equ	0xFFE
  8534                           tosl	equ	0xFFD
  8535                           pclath	equ	0xFFA
  8536                           tblptru	equ	0xFF8
  8537                           tblptrh	equ	0xFF7
  8538                           tblptrl	equ	0xFF6
  8539                           tablat	equ	0xFF5
  8540                           prodh	equ	0xFF4
  8541                           prodl	equ	0xFF3
  8542                           indf0	equ	0xFEF
  8543                           postinc0	equ	0xFEE
  8544                           fsr0h	equ	0xFEA
  8545                           fsr0l	equ	0xFE9
  8546                           wreg	equ	0xFE8
  8547                           postdec1	equ	0xFE5
  8548                           plusw1	equ	0xFE3
  8549                           fsr1l	equ	0xFE1
  8550                           indf2	equ	0xFDF
  8551                           postinc2	equ	0xFDE
  8552                           postdec2	equ	0xFDD
  8553                           plusw2	equ	0xFDB
  8554                           fsr2h	equ	0xFDA
  8555                           fsr2l	equ	0xFD9
  8556                           status	equ	0xFD8
  8557                           
  8558 ;; *************** function _tock *****************
  8559 ;; Defined at:
  8560 ;;		line 56 in file "timer.c"
  8561 ;; Parameters:    Size  Location     Type
  8562 ;;		None
  8563 ;; Auto vars:     Size  Location     Type
  8564 ;;		None
  8565 ;; Return value:  Size  Location     Type
  8566 ;;                  3   38[COMRAM] void 
  8567 ;; Registers used:
  8568 ;;		None
  8569 ;; Tracked objects:
  8570 ;;		On entry : 0/0
  8571 ;;		On exit  : 0/0
  8572 ;;		Unchanged: 0/0
  8573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8574 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8577 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8578 ;;Total ram usage:        3 bytes
  8579 ;; Hardware stack levels used:    1
  8580 ;; Hardware stack levels required when called:    4
  8581 ;; This function calls:
  8582 ;;		Nothing
  8583 ;; This function is called by:
  8584 ;;		_packageCompartment
  8585 ;;		_clearing
  8586 ;; This function uses a non-reentrant model
  8587 ;;
  8588                           
  8589                           	psect	text19
  8590  002C26                     __ptext19:
  8591                           	opt stack 0
  8592  002C26                     _tock:
  8593                           	opt stack 23
  8594                           
  8595                           ;timer.c: 61: return timeSinceLastTic;
  8596                           
  8597                           ;incstack = 0
  8598  002C26  C04F  F027         	movff	_timeSinceLastTic,?_tock	;volatile
  8599  002C2A  C050  F028         	movff	_timeSinceLastTic+1,?_tock+1	;volatile
  8600  002C2E  C051  F029         	movff	_timeSinceLastTic+2,?_tock+2	;volatile
  8601  002C32  0012               	return		;funcret
  8602  002C34                     __end_of_tock:
  8603                           	opt stack 0
  8604                           tosu	equ	0xFFF
  8605                           tosh	equ	0xFFE
  8606                           tosl	equ	0xFFD
  8607                           pclath	equ	0xFFA
  8608                           tblptru	equ	0xFF8
  8609                           tblptrh	equ	0xFF7
  8610                           tblptrl	equ	0xFF6
  8611                           tablat	equ	0xFF5
  8612                           prodh	equ	0xFF4
  8613                           prodl	equ	0xFF3
  8614                           indf0	equ	0xFEF
  8615                           postinc0	equ	0xFEE
  8616                           fsr0h	equ	0xFEA
  8617                           fsr0l	equ	0xFE9
  8618                           wreg	equ	0xFE8
  8619                           postdec1	equ	0xFE5
  8620                           plusw1	equ	0xFE3
  8621                           fsr1l	equ	0xFE1
  8622                           indf2	equ	0xFDF
  8623                           postinc2	equ	0xFDE
  8624                           postdec2	equ	0xFDD
  8625                           plusw2	equ	0xFDB
  8626                           fsr2h	equ	0xFDA
  8627                           fsr2l	equ	0xFD9
  8628                           status	equ	0xFD8
  8629                           
  8630 ;; *************** function _tic *****************
  8631 ;; Defined at:
  8632 ;;		line 47 in file "timer.c"
  8633 ;; Parameters:    Size  Location     Type
  8634 ;;		None
  8635 ;; Auto vars:     Size  Location     Type
  8636 ;;		None
  8637 ;; Return value:  Size  Location     Type
  8638 ;;                  1    wreg      void 
  8639 ;; Registers used:
  8640 ;;		wreg, status,2, cstack
  8641 ;; Tracked objects:
  8642 ;;		On entry : 0/0
  8643 ;;		On exit  : 0/0
  8644 ;;		Unchanged: 0/0
  8645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8649 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8650 ;;Total ram usage:        0 bytes
  8651 ;; Hardware stack levels used:    1
  8652 ;; Hardware stack levels required when called:    5
  8653 ;; This function calls:
  8654 ;;		_tmr0Init
  8655 ;; This function is called by:
  8656 ;;		_packageCompartment
  8657 ;;		_clearing
  8658 ;; This function uses a non-reentrant model
  8659 ;;
  8660                           
  8661                           	psect	text20
  8662  002C02                     __ptext20:
  8663                           	opt stack 0
  8664  002C02                     _tic:
  8665                           	opt stack 22
  8666                           
  8667                           ;timer.c: 52: tmr0Init();
  8668                           
  8669                           ;incstack = 0
  8670  002C02  ECC3  F015         	call	_tmr0Init	;wreg free
  8671                           
  8672                           ;timer.c: 53: timeSinceLastTic = 0;
  8673  002C06  0E00               	movlw	0
  8674  002C08  6E4F               	movwf	_timeSinceLastTic,c	;volatile
  8675  002C0A  0E00               	movlw	0
  8676  002C0C  6E50               	movwf	_timeSinceLastTic+1,c	;volatile
  8677  002C0E  0E00               	movlw	0
  8678  002C10  6E51               	movwf	_timeSinceLastTic+2,c	;volatile
  8679  002C12  0012               	return		;funcret
  8680  002C14                     __end_of_tic:
  8681                           	opt stack 0
  8682                           tosu	equ	0xFFF
  8683                           tosh	equ	0xFFE
  8684                           tosl	equ	0xFFD
  8685                           pclath	equ	0xFFA
  8686                           tblptru	equ	0xFF8
  8687                           tblptrh	equ	0xFF7
  8688                           tblptrl	equ	0xFF6
  8689                           tablat	equ	0xFF5
  8690                           prodh	equ	0xFF4
  8691                           prodl	equ	0xFF3
  8692                           indf0	equ	0xFEF
  8693                           postinc0	equ	0xFEE
  8694                           fsr0h	equ	0xFEA
  8695                           fsr0l	equ	0xFE9
  8696                           wreg	equ	0xFE8
  8697                           postdec1	equ	0xFE5
  8698                           plusw1	equ	0xFE3
  8699                           fsr1l	equ	0xFE1
  8700                           indf2	equ	0xFDF
  8701                           postinc2	equ	0xFDE
  8702                           postdec2	equ	0xFDD
  8703                           plusw2	equ	0xFDB
  8704                           fsr2h	equ	0xFDA
  8705                           fsr2l	equ	0xFD9
  8706                           status	equ	0xFD8
  8707                           
  8708 ;; *************** function _tmr0Init *****************
  8709 ;; Defined at:
  8710 ;;		line 18 in file "timer.c"
  8711 ;; Parameters:    Size  Location     Type
  8712 ;;		None
  8713 ;; Auto vars:     Size  Location     Type
  8714 ;;		None
  8715 ;; Return value:  Size  Location     Type
  8716 ;;                  1    wreg      void 
  8717 ;; Registers used:
  8718 ;;		wreg, status,2
  8719 ;; Tracked objects:
  8720 ;;		On entry : 0/0
  8721 ;;		On exit  : 0/0
  8722 ;;		Unchanged: 0/0
  8723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8727 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8728 ;;Total ram usage:        0 bytes
  8729 ;; Hardware stack levels used:    1
  8730 ;; Hardware stack levels required when called:    4
  8731 ;; This function calls:
  8732 ;;		Nothing
  8733 ;; This function is called by:
  8734 ;;		_tic
  8735 ;;		_Timer_startOperation
  8736 ;; This function uses a non-reentrant model
  8737 ;;
  8738                           
  8739                           	psect	text21
  8740  002B86                     __ptext21:
  8741                           	opt stack 0
  8742  002B86                     _tmr0Init:
  8743                           	opt stack 22
  8744                           
  8745                           ;timer.c: 27: if (!timerInit) {
  8746                           
  8747                           ;incstack = 0
  8748  002B86  504C               	movf	_timerInit,w,c
  8749  002B88  A4D8               	btfss	status,2,c
  8750  002B8A  0012               	return	
  8751                           
  8752                           ;timer.c: 28: T0CONbits.T08BIT = 0;
  8753  002B8C  9CD5               	bcf	4053,6,c	;volatile
  8754                           
  8755                           ;timer.c: 29: T0CONbits.T0CS = 0;
  8756  002B8E  9AD5               	bcf	4053,5,c	;volatile
  8757                           
  8758                           ;timer.c: 30: T0CONbits.PSA = 0;
  8759  002B90  96D5               	bcf	4053,3,c	;volatile
  8760                           
  8761                           ;timer.c: 33: T0CONbits.T0PS2 = 1;
  8762  002B92  84D5               	bsf	4053,2,c	;volatile
  8763                           
  8764                           ;timer.c: 34: T0CONbits.T0PS1 = 1;
  8765  002B94  82D5               	bsf	4053,1,c	;volatile
  8766                           
  8767                           ;timer.c: 35: T0CONbits.T0PS0 = 1;
  8768  002B96  80D5               	bsf	4053,0,c	;volatile
  8769                           
  8770                           ;timer.c: 38: TMR0H = 0xF2;
  8771  002B98  0EF2               	movlw	242
  8772  002B9A  6ED7               	movwf	4055,c	;volatile
  8773                           
  8774                           ;timer.c: 39: TMR0L = 0xC0;
  8775  002B9C  0EC0               	movlw	192
  8776  002B9E  6ED6               	movwf	4054,c	;volatile
  8777                           
  8778                           ;timer.c: 40: T0CONbits.TMR0ON = 1;
  8779  002BA0  8ED5               	bsf	4053,7,c	;volatile
  8780                           
  8781                           ;timer.c: 41: TMR0IE = 1;
  8782  002BA2  8AF2               	bsf	intcon,5,c	;volatile
  8783                           
  8784                           ;timer.c: 44: (INTCONbits.GIE = 1);
  8785  002BA4  8EF2               	bsf	intcon,7,c	;volatile
  8786  002BA6  0012               	return	
  8787  002BA8                     __end_of_tmr0Init:
  8788                           	opt stack 0
  8789                           tosu	equ	0xFFF
  8790                           tosh	equ	0xFFE
  8791                           tosl	equ	0xFFD
  8792                           pclath	equ	0xFFA
  8793                           tblptru	equ	0xFF8
  8794                           tblptrh	equ	0xFF7
  8795                           tblptrl	equ	0xFF6
  8796                           tablat	equ	0xFF5
  8797                           prodh	equ	0xFF4
  8798                           prodl	equ	0xFF3
  8799                           intcon	equ	0xFF2
  8800                           indf0	equ	0xFEF
  8801                           postinc0	equ	0xFEE
  8802                           fsr0h	equ	0xFEA
  8803                           fsr0l	equ	0xFE9
  8804                           wreg	equ	0xFE8
  8805                           postdec1	equ	0xFE5
  8806                           plusw1	equ	0xFE3
  8807                           fsr1l	equ	0xFE1
  8808                           indf2	equ	0xFDF
  8809                           postinc2	equ	0xFDE
  8810                           postdec2	equ	0xFDD
  8811                           plusw2	equ	0xFDB
  8812                           fsr2h	equ	0xFDA
  8813                           fsr2l	equ	0xFD9
  8814                           status	equ	0xFD8
  8815                           
  8816 ;; *************** function _motorControl *****************
  8817 ;; Defined at:
  8818 ;;		line 6 in file "motors.c"
  8819 ;; Parameters:    Size  Location     Type
  8820 ;;  motor           1    wreg     enum E2960
  8821 ;;  dir             1   38[COMRAM] enum E2966
  8822 ;; Auto vars:     Size  Location     Type
  8823 ;;  motor           1   39[COMRAM] enum E2960
  8824 ;; Return value:  Size  Location     Type
  8825 ;;                  1    wreg      void 
  8826 ;; Registers used:
  8827 ;;		wreg, status,2, status,0
  8828 ;; Tracked objects:
  8829 ;;		On entry : 0/0
  8830 ;;		On exit  : 0/0
  8831 ;;		Unchanged: 0/0
  8832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8833 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8834 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8836 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8837 ;;Total ram usage:        2 bytes
  8838 ;; Hardware stack levels used:    1
  8839 ;; Hardware stack levels required when called:    4
  8840 ;; This function calls:
  8841 ;;		Nothing
  8842 ;; This function is called by:
  8843 ;;		_packageCompartment
  8844 ;;		_clearing
  8845 ;; This function uses a non-reentrant model
  8846 ;;
  8847                           
  8848                           	psect	text22
  8849  002078                     __ptext22:
  8850                           	opt stack 0
  8851  002078                     _motorControl:
  8852                           	opt stack 23
  8853                           
  8854                           ;incstack = 0
  8855                           ;motorControl@motor stored from wreg
  8856  002078  6E28               	movwf	motorControl@motor,c
  8857                           
  8858                           ;motors.c: 7: switch(motor) {
  8859  00207A  D04C               	goto	l619
  8860  00207C                     
  8861                           ;motors.c: 9: if (dir == FORWARD) {
  8862  00207C  5027               	movf	motorControl@dir,w,c
  8863  00207E  A4D8               	btfss	status,2,c
  8864  002080  D003               	goto	l621
  8865                           
  8866                           ;motors.c: 10: LATBbits.LATB3 = 1;
  8867  002082  868A               	bsf	3978,3,c	;volatile
  8868                           
  8869                           ;motors.c: 11: LATCbits.LATC0 = 0;
  8870  002084  908B               	bcf	3979,0,c	;volatile
  8871                           
  8872                           ;motors.c: 12: } else if (dir == REVERSE) {
  8873  002086  0012               	return	
  8874  002088                     l621:
  8875  002088  0427               	decf	motorControl@dir,w,c
  8876  00208A  A4D8               	btfss	status,2,c
  8877  00208C  D003               	goto	l623
  8878                           
  8879                           ;motors.c: 13: LATBbits.LATB3 = 0;
  8880  00208E  968A               	bcf	3978,3,c	;volatile
  8881                           
  8882                           ;motors.c: 14: LATCbits.LATC0 = 1;
  8883  002090  808B               	bsf	3979,0,c	;volatile
  8884                           
  8885                           ;motors.c: 15: } else if (dir == STOPMOTOR) {
  8886  002092  0012               	return	
  8887  002094                     l623:
  8888  002094  0E02               	movlw	2
  8889  002096  1827               	xorwf	motorControl@dir,w,c
  8890  002098  A4D8               	btfss	status,2,c
  8891  00209A  0012               	return	
  8892                           
  8893                           ;motors.c: 16: LATBbits.LATB3 = 1;
  8894  00209C  868A               	bsf	3978,3,c	;volatile
  8895                           
  8896                           ;motors.c: 17: LATCbits.LATC0 = 1;
  8897  00209E  808B               	bsf	3979,0,c	;volatile
  8898                           
  8899                           ;motors.c: 18: }
  8900                           ;motors.c: 19: break;
  8901  0020A0  0012               	return	
  8902  0020A2                     
  8903                           ;motors.c: 21: if (dir == FORWARD) {
  8904  0020A2  5027               	movf	motorControl@dir,w,c
  8905  0020A4  A4D8               	btfss	status,2,c
  8906  0020A6  D003               	goto	l628
  8907                           
  8908                           ;motors.c: 22: LATCbits.LATC1 = 1;
  8909  0020A8  828B               	bsf	3979,1,c	;volatile
  8910                           
  8911                           ;motors.c: 23: LATCbits.LATC2 = 0;
  8912  0020AA  948B               	bcf	3979,2,c	;volatile
  8913                           
  8914                           ;motors.c: 24: } else if (dir == REVERSE) {
  8915  0020AC  0012               	return	
  8916  0020AE                     l628:
  8917  0020AE  0427               	decf	motorControl@dir,w,c
  8918  0020B0  A4D8               	btfss	status,2,c
  8919  0020B2  D003               	goto	l630
  8920                           
  8921                           ;motors.c: 25: LATCbits.LATC1 = 0;
  8922  0020B4  928B               	bcf	3979,1,c	;volatile
  8923                           
  8924                           ;motors.c: 26: LATCbits.LATC2 = 1;
  8925  0020B6  848B               	bsf	3979,2,c	;volatile
  8926                           
  8927                           ;motors.c: 27: } else if (dir == STOPMOTOR) {
  8928  0020B8  0012               	return	
  8929  0020BA                     l630:
  8930  0020BA  0E02               	movlw	2
  8931  0020BC  1827               	xorwf	motorControl@dir,w,c
  8932  0020BE  A4D8               	btfss	status,2,c
  8933  0020C0  0012               	return	
  8934                           
  8935                           ;motors.c: 28: LATCbits.LATC1 = 1;
  8936  0020C2  828B               	bsf	3979,1,c	;volatile
  8937                           
  8938                           ;motors.c: 29: LATCbits.LATC2 = 1;
  8939  0020C4  848B               	bsf	3979,2,c	;volatile
  8940                           
  8941                           ;motors.c: 30: }
  8942                           ;motors.c: 31: break;
  8943  0020C6  0012               	return	
  8944  0020C8                     
  8945                           ;motors.c: 33: if (dir == FORWARD) {
  8946  0020C8  5027               	movf	motorControl@dir,w,c
  8947  0020CA  A4D8               	btfss	status,2,c
  8948  0020CC  D003               	goto	l634
  8949                           
  8950                           ;motors.c: 34: LATCbits.LATC5 = 1;
  8951  0020CE  8A8B               	bsf	3979,5,c	;volatile
  8952                           
  8953                           ;motors.c: 35: LATCbits.LATC6 = 0;
  8954  0020D0  9C8B               	bcf	3979,6,c	;volatile
  8955                           
  8956                           ;motors.c: 36: } else if (dir == REVERSE) {
  8957  0020D2  0012               	return	
  8958  0020D4                     l634:
  8959  0020D4  0427               	decf	motorControl@dir,w,c
  8960  0020D6  A4D8               	btfss	status,2,c
  8961  0020D8  D003               	goto	l636
  8962                           
  8963                           ;motors.c: 37: LATCbits.LATC5 = 0;
  8964  0020DA  9A8B               	bcf	3979,5,c	;volatile
  8965                           
  8966                           ;motors.c: 38: LATCbits.LATC6 = 1;
  8967  0020DC  8C8B               	bsf	3979,6,c	;volatile
  8968                           
  8969                           ;motors.c: 39: } else if (dir == STOPMOTOR) {
  8970  0020DE  0012               	return	
  8971  0020E0                     l636:
  8972  0020E0  0E02               	movlw	2
  8973  0020E2  1827               	xorwf	motorControl@dir,w,c
  8974  0020E4  A4D8               	btfss	status,2,c
  8975  0020E6  0012               	return	
  8976                           
  8977                           ;motors.c: 40: LATCbits.LATC5 = 1;
  8978  0020E8  8A8B               	bsf	3979,5,c	;volatile
  8979                           
  8980                           ;motors.c: 41: LATCbits.LATC6 = 1;
  8981  0020EA  8C8B               	bsf	3979,6,c	;volatile
  8982                           
  8983                           ;motors.c: 42: }
  8984                           ;motors.c: 43: break;
  8985  0020EC  0012               	return	
  8986  0020EE                     
  8987                           ;motors.c: 45: if (dir == FORWARD) {
  8988  0020EE  5027               	movf	motorControl@dir,w,c
  8989  0020F0  A4D8               	btfss	status,2,c
  8990  0020F2  D003               	goto	l640
  8991                           
  8992                           ;motors.c: 46: LATCbits.LATC7 = 1;
  8993  0020F4  8E8B               	bsf	3979,7,c	;volatile
  8994                           
  8995                           ;motors.c: 47: LATEbits.LATE0 = 0;
  8996  0020F6  908D               	bcf	3981,0,c	;volatile
  8997                           
  8998                           ;motors.c: 48: } else if (dir == REVERSE) {
  8999  0020F8  0012               	return	
  9000  0020FA                     l640:
  9001  0020FA  0427               	decf	motorControl@dir,w,c
  9002  0020FC  A4D8               	btfss	status,2,c
  9003  0020FE  D003               	goto	l642
  9004                           
  9005                           ;motors.c: 49: LATCbits.LATC7 = 0;
  9006  002100  9E8B               	bcf	3979,7,c	;volatile
  9007                           
  9008                           ;motors.c: 50: LATEbits.LATE0 = 1;
  9009  002102  808D               	bsf	3981,0,c	;volatile
  9010                           
  9011                           ;motors.c: 51: } else if (dir == STOPMOTOR) {
  9012  002104  0012               	return	
  9013  002106                     l642:
  9014  002106  0E02               	movlw	2
  9015  002108  1827               	xorwf	motorControl@dir,w,c
  9016  00210A  A4D8               	btfss	status,2,c
  9017  00210C  0012               	return	
  9018                           
  9019                           ;motors.c: 52: LATCbits.LATC7 = 1;
  9020  00210E  8E8B               	bsf	3979,7,c	;volatile
  9021                           
  9022                           ;motors.c: 53: LATEbits.LATE0 = 1;
  9023  002110  808D               	bsf	3981,0,c	;volatile
  9024                           
  9025                           ;motors.c: 58: }
  9026                           
  9027                           ;motors.c: 57: break;
  9028                           
  9029                           ;motors.c: 56: default:
  9030                           
  9031                           ;motors.c: 54: }
  9032                           ;motors.c: 55: break;
  9033  002112  0012               	return	
  9034  002114                     l619:
  9035  002114  5028               	movf	motorControl@motor,w,c
  9036                           
  9037                           ; Switch size 1, requested type "space"
  9038                           ; Number of cases is 4, Range of values is 0 to 3
  9039                           ; switch strategies available:
  9040                           ; Name         Instructions Cycles
  9041                           ; simple_byte           13     7 (average)
  9042                           ;	Chosen strategy is simple_byte
  9043  002116  0A00               	xorlw	0	; case 0
  9044  002118  B4D8               	btfsc	status,2,c
  9045  00211A  D7B0               	goto	l620
  9046  00211C  0A01               	xorlw	1	; case 1
  9047  00211E  B4D8               	btfsc	status,2,c
  9048  002120  D7C0               	goto	l627
  9049  002122  0A03               	xorlw	3	; case 2
  9050  002124  B4D8               	btfsc	status,2,c
  9051  002126  D7D0               	goto	l633
  9052  002128  0A01               	xorlw	1	; case 3
  9053  00212A  A4D8               	btfss	status,2,c
  9054  00212C  0012               	return	
  9055  00212E  D7DF               	goto	l639
  9056  002130                     __end_of_motorControl:
  9057                           	opt stack 0
  9058                           tosu	equ	0xFFF
  9059                           tosh	equ	0xFFE
  9060                           tosl	equ	0xFFD
  9061                           pclath	equ	0xFFA
  9062                           tblptru	equ	0xFF8
  9063                           tblptrh	equ	0xFF7
  9064                           tblptrl	equ	0xFF6
  9065                           tablat	equ	0xFF5
  9066                           prodh	equ	0xFF4
  9067                           prodl	equ	0xFF3
  9068                           intcon	equ	0xFF2
  9069                           indf0	equ	0xFEF
  9070                           postinc0	equ	0xFEE
  9071                           fsr0h	equ	0xFEA
  9072                           fsr0l	equ	0xFE9
  9073                           wreg	equ	0xFE8
  9074                           postdec1	equ	0xFE5
  9075                           plusw1	equ	0xFE3
  9076                           fsr1l	equ	0xFE1
  9077                           indf2	equ	0xFDF
  9078                           postinc2	equ	0xFDE
  9079                           postdec2	equ	0xFDD
  9080                           plusw2	equ	0xFDB
  9081                           fsr2h	equ	0xFDA
  9082                           fsr2l	equ	0xFD9
  9083                           status	equ	0xFD8
  9084                           
  9085 ;; *************** function ___ftge *****************
  9086 ;; Defined at:
  9087 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  9088 ;; Parameters:    Size  Location     Type
  9089 ;;  ff1             3    9[BANK0 ] float 
  9090 ;;  ff2             3   12[BANK0 ] float 
  9091 ;; Auto vars:     Size  Location     Type
  9092 ;;		None
  9093 ;; Return value:  Size  Location     Type
  9094 ;;		None               void
  9095 ;; Registers used:
  9096 ;;		wreg, status,2, status,0
  9097 ;; Tracked objects:
  9098 ;;		On entry : 0/0
  9099 ;;		On exit  : 0/0
  9100 ;;		Unchanged: 0/0
  9101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9102 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9104 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9105 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9106 ;;Total ram usage:        9 bytes
  9107 ;; Hardware stack levels used:    1
  9108 ;; Hardware stack levels required when called:    4
  9109 ;; This function calls:
  9110 ;;		Nothing
  9111 ;; This function is called by:
  9112 ;;		_packageCompartment
  9113 ;;		_clearing
  9114 ;; This function uses a non-reentrant model
  9115 ;;
  9116                           
  9117                           	psect	text23
  9118  0023D2                     __ptext23:
  9119                           	opt stack 0
  9120  0023D2                     ___ftge:
  9121                           	opt stack 23
  9122                           
  9123                           ;incstack = 0
  9124  0023D2  0100               	movlb	0	; () banked
  9125  0023D4  AF8B               	btfss	(___ftge@ff1+2)& (0+255),7,b
  9126  0023D6  D016               	goto	l976
  9127                           
  9128                           ; BSR set to: 0
  9129  0023D8  C089  F08F         	movff	___ftge@ff1,??___ftge
  9130  0023DC  C08A  F090         	movff	___ftge@ff1+1,??___ftge+1
  9131  0023E0  C08B  F091         	movff	___ftge@ff1+2,??___ftge+2
  9132  0023E4  1F8F               	comf	??___ftge& (0+255),f,b
  9133  0023E6  1F90               	comf	(??___ftge+1)& (0+255),f,b
  9134  0023E8  1F91               	comf	(??___ftge+2)& (0+255),f,b
  9135  0023EA  2B8F               	incf	??___ftge& (0+255),f,b
  9136  0023EC  0E00               	movlw	0
  9137  0023EE  2390               	addwfc	(??___ftge+1)& (0+255),f,b
  9138  0023F0  2391               	addwfc	(??___ftge+2)& (0+255),f,b
  9139  0023F2  0E00               	movlw	0
  9140  0023F4  258F               	addwf	??___ftge& (0+255),w,b
  9141  0023F6  6F89               	movwf	___ftge@ff1& (0+255),b
  9142  0023F8  0E00               	movlw	0
  9143  0023FA  2190               	addwfc	(??___ftge+1)& (0+255),w,b
  9144  0023FC  6F8A               	movwf	(___ftge@ff1+1)& (0+255),b
  9145  0023FE  0E80               	movlw	128
  9146  002400  2191               	addwfc	(??___ftge+2)& (0+255),w,b
  9147  002402  6F8B               	movwf	(___ftge@ff1+2)& (0+255),b
  9148  002404                     l976:
  9149                           
  9150                           ; BSR set to: 0
  9151                           
  9152                           ; BSR set to: 0
  9153  002404  AF8E               	btfss	(___ftge@ff2+2)& (0+255),7,b
  9154  002406  D016               	goto	l977
  9155                           
  9156                           ; BSR set to: 0
  9157  002408  C08C  F08F         	movff	___ftge@ff2,??___ftge
  9158  00240C  C08D  F090         	movff	___ftge@ff2+1,??___ftge+1
  9159  002410  C08E  F091         	movff	___ftge@ff2+2,??___ftge+2
  9160  002414  1F8F               	comf	??___ftge& (0+255),f,b
  9161  002416  1F90               	comf	(??___ftge+1)& (0+255),f,b
  9162  002418  1F91               	comf	(??___ftge+2)& (0+255),f,b
  9163  00241A  2B8F               	incf	??___ftge& (0+255),f,b
  9164  00241C  0E00               	movlw	0
  9165  00241E  2390               	addwfc	(??___ftge+1)& (0+255),f,b
  9166  002420  2391               	addwfc	(??___ftge+2)& (0+255),f,b
  9167  002422  0E00               	movlw	0
  9168  002424  258F               	addwf	??___ftge& (0+255),w,b
  9169  002426  6F8C               	movwf	___ftge@ff2& (0+255),b
  9170  002428  0E00               	movlw	0
  9171  00242A  2190               	addwfc	(??___ftge+1)& (0+255),w,b
  9172  00242C  6F8D               	movwf	(___ftge@ff2+1)& (0+255),b
  9173  00242E  0E80               	movlw	128
  9174  002430  2191               	addwfc	(??___ftge+2)& (0+255),w,b
  9175  002432  6F8E               	movwf	(___ftge@ff2+2)& (0+255),b
  9176  002434                     l977:
  9177                           
  9178                           ; BSR set to: 0
  9179                           
  9180                           ; BSR set to: 0
  9181  002434  0E00               	movlw	0
  9182  002436  1B89               	xorwf	___ftge@ff1& (0+255),f,b
  9183  002438  0E00               	movlw	0
  9184  00243A  1B8A               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  9185  00243C  0E80               	movlw	128
  9186  00243E  1B8B               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  9187                           
  9188                           ; BSR set to: 0
  9189  002440  0E00               	movlw	0
  9190  002442  1B8C               	xorwf	___ftge@ff2& (0+255),f,b
  9191  002444  0E00               	movlw	0
  9192  002446  1B8D               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  9193  002448  0E80               	movlw	128
  9194  00244A  1B8E               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  9195  00244C  518C               	movf	___ftge@ff2& (0+255),w,b
  9196  00244E  5D89               	subwf	___ftge@ff1& (0+255),w,b
  9197  002450  518D               	movf	(___ftge@ff2+1)& (0+255),w,b
  9198  002452  598A               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  9199  002454  518E               	movf	(___ftge@ff2+2)& (0+255),w,b
  9200  002456  598B               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  9201  002458  B0D8               	btfsc	status,0,c
  9202  00245A  D002               	goto	l4197
  9203                           
  9204                           ; BSR set to: 0
  9205  00245C  90D8               	bcf	status,0,c
  9206  00245E  0012               	return	
  9207  002460                     l4197:
  9208                           
  9209                           ; BSR set to: 0
  9210                           
  9211                           ; BSR set to: 0
  9212  002460  80D8               	bsf	status,0,c
  9213                           
  9214                           ; BSR set to: 0
  9215  002462  0012               	return	
  9216  002464                     __end_of___ftge:
  9217                           	opt stack 0
  9218                           tosu	equ	0xFFF
  9219                           tosh	equ	0xFFE
  9220                           tosl	equ	0xFFD
  9221                           pclath	equ	0xFFA
  9222                           tblptru	equ	0xFF8
  9223                           tblptrh	equ	0xFF7
  9224                           tblptrl	equ	0xFF6
  9225                           tablat	equ	0xFF5
  9226                           prodh	equ	0xFF4
  9227                           prodl	equ	0xFF3
  9228                           intcon	equ	0xFF2
  9229                           indf0	equ	0xFEF
  9230                           postinc0	equ	0xFEE
  9231                           fsr0h	equ	0xFEA
  9232                           fsr0l	equ	0xFE9
  9233                           wreg	equ	0xFE8
  9234                           postdec1	equ	0xFE5
  9235                           plusw1	equ	0xFE3
  9236                           fsr1l	equ	0xFE1
  9237                           indf2	equ	0xFDF
  9238                           postinc2	equ	0xFDE
  9239                           postdec2	equ	0xFDD
  9240                           plusw2	equ	0xFDB
  9241                           fsr2h	equ	0xFDA
  9242                           fsr2l	equ	0xFD9
  9243                           status	equ	0xFD8
  9244                           
  9245 ;; *************** function ___ftadd *****************
  9246 ;; Defined at:
  9247 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  9248 ;; Parameters:    Size  Location     Type
  9249 ;;  f1              3    0[BANK0 ] float 
  9250 ;;  f2              3    3[BANK0 ] float 
  9251 ;; Auto vars:     Size  Location     Type
  9252 ;;  exp1            1    8[BANK0 ] unsigned char 
  9253 ;;  exp2            1    7[BANK0 ] unsigned char 
  9254 ;;  sign            1    6[BANK0 ] unsigned char 
  9255 ;; Return value:  Size  Location     Type
  9256 ;;                  3    0[BANK0 ] float 
  9257 ;; Registers used:
  9258 ;;		wreg, status,2, status,0, cstack
  9259 ;; Tracked objects:
  9260 ;;		On entry : 0/0
  9261 ;;		On exit  : 0/0
  9262 ;;		Unchanged: 0/0
  9263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9264 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9265 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9266 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9267 ;;      Totals:         3       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9268 ;;Total ram usage:       12 bytes
  9269 ;; Hardware stack levels used:    1
  9270 ;; Hardware stack levels required when called:    5
  9271 ;; This function calls:
  9272 ;;		___ftpack
  9273 ;; This function is called by:
  9274 ;;		_packageCompartment
  9275 ;;		_clearing
  9276 ;; This function uses a non-reentrant model
  9277 ;;
  9278                           
  9279                           	psect	text24
  9280  001D1E                     __ptext24:
  9281                           	opt stack 0
  9282  001D1E                     ___ftadd:
  9283                           	opt stack 22
  9284                           
  9285                           ; BSR set to: 0
  9286                           ;incstack = 0
  9287  001D1E  C082  F02F         	movff	___ftadd@f1+2,??___ftadd
  9288  001D22  6A30               	clrf	(??___ftadd+1)& (0+255),c
  9289  001D24  6A31               	clrf	(??___ftadd+2)& (0+255),c
  9290  001D26  0100               	movlb	0	; () banked
  9291  001D28  3581               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  9292  001D2A  362F               	rlcf	??___ftadd& (0+255),f,c
  9293  001D2C  E301               	bnc	u5571
  9294  001D2E  8030               	bsf	(??___ftadd+1)& (0+255),0,c
  9295  001D30                     u5571:
  9296  001D30  502F               	movf	??___ftadd,w,c
  9297  001D32  6F88               	movwf	___ftadd@exp1& (0+255),b
  9298  001D34  C085  F02F         	movff	___ftadd@f2+2,??___ftadd
  9299  001D38  6A30               	clrf	(??___ftadd+1)& (0+255),c
  9300  001D3A  6A31               	clrf	(??___ftadd+2)& (0+255),c
  9301  001D3C  3584               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  9302  001D3E  362F               	rlcf	??___ftadd& (0+255),f,c
  9303  001D40  E301               	bnc	u5581
  9304  001D42  8030               	bsf	(??___ftadd+1)& (0+255),0,c
  9305  001D44                     u5581:
  9306  001D44  502F               	movf	??___ftadd,w,c
  9307  001D46  6F87               	movwf	___ftadd@exp2& (0+255),b
  9308                           
  9309                           ; BSR set to: 0
  9310  001D48  5188               	movf	___ftadd@exp1& (0+255),w,b
  9311  001D4A  B4D8               	btfsc	status,2,c
  9312  001D4C  D00B               	goto	u5610
  9313                           
  9314                           ; BSR set to: 0
  9315  001D4E  5187               	movf	___ftadd@exp2& (0+255),w,b
  9316  001D50  5D88               	subwf	___ftadd@exp1& (0+255),w,b
  9317  001D52  B0D8               	btfsc	status,0,c
  9318  001D54  D00E               	goto	l935
  9319                           
  9320                           ; BSR set to: 0
  9321  001D56  5188               	movf	___ftadd@exp1& (0+255),w,b
  9322  001D58  0800               	sublw	0
  9323  001D5A  2587               	addwf	___ftadd@exp2& (0+255),w,b
  9324  001D5C  6E2F               	movwf	??___ftadd& (0+255),c
  9325  001D5E  0E18               	movlw	24
  9326  001D60  642F               	cpfsgt	??___ftadd,c
  9327  001D62  D007               	goto	l935
  9328  001D64                     u5610:
  9329                           
  9330                           ; BSR set to: 0
  9331  001D64  C083  F080         	movff	___ftadd@f2,?___ftadd
  9332  001D68  C084  F081         	movff	___ftadd@f2+1,?___ftadd+1
  9333  001D6C  C085  F082         	movff	___ftadd@f2+2,?___ftadd+2
  9334  001D70  0012               	return	
  9335  001D72                     l935:
  9336                           
  9337                           ; BSR set to: 0
  9338                           
  9339                           ; BSR set to: 0
  9340  001D72  5187               	movf	___ftadd@exp2& (0+255),w,b
  9341  001D74  B4D8               	btfsc	status,2,c
  9342  001D76  D00B               	goto	u5640
  9343                           
  9344                           ; BSR set to: 0
  9345  001D78  5188               	movf	___ftadd@exp1& (0+255),w,b
  9346  001D7A  5D87               	subwf	___ftadd@exp2& (0+255),w,b
  9347  001D7C  B0D8               	btfsc	status,0,c
  9348  001D7E  D00E               	goto	l939
  9349                           
  9350                           ; BSR set to: 0
  9351  001D80  5187               	movf	___ftadd@exp2& (0+255),w,b
  9352  001D82  0800               	sublw	0
  9353  001D84  2588               	addwf	___ftadd@exp1& (0+255),w,b
  9354  001D86  6E2F               	movwf	??___ftadd& (0+255),c
  9355  001D88  0E18               	movlw	24
  9356  001D8A  642F               	cpfsgt	??___ftadd,c
  9357  001D8C  D007               	goto	l939
  9358  001D8E                     u5640:
  9359                           
  9360                           ; BSR set to: 0
  9361  001D8E  C080  F080         	movff	___ftadd@f1,?___ftadd
  9362  001D92  C081  F081         	movff	___ftadd@f1+1,?___ftadd+1
  9363  001D96  C082  F082         	movff	___ftadd@f1+2,?___ftadd+2
  9364  001D9A  0012               	return	
  9365  001D9C                     l939:
  9366                           
  9367                           ; BSR set to: 0
  9368                           
  9369                           ; BSR set to: 0
  9370  001D9C  0E06               	movlw	6
  9371  001D9E  6F86               	movwf	___ftadd@sign& (0+255),b
  9372                           
  9373                           ; BSR set to: 0
  9374  001DA0  BF82               	btfsc	(___ftadd@f1+2)& (0+255),7,b
  9375                           
  9376                           ; BSR set to: 0
  9377  001DA2  8F86               	bsf	___ftadd@sign& (0+255),7,b
  9378                           
  9379                           ; BSR set to: 0
  9380                           
  9381                           ; BSR set to: 0
  9382  001DA4  BF85               	btfsc	(___ftadd@f2+2)& (0+255),7,b
  9383                           
  9384                           ; BSR set to: 0
  9385  001DA6  8D86               	bsf	___ftadd@sign& (0+255),6,b
  9386                           
  9387                           ; BSR set to: 0
  9388  001DA8  8F81               	bsf	(___ftadd@f1+1)& (0+255),7,b
  9389                           
  9390                           ; BSR set to: 0
  9391  001DAA  0EFF               	movlw	255
  9392  001DAC  1780               	andwf	___ftadd@f1& (0+255),f,b
  9393  001DAE  0EFF               	movlw	255
  9394  001DB0  1781               	andwf	(___ftadd@f1+1)& (0+255),f,b
  9395  001DB2  0E00               	movlw	0
  9396  001DB4  1782               	andwf	(___ftadd@f1+2)& (0+255),f,b
  9397  001DB6  8F84               	bsf	(___ftadd@f2+1)& (0+255),7,b
  9398                           
  9399                           ; BSR set to: 0
  9400  001DB8  0EFF               	movlw	255
  9401  001DBA  1783               	andwf	___ftadd@f2& (0+255),f,b
  9402  001DBC  0EFF               	movlw	255
  9403  001DBE  1784               	andwf	(___ftadd@f2+1)& (0+255),f,b
  9404  001DC0  0E00               	movlw	0
  9405  001DC2  1785               	andwf	(___ftadd@f2+2)& (0+255),f,b
  9406                           
  9407                           ; BSR set to: 0
  9408  001DC4  5187               	movf	___ftadd@exp2& (0+255),w,b
  9409  001DC6  5D88               	subwf	___ftadd@exp1& (0+255),w,b
  9410  001DC8  B0D8               	btfsc	status,0,c
  9411  001DCA  D01B               	goto	l944
  9412  001DCC                     u5670:
  9413                           
  9414                           ; BSR set to: 0
  9415                           
  9416                           ; BSR set to: 0
  9417  001DCC  90D8               	bcf	status,0,c
  9418  001DCE  3783               	rlcf	___ftadd@f2& (0+255),f,b
  9419  001DD0  3784               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  9420  001DD2  3785               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  9421  001DD4  0787               	decf	___ftadd@exp2& (0+255),f,b
  9422                           
  9423                           ; BSR set to: 0
  9424  001DD6  5188               	movf	___ftadd@exp1& (0+255),w,b
  9425  001DD8  1987               	xorwf	___ftadd@exp2& (0+255),w,b
  9426  001DDA  B4D8               	btfsc	status,2,c
  9427  001DDC  D00D               	goto	l949
  9428                           
  9429                           ; BSR set to: 0
  9430  001DDE  0786               	decf	___ftadd@sign& (0+255),f,b
  9431  001DE0  C086  F02F         	movff	___ftadd@sign,??___ftadd
  9432  001DE4  0E07               	movlw	7
  9433  001DE6  162F               	andwf	??___ftadd,f,c
  9434  001DE8  B4D8               	btfsc	status,2,c
  9435  001DEA  D006               	goto	l949
  9436  001DEC  D7EF               	goto	u5670
  9437  001DEE                     
  9438                           ; BSR set to: 0
  9439                           
  9440                           ; BSR set to: 0
  9441  001DEE  90D8               	bcf	status,0,c
  9442  001DF0  3382               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  9443  001DF2  3381               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  9444  001DF4  3380               	rrcf	___ftadd@f1& (0+255),f,b
  9445  001DF6  2B88               	incf	___ftadd@exp1& (0+255),f,b
  9446  001DF8                     l949:
  9447                           
  9448                           ; BSR set to: 0
  9449                           
  9450                           ; BSR set to: 0
  9451  001DF8  5187               	movf	___ftadd@exp2& (0+255),w,b
  9452  001DFA  1988               	xorwf	___ftadd@exp1& (0+255),w,b
  9453  001DFC  B4D8               	btfsc	status,2,c
  9454  001DFE  D01F               	goto	u5740
  9455  001E00  D7F6               	goto	l950
  9456  001E02                     l944:
  9457                           
  9458                           ; BSR set to: 0
  9459                           
  9460                           ; BSR set to: 0
  9461  001E02  5188               	movf	___ftadd@exp1& (0+255),w,b
  9462  001E04  5D87               	subwf	___ftadd@exp2& (0+255),w,b
  9463  001E06  B0D8               	btfsc	status,0,c
  9464  001E08  D01A               	goto	u5740
  9465  001E0A                     u5710:
  9466                           
  9467                           ; BSR set to: 0
  9468                           
  9469                           ; BSR set to: 0
  9470  001E0A  90D8               	bcf	status,0,c
  9471  001E0C  3780               	rlcf	___ftadd@f1& (0+255),f,b
  9472  001E0E  3781               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  9473  001E10  3782               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  9474  001E12  0788               	decf	___ftadd@exp1& (0+255),f,b
  9475                           
  9476                           ; BSR set to: 0
  9477  001E14  5188               	movf	___ftadd@exp1& (0+255),w,b
  9478  001E16  1987               	xorwf	___ftadd@exp2& (0+255),w,b
  9479  001E18  B4D8               	btfsc	status,2,c
  9480  001E1A  D00D               	goto	l958
  9481                           
  9482                           ; BSR set to: 0
  9483  001E1C  0786               	decf	___ftadd@sign& (0+255),f,b
  9484  001E1E  C086  F02F         	movff	___ftadd@sign,??___ftadd
  9485  001E22  0E07               	movlw	7
  9486  001E24  162F               	andwf	??___ftadd,f,c
  9487  001E26  B4D8               	btfsc	status,2,c
  9488  001E28  D006               	goto	l958
  9489  001E2A  D7EF               	goto	u5710
  9490  001E2C                     
  9491                           ; BSR set to: 0
  9492                           
  9493                           ; BSR set to: 0
  9494  001E2C  90D8               	bcf	status,0,c
  9495  001E2E  3385               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  9496  001E30  3384               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  9497  001E32  3383               	rrcf	___ftadd@f2& (0+255),f,b
  9498  001E34  2B87               	incf	___ftadd@exp2& (0+255),f,b
  9499  001E36                     l958:
  9500                           
  9501                           ; BSR set to: 0
  9502                           
  9503                           ; BSR set to: 0
  9504  001E36  5187               	movf	___ftadd@exp2& (0+255),w,b
  9505  001E38  1988               	xorwf	___ftadd@exp1& (0+255),w,b
  9506  001E3A  A4D8               	btfss	status,2,c
  9507  001E3C  D7F7               	goto	l959
  9508  001E3E                     u5740:
  9509                           
  9510                           ; BSR set to: 0
  9511                           
  9512                           ; BSR set to: 0
  9513                           
  9514                           ; BSR set to: 0
  9515  001E3E  AF86               	btfss	___ftadd@sign& (0+255),7,b
  9516  001E40  D00C               	goto	l961
  9517                           
  9518                           ; BSR set to: 0
  9519  001E42  0EFF               	movlw	255
  9520  001E44  1B80               	xorwf	___ftadd@f1& (0+255),f,b
  9521  001E46  0EFF               	movlw	255
  9522  001E48  1B81               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  9523  001E4A  0EFF               	movlw	255
  9524  001E4C  1B82               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  9525  001E4E  0E01               	movlw	1
  9526  001E50  2780               	addwf	___ftadd@f1& (0+255),f,b
  9527  001E52  0E00               	movlw	0
  9528  001E54  2381               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  9529  001E56  0E00               	movlw	0
  9530  001E58  2382               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  9531  001E5A                     l961:
  9532                           
  9533                           ; BSR set to: 0
  9534  001E5A  AD86               	btfss	___ftadd@sign& (0+255),6,b
  9535  001E5C  D00C               	goto	l962
  9536                           
  9537                           ; BSR set to: 0
  9538  001E5E  0EFF               	movlw	255
  9539  001E60  1B83               	xorwf	___ftadd@f2& (0+255),f,b
  9540  001E62  0EFF               	movlw	255
  9541  001E64  1B84               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  9542  001E66  0EFF               	movlw	255
  9543  001E68  1B85               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  9544  001E6A  0E01               	movlw	1
  9545  001E6C  2783               	addwf	___ftadd@f2& (0+255),f,b
  9546  001E6E  0E00               	movlw	0
  9547  001E70  2384               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9548  001E72  0E00               	movlw	0
  9549  001E74  2385               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9550  001E76                     l962:
  9551                           
  9552                           ; BSR set to: 0
  9553                           
  9554                           ; BSR set to: 0
  9555  001E76  0E00               	movlw	0
  9556  001E78  6F86               	movwf	___ftadd@sign& (0+255),b
  9557                           
  9558                           ; BSR set to: 0
  9559  001E7A  5180               	movf	___ftadd@f1& (0+255),w,b
  9560  001E7C  2783               	addwf	___ftadd@f2& (0+255),f,b
  9561  001E7E  5181               	movf	(___ftadd@f1+1)& (0+255),w,b
  9562  001E80  2384               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9563  001E82  5182               	movf	(___ftadd@f1+2)& (0+255),w,b
  9564  001E84  2385               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9565                           
  9566                           ; BSR set to: 0
  9567  001E86  AF85               	btfss	(___ftadd@f2+2)& (0+255),7,b
  9568  001E88  D00E               	goto	l963
  9569                           
  9570                           ; BSR set to: 0
  9571  001E8A  0EFF               	movlw	255
  9572  001E8C  1B83               	xorwf	___ftadd@f2& (0+255),f,b
  9573  001E8E  0EFF               	movlw	255
  9574  001E90  1B84               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  9575  001E92  0EFF               	movlw	255
  9576  001E94  1B85               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  9577  001E96  0E01               	movlw	1
  9578  001E98  2783               	addwf	___ftadd@f2& (0+255),f,b
  9579  001E9A  0E00               	movlw	0
  9580  001E9C  2384               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  9581  001E9E  0E00               	movlw	0
  9582  001EA0  2385               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  9583                           
  9584                           ; BSR set to: 0
  9585  001EA2  0E01               	movlw	1
  9586  001EA4  6F86               	movwf	___ftadd@sign& (0+255),b
  9587  001EA6                     l963:
  9588                           
  9589                           ; BSR set to: 0
  9590                           
  9591                           ; BSR set to: 0
  9592  001EA6  C083  F027         	movff	___ftadd@f2,___ftpack@arg
  9593  001EAA  C084  F028         	movff	___ftadd@f2+1,___ftpack@arg+1
  9594  001EAE  C085  F029         	movff	___ftadd@f2+2,___ftpack@arg+2
  9595  001EB2  C088  F02A         	movff	___ftadd@exp1,___ftpack@exp
  9596  001EB6  C086  F02B         	movff	___ftadd@sign,___ftpack@sign
  9597  001EBA  EC98  F010         	call	___ftpack	;wreg free
  9598  001EBE  C027  F080         	movff	?___ftpack,?___ftadd
  9599  001EC2  C028  F081         	movff	?___ftpack+1,?___ftadd+1
  9600  001EC6  C029  F082         	movff	?___ftpack+2,?___ftadd+2
  9601  001ECA  0012               	return	
  9602  001ECC                     __end_of___ftadd:
  9603                           	opt stack 0
  9604                           tosu	equ	0xFFF
  9605                           tosh	equ	0xFFE
  9606                           tosl	equ	0xFFD
  9607                           pclath	equ	0xFFA
  9608                           tblptru	equ	0xFF8
  9609                           tblptrh	equ	0xFF7
  9610                           tblptrl	equ	0xFF6
  9611                           tablat	equ	0xFF5
  9612                           prodh	equ	0xFF4
  9613                           prodl	equ	0xFF3
  9614                           intcon	equ	0xFF2
  9615                           indf0	equ	0xFEF
  9616                           postinc0	equ	0xFEE
  9617                           fsr0h	equ	0xFEA
  9618                           fsr0l	equ	0xFE9
  9619                           wreg	equ	0xFE8
  9620                           postdec1	equ	0xFE5
  9621                           plusw1	equ	0xFE3
  9622                           fsr1l	equ	0xFE1
  9623                           indf2	equ	0xFDF
  9624                           postinc2	equ	0xFDE
  9625                           postdec2	equ	0xFDD
  9626                           plusw2	equ	0xFDB
  9627                           fsr2h	equ	0xFDA
  9628                           fsr2l	equ	0xFD9
  9629                           status	equ	0xFD8
  9630                           
  9631 ;; *************** function ___ftpack *****************
  9632 ;; Defined at:
  9633 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  9634 ;; Parameters:    Size  Location     Type
  9635 ;;  arg             3   38[COMRAM] unsigned um
  9636 ;;  exp             1   41[COMRAM] unsigned char 
  9637 ;;  sign            1   42[COMRAM] unsigned char 
  9638 ;; Auto vars:     Size  Location     Type
  9639 ;;		None
  9640 ;; Return value:  Size  Location     Type
  9641 ;;                  3   38[COMRAM] float 
  9642 ;; Registers used:
  9643 ;;		wreg, status,2, status,0
  9644 ;; Tracked objects:
  9645 ;;		On entry : 0/0
  9646 ;;		On exit  : 0/0
  9647 ;;		Unchanged: 0/0
  9648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9649 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9651 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9652 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9653 ;;Total ram usage:        8 bytes
  9654 ;; Hardware stack levels used:    1
  9655 ;; Hardware stack levels required when called:    4
  9656 ;; This function calls:
  9657 ;;		Nothing
  9658 ;; This function is called by:
  9659 ;;		___ftadd
  9660 ;; This function uses a non-reentrant model
  9661 ;;
  9662                           
  9663                           	psect	text25
  9664  002130                     __ptext25:
  9665                           	opt stack 0
  9666  002130                     ___ftpack:
  9667                           	opt stack 22
  9668                           
  9669                           ;incstack = 0
  9670  002130  502A               	movf	___ftpack@exp,w,c
  9671  002132  B4D8               	btfsc	status,2,c
  9672  002134  D005               	goto	u4800
  9673  002136  5027               	movf	___ftpack@arg,w,c
  9674  002138  1028               	iorwf	___ftpack@arg+1,w,c
  9675  00213A  1029               	iorwf	___ftpack@arg+2,w,c
  9676  00213C  A4D8               	btfss	status,2,c
  9677  00213E  D00C               	goto	l904
  9678  002140                     u4800:
  9679  002140  0E00               	movlw	0
  9680  002142  6E27               	movwf	?___ftpack,c
  9681  002144  0E00               	movlw	0
  9682  002146  6E28               	movwf	?___ftpack+1,c
  9683  002148  0E00               	movlw	0
  9684  00214A  6E29               	movwf	?___ftpack+2,c
  9685  00214C  0012               	return	
  9686  00214E  2A2A               	incf	___ftpack@exp,f,c
  9687  002150  90D8               	bcf	status,0,c
  9688  002152  3229               	rrcf	___ftpack@arg+2,f,c
  9689  002154  3228               	rrcf	___ftpack@arg+1,f,c
  9690  002156  3227               	rrcf	___ftpack@arg,f,c
  9691  002158                     l904:
  9692  002158  0E00               	movlw	0
  9693  00215A  1427               	andwf	___ftpack@arg,w,c
  9694  00215C  6E2C               	movwf	??___ftpack& (0+255),c
  9695  00215E  0E00               	movlw	0
  9696  002160  1428               	andwf	___ftpack@arg+1,w,c
  9697  002162  6E2D               	movwf	(??___ftpack+1)& (0+255),c
  9698  002164  0EFE               	movlw	254
  9699  002166  1429               	andwf	___ftpack@arg+2,w,c
  9700  002168  6E2E               	movwf	(??___ftpack+2)& (0+255),c
  9701  00216A  502C               	movf	??___ftpack,w,c
  9702  00216C  102D               	iorwf	??___ftpack+1,w,c
  9703  00216E  102E               	iorwf	??___ftpack+2,w,c
  9704  002170  B4D8               	btfsc	status,2,c
  9705  002172  D00C               	goto	l907
  9706  002174  D7EC               	goto	l905
  9707  002176  2A2A               	incf	___ftpack@exp,f,c
  9708  002178  0E01               	movlw	1
  9709  00217A  2627               	addwf	___ftpack@arg,f,c
  9710  00217C  0E00               	movlw	0
  9711  00217E  2228               	addwfc	___ftpack@arg+1,f,c
  9712  002180  0E00               	movlw	0
  9713  002182  2229               	addwfc	___ftpack@arg+2,f,c
  9714  002184  90D8               	bcf	status,0,c
  9715  002186  3229               	rrcf	___ftpack@arg+2,f,c
  9716  002188  3228               	rrcf	___ftpack@arg+1,f,c
  9717  00218A  3227               	rrcf	___ftpack@arg,f,c
  9718  00218C                     l907:
  9719  00218C  0E00               	movlw	0
  9720  00218E  1427               	andwf	___ftpack@arg,w,c
  9721  002190  6E2C               	movwf	??___ftpack& (0+255),c
  9722  002192  0E00               	movlw	0
  9723  002194  1428               	andwf	___ftpack@arg+1,w,c
  9724  002196  6E2D               	movwf	(??___ftpack+1)& (0+255),c
  9725  002198  0EFF               	movlw	255
  9726  00219A  1429               	andwf	___ftpack@arg+2,w,c
  9727  00219C  6E2E               	movwf	(??___ftpack+2)& (0+255),c
  9728  00219E  502C               	movf	??___ftpack,w,c
  9729  0021A0  102D               	iorwf	??___ftpack+1,w,c
  9730  0021A2  102E               	iorwf	??___ftpack+2,w,c
  9731  0021A4  B4D8               	btfsc	status,2,c
  9732  0021A6  D006               	goto	l910
  9733  0021A8  D7E6               	goto	l908
  9734  0021AA  062A               	decf	___ftpack@exp,f,c
  9735  0021AC  90D8               	bcf	status,0,c
  9736  0021AE  3627               	rlcf	___ftpack@arg,f,c
  9737  0021B0  3628               	rlcf	___ftpack@arg+1,f,c
  9738  0021B2  3629               	rlcf	___ftpack@arg+2,f,c
  9739  0021B4                     l910:
  9740  0021B4  BE28               	btfsc	___ftpack@arg+1,7,c
  9741  0021B6  D003               	goto	u4840
  9742  0021B8  0E02               	movlw	2
  9743  0021BA  602A               	cpfslt	___ftpack@exp,c
  9744  0021BC  D7F6               	goto	l911
  9745  0021BE                     u4840:
  9746  0021BE  A02A               	btfss	___ftpack@exp,0,c
  9747  0021C0  9E28               	bcf	___ftpack@arg+1,7,c
  9748  0021C2  90D8               	bcf	status,0,c
  9749  0021C4  322A               	rrcf	___ftpack@exp,f,c
  9750  0021C6  502A               	movf	___ftpack@exp,w,c
  9751  0021C8  1229               	iorwf	___ftpack@arg+2,f,c
  9752  0021CA  502B               	movf	___ftpack@sign,w,c
  9753  0021CC  A4D8               	btfss	status,2,c
  9754  0021CE  8E29               	bsf	___ftpack@arg+2,7,c
  9755  0021D0  C027  F027         	movff	___ftpack@arg,?___ftpack
  9756  0021D4  C028  F028         	movff	___ftpack@arg+1,?___ftpack+1
  9757  0021D8  C029  F029         	movff	___ftpack@arg+2,?___ftpack+2
  9758  0021DC  0012               	return	
  9759  0021DE                     __end_of___ftpack:
  9760                           	opt stack 0
  9761                           tosu	equ	0xFFF
  9762                           tosh	equ	0xFFE
  9763                           tosl	equ	0xFFD
  9764                           pclath	equ	0xFFA
  9765                           tblptru	equ	0xFF8
  9766                           tblptrh	equ	0xFF7
  9767                           tblptrl	equ	0xFF6
  9768                           tablat	equ	0xFF5
  9769                           prodh	equ	0xFF4
  9770                           prodl	equ	0xFF3
  9771                           intcon	equ	0xFF2
  9772                           indf0	equ	0xFEF
  9773                           postinc0	equ	0xFEE
  9774                           fsr0h	equ	0xFEA
  9775                           fsr0l	equ	0xFE9
  9776                           wreg	equ	0xFE8
  9777                           postdec1	equ	0xFE5
  9778                           plusw1	equ	0xFE3
  9779                           fsr1l	equ	0xFE1
  9780                           indf2	equ	0xFDF
  9781                           postinc2	equ	0xFDE
  9782                           postdec2	equ	0xFDD
  9783                           plusw2	equ	0xFDB
  9784                           fsr2h	equ	0xFDA
  9785                           fsr2l	equ	0xFD9
  9786                           status	equ	0xFD8
  9787                           
  9788 ;; *************** function _I2C_Send *****************
  9789 ;; Defined at:
  9790 ;;		line 83 in file "helpers.c"
  9791 ;; Parameters:    Size  Location     Type
  9792 ;;  address         1    wreg     unsigned char 
  9793 ;;  data            2   41[COMRAM] PTR unsigned char 
  9794 ;;		 -> STR_21(21), STR_16(14), inputEntry@msg(24), STR_15(25), 
  9795 ;;		 -> STR_12(17), STR_11(17), STR_10(14), STR_9(15), 
  9796 ;;		 -> packaging@msg2(32), packaging@msg(34), packaging@instr(2), STR_6(33), 
  9797 ;;		 -> RAM(3967), STR_5(19), STR_4(17), STR_3(17), 
  9798 ;;		 -> STR_2(14), STR_1(15), 
  9799 ;; Auto vars:     Size  Location     Type
  9800 ;;  address         1   46[COMRAM] unsigned char 
  9801 ;;  i               2   47[COMRAM] int 
  9802 ;; Return value:  Size  Location     Type
  9803 ;;                  1    wreg      void 
  9804 ;; Registers used:
  9805 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9806 ;; Tracked objects:
  9807 ;;		On entry : 0/0
  9808 ;;		On exit  : 0/0
  9809 ;;		Unchanged: 0/0
  9810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9811 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9812 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9813 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9814 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9815 ;;Total ram usage:        8 bytes
  9816 ;; Hardware stack levels used:    1
  9817 ;; Hardware stack levels required when called:    6
  9818 ;; This function calls:
  9819 ;;		_I2C_Master_Start
  9820 ;;		_I2C_Master_Stop
  9821 ;;		_I2C_Master_Write
  9822 ;; This function is called by:
  9823 ;;		_packageCompartment
  9824 ;;		_packaging
  9825 ;;		_clearing
  9826 ;;		_inputEntry
  9827 ;;		_mainMenu
  9828 ;; This function uses a non-reentrant model
  9829 ;;
  9830                           
  9831                           	psect	text26
  9832  002464                     __ptext26:
  9833                           	opt stack 0
  9834  002464                     _I2C_Send:
  9835                           	opt stack 21
  9836                           
  9837                           ;incstack = 0
  9838                           ;I2C_Send@address stored from wreg
  9839  002464  6E2F               	movwf	I2C_Send@address,c
  9840                           
  9841                           ;helpers.c: 88: int i=0;
  9842  002466  0E00               	movlw	0
  9843  002468  6E31               	movwf	I2C_Send@i+1,c
  9844  00246A  0E00               	movlw	0
  9845  00246C  6E30               	movwf	I2C_Send@i,c
  9846                           
  9847                           ;helpers.c: 90: I2C_Master_Start();
  9848  00246E  EC28  F016         	call	_I2C_Master_Start	;wreg free
  9849                           
  9850                           ;helpers.c: 91: I2C_Master_Write(address);
  9851  002472  C02F  F028         	movff	I2C_Send@address,I2C_Master_Write@byteToWrite
  9852  002476  6A29               	clrf	I2C_Master_Write@byteToWrite+1,c
  9853  002478  EC1F  F016         	call	_I2C_Master_Write	;wreg free
  9854                           
  9855                           ;helpers.c: 93: while (data[i] != 0) {
  9856  00247C  D01F               	goto	l478
  9857  00247E                     
  9858                           ;helpers.c: 94: I2C_Master_Write(data[i]);
  9859  00247E  5030               	movf	I2C_Send@i,w,c
  9860  002480  242A               	addwf	I2C_Send@data,w,c
  9861  002482  6E2C               	movwf	??_I2C_Send& (0+255),c
  9862  002484  5031               	movf	I2C_Send@i+1,w,c
  9863  002486  202B               	addwfc	I2C_Send@data+1,w,c
  9864  002488  6E2D               	movwf	(??_I2C_Send+1)& (0+255),c
  9865  00248A  C02C  FFF6         	movff	??_I2C_Send,tblptrl
  9866  00248E  C02D  FFF7         	movff	??_I2C_Send+1,tblptrh
  9867  002492  0E00               	movlw	low (__mediumconst shr (0+16))
  9868  002494  6EF8               	movwf	tblptru,c
  9869  002496  0E0F               	movlw	(high __ramtop+-1)
  9870  002498  64F7               	cpfsgt	tblptrh,c
  9871  00249A  D003               	bra	u5057
  9872  00249C  0008               	tblrd		*
  9873  00249E  50F5               	movf	tablat,w,c
  9874  0024A0  D005               	bra	u5050
  9875  0024A2                     u5057:
  9876  0024A2  CFF6 FFE9          	movff	tblptrl,fsr0l
  9877  0024A6  CFF7 FFEA          	movff	tblptrh,fsr0h
  9878  0024AA  50EF               	movf	indf0,w,c
  9879  0024AC                     u5050:
  9880  0024AC  6E2E               	movwf	(??_I2C_Send+2)& (0+255),c
  9881  0024AE  502E               	movf	??_I2C_Send+2,w,c
  9882  0024B0  6E28               	movwf	I2C_Master_Write@byteToWrite,c
  9883  0024B2  6A29               	clrf	I2C_Master_Write@byteToWrite+1,c
  9884  0024B4  EC1F  F016         	call	_I2C_Master_Write	;wreg free
  9885                           
  9886                           ;helpers.c: 95: i++;
  9887  0024B8  4A30               	infsnz	I2C_Send@i,f,c
  9888  0024BA  2A31               	incf	I2C_Send@i+1,f,c
  9889  0024BC                     l478:
  9890  0024BC  5030               	movf	I2C_Send@i,w,c
  9891  0024BE  242A               	addwf	I2C_Send@data,w,c
  9892  0024C0  6E2C               	movwf	??_I2C_Send& (0+255),c
  9893  0024C2  5031               	movf	I2C_Send@i+1,w,c
  9894  0024C4  202B               	addwfc	I2C_Send@data+1,w,c
  9895  0024C6  6E2D               	movwf	(??_I2C_Send+1)& (0+255),c
  9896  0024C8  C02C  FFF6         	movff	??_I2C_Send,tblptrl
  9897  0024CC  C02D  FFF7         	movff	??_I2C_Send+1,tblptrh
  9898  0024D0  0E00               	movlw	low (__mediumconst shr (0+16))
  9899  0024D2  6EF8               	movwf	tblptru,c
  9900  0024D4  0E0F               	movlw	(high __ramtop+-1)
  9901  0024D6  64F7               	cpfsgt	tblptrh,c
  9902  0024D8  D003               	bra	u5067
  9903  0024DA  0008               	tblrd		*
  9904  0024DC  50F5               	movf	tablat,w,c
  9905  0024DE  D005               	bra	u5060
  9906  0024E0                     u5067:
  9907  0024E0  CFF6 FFE9          	movff	tblptrl,fsr0l
  9908  0024E4  CFF7 FFEA          	movff	tblptrh,fsr0h
  9909  0024E8  50EF               	movf	indf0,w,c
  9910  0024EA                     u5060:
  9911  0024EA  0900               	iorlw	0
  9912  0024EC  A4D8               	btfss	status,2,c
  9913  0024EE  D7C7               	goto	l479
  9914                           
  9915                           ;helpers.c: 96: }
  9916                           ;helpers.c: 98: I2C_Master_Stop();
  9917  0024F0  EC24  F016         	call	_I2C_Master_Stop	;wreg free
  9918  0024F4  0012               	return	
  9919  0024F6                     __end_of_I2C_Send:
  9920                           	opt stack 0
  9921                           tosu	equ	0xFFF
  9922                           tosh	equ	0xFFE
  9923                           tosl	equ	0xFFD
  9924                           pclath	equ	0xFFA
  9925                           tblptru	equ	0xFF8
  9926                           tblptrh	equ	0xFF7
  9927                           tblptrl	equ	0xFF6
  9928                           tablat	equ	0xFF5
  9929                           prodh	equ	0xFF4
  9930                           prodl	equ	0xFF3
  9931                           intcon	equ	0xFF2
  9932                           indf0	equ	0xFEF
  9933                           postinc0	equ	0xFEE
  9934                           fsr0h	equ	0xFEA
  9935                           fsr0l	equ	0xFE9
  9936                           wreg	equ	0xFE8
  9937                           postdec1	equ	0xFE5
  9938                           plusw1	equ	0xFE3
  9939                           fsr1l	equ	0xFE1
  9940                           indf2	equ	0xFDF
  9941                           postinc2	equ	0xFDE
  9942                           postdec2	equ	0xFDD
  9943                           plusw2	equ	0xFDB
  9944                           fsr2h	equ	0xFDA
  9945                           fsr2l	equ	0xFD9
  9946                           status	equ	0xFD8
  9947                           
  9948 ;; *************** function _RTC_startOperation *****************
  9949 ;; Defined at:
  9950 ;;		line 47 in file "RTC.c"
  9951 ;; Parameters:    Size  Location     Type
  9952 ;;		None
  9953 ;; Auto vars:     Size  Location     Type
  9954 ;;		None
  9955 ;; Return value:  Size  Location     Type
  9956 ;;                  1    wreg      void 
  9957 ;; Registers used:
  9958 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9959 ;; Tracked objects:
  9960 ;;		On entry : 0/0
  9961 ;;		On exit  : 0/0
  9962 ;;		Unchanged: 0/0
  9963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9967 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9968 ;;Total ram usage:        0 bytes
  9969 ;; Hardware stack levels used:    1
  9970 ;; Hardware stack levels required when called:    8
  9971 ;; This function calls:
  9972 ;;		_RTC_getSeconds
  9973 ;; This function is called by:
  9974 ;;		_mainMenu
  9975 ;; This function uses a non-reentrant model
  9976 ;;
  9977                           
  9978                           	psect	text27
  9979  002BC4                     __ptext27:
  9980                           	opt stack 0
  9981  002BC4                     _RTC_startOperation:
  9982                           	opt stack 21
  9983                           
  9984                           ;RTC.c: 49: startTime = RTC_getSeconds();
  9985                           
  9986                           ;incstack = 0
  9987  002BC4  EC3C  F013         	call	_RTC_getSeconds	;wreg free
  9988  002BC8  C02D  F048         	movff	?_RTC_getSeconds,_startTime
  9989  002BCC  C02E  F049         	movff	?_RTC_getSeconds+1,_startTime+1
  9990  002BD0  C02F  F04A         	movff	?_RTC_getSeconds+2,_startTime+2
  9991  002BD4  C030  F04B         	movff	?_RTC_getSeconds+3,_startTime+3
  9992  002BD8  0012               	return		;funcret
  9993  002BDA                     __end_of_RTC_startOperation:
  9994                           	opt stack 0
  9995                           tosu	equ	0xFFF
  9996                           tosh	equ	0xFFE
  9997                           tosl	equ	0xFFD
  9998                           pclath	equ	0xFFA
  9999                           tblptru	equ	0xFF8
 10000                           tblptrh	equ	0xFF7
 10001                           tblptrl	equ	0xFF6
 10002                           tablat	equ	0xFF5
 10003                           prodh	equ	0xFF4
 10004                           prodl	equ	0xFF3
 10005                           intcon	equ	0xFF2
 10006                           indf0	equ	0xFEF
 10007                           postinc0	equ	0xFEE
 10008                           fsr0h	equ	0xFEA
 10009                           fsr0l	equ	0xFE9
 10010                           wreg	equ	0xFE8
 10011                           postdec1	equ	0xFE5
 10012                           plusw1	equ	0xFE3
 10013                           fsr1l	equ	0xFE1
 10014                           indf2	equ	0xFDF
 10015                           postinc2	equ	0xFDE
 10016                           postdec2	equ	0xFDD
 10017                           plusw2	equ	0xFDB
 10018                           fsr2h	equ	0xFDA
 10019                           fsr2l	equ	0xFD9
 10020                           status	equ	0xFD8
 10021                           
 10022 ;; *************** function _RTC_getOperatingTime *****************
 10023 ;; Defined at:
 10024 ;;		line 52 in file "RTC.c"
 10025 ;; Parameters:    Size  Location     Type
 10026 ;;		None
 10027 ;; Auto vars:     Size  Location     Type
 10028 ;;		None
 10029 ;; Return value:  Size  Location     Type
 10030 ;;                  4   11[BANK0 ] long 
 10031 ;; Registers used:
 10032 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10033 ;; Tracked objects:
 10034 ;;		On entry : 0/0
 10035 ;;		On exit  : 0/0
 10036 ;;		Unchanged: 0/0
 10037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10038 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10040 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10041 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10042 ;;Total ram usage:        8 bytes
 10043 ;; Hardware stack levels used:    1
 10044 ;; Hardware stack levels required when called:    8
 10045 ;; This function calls:
 10046 ;;		_RTC_getSeconds
 10047 ;; This function is called by:
 10048 ;;		_mainMenu
 10049 ;; This function uses a non-reentrant model
 10050 ;;
 10051                           
 10052                           	psect	text28
 10053  0028FA                     __ptext28:
 10054                           	opt stack 0
 10055  0028FA                     _RTC_getOperatingTime:
 10056                           	opt stack 21
 10057                           
 10058                           ;RTC.c: 54: endTime = RTC_getSeconds();
 10059                           
 10060                           ;incstack = 0
 10061  0028FA  EC3C  F013         	call	_RTC_getSeconds	;wreg free
 10062  0028FE  C02D  F044         	movff	?_RTC_getSeconds,_endTime
 10063  002902  C02E  F045         	movff	?_RTC_getSeconds+1,_endTime+1
 10064  002906  C02F  F046         	movff	?_RTC_getSeconds+2,_endTime+2
 10065  00290A  C030  F047         	movff	?_RTC_getSeconds+3,_endTime+3
 10066                           
 10067                           ;RTC.c: 55: return endTime - startTime;
 10068  00290E  C048  F08F         	movff	_startTime,??_RTC_getOperatingTime
 10069  002912  C049  F090         	movff	_startTime+1,??_RTC_getOperatingTime+1
 10070  002916  C04A  F091         	movff	_startTime+2,??_RTC_getOperatingTime+2
 10071  00291A  C04B  F092         	movff	_startTime+3,??_RTC_getOperatingTime+3
 10072  00291E  0100               	movlb	0	; () banked
 10073  002920  1F8F               	comf	??_RTC_getOperatingTime& (0+255),f,b
 10074  002922  1F90               	comf	(??_RTC_getOperatingTime+1)& (0+255),f,b
 10075  002924  1F91               	comf	(??_RTC_getOperatingTime+2)& (0+255),f,b
 10076  002926  1F92               	comf	(??_RTC_getOperatingTime+3)& (0+255),f,b
 10077  002928  2B8F               	incf	??_RTC_getOperatingTime& (0+255),f,b
 10078  00292A  0E00               	movlw	0
 10079  00292C  2390               	addwfc	(??_RTC_getOperatingTime+1)& (0+255),f,b
 10080  00292E  2391               	addwfc	(??_RTC_getOperatingTime+2)& (0+255),f,b
 10081  002930  2392               	addwfc	(??_RTC_getOperatingTime+3)& (0+255),f,b
 10082  002932  5044               	movf	_endTime,w,c
 10083  002934  258F               	addwf	??_RTC_getOperatingTime& (0+255),w,b
 10084  002936  6F8B               	movwf	?_RTC_getOperatingTime& (0+255),b
 10085  002938  5045               	movf	_endTime+1,w,c
 10086  00293A  2190               	addwfc	(??_RTC_getOperatingTime+1)& (0+255),w,b
 10087  00293C  6F8C               	movwf	(?_RTC_getOperatingTime+1)& (0+255),b
 10088  00293E  5046               	movf	_endTime+2,w,c
 10089  002940  2191               	addwfc	(??_RTC_getOperatingTime+2)& (0+255),w,b
 10090  002942  6F8D               	movwf	(?_RTC_getOperatingTime+2)& (0+255),b
 10091  002944  5047               	movf	_endTime+3,w,c
 10092  002946  2192               	addwfc	(??_RTC_getOperatingTime+3)& (0+255),w,b
 10093  002948  6F8E               	movwf	(?_RTC_getOperatingTime+3)& (0+255),b
 10094  00294A  0012               	return	
 10095  00294C                     __end_of_RTC_getOperatingTime:
 10096                           	opt stack 0
 10097                           tosu	equ	0xFFF
 10098                           tosh	equ	0xFFE
 10099                           tosl	equ	0xFFD
 10100                           pclath	equ	0xFFA
 10101                           tblptru	equ	0xFF8
 10102                           tblptrh	equ	0xFF7
 10103                           tblptrl	equ	0xFF6
 10104                           tablat	equ	0xFF5
 10105                           prodh	equ	0xFF4
 10106                           prodl	equ	0xFF3
 10107                           intcon	equ	0xFF2
 10108                           indf0	equ	0xFEF
 10109                           postinc0	equ	0xFEE
 10110                           fsr0h	equ	0xFEA
 10111                           fsr0l	equ	0xFE9
 10112                           wreg	equ	0xFE8
 10113                           postdec1	equ	0xFE5
 10114                           plusw1	equ	0xFE3
 10115                           fsr1l	equ	0xFE1
 10116                           indf2	equ	0xFDF
 10117                           postinc2	equ	0xFDE
 10118                           postdec2	equ	0xFDD
 10119                           plusw2	equ	0xFDB
 10120                           fsr2h	equ	0xFDA
 10121                           fsr2l	equ	0xFD9
 10122                           status	equ	0xFD8
 10123                           
 10124 ;; *************** function _RTC_getSeconds *****************
 10125 ;; Defined at:
 10126 ;;		line 36 in file "RTC.c"
 10127 ;; Parameters:    Size  Location     Type
 10128 ;;		None
 10129 ;; Auto vars:     Size  Location     Type
 10130 ;;  time            7    0[BANK0 ] unsigned char [7]
 10131 ;;  seconds         4    7[BANK0 ] long 
 10132 ;; Return value:  Size  Location     Type
 10133 ;;                  4   44[COMRAM] long 
 10134 ;; Registers used:
 10135 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10136 ;; Tracked objects:
 10137 ;;		On entry : 0/0
 10138 ;;		On exit  : 0/0
 10139 ;;		Unchanged: 0/0
 10140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10141 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10142 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10143 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10144 ;;      Totals:         6      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10145 ;;Total ram usage:       17 bytes
 10146 ;; Hardware stack levels used:    1
 10147 ;; Hardware stack levels required when called:    7
 10148 ;; This function calls:
 10149 ;;		_RTC_getTime
 10150 ;;		___wmul
 10151 ;; This function is called by:
 10152 ;;		_RTC_startOperation
 10153 ;;		_RTC_getOperatingTime
 10154 ;; This function uses a non-reentrant model
 10155 ;;
 10156                           
 10157                           	psect	text29
 10158  002678                     __ptext29:
 10159                           	opt stack 0
 10160  002678                     _RTC_getSeconds:
 10161                           	opt stack 21
 10162                           
 10163                           ;RTC.c: 40: unsigned char time[7];
 10164                           ;RTC.c: 41: RTC_getTime(time);
 10165                           
 10166                           ; BSR set to: 0
 10167                           ;incstack = 0
 10168  002678  0E80               	movlw	low RTC_getSeconds@time
 10169  00267A  6E2A               	movwf	RTC_getTime@time,c
 10170  00267C  0E00               	movlw	high RTC_getSeconds@time
 10171  00267E  6E2B               	movwf	RTC_getTime@time+1,c
 10172  002680  EC79  F013         	call	_RTC_getTime	;wreg free
 10173                           
 10174                           ;RTC.c: 43: long seconds = time[0] + 60*time[1] + 60*60*time[2] + 60*60*24*time[3];
 10175  002684  C082  F027         	movff	RTC_getSeconds@time+2,___wmul@multiplier
 10176  002688  6A28               	clrf	___wmul@multiplier+1,c
 10177  00268A  0E0E               	movlw	14
 10178  00268C  6E2A               	movwf	___wmul@multiplicand+1,c
 10179  00268E  0E10               	movlw	16
 10180  002690  6E29               	movwf	___wmul@multiplicand,c
 10181  002692  EC9E  F015         	call	___wmul	;wreg free
 10182  002696  0100               	movlb	0	; () banked
 10183  002698  5181               	movf	(RTC_getSeconds@time+1)& (0+255),w,b
 10184  00269A  0D3C               	mullw	60
 10185  00269C  5180               	movf	RTC_getSeconds@time& (0+255),w,b
 10186  00269E  6E31               	movwf	??_RTC_getSeconds& (0+255),c
 10187  0026A0  6A32               	clrf	(??_RTC_getSeconds+1)& (0+255),c
 10188  0026A2  50F3               	movf	prodl,w,c
 10189  0026A4  2631               	addwf	??_RTC_getSeconds,f,c
 10190  0026A6  50F4               	movf	prodh,w,c
 10191  0026A8  2232               	addwfc	??_RTC_getSeconds+1,f,c
 10192  0026AA  5027               	movf	?___wmul,w,c
 10193  0026AC  2631               	addwf	??_RTC_getSeconds,f,c
 10194  0026AE  5028               	movf	?___wmul+1,w,c
 10195  0026B0  2232               	addwfc	??_RTC_getSeconds+1,f,c
 10196  0026B2  C083  F027         	movff	RTC_getSeconds@time+3,___wmul@multiplier
 10197  0026B6  6A28               	clrf	___wmul@multiplier+1,c
 10198  0026B8  0E51               	movlw	81
 10199  0026BA  6E2A               	movwf	___wmul@multiplicand+1,c
 10200  0026BC  0E80               	movlw	128
 10201  0026BE  6E29               	movwf	___wmul@multiplicand,c
 10202  0026C0  EC9E  F015         	call	___wmul	;wreg free
 10203  0026C4  5027               	movf	?___wmul,w,c
 10204  0026C6  2631               	addwf	??_RTC_getSeconds,f,c
 10205  0026C8  5028               	movf	?___wmul+1,w,c
 10206  0026CA  2232               	addwfc	??_RTC_getSeconds+1,f,c
 10207  0026CC  C031  F087         	movff	??_RTC_getSeconds,RTC_getSeconds@seconds
 10208  0026D0  C032  F088         	movff	??_RTC_getSeconds+1,RTC_getSeconds@seconds+1
 10209  0026D4  0100               	movlb	0	; () banked
 10210  0026D6  0E00               	movlw	0
 10211  0026D8  BF88               	btfsc	(RTC_getSeconds@seconds+1)& (0+255),7,b
 10212  0026DA  0EFF               	movlw	-1
 10213  0026DC  6F89               	movwf	(RTC_getSeconds@seconds+2)& (0+255),b
 10214  0026DE  6F8A               	movwf	(RTC_getSeconds@seconds+3)& (0+255),b
 10215                           
 10216                           ; BSR set to: 0
 10217                           ;RTC.c: 44: return seconds;
 10218  0026E0  C087  F02D         	movff	RTC_getSeconds@seconds,?_RTC_getSeconds
 10219  0026E4  C088  F02E         	movff	RTC_getSeconds@seconds+1,?_RTC_getSeconds+1
 10220  0026E8  C089  F02F         	movff	RTC_getSeconds@seconds+2,?_RTC_getSeconds+2
 10221  0026EC  C08A  F030         	movff	RTC_getSeconds@seconds+3,?_RTC_getSeconds+3
 10222  0026F0  0012               	return	
 10223  0026F2                     __end_of_RTC_getSeconds:
 10224                           	opt stack 0
 10225                           tosu	equ	0xFFF
 10226                           tosh	equ	0xFFE
 10227                           tosl	equ	0xFFD
 10228                           pclath	equ	0xFFA
 10229                           tblptru	equ	0xFF8
 10230                           tblptrh	equ	0xFF7
 10231                           tblptrl	equ	0xFF6
 10232                           tablat	equ	0xFF5
 10233                           prodh	equ	0xFF4
 10234                           prodl	equ	0xFF3
 10235                           intcon	equ	0xFF2
 10236                           indf0	equ	0xFEF
 10237                           postinc0	equ	0xFEE
 10238                           fsr0h	equ	0xFEA
 10239                           fsr0l	equ	0xFE9
 10240                           wreg	equ	0xFE8
 10241                           postdec1	equ	0xFE5
 10242                           plusw1	equ	0xFE3
 10243                           fsr1l	equ	0xFE1
 10244                           indf2	equ	0xFDF
 10245                           postinc2	equ	0xFDE
 10246                           postdec2	equ	0xFDD
 10247                           plusw2	equ	0xFDB
 10248                           fsr2h	equ	0xFDA
 10249                           fsr2l	equ	0xFD9
 10250                           status	equ	0xFD8
 10251                           
 10252 ;; *************** function ___wmul *****************
 10253 ;; Defined at:
 10254 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 10255 ;; Parameters:    Size  Location     Type
 10256 ;;  multiplier      2   38[COMRAM] unsigned int 
 10257 ;;  multiplicand    2   40[COMRAM] unsigned int 
 10258 ;; Auto vars:     Size  Location     Type
 10259 ;;  product         2   42[COMRAM] unsigned int 
 10260 ;; Return value:  Size  Location     Type
 10261 ;;                  2   38[COMRAM] unsigned int 
 10262 ;; Registers used:
 10263 ;;		wreg, status,2, status,0, prodl, prodh
 10264 ;; Tracked objects:
 10265 ;;		On entry : 0/0
 10266 ;;		On exit  : 0/0
 10267 ;;		Unchanged: 0/0
 10268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10269 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10270 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10272 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10273 ;;Total ram usage:        6 bytes
 10274 ;; Hardware stack levels used:    1
 10275 ;; Hardware stack levels required when called:    4
 10276 ;; This function calls:
 10277 ;;		Nothing
 10278 ;; This function is called by:
 10279 ;;		_packaging
 10280 ;;		_inputEntry
 10281 ;;		_RTC_getSeconds
 10282 ;; This function uses a non-reentrant model
 10283 ;;
 10284                           
 10285                           	psect	text30
 10286  002B3C                     __ptext30:
 10287                           	opt stack 0
 10288  002B3C                     ___wmul:
 10289                           	opt stack 24
 10290                           
 10291                           ; BSR set to: 0
 10292                           ;incstack = 0
 10293  002B3C  5027               	movf	___wmul@multiplier,w,c
 10294  002B3E  0229               	mulwf	___wmul@multiplicand,c
 10295  002B40  CFF3 F02B          	movff	prodl,___wmul@product
 10296  002B44  CFF4 F02C          	movff	prodh,___wmul@product+1
 10297  002B48  5027               	movf	___wmul@multiplier,w,c
 10298  002B4A  022A               	mulwf	___wmul@multiplicand+1,c
 10299  002B4C  50F3               	movf	prodl,w,c
 10300  002B4E  262C               	addwf	___wmul@product+1,f,c
 10301  002B50  5028               	movf	___wmul@multiplier+1,w,c
 10302  002B52  0229               	mulwf	___wmul@multiplicand,c
 10303  002B54  50F3               	movf	prodl,w,c
 10304  002B56  262C               	addwf	___wmul@product+1,f,c
 10305  002B58  C02B  F027         	movff	___wmul@product,?___wmul
 10306  002B5C  C02C  F028         	movff	___wmul@product+1,?___wmul+1
 10307  002B60  0012               	return	
 10308  002B62                     __end_of___wmul:
 10309                           	opt stack 0
 10310                           tosu	equ	0xFFF
 10311                           tosh	equ	0xFFE
 10312                           tosl	equ	0xFFD
 10313                           pclath	equ	0xFFA
 10314                           tblptru	equ	0xFF8
 10315                           tblptrh	equ	0xFF7
 10316                           tblptrl	equ	0xFF6
 10317                           tablat	equ	0xFF5
 10318                           prodh	equ	0xFF4
 10319                           prodl	equ	0xFF3
 10320                           intcon	equ	0xFF2
 10321                           indf0	equ	0xFEF
 10322                           postinc0	equ	0xFEE
 10323                           fsr0h	equ	0xFEA
 10324                           fsr0l	equ	0xFE9
 10325                           wreg	equ	0xFE8
 10326                           postdec1	equ	0xFE5
 10327                           plusw1	equ	0xFE3
 10328                           fsr1l	equ	0xFE1
 10329                           indf2	equ	0xFDF
 10330                           postinc2	equ	0xFDE
 10331                           postdec2	equ	0xFDD
 10332                           plusw2	equ	0xFDB
 10333                           fsr2h	equ	0xFDA
 10334                           fsr2l	equ	0xFD9
 10335                           status	equ	0xFD8
 10336                           
 10337 ;; *************** function _RTC_getTime *****************
 10338 ;; Defined at:
 10339 ;;		line 16 in file "RTC.c"
 10340 ;; Parameters:    Size  Location     Type
 10341 ;;  time            2   41[COMRAM] PTR unsigned char 
 10342 ;;		 -> RTC_getSeconds@time(7), 
 10343 ;; Auto vars:     Size  Location     Type
 10344 ;;  i               1   43[COMRAM] unsigned char 
 10345 ;; Return value:  Size  Location     Type
 10346 ;;                  1    wreg      void 
 10347 ;; Registers used:
 10348 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10349 ;; Tracked objects:
 10350 ;;		On entry : 0/0
 10351 ;;		On exit  : 0/0
 10352 ;;		Unchanged: 0/0
 10353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10354 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10355 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10357 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10358 ;;Total ram usage:        3 bytes
 10359 ;; Hardware stack levels used:    1
 10360 ;; Hardware stack levels required when called:    6
 10361 ;; This function calls:
 10362 ;;		_I2C_Master_Read
 10363 ;;		_I2C_Master_Start
 10364 ;;		_I2C_Master_Stop
 10365 ;;		_I2C_Master_Write
 10366 ;; This function is called by:
 10367 ;;		_RTC_getSeconds
 10368 ;; This function uses a non-reentrant model
 10369 ;;
 10370                           
 10371                           	psect	text31
 10372  0026F2                     __ptext31:
 10373                           	opt stack 0
 10374  0026F2                     _RTC_getTime:
 10375                           	opt stack 21
 10376                           
 10377                           ;RTC.c: 18: I2C_Master_Start();
 10378                           
 10379                           ;incstack = 0
 10380  0026F2  EC28  F016         	call	_I2C_Master_Start	;wreg free
 10381                           
 10382                           ;RTC.c: 19: I2C_Master_Write(0b11010000);
 10383  0026F6  0E00               	movlw	0
 10384  0026F8  6E29               	movwf	I2C_Master_Write@byteToWrite+1,c
 10385  0026FA  0ED0               	movlw	208
 10386  0026FC  6E28               	movwf	I2C_Master_Write@byteToWrite,c
 10387  0026FE  EC1F  F016         	call	_I2C_Master_Write	;wreg free
 10388                           
 10389                           ;RTC.c: 20: I2C_Master_Write(0x00);
 10390  002702  0E00               	movlw	0
 10391  002704  6E29               	movwf	I2C_Master_Write@byteToWrite+1,c
 10392  002706  0E00               	movlw	0
 10393  002708  6E28               	movwf	I2C_Master_Write@byteToWrite,c
 10394  00270A  EC1F  F016         	call	_I2C_Master_Write	;wreg free
 10395                           
 10396                           ;RTC.c: 21: I2C_Master_Stop();
 10397  00270E  EC24  F016         	call	_I2C_Master_Stop	;wreg free
 10398                           
 10399                           ;RTC.c: 24: char i;
 10400                           ;RTC.c: 26: I2C_Master_Start();
 10401  002712  EC28  F016         	call	_I2C_Master_Start	;wreg free
 10402                           
 10403                           ;RTC.c: 27: I2C_Master_Write(0b11010001);
 10404  002716  0E00               	movlw	0
 10405  002718  6E29               	movwf	I2C_Master_Write@byteToWrite+1,c
 10406  00271A  0ED1               	movlw	209
 10407  00271C  6E28               	movwf	I2C_Master_Write@byteToWrite,c
 10408  00271E  EC1F  F016         	call	_I2C_Master_Write	;wreg free
 10409                           
 10410                           ;RTC.c: 29: for (i = 0; i < 6; i++) {
 10411  002722  0E00               	movlw	0
 10412  002724  6E2C               	movwf	RTC_getTime@i,c
 10413  002726                     l4527:
 10414  002726  0E05               	movlw	5
 10415  002728  642C               	cpfsgt	RTC_getTime@i,c
 10416  00272A  D001               	goto	l518
 10417  00272C  D00E               	goto	u5340
 10418  00272E                     l518:
 10419                           
 10420                           ;RTC.c: 30: time[i] = I2C_Master_Read(0);
 10421  00272E  502C               	movf	RTC_getTime@i,w,c
 10422  002730  0D01               	mullw	1
 10423  002732  50F3               	movf	prodl,w,c
 10424  002734  242A               	addwf	RTC_getTime@time,w,c
 10425  002736  6ED9               	movwf	fsr2l,c
 10426  002738  50F4               	movf	prodh,w,c
 10427  00273A  202B               	addwfc	RTC_getTime@time+1,w,c
 10428  00273C  6EDA               	movwf	fsr2h,c
 10429  00273E  0E00               	movlw	0
 10430  002740  ECB1  F015         	call	_I2C_Master_Read
 10431  002744  6EDF               	movwf	indf2,c
 10432  002746  2A2C               	incf	RTC_getTime@i,f,c
 10433  002748  D7EE               	goto	l4527
 10434  00274A                     u5340:
 10435                           
 10436                           ;RTC.c: 31: }
 10437                           ;RTC.c: 32: time[6] = I2C_Master_Read(1);
 10438  00274A  EE20 F006          	lfsr	2,6
 10439  00274E  502A               	movf	RTC_getTime@time,w,c
 10440  002750  26D9               	addwf	fsr2l,f,c
 10441  002752  502B               	movf	RTC_getTime@time+1,w,c
 10442  002754  22DA               	addwfc	fsr2h,f,c
 10443  002756  0E01               	movlw	1
 10444  002758  ECB1  F015         	call	_I2C_Master_Read
 10445  00275C  6EDF               	movwf	indf2,c
 10446                           
 10447                           ;RTC.c: 33: I2C_Master_Stop();
 10448  00275E  EC24  F016         	call	_I2C_Master_Stop	;wreg free
 10449  002762  0012               	return		;funcret
 10450  002764                     __end_of_RTC_getTime:
 10451                           	opt stack 0
 10452                           tosu	equ	0xFFF
 10453                           tosh	equ	0xFFE
 10454                           tosl	equ	0xFFD
 10455                           pclath	equ	0xFFA
 10456                           tblptru	equ	0xFF8
 10457                           tblptrh	equ	0xFF7
 10458                           tblptrl	equ	0xFF6
 10459                           tablat	equ	0xFF5
 10460                           prodh	equ	0xFF4
 10461                           prodl	equ	0xFF3
 10462                           intcon	equ	0xFF2
 10463                           indf0	equ	0xFEF
 10464                           postinc0	equ	0xFEE
 10465                           fsr0h	equ	0xFEA
 10466                           fsr0l	equ	0xFE9
 10467                           wreg	equ	0xFE8
 10468                           postdec1	equ	0xFE5
 10469                           plusw1	equ	0xFE3
 10470                           fsr1l	equ	0xFE1
 10471                           indf2	equ	0xFDF
 10472                           postinc2	equ	0xFDE
 10473                           postdec2	equ	0xFDD
 10474                           plusw2	equ	0xFDB
 10475                           fsr2h	equ	0xFDA
 10476                           fsr2l	equ	0xFD9
 10477                           status	equ	0xFD8
 10478                           
 10479 ;; *************** function _I2C_Master_Write *****************
 10480 ;; Defined at:
 10481 ;;		line 108 in file "I2C.c"
 10482 ;; Parameters:    Size  Location     Type
 10483 ;;  byteToWrite     2   39[COMRAM] unsigned int 
 10484 ;; Auto vars:     Size  Location     Type
 10485 ;;		None
 10486 ;; Return value:  Size  Location     Type
 10487 ;;                  1    wreg      void 
 10488 ;; Registers used:
 10489 ;;		wreg, status,2, status,0, cstack
 10490 ;; Tracked objects:
 10491 ;;		On entry : 0/0
 10492 ;;		On exit  : 0/0
 10493 ;;		Unchanged: 0/0
 10494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10495 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10498 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10499 ;;Total ram usage:        2 bytes
 10500 ;; Hardware stack levels used:    1
 10501 ;; Hardware stack levels required when called:    5
 10502 ;; This function calls:
 10503 ;;		_I2C_Master_Wait
 10504 ;; This function is called by:
 10505 ;;		_I2C_Send
 10506 ;;		_RTC_getTime
 10507 ;; This function uses a non-reentrant model
 10508 ;;
 10509                           
 10510                           	psect	text32
 10511  002C3E                     __ptext32:
 10512                           	opt stack 0
 10513  002C3E                     _I2C_Master_Write:
 10514                           	opt stack 21
 10515                           
 10516                           ;I2C.c: 116: I2C_Master_Wait();
 10517                           
 10518                           ;incstack = 0
 10519  002C3E  EC0A  F016         	call	_I2C_Master_Wait	;wreg free
 10520                           
 10521                           ;I2C.c: 117: SSPBUF = byteToWrite;
 10522  002C42  C028  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
 10523  002C46  0012               	return		;funcret
 10524  002C48                     __end_of_I2C_Master_Write:
 10525                           	opt stack 0
 10526                           tosu	equ	0xFFF
 10527                           tosh	equ	0xFFE
 10528                           tosl	equ	0xFFD
 10529                           pclath	equ	0xFFA
 10530                           tblptru	equ	0xFF8
 10531                           tblptrh	equ	0xFF7
 10532                           tblptrl	equ	0xFF6
 10533                           tablat	equ	0xFF5
 10534                           prodh	equ	0xFF4
 10535                           prodl	equ	0xFF3
 10536                           intcon	equ	0xFF2
 10537                           indf0	equ	0xFEF
 10538                           postinc0	equ	0xFEE
 10539                           fsr0h	equ	0xFEA
 10540                           fsr0l	equ	0xFE9
 10541                           wreg	equ	0xFE8
 10542                           postdec1	equ	0xFE5
 10543                           plusw1	equ	0xFE3
 10544                           fsr1l	equ	0xFE1
 10545                           indf2	equ	0xFDF
 10546                           postinc2	equ	0xFDE
 10547                           postdec2	equ	0xFDD
 10548                           plusw2	equ	0xFDB
 10549                           fsr2h	equ	0xFDA
 10550                           fsr2l	equ	0xFD9
 10551                           status	equ	0xFD8
 10552                           
 10553 ;; *************** function _I2C_Master_Stop *****************
 10554 ;; Defined at:
 10555 ;;		line 95 in file "I2C.c"
 10556 ;; Parameters:    Size  Location     Type
 10557 ;;		None
 10558 ;; Auto vars:     Size  Location     Type
 10559 ;;		None
 10560 ;; Return value:  Size  Location     Type
 10561 ;;                  1    wreg      void 
 10562 ;; Registers used:
 10563 ;;		wreg, status,2, status,0, cstack
 10564 ;; Tracked objects:
 10565 ;;		On entry : 0/0
 10566 ;;		On exit  : 0/0
 10567 ;;		Unchanged: 0/0
 10568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10572 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10573 ;;Total ram usage:        0 bytes
 10574 ;; Hardware stack levels used:    1
 10575 ;; Hardware stack levels required when called:    5
 10576 ;; This function calls:
 10577 ;;		_I2C_Master_Wait
 10578 ;; This function is called by:
 10579 ;;		_I2C_Send
 10580 ;;		_RTC_getTime
 10581 ;; This function uses a non-reentrant model
 10582 ;;
 10583                           
 10584                           	psect	text33
 10585  002C48                     __ptext33:
 10586                           	opt stack 0
 10587  002C48                     _I2C_Master_Stop:
 10588                           	opt stack 21
 10589                           
 10590                           ;I2C.c: 104: I2C_Master_Wait();
 10591                           
 10592                           ;incstack = 0
 10593  002C48  EC0A  F016         	call	_I2C_Master_Wait	;wreg free
 10594                           
 10595                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
 10596  002C4C  84C5               	bsf	4037,2,c	;volatile
 10597  002C4E  0012               	return		;funcret
 10598  002C50                     __end_of_I2C_Master_Stop:
 10599                           	opt stack 0
 10600                           tosu	equ	0xFFF
 10601                           tosh	equ	0xFFE
 10602                           tosl	equ	0xFFD
 10603                           pclath	equ	0xFFA
 10604                           tblptru	equ	0xFF8
 10605                           tblptrh	equ	0xFF7
 10606                           tblptrl	equ	0xFF6
 10607                           tablat	equ	0xFF5
 10608                           prodh	equ	0xFF4
 10609                           prodl	equ	0xFF3
 10610                           intcon	equ	0xFF2
 10611                           indf0	equ	0xFEF
 10612                           postinc0	equ	0xFEE
 10613                           fsr0h	equ	0xFEA
 10614                           fsr0l	equ	0xFE9
 10615                           wreg	equ	0xFE8
 10616                           postdec1	equ	0xFE5
 10617                           plusw1	equ	0xFE3
 10618                           fsr1l	equ	0xFE1
 10619                           indf2	equ	0xFDF
 10620                           postinc2	equ	0xFDE
 10621                           postdec2	equ	0xFDD
 10622                           plusw2	equ	0xFDB
 10623                           fsr2h	equ	0xFDA
 10624                           fsr2l	equ	0xFD9
 10625                           status	equ	0xFD8
 10626                           
 10627 ;; *************** function _I2C_Master_Start *****************
 10628 ;; Defined at:
 10629 ;;		line 69 in file "I2C.c"
 10630 ;; Parameters:    Size  Location     Type
 10631 ;;		None
 10632 ;; Auto vars:     Size  Location     Type
 10633 ;;		None
 10634 ;; Return value:  Size  Location     Type
 10635 ;;                  1    wreg      void 
 10636 ;; Registers used:
 10637 ;;		wreg, status,2, status,0, cstack
 10638 ;; Tracked objects:
 10639 ;;		On entry : 0/0
 10640 ;;		On exit  : 0/0
 10641 ;;		Unchanged: 0/0
 10642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10646 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10647 ;;Total ram usage:        0 bytes
 10648 ;; Hardware stack levels used:    1
 10649 ;; Hardware stack levels required when called:    5
 10650 ;; This function calls:
 10651 ;;		_I2C_Master_Wait
 10652 ;; This function is called by:
 10653 ;;		_I2C_Send
 10654 ;;		_RTC_getTime
 10655 ;; This function uses a non-reentrant model
 10656 ;;
 10657                           
 10658                           	psect	text34
 10659  002C50                     __ptext34:
 10660                           	opt stack 0
 10661  002C50                     _I2C_Master_Start:
 10662                           	opt stack 21
 10663                           
 10664                           ;I2C.c: 78: I2C_Master_Wait();
 10665                           
 10666                           ;incstack = 0
 10667  002C50  EC0A  F016         	call	_I2C_Master_Wait	;wreg free
 10668                           
 10669                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
 10670  002C54  80C5               	bsf	4037,0,c	;volatile
 10671  002C56  0012               	return		;funcret
 10672  002C58                     __end_of_I2C_Master_Start:
 10673                           	opt stack 0
 10674                           tosu	equ	0xFFF
 10675                           tosh	equ	0xFFE
 10676                           tosl	equ	0xFFD
 10677                           pclath	equ	0xFFA
 10678                           tblptru	equ	0xFF8
 10679                           tblptrh	equ	0xFF7
 10680                           tblptrl	equ	0xFF6
 10681                           tablat	equ	0xFF5
 10682                           prodh	equ	0xFF4
 10683                           prodl	equ	0xFF3
 10684                           intcon	equ	0xFF2
 10685                           indf0	equ	0xFEF
 10686                           postinc0	equ	0xFEE
 10687                           fsr0h	equ	0xFEA
 10688                           fsr0l	equ	0xFE9
 10689                           wreg	equ	0xFE8
 10690                           postdec1	equ	0xFE5
 10691                           plusw1	equ	0xFE3
 10692                           fsr1l	equ	0xFE1
 10693                           indf2	equ	0xFDF
 10694                           postinc2	equ	0xFDE
 10695                           postdec2	equ	0xFDD
 10696                           plusw2	equ	0xFDB
 10697                           fsr2h	equ	0xFDA
 10698                           fsr2l	equ	0xFD9
 10699                           status	equ	0xFD8
 10700                           
 10701 ;; *************** function _I2C_Master_Read *****************
 10702 ;; Defined at:
 10703 ;;		line 120 in file "I2C.c"
 10704 ;; Parameters:    Size  Location     Type
 10705 ;;  ackBit          1    wreg     unsigned char 
 10706 ;; Auto vars:     Size  Location     Type
 10707 ;;  ackBit          1   39[COMRAM] unsigned char 
 10708 ;;  receivedByte    1   40[COMRAM] unsigned char 
 10709 ;; Return value:  Size  Location     Type
 10710 ;;                  1    wreg      unsigned char 
 10711 ;; Registers used:
 10712 ;;		wreg, status,2, status,0, cstack
 10713 ;; Tracked objects:
 10714 ;;		On entry : 0/0
 10715 ;;		On exit  : 0/0
 10716 ;;		Unchanged: 0/0
 10717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10719 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10721 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10722 ;;Total ram usage:        2 bytes
 10723 ;; Hardware stack levels used:    1
 10724 ;; Hardware stack levels required when called:    5
 10725 ;; This function calls:
 10726 ;;		_I2C_Master_Wait
 10727 ;; This function is called by:
 10728 ;;		_RTC_getTime
 10729 ;; This function uses a non-reentrant model
 10730 ;;
 10731                           
 10732                           	psect	text35
 10733  002B62                     __ptext35:
 10734                           	opt stack 0
 10735  002B62                     _I2C_Master_Read:
 10736                           	opt stack 21
 10737                           
 10738                           ;incstack = 0
 10739                           ;I2C_Master_Read@ackBit stored from wreg
 10740  002B62  6E28               	movwf	I2C_Master_Read@ackBit,c
 10741                           
 10742                           ;I2C.c: 130: unsigned char receivedByte;
 10743                           ;I2C.c: 132: I2C_Master_Wait();
 10744  002B64  EC0A  F016         	call	_I2C_Master_Wait	;wreg free
 10745                           
 10746                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
 10747  002B68  86C5               	bsf	4037,3,c	;volatile
 10748                           
 10749                           ;I2C.c: 135: I2C_Master_Wait();
 10750  002B6A  EC0A  F016         	call	_I2C_Master_Wait	;wreg free
 10751                           
 10752                           ;I2C.c: 136: receivedByte = SSPBUF;
 10753  002B6E  CFC9 F029          	movff	4041,I2C_Master_Read@receivedByte	;volatile
 10754                           
 10755                           ;I2C.c: 138: I2C_Master_Wait();
 10756  002B72  EC0A  F016         	call	_I2C_Master_Wait	;wreg free
 10757                           
 10758                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
 10759  002B76  B028               	btfsc	I2C_Master_Read@ackBit,0,c
 10760  002B78  D002               	bra	u4775
 10761  002B7A  9AC5               	bcf	4037,5,c	;volatile
 10762  002B7C  D001               	bra	u4776
 10763  002B7E                     u4775:
 10764  002B7E  8AC5               	bsf	4037,5,c	;volatile
 10765  002B80                     u4776:
 10766                           
 10767                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
 10768  002B80  88C5               	bsf	4037,4,c	;volatile
 10769                           
 10770                           ;I2C.c: 142: return receivedByte;
 10771  002B82  5029               	movf	I2C_Master_Read@receivedByte,w,c
 10772  002B84  0012               	return	
 10773  002B86                     __end_of_I2C_Master_Read:
 10774                           	opt stack 0
 10775                           tosu	equ	0xFFF
 10776                           tosh	equ	0xFFE
 10777                           tosl	equ	0xFFD
 10778                           pclath	equ	0xFFA
 10779                           tblptru	equ	0xFF8
 10780                           tblptrh	equ	0xFF7
 10781                           tblptrl	equ	0xFF6
 10782                           tablat	equ	0xFF5
 10783                           prodh	equ	0xFF4
 10784                           prodl	equ	0xFF3
 10785                           intcon	equ	0xFF2
 10786                           indf0	equ	0xFEF
 10787                           postinc0	equ	0xFEE
 10788                           fsr0h	equ	0xFEA
 10789                           fsr0l	equ	0xFE9
 10790                           wreg	equ	0xFE8
 10791                           postdec1	equ	0xFE5
 10792                           plusw1	equ	0xFE3
 10793                           fsr1l	equ	0xFE1
 10794                           indf2	equ	0xFDF
 10795                           postinc2	equ	0xFDE
 10796                           postdec2	equ	0xFDD
 10797                           plusw2	equ	0xFDB
 10798                           fsr2h	equ	0xFDA
 10799                           fsr2l	equ	0xFD9
 10800                           status	equ	0xFD8
 10801                           
 10802 ;; *************** function _I2C_Master_Wait *****************
 10803 ;; Defined at:
 10804 ;;		line 51 in file "I2C.c"
 10805 ;; Parameters:    Size  Location     Type
 10806 ;;		None
 10807 ;; Auto vars:     Size  Location     Type
 10808 ;;		None
 10809 ;; Return value:  Size  Location     Type
 10810 ;;                  1    wreg      void 
 10811 ;; Registers used:
 10812 ;;		wreg, status,2, status,0
 10813 ;; Tracked objects:
 10814 ;;		On entry : 0/0
 10815 ;;		On exit  : 0/0
 10816 ;;		Unchanged: 0/0
 10817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10820 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10821 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10822 ;;Total ram usage:        1 bytes
 10823 ;; Hardware stack levels used:    1
 10824 ;; Hardware stack levels required when called:    4
 10825 ;; This function calls:
 10826 ;;		Nothing
 10827 ;; This function is called by:
 10828 ;;		_I2C_Master_Start
 10829 ;;		_I2C_Master_Stop
 10830 ;;		_I2C_Master_Write
 10831 ;;		_I2C_Master_Read
 10832 ;;		_I2C_Master_RepeatedStart
 10833 ;; This function uses a non-reentrant model
 10834 ;;
 10835                           
 10836                           	psect	text36
 10837  002C14                     __ptext36:
 10838                           	opt stack 0
 10839  002C14                     _I2C_Master_Wait:
 10840                           	opt stack 21
 10841                           
 10842                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 10843                           
 10844                           ;incstack = 0
 10845  002C14  B4C7               	btfsc	4039,2,c	;volatile
 10846  002C16  D7FE               	goto	_I2C_Master_Wait
 10847  002C18  CFC5 F027          	movff	4037,??_I2C_Master_Wait	;volatile
 10848  002C1C  0E1F               	movlw	31
 10849  002C1E  1627               	andwf	??_I2C_Master_Wait,f,c
 10850  002C20  B4D8               	btfsc	status,2,c
 10851  002C22  0012               	return	
 10852  002C24  D7F7               	goto	_I2C_Master_Wait
 10853  002C26                     __end_of_I2C_Master_Wait:
 10854                           	opt stack 0
 10855                           tosu	equ	0xFFF
 10856                           tosh	equ	0xFFE
 10857                           tosl	equ	0xFFD
 10858                           pclath	equ	0xFFA
 10859                           tblptru	equ	0xFF8
 10860                           tblptrh	equ	0xFF7
 10861                           tblptrl	equ	0xFF6
 10862                           tablat	equ	0xFF5
 10863                           prodh	equ	0xFF4
 10864                           prodl	equ	0xFF3
 10865                           intcon	equ	0xFF2
 10866                           indf0	equ	0xFEF
 10867                           postinc0	equ	0xFEE
 10868                           fsr0h	equ	0xFEA
 10869                           fsr0l	equ	0xFE9
 10870                           wreg	equ	0xFE8
 10871                           postdec1	equ	0xFE5
 10872                           plusw1	equ	0xFE3
 10873                           fsr1l	equ	0xFE1
 10874                           indf2	equ	0xFDF
 10875                           postinc2	equ	0xFDE
 10876                           postdec2	equ	0xFDD
 10877                           plusw2	equ	0xFDB
 10878                           fsr2h	equ	0xFDA
 10879                           fsr2l	equ	0xFD9
 10880                           status	equ	0xFD8
 10881                           
 10882 ;; *************** function _initLCD *****************
 10883 ;; Defined at:
 10884 ;;		line 61 in file "lcd.c"
 10885 ;; Parameters:    Size  Location     Type
 10886 ;;		None
 10887 ;; Auto vars:     Size  Location     Type
 10888 ;;		None
 10889 ;; Return value:  Size  Location     Type
 10890 ;;                  1    wreg      void 
 10891 ;; Registers used:
 10892 ;;		wreg, status,2, status,0, cstack
 10893 ;; Tracked objects:
 10894 ;;		On entry : 0/0
 10895 ;;		On exit  : 0/0
 10896 ;;		Unchanged: 0/0
 10897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10900 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10901 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10902 ;;Total ram usage:        1 bytes
 10903 ;; Hardware stack levels used:    1
 10904 ;; Hardware stack levels required when called:    6
 10905 ;; This function calls:
 10906 ;;		_lcdInst
 10907 ;; This function is called by:
 10908 ;;		_main
 10909 ;; This function uses a non-reentrant model
 10910 ;;
 10911                           
 10912                           	psect	text37
 10913  00294C                     __ptext37:
 10914                           	opt stack 0
 10915  00294C                     _initLCD:
 10916                           	opt stack 24
 10917                           
 10918                           ;lcd.c: 69: _delay((unsigned long)((15)*(40000000/4000.0)));
 10919                           
 10920                           ;incstack = 0
 10921  00294C  0EC3               	movlw	195
 10922  00294E  6E2A               	movwf	??_initLCD& (0+255),c
 10923  002950  0ECD               	movlw	205
 10924  002952                     u7077:
 10925  002952  2EE8               	decfsz	wreg,f,c
 10926  002954  D7FE               	bra	u7077
 10927  002956  2E2A               	decfsz	??_initLCD& (0+255),f,c
 10928  002958  D7FC               	bra	u7077
 10929  00295A  F000               	nop	
 10930                           
 10931                           ;lcd.c: 70: lcdInst(0b00110011);
 10932  00295C  0E33               	movlw	51
 10933  00295E  ECF7  F015         	call	_lcdInst
 10934                           
 10935                           ;lcd.c: 71: lcdInst(0b00110010);
 10936  002962  0E32               	movlw	50
 10937  002964  ECF7  F015         	call	_lcdInst
 10938                           
 10939                           ;lcd.c: 72: lcdInst(0b00101000);
 10940  002968  0E28               	movlw	40
 10941  00296A  ECF7  F015         	call	_lcdInst
 10942                           
 10943                           ;lcd.c: 73: lcdInst(0b00001111);
 10944  00296E  0E0F               	movlw	15
 10945  002970  ECF7  F015         	call	_lcdInst
 10946                           
 10947                           ;lcd.c: 74: lcdInst(0b00000110);
 10948  002974  0E06               	movlw	6
 10949  002976  ECF7  F015         	call	_lcdInst
 10950                           
 10951                           ;lcd.c: 75: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 10952  00297A  0E01               	movlw	1
 10953  00297C  ECF7  F015         	call	_lcdInst
 10954  002980  0EC3               	movlw	195
 10955  002982  6E2A               	movwf	??_initLCD& (0+255),c
 10956  002984  0ECD               	movlw	205
 10957  002986                     u7087:
 10958  002986  2EE8               	decfsz	wreg,f,c
 10959  002988  D7FE               	bra	u7087
 10960  00298A  2E2A               	decfsz	??_initLCD& (0+255),f,c
 10961  00298C  D7FC               	bra	u7087
 10962  00298E  F000               	nop	
 10963                           
 10964                           ;lcd.c: 78: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
 10965  002990  0E0F               	movlw	15
 10966  002992  ECF7  F015         	call	_lcdInst
 10967  002996  0012               	return		;funcret
 10968  002998                     __end_of_initLCD:
 10969                           	opt stack 0
 10970                           tosu	equ	0xFFF
 10971                           tosh	equ	0xFFE
 10972                           tosl	equ	0xFFD
 10973                           pclath	equ	0xFFA
 10974                           tblptru	equ	0xFF8
 10975                           tblptrh	equ	0xFF7
 10976                           tblptrl	equ	0xFF6
 10977                           tablat	equ	0xFF5
 10978                           prodh	equ	0xFF4
 10979                           prodl	equ	0xFF3
 10980                           intcon	equ	0xFF2
 10981                           indf0	equ	0xFEF
 10982                           postinc0	equ	0xFEE
 10983                           fsr0h	equ	0xFEA
 10984                           fsr0l	equ	0xFE9
 10985                           wreg	equ	0xFE8
 10986                           postdec1	equ	0xFE5
 10987                           plusw1	equ	0xFE3
 10988                           fsr1l	equ	0xFE1
 10989                           indf2	equ	0xFDF
 10990                           postinc2	equ	0xFDE
 10991                           postdec2	equ	0xFDD
 10992                           plusw2	equ	0xFDB
 10993                           fsr2h	equ	0xFDA
 10994                           fsr2l	equ	0xFD9
 10995                           status	equ	0xFD8
 10996                           
 10997 ;; *************** function _lcdInst *****************
 10998 ;; Defined at:
 10999 ;;		line 12 in file "lcd.c"
 11000 ;; Parameters:    Size  Location     Type
 11001 ;;  data            1    wreg     unsigned char 
 11002 ;; Auto vars:     Size  Location     Type
 11003 ;;  data            1   40[COMRAM] unsigned char 
 11004 ;; Return value:  Size  Location     Type
 11005 ;;                  1    wreg      void 
 11006 ;; Registers used:
 11007 ;;		wreg, status,2, status,0, cstack
 11008 ;; Tracked objects:
 11009 ;;		On entry : 0/0
 11010 ;;		On exit  : 0/0
 11011 ;;		Unchanged: 0/0
 11012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11014 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11016 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11017 ;;Total ram usage:        1 bytes
 11018 ;; Hardware stack levels used:    1
 11019 ;; Hardware stack levels required when called:    5
 11020 ;; This function calls:
 11021 ;;		_lcdNibble
 11022 ;; This function is called by:
 11023 ;;		_packaging
 11024 ;;		_main
 11025 ;;		_initLCD
 11026 ;;		_lcd_set_cursor
 11027 ;;		_lcd_shift_cursor
 11028 ;;		_inputEntry
 11029 ;;		_mainMenu
 11030 ;;		_printStringLCD
 11031 ;;		_lcd_shift_display
 11032 ;; This function uses a non-reentrant model
 11033 ;;
 11034                           
 11035                           	psect	text38
 11036  002BEE                     __ptext38:
 11037                           	opt stack 0
 11038  002BEE                     _lcdInst:
 11039                           	opt stack 22
 11040                           
 11041                           ;incstack = 0
 11042                           ;lcdInst@data stored from wreg
 11043  002BEE  6E29               	movwf	lcdInst@data,c
 11044                           
 11045                           ;lcd.c: 20: LATDbits.LATD2 = 0;
 11046  002BF0  948C               	bcf	3980,2,c	;volatile
 11047                           
 11048                           ;lcd.c: 21: lcdNibble(data);
 11049  002BF2  5029               	movf	lcdInst@data,w,c
 11050  002BF4  ECFD  F012         	call	_lcdNibble
 11051                           
 11052                           ;lcd.c: 22: _delay((unsigned long)((100)*(40000000/4000000.0)));
 11053  002BF8  0EC8               	movlw	200
 11054  002BFA                     u7097:
 11055  002BFA  D000               	nop2	
 11056  002BFC  2EE8               	decfsz	wreg,f,c
 11057  002BFE  D7FD               	bra	u7097
 11058  002C00  0012               	return		;funcret
 11059  002C02                     __end_of_lcdInst:
 11060                           	opt stack 0
 11061                           tosu	equ	0xFFF
 11062                           tosh	equ	0xFFE
 11063                           tosl	equ	0xFFD
 11064                           pclath	equ	0xFFA
 11065                           tblptru	equ	0xFF8
 11066                           tblptrh	equ	0xFF7
 11067                           tblptrl	equ	0xFF6
 11068                           tablat	equ	0xFF5
 11069                           prodh	equ	0xFF4
 11070                           prodl	equ	0xFF3
 11071                           intcon	equ	0xFF2
 11072                           indf0	equ	0xFEF
 11073                           postinc0	equ	0xFEE
 11074                           fsr0h	equ	0xFEA
 11075                           fsr0l	equ	0xFE9
 11076                           wreg	equ	0xFE8
 11077                           postdec1	equ	0xFE5
 11078                           plusw1	equ	0xFE3
 11079                           fsr1l	equ	0xFE1
 11080                           indf2	equ	0xFDF
 11081                           postinc2	equ	0xFDE
 11082                           postdec2	equ	0xFDD
 11083                           plusw2	equ	0xFDB
 11084                           fsr2h	equ	0xFDA
 11085                           fsr2l	equ	0xFD9
 11086                           status	equ	0xFD8
 11087                           
 11088 ;; *************** function _lcdNibble *****************
 11089 ;; Defined at:
 11090 ;;		line 38 in file "lcd.c"
 11091 ;; Parameters:    Size  Location     Type
 11092 ;;  data            1    wreg     unsigned char 
 11093 ;; Auto vars:     Size  Location     Type
 11094 ;;  data            1   39[COMRAM] unsigned char 
 11095 ;;  temp            1   38[COMRAM] unsigned char 
 11096 ;; Return value:  Size  Location     Type
 11097 ;;                  1    wreg      void 
 11098 ;; Registers used:
 11099 ;;		wreg, status,2, status,0
 11100 ;; Tracked objects:
 11101 ;;		On entry : 0/0
 11102 ;;		On exit  : 0/0
 11103 ;;		Unchanged: 0/0
 11104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11106 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11108 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11109 ;;Total ram usage:        2 bytes
 11110 ;; Hardware stack levels used:    1
 11111 ;; Hardware stack levels required when called:    4
 11112 ;; This function calls:
 11113 ;;		Nothing
 11114 ;; This function is called by:
 11115 ;;		_lcdInst
 11116 ;;		_putch
 11117 ;; This function uses a non-reentrant model
 11118 ;;
 11119                           
 11120                           	psect	text39
 11121  0025FA                     __ptext39:
 11122                           	opt stack 0
 11123  0025FA                     _lcdNibble:
 11124                           	opt stack 22
 11125                           
 11126                           ;incstack = 0
 11127                           ;lcdNibble@data stored from wreg
 11128  0025FA  6E28               	movwf	lcdNibble@data,c
 11129                           
 11130                           ;lcd.c: 46: char temp = (unsigned char) (data & 0xF0);
 11131  0025FC  5028               	movf	lcdNibble@data,w,c
 11132  0025FE  0BF0               	andlw	240
 11133  002600  6E27               	movwf	lcdNibble@temp,c
 11134                           
 11135                           ;lcd.c: 47: LATD = (unsigned char) (LATD & 0x0F);
 11136  002602  508C               	movf	3980,w,c	;volatile
 11137  002604  0B0F               	andlw	15
 11138  002606  6E8C               	movwf	3980,c	;volatile
 11139                           
 11140                           ;lcd.c: 48: LATD = (unsigned char) (temp | LATD);
 11141  002608  5027               	movf	lcdNibble@temp,w,c
 11142  00260A  108C               	iorwf	3980,w,c	;volatile
 11143  00260C  6E8C               	movwf	3980,c	;volatile
 11144                           
 11145                           ;lcd.c: 50: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 11146  00260E  0E00               	movlw	0
 11147  002610  BEF2               	btfsc	intcon,7,c	;volatile
 11148  002612  0E01               	movlw	1
 11149  002614  6E4E               	movwf	_LCDinterruptState,c
 11150  002616  9EF2               	bcf	intcon,7,c	;volatile
 11151  002618  868C               	bsf	3980,3,c	;volatile
 11152  00261A  0E53               	movlw	83
 11153  00261C                     u7107:
 11154  00261C  2EE8               	decfsz	wreg,f,c
 11155  00261E  D7FE               	bra	u7107
 11156  002620  F000               	nop	
 11157  002622  968C               	bcf	3980,3,c	;volatile
 11158  002624  0EC8               	movlw	200
 11159  002626                     u7117:
 11160  002626  D000               	nop2	
 11161  002628  2EE8               	decfsz	wreg,f,c
 11162  00262A  D7FD               	bra	u7117
 11163  00262C  B04E               	btfsc	_LCDinterruptState,0,c
 11164  00262E  D002               	bra	u4755
 11165  002630  9EF2               	bcf	intcon,7,c	;volatile
 11166  002632  D001               	bra	u4756
 11167  002634                     u4755:
 11168  002634  8EF2               	bsf	intcon,7,c	;volatile
 11169  002636                     u4756:
 11170                           
 11171                           ;lcd.c: 53: data = (unsigned char) (data << 4);
 11172  002636  3828               	swapf	lcdNibble@data,w,c
 11173  002638  0BF0               	andlw	240
 11174  00263A  6E28               	movwf	lcdNibble@data,c
 11175                           
 11176                           ;lcd.c: 54: temp = (unsigned char) (data & 0xF0);
 11177  00263C  5028               	movf	lcdNibble@data,w,c
 11178  00263E  0BF0               	andlw	240
 11179  002640  6E27               	movwf	lcdNibble@temp,c
 11180                           
 11181                           ;lcd.c: 55: LATD = (unsigned char) (LATD & 0x0F);
 11182  002642  508C               	movf	3980,w,c	;volatile
 11183  002644  0B0F               	andlw	15
 11184  002646  6E8C               	movwf	3980,c	;volatile
 11185                           
 11186                           ;lcd.c: 56: LATD = (unsigned char) (temp | LATD);
 11187  002648  5027               	movf	lcdNibble@temp,w,c
 11188  00264A  108C               	iorwf	3980,w,c	;volatile
 11189  00264C  6E8C               	movwf	3980,c	;volatile
 11190                           
 11191                           ;lcd.c: 58: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 11192  00264E  0E00               	movlw	0
 11193  002650  BEF2               	btfsc	intcon,7,c	;volatile
 11194  002652  0E01               	movlw	1
 11195  002654  6E4E               	movwf	_LCDinterruptState,c
 11196  002656  9EF2               	bcf	intcon,7,c	;volatile
 11197  002658  868C               	bsf	3980,3,c	;volatile
 11198  00265A  0E53               	movlw	83
 11199  00265C                     u7127:
 11200  00265C  2EE8               	decfsz	wreg,f,c
 11201  00265E  D7FE               	bra	u7127
 11202  002660  F000               	nop	
 11203  002662  968C               	bcf	3980,3,c	;volatile
 11204  002664  0EC8               	movlw	200
 11205  002666                     u7137:
 11206  002666  D000               	nop2	
 11207  002668  2EE8               	decfsz	wreg,f,c
 11208  00266A  D7FD               	bra	u7137
 11209  00266C  B04E               	btfsc	_LCDinterruptState,0,c
 11210  00266E  D002               	bra	u4765
 11211  002670  9EF2               	bcf	intcon,7,c	;volatile
 11212  002672  D001               	bra	u4766
 11213  002674                     u4765:
 11214  002674  8EF2               	bsf	intcon,7,c	;volatile
 11215  002676                     u4766:
 11216  002676  0012               	return		;funcret
 11217  002678                     __end_of_lcdNibble:
 11218                           	opt stack 0
 11219                           tosu	equ	0xFFF
 11220                           tosh	equ	0xFFE
 11221                           tosl	equ	0xFFD
 11222                           pclath	equ	0xFFA
 11223                           tblptru	equ	0xFF8
 11224                           tblptrh	equ	0xFF7
 11225                           tblptrl	equ	0xFF6
 11226                           tablat	equ	0xFF5
 11227                           prodh	equ	0xFF4
 11228                           prodl	equ	0xFF3
 11229                           intcon	equ	0xFF2
 11230                           indf0	equ	0xFEF
 11231                           postinc0	equ	0xFEE
 11232                           fsr0h	equ	0xFEA
 11233                           fsr0l	equ	0xFE9
 11234                           wreg	equ	0xFE8
 11235                           postdec1	equ	0xFE5
 11236                           plusw1	equ	0xFE3
 11237                           fsr1l	equ	0xFE1
 11238                           indf2	equ	0xFDF
 11239                           postinc2	equ	0xFDE
 11240                           postdec2	equ	0xFDD
 11241                           plusw2	equ	0xFDB
 11242                           fsr2h	equ	0xFDA
 11243                           fsr2l	equ	0xFD9
 11244                           status	equ	0xFD8
 11245                           
 11246 ;; *************** function _I2C_Master_Init *****************
 11247 ;; Defined at:
 11248 ;;		line 14 in file "I2C.c"
 11249 ;; Parameters:    Size  Location     Type
 11250 ;;  clockFreq       4    0[BANK0 ] const unsigned long 
 11251 ;; Auto vars:     Size  Location     Type
 11252 ;;		None
 11253 ;; Return value:  Size  Location     Type
 11254 ;;                  1    wreg      void 
 11255 ;; Registers used:
 11256 ;;		wreg, status,2, status,0, cstack
 11257 ;; Tracked objects:
 11258 ;;		On entry : 0/0
 11259 ;;		On exit  : 0/0
 11260 ;;		Unchanged: 0/0
 11261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11262 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11264 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11265 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11266 ;;Total ram usage:        8 bytes
 11267 ;; Hardware stack levels used:    1
 11268 ;; Hardware stack levels required when called:    5
 11269 ;; This function calls:
 11270 ;;		___lldiv
 11271 ;; This function is called by:
 11272 ;;		_main
 11273 ;; This function uses a non-reentrant model
 11274 ;;
 11275                           
 11276                           	psect	text40
 11277  00289C                     __ptext40:
 11278                           	opt stack 0
 11279  00289C                     _I2C_Master_Init:
 11280                           	opt stack 25
 11281                           
 11282                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
 11283                           
 11284                           ;incstack = 0
 11285  00289C  9AC6               	bcf	4038,5,c	;volatile
 11286                           
 11287                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
 11288  00289E  8694               	bsf	3988,3,c	;volatile
 11289                           
 11290                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
 11291  0028A0  8894               	bsf	3988,4,c	;volatile
 11292                           
 11293                           ;I2C.c: 41: SSPSTAT = 0b10000000;
 11294  0028A2  0E80               	movlw	128
 11295  0028A4  6EC7               	movwf	4039,c	;volatile
 11296                           
 11297                           ;I2C.c: 42: SSPCON1 = 0b00101000;
 11298  0028A6  0E28               	movlw	40
 11299  0028A8  6EC6               	movwf	4038,c	;volatile
 11300                           
 11301                           ;I2C.c: 43: SSPCON2 = 0b00000000;
 11302  0028AA  0E00               	movlw	0
 11303  0028AC  6EC5               	movwf	4037,c	;volatile
 11304                           
 11305                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
 11306  0028AE  0E00               	movlw	0
 11307  0028B0  6E27               	movwf	___lldiv@dividend,c
 11308  0028B2  0E5A               	movlw	90
 11309  0028B4  6E28               	movwf	___lldiv@dividend+1,c
 11310  0028B6  0E62               	movlw	98
 11311  0028B8  6E29               	movwf	___lldiv@dividend+2,c
 11312  0028BA  0E02               	movlw	2
 11313  0028BC  6E2A               	movwf	___lldiv@dividend+3,c
 11314  0028BE  C080  F084         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
 11315  0028C2  C081  F085         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
 11316  0028C6  C082  F086         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
 11317  0028CA  C083  F087         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
 11318  0028CE  0E02               	movlw	2
 11319  0028D0                     u6665:
 11320  0028D0  90D8               	bcf	status,0,c
 11321  0028D2  0100               	movlb	0	; () banked
 11322  0028D4  3784               	rlcf	??_I2C_Master_Init& (0+255),f,b
 11323  0028D6  3785               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
 11324  0028D8  3786               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
 11325  0028DA  3787               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
 11326  0028DC  2EE8               	decfsz	wreg,f,c
 11327  0028DE  D7F8               	goto	u6665
 11328  0028E0  C084  F02B         	movff	??_I2C_Master_Init,___lldiv@divisor
 11329  0028E4  C085  F02C         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 11330  0028E8  C086  F02D         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 11331  0028EC  C087  F02E         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 11332  0028F0  ECBC  F012         	call	___lldiv	;wreg free
 11333  0028F4  0427               	decf	?___lldiv,w,c
 11334  0028F6  6EC8               	movwf	4040,c	;volatile
 11335  0028F8  0012               	return		;funcret
 11336  0028FA                     __end_of_I2C_Master_Init:
 11337                           	opt stack 0
 11338                           tosu	equ	0xFFF
 11339                           tosh	equ	0xFFE
 11340                           tosl	equ	0xFFD
 11341                           pclath	equ	0xFFA
 11342                           tblptru	equ	0xFF8
 11343                           tblptrh	equ	0xFF7
 11344                           tblptrl	equ	0xFF6
 11345                           tablat	equ	0xFF5
 11346                           prodh	equ	0xFF4
 11347                           prodl	equ	0xFF3
 11348                           intcon	equ	0xFF2
 11349                           indf0	equ	0xFEF
 11350                           postinc0	equ	0xFEE
 11351                           fsr0h	equ	0xFEA
 11352                           fsr0l	equ	0xFE9
 11353                           wreg	equ	0xFE8
 11354                           postdec1	equ	0xFE5
 11355                           plusw1	equ	0xFE3
 11356                           fsr1l	equ	0xFE1
 11357                           indf2	equ	0xFDF
 11358                           postinc2	equ	0xFDE
 11359                           postdec2	equ	0xFDD
 11360                           plusw2	equ	0xFDB
 11361                           fsr2h	equ	0xFDA
 11362                           fsr2l	equ	0xFD9
 11363                           status	equ	0xFD8
 11364                           
 11365 ;; *************** function ___lldiv *****************
 11366 ;; Defined at:
 11367 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 11368 ;; Parameters:    Size  Location     Type
 11369 ;;  dividend        4   38[COMRAM] unsigned long 
 11370 ;;  divisor         4   42[COMRAM] unsigned long 
 11371 ;; Auto vars:     Size  Location     Type
 11372 ;;  quotient        4   46[COMRAM] unsigned long 
 11373 ;;  counter         1   50[COMRAM] unsigned char 
 11374 ;; Return value:  Size  Location     Type
 11375 ;;                  4   38[COMRAM] unsigned long 
 11376 ;; Registers used:
 11377 ;;		wreg, status,2, status,0
 11378 ;; Tracked objects:
 11379 ;;		On entry : 0/0
 11380 ;;		On exit  : 0/0
 11381 ;;		Unchanged: 0/0
 11382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11383 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11384 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11386 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11387 ;;Total ram usage:       13 bytes
 11388 ;; Hardware stack levels used:    1
 11389 ;; Hardware stack levels required when called:    4
 11390 ;; This function calls:
 11391 ;;		Nothing
 11392 ;; This function is called by:
 11393 ;;		_I2C_Master_Init
 11394 ;;		__doprnt
 11395 ;; This function uses a non-reentrant model
 11396 ;;
 11397                           
 11398                           	psect	text41
 11399  002578                     __ptext41:
 11400                           	opt stack 0
 11401  002578                     ___lldiv:
 11402                           	opt stack 23
 11403                           
 11404                           ;incstack = 0
 11405  002578  0E00               	movlw	0
 11406  00257A  6E2F               	movwf	___lldiv@quotient,c
 11407  00257C  0E00               	movlw	0
 11408  00257E  6E30               	movwf	___lldiv@quotient+1,c
 11409  002580  0E00               	movlw	0
 11410  002582  6E31               	movwf	___lldiv@quotient+2,c
 11411  002584  0E00               	movlw	0
 11412  002586  6E32               	movwf	___lldiv@quotient+3,c
 11413  002588  502B               	movf	___lldiv@divisor,w,c
 11414  00258A  102C               	iorwf	___lldiv@divisor+1,w,c
 11415  00258C  102D               	iorwf	___lldiv@divisor+2,w,c
 11416  00258E  102E               	iorwf	___lldiv@divisor+3,w,c
 11417  002590  B4D8               	btfsc	status,2,c
 11418  002592  D02A               	goto	l1045
 11419  002594  0E01               	movlw	1
 11420  002596  6E33               	movwf	___lldiv@counter,c
 11421  002598  D006               	goto	l1040
 11422  00259A  90D8               	bcf	status,0,c
 11423  00259C  362B               	rlcf	___lldiv@divisor,f,c
 11424  00259E  362C               	rlcf	___lldiv@divisor+1,f,c
 11425  0025A0  362D               	rlcf	___lldiv@divisor+2,f,c
 11426  0025A2  362E               	rlcf	___lldiv@divisor+3,f,c
 11427  0025A4  2A33               	incf	___lldiv@counter,f,c
 11428  0025A6                     l1040:
 11429  0025A6  AE2E               	btfss	___lldiv@divisor+3,7,c
 11430  0025A8  D7F8               	goto	l1041
 11431  0025AA                     u4880:
 11432  0025AA  90D8               	bcf	status,0,c
 11433  0025AC  362F               	rlcf	___lldiv@quotient,f,c
 11434  0025AE  3630               	rlcf	___lldiv@quotient+1,f,c
 11435  0025B0  3631               	rlcf	___lldiv@quotient+2,f,c
 11436  0025B2  3632               	rlcf	___lldiv@quotient+3,f,c
 11437  0025B4  502B               	movf	___lldiv@divisor,w,c
 11438  0025B6  5C27               	subwf	___lldiv@dividend,w,c
 11439  0025B8  502C               	movf	___lldiv@divisor+1,w,c
 11440  0025BA  5828               	subwfb	___lldiv@dividend+1,w,c
 11441  0025BC  502D               	movf	___lldiv@divisor+2,w,c
 11442  0025BE  5829               	subwfb	___lldiv@dividend+2,w,c
 11443  0025C0  502E               	movf	___lldiv@divisor+3,w,c
 11444  0025C2  582A               	subwfb	___lldiv@dividend+3,w,c
 11445  0025C4  A0D8               	btfss	status,0,c
 11446  0025C6  D009               	goto	l1044
 11447  0025C8  502B               	movf	___lldiv@divisor,w,c
 11448  0025CA  5E27               	subwf	___lldiv@dividend,f,c
 11449  0025CC  502C               	movf	___lldiv@divisor+1,w,c
 11450  0025CE  5A28               	subwfb	___lldiv@dividend+1,f,c
 11451  0025D0  502D               	movf	___lldiv@divisor+2,w,c
 11452  0025D2  5A29               	subwfb	___lldiv@dividend+2,f,c
 11453  0025D4  502E               	movf	___lldiv@divisor+3,w,c
 11454  0025D6  5A2A               	subwfb	___lldiv@dividend+3,f,c
 11455  0025D8  802F               	bsf	___lldiv@quotient,0,c
 11456  0025DA                     l1044:
 11457  0025DA  90D8               	bcf	status,0,c
 11458  0025DC  322E               	rrcf	___lldiv@divisor+3,f,c
 11459  0025DE  322D               	rrcf	___lldiv@divisor+2,f,c
 11460  0025E0  322C               	rrcf	___lldiv@divisor+1,f,c
 11461  0025E2  322B               	rrcf	___lldiv@divisor,f,c
 11462  0025E4  2E33               	decfsz	___lldiv@counter,f,c
 11463  0025E6  D7E1               	goto	u4880
 11464  0025E8                     l1045:
 11465  0025E8  C02F  F027         	movff	___lldiv@quotient,?___lldiv
 11466  0025EC  C030  F028         	movff	___lldiv@quotient+1,?___lldiv+1
 11467  0025F0  C031  F029         	movff	___lldiv@quotient+2,?___lldiv+2
 11468  0025F4  C032  F02A         	movff	___lldiv@quotient+3,?___lldiv+3
 11469  0025F8  0012               	return		;funcret
 11470  0025FA                     __end_of___lldiv:
 11471                           	opt stack 0
 11472                           tosu	equ	0xFFF
 11473                           tosh	equ	0xFFE
 11474                           tosl	equ	0xFFD
 11475                           pclath	equ	0xFFA
 11476                           tblptru	equ	0xFF8
 11477                           tblptrh	equ	0xFF7
 11478                           tblptrl	equ	0xFF6
 11479                           tablat	equ	0xFF5
 11480                           prodh	equ	0xFF4
 11481                           prodl	equ	0xFF3
 11482                           intcon	equ	0xFF2
 11483                           indf0	equ	0xFEF
 11484                           postinc0	equ	0xFEE
 11485                           fsr0h	equ	0xFEA
 11486                           fsr0l	equ	0xFE9
 11487                           wreg	equ	0xFE8
 11488                           postdec1	equ	0xFE5
 11489                           plusw1	equ	0xFE3
 11490                           fsr1l	equ	0xFE1
 11491                           indf2	equ	0xFDF
 11492                           postinc2	equ	0xFDE
 11493                           postdec2	equ	0xFDD
 11494                           plusw2	equ	0xFDB
 11495                           fsr2h	equ	0xFDA
 11496                           fsr2l	equ	0xFD9
 11497                           status	equ	0xFD8
 11498                           
 11499 ;; *************** function _interruptHandler *****************
 11500 ;; Defined at:
 11501 ;;		line 239 in file "main.c"
 11502 ;; Parameters:    Size  Location     Type
 11503 ;;		None
 11504 ;; Auto vars:     Size  Location     Type
 11505 ;;		None
 11506 ;; Return value:  Size  Location     Type
 11507 ;;                  1    wreg      void 
 11508 ;; Registers used:
 11509 ;;		wreg, status,2, status,0, cstack
 11510 ;; Tracked objects:
 11511 ;;		On entry : 0/0
 11512 ;;		On exit  : 0/0
 11513 ;;		Unchanged: 0/0
 11514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11517 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11518 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11519 ;;Total ram usage:       18 bytes
 11520 ;; Hardware stack levels used:    1
 11521 ;; Hardware stack levels required when called:    3
 11522 ;; This function calls:
 11523 ;;		_tmr0_ISR
 11524 ;; This function is called by:
 11525 ;;		Interrupt level 2
 11526 ;; This function uses a non-reentrant model
 11527 ;;
 11528                           
 11529                           	psect	intcode
 11530  000008                     __pintcode:
 11531                           	opt stack 0
 11532  000008                     _interruptHandler:
 11533                           	opt stack 21
 11534                           
 11535                           ;incstack = 0
 11536  000008  8259               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11537  00000A  ED98  F011         	call	int_func,f	;refresh shadow registers
 11538                           tosu	equ	0xFFF
 11539                           tosh	equ	0xFFE
 11540                           tosl	equ	0xFFD
 11541                           pclath	equ	0xFFA
 11542                           tblptru	equ	0xFF8
 11543                           tblptrh	equ	0xFF7
 11544                           tblptrl	equ	0xFF6
 11545                           tablat	equ	0xFF5
 11546                           prodh	equ	0xFF4
 11547                           prodl	equ	0xFF3
 11548                           intcon	equ	0xFF2
 11549                           indf0	equ	0xFEF
 11550                           postinc0	equ	0xFEE
 11551                           fsr0h	equ	0xFEA
 11552                           fsr0l	equ	0xFE9
 11553                           wreg	equ	0xFE8
 11554                           postdec1	equ	0xFE5
 11555                           plusw1	equ	0xFE3
 11556                           fsr1l	equ	0xFE1
 11557                           indf2	equ	0xFDF
 11558                           postinc2	equ	0xFDE
 11559                           postdec2	equ	0xFDD
 11560                           plusw2	equ	0xFDB
 11561                           fsr2h	equ	0xFDA
 11562                           fsr2l	equ	0xFD9
 11563                           status	equ	0xFD8
 11564                           
 11565                           	psect	intcode_body
 11566  002330                     __pintcode_body:
 11567                           	opt stack 21
 11568  002330                     int_func:
 11569                           	opt stack 21
 11570  002330  0006               	pop		; remove dummy address from shadow register refresh
 11571  002332  CFFA F015          	movff	pclath,??_interruptHandler
 11572  002336  CFFB F016          	movff	pclatu,??_interruptHandler+1
 11573  00233A  CFE9 F017          	movff	fsr0l,??_interruptHandler+2
 11574  00233E  CFEA F018          	movff	fsr0h,??_interruptHandler+3
 11575  002342  CFE1 F019          	movff	fsr1l,??_interruptHandler+4
 11576  002346  CFE2 F01A          	movff	fsr1h,??_interruptHandler+5
 11577  00234A  CFD9 F01B          	movff	fsr2l,??_interruptHandler+6
 11578  00234E  CFDA F01C          	movff	fsr2h,??_interruptHandler+7
 11579  002352  CFF3 F01D          	movff	prodl,??_interruptHandler+8
 11580  002356  CFF4 F01E          	movff	prodh,??_interruptHandler+9
 11581  00235A  CFF6 F01F          	movff	tblptrl,??_interruptHandler+10
 11582  00235E  CFF7 F020          	movff	tblptrh,??_interruptHandler+11
 11583  002362  CFF8 F021          	movff	tblptru,??_interruptHandler+12
 11584  002366  CFF5 F022          	movff	tablat,??_interruptHandler+13
 11585  00236A  C059  F023         	movff	btemp,??_interruptHandler+14
 11586  00236E  C05A  F024         	movff	btemp+1,??_interruptHandler+15
 11587  002372  C05B  F025         	movff	btemp+2,??_interruptHandler+16
 11588  002376  C05C  F026         	movff	btemp+3,??_interruptHandler+17
 11589                           
 11590                           ;main.c: 240: if (T0IE && T0IF) {
 11591  00237A  BAF2               	btfsc	intcon,5,c	;volatile
 11592  00237C  A4F2               	btfss	intcon,2,c	;volatile
 11593  00237E  D003               	goto	i2l146
 11594                           
 11595                           ;main.c: 241: T0IF = 0;
 11596  002380  94F2               	bcf	intcon,2,c	;volatile
 11597                           
 11598                           ;main.c: 242: tmr0_ISR();
 11599  002382  ECB2  F013         	call	_tmr0_ISR	;wreg free
 11600  002386                     i2l146:
 11601  002386  C026  F05C         	movff	??_interruptHandler+17,btemp+3
 11602  00238A  C025  F05B         	movff	??_interruptHandler+16,btemp+2
 11603  00238E  C024  F05A         	movff	??_interruptHandler+15,btemp+1
 11604  002392  C023  F059         	movff	??_interruptHandler+14,btemp
 11605  002396  C022  FFF5         	movff	??_interruptHandler+13,tablat
 11606  00239A  C021  FFF8         	movff	??_interruptHandler+12,tblptru
 11607  00239E  C020  FFF7         	movff	??_interruptHandler+11,tblptrh
 11608  0023A2  C01F  FFF6         	movff	??_interruptHandler+10,tblptrl
 11609  0023A6  C01E  FFF4         	movff	??_interruptHandler+9,prodh
 11610  0023AA  C01D  FFF3         	movff	??_interruptHandler+8,prodl
 11611  0023AE  C01C  FFDA         	movff	??_interruptHandler+7,fsr2h
 11612  0023B2  C01B  FFD9         	movff	??_interruptHandler+6,fsr2l
 11613  0023B6  C01A  FFE2         	movff	??_interruptHandler+5,fsr1h
 11614  0023BA  C019  FFE1         	movff	??_interruptHandler+4,fsr1l
 11615  0023BE  C018  FFEA         	movff	??_interruptHandler+3,fsr0h
 11616  0023C2  C017  FFE9         	movff	??_interruptHandler+2,fsr0l
 11617  0023C6  C016  FFFB         	movff	??_interruptHandler+1,pclatu
 11618  0023CA  C015  FFFA         	movff	??_interruptHandler,pclath
 11619  0023CE  9259               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11620  0023D0  0011               	retfie		f
 11621  0023D2                     __end_of_interruptHandler:
 11622                           	opt stack 0
 11623                           tosu	equ	0xFFF
 11624                           tosh	equ	0xFFE
 11625                           tosl	equ	0xFFD
 11626                           pclatu	equ	0xFFB
 11627                           pclath	equ	0xFFA
 11628                           tblptru	equ	0xFF8
 11629                           tblptrh	equ	0xFF7
 11630                           tblptrl	equ	0xFF6
 11631                           tablat	equ	0xFF5
 11632                           prodh	equ	0xFF4
 11633                           prodl	equ	0xFF3
 11634                           intcon	equ	0xFF2
 11635                           indf0	equ	0xFEF
 11636                           postinc0	equ	0xFEE
 11637                           fsr0h	equ	0xFEA
 11638                           fsr0l	equ	0xFE9
 11639                           wreg	equ	0xFE8
 11640                           postdec1	equ	0xFE5
 11641                           plusw1	equ	0xFE3
 11642                           fsr1h	equ	0xFE2
 11643                           fsr1l	equ	0xFE1
 11644                           indf2	equ	0xFDF
 11645                           postinc2	equ	0xFDE
 11646                           postdec2	equ	0xFDD
 11647                           plusw2	equ	0xFDB
 11648                           fsr2h	equ	0xFDA
 11649                           fsr2l	equ	0xFD9
 11650                           status	equ	0xFD8
 11651                           
 11652 ;; *************** function _tmr0_ISR *****************
 11653 ;; Defined at:
 11654 ;;		line 86 in file "timer.c"
 11655 ;; Parameters:    Size  Location     Type
 11656 ;;		None
 11657 ;; Auto vars:     Size  Location     Type
 11658 ;;		None
 11659 ;; Return value:  Size  Location     Type
 11660 ;;                  1    wreg      void 
 11661 ;; Registers used:
 11662 ;;		wreg, status,2, status,0, cstack
 11663 ;; Tracked objects:
 11664 ;;		On entry : 0/0
 11665 ;;		On exit  : 0/0
 11666 ;;		Unchanged: 0/0
 11667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11672 ;;Total ram usage:        0 bytes
 11673 ;; Hardware stack levels used:    1
 11674 ;; Hardware stack levels required when called:    2
 11675 ;; This function calls:
 11676 ;;		i2___ftadd
 11677 ;; This function is called by:
 11678 ;;		_interruptHandler
 11679 ;; This function uses a non-reentrant model
 11680 ;;
 11681                           
 11682                           	psect	text43
 11683  002764                     __ptext43:
 11684                           	opt stack 0
 11685  002764                     _tmr0_ISR:
 11686                           	opt stack 21
 11687                           
 11688                           ;timer.c: 87: timeSinceLastTic += 0.1;
 11689                           
 11690                           ;incstack = 0
 11691  002764  C04F  F009         	movff	_timeSinceLastTic,i2___ftadd@f1	;volatile
 11692  002768  C050  F00A         	movff	_timeSinceLastTic+1,i2___ftadd@f1+1	;volatile
 11693  00276C  C051  F00B         	movff	_timeSinceLastTic+2,i2___ftadd@f1+2	;volatile
 11694  002770  0ECD               	movlw	205
 11695  002772  6E0C               	movwf	i2___ftadd@f2,c
 11696  002774  0ECC               	movlw	204
 11697  002776  6E0D               	movwf	i2___ftadd@f2+1,c
 11698  002778  0E3D               	movlw	61
 11699  00277A  6E0E               	movwf	i2___ftadd@f2+2,c
 11700  00277C  EC66  F00F         	call	i2___ftadd	;wreg free
 11701  002780  C009  F04F         	movff	?i2___ftadd,_timeSinceLastTic	;volatile
 11702  002784  C00A  F050         	movff	?i2___ftadd+1,_timeSinceLastTic+1	;volatile
 11703  002788  C00B  F051         	movff	?i2___ftadd+2,_timeSinceLastTic+2	;volatile
 11704                           
 11705                           ;timer.c: 88: test++;
 11706  00278C  0E01               	movlw	1
 11707  00278E  0101               	movlb	1	; () banked
 11708  002790  27BD               	addwf	_test& (0+255),f,b	;volatile
 11709  002792  0E00               	movlw	0
 11710  002794  23BE               	addwfc	(_test+1)& (0+255),f,b	;volatile
 11711  002796  23BF               	addwfc	(_test+2)& (0+255),f,b	;volatile
 11712  002798  23C0               	addwfc	(_test+3)& (0+255),f,b	;volatile
 11713                           
 11714                           ; BSR set to: 1
 11715                           ;timer.c: 89: if (operating) operatingTime += 0.1;
 11716  00279A  504D               	movf	_operating,w,c
 11717  00279C  B4D8               	btfsc	status,2,c
 11718  00279E  D014               	goto	i2l589
 11719                           
 11720                           ; BSR set to: 1
 11721  0027A0  C052  F009         	movff	timer@operatingTime,i2___ftadd@f1	;volatile
 11722  0027A4  C053  F00A         	movff	timer@operatingTime+1,i2___ftadd@f1+1	;volatile
 11723  0027A8  C054  F00B         	movff	timer@operatingTime+2,i2___ftadd@f1+2	;volatile
 11724  0027AC  0ECD               	movlw	205
 11725  0027AE  6E0C               	movwf	i2___ftadd@f2,c
 11726  0027B0  0ECC               	movlw	204
 11727  0027B2  6E0D               	movwf	i2___ftadd@f2+1,c
 11728  0027B4  0E3D               	movlw	61
 11729  0027B6  6E0E               	movwf	i2___ftadd@f2+2,c
 11730  0027B8  EC66  F00F         	call	i2___ftadd	;wreg free
 11731  0027BC  C009  F052         	movff	?i2___ftadd,timer@operatingTime	;volatile
 11732  0027C0  C00A  F053         	movff	?i2___ftadd+1,timer@operatingTime+1	;volatile
 11733  0027C4  C00B  F054         	movff	?i2___ftadd+2,timer@operatingTime+2	;volatile
 11734  0027C8                     i2l589:
 11735                           
 11736                           ;timer.c: 90: TMR0H = 0xF2;
 11737  0027C8  0EF2               	movlw	242
 11738  0027CA  6ED7               	movwf	4055,c	;volatile
 11739                           
 11740                           ;timer.c: 91: TMR0L = 0xC0;
 11741  0027CC  0EC0               	movlw	192
 11742  0027CE  6ED6               	movwf	4054,c	;volatile
 11743  0027D0  0012               	return		;funcret
 11744  0027D2                     __end_of_tmr0_ISR:
 11745                           	opt stack 0
 11746                           tosu	equ	0xFFF
 11747                           tosh	equ	0xFFE
 11748                           tosl	equ	0xFFD
 11749                           pclatu	equ	0xFFB
 11750                           pclath	equ	0xFFA
 11751                           tblptru	equ	0xFF8
 11752                           tblptrh	equ	0xFF7
 11753                           tblptrl	equ	0xFF6
 11754                           tablat	equ	0xFF5
 11755                           prodh	equ	0xFF4
 11756                           prodl	equ	0xFF3
 11757                           intcon	equ	0xFF2
 11758                           indf0	equ	0xFEF
 11759                           postinc0	equ	0xFEE
 11760                           fsr0h	equ	0xFEA
 11761                           fsr0l	equ	0xFE9
 11762                           wreg	equ	0xFE8
 11763                           postdec1	equ	0xFE5
 11764                           plusw1	equ	0xFE3
 11765                           fsr1h	equ	0xFE2
 11766                           fsr1l	equ	0xFE1
 11767                           indf2	equ	0xFDF
 11768                           postinc2	equ	0xFDE
 11769                           postdec2	equ	0xFDD
 11770                           plusw2	equ	0xFDB
 11771                           fsr2h	equ	0xFDA
 11772                           fsr2l	equ	0xFD9
 11773                           status	equ	0xFD8
 11774                           
 11775 ;; *************** function i2___ftadd *****************
 11776 ;; Defined at:
 11777 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 11778 ;; Parameters:    Size  Location     Type
 11779 ;;  f1              3    8[COMRAM] float 
 11780 ;;  f2              3   11[COMRAM] float 
 11781 ;; Auto vars:     Size  Location     Type
 11782 ;;  __ftadd         1   19[COMRAM] unsigned char 
 11783 ;;  __ftadd         1   18[COMRAM] unsigned char 
 11784 ;;  __ftadd         1   17[COMRAM] unsigned char 
 11785 ;; Return value:  Size  Location     Type
 11786 ;;                  3    8[COMRAM] float 
 11787 ;; Registers used:
 11788 ;;		wreg, status,2, status,0, cstack
 11789 ;; Tracked objects:
 11790 ;;		On entry : 0/0
 11791 ;;		On exit  : 0/0
 11792 ;;		Unchanged: 0/0
 11793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11794 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11795 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11796 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11797 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11798 ;;Total ram usage:       12 bytes
 11799 ;; Hardware stack levels used:    1
 11800 ;; Hardware stack levels required when called:    1
 11801 ;; This function calls:
 11802 ;;		i2___ftpack
 11803 ;; This function is called by:
 11804 ;;		_tmr0_ISR
 11805 ;; This function uses a non-reentrant model
 11806 ;;
 11807                           
 11808                           	psect	text44
 11809  001ECC                     __ptext44:
 11810                           	opt stack 0
 11811  001ECC                     i2___ftadd:
 11812                           	opt stack 21
 11813                           
 11814                           ;incstack = 0
 11815  001ECC  C00B  F00F         	movff	i2___ftadd@f1+2,??i2___ftadd
 11816  001ED0  6A10               	clrf	(??i2___ftadd+1)& (0+255),c
 11817  001ED2  6A11               	clrf	(??i2___ftadd+2)& (0+255),c
 11818  001ED4  340A               	rlcf	i2___ftadd@f1+1,w,c
 11819  001ED6  360F               	rlcf	??i2___ftadd& (0+255),f,c
 11820  001ED8  E301               	bnc	u439_41
 11821  001EDA  8010               	bsf	(??i2___ftadd+1)& (0+255),0,c
 11822  001EDC                     u439_41:
 11823  001EDC  500F               	movf	??i2___ftadd,w,c
 11824  001EDE  6E14               	movwf	i2___ftadd@exp1,c
 11825  001EE0  C00E  F00F         	movff	i2___ftadd@f2+2,??i2___ftadd
 11826  001EE4  6A10               	clrf	(??i2___ftadd+1)& (0+255),c
 11827  001EE6  6A11               	clrf	(??i2___ftadd+2)& (0+255),c
 11828  001EE8  340D               	rlcf	i2___ftadd@f2+1,w,c
 11829  001EEA  360F               	rlcf	??i2___ftadd& (0+255),f,c
 11830  001EEC  E301               	bnc	u440_41
 11831  001EEE  8010               	bsf	(??i2___ftadd+1)& (0+255),0,c
 11832  001EF0                     u440_41:
 11833  001EF0  500F               	movf	??i2___ftadd,w,c
 11834  001EF2  6E13               	movwf	i2___ftadd@exp2,c
 11835  001EF4  5014               	movf	i2___ftadd@exp1,w,c
 11836  001EF6  B4D8               	btfsc	status,2,c
 11837  001EF8  D00B               	goto	i2u443_40
 11838  001EFA  5013               	movf	i2___ftadd@exp2,w,c
 11839  001EFC  5C14               	subwf	i2___ftadd@exp1,w,c
 11840  001EFE  B0D8               	btfsc	status,0,c
 11841  001F00  D00E               	goto	i2l935
 11842  001F02  5014               	movf	i2___ftadd@exp1,w,c
 11843  001F04  0800               	sublw	0
 11844  001F06  2413               	addwf	i2___ftadd@exp2,w,c
 11845  001F08  6E0F               	movwf	??i2___ftadd& (0+255),c
 11846  001F0A  0E18               	movlw	24
 11847  001F0C  640F               	cpfsgt	??i2___ftadd,c
 11848  001F0E  D007               	goto	i2l935
 11849  001F10                     i2u443_40:
 11850  001F10  C00C  F009         	movff	i2___ftadd@f2,?i2___ftadd
 11851  001F14  C00D  F00A         	movff	i2___ftadd@f2+1,?i2___ftadd+1
 11852  001F18  C00E  F00B         	movff	i2___ftadd@f2+2,?i2___ftadd+2
 11853  001F1C  0012               	return	
 11854  001F1E                     i2l935:
 11855  001F1E  5013               	movf	i2___ftadd@exp2,w,c
 11856  001F20  B4D8               	btfsc	status,2,c
 11857  001F22  D00B               	goto	i2u446_40
 11858  001F24  5014               	movf	i2___ftadd@exp1,w,c
 11859  001F26  5C13               	subwf	i2___ftadd@exp2,w,c
 11860  001F28  B0D8               	btfsc	status,0,c
 11861  001F2A  D00E               	goto	i2l939
 11862  001F2C  5013               	movf	i2___ftadd@exp2,w,c
 11863  001F2E  0800               	sublw	0
 11864  001F30  2414               	addwf	i2___ftadd@exp1,w,c
 11865  001F32  6E0F               	movwf	??i2___ftadd& (0+255),c
 11866  001F34  0E18               	movlw	24
 11867  001F36  640F               	cpfsgt	??i2___ftadd,c
 11868  001F38  D007               	goto	i2l939
 11869  001F3A                     i2u446_40:
 11870  001F3A  C009  F009         	movff	i2___ftadd@f1,?i2___ftadd
 11871  001F3E  C00A  F00A         	movff	i2___ftadd@f1+1,?i2___ftadd+1
 11872  001F42  C00B  F00B         	movff	i2___ftadd@f1+2,?i2___ftadd+2
 11873  001F46  0012               	return	
 11874  001F48                     i2l939:
 11875  001F48  0E06               	movlw	6
 11876  001F4A  6E12               	movwf	i2___ftadd@sign,c
 11877  001F4C  BE0B               	btfsc	i2___ftadd@f1+2,7,c
 11878  001F4E  8E12               	bsf	i2___ftadd@sign,7,c
 11879  001F50  BE0E               	btfsc	i2___ftadd@f2+2,7,c
 11880  001F52  8C12               	bsf	i2___ftadd@sign,6,c
 11881  001F54  8E0A               	bsf	i2___ftadd@f1+1,7,c
 11882  001F56  0EFF               	movlw	255
 11883  001F58  1609               	andwf	i2___ftadd@f1,f,c
 11884  001F5A  0EFF               	movlw	255
 11885  001F5C  160A               	andwf	i2___ftadd@f1+1,f,c
 11886  001F5E  0E00               	movlw	0
 11887  001F60  160B               	andwf	i2___ftadd@f1+2,f,c
 11888  001F62  8E0D               	bsf	i2___ftadd@f2+1,7,c
 11889  001F64  0EFF               	movlw	255
 11890  001F66  160C               	andwf	i2___ftadd@f2,f,c
 11891  001F68  0EFF               	movlw	255
 11892  001F6A  160D               	andwf	i2___ftadd@f2+1,f,c
 11893  001F6C  0E00               	movlw	0
 11894  001F6E  160E               	andwf	i2___ftadd@f2+2,f,c
 11895  001F70  5013               	movf	i2___ftadd@exp2,w,c
 11896  001F72  5C14               	subwf	i2___ftadd@exp1,w,c
 11897  001F74  B0D8               	btfsc	status,0,c
 11898  001F76  D01B               	goto	i2l944
 11899  001F78                     i2u449_40:
 11900  001F78  90D8               	bcf	status,0,c
 11901  001F7A  360C               	rlcf	i2___ftadd@f2,f,c
 11902  001F7C  360D               	rlcf	i2___ftadd@f2+1,f,c
 11903  001F7E  360E               	rlcf	i2___ftadd@f2+2,f,c
 11904  001F80  0613               	decf	i2___ftadd@exp2,f,c
 11905  001F82  5014               	movf	i2___ftadd@exp1,w,c
 11906  001F84  1813               	xorwf	i2___ftadd@exp2,w,c
 11907  001F86  B4D8               	btfsc	status,2,c
 11908  001F88  D00D               	goto	i2l949
 11909  001F8A  0612               	decf	i2___ftadd@sign,f,c
 11910  001F8C  C012  F00F         	movff	i2___ftadd@sign,??i2___ftadd
 11911  001F90  0E07               	movlw	7
 11912  001F92  160F               	andwf	??i2___ftadd,f,c
 11913  001F94  B4D8               	btfsc	status,2,c
 11914  001F96  D006               	goto	i2l949
 11915  001F98  D7EF               	goto	i2u449_40
 11916  001F9A  90D8               	bcf	status,0,c
 11917  001F9C  320B               	rrcf	i2___ftadd@f1+2,f,c
 11918  001F9E  320A               	rrcf	i2___ftadd@f1+1,f,c
 11919  001FA0  3209               	rrcf	i2___ftadd@f1,f,c
 11920  001FA2  2A14               	incf	i2___ftadd@exp1,f,c
 11921  001FA4                     i2l949:
 11922  001FA4  5013               	movf	i2___ftadd@exp2,w,c
 11923  001FA6  1814               	xorwf	i2___ftadd@exp1,w,c
 11924  001FA8  B4D8               	btfsc	status,2,c
 11925  001FAA  D01F               	goto	i2u456_40
 11926  001FAC  D7F6               	goto	i2l950
 11927  001FAE                     i2l944:
 11928  001FAE  5014               	movf	i2___ftadd@exp1,w,c
 11929  001FB0  5C13               	subwf	i2___ftadd@exp2,w,c
 11930  001FB2  B0D8               	btfsc	status,0,c
 11931  001FB4  D01A               	goto	i2u456_40
 11932  001FB6                     i2u453_40:
 11933  001FB6  90D8               	bcf	status,0,c
 11934  001FB8  3609               	rlcf	i2___ftadd@f1,f,c
 11935  001FBA  360A               	rlcf	i2___ftadd@f1+1,f,c
 11936  001FBC  360B               	rlcf	i2___ftadd@f1+2,f,c
 11937  001FBE  0614               	decf	i2___ftadd@exp1,f,c
 11938  001FC0  5014               	movf	i2___ftadd@exp1,w,c
 11939  001FC2  1813               	xorwf	i2___ftadd@exp2,w,c
 11940  001FC4  B4D8               	btfsc	status,2,c
 11941  001FC6  D00D               	goto	i2l958
 11942  001FC8  0612               	decf	i2___ftadd@sign,f,c
 11943  001FCA  C012  F00F         	movff	i2___ftadd@sign,??i2___ftadd
 11944  001FCE  0E07               	movlw	7
 11945  001FD0  160F               	andwf	??i2___ftadd,f,c
 11946  001FD2  B4D8               	btfsc	status,2,c
 11947  001FD4  D006               	goto	i2l958
 11948  001FD6  D7EF               	goto	i2u453_40
 11949  001FD8  90D8               	bcf	status,0,c
 11950  001FDA  320E               	rrcf	i2___ftadd@f2+2,f,c
 11951  001FDC  320D               	rrcf	i2___ftadd@f2+1,f,c
 11952  001FDE  320C               	rrcf	i2___ftadd@f2,f,c
 11953  001FE0  2A13               	incf	i2___ftadd@exp2,f,c
 11954  001FE2                     i2l958:
 11955  001FE2  5013               	movf	i2___ftadd@exp2,w,c
 11956  001FE4  1814               	xorwf	i2___ftadd@exp1,w,c
 11957  001FE6  A4D8               	btfss	status,2,c
 11958  001FE8  D7F7               	goto	i2l959
 11959  001FEA                     i2u456_40:
 11960  001FEA  AE12               	btfss	i2___ftadd@sign,7,c
 11961  001FEC  D00C               	goto	i2l961
 11962  001FEE  0EFF               	movlw	255
 11963  001FF0  1A09               	xorwf	i2___ftadd@f1,f,c
 11964  001FF2  0EFF               	movlw	255
 11965  001FF4  1A0A               	xorwf	i2___ftadd@f1+1,f,c
 11966  001FF6  0EFF               	movlw	255
 11967  001FF8  1A0B               	xorwf	i2___ftadd@f1+2,f,c
 11968  001FFA  0E01               	movlw	1
 11969  001FFC  2609               	addwf	i2___ftadd@f1,f,c
 11970  001FFE  0E00               	movlw	0
 11971  002000  220A               	addwfc	i2___ftadd@f1+1,f,c
 11972  002002  0E00               	movlw	0
 11973  002004  220B               	addwfc	i2___ftadd@f1+2,f,c
 11974  002006                     i2l961:
 11975  002006  AC12               	btfss	i2___ftadd@sign,6,c
 11976  002008  D00C               	goto	i2l962
 11977  00200A  0EFF               	movlw	255
 11978  00200C  1A0C               	xorwf	i2___ftadd@f2,f,c
 11979  00200E  0EFF               	movlw	255
 11980  002010  1A0D               	xorwf	i2___ftadd@f2+1,f,c
 11981  002012  0EFF               	movlw	255
 11982  002014  1A0E               	xorwf	i2___ftadd@f2+2,f,c
 11983  002016  0E01               	movlw	1
 11984  002018  260C               	addwf	i2___ftadd@f2,f,c
 11985  00201A  0E00               	movlw	0
 11986  00201C  220D               	addwfc	i2___ftadd@f2+1,f,c
 11987  00201E  0E00               	movlw	0
 11988  002020  220E               	addwfc	i2___ftadd@f2+2,f,c
 11989  002022                     i2l962:
 11990  002022  0E00               	movlw	0
 11991  002024  6E12               	movwf	i2___ftadd@sign,c
 11992  002026  5009               	movf	i2___ftadd@f1,w,c
 11993  002028  260C               	addwf	i2___ftadd@f2,f,c
 11994  00202A  500A               	movf	i2___ftadd@f1+1,w,c
 11995  00202C  220D               	addwfc	i2___ftadd@f2+1,f,c
 11996  00202E  500B               	movf	i2___ftadd@f1+2,w,c
 11997  002030  220E               	addwfc	i2___ftadd@f2+2,f,c
 11998  002032  AE0E               	btfss	i2___ftadd@f2+2,7,c
 11999  002034  D00E               	goto	i2l963
 12000  002036  0EFF               	movlw	255
 12001  002038  1A0C               	xorwf	i2___ftadd@f2,f,c
 12002  00203A  0EFF               	movlw	255
 12003  00203C  1A0D               	xorwf	i2___ftadd@f2+1,f,c
 12004  00203E  0EFF               	movlw	255
 12005  002040  1A0E               	xorwf	i2___ftadd@f2+2,f,c
 12006  002042  0E01               	movlw	1
 12007  002044  260C               	addwf	i2___ftadd@f2,f,c
 12008  002046  0E00               	movlw	0
 12009  002048  220D               	addwfc	i2___ftadd@f2+1,f,c
 12010  00204A  0E00               	movlw	0
 12011  00204C  220E               	addwfc	i2___ftadd@f2+2,f,c
 12012  00204E  0E01               	movlw	1
 12013  002050  6E12               	movwf	i2___ftadd@sign,c
 12014  002052                     i2l963:
 12015  002052  C00C  F001         	movff	i2___ftadd@f2,i2___ftpack@arg
 12016  002056  C00D  F002         	movff	i2___ftadd@f2+1,i2___ftpack@arg+1
 12017  00205A  C00E  F003         	movff	i2___ftadd@f2+2,i2___ftpack@arg+2
 12018  00205E  C014  F004         	movff	i2___ftadd@exp1,i2___ftpack@exp
 12019  002062  C012  F005         	movff	i2___ftadd@sign,i2___ftpack@sign
 12020  002066  ECEF  F010         	call	i2___ftpack	;wreg free
 12021  00206A  C001  F009         	movff	?i2___ftpack,?i2___ftadd
 12022  00206E  C002  F00A         	movff	?i2___ftpack+1,?i2___ftadd+1
 12023  002072  C003  F00B         	movff	?i2___ftpack+2,?i2___ftadd+2
 12024  002076  0012               	return	
 12025  002078                     __end_ofi2___ftadd:
 12026                           	opt stack 0
 12027                           tosu	equ	0xFFF
 12028                           tosh	equ	0xFFE
 12029                           tosl	equ	0xFFD
 12030                           pclatu	equ	0xFFB
 12031                           pclath	equ	0xFFA
 12032                           tblptru	equ	0xFF8
 12033                           tblptrh	equ	0xFF7
 12034                           tblptrl	equ	0xFF6
 12035                           tablat	equ	0xFF5
 12036                           prodh	equ	0xFF4
 12037                           prodl	equ	0xFF3
 12038                           intcon	equ	0xFF2
 12039                           indf0	equ	0xFEF
 12040                           postinc0	equ	0xFEE
 12041                           fsr0h	equ	0xFEA
 12042                           fsr0l	equ	0xFE9
 12043                           wreg	equ	0xFE8
 12044                           postdec1	equ	0xFE5
 12045                           plusw1	equ	0xFE3
 12046                           fsr1h	equ	0xFE2
 12047                           fsr1l	equ	0xFE1
 12048                           indf2	equ	0xFDF
 12049                           postinc2	equ	0xFDE
 12050                           postdec2	equ	0xFDD
 12051                           plusw2	equ	0xFDB
 12052                           fsr2h	equ	0xFDA
 12053                           fsr2l	equ	0xFD9
 12054                           status	equ	0xFD8
 12055                           
 12056 ;; *************** function i2___ftpack *****************
 12057 ;; Defined at:
 12058 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 12059 ;; Parameters:    Size  Location     Type
 12060 ;;  arg             3    0[COMRAM] unsigned um
 12061 ;;  exp             1    3[COMRAM] unsigned char 
 12062 ;;  sign            1    4[COMRAM] unsigned char 
 12063 ;; Auto vars:     Size  Location     Type
 12064 ;;		None
 12065 ;; Return value:  Size  Location     Type
 12066 ;;                  3    0[COMRAM] float 
 12067 ;; Registers used:
 12068 ;;		wreg, status,2, status,0
 12069 ;; Tracked objects:
 12070 ;;		On entry : 0/0
 12071 ;;		On exit  : 0/0
 12072 ;;		Unchanged: 0/0
 12073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12074 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12075 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12076 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12077 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12078 ;;Total ram usage:        8 bytes
 12079 ;; Hardware stack levels used:    1
 12080 ;; This function calls:
 12081 ;;		Nothing
 12082 ;; This function is called by:
 12083 ;;		i2___ftadd
 12084 ;; This function uses a non-reentrant model
 12085 ;;
 12086                           
 12087                           	psect	text45
 12088  0021DE                     __ptext45:
 12089                           	opt stack 0
 12090  0021DE                     i2___ftpack:
 12091                           	opt stack 21
 12092                           
 12093                           ;incstack = 0
 12094  0021DE  5004               	movf	i2___ftpack@exp,w,c
 12095  0021E0  B4D8               	btfsc	status,2,c
 12096  0021E2  D005               	goto	i2u367_40
 12097  0021E4  5001               	movf	i2___ftpack@arg,w,c
 12098  0021E6  1002               	iorwf	i2___ftpack@arg+1,w,c
 12099  0021E8  1003               	iorwf	i2___ftpack@arg+2,w,c
 12100  0021EA  A4D8               	btfss	status,2,c
 12101  0021EC  D00C               	goto	i2l904
 12102  0021EE                     i2u367_40:
 12103  0021EE  0E00               	movlw	0
 12104  0021F0  6E01               	movwf	?i2___ftpack,c
 12105  0021F2  0E00               	movlw	0
 12106  0021F4  6E02               	movwf	?i2___ftpack+1,c
 12107  0021F6  0E00               	movlw	0
 12108  0021F8  6E03               	movwf	?i2___ftpack+2,c
 12109  0021FA  0012               	return	
 12110  0021FC  2A04               	incf	i2___ftpack@exp,f,c
 12111  0021FE  90D8               	bcf	status,0,c
 12112  002200  3203               	rrcf	i2___ftpack@arg+2,f,c
 12113  002202  3202               	rrcf	i2___ftpack@arg+1,f,c
 12114  002204  3201               	rrcf	i2___ftpack@arg,f,c
 12115  002206                     i2l904:
 12116  002206  0E00               	movlw	0
 12117  002208  1401               	andwf	i2___ftpack@arg,w,c
 12118  00220A  6E06               	movwf	??i2___ftpack& (0+255),c
 12119  00220C  0E00               	movlw	0
 12120  00220E  1402               	andwf	i2___ftpack@arg+1,w,c
 12121  002210  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 12122  002212  0EFE               	movlw	254
 12123  002214  1403               	andwf	i2___ftpack@arg+2,w,c
 12124  002216  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 12125  002218  5006               	movf	??i2___ftpack,w,c
 12126  00221A  1007               	iorwf	??i2___ftpack+1,w,c
 12127  00221C  1008               	iorwf	??i2___ftpack+2,w,c
 12128  00221E  B4D8               	btfsc	status,2,c
 12129  002220  D00C               	goto	i2l907
 12130  002222  D7EC               	goto	i2l905
 12131  002224  2A04               	incf	i2___ftpack@exp,f,c
 12132  002226  0E01               	movlw	1
 12133  002228  2601               	addwf	i2___ftpack@arg,f,c
 12134  00222A  0E00               	movlw	0
 12135  00222C  2202               	addwfc	i2___ftpack@arg+1,f,c
 12136  00222E  0E00               	movlw	0
 12137  002230  2203               	addwfc	i2___ftpack@arg+2,f,c
 12138  002232  90D8               	bcf	status,0,c
 12139  002234  3203               	rrcf	i2___ftpack@arg+2,f,c
 12140  002236  3202               	rrcf	i2___ftpack@arg+1,f,c
 12141  002238  3201               	rrcf	i2___ftpack@arg,f,c
 12142  00223A                     i2l907:
 12143  00223A  0E00               	movlw	0
 12144  00223C  1401               	andwf	i2___ftpack@arg,w,c
 12145  00223E  6E06               	movwf	??i2___ftpack& (0+255),c
 12146  002240  0E00               	movlw	0
 12147  002242  1402               	andwf	i2___ftpack@arg+1,w,c
 12148  002244  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 12149  002246  0EFF               	movlw	255
 12150  002248  1403               	andwf	i2___ftpack@arg+2,w,c
 12151  00224A  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 12152  00224C  5006               	movf	??i2___ftpack,w,c
 12153  00224E  1007               	iorwf	??i2___ftpack+1,w,c
 12154  002250  1008               	iorwf	??i2___ftpack+2,w,c
 12155  002252  B4D8               	btfsc	status,2,c
 12156  002254  D006               	goto	i2l910
 12157  002256  D7E6               	goto	i2l908
 12158  002258  0604               	decf	i2___ftpack@exp,f,c
 12159  00225A  90D8               	bcf	status,0,c
 12160  00225C  3601               	rlcf	i2___ftpack@arg,f,c
 12161  00225E  3602               	rlcf	i2___ftpack@arg+1,f,c
 12162  002260  3603               	rlcf	i2___ftpack@arg+2,f,c
 12163  002262                     i2l910:
 12164  002262  BE02               	btfsc	i2___ftpack@arg+1,7,c
 12165  002264  D003               	goto	i2u371_40
 12166  002266  0E02               	movlw	2
 12167  002268  6004               	cpfslt	i2___ftpack@exp,c
 12168  00226A  D7F6               	goto	i2l911
 12169  00226C                     i2u371_40:
 12170  00226C  A004               	btfss	i2___ftpack@exp,0,c
 12171  00226E  9E02               	bcf	i2___ftpack@arg+1,7,c
 12172  002270  90D8               	bcf	status,0,c
 12173  002272  3204               	rrcf	i2___ftpack@exp,f,c
 12174  002274  5004               	movf	i2___ftpack@exp,w,c
 12175  002276  1203               	iorwf	i2___ftpack@arg+2,f,c
 12176  002278  5005               	movf	i2___ftpack@sign,w,c
 12177  00227A  A4D8               	btfss	status,2,c
 12178  00227C  8E03               	bsf	i2___ftpack@arg+2,7,c
 12179  00227E  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 12180  002282  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 12181  002286  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 12182  00228A  0012               	return	
 12183  00228C                     __end_ofi2___ftpack:
 12184                           	opt stack 0
 12185                           tosu	equ	0xFFF
 12186                           tosh	equ	0xFFE
 12187                           tosl	equ	0xFFD
 12188                           pclatu	equ	0xFFB
 12189                           pclath	equ	0xFFA
 12190                           tblptru	equ	0xFF8
 12191                           tblptrh	equ	0xFF7
 12192                           tblptrl	equ	0xFF6
 12193                           tablat	equ	0xFF5
 12194                           prodh	equ	0xFF4
 12195                           prodl	equ	0xFF3
 12196                           intcon	equ	0xFF2
 12197                           indf0	equ	0xFEF
 12198                           postinc0	equ	0xFEE
 12199                           fsr0h	equ	0xFEA
 12200                           fsr0l	equ	0xFE9
 12201                           wreg	equ	0xFE8
 12202                           postdec1	equ	0xFE5
 12203                           plusw1	equ	0xFE3
 12204                           fsr1h	equ	0xFE2
 12205                           fsr1l	equ	0xFE1
 12206                           indf2	equ	0xFDF
 12207                           postinc2	equ	0xFDE
 12208                           postdec2	equ	0xFDD
 12209                           plusw2	equ	0xFDB
 12210                           fsr2h	equ	0xFDA
 12211                           fsr2l	equ	0xFD9
 12212                           status	equ	0xFD8
 12213                           tosu	equ	0xFFF
 12214                           tosh	equ	0xFFE
 12215                           tosl	equ	0xFFD
 12216                           pclatu	equ	0xFFB
 12217                           pclath	equ	0xFFA
 12218                           tblptru	equ	0xFF8
 12219                           tblptrh	equ	0xFF7
 12220                           tblptrl	equ	0xFF6
 12221                           tablat	equ	0xFF5
 12222                           prodh	equ	0xFF4
 12223                           prodl	equ	0xFF3
 12224                           intcon	equ	0xFF2
 12225                           indf0	equ	0xFEF
 12226                           postinc0	equ	0xFEE
 12227                           fsr0h	equ	0xFEA
 12228                           fsr0l	equ	0xFE9
 12229                           wreg	equ	0xFE8
 12230                           postdec1	equ	0xFE5
 12231                           plusw1	equ	0xFE3
 12232                           fsr1h	equ	0xFE2
 12233                           fsr1l	equ	0xFE1
 12234                           indf2	equ	0xFDF
 12235                           postinc2	equ	0xFDE
 12236                           postdec2	equ	0xFDD
 12237                           plusw2	equ	0xFDB
 12238                           fsr2h	equ	0xFDA
 12239                           fsr2l	equ	0xFD9
 12240                           status	equ	0xFD8
 12241                           
 12242                           	psect	text46
 12243  000000                     __ptext46:
 12244                           	opt stack 0
 12245                           tosu	equ	0xFFF
 12246                           tosh	equ	0xFFE
 12247                           tosl	equ	0xFFD
 12248                           pclatu	equ	0xFFB
 12249                           pclath	equ	0xFFA
 12250                           tblptru	equ	0xFF8
 12251                           tblptrh	equ	0xFF7
 12252                           tblptrl	equ	0xFF6
 12253                           tablat	equ	0xFF5
 12254                           prodh	equ	0xFF4
 12255                           prodl	equ	0xFF3
 12256                           intcon	equ	0xFF2
 12257                           indf0	equ	0xFEF
 12258                           postinc0	equ	0xFEE
 12259                           fsr0h	equ	0xFEA
 12260                           fsr0l	equ	0xFE9
 12261                           wreg	equ	0xFE8
 12262                           postdec1	equ	0xFE5
 12263                           plusw1	equ	0xFE3
 12264                           fsr1h	equ	0xFE2
 12265                           fsr1l	equ	0xFE1
 12266                           indf2	equ	0xFDF
 12267                           postinc2	equ	0xFDE
 12268                           postdec2	equ	0xFDD
 12269                           plusw2	equ	0xFDB
 12270                           fsr2h	equ	0xFDA
 12271                           fsr2l	equ	0xFD9
 12272                           status	equ	0xFD8
 12273                           
 12274                           	psect	rparam
 12275  0000                     tosu	equ	0xFFF
 12276                           tosh	equ	0xFFE
 12277                           tosl	equ	0xFFD
 12278                           pclatu	equ	0xFFB
 12279                           pclath	equ	0xFFA
 12280                           tblptru	equ	0xFF8
 12281                           tblptrh	equ	0xFF7
 12282                           tblptrl	equ	0xFF6
 12283                           tablat	equ	0xFF5
 12284                           prodh	equ	0xFF4
 12285                           prodl	equ	0xFF3
 12286                           intcon	equ	0xFF2
 12287                           indf0	equ	0xFEF
 12288                           postinc0	equ	0xFEE
 12289                           fsr0h	equ	0xFEA
 12290                           fsr0l	equ	0xFE9
 12291                           wreg	equ	0xFE8
 12292                           postdec1	equ	0xFE5
 12293                           plusw1	equ	0xFE3
 12294                           fsr1h	equ	0xFE2
 12295                           fsr1l	equ	0xFE1
 12296                           indf2	equ	0xFDF
 12297                           postinc2	equ	0xFDE
 12298                           postdec2	equ	0xFDD
 12299                           plusw2	equ	0xFDB
 12300                           fsr2h	equ	0xFDA
 12301                           fsr2l	equ	0xFD9
 12302                           status	equ	0xFD8
 12303                           
 12304                           	psect	temp
 12305  000059                     btemp:
 12306                           	opt stack 0
 12307  000059                     	ds	1
 12308  0000                     int$flags	set	btemp
 12309  0000                     wtemp6	set	btemp+1
 12310                           tosu	equ	0xFFF
 12311                           tosh	equ	0xFFE
 12312                           tosl	equ	0xFFD
 12313                           pclatu	equ	0xFFB
 12314                           pclath	equ	0xFFA
 12315                           tblptru	equ	0xFF8
 12316                           tblptrh	equ	0xFF7
 12317                           tblptrl	equ	0xFF6
 12318                           tablat	equ	0xFF5
 12319                           prodh	equ	0xFF4
 12320                           prodl	equ	0xFF3
 12321                           intcon	equ	0xFF2
 12322                           indf0	equ	0xFEF
 12323                           postinc0	equ	0xFEE
 12324                           fsr0h	equ	0xFEA
 12325                           fsr0l	equ	0xFE9
 12326                           wreg	equ	0xFE8
 12327                           postdec1	equ	0xFE5
 12328                           plusw1	equ	0xFE3
 12329                           fsr1h	equ	0xFE2
 12330                           fsr1l	equ	0xFE1
 12331                           indf2	equ	0xFDF
 12332                           postinc2	equ	0xFDE
 12333                           postdec2	equ	0xFDD
 12334                           plusw2	equ	0xFDB
 12335                           fsr2h	equ	0xFDA
 12336                           fsr2l	equ	0xFD9
 12337                           status	equ	0xFD8


Data Sizes:
    Strings     449
    Constant    525
    Data        173
    BSS         61
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     51      88
    BANK0           128    121     121
    BANK1           256      0     197
    BANK2           256     74      74
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 132
		 -> inputEntryQuestions(CODE[132]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 32
		 -> inputEntry@fastenerString(BANK0[32]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 32
		 -> inputEntry@fastenerString(BANK0[32]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_7(CODE[22]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 32
		 -> packaging@msg2(BANK2[32]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 32
		 -> NULL(NULL[0]), packaging@msg2(BANK2[32]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_27(CODE[4]), STR_26(CODE[6]), STR_25(CODE[16]), STR_24(CODE[11]), 
		 -> STR_23(CODE[12]), STR_22(CODE[9]), STR_20(CODE[19]), STR_19(CODE[10]), 
		 -> STR_18(CODE[17]), STR_8(CODE[15]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 32
		 -> NULL(NULL[0]), packaging@msg2(BANK2[32]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_27(CODE[4]), STR_26(CODE[6]), STR_25(CODE[16]), STR_24(CODE[11]), 
		 -> STR_23(CODE[12]), STR_22(CODE[9]), STR_20(CODE[19]), STR_19(CODE[10]), 
		 -> STR_18(CODE[17]), STR_8(CODE[15]), STR_7(CODE[22]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), printf@ap(BANK0[2]), 

    _doprnt@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), NULL(NULL[0]), STR_28(CODE[7]), 
		 -> fSLookup(BANK1[105]), packaging@msg2(BANK2[32]), 

    S1248__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S1248__prbuf$ptr	PTR unsigned char  size(2) Largest target is 32
		 -> NULL(NULL[0]), packaging@msg2(BANK2[32]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 32
		 -> NULL(NULL[0]), packaging@msg2(BANK2[32]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(BANK0[4]), printf@pb(BANK0[4]), 

    RTC_getTime@time	PTR unsigned char  size(2) Largest target is 7
		 -> RTC_getSeconds@time(BANK0[7]), 

    I2C_Send@data	PTR unsigned char  size(2) Largest target is 3967
		 -> STR_21(CODE[21]), STR_16(CODE[14]), inputEntry@msg(BANK0[24]), STR_15(CODE[25]), 
		 -> STR_12(CODE[17]), STR_11(CODE[17]), STR_10(CODE[14]), STR_9(CODE[15]), 
		 -> packaging@msg2(BANK2[32]), packaging@msg(BANK2[34]), packaging@instr(BANK2[2]), STR_6(CODE[33]), 
		 -> RAM(DATA[3967]), STR_5(CODE[19]), STR_4(CODE[17]), STR_3(CODE[17]), 
		 -> STR_2(CODE[14]), STR_1(CODE[15]), 

    printErrorLCD@string	PTR unsigned char  size(2) Largest target is 224
		 -> errMsgs.noFasteners(CODE[32]), errMsgs.tooManySpacers(CODE[32]), errMsgs.tooManyWashers(CODE[32]), errMsgs.tooManyNuts(CODE[32]), 
		 -> errMsgs.tooManyBolts(CODE[32]), errMsgs.tooManyFasteners(CODE[32]), errMsgs.badEntry(CODE[32]), errMsgs(CODE[224]), 

    printStringLCD@string	PTR unsigned char  size(2) Largest target is 224
		 -> STR_17(CODE[30]), inputEntry@fastenerString(BANK0[32]), inputEntryQuestions(CODE[132]), STR_14(CODE[26]), 
		 -> STR_13(CODE[17]), errMsgs.noFasteners(CODE[32]), errMsgs.tooManySpacers(CODE[32]), errMsgs.tooManyWashers(CODE[32]), 
		 -> errMsgs.tooManyNuts(CODE[32]), errMsgs.tooManyBolts(CODE[32]), errMsgs.tooManyFasteners(CODE[32]), errMsgs.badEntry(CODE[32]), 
		 -> errMsgs(CODE[224]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 32
		 -> inputEntry@fastenerString(BANK0[32]), 

    packaging@set	PTR unsigned char  size(2) Largest target is 84
		 -> fastenerMatrix(CODE[84]), 


Critical Paths under _main in COMRAM

    _main->_hibernate
    _mainMenu->_clearing
    _mainMenu->_hibernate
    _viewLogs->_printStringLCD
    __doprnt->___lldiv
    ___llmod->___lldiv
    _packageCompartment->_I2C_Send
    _packageCompartment->___ftadd
    _inputEntry->_printErrorLCD
    _strcpy->___wmul
    _printErrorLCD->_printStringLCD
    _lcd_set_cursor->_lcd_shift_cursor
    _lcd_shift_cursor->_lcdInst
    _hibernate->_printStringLCD
    _printStringLCD->___wmul
    _putch->_lcdNibble
    _clearing->_I2C_Send
    _clearing->___ftadd
    ___ftge->___ftadd
    ___ftadd->___ftpack
    _I2C_Send->_I2C_Master_Write
    _RTC_startOperation->_RTC_getSeconds
    _RTC_getOperatingTime->_RTC_getSeconds
    _RTC_getSeconds->_RTC_getTime
    _RTC_getSeconds->___wmul
    _RTC_getTime->_I2C_Master_Read
    _RTC_getTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _interruptHandler in COMRAM

    _tmr0_ISR->i2___ftadd
    i2___ftadd->i2___ftpack

Critical Paths under _main in BANK0

    _main->_mainMenu
    _mainMenu->_inputEntry
    _viewLogs->_printStringLCD
    _packaging->_packageCompartment
    _sprintf->__doprnt
    _printf->__doprnt
    __doprnt->___llmod
    _packageCompartment->___ftge
    _inputEntry->_printErrorLCD
    _printErrorLCD->_printStringLCD
    _hibernate->_printStringLCD
    _clearing->___ftge
    ___ftge->___ftadd
    _RTC_startOperation->_RTC_getSeconds
    _RTC_getOperatingTime->_RTC_getSeconds

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    _mainMenu->_packaging

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   80326
                                            120 BANK0      1     1      0
                    _I2C_Master_Init
                          _hibernate
                            _initLCD
                            _lcdInst
                           _mainMenu
 ---------------------------------------------------------------------------------
 (1) _mainMenu                                            16    16      0   77188
                                            104 BANK0     16    16      0
                           _I2C_Send
               _RTC_getOperatingTime
                 _RTC_startOperation
                           _clearing
                          _hibernate
                         _inputEntry
                            _lcdInst
                          _packaging
                         _pollKeypad
                     _printStringLCD
                             _printf
                              _putch
                           _viewLogs
 ---------------------------------------------------------------------------------
 (2) _viewLogs                                             3     3      0    2026
                                             49 COMRAM     1     1      0
                                             10 BANK0      2     2      0
                         _pollKeypad
                     _printStringLCD
 ---------------------------------------------------------------------------------
 (2) _packaging                                           80    80      0   28268
                                             56 BANK0      6     6      0
                                              0 BANK2     74    74      0
                           _I2C_Send
                             ___wmul
                            _lcdInst
                 _packageCompartment
                             _printf
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             18     6     12    3568
                                             27 BANK0     18     6     12
                             ___wmul (ARG)
                            __doprnt
 ---------------------------------------------------------------------------------
 (2) _printf                                              16     6     10    4212
                                             27 BANK0     16     6     10
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) __doprnt                                             24    18      6    3098
                                              9 BANK0     18    12      6
                   Absolute function *
                            ___lldiv
                            ___llmod
                              _putch *
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     412
                                              0 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _packageCompartment                                  38    35      3   13880
                                             18 BANK0     38    35      3
                           _I2C_Send
                            ___ftadd
                             ___ftge
                       _motorControl
                                _tic
                               _tock
 ---------------------------------------------------------------------------------
 (2) _inputEntry                                          94    94      0   14192
                                             12 BANK0     92    92      0
                           _I2C_Send
                             ___wmul
                            _lcdInst
                     _lcd_set_cursor
                         _pollKeypad
                      _printErrorLCD
                     _printStringLCD
                              _putch
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _strcpy                                               6     2      4     227
                                             44 COMRAM     6     2      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _printErrorLCD                                        4     2      2    2709
                                             49 COMRAM     2     0      2
                                             10 BANK0      2     2      0
                     _printStringLCD
 ---------------------------------------------------------------------------------
 (3) _lcd_set_cursor                                       4     3      1     920
                                             44 COMRAM     4     3      1
                            _lcdInst
                   _lcd_shift_cursor
 ---------------------------------------------------------------------------------
 (4) _lcd_shift_cursor                                     3     2      1     415
                                             41 COMRAM     3     2      1
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _hibernate                                            6     6      0    2026
                                             49 COMRAM     2     2      0
                                             10 BANK0      4     4      0
                         _pollKeypad
                     _printStringLCD
 ---------------------------------------------------------------------------------
 (3) _printStringLCD                                      15    13      2    1958
                                             44 COMRAM     5     3      2
                                              0 BANK0     10    10      0
                             ___wmul (ARG)
                            _lcdInst
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     195
                                             40 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _pollKeypad                                           1     1      0      34
                                             38 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _clearing                                            17    17      0   13450
                                             49 COMRAM     2     2      0
                                             18 BANK0      9     9      0
                           _I2C_Send
                            ___ftadd
                             ___ftge
                       _motorControl
                                _tic
                               _tock
 ---------------------------------------------------------------------------------
 (4) _tock                                                 3     0      3       0
                                             38 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _tic                                                  0     0      0       0
                           _tmr0Init
 ---------------------------------------------------------------------------------
 (5) _tmr0Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _motorControl                                         2     1      1    1843
                                             38 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6    2358
                                              9 BANK0      9     3      6
                            ___ftadd (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    5878
                                             46 COMRAM     3     3      0
                                              0 BANK0      9     3      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2713
                                             38 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) _I2C_Send                                             8     6      2    2712
                                             41 COMRAM     8     6      2
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _RTC_startOperation                                   0     0      0    3759
                     _RTC_getSeconds
 ---------------------------------------------------------------------------------
 (2) _RTC_getOperatingTime                                 8     4      4    3759
                                             11 BANK0      8     4      4
                     _RTC_getSeconds
 ---------------------------------------------------------------------------------
 (3) _RTC_getSeconds                                      17    13      4    3759
                                             44 COMRAM     6     2      4
                                              0 BANK0     11    11      0
                        _RTC_getTime
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2752
                                             38 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _RTC_getTime                                          3     1      2     797
                                             41 COMRAM     3     1      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     481
                                             39 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      65
                                             39 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                             38 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             41 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (4) _lcdInst                                              1     1      0     195
                                             40 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNibble                                            2     2      0     164
                                             38 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     722
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     601
                                             38 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _interruptHandler                                    18    18      0    1253
                                             20 COMRAM    18    18      0
                           _tmr0_ISR
 ---------------------------------------------------------------------------------
 (8) _tmr0_ISR                                             0     0      0    1253
                          i2___ftadd
 ---------------------------------------------------------------------------------
 (9) i2___ftadd                                           12     6      6    1253
                                              8 COMRAM    12     6      6
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (10) i2___ftpack                                          8     3      5     309
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _hibernate
     _pollKeypad
     _printStringLCD
       ___wmul (ARG)
       _lcdInst (ARG)
         _lcdNibble
       _putch (ARG)
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _mainMenu
     _I2C_Send
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _RTC_getOperatingTime
       _RTC_getSeconds
         _RTC_getTime
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         ___wmul
     _RTC_startOperation
       _RTC_getSeconds
         _RTC_getTime
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         ___wmul
     _clearing
       _I2C_Send
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       ___ftadd
         ___ftpack
       ___ftge
         ___ftadd (ARG)
           ___ftpack
       _motorControl
       _tic
         _tmr0Init
       _tock
     _hibernate
       _pollKeypad
       _printStringLCD
         ___wmul (ARG)
         _lcdInst (ARG)
           _lcdNibble
         _putch (ARG)
           _lcdNibble
     _inputEntry
       _I2C_Send
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       ___wmul
       _lcdInst
         _lcdNibble
       _lcd_set_cursor
         _lcdInst
           _lcdNibble
         _lcd_shift_cursor
           _lcdInst
             _lcdNibble
       _pollKeypad
       _printErrorLCD
         _printStringLCD
           ___wmul (ARG)
           _lcdInst (ARG)
             _lcdNibble
           _putch (ARG)
             _lcdNibble
       _printStringLCD
         ___wmul (ARG)
         _lcdInst (ARG)
           _lcdNibble
         _putch (ARG)
           _lcdNibble
       _putch
         _lcdNibble
       _strcpy
         ___wmul (ARG)
     _lcdInst
       _lcdNibble
     _packaging
       _I2C_Send
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       ___wmul
       _lcdInst
         _lcdNibble
       _packageCompartment
         _I2C_Send
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         ___ftadd
           ___ftpack
         ___ftge
           ___ftadd (ARG)
             ___ftpack
         _motorControl
         _tic
           _tmr0Init
         _tock
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lldiv *
           ___llmod *
             ___lldiv (ARG)
           _putch *
             _lcdNibble
       _sprintf
         ___wmul (ARG)
         __doprnt (ARG)
           Absolute function(Fake) *
           ___lldiv *
           ___llmod *
             ___lldiv (ARG)
           _putch *
             _lcdNibble
     _pollKeypad
     _printStringLCD
       ___wmul (ARG)
       _lcdInst (ARG)
         _lcdNibble
       _putch (ARG)
         _lcdNibble
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lldiv *
         ___llmod *
           ___lldiv (ARG)
         _putch *
           _lcdNibble
     _putch
       _lcdNibble
     _viewLogs
       _pollKeypad
       _printStringLCD
         ___wmul (ARG)
         _lcdInst (ARG)
           _lcdNibble
         _putch (ARG)
           _lcdNibble

 _interruptHandler (ROOT)
   _tmr0_ISR
     i2___ftadd
       i2___ftpack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     4A      4A       9       28.9%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      C5       7       77.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     79      79       5       94.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     33      58       1       69.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1E0      34        0.0%
DATA                 0      0     1E0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar 13 02:04:43 2018

                            l95 1084                              l96 1108                              l97 117C  
                            l98 11F0                              l99 1264             printErrorLCD@string 0032  
           ___wmul@multiplicand 0029                     __CFG_BORV$3 000000                      i2___ftpack 21DE  
                  __CFG_CP0$OFF 000000                     _RTC_getTime 26F2                    __CFG_CP1$OFF 000000  
                  __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000                    ___ftadd@exp1 0088  
                  ___ftadd@exp2 0087                    ___ftadd@sign 0086                             l100 1294  
                           l101 12C2                             l102 12F0                             l103 131E  
                           l112 17A0                             l122 076A                             l123 07EA  
                           l132 099A                             l124 080C                             l133 0A1A  
                           l117 1A46                             l134 0A3C                             l127 0882  
                           l128 0902                             l137 0AB2                             l129 0924  
                           l321 2AFC                             l401 1472                             l138 0B32  
                           l314 2A28                             l139 0B54                             l235 2A02  
                           l331 0080                             l403 1540                             l236 29FA  
                           l340 0696                             l332 011E                             l404 155A  
                           l333 0110                             l350 027E                             l336 06F8  
                           l352 028C                             l344 01CC                             l337 0174  
                           l370 0470                             l354 029A                             l346 0240  
                           l363 02EE                             l347 02AC                             l620 207C  
                           l452 1B34                             l356 02A6                             l621 2088  
                           l453 1B7A                             l381 05D0                             l373 0482  
                           l518 272E                             l630 20BA                             l462 1D0C  
                           l454 1BC8                             l390 06C0                             l366 0322  
                           l358 02DE                             l623 2094                             l455 1BF6  
                           l463 1D1C                             l383 0602                             l375 04F6  
                           l640 20FA                             l368 0442                             l633 20C8  
                           l473 2ACE                             l449 1AC2                             l385 0634  
                           l377 056E                             l369 0466                             l642 2106  
                           l634 20D4                             l619 2114                             l627 20A2  
                           l459 1CD8                             l387 0666                             l379 059E  
                           l395 139C                             l636 20E0                             l628 20AE  
                           l388 068A                             l396 13BC                             l397 13F8  
                           l478 24BC                             l910 21B4                             l670 0CC4  
                           l662 0C1C                             l654 0B9E                             l479 247E  
                           l911 21AA                             l639 20EE                             l671 0D14  
                           l655 0C14                             l399 16FE                             l904 2158  
                           l656 0BE8                             l905 214E                             l681 0E86  
                           l665 0D76                             l682 0EB0                             l674 0DAE  
                           l666 0C20                             l907 218C                             l675 0DE0  
                           l659 0D3E                             l908 2176                             l684 0EBE  
                           l676 0DF8                             l685 0F7E                             l669 0C5A  
                           l950 1DEE                             l686 0FA8                             l935 1D72  
                           l944 1E02                             l961 1E5A                             l962 1E76  
                           l963 1EA6                             l939 1D9C                             l949 1DF8  
                           l958 1E36                             l959 1E2C                             l976 2404  
                           l977 2434                    __CFG_CPB$OFF 000000                    __CFG_CPD$OFF 000000  
                           _tic 2C02                             prod 000FF3                             tosl 000FFD  
                           wreg 000FE8                 ?_lcd_set_cursor 002D                    __CFG_LVP$OFF 000000  
                  __CFG_WDT$OFF 000000                            l1040 25A6                            l1041 259A  
                          l1050 27F2                            l1051 27E6                            l1044 25DA  
                          l1045 25E8                            l1054 281A                            l1055 2828  
                          l1253 2AA2                            l1254 2A9A                            l5115 0110  
                          l5029 0A58                            l5213 0442                            l5217 0450  
                          l5059 0B70                            l4197 2460                            l4517 1CD8  
                          l4445 2BAE                            l4527 2726                            l5249 04E6  
                          l4617 0EBE                            l5417 15FC                            l5267 059E  
                          l5259 053C                            l5195 02FE                            l4901 17A0  
                          l4495 1BD8                            l5295 06D4                            l4593 0DFC  
                          l5399 154A                            l4969 0828                            ?_tic 0001  
                          l4999 0940                            STR_1 FF77                            STR_2 FFB2  
                          STR_3 FF23                            STR_4 FF34                            STR_5 FEEE  
                          STR_6 FE3E                            STR_7 FEB0                            STR_8 FF95  
                          STR_9 FF86                            _T0IE 007F95                            _T0IF 007F92  
                          _LATA 000F89                            _LATB 000F8A                            _LATC 000F8B  
                          _LATD 000F8C                            _LATE 000F8D                            u5100 1AC0  
                          u5110 1AF0                            u5050 24AC                            u5210 1BD8  
                          u5130 1B26                            u5060 24EA                            u5220 1BF4  
                          u5117 1AE6                            u6021 17AA                            u5310 1D08  
                          u5230 1C24                            u5150 1B64                            u6200 0B70  
                          u6120 0940                            u5057 24A2                            u5137 1B1C  
                          u6041 1A58                            u5410 0CBA                            u5067 24E0  
                          u5340 274A                            u5180 1BB4                            u5420 0CFE  
                          u5317 1CFE                            u5237 1C1A                            u5157 1B5A  
                          u6301 0198                            u5270 1C9C                            u5430 0D36  
                          u7007 29EA                            u4800 2140                            u6160 0A58  
                          u6080 0828                            u6240 00F2                            u5408 0C88  
                          u7017 1A84                            u5417 0CB0                            u5409 0CBC  
                          u5610 1D64                            u5290 1CD2                            u6250 0102  
                          u7107 261C                            u5187 1BAA                            u7027 1A9A  
                          u5427 0CF4                            u6340 0268                            u7117 2626  
                          u7037 2BE6                            u5277 1C92                            u5437 0D2C  
                          u5710 1E0A                            u6510 0450                            u6430 02D4  
                          u6270 0172                            u4910 27F6                            u5550 0FBA  
                          u7127 265C                            u7047 0858                            u4840 21BE  
                          u5640 1D8E                            u6600 05F4                            u5560 0FD6  
                          u5528 0E72                            u7137 2666                            u7057 0970  
                          u5297 1CC8                            u6610 0626                            u6530 047A  
                          u5490 0E3A                            u5378 0BD4                            u4755 2634  
                          u5571 1D30                            u7067 0A88                            u4756 2636  
                          u5740 1E3E                            u6620 0658                            u6460 0320  
                          u6284 0184                            u5548 0F6A                            u4765 2674  
                          u7077 2952                            u5581 1D44                            u6285 0180  
                          u4766 2676                            u5670 1DCC                            u7087 2986  
                          u4775 2B7E                            u4880 25AA                            u4776 2B80  
                          u6640 06D4                            u6560 053C                            u6720 15FC  
                          u7097 2BFA                            u6570 0560                            u6580 0590  
                          u6590 05C2                            u6807 14B2                            u6665 28D0  
                          u6817 14C8                            u6907 16A8                            u6827 1532  
                          u6917 16F0                            u6837 1568                            u6927 1980  
                          u6847 157E                            u6767 254C                            u6937 1996  
                          u6857 15E8                            u6777 2562                            u6947 1382  
                          u6867 160A                            u6787 142A                            u6957 0020  
                          u6877 1620                            u6797 1440                            u6967 0036  
                          u6887 1678                            u6977 00D2                            u6897 1692  
                          u6987 04C6                            u6997 2B2E                            _STOP 007E3C  
                          _main 24F6        __end_of_interruptHandler 23D2                    ___ftpack@arg 0027  
          _RTC_getOperatingTime 28FA                    ___ftpack@exp 002A                            _tock 2C26  
                          _test 01BD    __end_of_assemblyStepEncoding FC7F                            fsr0h 000FEA  
                          fsr1h 000FE2                            indf0 000FEF                            fsr2h 000FDA  
                          fsr0l 000FE9                            indf2 000FDF                            fsr1l 000FE1  
                          fsr2l 000FD9                __end_of_I2C_Send 24F6                            btemp 0059  
                  i2___ftadd@f1 0009                    i2___ftadd@f2 000C                            prodh 000FF4  
                          prodl 000FF3                            start 000E                   __CFG_IESO$OFF 000000  
                 __CFG_MCLRE$ON 000000                    ___param_bank 000000                __end_of_LCD_LEFT FC81  
                         ??_tic 0027                 ??_printErrorLCD 008A           I2C_Master_Read@ackBit 0028  
              ?_I2C_Master_Init 0080                ?_I2C_Master_Read 0001                ?_I2C_Master_Wait 0001  
              ?_I2C_Master_Stop 0001                           ?_main 0001                 __end_of___ftadd 1ECC  
                         STR_10 FFC0                           STR_11 FF45                           STR_12 FF56  
                         STR_20 FEDB                           STR_13 FF01                           STR_21 FEC6  
                         STR_22 FFE5                           STR_14 FE7D                           STR_23 FFCE  
                         STR_15 FE97                           STR_24 FFDA                           STR_16 FFA4  
                         STR_25 FF67                           STR_17 FE5F                           STR_26 FFF5  
                         STR_18 FF12                           STR_19 FEE4                           STR_27 FFFB  
                         STR_28 FFEE                           ?_tock 0027                 __end_of___lldiv 25FA  
               __end_of___llmod 283A                           i2l146 2386                           i2l910 2262  
                         i2l911 2258                           i2l904 2206                           i2l905 21FC  
                         i2l907 223A                           i2l908 2224                           i2l589 27C8  
                         i2l950 1F9A                           i2l935 1F1E                           i2l944 1FAE  
                         i2l961 2006                           i2l962 2022                           i2l963 2052  
                         i2l939 1F48                           i2l949 1FA4                           i2l958 1FE2  
                         i2l959 1FD8                           _TMR0H 000FD7                           _TMR0L 000FD6  
                         _PORTB 000F81                 __end_of__doprnt 0FE0                           _TRISA 000F92  
                         _TRISB 000F93                           _TRISC 000F94                           _TRISD 000F95  
                         _TRISE 000F96            printStringLCD@string 002D                 mainMenu@pressed 00F4  
                 __CFG_PWRT$OFF 000000              RTC_getSeconds@time 0080                   __CFG_WRT0$OFF 000000  
                 __CFG_WRT1$OFF 000000                   __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000  
               __end_of_lcdInst 2C02                  __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000  
                __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000  
                 __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000  
               __end_of_errMsgs FD66                 __end_of_initLCD 2998                  __CFG_EBTRB$OFF 000000  
               __end_of_dpowers FC59                   ___ftpack@sign 002B                           _putch 2BDA  
                         pclath 000FFA                           tablat 000FF5               _LCDinterruptState 004E  
                         plusw1 000FE3                           plusw2 000FDB           ?_RTC_getOperatingTime 008B  
                         status 000FD8     I2C_Master_Read@receivedByte 0029                           wtemp6 005A  
               __end_of_sprintf 29DC              __size_ofi2___ftadd 01AC                _timeSinceLastTic 004F  
               __initialization 283A                    __end_of_main 2578                  _RTC_getSeconds 2678  
                  __end_of_tock 2C34               ?_lcd_shift_cursor 002A                  __CFG_OSC$HSPLL 000000  
                   ?i2___ftpack 0001               __end_of_LCD_RIGHT FC82                          ??_main 00F8  
                        ??_tock 002A              ??_lcd_shift_cursor 002B                   __activetblptr 000003  
                packaging@F3204 0057                  packaging@F3206 0100               ?_I2C_Master_Start 0001  
             ?_I2C_Master_Write 0028                       I2C_Send@i 0030              ??_I2C_Master_Start 0028  
                        _ADCON0 000FC2                          _ADCON1 000FC1              ??_I2C_Master_Write 002A  
              ___llmod@dividend 0080     __size_of_RTC_startOperation 0016                          ?_putch 0001  
              __end_of___ftpack 21DE                          u440_41 1EF0                          u439_41 1EDC  
                 inputEntry@msg 0090                          _TMR0IE 007F95                   inputEntry@sum 00D5  
                        _SSPADD 000FC8                  packaging@instr 0242                          _SSPBUF 000FC9  
              __end_of_clearing 0B9C                  __CFG_XINST$OFF 000000          __end_of_RTC_getSeconds 26F2  
                        ___ftge 23D2                __end_of_mainMenu 1728                    RTC_getTime@i 002C  
               motorControl@dir 0027                          ___wmul 2B3C                       ??___ftadd 002F  
                __CFG_STVREN$ON 000000                __end_of_nanoAddr FC80                       ??___lldiv 002F  
                     ??___llmod 0034                       ??__doprnt 008F                          _params 01A3  
                        clear_0 2880                          clear_1 288C                          _extras 003C  
                  __doprnt@flag 0093                ??_printStringLCD 002F                       ??_lcdInst 0029  
                        _printf 2A58                __end_of_tmr0_ISR 27D2                    __doprnt@prec 0091  
              __end_of_tmr0Init 2BA8                          _strcpy 2A90                       ??_initLCD 002A  
          _assemblyStepEncoding FC7A                    __pdataCOMRAM 004F                       ?_I2C_Send 002A  
             __end_ofi2___ftadd 2078                  i2___ftadd@exp1 0014                  i2___ftadd@exp2 0013  
                i2___ftadd@sign 0012                    __mediumconst FC30                __end_of_viewLogs 2B16  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
                     ??_sprintf 0034            __end_of_LCDMenuIcons FC7A          ??_RTC_getOperatingTime 008F  
          clearing@debounceTime 0095                      __accesstop 0080         __end_of__initialization 2892  
               __CFG_PBADEN$OFF 000000                      ___ftadd@f1 0080                      ___ftadd@f2 0083  
           __size_ofi2___ftpack 00AE                      ___ftge@ff1 0089                      ___ftge@ff2 008C  
                 ___rparam_used 000001                  i2___ftpack@arg 0001                  i2___ftpack@exp 0004  
               ?_RTC_getSeconds 002D      packageCompartment@currTime 00B5                  __pcstackCOMRAM 0001  
                  __pidataBANK1 228C                 viewLogs@pressed 008A      __end_of_packageCompartment 1392  
                 __end_of_putch 2BEE                    ?_RTC_getTime 002A                ??_lcd_set_cursor 002E  
            __size_of_lcdNibble 007E                      ??_I2C_Send 002C                     inputEntry@i 00E5  
                  packaging@msg 0200                    packaging@set 0246              __size_of_hibernate 003C  
                    __doprnt@ap 008D                      __doprnt@cp 0098                      __doprnt@pb 0089  
                       ??_putch 0029                      __pbssBANK1 01A3              __size_of_packaging 0332  
           mainMenu@needToPrint 00F2               ?_interruptHandler 0001              ??_interruptHandler 0015  
           _inputEntryQuestions FD66                         ?___ftge 0089                         ?___wmul 0027  
                     ?___ftpack 0027                         ?_printf 009B                    I2C_Send@data 002A  
                       ?_strcpy 002D                  inputEntry@done 00CB                       ?_clearing 0001  
                inputEntry@numB 00D7                  inputEntry@numN 00D9                  inputEntry@numS 00DB  
                inputEntry@numW 00DD                         _SSPCON1 000FC6                         _SSPCON2 000FC5  
                       _SSPSTAT 000FC7                       ?_mainMenu 0001              timer@operatingTime 0052  
                     ?_tmr0_ISR 0001               __end_of_lcdNibble 2678                       ?_tmr0Init 0001  
                       __Hparam 0000                         __Lparam 0000               __end_of_hibernate 2A58  
                     ?_viewLogs 0001                 __size_of___ftge 0092                         ___ftadd 1D1E  
                       ___lldiv 2578                 __size_of___wmul 0026                         ___llmod 27D2  
                       __doprnt 0B9C                   ?_motorControl 0027                         __pcinit 283A  
                  ??i2___ftpack 0006                      ??___ftpack 002C                         __ramtop 1000  
                       _endTime 0044           __end_of_printErrorLCD 2B3C                         _lcdInst 2BEE  
             __end_of_packaging 1A5A                         __ptext0 24F6                         __ptext1 1392  
                       __ptext2 2AF0                         __ptext3 1728                         __ptext4 2998  
                       __ptext5 2A58                         __ptext6 0B9C                         __ptext7 27D2  
                       __ptext8 0FE0                         __ptext9 0012                 __size_of_printf 0038  
                     _T0CONbits 000FD5                         _errMsgs FC86                 __size_of_strcpy 0032  
                       _initLCD 294C                         _dpowers FC31      printStringLCD@newlineIndex 0084  
                  __size_of_tic 0012                       _LCD_RIGHT FC81                      _inputEntry 0012  
      __size_of_I2C_Master_Init 005E        __size_of_I2C_Master_Read 0024                      ??_clearing 0032  
      __size_of_I2C_Master_Wait 0012        __size_of_I2C_Master_Stop 0008        printStringLCD@spaceIndex 0082  
               printStringLCD@i 0088                 printStringLCD@j 0080                         _sprintf 2998  
                __pintcode_body 2330       __size_of_lcd_shift_cursor 001C            end_of_initialization 2892  
                    ??_mainMenu 00E8           __end_of_LCD_SIZE_HORZ FC84           __end_of_LCD_SIZE_VERT FC83  
      inputEntry@fastenerString 00A8                         int_func 2330              __end_ofi2___ftpack 228C  
                    ??_tmr0_ISR 0015                      ??_tmr0Init 0027       __size_of_I2C_Master_Start 0008  
     __size_of_I2C_Master_Write 000A                 ___lldiv@divisor 002B                 ___lldiv@counter 0033  
                    _pollKeypad 2AC2          packageCompartment@numB 00A5          packageCompartment@numN 00A7  
        packageCompartment@numS 00A9          packageCompartment@numW 00AB                         printf@f 009B  
                       postdec1 000FE5                         postdec2 000FDD                      ??_viewLogs 0032  
                       postinc0 000FEE                         postinc2 000FDE                  ??_motorControl 0028  
     inputEntry@doneCompartment 00D3                    _LCDMenuIcons FC6A                       _PORTAbits 000F80  
                     _PORTBbits 000F81            __size_of_RTC_getTime 0072                       _TRISCbits 000F94  
    __end_of_RTC_startOperation 2BDA               __size_of_I2C_Send 0092                       i2___ftadd 1ECC  
  inputEntry@compartmentsToFill 00CA                ??_RTC_getSeconds 0031       lcd_shift_cursor@direction 002A  
               i2___ftpack@sign 0005                  __end_of___ftge 2464                  __end_of___wmul 2B62  
                 __pidataCOMRAM 2C34              pollKeypad@keypress 0027                  __end_of_printf 2A90  
           packageCompartment@b 0098             packageCompartment@n 0092             packageCompartment@s 0093  
           packageCompartment@w 0094                  __end_of_strcpy 2AC2             start_initialization 283A  
                   ?_inputEntry 0001              _packageCompartment 0FE0                     __end_of_tic 2C14  
                    ?i2___ftadd 0009            inputEntry@numPressed 00E1               ??_I2C_Master_Init 0084  
             ??_I2C_Master_Read 0028             ?_packageCompartment 0092               ??_I2C_Master_Wait 0027  
             ??_I2C_Master_Stop 0028   __size_of_RTC_getOperatingTime 0052                 ___llmod@divisor 0084  
               ___llmod@counter 0088                   packaging@msg2 0222                   packaging@mult 0248  
       packaging@compartmentNum 0244                     ?_pollKeypad 0001                        ??___ftge 008F  
                      ??___wmul 002B                     __doprnt@val 0094        I2C_Master_Init@clockFreq 0080  
                   __pdataBANK1 0100                __CFG_LPT1OSC$OFF 000000            ??_packageCompartment 0095  
                      ??_printf 0034       __size_of_interruptHandler 23CA                        ??_strcpy 0031  
             __size_of___ftpack 00AE                     __pbssCOMRAM 0034                hibernate@pressed 0032  
                 __pcstackBANK0 0080                   __pcstackBANK2 0200        inputEntry@inputEntryStep 00DF  
              _lcd_shift_cursor 2BA8         __size_of_printStringLCD 02C4               __size_of_clearing 0498  
               RTC_getTime@time 002A            __end_of_motorControl 2130                       __doprnt@c 009A  
                     __doprnt@f 008B               __size_of_mainMenu 0396                _I2C_Master_Start 2C50  
              _I2C_Master_Write 2C3E               __CFG_CCP2MX$PORTC 000000               __size_of_tmr0_ISR 006E  
             __size_of_tmr0Init 0022             __size_of_inputEntry 06F2                       __pintcode 0008  
                 __pmediumconst FC30                       _lcdNibble 25FA                        ?___ftadd 0080  
                      ?___lldiv 0027                        ?___llmod 0080                        ?__doprnt 0089  
             __size_of_viewLogs 0026                       _hibernate 2A1C                        ?_lcdInst 0001  
                     _dispensed 0034                        ?_initLCD 0001                        _I2C_Send 2464  
                     _packaging 1728             __size_of_pollKeypad 002E                     ??i2___ftadd 000F  
                      ?_sprintf 009B                  __size_of_putch 0014                 inputEntry@F3177 0055  
               inputEntry@F3198 0122             __end_of_keypadChars FC6A                        _LCD_LEFT FC80  
       __size_of_lcd_set_cursor 0040                  _fastenerMatrix FDEA                  ___wmul@product 002B  
                      _LATBbits 000F8A                        _LATCbits 000F8B      inputEntry@compartmentLabel 00C8  
                      _LATDbits 000F8C                        _LATEbits 000F8D                   _operatingTime 01C1  
               lcd_set_cursor@i 002F                 lcd_set_cursor@x 0030                 lcd_set_cursor@y 002D  
                      i2u371_40 226C                        i2u443_40 1F10                        i2u453_40 1FB6  
                      i2u446_40 1F3A                       _operating 004D                        i2u367_40 21EE  
                      i2u456_40 1FEA                        i2u449_40 1F78                 inputEntry@found 00CD  
              __CFG_WDTPS$32768 000000                      ?_lcdNibble 0001        inputEntry@compartmentNum 00E3  
                     _timerInit 004C     __end_of_inputEntryQuestions FDEA                      ?_hibernate 0001  
             ___wmul@multiplier 0027                       _startTime 0048                   lcdNibble@data 0028  
                 lcdNibble@temp 0027           RTC_getSeconds@seconds 0087                      ?_packaging 0001  
                     mainMenu@i 00F6                  _LCD_HORZ_LIMIT FC85             inputEntry@setIsGood 00CF  
                     copy_data0 284E                       copy_data1 286E          __end_of_fastenerMatrix FE3E  
       inputEntry@doneMultiples 00D1              mainMenu@startPress 00F0          __size_of_printErrorLCD 0026  
            _RTC_startOperation 2BC4                        __Hrparam 0000                        __Lrparam 0000  
            __CFG_BOREN$SBORDIS 000000                        _fSLookup 013A             ?_RTC_startOperation 0001  
               I2C_Send@address 002F                __size_of___ftadd 01AE                __size_of___lldiv 0082  
              __size_of___llmod 0068                   ??_RTC_getTime 002C                        ___ftpack 2130  
              __size_of__doprnt 0444                _interruptHandler 0008                __size_of_lcdInst 0014  
             motorControl@motor 0028                 _I2C_Master_Init 289C                 _I2C_Master_Read 2B62  
              __size_of_initLCD 004C                 _I2C_Master_Wait 2C14                 _I2C_Master_Stop 2C48  
        __end_of_LCD_HORZ_LIMIT FC86                    ??_inputEntry 008C                     _keypadChars FC59  
         __size_of_motorControl 00B8                        _clearing 0704                        __ptext10 2A90  
                      __ptext11 2B16                        __ptext20 2C02                        __ptext12 29DC  
                      __ptext21 2B86                        __ptext13 2BA8                        __ptext30 2B3C  
                      __ptext22 2078                        __ptext14 2A1C                        __ptext31 26F2  
                      __ptext23 23D2                        __ptext15 1A5A                        __ptext40 289C  
                      __ptext32 2C3E                        __ptext24 1D1E                        __ptext16 2BDA  
                      __ptext41 2578                        __ptext33 2C48                        __ptext25 2130  
                      __ptext17 2AC2                        __ptext34 2C50                        __ptext26 2464  
                      __ptext18 0704                        __ptext43 2764                        __ptext35 2B62  
                      __ptext27 2BC4                        __ptext19 2C26                        __ptext44 1ECC  
                      __ptext36 2C14                        __ptext28 28FA                        __ptext45 21DE  
                      __ptext37 294C                        __ptext29 2678                        __ptext46 0000  
                      __ptext38 2BEE                        __ptext39 25FA                  _printStringLCD 1A5A  
          ??_RTC_startOperation 0033                  _LCD_VERT_LIMIT FC84                        _mainMenu 1392  
              __size_of_sprintf 0044                        _nanoAddr FC7F                      strcpy@from 002F  
                 __size_of_main 0082                   __size_of_tock 000E                        _tmr0_ISR 2764  
                      _tmr0Init 2B86                    ??_pollKeypad 0027                     ??_lcdNibble 0027  
                      _viewLogs 2AF0              __end_of_inputEntry 0704                        int$flags 0059  
      __end_of_lcd_shift_cursor 2BC4                     ??_hibernate 008A    __end_of_RTC_getOperatingTime 294C  
                  _motorControl 2078     I2C_Master_Write@byteToWrite 0028                   _printErrorLCD 2B16  
             lcd_shift_cursor@n 002C                       putch@data 0029        __end_of_I2C_Master_Start 2C58  
      __end_of_I2C_Master_Write 2C48                      _INTCONbits 000FF2                     ??_packaging 00B8  
        __end_of_printStringLCD 1D1E          __end_of_LCD_VERT_LIMIT FC85             __end_of_RTC_getTime 2764  
printStringLCD@newlineCharIndex 0086              __end_of_pollKeypad 2AF0                        intlevel2 0000  
                _lcd_set_cursor 29DC                       sprintf@ap 00A7                       sprintf@pb 00A9  
                     sprintf@wh 009B                   _LCD_SIZE_HORZ FC83                   _LCD_SIZE_VERT FC82  
              ___lldiv@dividend 0027           mainMenu@operationTime 00EC         packageCompartment@doneB 00AD  
       packageCompartment@doneN 00AF         packageCompartment@doneS 00B1         packageCompartment@doneW 00B3  
       packageCompartment@timeB 0099         packageCompartment@timeN 009C         packageCompartment@timeS 009F  
       packageCompartment@timeW 00A2                        printf@ap 00A5                        printf@pb 00A7  
       __size_of_RTC_getSeconds 007A         __end_of_I2C_Master_Init 28FA         __end_of_I2C_Master_Read 2B86  
       __end_of_I2C_Master_Wait 2C26         __end_of_I2C_Master_Stop 2C50                     lcdInst@data 0029  
             inputEntry@pressed 00E7                  ?_printErrorLCD 0032     __size_of_packageCompartment 03B2  
                      sprintf@f 009D                ___lldiv@quotient 002F                        strcpy@cp 0031  
                      strcpy@to 002D                 ?_printStringLCD 002D                     _SSPCON1bits 000FC6  
                   _SSPCON2bits 000FC5          __end_of_lcd_set_cursor 2A1C                clearing@currTime 0098  
      lcd_shift_cursor@numChars 002B                clearing@spinTime 0092  
