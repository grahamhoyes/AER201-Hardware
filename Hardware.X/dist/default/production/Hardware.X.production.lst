

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Mar 11 23:59:38 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    65                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    67                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    68  0000                     
    69                           ; Version 1.45
    70                           ; Generated 16/11/2017 GMT
    71                           ; 
    72                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    73                           ; All rights reserved.
    74                           ; 
    75                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    76                           ; 
    77                           ; Redistribution and use in source and binary forms, with or without modification, are
    78                           ; permitted provided that the following conditions are met:
    79                           ; 
    80                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    81                           ;        conditions and the following disclaimer.
    82                           ; 
    83                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    84                           ;        of conditions and the following disclaimer in the documentation and/or other
    85                           ;        materials provided with the distribution.
    86                           ; 
    87                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    88                           ;        software without specific prior written permission.
    89                           ; 
    90                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    91                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    92                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    93                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    94                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    95                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    96                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    97                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    98                           ; 
    99                           ; 
   100                           ; Code-generator required, PIC18F4620 Definitions
   101                           ; 
   102                           ; SFR Addresses
   103  0000                     
   104                           	psect	idataCOMRAM
   105  00286C                     __pidataCOMRAM:
   106                           	opt stack 0
   107                           
   108                           ;initializer for _timeSinceLastTic
   109  00286C  00                 	db	0
   110  00286D  80                 	db	128
   111  00286E  BF                 	db	191
   112                           
   113                           ;initializer for timer@operatingTime
   114  00286F  00                 	db	0
   115  002870  80                 	db	128
   116  002871  BF                 	db	191
   117                           
   118                           	psect	idataBANK0
   119  002872                     __pidataBANK0:
   120                           	opt stack 0
   121                           
   122                           ;initializer for inputEntry@F3177
   123  002872  43                 	db	67
   124  002873  30                 	db	48
   125                           
   126                           	psect	idataBANK1
   127  001F1A                     __pidataBANK1:
   128                           	opt stack 0
   129                           
   130                           ;initializer for packaging@F3205
   131  001F1A  01                 	db	1
   132  001F1B  53                 	db	83
   133  001F1C  74                 	db	116
   134  001F1D  61                 	db	97
   135  001F1E  72                 	db	114
   136  001F1F  74                 	db	116
   137  001F20  65                 	db	101
   138  001F21  64                 	db	100
   139  001F22  20                 	db	32
   140  001F23  70                 	db	112
   141  001F24  61                 	db	97
   142  001F25  63                 	db	99
   143  001F26  6B                 	db	107
   144  001F27  61                 	db	97
   145  001F28  67                 	db	103
   146  001F29  69                 	db	105
   147  001F2A  6E                 	db	110
   148  001F2B  67                 	db	103
   149  001F2C  20                 	db	32
   150  001F2D  63                 	db	99
   151  001F2E  6F                 	db	111
   152  001F2F  6D                 	db	109
   153  001F30  70                 	db	112
   154  001F31  61                 	db	97
   155  001F32  72                 	db	114
   156  001F33  74                 	db	116
   157  001F34  6D                 	db	109
   158  001F35  65                 	db	101
   159  001F36  6E                 	db	110
   160  001F37  74                 	db	116
   161  001F38  20                 	db	32
   162  001F39  78                 	db	120
   163  001F3A  00                 	db	0
   164  001F3B  00                 	db	0
   165                           
   166                           ;initializer for inputEntry@F3198
   167  001F3C  01                 	db	1
   168  001F3D  53                 	db	83
   169  001F3E  74                 	db	116
   170  001F3F  61                 	db	97
   171  001F40  72                 	db	114
   172  001F41  74                 	db	116
   173  001F42  65                 	db	101
   174  001F43  64                 	db	100
   175  001F44  20                 	db	32
   176  001F45  63                 	db	99
   177  001F46  6F                 	db	111
   178  001F47  6D                 	db	109
   179  001F48  70                 	db	112
   180  001F49  61                 	db	97
   181  001F4A  72                 	db	114
   182  001F4B  74                 	db	116
   183  001F4C  6D                 	db	109
   184  001F4D  65                 	db	101
   185  001F4E  6E                 	db	110
   186  001F4F  74                 	db	116
   187  001F50  20                 	db	32
   188  001F51  78                 	db	120
   189  001F52  00                 	db	0
   190  001F53  00                 	db	0
   191                           
   192                           ;initializer for _fSLookup
   193  001F54  4E                 	db	78
   194  001F55  4F                 	db	79
   195  001F56  4E                 	db	78
   196  001F57  45                 	db	69
   197  001F58  00                 	db	0
   198  001F59  42                 	db	66
   199  001F5A  00                 	db	0
   200  001F5B  00                 	db	0
   201  001F5C  00                 	db	0
   202  001F5D  00                 	db	0
   203  001F5E  4E                 	db	78
   204  001F5F  00                 	db	0
   205  001F60  00                 	db	0
   206  001F61  00                 	db	0
   207  001F62  00                 	db	0
   208  001F63  53                 	db	83
   209  001F64  00                 	db	0
   210  001F65  00                 	db	0
   211  001F66  00                 	db	0
   212  001F67  00                 	db	0
   213  001F68  57                 	db	87
   214  001F69  00                 	db	0
   215  001F6A  00                 	db	0
   216  001F6B  00                 	db	0
   217  001F6C  00                 	db	0
   218  001F6D  42                 	db	66
   219  001F6E  4E                 	db	78
   220  001F6F  00                 	db	0
   221  001F70  00                 	db	0
   222  001F71  00                 	db	0
   223  001F72  42                 	db	66
   224  001F73  53                 	db	83
   225  001F74  00                 	db	0
   226  001F75  00                 	db	0
   227  001F76  00                 	db	0
   228  001F77  42                 	db	66
   229  001F78  57                 	db	87
   230  001F79  00                 	db	0
   231  001F7A  00                 	db	0
   232  001F7B  00                 	db	0
   233  001F7C  42                 	db	66
   234  001F7D  42                 	db	66
   235  001F7E  4E                 	db	78
   236  001F7F  00                 	db	0
   237  001F80  00                 	db	0
   238  001F81  42                 	db	66
   239  001F82  42                 	db	66
   240  001F83  53                 	db	83
   241  001F84  00                 	db	0
   242  001F85  00                 	db	0
   243  001F86  42                 	db	66
   244  001F87  42                 	db	66
   245  001F88  57                 	db	87
   246  001F89  00                 	db	0
   247  001F8A  00                 	db	0
   248  001F8B  42                 	db	66
   249  001F8C  4E                 	db	78
   250  001F8D  57                 	db	87
   251  001F8E  00                 	db	0
   252  001F8F  00                 	db	0
   253  001F90  42                 	db	66
   254  001F91  53                 	db	83
   255  001F92  57                 	db	87
   256  001F93  00                 	db	0
   257  001F94  00                 	db	0
   258  001F95  42                 	db	66
   259  001F96  57                 	db	87
   260  001F97  57                 	db	87
   261  001F98  00                 	db	0
   262  001F99  00                 	db	0
   263  001F9A  42                 	db	66
   264  001F9B  4E                 	db	78
   265  001F9C  4E                 	db	78
   266  001F9D  57                 	db	87
   267  001F9E  00                 	db	0
   268  001F9F  42                 	db	66
   269  001FA0  53                 	db	83
   270  001FA1  57                 	db	87
   271  001FA2  57                 	db	87
   272  001FA3  00                 	db	0
   273  001FA4  42                 	db	66
   274  001FA5  42                 	db	66
   275  001FA6  53                 	db	83
   276  001FA7  57                 	db	87
   277  001FA8  00                 	db	0
   278  001FA9  42                 	db	66
   279  001FAA  42                 	db	66
   280  001FAB  4E                 	db	78
   281  001FAC  57                 	db	87
   282  001FAD  00                 	db	0
   283  001FAE  42                 	db	66
   284  001FAF  4E                 	db	78
   285  001FB0  4E                 	db	78
   286  001FB1  57                 	db	87
   287  001FB2  00                 	db	0
   288  001FB3  42                 	db	66
   289  001FB4  4E                 	db	78
   290  001FB5  4E                 	db	78
   291  001FB6  4E                 	db	78
   292  001FB7  00                 	db	0
   293  001FB8  42                 	db	66
   294  001FB9  57                 	db	87
   295  001FBA  57                 	db	87
   296  001FBB  57                 	db	87
   297  001FBC  00                 	db	0
   298                           
   299                           	psect	mediumconst
   300  00FC6E                     __pmediumconst:
   301                           	opt stack 0
   302  00FC6E  00                 	db	0
   303  00FC6F                     _dpowers:
   304                           	opt stack 0
   305  00FC6F  0001               	dw	1
   306  00FC71  0000               	dw	0
   307  00FC73  000A               	dw	10
   308  00FC75  0000               	dw	0
   309  00FC77  0064               	dw	100
   310  00FC79  0000               	dw	0
   311  00FC7B  03E8               	dw	1000
   312  00FC7D  0000               	dw	0
   313  00FC7F  2710               	dw	10000
   314  00FC81  0000               	dw	0
   315  00FC83  86A0               	dw	34464
   316  00FC85  0001               	dw	1
   317  00FC87  4240               	dw	16960
   318  00FC89  000F               	dw	15
   319  00FC8B  9680               	dw	38528
   320  00FC8D  0098               	dw	152
   321  00FC8F  E100               	dw	57600
   322  00FC91  05F5               	dw	1525
   323  00FC93  CA00               	dw	51712
   324  00FC95  3B9A               	dw	15258
   325  00FC97                     __end_of_dpowers:
   326                           	opt stack 0
   327  00FC97                     _keypadChars:
   328                           	opt stack 0
   329  00FC97  31                 	db	49
   330  00FC98  32                 	db	50
   331  00FC99  33                 	db	51
   332  00FC9A  42                 	db	66
   333  00FC9B  34                 	db	52
   334  00FC9C  35                 	db	53
   335  00FC9D  36                 	db	54
   336  00FC9E  4E                 	db	78
   337  00FC9F  37                 	db	55
   338  00FCA0  38                 	db	56
   339  00FCA1  39                 	db	57
   340  00FCA2  53                 	db	83
   341  00FCA3  2A                 	db	42
   342  00FCA4  30                 	db	48
   343  00FCA5  23                 	db	35
   344  00FCA6  57                 	db	87
   345  00FCA7  00                 	db	0
   346  00FCA8                     __end_of_keypadChars:
   347                           	opt stack 0
   348  00FCA8                     _LCDMenuIcons:
   349                           	opt stack 0
   350  00FCA8  2A                 	db	42
   351  00FCA9  3C                 	db	60
   352  00FCAA  2D                 	db	45
   353  00FCAB  20                 	db	32
   354  00FCAC  20                 	db	32
   355  00FCAD  20                 	db	32
   356  00FCAE  28                 	db	40
   357  00FCAF  20                 	db	32
   358  00FCB0  2D                 	db	45
   359  00FCB1  20                 	db	32
   360  00FCB2  29                 	db	41
   361  00FCB3  20                 	db	32
   362  00FCB4  20                 	db	32
   363  00FCB5  20                 	db	32
   364  00FCB6  20                 	db	32
   365  00FCB7  00                 	db	0
   366  00FCB8                     __end_of_LCDMenuIcons:
   367                           	opt stack 0
   368  00FCB8                     _assemblyStepEncoding:
   369                           	opt stack 0
   370  00FCB8  55                 	db	85
   371  00FCB9  5B                 	db	91
   372  00FCBA  77                 	db	119
   373  00FCBB  7F                 	db	127
   374  00FCBC  FF                 	db	255
   375  00FCBD                     __end_of_assemblyStepEncoding:
   376                           	opt stack 0
   377  00FCBD                     _nanoAddr:
   378                           	opt stack 0
   379  00FCBD  10                 	db	16
   380  00FCBE                     __end_of_nanoAddr:
   381                           	opt stack 0
   382  00FCBE                     _LCD_LEFT:
   383                           	opt stack 0
   384  00FCBE  00                 	db	0
   385  00FCBF                     __end_of_LCD_LEFT:
   386                           	opt stack 0
   387  00FCBF                     _LCD_RIGHT:
   388                           	opt stack 0
   389  00FCBF  01                 	db	1
   390  00FCC0                     __end_of_LCD_RIGHT:
   391                           	opt stack 0
   392  00FCC0                     _LCD_SIZE_VERT:
   393                           	opt stack 0
   394  00FCC0  02                 	db	2
   395  00FCC1                     __end_of_LCD_SIZE_VERT:
   396                           	opt stack 0
   397  00FCC1                     _LCD_SIZE_HORZ:
   398                           	opt stack 0
   399  00FCC1  10                 	db	16
   400  00FCC2                     __end_of_LCD_SIZE_HORZ:
   401                           	opt stack 0
   402  00FCC2                     _LCD_VERT_LIMIT:
   403                           	opt stack 0
   404  00FCC2  02                 	db	2
   405  00FCC3                     __end_of_LCD_VERT_LIMIT:
   406                           	opt stack 0
   407  00FCC3                     _LCD_HORZ_LIMIT:
   408                           	opt stack 0
   409  00FCC3  28                 	db	40
   410  00FCC4                     __end_of_LCD_HORZ_LIMIT:
   411                           	opt stack 0
   412  00FCC4                     _errMsgs:
   413                           	opt stack 0
   414  00FCC4  49                 	db	73
   415  00FCC5  6E                 	db	110
   416  00FCC6  76                 	db	118
   417  00FCC7  61                 	db	97
   418  00FCC8  6C                 	db	108
   419  00FCC9  69                 	db	105
   420  00FCCA  64                 	db	100
   421  00FCCB  20                 	db	32
   422  00FCCC  65                 	db	101
   423  00FCCD  6E                 	db	110
   424  00FCCE  74                 	db	116
   425  00FCCF  72                 	db	114
   426  00FCD0  79                 	db	121
   427  00FCD1  0A                 	db	10
   428  00FCD2  50                 	db	80
   429  00FCD3  6C                 	db	108
   430  00FCD4  65                 	db	101
   431  00FCD5  61                 	db	97
   432  00FCD6  73                 	db	115
   433  00FCD7  65                 	db	101
   434  00FCD8  20                 	db	32
   435  00FCD9  74                 	db	116
   436  00FCDA  72                 	db	114
   437  00FCDB  79                 	db	121
   438  00FCDC  20                 	db	32
   439  00FCDD  61                 	db	97
   440  00FCDE  67                 	db	103
   441  00FCDF  61                 	db	97
   442  00FCE0  69                 	db	105
   443  00FCE1  6E                 	db	110
   444  00FCE2  00                 	db	0
   445  00FCE3  00                 	db	0
   446  00FCE4  54                 	db	84
   447  00FCE5  6F                 	db	111
   448  00FCE6  6F                 	db	111
   449  00FCE7  20                 	db	32
   450  00FCE8  6D                 	db	109
   451  00FCE9  61                 	db	97
   452  00FCEA  6E                 	db	110
   453  00FCEB  79                 	db	121
   454  00FCEC  20                 	db	32
   455  00FCED  66                 	db	102
   456  00FCEE  61                 	db	97
   457  00FCEF  73                 	db	115
   458  00FCF0  74                 	db	116
   459  00FCF1  65                 	db	101
   460  00FCF2  6E                 	db	110
   461  00FCF3  65                 	db	101
   462  00FCF4  72                 	db	114
   463  00FCF5  73                 	db	115
   464  00FCF6  00                 	db	0
   465  00FCF7  00                 	db	0
   466  00FCF8  00                 	db	0
   467  00FCF9  00                 	db	0
   468  00FCFA  00                 	db	0
   469  00FCFB  00                 	db	0
   470  00FCFC  00                 	db	0
   471  00FCFD  00                 	db	0
   472  00FCFE  00                 	db	0
   473  00FCFF  00                 	db	0
   474  00FD00  00                 	db	0
   475  00FD01  00                 	db	0
   476  00FD02  00                 	db	0
   477  00FD03  00                 	db	0
   478  00FD04  54                 	db	84
   479  00FD05  6F                 	db	111
   480  00FD06  6F                 	db	111
   481  00FD07  20                 	db	32
   482  00FD08  6D                 	db	109
   483  00FD09  61                 	db	97
   484  00FD0A  6E                 	db	110
   485  00FD0B  79                 	db	121
   486  00FD0C  20                 	db	32
   487  00FD0D  62                 	db	98
   488  00FD0E  6F                 	db	111
   489  00FD0F  6C                 	db	108
   490  00FD10  74                 	db	116
   491  00FD11  73                 	db	115
   492  00FD12  00                 	db	0
   493  00FD13  00                 	db	0
   494  00FD14  00                 	db	0
   495  00FD15  00                 	db	0
   496  00FD16  00                 	db	0
   497  00FD17  00                 	db	0
   498  00FD18  00                 	db	0
   499  00FD19  00                 	db	0
   500  00FD1A  00                 	db	0
   501  00FD1B  00                 	db	0
   502  00FD1C  00                 	db	0
   503  00FD1D  00                 	db	0
   504  00FD1E  00                 	db	0
   505  00FD1F  00                 	db	0
   506  00FD20  00                 	db	0
   507  00FD21  00                 	db	0
   508  00FD22  00                 	db	0
   509  00FD23  00                 	db	0
   510  00FD24  54                 	db	84
   511  00FD25  6F                 	db	111
   512  00FD26  6F                 	db	111
   513  00FD27  20                 	db	32
   514  00FD28  6D                 	db	109
   515  00FD29  61                 	db	97
   516  00FD2A  6E                 	db	110
   517  00FD2B  79                 	db	121
   518  00FD2C  20                 	db	32
   519  00FD2D  6E                 	db	110
   520  00FD2E  75                 	db	117
   521  00FD2F  74                 	db	116
   522  00FD30  73                 	db	115
   523  00FD31  00                 	db	0
   524  00FD32  00                 	db	0
   525  00FD33  00                 	db	0
   526  00FD34  00                 	db	0
   527  00FD35  00                 	db	0
   528  00FD36  00                 	db	0
   529  00FD37  00                 	db	0
   530  00FD38  00                 	db	0
   531  00FD39  00                 	db	0
   532  00FD3A  00                 	db	0
   533  00FD3B  00                 	db	0
   534  00FD3C  00                 	db	0
   535  00FD3D  00                 	db	0
   536  00FD3E  00                 	db	0
   537  00FD3F  00                 	db	0
   538  00FD40  00                 	db	0
   539  00FD41  00                 	db	0
   540  00FD42  00                 	db	0
   541  00FD43  00                 	db	0
   542  00FD44  54                 	db	84
   543  00FD45  6F                 	db	111
   544  00FD46  6F                 	db	111
   545  00FD47  20                 	db	32
   546  00FD48  6D                 	db	109
   547  00FD49  61                 	db	97
   548  00FD4A  6E                 	db	110
   549  00FD4B  79                 	db	121
   550  00FD4C  20                 	db	32
   551  00FD4D  77                 	db	119
   552  00FD4E  61                 	db	97
   553  00FD4F  73                 	db	115
   554  00FD50  68                 	db	104
   555  00FD51  65                 	db	101
   556  00FD52  72                 	db	114
   557  00FD53  73                 	db	115
   558  00FD54  00                 	db	0
   559  00FD55  00                 	db	0
   560  00FD56  00                 	db	0
   561  00FD57  00                 	db	0
   562  00FD58  00                 	db	0
   563  00FD59  00                 	db	0
   564  00FD5A  00                 	db	0
   565  00FD5B  00                 	db	0
   566  00FD5C  00                 	db	0
   567  00FD5D  00                 	db	0
   568  00FD5E  00                 	db	0
   569  00FD5F  00                 	db	0
   570  00FD60  00                 	db	0
   571  00FD61  00                 	db	0
   572  00FD62  00                 	db	0
   573  00FD63  00                 	db	0
   574  00FD64  54                 	db	84
   575  00FD65  6F                 	db	111
   576  00FD66  6F                 	db	111
   577  00FD67  20                 	db	32
   578  00FD68  6D                 	db	109
   579  00FD69  61                 	db	97
   580  00FD6A  6E                 	db	110
   581  00FD6B  79                 	db	121
   582  00FD6C  20                 	db	32
   583  00FD6D  73                 	db	115
   584  00FD6E  70                 	db	112
   585  00FD6F  61                 	db	97
   586  00FD70  63                 	db	99
   587  00FD71  65                 	db	101
   588  00FD72  72                 	db	114
   589  00FD73  73                 	db	115
   590  00FD74  00                 	db	0
   591  00FD75  00                 	db	0
   592  00FD76  00                 	db	0
   593  00FD77  00                 	db	0
   594  00FD78  00                 	db	0
   595  00FD79  00                 	db	0
   596  00FD7A  00                 	db	0
   597  00FD7B  00                 	db	0
   598  00FD7C  00                 	db	0
   599  00FD7D  00                 	db	0
   600  00FD7E  00                 	db	0
   601  00FD7F  00                 	db	0
   602  00FD80  00                 	db	0
   603  00FD81  00                 	db	0
   604  00FD82  00                 	db	0
   605  00FD83  00                 	db	0
   606  00FD84  4E                 	db	78
   607  00FD85  6F                 	db	111
   608  00FD86  20                 	db	32
   609  00FD87  66                 	db	102
   610  00FD88  61                 	db	97
   611  00FD89  73                 	db	115
   612  00FD8A  74                 	db	116
   613  00FD8B  65                 	db	101
   614  00FD8C  6E                 	db	110
   615  00FD8D  65                 	db	101
   616  00FD8E  72                 	db	114
   617  00FD8F  73                 	db	115
   618  00FD90  20                 	db	32
   619  00FD91  73                 	db	115
   620  00FD92  65                 	db	101
   621  00FD93  6C                 	db	108
   622  00FD94  65                 	db	101
   623  00FD95  63                 	db	99
   624  00FD96  74                 	db	116
   625  00FD97  65                 	db	101
   626  00FD98  64                 	db	100
   627  00FD99  00                 	db	0
   628  00FD9A  00                 	db	0
   629  00FD9B  00                 	db	0
   630  00FD9C  00                 	db	0
   631  00FD9D  00                 	db	0
   632  00FD9E  00                 	db	0
   633  00FD9F  00                 	db	0
   634  00FDA0  00                 	db	0
   635  00FDA1  00                 	db	0
   636  00FDA2  00                 	db	0
   637  00FDA3  00                 	db	0
   638  00FDA4                     __end_of_errMsgs:
   639                           	opt stack 0
   640  00FDA4                     _inputEntryQuestions:
   641                           	opt stack 0
   642  00FDA4  41                 	db	65
   643  00FDA5  73                 	db	115
   644  00FDA6  73                 	db	115
   645  00FDA7  65                 	db	101
   646  00FDA8  6D                 	db	109
   647  00FDA9  62                 	db	98
   648  00FDAA  6C                 	db	108
   649  00FDAB  79                 	db	121
   650  00FDAC  20                 	db	32
   651  00FDAD  73                 	db	115
   652  00FDAE  74                 	db	116
   653  00FDAF  65                 	db	101
   654  00FDB0  70                 	db	112
   655  00FDB1  73                 	db	115
   656  00FDB2  0A                 	db	10
   657  00FDB3  2A                 	db	42
   658  00FDB4  3C                 	db	60
   659  00FDB5  2D                 	db	45
   660  00FDB6  20                 	db	32
   661  00FDB7  20                 	db	32
   662  00FDB8  28                 	db	40
   663  00FDB9  34                 	db	52
   664  00FDBA  2D                 	db	45
   665  00FDBB  38                 	db	56
   666  00FDBC  29                 	db	41
   667  00FDBD  20                 	db	32
   668  00FDBE  20                 	db	32
   669  00FDBF  20                 	db	32
   670  00FDC0  20                 	db	32
   671  00FDC1  20                 	db	32
   672  00FDC2  00                 	db	0
   673  00FDC3  00                 	db	0
   674  00FDC4  00                 	db	0
   675  00FDC5  46                 	db	70
   676  00FDC6  61                 	db	97
   677  00FDC7  73                 	db	115
   678  00FDC8  74                 	db	116
   679  00FDC9  65                 	db	101
   680  00FDCA  6E                 	db	110
   681  00FDCB  65                 	db	101
   682  00FDCC  72                 	db	114
   683  00FDCD  73                 	db	115
   684  00FDCE  20                 	db	32
   685  00FDCF  69                 	db	105
   686  00FDD0  6E                 	db	110
   687  00FDD1  20                 	db	32
   688  00FDD2  43                 	db	67
   689  00FDD3  78                 	db	120
   690  00FDD4  0A                 	db	10
   691  00FDD5  2A                 	db	42
   692  00FDD6  3C                 	db	60
   693  00FDD7  2D                 	db	45
   694  00FDD8  28                 	db	40
   695  00FDD9  42                 	db	66
   696  00FDDA  4E                 	db	78
   697  00FDDB  53                 	db	83
   698  00FDDC  57                 	db	87
   699  00FDDD  29                 	db	41
   700  00FDDE  20                 	db	32
   701  00FDDF  20                 	db	32
   702  00FDE0  20                 	db	32
   703  00FDE1  20                 	db	32
   704  00FDE2  2D                 	db	45
   705  00FDE3  3E                 	db	62
   706  00FDE4  23                 	db	35
   707  00FDE5  00                 	db	0
   708  00FDE6  48                 	db	72
   709  00FDE7  6F                 	db	111
   710  00FDE8  77                 	db	119
   711  00FDE9  20                 	db	32
   712  00FDEA  6D                 	db	109
   713  00FDEB  61                 	db	97
   714  00FDEC  6E                 	db	110
   715  00FDED  79                 	db	121
   716  00FDEE  20                 	db	32
   717  00FDEF  73                 	db	115
   718  00FDF0  65                 	db	101
   719  00FDF1  74                 	db	116
   720  00FDF2  73                 	db	115
   721  00FDF3  3F                 	db	63
   722  00FDF4  0A                 	db	10
   723  00FDF5  2A                 	db	42
   724  00FDF6  3C                 	db	60
   725  00FDF7  2D                 	db	45
   726  00FDF8  20                 	db	32
   727  00FDF9  20                 	db	32
   728  00FDFA  28                 	db	40
   729  00FDFB  31                 	db	49
   730  00FDFC  2D                 	db	45
   731  00FDFD  34                 	db	52
   732  00FDFE  29                 	db	41
   733  00FDFF  20                 	db	32
   734  00FE00  20                 	db	32
   735  00FE01  20                 	db	32
   736  00FE02  20                 	db	32
   737  00FE03  20                 	db	32
   738  00FE04  00                 	db	0
   739  00FE05  00                 	db	0
   740  00FE06  00                 	db	0
   741  00FE07  43                 	db	67
   742  00FE08  6F                 	db	111
   743  00FE09  6E                 	db	110
   744  00FE0A  66                 	db	102
   745  00FE0B  69                 	db	105
   746  00FE0C  72                 	db	114
   747  00FE0D  6D                 	db	109
   748  00FE0E  3F                 	db	63
   749  00FE0F  0A                 	db	10
   750  00FE10  2A                 	db	42
   751  00FE11  3C                 	db	60
   752  00FE12  2D                 	db	45
   753  00FE13  20                 	db	32
   754  00FE14  20                 	db	32
   755  00FE15  28                 	db	40
   756  00FE16  41                 	db	65
   757  00FE17  3A                 	db	58
   758  00FE18  59                 	db	89
   759  00FE19  2F                 	db	47
   760  00FE1A  42                 	db	66
   761  00FE1B  3A                 	db	58
   762  00FE1C  4E                 	db	78
   763  00FE1D  29                 	db	41
   764  00FE1E  20                 	db	32
   765  00FE1F  00                 	db	0
   766  00FE20  00                 	db	0
   767  00FE21  00                 	db	0
   768  00FE22  00                 	db	0
   769  00FE23  00                 	db	0
   770  00FE24  00                 	db	0
   771  00FE25  00                 	db	0
   772  00FE26  00                 	db	0
   773  00FE27  00                 	db	0
   774  00FE28                     __end_of_inputEntryQuestions:
   775                           	opt stack 0
   776  00FE28                     _fastenerMatrix:
   777                           	opt stack 0
   778  00FE28  00                 	db	0
   779  00FE29  00                 	db	0
   780  00FE2A  00                 	db	0
   781  00FE2B  00                 	db	0
   782  00FE2C  01                 	db	1
   783  00FE2D  00                 	db	0
   784  00FE2E  00                 	db	0
   785  00FE2F  00                 	db	0
   786  00FE30  00                 	db	0
   787  00FE31  01                 	db	1
   788  00FE32  00                 	db	0
   789  00FE33  00                 	db	0
   790  00FE34  00                 	db	0
   791  00FE35  00                 	db	0
   792  00FE36  01                 	db	1
   793  00FE37  00                 	db	0
   794  00FE38  00                 	db	0
   795  00FE39  00                 	db	0
   796  00FE3A  00                 	db	0
   797  00FE3B  01                 	db	1
   798  00FE3C  01                 	db	1
   799  00FE3D  01                 	db	1
   800  00FE3E  00                 	db	0
   801  00FE3F  00                 	db	0
   802  00FE40  01                 	db	1
   803  00FE41  00                 	db	0
   804  00FE42  01                 	db	1
   805  00FE43  00                 	db	0
   806  00FE44  01                 	db	1
   807  00FE45  00                 	db	0
   808  00FE46  00                 	db	0
   809  00FE47  01                 	db	1
   810  00FE48  02                 	db	2
   811  00FE49  01                 	db	1
   812  00FE4A  00                 	db	0
   813  00FE4B  00                 	db	0
   814  00FE4C  02                 	db	2
   815  00FE4D  00                 	db	0
   816  00FE4E  01                 	db	1
   817  00FE4F  00                 	db	0
   818  00FE50  02                 	db	2
   819  00FE51  00                 	db	0
   820  00FE52  00                 	db	0
   821  00FE53  01                 	db	1
   822  00FE54  01                 	db	1
   823  00FE55  01                 	db	1
   824  00FE56  00                 	db	0
   825  00FE57  01                 	db	1
   826  00FE58  01                 	db	1
   827  00FE59  00                 	db	0
   828  00FE5A  01                 	db	1
   829  00FE5B  01                 	db	1
   830  00FE5C  01                 	db	1
   831  00FE5D  00                 	db	0
   832  00FE5E  00                 	db	0
   833  00FE5F  02                 	db	2
   834  00FE60  01                 	db	1
   835  00FE61  01                 	db	1
   836  00FE62  00                 	db	0
   837  00FE63  02                 	db	2
   838  00FE64  01                 	db	1
   839  00FE65  00                 	db	0
   840  00FE66  01                 	db	1
   841  00FE67  02                 	db	2
   842  00FE68  02                 	db	2
   843  00FE69  00                 	db	0
   844  00FE6A  01                 	db	1
   845  00FE6B  01                 	db	1
   846  00FE6C  02                 	db	2
   847  00FE6D  01                 	db	1
   848  00FE6E  00                 	db	0
   849  00FE6F  01                 	db	1
   850  00FE70  01                 	db	1
   851  00FE71  02                 	db	2
   852  00FE72  00                 	db	0
   853  00FE73  01                 	db	1
   854  00FE74  01                 	db	1
   855  00FE75  03                 	db	3
   856  00FE76  00                 	db	0
   857  00FE77  00                 	db	0
   858  00FE78  01                 	db	1
   859  00FE79  00                 	db	0
   860  00FE7A  00                 	db	0
   861  00FE7B  03                 	db	3
   862  00FE7C                     __end_of_fastenerMatrix:
   863                           	opt stack 0
   864  0000                     _LATEbits	set	3981
   865  0000                     _LATCbits	set	3979
   866  0000                     _LATBbits	set	3978
   867  0000                     _TMR0L	set	4054
   868  0000                     _TMR0H	set	4055
   869  0000                     _T0CONbits	set	4053
   870  0000                     _PORTB	set	3969
   871  0000                     _PORTBbits	set	3969
   872  0000                     _INTCONbits	set	4082
   873  0000                     _LATDbits	set	3980
   874  0000                     _SSPBUF	set	4041
   875  0000                     _SSPCON2bits	set	4037
   876  0000                     _SSPADD	set	4040
   877  0000                     _SSPCON2	set	4037
   878  0000                     _SSPCON1	set	4038
   879  0000                     _SSPSTAT	set	4039
   880  0000                     _TRISCbits	set	3988
   881  0000                     _SSPCON1bits	set	4038
   882  0000                     _ADCON1	set	4033
   883  0000                     _ADCON0	set	4034
   884  0000                     _TRISE	set	3990
   885  0000                     _TRISD	set	3989
   886  0000                     _TRISC	set	3988
   887  0000                     _TRISB	set	3987
   888  0000                     _LATE	set	3981
   889  0000                     _LATD	set	3980
   890  0000                     _LATC	set	3979
   891  0000                     _LATB	set	3978
   892  0000                     _LATA	set	3977
   893  0000                     _PORTAbits	set	3968
   894  0000                     _TRISA	set	3986
   895  0000                     _TMR0IE	set	32661
   896  0000                     _T0IF	set	32658
   897  0000                     _T0IE	set	32661
   898  0000                     _STOP	set	32316
   899  00FE7C                     STR_6:
   900  00FE7C  01                 	db	1
   901  00FE7D  45                 	db	69	;'E'
   902  00FE7E  6E                 	db	110	;'n'
   903  00FE7F  74                 	db	116	;'t'
   904  00FE80  65                 	db	101	;'e'
   905  00FE81  72                 	db	114	;'r'
   906  00FE82  65                 	db	101	;'e'
   907  00FE83  64                 	db	100	;'d'
   908  00FE84  20                 	db	32
   909  00FE85  74                 	db	116	;'t'
   910  00FE86  68                 	db	104	;'h'
   911  00FE87  65                 	db	101	;'e'
   912  00FE88  20                 	db	32
   913  00FE89  70                 	db	112	;'p'
   914  00FE8A  61                 	db	97	;'a'
   915  00FE8B  63                 	db	99	;'c'
   916  00FE8C  6B                 	db	107	;'k'
   917  00FE8D  61                 	db	97	;'a'
   918  00FE8E  67                 	db	103	;'g'
   919  00FE8F  69                 	db	105	;'i'
   920  00FE90  6E                 	db	110	;'n'
   921  00FE91  67                 	db	103	;'g'
   922  00FE92  20                 	db	32
   923  00FE93  66                 	db	102	;'f'
   924  00FE94  75                 	db	117	;'u'
   925  00FE95  6E                 	db	110	;'n'
   926  00FE96  63                 	db	99	;'c'
   927  00FE97  74                 	db	116	;'t'
   928  00FE98  69                 	db	105	;'i'
   929  00FE99  6F                 	db	111	;'o'
   930  00FE9A  6E                 	db	110	;'n'
   931  00FE9B  00                 	db	0
   932  00FE9C  00                 	db	0
   933  00FE9D                     STR_13:
   934  00FE9D  30                 	db	48	;'0'
   935  00FE9E  3A                 	db	58	;':'
   936  00FE9F  53                 	db	83	;'S'
   937  00FEA0  6C                 	db	108	;'l'
   938  00FEA1  65                 	db	101	;'e'
   939  00FEA2  65                 	db	101	;'e'
   940  00FEA3  70                 	db	112	;'p'
   941  00FEA4  20                 	db	32
   942  00FEA5  31                 	db	49	;'1'
   943  00FEA6  3A                 	db	58	;':'
   944  00FEA7  42                 	db	66	;'B'
   945  00FEA8  65                 	db	101	;'e'
   946  00FEA9  67                 	db	103	;'g'
   947  00FEAA  69                 	db	105	;'i'
   948  00FEAB  6E                 	db	110	;'n'
   949  00FEAC  20                 	db	32
   950  00FEAD  0A                 	db	10
   951  00FEAE  32                 	db	50	;'2'
   952  00FEAF  3A                 	db	58	;':'
   953  00FEB0  20                 	db	32
   954  00FEB1  56                 	db	86	;'V'
   955  00FEB2  69                 	db	105	;'i'
   956  00FEB3  65                 	db	101	;'e'
   957  00FEB4  77                 	db	119	;'w'
   958  00FEB5  20                 	db	32
   959  00FEB6  4C                 	db	76	;'L'
   960  00FEB7  6F                 	db	111	;'o'
   961  00FEB8  67                 	db	103	;'g'
   962  00FEB9  73                 	db	115	;'s'
   963  00FEBA  00                 	db	0
   964  00FEBB                     STR_10:
   965  00FEBB  4E                 	db	78	;'N'
   966  00FEBC  6F                 	db	111	;'o'
   967  00FEBD  74                 	db	116	;'t'
   968  00FEBE  20                 	db	32
   969  00FEBF  74                 	db	116	;'t'
   970  00FEC0  68                 	db	104	;'h'
   971  00FEC1  65                 	db	101	;'e'
   972  00FEC2  72                 	db	114	;'r'
   973  00FEC3  65                 	db	101	;'e'
   974  00FEC4  20                 	db	32
   975  00FEC5  79                 	db	121	;'y'
   976  00FEC6  65                 	db	101	;'e'
   977  00FEC7  74                 	db	116	;'t'
   978  00FEC8  0A                 	db	10
   979  00FEC9  2A                 	db	42
   980  00FECA  20                 	db	32
   981  00FECB  74                 	db	116	;'t'
   982  00FECC  6F                 	db	111	;'o'
   983  00FECD  20                 	db	32
   984  00FECE  72                 	db	114	;'r'
   985  00FECF  65                 	db	101	;'e'
   986  00FED0  74                 	db	116	;'t'
   987  00FED1  75                 	db	117	;'u'
   988  00FED2  72                 	db	114	;'r'
   989  00FED3  6E                 	db	110	;'n'
   990  00FED4  00                 	db	0
   991  00FED5                     STR_11:
   992  00FED5  53                 	db	83	;'S'
   993  00FED6  74                 	db	116	;'t'
   994  00FED7  61                 	db	97	;'a'
   995  00FED8  72                 	db	114	;'r'
   996  00FED9  74                 	db	116	;'t'
   997  00FEDA  65                 	db	101	;'e'
   998  00FEDB  64                 	db	100	;'d'
   999  00FEDC  20                 	db	32
  1000  00FEDD  69                 	db	105	;'i'
  1001  00FEDE  6E                 	db	110	;'n'
  1002  00FEDF  70                 	db	112	;'p'
  1003  00FEE0  75                 	db	117	;'u'
  1004  00FEE1  74                 	db	116	;'t'
  1005  00FEE2  20                 	db	32
  1006  00FEE3  65                 	db	101	;'e'
  1007  00FEE4  6E                 	db	110	;'n'
  1008  00FEE5  74                 	db	116	;'t'
  1009  00FEE6  72                 	db	114	;'r'
  1010  00FEE7  79                 	db	121	;'y'
  1011  00FEE8  2C                 	db	44
  1012  00FEE9  20                 	db	32
  1013  00FEEA  68                 	db	104	;'h'
  1014  00FEEB  69                 	db	105	;'i'
  1015  00FEEC  00                 	db	0
  1016  00FEED  00                 	db	0
  1017  00FEEE                     STR_7:
  1018  00FEEE  01                 	db	1
  1019  00FEEF  42                 	db	66	;'B'
  1020  00FEF0  3A                 	db	58	;':'
  1021  00FEF1  25                 	db	37
  1022  00FEF2  64                 	db	100	;'d'
  1023  00FEF3  20                 	db	32
  1024  00FEF4  4E                 	db	78	;'N'
  1025  00FEF5  3A                 	db	58	;':'
  1026  00FEF6  25                 	db	37
  1027  00FEF7  64                 	db	100	;'d'
  1028  00FEF8  20                 	db	32
  1029  00FEF9  53                 	db	83	;'S'
  1030  00FEFA  3A                 	db	58	;':'
  1031  00FEFB  25                 	db	37
  1032  00FEFC  64                 	db	100	;'d'
  1033  00FEFD  20                 	db	32
  1034  00FEFE  57                 	db	87	;'W'
  1035  00FEFF  3A                 	db	58	;':'
  1036  00FF00  25                 	db	37
  1037  00FF01  64                 	db	100	;'d'
  1038  00FF02  00                 	db	0
  1039  00FF03  00                 	db	0
  1040  00FF04                     STR_17:
  1041  00FF04  01                 	db	1
  1042  00FF05  53                 	db	83	;'S'
  1043  00FF06  74                 	db	116	;'t'
  1044  00FF07  61                 	db	97	;'a'
  1045  00FF08  72                 	db	114	;'r'
  1046  00FF09  74                 	db	116	;'t'
  1047  00FF0A  69                 	db	105	;'i'
  1048  00FF0B  6E                 	db	110	;'n'
  1049  00FF0C  67                 	db	103	;'g'
  1050  00FF0D  20                 	db	32
  1051  00FF0E  70                 	db	112	;'p'
  1052  00FF0F  61                 	db	97	;'a'
  1053  00FF10  63                 	db	99	;'c'
  1054  00FF11  6B                 	db	107	;'k'
  1055  00FF12  61                 	db	97	;'a'
  1056  00FF13  67                 	db	103	;'g'
  1057  00FF14  69                 	db	105	;'i'
  1058  00FF15  6E                 	db	110	;'n'
  1059  00FF16  67                 	db	103	;'g'
  1060  00FF17  00                 	db	0
  1061  00FF18  00                 	db	0
  1062  00FF19                     STR_16:
  1063  00FF19  53                 	db	83	;'S'
  1064  00FF1A  74                 	db	116	;'t'
  1065  00FF1B  61                 	db	97	;'a'
  1066  00FF1C  72                 	db	114	;'r'
  1067  00FF1D  74                 	db	116	;'t'
  1068  00FF1E  69                 	db	105	;'i'
  1069  00FF1F  6E                 	db	110	;'n'
  1070  00FF20  67                 	db	103	;'g'
  1071  00FF21  20                 	db	32
  1072  00FF22  70                 	db	112	;'p'
  1073  00FF23  61                 	db	97	;'a'
  1074  00FF24  63                 	db	99	;'c'
  1075  00FF25  6B                 	db	107	;'k'
  1076  00FF26  61                 	db	97	;'a'
  1077  00FF27  67                 	db	103	;'g'
  1078  00FF28  69                 	db	105	;'i'
  1079  00FF29  6E                 	db	110	;'n'
  1080  00FF2A  67                 	db	103	;'g'
  1081  00FF2B  00                 	db	0
  1082  00FF2C                     STR_5:
  1083  00FF2C  01                 	db	1
  1084  00FF2D  44                 	db	68	;'D'
  1085  00FF2E  6F                 	db	111	;'o'
  1086  00FF2F  6E                 	db	110	;'n'
  1087  00FF30  65                 	db	101	;'e'
  1088  00FF31  20                 	db	32
  1089  00FF32  63                 	db	99	;'c'
  1090  00FF33  6F                 	db	111	;'o'
  1091  00FF34  6D                 	db	109	;'m'
  1092  00FF35  70                 	db	112	;'p'
  1093  00FF36  61                 	db	97	;'a'
  1094  00FF37  72                 	db	114	;'r'
  1095  00FF38  74                 	db	116	;'t'
  1096  00FF39  6D                 	db	109	;'m'
  1097  00FF3A  65                 	db	101	;'e'
  1098  00FF3B  6E                 	db	110	;'n'
  1099  00FF3C  74                 	db	116	;'t'
  1100  00FF3D  00                 	db	0
  1101  00FF3E  00                 	db	0
  1102  00FF3F                     STR_9:
  1103  00FF3F  50                 	db	80	;'P'
  1104  00FF40  72                 	db	114	;'r'
  1105  00FF41  65                 	db	101	;'e'
  1106  00FF42  73                 	db	115	;'s'
  1107  00FF43  73                 	db	115	;'s'
  1108  00FF44  20                 	db	32
  1109  00FF45  31                 	db	49	;'1'
  1110  00FF46  20                 	db	32
  1111  00FF47  74                 	db	116	;'t'
  1112  00FF48  6F                 	db	111	;'o'
  1113  00FF49  20                 	db	32
  1114  00FF4A  62                 	db	98	;'b'
  1115  00FF4B  65                 	db	101	;'e'
  1116  00FF4C  67                 	db	103	;'g'
  1117  00FF4D  69                 	db	105	;'i'
  1118  00FF4E  6E                 	db	110	;'n'
  1119  00FF4F  00                 	db	0
  1120  00FF50                     STR_14:
  1121  00FF50  50                 	db	80	;'P'
  1122  00FF51  72                 	db	114	;'r'
  1123  00FF52  65                 	db	101	;'e'
  1124  00FF53  73                 	db	115	;'s'
  1125  00FF54  73                 	db	115	;'s'
  1126  00FF55  20                 	db	32
  1127  00FF56  31                 	db	49	;'1'
  1128  00FF57  20                 	db	32
  1129  00FF58  74                 	db	116	;'t'
  1130  00FF59  6F                 	db	111	;'o'
  1131  00FF5A  20                 	db	32
  1132  00FF5B  73                 	db	115	;'s'
  1133  00FF5C  74                 	db	116	;'t'
  1134  00FF5D  61                 	db	97	;'a'
  1135  00FF5E  72                 	db	114	;'r'
  1136  00FF5F  74                 	db	116	;'t'
  1137  00FF60  00                 	db	0
  1138  00FF61                     STR_3:
  1139  00FF61  01                 	db	1
  1140  00FF62  53                 	db	83	;'S'
  1141  00FF63  70                 	db	112	;'p'
  1142  00FF64  61                 	db	97	;'a'
  1143  00FF65  63                 	db	99	;'c'
  1144  00FF66  65                 	db	101	;'e'
  1145  00FF67  72                 	db	114	;'r'
  1146  00FF68  20                 	db	32
  1147  00FF69  43                 	db	67	;'C'
  1148  00FF6A  6F                 	db	111	;'o'
  1149  00FF6B  75                 	db	117	;'u'
  1150  00FF6C  6E                 	db	110	;'n'
  1151  00FF6D  74                 	db	116	;'t'
  1152  00FF6E  65                 	db	101	;'e'
  1153  00FF6F  64                 	db	100	;'d'
  1154  00FF70  00                 	db	0
  1155  00FF71  00                 	db	0
  1156  00FF72                     STR_4:
  1157  00FF72  01                 	db	1
  1158  00FF73  57                 	db	87	;'W'
  1159  00FF74  61                 	db	97	;'a'
  1160  00FF75  73                 	db	115	;'s'
  1161  00FF76  68                 	db	104	;'h'
  1162  00FF77  65                 	db	101	;'e'
  1163  00FF78  72                 	db	114	;'r'
  1164  00FF79  20                 	db	32
  1165  00FF7A  43                 	db	67	;'C'
  1166  00FF7B  6F                 	db	111	;'o'
  1167  00FF7C  75                 	db	117	;'u'
  1168  00FF7D  6E                 	db	110	;'n'
  1169  00FF7E  74                 	db	116	;'t'
  1170  00FF7F  65                 	db	101	;'e'
  1171  00FF80  64                 	db	100	;'d'
  1172  00FF81  00                 	db	0
  1173  00FF82  00                 	db	0
  1174  00FF83                     STR_21:
  1175  00FF83  42                 	db	66	;'B'
  1176  00FF84  25                 	db	37
  1177  00FF85  64                 	db	100	;'d'
  1178  00FF86  20                 	db	32
  1179  00FF87  4E                 	db	78	;'N'
  1180  00FF88  25                 	db	37
  1181  00FF89  64                 	db	100	;'d'
  1182  00FF8A  20                 	db	32
  1183  00FF8B  53                 	db	83	;'S'
  1184  00FF8C  25                 	db	37
  1185  00FF8D  64                 	db	100	;'d'
  1186  00FF8E  20                 	db	32
  1187  00FF8F  57                 	db	87	;'W'
  1188  00FF90  25                 	db	37
  1189  00FF91  64                 	db	100	;'d'
  1190  00FF92  00                 	db	0
  1191  00FF93                     STR_1:
  1192  00FF93  01                 	db	1
  1193  00FF94  42                 	db	66	;'B'
  1194  00FF95  6F                 	db	111	;'o'
  1195  00FF96  6C                 	db	108	;'l'
  1196  00FF97  74                 	db	116	;'t'
  1197  00FF98  20                 	db	32
  1198  00FF99  43                 	db	67	;'C'
  1199  00FF9A  6F                 	db	111	;'o'
  1200  00FF9B  75                 	db	117	;'u'
  1201  00FF9C  6E                 	db	110	;'n'
  1202  00FF9D  74                 	db	116	;'t'
  1203  00FF9E  65                 	db	101	;'e'
  1204  00FF9F  64                 	db	100	;'d'
  1205  00FFA0  00                 	db	0
  1206  00FFA1  00                 	db	0
  1207  00FFA2                     STR_8:
  1208  00FFA2  43                 	db	67	;'C'
  1209  00FFA3  6F                 	db	111	;'o'
  1210  00FFA4  6D                 	db	109	;'m'
  1211  00FFA5  70                 	db	112	;'p'
  1212  00FFA6  61                 	db	97	;'a'
  1213  00FFA7  72                 	db	114	;'r'
  1214  00FFA8  74                 	db	116	;'t'
  1215  00FFA9  6D                 	db	109	;'m'
  1216  00FFAA  65                 	db	101	;'e'
  1217  00FFAB  6E                 	db	110	;'n'
  1218  00FFAC  74                 	db	116	;'t'
  1219  00FFAD  20                 	db	32
  1220  00FFAE  25                 	db	37
  1221  00FFAF  64                 	db	100	;'d'
  1222  00FFB0  00                 	db	0
  1223  00FFB1                     STR_12:
  1224  00FFB1  01                 	db	1
  1225  00FFB2  44                 	db	68	;'D'
  1226  00FFB3  6F                 	db	111	;'o'
  1227  00FFB4  6E                 	db	110	;'n'
  1228  00FFB5  65                 	db	101	;'e'
  1229  00FFB6  20                 	db	32
  1230  00FFB7  69                 	db	105	;'i'
  1231  00FFB8  6E                 	db	110	;'n'
  1232  00FFB9  70                 	db	112	;'p'
  1233  00FFBA  75                 	db	117	;'u'
  1234  00FFBB  74                 	db	116	;'t'
  1235  00FFBC  73                 	db	115	;'s'
  1236  00FFBD  00                 	db	0
  1237  00FFBE  00                 	db	0
  1238  00FFBF                     STR_2:
  1239  00FFBF  01                 	db	1
  1240  00FFC0  4E                 	db	78	;'N'
  1241  00FFC1  75                 	db	117	;'u'
  1242  00FFC2  74                 	db	116	;'t'
  1243  00FFC3  20                 	db	32
  1244  00FFC4  43                 	db	67	;'C'
  1245  00FFC5  6F                 	db	111	;'o'
  1246  00FFC6  75                 	db	117	;'u'
  1247  00FFC7  6E                 	db	110	;'n'
  1248  00FFC8  74                 	db	116	;'t'
  1249  00FFC9  65                 	db	101	;'e'
  1250  00FFCA  64                 	db	100	;'d'
  1251  00FFCB  00                 	db	0
  1252  00FFCC  00                 	db	0
  1253  00FFCD                     STR_19:
  1254  00FFCD  43                 	db	67	;'C'
  1255  00FFCE  25                 	db	37
  1256  00FFCF  64                 	db	100	;'d'
  1257  00FFD0  3A                 	db	58	;':'
  1258  00FFD1  20                 	db	32
  1259  00FFD2  25                 	db	37
  1260  00FFD3  73                 	db	115	;'s'
  1261  00FFD4  20                 	db	32
  1262  00FFD5  78                 	db	120	;'x'
  1263  00FFD6  25                 	db	37
  1264  00FFD7  64                 	db	100	;'d'
  1265  00FFD8  00                 	db	0
  1266  00FFD9                     STR_20:
  1267  00FFD9  52                 	db	82	;'R'
  1268  00FFDA  65                 	db	101	;'e'
  1269  00FFDB  6D                 	db	109	;'m'
  1270  00FFDC  61                 	db	97	;'a'
  1271  00FFDD  69                 	db	105	;'i'
  1272  00FFDE  6E                 	db	110	;'n'
  1273  00FFDF  69                 	db	105	;'i'
  1274  00FFE0  6E                 	db	110	;'n'
  1275  00FFE1  67                 	db	103	;'g'
  1276  00FFE2  3A                 	db	58	;':'
  1277  00FFE3  00                 	db	0
  1278  00FFE4                     STR_18:
  1279  00FFE4  53                 	db	83	;'S'
  1280  00FFE5  75                 	db	117	;'u'
  1281  00FFE6  6D                 	db	109	;'m'
  1282  00FFE7  6D                 	db	109	;'m'
  1283  00FFE8  61                 	db	97	;'a'
  1284  00FFE9  72                 	db	114	;'r'
  1285  00FFEA  79                 	db	121	;'y'
  1286  00FFEB  3A                 	db	58	;':'
  1287  00FFEC  00                 	db	0
  1288  00FFED                     STR_24:
  1289  00FFED  28                 	db	40
  1290  00FFEE  6E                 	db	110	;'n'
  1291  00FFEF  75                 	db	117	;'u'
  1292  00FFF0  6C                 	db	108	;'l'
  1293  00FFF1  6C                 	db	108	;'l'
  1294  00FFF2  29                 	db	41
  1295  00FFF3  00                 	db	0
  1296  00FFF4                     STR_22:
  1297  00FFF4  54                 	db	84	;'T'
  1298  00FFF5  69                 	db	105	;'i'
  1299  00FFF6  6D                 	db	109	;'m'
  1300  00FFF7  65                 	db	101	;'e'
  1301  00FFF8  3A                 	db	58	;':'
  1302  00FFF9  00                 	db	0
  1303  00FFFA                     STR_23:
  1304  00FFFA  25                 	db	37
  1305  00FFFB  6C                 	db	108	;'l'
  1306  00FFFC  64                 	db	100	;'d'
  1307  00FFFD  00                 	db	0
  1308  0000                     
  1309                           ; #config settings
  1310  00FFFE  00                 	db	0	; dummy byte at the end
  1311  0000                     
  1312                           	psect	cinit
  1313  0020F2                     __pcinit:
  1314                           	opt stack 0
  1315  0020F2                     start_initialization:
  1316                           	opt stack 0
  1317  0020F2                     __initialization:
  1318                           	opt stack 0
  1319                           
  1320                           ; Initialize objects allocated to BANK1 (163 bytes)
  1321                           ; load TBLPTR registers with __pidataBANK1
  1322  0020F2  0E1A               	movlw	low __pidataBANK1
  1323  0020F4  6EF6               	movwf	tblptrl,c
  1324  0020F6  0E1F               	movlw	high __pidataBANK1
  1325  0020F8  6EF7               	movwf	tblptrh,c
  1326  0020FA  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1327  0020FC  6EF8               	movwf	tblptru,c
  1328  0020FE  EE01  F000         	lfsr	0,__pdataBANK1
  1329  002102  EE10 F0A3          	lfsr	1,163
  1330  002106                     copy_data0:
  1331  002106  0009               	tblrd		*+
  1332  002108  CFF5 FFEE          	movff	tablat,postinc0
  1333  00210C  50E5               	movf	postdec1,w,c
  1334  00210E  50E1               	movf	fsr1l,w,c
  1335  002110  E1FA               	bnz	copy_data0
  1336                           
  1337                           ; Initialize objects allocated to BANK0 (2 bytes)
  1338                           ; load TBLPTR registers with __pidataBANK0
  1339  002112  0E72               	movlw	low __pidataBANK0
  1340  002114  6EF6               	movwf	tblptrl,c
  1341  002116  0E28               	movlw	high __pidataBANK0
  1342  002118  6EF7               	movwf	tblptrh,c
  1343  00211A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1344  00211C  6EF8               	movwf	tblptru,c
  1345  00211E  0009               	tblrd		*+	;fetch initializer
  1346  002120  CFF5 F0FD          	movff	tablat,__pdataBANK0
  1347  002124  0009               	tblrd		*+	;fetch initializer
  1348  002126  CFF5 F0FE          	movff	tablat,__pdataBANK0+1
  1349                           
  1350                           ; Initialize objects allocated to COMRAM (6 bytes)
  1351                           ; load TBLPTR registers with __pidataCOMRAM
  1352  00212A  0E6C               	movlw	low __pidataCOMRAM
  1353  00212C  6EF6               	movwf	tblptrl,c
  1354  00212E  0E28               	movlw	high __pidataCOMRAM
  1355  002130  6EF7               	movwf	tblptrh,c
  1356  002132  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1357  002134  6EF8               	movwf	tblptru,c
  1358  002136  EE00  F053         	lfsr	0,__pdataCOMRAM
  1359  00213A  EE10 F006          	lfsr	1,6
  1360  00213E                     copy_data1:
  1361  00213E  0009               	tblrd		*+
  1362  002140  CFF5 FFEE          	movff	tablat,postinc0
  1363  002144  50E5               	movf	postdec1,w,c
  1364  002146  50E1               	movf	fsr1l,w,c
  1365  002148  E1FA               	bnz	copy_data1
  1366                           
  1367                           ; Clear objects allocated to BANK1 (26 bytes)
  1368  00214A  EE01  F0A3         	lfsr	0,__pbssBANK1
  1369  00214E  0E1A               	movlw	26
  1370  002150                     clear_0:
  1371  002150  6AEE               	clrf	postinc0,c
  1372  002152  06E8               	decf	wreg,f,c
  1373  002154  E1FD               	bnz	clear_0
  1374                           
  1375                           ; Clear objects allocated to BANK0 (4 bytes)
  1376  002156  0100               	movlb	0
  1377  002158  6BFC               	clrf	(__pbssBANK0+3)& (0+255),b
  1378  00215A  6BFB               	clrf	(__pbssBANK0+2)& (0+255),b
  1379  00215C  6BFA               	clrf	(__pbssBANK0+1)& (0+255),b
  1380  00215E  6BF9               	clrf	__pbssBANK0& (0+255),b
  1381                           
  1382                           ; Clear objects allocated to COMRAM (31 bytes)
  1383  002160  EE00  F034         	lfsr	0,__pbssCOMRAM
  1384  002164  0E1F               	movlw	31
  1385  002166                     clear_1:
  1386  002166  6AEE               	clrf	postinc0,c
  1387  002168  06E8               	decf	wreg,f,c
  1388  00216A  E1FD               	bnz	clear_1
  1389  00216C                     end_of_initialization:
  1390                           	opt stack 0
  1391  00216C                     __end_of__initialization:
  1392                           	opt stack 0
  1393  00216C  9059               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1394  00216E  9259               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1395  002170  0100               	movlb	0
  1396  002172  EFBB  F010         	goto	_main	;jump to C main() function
  1397                           tblptru	equ	0xFF8
  1398                           tblptrh	equ	0xFF7
  1399                           tblptrl	equ	0xFF6
  1400                           tablat	equ	0xFF5
  1401                           postinc0	equ	0xFEE
  1402                           wreg	equ	0xFE8
  1403                           postdec1	equ	0xFE5
  1404                           fsr1l	equ	0xFE1
  1405                           
  1406                           	psect	bssCOMRAM
  1407  000034                     __pbssCOMRAM:
  1408                           	opt stack 0
  1409  000034                     _dispensed:
  1410                           	opt stack 0
  1411  000034                     	ds	8
  1412  00003C                     _extras:
  1413                           	opt stack 0
  1414  00003C                     	ds	8
  1415  000044                     _endTime:
  1416                           	opt stack 0
  1417  000044                     	ds	4
  1418  000048                     _startTime:
  1419                           	opt stack 0
  1420  000048                     	ds	4
  1421  00004C                     	ds	4
  1422  000050                     _timerInit:
  1423                           	opt stack 0
  1424  000050                     	ds	1
  1425  000051                     _operating:
  1426                           	opt stack 0
  1427  000051                     	ds	1
  1428  000052                     _LCDinterruptState:
  1429                           	opt stack 0
  1430  000052                     	ds	1
  1431                           tblptru	equ	0xFF8
  1432                           tblptrh	equ	0xFF7
  1433                           tblptrl	equ	0xFF6
  1434                           tablat	equ	0xFF5
  1435                           postinc0	equ	0xFEE
  1436                           wreg	equ	0xFE8
  1437                           postdec1	equ	0xFE5
  1438                           fsr1l	equ	0xFE1
  1439                           
  1440                           	psect	dataCOMRAM
  1441  000053                     __pdataCOMRAM:
  1442                           	opt stack 0
  1443  000053                     _timeSinceLastTic:
  1444                           	opt stack 0
  1445  000053                     	ds	3
  1446  000056                     timer@operatingTime:
  1447                           	opt stack 0
  1448  000056                     	ds	3
  1449                           tblptru	equ	0xFF8
  1450                           tblptrh	equ	0xFF7
  1451                           tblptrl	equ	0xFF6
  1452                           tablat	equ	0xFF5
  1453                           postinc0	equ	0xFEE
  1454                           wreg	equ	0xFE8
  1455                           postdec1	equ	0xFE5
  1456                           fsr1l	equ	0xFE1
  1457                           
  1458                           	psect	bssBANK0
  1459  0000F9                     __pbssBANK0:
  1460                           	opt stack 0
  1461  0000F9                     _test:
  1462                           	opt stack 0
  1463  0000F9                     	ds	4
  1464                           tblptru	equ	0xFF8
  1465                           tblptrh	equ	0xFF7
  1466                           tblptrl	equ	0xFF6
  1467                           tablat	equ	0xFF5
  1468                           postinc0	equ	0xFEE
  1469                           wreg	equ	0xFE8
  1470                           postdec1	equ	0xFE5
  1471                           fsr1l	equ	0xFE1
  1472                           
  1473                           	psect	dataBANK0
  1474  0000FD                     __pdataBANK0:
  1475                           	opt stack 0
  1476  0000FD                     inputEntry@F3177:
  1477                           	opt stack 0
  1478  0000FD                     	ds	2
  1479                           tblptru	equ	0xFF8
  1480                           tblptrh	equ	0xFF7
  1481                           tblptrl	equ	0xFF6
  1482                           tablat	equ	0xFF5
  1483                           postinc0	equ	0xFEE
  1484                           wreg	equ	0xFE8
  1485                           postdec1	equ	0xFE5
  1486                           fsr1l	equ	0xFE1
  1487                           
  1488                           	psect	bssBANK1
  1489  0001A3                     __pbssBANK1:
  1490                           	opt stack 0
  1491  0001A3                     _params:
  1492                           	opt stack 0
  1493  0001A3                     	ds	26
  1494                           tblptru	equ	0xFF8
  1495                           tblptrh	equ	0xFF7
  1496                           tblptrl	equ	0xFF6
  1497                           tablat	equ	0xFF5
  1498                           postinc0	equ	0xFEE
  1499                           wreg	equ	0xFE8
  1500                           postdec1	equ	0xFE5
  1501                           fsr1l	equ	0xFE1
  1502                           
  1503                           	psect	dataBANK1
  1504  000100                     __pdataBANK1:
  1505                           	opt stack 0
  1506  000100                     packaging@F3205:
  1507                           	opt stack 0
  1508  000100                     	ds	34
  1509  000122                     inputEntry@F3198:
  1510                           	opt stack 0
  1511  000122                     	ds	24
  1512  00013A                     _fSLookup:
  1513                           	opt stack 0
  1514  00013A                     	ds	105
  1515                           tblptru	equ	0xFF8
  1516                           tblptrh	equ	0xFF7
  1517                           tblptrl	equ	0xFF6
  1518                           tablat	equ	0xFF5
  1519                           postinc0	equ	0xFEE
  1520                           wreg	equ	0xFE8
  1521                           postdec1	equ	0xFE5
  1522                           fsr1l	equ	0xFE1
  1523                           
  1524                           	psect	cstackBANK2
  1525  000200                     __pcstackBANK2:
  1526                           	opt stack 0
  1527  000200                     packaging@msg:
  1528                           	opt stack 0
  1529                           
  1530                           ; 34 bytes @ 0x0
  1531  000200                     	ds	34
  1532  000222                     packaging@msg2:
  1533                           	opt stack 0
  1534                           
  1535                           ; 32 bytes @ 0x22
  1536  000222                     	ds	32
  1537  000242                     packaging@compartmentNum:
  1538                           	opt stack 0
  1539                           
  1540                           ; 2 bytes @ 0x42
  1541  000242                     	ds	2
  1542  000244                     packaging@set:
  1543                           	opt stack 0
  1544                           
  1545                           ; 2 bytes @ 0x44
  1546  000244                     	ds	2
  1547  000246                     packaging@mult:
  1548                           	opt stack 0
  1549                           
  1550                           ; 2 bytes @ 0x46
  1551  000246                     	ds	2
  1552                           tblptru	equ	0xFF8
  1553                           tblptrh	equ	0xFF7
  1554                           tblptrl	equ	0xFF6
  1555                           tablat	equ	0xFF5
  1556                           postinc0	equ	0xFEE
  1557                           wreg	equ	0xFE8
  1558                           postdec1	equ	0xFE5
  1559                           fsr1l	equ	0xFE1
  1560                           
  1561                           	psect	cstackBANK0
  1562  000080                     __pcstackBANK0:
  1563                           	opt stack 0
  1564  000080                     ?___llmod:
  1565                           	opt stack 0
  1566  000080                     ___fttol@sign1:
  1567                           	opt stack 0
  1568  000080                     clearing@spinTime:
  1569                           	opt stack 0
  1570  000080                     printStringLCD@j:
  1571                           	opt stack 0
  1572  000080                     I2C_Master_Init@clockFreq:
  1573                           	opt stack 0
  1574  000080                     ___llmod@dividend:
  1575                           	opt stack 0
  1576  000080                     RTC_getSeconds@time:
  1577                           	opt stack 0
  1578                           
  1579                           ; 7 bytes @ 0x0
  1580  000080                     	ds	1
  1581  000081                     ___fttol@lval:
  1582                           	opt stack 0
  1583                           
  1584                           ; 4 bytes @ 0x1
  1585  000081                     	ds	1
  1586  000082                     clearing@i:
  1587                           	opt stack 0
  1588  000082                     printStringLCD@spaceIndex:
  1589                           	opt stack 0
  1590                           
  1591                           ; 2 bytes @ 0x2
  1592  000082                     	ds	2
  1593  000084                     ??_I2C_Master_Init:
  1594  000084                     printStringLCD@newlineIndex:
  1595                           	opt stack 0
  1596  000084                     ___llmod@divisor:
  1597                           	opt stack 0
  1598                           
  1599                           ; 4 bytes @ 0x4
  1600  000084                     	ds	1
  1601  000085                     ___fttol@exp1:
  1602                           	opt stack 0
  1603                           
  1604                           ; 1 bytes @ 0x5
  1605  000085                     	ds	1
  1606  000086                     packageCompartment@n:
  1607                           	opt stack 0
  1608  000086                     printStringLCD@newlineCharIndex:
  1609                           	opt stack 0
  1610                           
  1611                           ; 2 bytes @ 0x6
  1612  000086                     	ds	1
  1613  000087                     packageCompartment@s:
  1614                           	opt stack 0
  1615  000087                     RTC_getSeconds@seconds:
  1616                           	opt stack 0
  1617                           
  1618                           ; 4 bytes @ 0x7
  1619  000087                     	ds	1
  1620  000088                     packageCompartment@w:
  1621                           	opt stack 0
  1622  000088                     ___llmod@counter:
  1623                           	opt stack 0
  1624  000088                     printStringLCD@i:
  1625                           	opt stack 0
  1626                           
  1627                           ; 2 bytes @ 0x8
  1628  000088                     	ds	1
  1629  000089                     ??_packageCompartment:
  1630  000089                     ?__doprnt:
  1631                           	opt stack 0
  1632  000089                     __doprnt@pb:
  1633                           	opt stack 0
  1634                           
  1635                           ; 2 bytes @ 0x9
  1636  000089                     	ds	1
  1637  00008A                     ??_hibernate:
  1638  00008A                     ??_printErrorLCD:
  1639  00008A                     viewLogs@pressed:
  1640                           	opt stack 0
  1641                           
  1642                           ; 2 bytes @ 0xA
  1643  00008A                     	ds	1
  1644  00008B                     ?_RTC_getOperatingTime:
  1645                           	opt stack 0
  1646  00008B                     __doprnt@f:
  1647                           	opt stack 0
  1648                           
  1649                           ; 2 bytes @ 0xB
  1650  00008B                     	ds	1
  1651  00008C                     ??_inputEntry:
  1652                           
  1653                           ; 1 bytes @ 0xC
  1654  00008C                     	ds	1
  1655  00008D                     __doprnt@ap:
  1656                           	opt stack 0
  1657                           
  1658                           ; 2 bytes @ 0xD
  1659  00008D                     	ds	1
  1660  00008E                     packageCompartment@b:
  1661                           	opt stack 0
  1662                           
  1663                           ; 1 bytes @ 0xE
  1664  00008E                     	ds	1
  1665  00008F                     ??_RTC_getOperatingTime:
  1666  00008F                     ??__doprnt:
  1667  00008F                     packageCompartment@timeB:
  1668                           	opt stack 0
  1669                           
  1670                           ; 4 bytes @ 0xF
  1671  00008F                     	ds	1
  1672  000090                     inputEntry@msg:
  1673                           	opt stack 0
  1674                           
  1675                           ; 24 bytes @ 0x10
  1676  000090                     	ds	1
  1677  000091                     __doprnt@prec:
  1678                           	opt stack 0
  1679                           
  1680                           ; 2 bytes @ 0x11
  1681  000091                     	ds	2
  1682  000093                     __doprnt@flag:
  1683                           	opt stack 0
  1684  000093                     packageCompartment@timeN:
  1685                           	opt stack 0
  1686                           
  1687                           ; 4 bytes @ 0x13
  1688  000093                     	ds	1
  1689  000094                     __doprnt@val:
  1690                           	opt stack 0
  1691                           
  1692                           ; 4 bytes @ 0x14
  1693  000094                     	ds	3
  1694  000097                     packageCompartment@timeS:
  1695                           	opt stack 0
  1696                           
  1697                           ; 4 bytes @ 0x17
  1698  000097                     	ds	1
  1699  000098                     __doprnt@cp:
  1700                           	opt stack 0
  1701                           
  1702                           ; 2 bytes @ 0x18
  1703  000098                     	ds	2
  1704  00009A                     __doprnt@c:
  1705                           	opt stack 0
  1706                           
  1707                           ; 1 bytes @ 0x1A
  1708  00009A                     	ds	1
  1709  00009B                     ?_sprintf:
  1710                           	opt stack 0
  1711  00009B                     ?_printf:
  1712                           	opt stack 0
  1713  00009B                     printf@f:
  1714                           	opt stack 0
  1715  00009B                     sprintf@wh:
  1716                           	opt stack 0
  1717  00009B                     packageCompartment@timeW:
  1718                           	opt stack 0
  1719                           
  1720                           ; 4 bytes @ 0x1B
  1721  00009B                     	ds	2
  1722  00009D                     sprintf@f:
  1723                           	opt stack 0
  1724                           
  1725                           ; 2 bytes @ 0x1D
  1726  00009D                     	ds	2
  1727  00009F                     packageCompartment@numB:
  1728                           	opt stack 0
  1729                           
  1730                           ; 2 bytes @ 0x1F
  1731  00009F                     	ds	2
  1732  0000A1                     packageCompartment@numN:
  1733                           	opt stack 0
  1734                           
  1735                           ; 2 bytes @ 0x21
  1736  0000A1                     	ds	2
  1737  0000A3                     packageCompartment@numS:
  1738                           	opt stack 0
  1739                           
  1740                           ; 2 bytes @ 0x23
  1741  0000A3                     	ds	2
  1742  0000A5                     packageCompartment@numW:
  1743                           	opt stack 0
  1744  0000A5                     printf@ap:
  1745                           	opt stack 0
  1746                           
  1747                           ; 2 bytes @ 0x25
  1748  0000A5                     	ds	2
  1749  0000A7                     packageCompartment@doneB:
  1750                           	opt stack 0
  1751  0000A7                     sprintf@ap:
  1752                           	opt stack 0
  1753  0000A7                     printf@pb:
  1754                           	opt stack 0
  1755                           
  1756                           ; 4 bytes @ 0x27
  1757  0000A7                     	ds	1
  1758  0000A8                     inputEntry@fastenerString:
  1759                           	opt stack 0
  1760                           
  1761                           ; 32 bytes @ 0x28
  1762  0000A8                     	ds	1
  1763  0000A9                     packageCompartment@doneN:
  1764                           	opt stack 0
  1765  0000A9                     sprintf@pb:
  1766                           	opt stack 0
  1767                           
  1768                           ; 4 bytes @ 0x29
  1769  0000A9                     	ds	2
  1770  0000AB                     packageCompartment@doneS:
  1771                           	opt stack 0
  1772                           
  1773                           ; 2 bytes @ 0x2B
  1774  0000AB                     	ds	2
  1775  0000AD                     packageCompartment@doneW:
  1776                           	opt stack 0
  1777                           
  1778                           ; 2 bytes @ 0x2D
  1779  0000AD                     	ds	2
  1780  0000AF                     packageCompartment@resolution:
  1781                           	opt stack 0
  1782                           
  1783                           ; 1 bytes @ 0x2F
  1784  0000AF                     	ds	1
  1785  0000B0                     packageCompartment@currTime:
  1786                           	opt stack 0
  1787                           
  1788                           ; 4 bytes @ 0x30
  1789  0000B0                     	ds	4
  1790  0000B4                     ??_packaging:
  1791                           
  1792                           ; 1 bytes @ 0x34
  1793  0000B4                     	ds	20
  1794  0000C8                     inputEntry@compartmentLabel:
  1795                           	opt stack 0
  1796                           
  1797                           ; 2 bytes @ 0x48
  1798  0000C8                     	ds	2
  1799  0000CA                     inputEntry@compartmentsToFill:
  1800                           	opt stack 0
  1801                           
  1802                           ; 1 bytes @ 0x4A
  1803  0000CA                     	ds	1
  1804  0000CB                     inputEntry@done:
  1805                           	opt stack 0
  1806                           
  1807                           ; 2 bytes @ 0x4B
  1808  0000CB                     	ds	2
  1809  0000CD                     inputEntry@found:
  1810                           	opt stack 0
  1811                           
  1812                           ; 2 bytes @ 0x4D
  1813  0000CD                     	ds	2
  1814  0000CF                     inputEntry@setIsGood:
  1815                           	opt stack 0
  1816                           
  1817                           ; 2 bytes @ 0x4F
  1818  0000CF                     	ds	2
  1819  0000D1                     inputEntry@doneMultiples:
  1820                           	opt stack 0
  1821                           
  1822                           ; 2 bytes @ 0x51
  1823  0000D1                     	ds	2
  1824  0000D3                     inputEntry@doneCompartment:
  1825                           	opt stack 0
  1826                           
  1827                           ; 2 bytes @ 0x53
  1828  0000D3                     	ds	2
  1829  0000D5                     inputEntry@sum:
  1830                           	opt stack 0
  1831                           
  1832                           ; 2 bytes @ 0x55
  1833  0000D5                     	ds	2
  1834  0000D7                     inputEntry@numB:
  1835                           	opt stack 0
  1836                           
  1837                           ; 2 bytes @ 0x57
  1838  0000D7                     	ds	2
  1839  0000D9                     inputEntry@numN:
  1840                           	opt stack 0
  1841                           
  1842                           ; 2 bytes @ 0x59
  1843  0000D9                     	ds	2
  1844  0000DB                     inputEntry@numS:
  1845                           	opt stack 0
  1846                           
  1847                           ; 2 bytes @ 0x5B
  1848  0000DB                     	ds	2
  1849  0000DD                     inputEntry@numW:
  1850                           	opt stack 0
  1851                           
  1852                           ; 2 bytes @ 0x5D
  1853  0000DD                     	ds	2
  1854  0000DF                     inputEntry@inputEntryStep:
  1855                           	opt stack 0
  1856                           
  1857                           ; 2 bytes @ 0x5F
  1858  0000DF                     	ds	2
  1859  0000E1                     inputEntry@numPressed:
  1860                           	opt stack 0
  1861                           
  1862                           ; 2 bytes @ 0x61
  1863  0000E1                     	ds	2
  1864  0000E3                     inputEntry@compartmentNum:
  1865                           	opt stack 0
  1866                           
  1867                           ; 2 bytes @ 0x63
  1868  0000E3                     	ds	2
  1869  0000E5                     inputEntry@i:
  1870                           	opt stack 0
  1871                           
  1872                           ; 2 bytes @ 0x65
  1873  0000E5                     	ds	2
  1874  0000E7                     inputEntry@pressed:
  1875                           	opt stack 0
  1876                           
  1877                           ; 1 bytes @ 0x67
  1878  0000E7                     	ds	1
  1879  0000E8                     ??_mainMenu:
  1880                           
  1881                           ; 1 bytes @ 0x68
  1882  0000E8                     	ds	4
  1883  0000EC                     mainMenu@operationTime:
  1884                           	opt stack 0
  1885                           
  1886                           ; 4 bytes @ 0x6C
  1887  0000EC                     	ds	4
  1888  0000F0                     mainMenu@startPress:
  1889                           	opt stack 0
  1890                           
  1891                           ; 2 bytes @ 0x70
  1892  0000F0                     	ds	2
  1893  0000F2                     mainMenu@needToPrint:
  1894                           	opt stack 0
  1895                           
  1896                           ; 2 bytes @ 0x72
  1897  0000F2                     	ds	2
  1898  0000F4                     mainMenu@pressed:
  1899                           	opt stack 0
  1900                           
  1901                           ; 2 bytes @ 0x74
  1902  0000F4                     	ds	2
  1903  0000F6                     mainMenu@i:
  1904                           	opt stack 0
  1905                           
  1906                           ; 2 bytes @ 0x76
  1907  0000F6                     	ds	2
  1908  0000F8                     ??_main:
  1909                           
  1910                           ; 1 bytes @ 0x78
  1911  0000F8                     	ds	1
  1912                           tblptru	equ	0xFF8
  1913                           tblptrh	equ	0xFF7
  1914                           tblptrl	equ	0xFF6
  1915                           tablat	equ	0xFF5
  1916                           postinc0	equ	0xFEE
  1917                           wreg	equ	0xFE8
  1918                           postdec1	equ	0xFE5
  1919                           fsr1l	equ	0xFE1
  1920                           
  1921                           	psect	cstackCOMRAM
  1922  000001                     __pcstackCOMRAM:
  1923                           	opt stack 0
  1924  000001                     ?___ftpack:
  1925                           	opt stack 0
  1926  000001                     ___ftpack@arg:
  1927                           	opt stack 0
  1928                           
  1929                           ; 3 bytes @ 0x0
  1930  000001                     	ds	3
  1931  000004                     ___ftpack@exp:
  1932                           	opt stack 0
  1933                           
  1934                           ; 1 bytes @ 0x3
  1935  000004                     	ds	1
  1936  000005                     ___ftpack@sign:
  1937                           	opt stack 0
  1938                           
  1939                           ; 1 bytes @ 0x4
  1940  000005                     	ds	1
  1941  000006                     ??___ftpack:
  1942                           
  1943                           ; 1 bytes @ 0x5
  1944  000006                     	ds	3
  1945  000009                     ?___ftadd:
  1946                           	opt stack 0
  1947  000009                     ___ftadd@f1:
  1948                           	opt stack 0
  1949                           
  1950                           ; 3 bytes @ 0x8
  1951  000009                     	ds	3
  1952  00000C                     ___ftadd@f2:
  1953                           	opt stack 0
  1954                           
  1955                           ; 3 bytes @ 0xB
  1956  00000C                     	ds	3
  1957  00000F                     ??___ftadd:
  1958                           
  1959                           ; 1 bytes @ 0xE
  1960  00000F                     	ds	3
  1961  000012                     ___ftadd@sign:
  1962                           	opt stack 0
  1963                           
  1964                           ; 1 bytes @ 0x11
  1965  000012                     	ds	1
  1966  000013                     ___ftadd@exp2:
  1967                           	opt stack 0
  1968                           
  1969                           ; 1 bytes @ 0x12
  1970  000013                     	ds	1
  1971  000014                     ___ftadd@exp1:
  1972                           	opt stack 0
  1973                           
  1974                           ; 1 bytes @ 0x13
  1975  000014                     	ds	1
  1976  000015                     ??_interruptHandler:
  1977                           
  1978                           ; 1 bytes @ 0x14
  1979  000015                     	ds	18
  1980  000027                     ??_I2C_Master_Wait:
  1981  000027                     ?___wmul:
  1982                           	opt stack 0
  1983  000027                     ?_tock:
  1984                           	opt stack 0
  1985  000027                     ?___lldiv:
  1986                           	opt stack 0
  1987  000027                     lcdNibble@temp:
  1988                           	opt stack 0
  1989  000027                     pollKeypad@keypress:
  1990                           	opt stack 0
  1991  000027                     motorControl@dir:
  1992                           	opt stack 0
  1993  000027                     ___wmul@multiplier:
  1994                           	opt stack 0
  1995  000027                     ___lldiv@dividend:
  1996                           	opt stack 0
  1997                           
  1998                           ; 4 bytes @ 0x26
  1999  000027                     	ds	1
  2000  000028                     I2C_Master_Read@ackBit:
  2001                           	opt stack 0
  2002  000028                     lcdNibble@data:
  2003                           	opt stack 0
  2004  000028                     motorControl@motor:
  2005                           	opt stack 0
  2006  000028                     I2C_Master_Write@byteToWrite:
  2007                           	opt stack 0
  2008                           
  2009                           ; 2 bytes @ 0x27
  2010  000028                     	ds	1
  2011  000029                     I2C_Master_Read@receivedByte:
  2012                           	opt stack 0
  2013  000029                     lcdInst@data:
  2014                           	opt stack 0
  2015  000029                     putch@data:
  2016                           	opt stack 0
  2017  000029                     ___wmul@multiplicand:
  2018                           	opt stack 0
  2019                           
  2020                           ; 2 bytes @ 0x28
  2021  000029                     	ds	1
  2022  00002A                     ??_initLCD:
  2023  00002A                     ?___fttol:
  2024                           	opt stack 0
  2025  00002A                     lcd_shift_cursor@direction:
  2026                           	opt stack 0
  2027  00002A                     I2C_Send@data:
  2028                           	opt stack 0
  2029  00002A                     RTC_getTime@time:
  2030                           	opt stack 0
  2031  00002A                     ___fttol@f1:
  2032                           	opt stack 0
  2033                           
  2034                           ; 3 bytes @ 0x29
  2035  00002A                     	ds	1
  2036  00002B                     lcd_shift_cursor@numChars:
  2037                           	opt stack 0
  2038  00002B                     ___wmul@product:
  2039                           	opt stack 0
  2040  00002B                     ___lldiv@divisor:
  2041                           	opt stack 0
  2042                           
  2043                           ; 4 bytes @ 0x2A
  2044  00002B                     	ds	1
  2045  00002C                     ??_I2C_Send:
  2046  00002C                     lcd_shift_cursor@n:
  2047                           	opt stack 0
  2048  00002C                     RTC_getTime@i:
  2049                           	opt stack 0
  2050                           
  2051                           ; 1 bytes @ 0x2B
  2052  00002C                     	ds	1
  2053  00002D                     ?_RTC_getSeconds:
  2054                           	opt stack 0
  2055  00002D                     lcd_set_cursor@y:
  2056                           	opt stack 0
  2057  00002D                     printStringLCD@string:
  2058                           	opt stack 0
  2059  00002D                     strcpy@to:
  2060                           	opt stack 0
  2061                           
  2062                           ; 2 bytes @ 0x2C
  2063  00002D                     	ds	1
  2064  00002E                     ??_lcd_set_cursor:
  2065  00002E                     ??___fttol:
  2066                           
  2067                           ; 1 bytes @ 0x2D
  2068  00002E                     	ds	1
  2069  00002F                     ??_printStringLCD:
  2070  00002F                     lcd_set_cursor@i:
  2071                           	opt stack 0
  2072  00002F                     I2C_Send@address:
  2073                           	opt stack 0
  2074  00002F                     strcpy@from:
  2075                           	opt stack 0
  2076  00002F                     ___lldiv@quotient:
  2077                           	opt stack 0
  2078                           
  2079                           ; 4 bytes @ 0x2E
  2080  00002F                     	ds	1
  2081  000030                     lcd_set_cursor@x:
  2082                           	opt stack 0
  2083  000030                     I2C_Send@i:
  2084                           	opt stack 0
  2085                           
  2086                           ; 2 bytes @ 0x2F
  2087  000030                     	ds	1
  2088  000031                     ??_RTC_getSeconds:
  2089  000031                     strcpy@cp:
  2090                           	opt stack 0
  2091                           
  2092                           ; 2 bytes @ 0x30
  2093  000031                     	ds	1
  2094  000032                     ??_clearing:
  2095  000032                     ??_viewLogs:
  2096  000032                     hibernate@pressed:
  2097                           	opt stack 0
  2098  000032                     printErrorLCD@string:
  2099                           	opt stack 0
  2100                           
  2101                           ; 2 bytes @ 0x31
  2102  000032                     	ds	1
  2103  000033                     ___lldiv@counter:
  2104                           	opt stack 0
  2105                           
  2106                           ; 1 bytes @ 0x32
  2107  000033                     	ds	1
  2108  000034                     tblptru	equ	0xFF8
  2109                           tblptrh	equ	0xFF7
  2110                           tblptrl	equ	0xFF6
  2111                           tablat	equ	0xFF5
  2112                           postinc0	equ	0xFEE
  2113                           wreg	equ	0xFE8
  2114                           postdec1	equ	0xFE5
  2115                           fsr1l	equ	0xFE1
  2116                           
  2117                           ; 1 bytes @ 0x33
  2118 ;;
  2119 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2120 ;;
  2121 ;; *************** function _main *****************
  2122 ;; Defined at:
  2123 ;;		line 219 in file "main.c"
  2124 ;; Parameters:    Size  Location     Type
  2125 ;;		None
  2126 ;; Auto vars:     Size  Location     Type
  2127 ;;		None
  2128 ;; Return value:  Size  Location     Type
  2129 ;;                  1    wreg      void 
  2130 ;; Registers used:
  2131 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2132 ;; Tracked objects:
  2133 ;;		On entry : 0/0
  2134 ;;		On exit  : 0/0
  2135 ;;		Unchanged: 0/0
  2136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2139 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2140 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2141 ;;Total ram usage:        1 bytes
  2142 ;; Hardware stack levels required when called:   10
  2143 ;; This function calls:
  2144 ;;		_I2C_Master_Init
  2145 ;;		_hibernate
  2146 ;;		_initLCD
  2147 ;;		_lcdInst
  2148 ;;		_mainMenu
  2149 ;; This function is called by:
  2150 ;;		Startup code after reset
  2151 ;; This function uses a non-reentrant model
  2152 ;;
  2153                           
  2154                           	psect	text0
  2155  002176                     __ptext0:
  2156                           	opt stack 0
  2157  002176                     _main:
  2158                           	opt stack 21
  2159                           
  2160                           ;main.c: 224: LATA = 0x00;
  2161                           
  2162                           ;incstack = 0
  2163  002176  0E00               	movlw	0
  2164  002178  6E89               	movwf	3977,c	;volatile
  2165                           
  2166                           ;main.c: 225: LATB = 0x00;
  2167  00217A  0E00               	movlw	0
  2168  00217C  6E8A               	movwf	3978,c	;volatile
  2169                           
  2170                           ;main.c: 226: LATC = 0x00;
  2171  00217E  0E00               	movlw	0
  2172  002180  6E8B               	movwf	3979,c	;volatile
  2173                           
  2174                           ;main.c: 227: LATD = 0x00;
  2175  002182  0E00               	movlw	0
  2176  002184  6E8C               	movwf	3980,c	;volatile
  2177                           
  2178                           ;main.c: 228: LATE = 0x00;
  2179  002186  0E00               	movlw	0
  2180  002188  6E8D               	movwf	3981,c	;volatile
  2181                           
  2182                           ;main.c: 231: TRISA = 0xFF;
  2183  00218A  6892               	setf	3986,c	;volatile
  2184                           
  2185                           ;main.c: 232: TRISB = 0b11110111;
  2186  00218C  0EF7               	movlw	247
  2187  00218E  6E93               	movwf	3987,c	;volatile
  2188                           
  2189                           ;main.c: 233: TRISC = 0x00;
  2190  002190  0E00               	movlw	0
  2191  002192  6E94               	movwf	3988,c	;volatile
  2192                           
  2193                           ;main.c: 234: TRISD = 0x00;
  2194  002194  0E00               	movlw	0
  2195  002196  6E95               	movwf	3989,c	;volatile
  2196                           
  2197                           ;main.c: 235: TRISE = 0x00;
  2198  002198  0E00               	movlw	0
  2199  00219A  6E96               	movwf	3990,c	;volatile
  2200                           
  2201                           ;main.c: 237: ADCON0 = 0x00;
  2202  00219C  0E00               	movlw	0
  2203  00219E  6EC2               	movwf	4034,c	;volatile
  2204                           
  2205                           ;main.c: 238: ADCON1 = 0x0F;
  2206  0021A0  0E0F               	movlw	15
  2207  0021A2  6EC1               	movwf	4033,c	;volatile
  2208                           
  2209                           ;main.c: 241: I2C_Master_Init(100000);
  2210  0021A4  0EA0               	movlw	160
  2211  0021A6  0100               	movlb	0	; () banked
  2212  0021A8  6F80               	movwf	I2C_Master_Init@clockFreq& (0+255),b
  2213  0021AA  0E86               	movlw	134
  2214  0021AC  6F81               	movwf	(I2C_Master_Init@clockFreq+1)& (0+255),b
  2215  0021AE  0E01               	movlw	1
  2216  0021B0  6F82               	movwf	(I2C_Master_Init@clockFreq+2)& (0+255),b
  2217  0021B2  0E00               	movlw	0
  2218  0021B4  6F83               	movwf	(I2C_Master_Init@clockFreq+3)& (0+255),b
  2219  0021B6  EC5D  F012         	call	_I2C_Master_Init	;wreg free
  2220                           
  2221                           ;main.c: 243: initLCD();
  2222  0021BA  ECB5  F012         	call	_initLCD	;wreg free
  2223                           
  2224                           ;main.c: 245: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2225  0021BE  0E01               	movlw	1
  2226  0021C0  EC06  F014         	call	_lcdInst
  2227  0021C4  0EC3               	movlw	195
  2228  0021C6  0100               	movlb	0	; () banked
  2229  0021C8  6FF8               	movwf	??_main& (0+255),b
  2230  0021CA  0ECD               	movlw	205
  2231  0021CC                     u5937:
  2232  0021CC  2EE8               	decfsz	wreg,f,c
  2233  0021CE  D7FE               	bra	u5937
  2234  0021D0  2FF8               	decfsz	??_main& (0+255),f,b
  2235  0021D2  D7FC               	bra	u5937
  2236                           
  2237                           ;main.c: 246: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2238  0021D4  0E80               	movlw	128
  2239  0021D6  EC06  F014         	call	_lcdInst
  2240  0021DA  0E41               	movlw	65
  2241  0021DC  0100               	movlb	0	; () banked
  2242  0021DE  6FF8               	movwf	??_main& (0+255),b
  2243  0021E0  0EEE               	movlw	238
  2244  0021E2                     u5947:
  2245  0021E2  2EE8               	decfsz	wreg,f,c
  2246  0021E4  D7FE               	bra	u5947
  2247  0021E6  2FF8               	decfsz	??_main& (0+255),f,b
  2248  0021E8  D7FC               	bra	u5947
  2249  0021EA  F000               	nop	
  2250                           
  2251                           ;main.c: 248: hibernate();
  2252  0021EC  EC1D  F013         	call	_hibernate	;wreg free
  2253                           
  2254                           ;main.c: 249: mainMenu();
  2255  0021F0  EC85  F007         	call	_mainMenu	;wreg free
  2256  0021F4  EF07  F000         	goto	start
  2257  0021F8                     __end_of_main:
  2258                           	opt stack 0
  2259                           tblptru	equ	0xFF8
  2260                           tblptrh	equ	0xFF7
  2261                           tblptrl	equ	0xFF6
  2262                           tablat	equ	0xFF5
  2263                           postinc0	equ	0xFEE
  2264                           wreg	equ	0xFE8
  2265                           postdec1	equ	0xFE5
  2266                           fsr1l	equ	0xFE1
  2267                           
  2268 ;; *************** function _mainMenu *****************
  2269 ;; Defined at:
  2270 ;;		line 174 in file "menu.c"
  2271 ;; Parameters:    Size  Location     Type
  2272 ;;		None
  2273 ;; Auto vars:     Size  Location     Type
  2274 ;;  operationTim    4  108[BANK0 ] long 
  2275 ;;  i               2  118[BANK0 ] int 
  2276 ;;  startPress      2  112[BANK0 ] int 
  2277 ;;  pressed         2  116[BANK0 ] int 
  2278 ;;  needToPrint     2  114[BANK0 ] int 
  2279 ;; Return value:  Size  Location     Type
  2280 ;;                  1    wreg      void 
  2281 ;; Registers used:
  2282 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2283 ;; Tracked objects:
  2284 ;;		On entry : 0/0
  2285 ;;		On exit  : 0/0
  2286 ;;		Unchanged: 0/0
  2287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2289 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2290 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2291 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2292 ;;Total ram usage:       16 bytes
  2293 ;; Hardware stack levels used:    1
  2294 ;; Hardware stack levels required when called:    9
  2295 ;; This function calls:
  2296 ;;		_I2C_Send
  2297 ;;		_RTC_getOperatingTime
  2298 ;;		_RTC_startOperation
  2299 ;;		_clearing
  2300 ;;		_hibernate
  2301 ;;		_inputEntry
  2302 ;;		_lcdInst
  2303 ;;		_packaging
  2304 ;;		_pollKeypad
  2305 ;;		_printStringLCD
  2306 ;;		_printf
  2307 ;;		_putch
  2308 ;;		_viewLogs
  2309 ;; This function is called by:
  2310 ;;		_main
  2311 ;; This function uses a non-reentrant model
  2312 ;;
  2313                           
  2314                           	psect	text1
  2315  000F0A                     __ptext1:
  2316                           	opt stack 0
  2317  000F0A                     _mainMenu:
  2318                           	opt stack 21
  2319                           
  2320                           ;menu.c: 175: int pressed;
  2321                           ;menu.c: 176: int needToPrint = 1;
  2322                           
  2323                           ;incstack = 0
  2324  000F0A  0E00               	movlw	0
  2325  000F0C  0100               	movlb	0	; () banked
  2326  000F0E  6FF3               	movwf	(mainMenu@needToPrint+1)& (0+255),b
  2327  000F10  0E01               	movlw	1
  2328  000F12  6FF2               	movwf	mainMenu@needToPrint& (0+255),b
  2329  000F14                     
  2330                           ;menu.c: 179: if (needToPrint) {
  2331                           
  2332                           ; BSR set to: 0
  2333  000F14  0100               	movlb	0	; () banked
  2334  000F16  51F2               	movf	mainMenu@needToPrint& (0+255),w,b
  2335  000F18  11F3               	iorwf	(mainMenu@needToPrint+1)& (0+255),w,b
  2336  000F1A  B4D8               	btfsc	status,2,c
  2337  000F1C  D00B               	goto	l394
  2338                           
  2339                           ; BSR set to: 0
  2340                           ;menu.c: 180: printStringLCD("0:Sleep 1:Begin \n2: View Logs");
  2341  000F1E  0E9D               	movlw	low STR_13
  2342  000F20  6E2D               	movwf	printStringLCD@string,c
  2343  000F22  0EFE               	movlw	high STR_13
  2344  000F24  6E2E               	movwf	printStringLCD@string+1,c
  2345  000F26  ECD7  F00A         	call	_printStringLCD	;wreg free
  2346                           
  2347                           ;menu.c: 181: needToPrint = 0;
  2348  000F2A  0E00               	movlw	0
  2349  000F2C  0100               	movlb	0	; () banked
  2350  000F2E  6FF3               	movwf	(mainMenu@needToPrint+1)& (0+255),b
  2351  000F30  0E00               	movlw	0
  2352  000F32  6FF2               	movwf	mainMenu@needToPrint& (0+255),b
  2353  000F34                     l394:
  2354                           
  2355                           ; BSR set to: 0
  2356                           ;menu.c: 182: }
  2357                           ;menu.c: 183: pressed = pollKeypad();
  2358                           
  2359                           ; BSR set to: 0
  2360  000F34  EC70  F013         	call	_pollKeypad	;wreg free
  2361  000F38  0100               	movlb	0	; () banked
  2362  000F3A  6FE8               	movwf	??_mainMenu& (0+255),b
  2363  000F3C  51E8               	movf	??_mainMenu& (0+255),w,b
  2364  000F3E  6FF4               	movwf	mainMenu@pressed& (0+255),b
  2365  000F40  6BF5               	clrf	(mainMenu@pressed+1)& (0+255),b
  2366                           
  2367                           ; BSR set to: 0
  2368                           ;menu.c: 184: putch(pressed);
  2369  000F42  51F4               	movf	mainMenu@pressed& (0+255),w,b
  2370  000F44  ECFC  F013         	call	_putch
  2371                           
  2372                           ;menu.c: 185: if (pressed - 48 == 0) {
  2373  000F48  0ED0               	movlw	208
  2374  000F4A  0100               	movlb	0	; () banked
  2375  000F4C  6FE8               	movwf	??_mainMenu& (0+255),b
  2376  000F4E  0EFF               	movlw	255
  2377  000F50  6FE9               	movwf	(??_mainMenu+1)& (0+255),b
  2378  000F52  C0F4  F0EA         	movff	mainMenu@pressed,??_mainMenu+2
  2379  000F56  C0F5  F0EB         	movff	mainMenu@pressed+1,??_mainMenu+3
  2380  000F5A  51E8               	movf	??_mainMenu& (0+255),w,b
  2381  000F5C  27EA               	addwf	(??_mainMenu+2)& (0+255),f,b
  2382  000F5E  51E9               	movf	(??_mainMenu+1)& (0+255),w,b
  2383  000F60  23EB               	addwfc	(??_mainMenu+3)& (0+255),f,b
  2384  000F62  51EA               	movf	(??_mainMenu+2)& (0+255),w,b
  2385  000F64  11EB               	iorwf	(??_mainMenu+3)& (0+255),w,b
  2386  000F66  A4D8               	btfss	status,2,c
  2387  000F68  D003               	goto	l395
  2388                           
  2389                           ; BSR set to: 0
  2390                           ;menu.c: 186: hibernate();
  2391  000F6A  EC1D  F013         	call	_hibernate	;wreg free
  2392  000F6E  D7CD               	goto	_mainMenu
  2393  000F70                     l395:
  2394                           
  2395                           ; BSR set to: 0
  2396                           
  2397                           ; BSR set to: 0
  2398  000F70  0ED0               	movlw	208
  2399  000F72  6FE8               	movwf	??_mainMenu& (0+255),b
  2400  000F74  0EFF               	movlw	255
  2401  000F76  6FE9               	movwf	(??_mainMenu+1)& (0+255),b
  2402  000F78  C0F4  F0EA         	movff	mainMenu@pressed,??_mainMenu+2
  2403  000F7C  C0F5  F0EB         	movff	mainMenu@pressed+1,??_mainMenu+3
  2404  000F80  51E8               	movf	??_mainMenu& (0+255),w,b
  2405  000F82  27EA               	addwf	(??_mainMenu+2)& (0+255),f,b
  2406  000F84  51E9               	movf	(??_mainMenu+1)& (0+255),w,b
  2407  000F86  23EB               	addwfc	(??_mainMenu+3)& (0+255),f,b
  2408  000F88  05EA               	decf	(??_mainMenu+2)& (0+255),w,b
  2409  000F8A  11EB               	iorwf	(??_mainMenu+3)& (0+255),w,b
  2410  000F8C  A4D8               	btfss	status,2,c
  2411  000F8E  D173               	goto	l397
  2412                           
  2413                           ; BSR set to: 0
  2414                           ;menu.c: 189: inputEntry();
  2415  000F90  EC09  F000         	call	_inputEntry	;wreg free
  2416                           
  2417                           ;menu.c: 190: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2418  000F94  0E01               	movlw	1
  2419  000F96  EC06  F014         	call	_lcdInst
  2420  000F9A  0EC3               	movlw	195
  2421  000F9C  0100               	movlb	0	; () banked
  2422  000F9E  6FE8               	movwf	??_mainMenu& (0+255),b
  2423  000FA0  0ECD               	movlw	205
  2424  000FA2                     u5957:
  2425  000FA2  2EE8               	decfsz	wreg,f,c
  2426  000FA4  D7FE               	bra	u5957
  2427  000FA6  2FE8               	decfsz	??_mainMenu& (0+255),f,b
  2428  000FA8  D7FC               	bra	u5957
  2429                           
  2430                           ;menu.c: 191: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2431  000FAA  0E80               	movlw	128
  2432  000FAC  EC06  F014         	call	_lcdInst
  2433  000FB0  0E41               	movlw	65
  2434  000FB2  0100               	movlb	0	; () banked
  2435  000FB4  6FE8               	movwf	??_mainMenu& (0+255),b
  2436  000FB6  0EEE               	movlw	238
  2437  000FB8                     u5967:
  2438  000FB8  2EE8               	decfsz	wreg,f,c
  2439  000FBA  D7FE               	bra	u5967
  2440  000FBC  2FE8               	decfsz	??_mainMenu& (0+255),f,b
  2441  000FBE  D7FC               	bra	u5967
  2442  000FC0  F000               	nop	
  2443                           
  2444                           ;menu.c: 192: printf("Press 1 to start");
  2445  000FC2  0E50               	movlw	low STR_14
  2446  000FC4  0100               	movlb	0	; () banked
  2447  000FC6  6F9B               	movwf	printf@f& (0+255),b
  2448  000FC8  0EFF               	movlw	high STR_14
  2449  000FCA  6F9C               	movwf	(printf@f+1)& (0+255),b
  2450  000FCC  EC3B  F013         	call	_printf	;wreg free
  2451                           
  2452                           ;menu.c: 193: lcdInst(0xC0);;
  2453  000FD0  0EC0               	movlw	192
  2454  000FD2  EC06  F014         	call	_lcdInst
  2455                           
  2456                           ;menu.c: 194: printf("packaging");
  2457  000FD6  0E22               	movlw	low (STR_16+9)
  2458  000FD8  0100               	movlb	0	; () banked
  2459  000FDA  6F9B               	movwf	printf@f& (0+255),b
  2460  000FDC  0EFF               	movlw	high (STR_16+9)
  2461  000FDE  6F9C               	movwf	(printf@f+1)& (0+255),b
  2462  000FE0  EC3B  F013         	call	_printf	;wreg free
  2463                           
  2464                           ;menu.c: 195: int startPress = pollKeypad();
  2465  000FE4  EC70  F013         	call	_pollKeypad	;wreg free
  2466  000FE8  D002               	goto	L1
  2467  000FEA                     
  2468                           ; BSR set to: 0
  2469                           ;menu.c: 197: startPress = pollKeypad();
  2470                           
  2471                           ; BSR set to: 0
  2472  000FEA  EC70  F013         	call	_pollKeypad	;wreg free
  2473  000FEE                     L1:
  2474  000FEE  0100               	movlb	0	; () banked
  2475  000FF0  6FE8               	movwf	??_mainMenu& (0+255),b
  2476  000FF2  51E8               	movf	??_mainMenu& (0+255),w,b
  2477  000FF4  6FF0               	movwf	mainMenu@startPress& (0+255),b
  2478  000FF6  6BF1               	clrf	(mainMenu@startPress+1)& (0+255),b
  2479                           
  2480                           ; BSR set to: 0
  2481                           
  2482                           ; BSR set to: 0
  2483  000FF8  0ED0               	movlw	208
  2484  000FFA  6FE8               	movwf	??_mainMenu& (0+255),b
  2485  000FFC  0EFF               	movlw	255
  2486  000FFE  6FE9               	movwf	(??_mainMenu+1)& (0+255),b
  2487  001000  C0F0  F0EA         	movff	mainMenu@startPress,??_mainMenu+2
  2488  001004  C0F1  F0EB         	movff	mainMenu@startPress+1,??_mainMenu+3
  2489  001008  51E8               	movf	??_mainMenu& (0+255),w,b
  2490  00100A  27EA               	addwf	(??_mainMenu+2)& (0+255),f,b
  2491  00100C  51E9               	movf	(??_mainMenu+1)& (0+255),w,b
  2492  00100E  23EB               	addwfc	(??_mainMenu+3)& (0+255),f,b
  2493  001010  05EA               	decf	(??_mainMenu+2)& (0+255),w,b
  2494  001012  11EB               	iorwf	(??_mainMenu+3)& (0+255),w,b
  2495  001014  A4D8               	btfss	status,2,c
  2496  001016  D7E9               	goto	l399
  2497                           
  2498                           ; BSR set to: 0
  2499                           ;menu.c: 198: }
  2500                           ;menu.c: 199: RTC_startOperation();
  2501                           
  2502                           ; BSR set to: 0
  2503  001018  ECF1  F013         	call	_RTC_startOperation	;wreg free
  2504                           
  2505                           ;menu.c: 200: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2506  00101C  0E01               	movlw	1
  2507  00101E  EC06  F014         	call	_lcdInst
  2508  001022  0EC3               	movlw	195
  2509  001024  0100               	movlb	0	; () banked
  2510  001026  6FE8               	movwf	??_mainMenu& (0+255),b
  2511  001028  0ECD               	movlw	205
  2512  00102A                     u5977:
  2513  00102A  2EE8               	decfsz	wreg,f,c
  2514  00102C  D7FE               	bra	u5977
  2515  00102E  2FE8               	decfsz	??_mainMenu& (0+255),f,b
  2516  001030  D7FC               	bra	u5977
  2517                           
  2518                           ;menu.c: 201: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2519  001032  0E80               	movlw	128
  2520  001034  EC06  F014         	call	_lcdInst
  2521  001038  0E41               	movlw	65
  2522  00103A  0100               	movlb	0	; () banked
  2523  00103C  6FE8               	movwf	??_mainMenu& (0+255),b
  2524  00103E  0EEE               	movlw	238
  2525  001040                     u5987:
  2526  001040  2EE8               	decfsz	wreg,f,c
  2527  001042  D7FE               	bra	u5987
  2528  001044  2FE8               	decfsz	??_mainMenu& (0+255),f,b
  2529  001046  D7FC               	bra	u5987
  2530  001048  F000               	nop	
  2531                           
  2532                           ;menu.c: 202: printf("Starting packaging");
  2533  00104A  0E19               	movlw	low STR_16
  2534  00104C  0100               	movlb	0	; () banked
  2535  00104E  6F9B               	movwf	printf@f& (0+255),b
  2536  001050  0EFF               	movlw	high STR_16
  2537  001052  6F9C               	movwf	(printf@f+1)& (0+255),b
  2538  001054  EC3B  F013         	call	_printf	;wreg free
  2539                           
  2540                           ;menu.c: 203: I2C_Send(nanoAddr, "\1Starting packaging\0");
  2541  001058  0E04               	movlw	low STR_17
  2542  00105A  6E2A               	movwf	I2C_Send@data,c
  2543  00105C  0EFF               	movlw	high STR_17
  2544  00105E  6E2B               	movwf	I2C_Send@data+1,c
  2545  001060  0EBD               	movlw	low _nanoAddr
  2546  001062  6EF6               	movwf	tblptrl,c
  2547  001064                     	if	1	;There is more than 1 active tblptr byte
  2548  001064  0EFC               	movlw	high _nanoAddr
  2549  001066  6EF7               	movwf	tblptrh,c
  2550  001068                     	endif
  2551  001068                     	if	1	;There are 3 active tblptr bytes
  2552  001068  0E00               	movlw	low (_nanoAddr shr (0+16))
  2553  00106A  6EF8               	movwf	tblptru,c
  2554  00106C                     	endif
  2555  00106C  0008               	tblrd		*
  2556  00106E  50F5               	movf	tablat,w,c
  2557  001070  EC30  F010         	call	_I2C_Send
  2558                           
  2559                           ;menu.c: 204: packaging();
  2560  001074  EC50  F009         	call	_packaging	;wreg free
  2561                           
  2562                           ;menu.c: 205: clearing();
  2563  001078  EC39  F00C         	call	_clearing	;wreg free
  2564                           
  2565                           ;menu.c: 206: long operationTime = RTC_getOperatingTime();
  2566  00107C  EC8C  F012         	call	_RTC_getOperatingTime	;wreg free
  2567  001080  C08B  F0EC         	movff	?_RTC_getOperatingTime,mainMenu@operationTime
  2568  001084  C08C  F0ED         	movff	?_RTC_getOperatingTime+1,mainMenu@operationTime+1
  2569  001088  C08D  F0EE         	movff	?_RTC_getOperatingTime+2,mainMenu@operationTime+2
  2570  00108C  C08E  F0EF         	movff	?_RTC_getOperatingTime+3,mainMenu@operationTime+3
  2571                           
  2572                           ;menu.c: 208: printf("Summary:");
  2573  001090  0EE4               	movlw	low STR_18
  2574  001092  0100               	movlb	0	; () banked
  2575  001094  6F9B               	movwf	printf@f& (0+255),b
  2576  001096  0EFF               	movlw	high STR_18
  2577  001098  6F9C               	movwf	(printf@f+1)& (0+255),b
  2578  00109A  EC3B  F013         	call	_printf	;wreg free
  2579                           
  2580                           ;menu.c: 209: _delay((unsigned long)((1000)*(40000000/4000.0)));
  2581  00109E  0E33               	movlw	51
  2582  0010A0  0100               	movlb	0	; () banked
  2583  0010A2  6FE9               	movwf	(??_mainMenu+1)& (0+255),b
  2584  0010A4  0EBB               	movlw	187
  2585  0010A6  6FE8               	movwf	??_mainMenu& (0+255),b
  2586  0010A8  0EDF               	movlw	223
  2587  0010AA                     u5997:
  2588  0010AA  2EE8               	decfsz	wreg,f,c
  2589  0010AC  D7FE               	bra	u5997
  2590  0010AE  2FE8               	decfsz	??_mainMenu& (0+255),f,b
  2591  0010B0  D7FC               	bra	u5997
  2592  0010B2  2FE9               	decfsz	(??_mainMenu+1)& (0+255),f,b
  2593  0010B4  D7FA               	bra	u5997
  2594  0010B6  D000               	nop2	
  2595  0010B8                     
  2596                           ;menu.c: 212: for (i = 0; i < 8; i++) {
  2597  0010B8  0E00               	movlw	0
  2598  0010BA  0100               	movlb	0	; () banked
  2599  0010BC  6FF7               	movwf	(mainMenu@i+1)& (0+255),b
  2600  0010BE  0E00               	movlw	0
  2601  0010C0  6FF6               	movwf	mainMenu@i& (0+255),b
  2602  0010C2                     l5029:
  2603                           
  2604                           ; BSR set to: 0
  2605  0010C2  BFF7               	btfsc	(mainMenu@i+1)& (0+255),7,b
  2606  0010C4  D006               	goto	l402
  2607  0010C6  51F7               	movf	(mainMenu@i+1)& (0+255),w,b
  2608  0010C8  E155               	bnz	l5047
  2609  0010CA  0E08               	movlw	8
  2610  0010CC  5DF6               	subwf	mainMenu@i& (0+255),w,b
  2611  0010CE  B0D8               	btfsc	status,0,c
  2612  0010D0  D051               	goto	u5890
  2613  0010D2                     l402:
  2614                           
  2615                           ; BSR set to: 0
  2616                           ;menu.c: 213: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2617                           
  2618                           ; BSR set to: 0
  2619  0010D2  0E01               	movlw	1
  2620  0010D4  EC06  F014         	call	_lcdInst
  2621  0010D8  0EC3               	movlw	195
  2622  0010DA  0100               	movlb	0	; () banked
  2623  0010DC  6FE8               	movwf	??_mainMenu& (0+255),b
  2624  0010DE  0ECD               	movlw	205
  2625  0010E0                     u6007:
  2626  0010E0  2EE8               	decfsz	wreg,f,c
  2627  0010E2  D7FE               	bra	u6007
  2628  0010E4  2FE8               	decfsz	??_mainMenu& (0+255),f,b
  2629  0010E6  D7FC               	bra	u6007
  2630                           
  2631                           ;menu.c: 214: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2632  0010E8  0E80               	movlw	128
  2633  0010EA  EC06  F014         	call	_lcdInst
  2634  0010EE  0E41               	movlw	65
  2635  0010F0  0100               	movlb	0	; () banked
  2636  0010F2  6FE8               	movwf	??_mainMenu& (0+255),b
  2637  0010F4  0EEE               	movlw	238
  2638  0010F6                     u6017:
  2639  0010F6  2EE8               	decfsz	wreg,f,c
  2640  0010F8  D7FE               	bra	u6017
  2641  0010FA  2FE8               	decfsz	??_mainMenu& (0+255),f,b
  2642  0010FC  D7FC               	bra	u6017
  2643  0010FE  F000               	nop	
  2644                           
  2645                           ;menu.c: 215: printf("C%d: %s x%d", i+1, fSLookup[params.toFill[i]], params.setMultiple[
      +                          i]);
  2646  001100  0ECD               	movlw	low STR_19
  2647  001102  0100               	movlb	0	; () banked
  2648  001104  6F9B               	movwf	printf@f& (0+255),b
  2649  001106  0EFF               	movlw	high STR_19
  2650  001108  6F9C               	movwf	(printf@f+1)& (0+255),b
  2651  00110A  0E01               	movlw	1
  2652  00110C  25F6               	addwf	mainMenu@i& (0+255),w,b
  2653  00110E  6F9D               	movwf	(?_printf+2)& (0+255),b
  2654  001110  0E00               	movlw	0
  2655  001112  21F7               	addwfc	(mainMenu@i+1)& (0+255),w,b
  2656  001114  6F9E               	movwf	(?_printf+3)& (0+255),b
  2657  001116  0EA5               	movlw	low (_params+2)
  2658  001118  25F6               	addwf	mainMenu@i& (0+255),w,b
  2659  00111A  6ED9               	movwf	fsr2l,c
  2660  00111C  0E01               	movlw	high (_params+2)
  2661  00111E  21F7               	addwfc	(mainMenu@i+1)& (0+255),w,b
  2662  001120  6EDA               	movwf	fsr2h,c
  2663  001122  50DF               	movf	indf2,w,c
  2664  001124  6FE8               	movwf	??_mainMenu& (0+255),b
  2665  001126  51E8               	movf	??_mainMenu& (0+255),w,b
  2666  001128  0D05               	mullw	5
  2667  00112A  0E3A               	movlw	low _fSLookup
  2668  00112C  24F3               	addwf	prodl,w,c
  2669  00112E  6F9F               	movwf	(?_printf+4)& (0+255),b
  2670  001130  0E01               	movlw	high _fSLookup
  2671  001132  20F4               	addwfc	prodh,w,c
  2672  001134  6FA0               	movwf	(?_printf+5)& (0+255),b
  2673  001136  90D8               	bcf	status,0,c
  2674  001138  35F6               	rlcf	mainMenu@i& (0+255),w,b
  2675  00113A  6ED9               	movwf	fsr2l,c
  2676  00113C  35F7               	rlcf	(mainMenu@i+1)& (0+255),w,b
  2677  00113E  6EDA               	movwf	fsr2h,c
  2678  001140  0EAD               	movlw	low (_params+10)
  2679  001142  26D9               	addwf	fsr2l,f,c
  2680  001144  0E01               	movlw	high (_params+10)
  2681  001146  22DA               	addwfc	fsr2h,f,c
  2682  001148  CFDE F0A1          	movff	postinc2,?_printf+6
  2683  00114C  CFDD F0A2          	movff	postdec2,?_printf+7
  2684  001150  EC3B  F013         	call	_printf	;wreg free
  2685                           
  2686                           ;menu.c: 216: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2687  001154  0E66               	movlw	102
  2688  001156  0100               	movlb	0	; () banked
  2689  001158  6FE9               	movwf	(??_mainMenu+1)& (0+255),b
  2690  00115A  0E76               	movlw	118
  2691  00115C  6FE8               	movwf	??_mainMenu& (0+255),b
  2692  00115E  0EC1               	movlw	193
  2693  001160                     u6027:
  2694  001160  2EE8               	decfsz	wreg,f,c
  2695  001162  D7FE               	bra	u6027
  2696  001164  2FE8               	decfsz	??_mainMenu& (0+255),f,b
  2697  001166  D7FC               	bra	u6027
  2698  001168  2FE9               	decfsz	(??_mainMenu+1)& (0+255),f,b
  2699  00116A  D7FA               	bra	u6027
  2700  00116C  0100               	movlb	0	; () banked
  2701  00116E  4BF6               	infsnz	mainMenu@i& (0+255),f,b
  2702  001170  2BF7               	incf	(mainMenu@i+1)& (0+255),f,b
  2703  001172  D7A7               	goto	l5029
  2704  001174                     u5890:
  2705  001174                     l5047:
  2706                           
  2707                           ; BSR set to: 0
  2708                           ;menu.c: 217: }
  2709                           ;menu.c: 219: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2710  001174  0E01               	movlw	1
  2711  001176  EC06  F014         	call	_lcdInst
  2712  00117A  0EC3               	movlw	195
  2713  00117C  0100               	movlb	0	; () banked
  2714  00117E  6FE8               	movwf	??_mainMenu& (0+255),b
  2715  001180  0ECD               	movlw	205
  2716  001182                     u6037:
  2717  001182  2EE8               	decfsz	wreg,f,c
  2718  001184  D7FE               	bra	u6037
  2719  001186  2FE8               	decfsz	??_mainMenu& (0+255),f,b
  2720  001188  D7FC               	bra	u6037
  2721                           
  2722                           ;menu.c: 220: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2723  00118A  0E80               	movlw	128
  2724  00118C  EC06  F014         	call	_lcdInst
  2725  001190  0E41               	movlw	65
  2726  001192  0100               	movlb	0	; () banked
  2727  001194  6FE8               	movwf	??_mainMenu& (0+255),b
  2728  001196  0EEE               	movlw	238
  2729  001198                     u6047:
  2730  001198  2EE8               	decfsz	wreg,f,c
  2731  00119A  D7FE               	bra	u6047
  2732  00119C  2FE8               	decfsz	??_mainMenu& (0+255),f,b
  2733  00119E  D7FC               	bra	u6047
  2734  0011A0  F000               	nop	
  2735                           
  2736                           ;menu.c: 221: printf("Remaining:");
  2737  0011A2  0ED9               	movlw	low STR_20
  2738  0011A4  0100               	movlb	0	; () banked
  2739  0011A6  6F9B               	movwf	printf@f& (0+255),b
  2740  0011A8  0EFF               	movlw	high STR_20
  2741  0011AA  6F9C               	movwf	(printf@f+1)& (0+255),b
  2742  0011AC  EC3B  F013         	call	_printf	;wreg free
  2743                           
  2744                           ;menu.c: 222: lcdInst(0xC0);;
  2745  0011B0  0EC0               	movlw	192
  2746  0011B2  EC06  F014         	call	_lcdInst
  2747                           
  2748                           ;menu.c: 223: printf("B%d N%d S%d W%d", extras.b, extras.n, extras.s, extras.w);
  2749  0011B6  0E83               	movlw	low STR_21
  2750  0011B8  0100               	movlb	0	; () banked
  2751  0011BA  6F9B               	movwf	printf@f& (0+255),b
  2752  0011BC  0EFF               	movlw	high STR_21
  2753  0011BE  6F9C               	movwf	(printf@f+1)& (0+255),b
  2754  0011C0  C03C  F09D         	movff	_extras,?_printf+2
  2755  0011C4  C03D  F09E         	movff	_extras+1,?_printf+3
  2756  0011C8  C03E  F09F         	movff	_extras+2,?_printf+4
  2757  0011CC  C03F  F0A0         	movff	_extras+3,?_printf+5
  2758  0011D0  C040  F0A1         	movff	_extras+4,?_printf+6
  2759  0011D4  C041  F0A2         	movff	_extras+5,?_printf+7
  2760  0011D8  C042  F0A3         	movff	_extras+6,?_printf+8
  2761  0011DC  C043  F0A4         	movff	_extras+7,?_printf+9
  2762  0011E0  EC3B  F013         	call	_printf	;wreg free
  2763                           
  2764                           ;menu.c: 224: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2765  0011E4  0E66               	movlw	102
  2766  0011E6  0100               	movlb	0	; () banked
  2767  0011E8  6FE9               	movwf	(??_mainMenu+1)& (0+255),b
  2768  0011EA  0E76               	movlw	118
  2769  0011EC  6FE8               	movwf	??_mainMenu& (0+255),b
  2770  0011EE  0EC1               	movlw	193
  2771  0011F0                     u6057:
  2772  0011F0  2EE8               	decfsz	wreg,f,c
  2773  0011F2  D7FE               	bra	u6057
  2774  0011F4  2FE8               	decfsz	??_mainMenu& (0+255),f,b
  2775  0011F6  D7FC               	bra	u6057
  2776  0011F8  2FE9               	decfsz	(??_mainMenu+1)& (0+255),f,b
  2777  0011FA  D7FA               	bra	u6057
  2778                           
  2779                           ;menu.c: 225: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2780  0011FC  0E01               	movlw	1
  2781  0011FE  EC06  F014         	call	_lcdInst
  2782  001202  0EC3               	movlw	195
  2783  001204  0100               	movlb	0	; () banked
  2784  001206  6FE8               	movwf	??_mainMenu& (0+255),b
  2785  001208  0ECD               	movlw	205
  2786  00120A                     u6067:
  2787  00120A  2EE8               	decfsz	wreg,f,c
  2788  00120C  D7FE               	bra	u6067
  2789  00120E  2FE8               	decfsz	??_mainMenu& (0+255),f,b
  2790  001210  D7FC               	bra	u6067
  2791                           
  2792                           ;menu.c: 226: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2793  001212  0E80               	movlw	128
  2794  001214  EC06  F014         	call	_lcdInst
  2795  001218  0E41               	movlw	65
  2796  00121A  0100               	movlb	0	; () banked
  2797  00121C  6FE8               	movwf	??_mainMenu& (0+255),b
  2798  00121E  0EEE               	movlw	238
  2799  001220                     u6077:
  2800  001220  2EE8               	decfsz	wreg,f,c
  2801  001222  D7FE               	bra	u6077
  2802  001224  2FE8               	decfsz	??_mainMenu& (0+255),f,b
  2803  001226  D7FC               	bra	u6077
  2804  001228  F000               	nop	
  2805                           
  2806                           ;menu.c: 227: printf("Time:");
  2807  00122A  0EF4               	movlw	low STR_22
  2808  00122C  0100               	movlb	0	; () banked
  2809  00122E  6F9B               	movwf	printf@f& (0+255),b
  2810  001230  0EFF               	movlw	high STR_22
  2811  001232  6F9C               	movwf	(printf@f+1)& (0+255),b
  2812  001234  EC3B  F013         	call	_printf	;wreg free
  2813                           
  2814                           ;menu.c: 228: lcdInst(0xC0);;
  2815  001238  0EC0               	movlw	192
  2816  00123A  EC06  F014         	call	_lcdInst
  2817                           
  2818                           ;menu.c: 229: printf("%ld", operationTime);
  2819  00123E  0EFA               	movlw	low STR_23
  2820  001240  0100               	movlb	0	; () banked
  2821  001242  6F9B               	movwf	printf@f& (0+255),b
  2822  001244  0EFF               	movlw	high STR_23
  2823  001246  6F9C               	movwf	(printf@f+1)& (0+255),b
  2824  001248  C0EC  F09D         	movff	mainMenu@operationTime,?_printf+2
  2825  00124C  C0ED  F09E         	movff	mainMenu@operationTime+1,?_printf+3
  2826  001250  C0EE  F09F         	movff	mainMenu@operationTime+2,?_printf+4
  2827  001254  C0EF  F0A0         	movff	mainMenu@operationTime+3,?_printf+5
  2828  001258  EC3B  F013         	call	_printf	;wreg free
  2829                           
  2830                           ;menu.c: 230: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2831  00125C  0E66               	movlw	102
  2832  00125E  0100               	movlb	0	; () banked
  2833  001260  6FE9               	movwf	(??_mainMenu+1)& (0+255),b
  2834  001262  0E76               	movlw	118
  2835  001264  6FE8               	movwf	??_mainMenu& (0+255),b
  2836  001266  0EC1               	movlw	193
  2837  001268                     u6087:
  2838  001268  2EE8               	decfsz	wreg,f,c
  2839  00126A  D7FE               	bra	u6087
  2840  00126C  2FE8               	decfsz	??_mainMenu& (0+255),f,b
  2841  00126E  D7FC               	bra	u6087
  2842  001270  2FE9               	decfsz	(??_mainMenu+1)& (0+255),f,b
  2843  001272  D7FA               	bra	u6087
  2844  001274  D721               	goto	l401
  2845  001276                     l397:
  2846  001276  0ED0               	movlw	208
  2847  001278  0100               	movlb	0	; () banked
  2848  00127A  6FE8               	movwf	??_mainMenu& (0+255),b
  2849  00127C  0EFF               	movlw	255
  2850  00127E  6FE9               	movwf	(??_mainMenu+1)& (0+255),b
  2851  001280  C0F4  F0EA         	movff	mainMenu@pressed,??_mainMenu+2
  2852  001284  C0F5  F0EB         	movff	mainMenu@pressed+1,??_mainMenu+3
  2853  001288  51E8               	movf	??_mainMenu& (0+255),w,b
  2854  00128A  27EA               	addwf	(??_mainMenu+2)& (0+255),f,b
  2855  00128C  51E9               	movf	(??_mainMenu+1)& (0+255),w,b
  2856  00128E  23EB               	addwfc	(??_mainMenu+3)& (0+255),f,b
  2857  001290  0E02               	movlw	2
  2858  001292  19EA               	xorwf	(??_mainMenu+2)& (0+255),w,b
  2859  001294  11EB               	iorwf	(??_mainMenu+3)& (0+255),w,b
  2860  001296  A4D8               	btfss	status,2,c
  2861  001298  D63D               	goto	l393
  2862                           
  2863                           ; BSR set to: 0
  2864                           ;menu.c: 234: viewLogs();
  2865  00129A  EC87  F013         	call	_viewLogs	;wreg free
  2866  00129E  D635               	goto	_mainMenu
  2867  0012A0                     __end_of_mainMenu:
  2868                           	opt stack 0
  2869                           tblptru	equ	0xFF8
  2870                           tblptrh	equ	0xFF7
  2871                           tblptrl	equ	0xFF6
  2872                           tablat	equ	0xFF5
  2873                           prodh	equ	0xFF4
  2874                           prodl	equ	0xFF3
  2875                           postinc0	equ	0xFEE
  2876                           wreg	equ	0xFE8
  2877                           postdec1	equ	0xFE5
  2878                           fsr1l	equ	0xFE1
  2879                           indf2	equ	0xFDF
  2880                           postinc2	equ	0xFDE
  2881                           postdec2	equ	0xFDD
  2882                           fsr2h	equ	0xFDA
  2883                           fsr2l	equ	0xFD9
  2884                           status	equ	0xFD8
  2885                           
  2886 ;; *************** function _viewLogs *****************
  2887 ;; Defined at:
  2888 ;;		line 22 in file "menu.c"
  2889 ;; Parameters:    Size  Location     Type
  2890 ;;		None
  2891 ;; Auto vars:     Size  Location     Type
  2892 ;;  pressed         2   10[BANK0 ] int 
  2893 ;; Return value:  Size  Location     Type
  2894 ;;                  1    wreg      void 
  2895 ;; Registers used:
  2896 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2897 ;; Tracked objects:
  2898 ;;		On entry : 0/0
  2899 ;;		On exit  : 0/0
  2900 ;;		Unchanged: 0/0
  2901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2903 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2904 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2905 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2906 ;;Total ram usage:        3 bytes
  2907 ;; Hardware stack levels used:    1
  2908 ;; Hardware stack levels required when called:    7
  2909 ;; This function calls:
  2910 ;;		_pollKeypad
  2911 ;;		_printStringLCD
  2912 ;; This function is called by:
  2913 ;;		_mainMenu
  2914 ;; This function uses a non-reentrant model
  2915 ;;
  2916                           
  2917                           	psect	text2
  2918  00270E                     __ptext2:
  2919                           	opt stack 0
  2920  00270E                     _viewLogs:
  2921                           	opt stack 22
  2922                           
  2923                           ;menu.c: 23: printStringLCD("Not there yet\n* to return");
  2924                           
  2925                           ; BSR set to: 0
  2926                           ;incstack = 0
  2927  00270E  0EBB               	movlw	low STR_10
  2928  002710  6E2D               	movwf	printStringLCD@string,c
  2929  002712  0EFE               	movlw	high STR_10
  2930  002714  6E2E               	movwf	printStringLCD@string+1,c
  2931  002716  ECD7  F00A         	call	_printStringLCD	;wreg free
  2932  00271A                     
  2933                           ;menu.c: 25: int pressed = pollKeypad();
  2934  00271A  EC70  F013         	call	_pollKeypad	;wreg free
  2935  00271E  6E32               	movwf	??_viewLogs& (0+255),c
  2936  002720  5032               	movf	??_viewLogs,w,c
  2937  002722  0100               	movlb	0	; () banked
  2938  002724  6F8A               	movwf	viewLogs@pressed& (0+255),b
  2939  002726  6B8B               	clrf	(viewLogs@pressed+1)& (0+255),b
  2940                           
  2941                           ; BSR set to: 0
  2942                           ;menu.c: 26: if (pressed == 42) return;
  2943  002728  0E2A               	movlw	42
  2944  00272A  198A               	xorwf	viewLogs@pressed& (0+255),w,b
  2945  00272C  118B               	iorwf	(viewLogs@pressed+1)& (0+255),w,b
  2946  00272E  B4D8               	btfsc	status,2,c
  2947  002730  0012               	return	
  2948  002732  D7F3               	goto	l319
  2949  002734                     __end_of_viewLogs:
  2950                           	opt stack 0
  2951                           tblptru	equ	0xFF8
  2952                           tblptrh	equ	0xFF7
  2953                           tblptrl	equ	0xFF6
  2954                           tablat	equ	0xFF5
  2955                           prodh	equ	0xFF4
  2956                           prodl	equ	0xFF3
  2957                           postinc0	equ	0xFEE
  2958                           wreg	equ	0xFE8
  2959                           postdec1	equ	0xFE5
  2960                           fsr1l	equ	0xFE1
  2961                           indf2	equ	0xFDF
  2962                           postinc2	equ	0xFDE
  2963                           postdec2	equ	0xFDD
  2964                           fsr2h	equ	0xFDA
  2965                           fsr2l	equ	0xFD9
  2966                           status	equ	0xFD8
  2967                           
  2968 ;; *************** function _packaging *****************
  2969 ;; Defined at:
  2970 ;;		line 112 in file "main.c"
  2971 ;; Parameters:    Size  Location     Type
  2972 ;;		None
  2973 ;; Auto vars:     Size  Location     Type
  2974 ;;  msg            34    0[BANK2 ] unsigned char [34]
  2975 ;;  msg2           32   34[BANK2 ] unsigned char [32]
  2976 ;;  mult            2   70[BANK2 ] int 
  2977 ;;  set             2   68[BANK2 ] PTR unsigned char 
  2978 ;;		 -> fastenerMatrix(84), 
  2979 ;;  compartmentN    2   66[BANK2 ] int 
  2980 ;; Return value:  Size  Location     Type
  2981 ;;                  1    wreg      void 
  2982 ;; Registers used:
  2983 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2984 ;; Tracked objects:
  2985 ;;		On entry : 0/0
  2986 ;;		On exit  : 0/0
  2987 ;;		Unchanged: 0/0
  2988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2990 ;;      Locals:         0       0       0      72       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2991 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2992 ;;      Totals:         0       6       0      72       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2993 ;;Total ram usage:       78 bytes
  2994 ;; Hardware stack levels used:    1
  2995 ;; Hardware stack levels required when called:    8
  2996 ;; This function calls:
  2997 ;;		_I2C_Send
  2998 ;;		___wmul
  2999 ;;		_lcdInst
  3000 ;;		_packageCompartment
  3001 ;;		_printf
  3002 ;;		_sprintf
  3003 ;; This function is called by:
  3004 ;;		_mainMenu
  3005 ;; This function uses a non-reentrant model
  3006 ;;
  3007                           
  3008                           	psect	text3
  3009  0012A0                     __ptext3:
  3010                           	opt stack 0
  3011  0012A0                     _packaging:
  3012                           	opt stack 21
  3013                           
  3014                           ;main.c: 113: int compartmentNum;
  3015                           ;main.c: 118: dispensed.b = 0;
  3016                           
  3017                           ; BSR set to: 0
  3018                           ;incstack = 0
  3019  0012A0  0E00               	movlw	0
  3020  0012A2  6E35               	movwf	_dispensed+1,c
  3021  0012A4  0E00               	movlw	0
  3022  0012A6  6E34               	movwf	_dispensed,c
  3023                           
  3024                           ;main.c: 119: dispensed.n = 0;
  3025  0012A8  0E00               	movlw	0
  3026  0012AA  6E37               	movwf	_dispensed+3,c
  3027  0012AC  0E00               	movlw	0
  3028  0012AE  6E36               	movwf	_dispensed+2,c
  3029                           
  3030                           ;main.c: 120: dispensed.s = 0;
  3031  0012B0  0E00               	movlw	0
  3032  0012B2  6E39               	movwf	_dispensed+5,c
  3033  0012B4  0E00               	movlw	0
  3034  0012B6  6E38               	movwf	_dispensed+4,c
  3035                           
  3036                           ;main.c: 121: dispensed.w = 0;
  3037  0012B8  0E00               	movlw	0
  3038  0012BA  6E3B               	movwf	_dispensed+7,c
  3039  0012BC  0E00               	movlw	0
  3040  0012BE  6E3A               	movwf	_dispensed+6,c
  3041                           
  3042                           ;main.c: 123: I2C_Send(nanoAddr, "\1Entered the packaging function\0");
  3043  0012C0  0E7C               	movlw	low STR_6
  3044  0012C2  6E2A               	movwf	I2C_Send@data,c
  3045  0012C4  0EFE               	movlw	high STR_6
  3046  0012C6  6E2B               	movwf	I2C_Send@data+1,c
  3047  0012C8  0EBD               	movlw	low _nanoAddr
  3048  0012CA  6EF6               	movwf	tblptrl,c
  3049  0012CC                     	if	1	;There is more than 1 active tblptr byte
  3050  0012CC  0EFC               	movlw	high _nanoAddr
  3051  0012CE  6EF7               	movwf	tblptrh,c
  3052  0012D0                     	endif
  3053  0012D0                     	if	1	;There are 3 active tblptr bytes
  3054  0012D0  0E00               	movlw	low (_nanoAddr shr (0+16))
  3055  0012D2  6EF8               	movwf	tblptru,c
  3056  0012D4                     	endif
  3057  0012D4  0008               	tblrd		*
  3058  0012D6  50F5               	movf	tablat,w,c
  3059  0012D8  EC30  F010         	call	_I2C_Send
  3060                           
  3061                           ;main.c: 125: for (compartmentNum = 8; compartmentNum > 0; compartmentNum--) {
  3062  0012DC  0E00               	movlw	0
  3063  0012DE  0102               	movlb	2	; () banked
  3064  0012E0  6F43               	movwf	(packaging@compartmentNum+1)& (0+255),b
  3065  0012E2  0E08               	movlw	8
  3066  0012E4  6F42               	movwf	packaging@compartmentNum& (0+255),b
  3067                           
  3068                           ; BSR set to: 2
  3069  0012E6  BF43               	btfsc	(packaging@compartmentNum+1)& (0+255),7,b
  3070  0012E8  0012               	return	
  3071  0012EA  5143               	movf	(packaging@compartmentNum+1)& (0+255),w,b
  3072  0012EC  E103               	bnz	l4571
  3073  0012EE  0542               	decf	packaging@compartmentNum& (0+255),w,b
  3074  0012F0  A0D8               	btfss	status,0,c
  3075  0012F2  0012               	return	
  3076  0012F4                     l4571:
  3077                           
  3078                           ; BSR set to: 2
  3079                           ;main.c: 127: char msg[] = "\1Started packaging compartment x\0";
  3080  0012F4  EE21  F000         	lfsr	2,packaging@F3205
  3081  0012F8  EE12  F000         	lfsr	1,packaging@msg
  3082  0012FC  0E21               	movlw	33
  3083  0012FE                     u5231:
  3084  0012FE  CFDB FFE3          	movff	plusw2,plusw1
  3085  001302  06E8               	decf	wreg,f,c
  3086  001304  E2FC               	bc	u5231
  3087                           
  3088                           ; BSR set to: 2
  3089                           ;main.c: 128: msg[31] = compartmentNum + 48;
  3090  001306  5142               	movf	packaging@compartmentNum& (0+255),w,b
  3091  001308  0F30               	addlw	48
  3092  00130A  6F1F               	movwf	(packaging@msg+31)& (0+255),b
  3093                           
  3094                           ; BSR set to: 2
  3095                           ;main.c: 129: I2C_Send(nanoAddr, msg);
  3096  00130C  0E00               	movlw	low packaging@msg
  3097  00130E  6E2A               	movwf	I2C_Send@data,c
  3098  001310  0E02               	movlw	high packaging@msg
  3099  001312  6E2B               	movwf	I2C_Send@data+1,c
  3100  001314  0EBD               	movlw	low _nanoAddr
  3101  001316  6EF6               	movwf	tblptrl,c
  3102  001318                     	if	1	;There is more than 1 active tblptr byte
  3103  001318  0EFC               	movlw	high _nanoAddr
  3104  00131A  6EF7               	movwf	tblptrh,c
  3105  00131C                     	endif
  3106  00131C                     	if	1	;There are 3 active tblptr bytes
  3107  00131C  0E00               	movlw	low (_nanoAddr shr (0+16))
  3108  00131E  6EF8               	movwf	tblptru,c
  3109  001320                     	endif
  3110  001320  0008               	tblrd		*
  3111  001322  50F5               	movf	tablat,w,c
  3112  001324  EC30  F010         	call	_I2C_Send
  3113                           
  3114                           ;main.c: 131: if (params.toFill[compartmentNum-1] == 0) continue;
  3115  001328  0EFF               	movlw	255
  3116  00132A  0100               	movlb	0	; () banked
  3117  00132C  6FB4               	movwf	??_packaging& (0+255),b
  3118  00132E  0EFF               	movlw	255
  3119  001330  6FB5               	movwf	(??_packaging+1)& (0+255),b
  3120  001332  C242  F0B6         	movff	packaging@compartmentNum,??_packaging+2
  3121  001336  C243  F0B7         	movff	packaging@compartmentNum+1,??_packaging+3
  3122  00133A  51B4               	movf	??_packaging& (0+255),w,b
  3123  00133C  27B6               	addwf	(??_packaging+2)& (0+255),f,b
  3124  00133E  51B5               	movf	(??_packaging+1)& (0+255),w,b
  3125  001340  23B7               	addwfc	(??_packaging+3)& (0+255),f,b
  3126  001342  0EA5               	movlw	low (_params+2)
  3127  001344  25B6               	addwf	(??_packaging+2)& (0+255),w,b
  3128  001346  6ED9               	movwf	fsr2l,c
  3129  001348  0E01               	movlw	high (_params+2)
  3130  00134A  21B7               	addwfc	(??_packaging+3)& (0+255),w,b
  3131  00134C  6EDA               	movwf	fsr2h,c
  3132  00134E  50DF               	movf	indf2,w,c
  3133  001350  B4D8               	btfsc	status,2,c
  3134  001352  D123               	goto	l115
  3135                           
  3136                           ; BSR set to: 0
  3137                           ;main.c: 132: char * set = fastenerMatrix[params.toFill[compartmentNum-1]];
  3138                           
  3139                           ; BSR set to: 0
  3140                           
  3141                           ; BSR set to: 0
  3142  001354  0EFF               	movlw	255
  3143  001356  6FB4               	movwf	??_packaging& (0+255),b
  3144  001358  0EFF               	movlw	255
  3145  00135A  6FB5               	movwf	(??_packaging+1)& (0+255),b
  3146  00135C  C242  F0B6         	movff	packaging@compartmentNum,??_packaging+2
  3147  001360  C243  F0B7         	movff	packaging@compartmentNum+1,??_packaging+3
  3148  001364  51B4               	movf	??_packaging& (0+255),w,b
  3149  001366  27B6               	addwf	(??_packaging+2)& (0+255),f,b
  3150  001368  51B5               	movf	(??_packaging+1)& (0+255),w,b
  3151  00136A  23B7               	addwfc	(??_packaging+3)& (0+255),f,b
  3152  00136C  0EA5               	movlw	low (_params+2)
  3153  00136E  25B6               	addwf	(??_packaging+2)& (0+255),w,b
  3154  001370  6ED9               	movwf	fsr2l,c
  3155  001372  0E01               	movlw	high (_params+2)
  3156  001374  21B7               	addwfc	(??_packaging+3)& (0+255),w,b
  3157  001376  6EDA               	movwf	fsr2h,c
  3158  001378  50DF               	movf	indf2,w,c
  3159  00137A  6FB8               	movwf	(??_packaging+4)& (0+255),b
  3160  00137C  51B8               	movf	(??_packaging+4)& (0+255),w,b
  3161  00137E  0D04               	mullw	4
  3162  001380  0E28               	movlw	low _fastenerMatrix
  3163  001382  24F3               	addwf	prodl,w,c
  3164  001384  0102               	movlb	2	; () banked
  3165  001386  6F44               	movwf	packaging@set& (0+255),b
  3166  001388  0EFE               	movlw	high _fastenerMatrix
  3167  00138A  20F4               	addwfc	prodh,w,c
  3168  00138C  6F45               	movwf	(packaging@set+1)& (0+255),b
  3169                           
  3170                           ; BSR set to: 2
  3171                           ;main.c: 133: char msg2[32];
  3172                           ;main.c: 134: int mult = params.setMultiple[compartmentNum - 1];
  3173  00138E  0EFE               	movlw	254
  3174  001390  0100               	movlb	0	; () banked
  3175  001392  6FB4               	movwf	??_packaging& (0+255),b
  3176  001394  0EFF               	movlw	255
  3177  001396  6FB5               	movwf	(??_packaging+1)& (0+255),b
  3178  001398  C242  F0B6         	movff	packaging@compartmentNum,??_packaging+2
  3179  00139C  C243  F0B7         	movff	packaging@compartmentNum+1,??_packaging+3
  3180  0013A0  90D8               	bcf	status,0,c
  3181  0013A2  37B6               	rlcf	(??_packaging+2)& (0+255),f,b
  3182  0013A4  37B7               	rlcf	(??_packaging+3)& (0+255),f,b
  3183  0013A6  51B4               	movf	??_packaging& (0+255),w,b
  3184  0013A8  27B6               	addwf	(??_packaging+2)& (0+255),f,b
  3185  0013AA  51B5               	movf	(??_packaging+1)& (0+255),w,b
  3186  0013AC  23B7               	addwfc	(??_packaging+3)& (0+255),f,b
  3187  0013AE  0EAD               	movlw	low (_params+10)
  3188  0013B0  25B6               	addwf	(??_packaging+2)& (0+255),w,b
  3189  0013B2  6ED9               	movwf	fsr2l,c
  3190  0013B4  0E01               	movlw	high (_params+10)
  3191  0013B6  21B7               	addwfc	(??_packaging+3)& (0+255),w,b
  3192  0013B8  6EDA               	movwf	fsr2h,c
  3193  0013BA  CFDE F246          	movff	postinc2,packaging@mult
  3194  0013BE  CFDD F247          	movff	postdec2,packaging@mult+1
  3195                           
  3196                           ; BSR set to: 0
  3197                           ;main.c: 135: sprintf(msg2, "\1B:%d N:%d S:%d W:%d\0", set[0]*mult, set[1]*mult, set[2]*
      +                          mult, set[3]*mult);
  3198  0013C2  0E22               	movlw	low packaging@msg2
  3199  0013C4  6F9B               	movwf	sprintf@wh& (0+255),b
  3200  0013C6  0E02               	movlw	high packaging@msg2
  3201  0013C8  6F9C               	movwf	(sprintf@wh+1)& (0+255),b
  3202  0013CA  0EEE               	movlw	low STR_7
  3203  0013CC  6F9D               	movwf	sprintf@f& (0+255),b
  3204  0013CE  0EFE               	movlw	high STR_7
  3205  0013D0  6F9E               	movwf	(sprintf@f+1)& (0+255),b
  3206  0013D2  C244  FFF6         	movff	packaging@set,tblptrl
  3207  0013D6  C245  FFF7         	movff	packaging@set+1,tblptrh
  3208  0013DA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3209  0013DA  6AF8               	clrf	tblptru,c
  3210  0013DC                     	endif
  3211  0013DC                     	if	0	;tblptru may be non-zero
  3212  0013DC                     	endif
  3213  0013DC  0008               	tblrd		*
  3214  0013DE  50F5               	movf	tablat,w,c
  3215  0013E0  6E27               	movwf	___wmul@multiplier,c
  3216  0013E2  6A28               	clrf	___wmul@multiplier+1,c
  3217  0013E4  C246  F029         	movff	packaging@mult,___wmul@multiplicand
  3218  0013E8  C247  F02A         	movff	packaging@mult+1,___wmul@multiplicand+1
  3219  0013EC  ECAD  F013         	call	___wmul	;wreg free
  3220  0013F0  C027  F09F         	movff	?___wmul,?_sprintf+4
  3221  0013F4  C028  F0A0         	movff	?___wmul+1,?_sprintf+5
  3222  0013F8  0E01               	movlw	1
  3223  0013FA  0102               	movlb	2	; () banked
  3224  0013FC  2544               	addwf	packaging@set& (0+255),w,b
  3225  0013FE  0100               	movlb	0	; () banked
  3226  001400  6FB4               	movwf	??_packaging& (0+255),b
  3227  001402  0E00               	movlw	0
  3228  001404  0102               	movlb	2	; () banked
  3229  001406  2145               	addwfc	(packaging@set+1)& (0+255),w,b
  3230  001408  0100               	movlb	0	; () banked
  3231  00140A  6FB5               	movwf	(??_packaging+1)& (0+255),b
  3232  00140C  C0B4  FFF6         	movff	??_packaging,tblptrl
  3233  001410  C0B5  FFF7         	movff	??_packaging+1,tblptrh
  3234  001414                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3235  001414  6AF8               	clrf	tblptru,c
  3236  001416                     	endif
  3237  001416                     	if	0	;tblptru may be non-zero
  3238  001416                     	endif
  3239  001416  0008               	tblrd		*
  3240  001418  50F5               	movf	tablat,w,c
  3241  00141A  6E27               	movwf	___wmul@multiplier,c
  3242  00141C  6A28               	clrf	___wmul@multiplier+1,c
  3243  00141E  C246  F029         	movff	packaging@mult,___wmul@multiplicand
  3244  001422  C247  F02A         	movff	packaging@mult+1,___wmul@multiplicand+1
  3245  001426  ECAD  F013         	call	___wmul	;wreg free
  3246  00142A  C027  F0A1         	movff	?___wmul,?_sprintf+6
  3247  00142E  C028  F0A2         	movff	?___wmul+1,?_sprintf+7
  3248  001432  0E02               	movlw	2
  3249  001434  0102               	movlb	2	; () banked
  3250  001436  2544               	addwf	packaging@set& (0+255),w,b
  3251  001438  0100               	movlb	0	; () banked
  3252  00143A  6FB6               	movwf	(??_packaging+2)& (0+255),b
  3253  00143C  0E00               	movlw	0
  3254  00143E  0102               	movlb	2	; () banked
  3255  001440  2145               	addwfc	(packaging@set+1)& (0+255),w,b
  3256  001442  0100               	movlb	0	; () banked
  3257  001444  6FB7               	movwf	(??_packaging+3)& (0+255),b
  3258  001446  C0B6  FFF6         	movff	??_packaging+2,tblptrl
  3259  00144A  C0B7  FFF7         	movff	??_packaging+3,tblptrh
  3260  00144E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3261  00144E  6AF8               	clrf	tblptru,c
  3262  001450                     	endif
  3263  001450                     	if	0	;tblptru may be non-zero
  3264  001450                     	endif
  3265  001450  0008               	tblrd		*
  3266  001452  50F5               	movf	tablat,w,c
  3267  001454  6E27               	movwf	___wmul@multiplier,c
  3268  001456  6A28               	clrf	___wmul@multiplier+1,c
  3269  001458  C246  F029         	movff	packaging@mult,___wmul@multiplicand
  3270  00145C  C247  F02A         	movff	packaging@mult+1,___wmul@multiplicand+1
  3271  001460  ECAD  F013         	call	___wmul	;wreg free
  3272  001464  C027  F0A3         	movff	?___wmul,?_sprintf+8
  3273  001468  C028  F0A4         	movff	?___wmul+1,?_sprintf+9
  3274  00146C  0E03               	movlw	3
  3275  00146E  0102               	movlb	2	; () banked
  3276  001470  2544               	addwf	packaging@set& (0+255),w,b
  3277  001472  0100               	movlb	0	; () banked
  3278  001474  6FB8               	movwf	(??_packaging+4)& (0+255),b
  3279  001476  0E00               	movlw	0
  3280  001478  0102               	movlb	2	; () banked
  3281  00147A  2145               	addwfc	(packaging@set+1)& (0+255),w,b
  3282  00147C  0100               	movlb	0	; () banked
  3283  00147E  6FB9               	movwf	(??_packaging+5)& (0+255),b
  3284  001480  C0B8  FFF6         	movff	??_packaging+4,tblptrl
  3285  001484  C0B9  FFF7         	movff	??_packaging+5,tblptrh
  3286  001488                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3287  001488  6AF8               	clrf	tblptru,c
  3288  00148A                     	endif
  3289  00148A                     	if	0	;tblptru may be non-zero
  3290  00148A                     	endif
  3291  00148A  0008               	tblrd		*
  3292  00148C  50F5               	movf	tablat,w,c
  3293  00148E  6E27               	movwf	___wmul@multiplier,c
  3294  001490  6A28               	clrf	___wmul@multiplier+1,c
  3295  001492  C246  F029         	movff	packaging@mult,___wmul@multiplicand
  3296  001496  C247  F02A         	movff	packaging@mult+1,___wmul@multiplicand+1
  3297  00149A  ECAD  F013         	call	___wmul	;wreg free
  3298  00149E  C027  F0A5         	movff	?___wmul,?_sprintf+10
  3299  0014A2  C028  F0A6         	movff	?___wmul+1,?_sprintf+11
  3300  0014A6  ECDB  F012         	call	_sprintf	;wreg free
  3301                           
  3302                           ;main.c: 136: I2C_Send(nanoAddr, msg2);
  3303  0014AA  0E22               	movlw	low packaging@msg2
  3304  0014AC  6E2A               	movwf	I2C_Send@data,c
  3305  0014AE  0E02               	movlw	high packaging@msg2
  3306  0014B0  6E2B               	movwf	I2C_Send@data+1,c
  3307  0014B2  0EBD               	movlw	low _nanoAddr
  3308  0014B4  6EF6               	movwf	tblptrl,c
  3309  0014B6                     	if	1	;There is more than 1 active tblptr byte
  3310  0014B6  0EFC               	movlw	high _nanoAddr
  3311  0014B8  6EF7               	movwf	tblptrh,c
  3312  0014BA                     	endif
  3313  0014BA                     	if	1	;There are 3 active tblptr bytes
  3314  0014BA  0E00               	movlw	low (_nanoAddr shr (0+16))
  3315  0014BC  6EF8               	movwf	tblptru,c
  3316  0014BE                     	endif
  3317  0014BE  0008               	tblrd		*
  3318  0014C0  50F5               	movf	tablat,w,c
  3319  0014C2  EC30  F010         	call	_I2C_Send
  3320                           
  3321                           ;main.c: 137: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3322  0014C6  0E01               	movlw	1
  3323  0014C8  EC06  F014         	call	_lcdInst
  3324  0014CC  0EC3               	movlw	195
  3325  0014CE  0100               	movlb	0	; () banked
  3326  0014D0  6FB4               	movwf	??_packaging& (0+255),b
  3327  0014D2  0ECD               	movlw	205
  3328  0014D4                     u6097:
  3329  0014D4  2EE8               	decfsz	wreg,f,c
  3330  0014D6  D7FE               	bra	u6097
  3331  0014D8  2FB4               	decfsz	??_packaging& (0+255),f,b
  3332  0014DA  D7FC               	bra	u6097
  3333                           
  3334                           ;main.c: 138: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3335  0014DC  0E80               	movlw	128
  3336  0014DE  EC06  F014         	call	_lcdInst
  3337  0014E2  0E41               	movlw	65
  3338  0014E4  0100               	movlb	0	; () banked
  3339  0014E6  6FB4               	movwf	??_packaging& (0+255),b
  3340  0014E8  0EEE               	movlw	238
  3341  0014EA                     u6107:
  3342  0014EA  2EE8               	decfsz	wreg,f,c
  3343  0014EC  D7FE               	bra	u6107
  3344  0014EE  2FB4               	decfsz	??_packaging& (0+255),f,b
  3345  0014F0  D7FC               	bra	u6107
  3346  0014F2  F000               	nop	
  3347                           
  3348                           ;main.c: 139: printf("Compartment %d", compartmentNum);
  3349  0014F4  0EA2               	movlw	low STR_8
  3350  0014F6  0100               	movlb	0	; () banked
  3351  0014F8  6F9B               	movwf	printf@f& (0+255),b
  3352  0014FA  0EFF               	movlw	high STR_8
  3353  0014FC  6F9C               	movwf	(printf@f+1)& (0+255),b
  3354  0014FE  C242  F09D         	movff	packaging@compartmentNum,?_printf+2
  3355  001502  C243  F09E         	movff	packaging@compartmentNum+1,?_printf+3
  3356  001506  EC3B  F013         	call	_printf	;wreg free
  3357                           
  3358                           ;main.c: 140: packageCompartment(set[0]*mult, set[1]*mult, set[2]*mult, set[3]*mult);
  3359  00150A  0E01               	movlw	1
  3360  00150C  0102               	movlb	2	; () banked
  3361  00150E  2544               	addwf	packaging@set& (0+255),w,b
  3362  001510  0100               	movlb	0	; () banked
  3363  001512  6FB4               	movwf	??_packaging& (0+255),b
  3364  001514  0E00               	movlw	0
  3365  001516  0102               	movlb	2	; () banked
  3366  001518  2145               	addwfc	(packaging@set+1)& (0+255),w,b
  3367  00151A  0100               	movlb	0	; () banked
  3368  00151C  6FB5               	movwf	(??_packaging+1)& (0+255),b
  3369  00151E  C0B4  FFF6         	movff	??_packaging,tblptrl
  3370  001522  C0B5  FFF7         	movff	??_packaging+1,tblptrh
  3371  001526                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3372  001526  6AF8               	clrf	tblptru,c
  3373  001528                     	endif
  3374  001528                     	if	0	;tblptru may be non-zero
  3375  001528                     	endif
  3376  001528  0008               	tblrd		*
  3377  00152A  50F5               	movf	tablat,w,c
  3378  00152C  0102               	movlb	2	; () banked
  3379  00152E  0346               	mulwf	packaging@mult& (0+255),b
  3380  001530  CFF3 F086          	movff	prodl,packageCompartment@n
  3381  001534  0E02               	movlw	2
  3382  001536  2544               	addwf	packaging@set& (0+255),w,b
  3383  001538  0100               	movlb	0	; () banked
  3384  00153A  6FB6               	movwf	(??_packaging+2)& (0+255),b
  3385  00153C  0E00               	movlw	0
  3386  00153E  0102               	movlb	2	; () banked
  3387  001540  2145               	addwfc	(packaging@set+1)& (0+255),w,b
  3388  001542  0100               	movlb	0	; () banked
  3389  001544  6FB7               	movwf	(??_packaging+3)& (0+255),b
  3390  001546  C0B6  FFF6         	movff	??_packaging+2,tblptrl
  3391  00154A  C0B7  FFF7         	movff	??_packaging+3,tblptrh
  3392  00154E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3393  00154E  6AF8               	clrf	tblptru,c
  3394  001550                     	endif
  3395  001550                     	if	0	;tblptru may be non-zero
  3396  001550                     	endif
  3397  001550  0008               	tblrd		*
  3398  001552  50F5               	movf	tablat,w,c
  3399  001554  0102               	movlb	2	; () banked
  3400  001556  0346               	mulwf	packaging@mult& (0+255),b
  3401  001558  CFF3 F087          	movff	prodl,packageCompartment@s
  3402  00155C  0E03               	movlw	3
  3403  00155E  2544               	addwf	packaging@set& (0+255),w,b
  3404  001560  0100               	movlb	0	; () banked
  3405  001562  6FB8               	movwf	(??_packaging+4)& (0+255),b
  3406  001564  0E00               	movlw	0
  3407  001566  0102               	movlb	2	; () banked
  3408  001568  2145               	addwfc	(packaging@set+1)& (0+255),w,b
  3409  00156A  0100               	movlb	0	; () banked
  3410  00156C  6FB9               	movwf	(??_packaging+5)& (0+255),b
  3411  00156E  C0B8  FFF6         	movff	??_packaging+4,tblptrl
  3412  001572  C0B9  FFF7         	movff	??_packaging+5,tblptrh
  3413  001576                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3414  001576  6AF8               	clrf	tblptru,c
  3415  001578                     	endif
  3416  001578                     	if	0	;tblptru may be non-zero
  3417  001578                     	endif
  3418  001578  0008               	tblrd		*
  3419  00157A  50F5               	movf	tablat,w,c
  3420  00157C  0102               	movlb	2	; () banked
  3421  00157E  0346               	mulwf	packaging@mult& (0+255),b
  3422  001580  CFF3 F088          	movff	prodl,packageCompartment@w
  3423  001584  C244  FFF6         	movff	packaging@set,tblptrl
  3424  001588  C245  FFF7         	movff	packaging@set+1,tblptrh
  3425  00158C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3426  00158C  6AF8               	clrf	tblptru,c
  3427  00158E                     	endif
  3428  00158E                     	if	0	;tblptru may be non-zero
  3429  00158E                     	endif
  3430  00158E  0008               	tblrd		*
  3431  001590  50F5               	movf	tablat,w,c
  3432  001592  0346               	mulwf	packaging@mult& (0+255),b
  3433  001594  50F3               	movf	prodl,w,c
  3434  001596  ECA4  F005         	call	_packageCompartment
  3435  00159A                     l115:
  3436  00159A  0102               	movlb	2	; () banked
  3437  00159C  0742               	decf	packaging@compartmentNum& (0+255),f,b
  3438  00159E  A0D8               	btfss	status,0,c
  3439  0015A0  0743               	decf	(packaging@compartmentNum+1)& (0+255),f,b
  3440                           
  3441                           ; BSR set to: 2
  3442  0015A2  BF43               	btfsc	(packaging@compartmentNum+1)& (0+255),7,b
  3443  0015A4  0012               	return	
  3444  0015A6  5143               	movf	(packaging@compartmentNum+1)& (0+255),w,b
  3445  0015A8  E101               	bnz	u5251
  3446  0015AA  D6A1               	goto	L2
  3447  0015AC                     u5251:
  3448  0015AC  D6A3               	goto	l110
  3449  0015AE                     __end_of_packaging:
  3450                           	opt stack 0
  3451                           tblptru	equ	0xFF8
  3452                           tblptrh	equ	0xFF7
  3453                           tblptrl	equ	0xFF6
  3454                           tablat	equ	0xFF5
  3455                           prodh	equ	0xFF4
  3456                           prodl	equ	0xFF3
  3457                           postinc0	equ	0xFEE
  3458                           wreg	equ	0xFE8
  3459                           postdec1	equ	0xFE5
  3460                           plusw1	equ	0xFE3
  3461                           fsr1l	equ	0xFE1
  3462                           indf2	equ	0xFDF
  3463                           postinc2	equ	0xFDE
  3464                           postdec2	equ	0xFDD
  3465                           plusw2	equ	0xFDB
  3466                           fsr2h	equ	0xFDA
  3467                           fsr2l	equ	0xFD9
  3468                           status	equ	0xFD8
  3469                           
  3470 ;; *************** function _sprintf *****************
  3471 ;; Defined at:
  3472 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprintf.c"
  3473 ;; Parameters:    Size  Location     Type
  3474 ;;  wh              2   27[BANK0 ] PTR unsigned char 
  3475 ;;		 -> packaging@msg2(32), 
  3476 ;;  f               2   29[BANK0 ] PTR const unsigned char 
  3477 ;;		 -> STR_7(22), 
  3478 ;; Auto vars:     Size  Location     Type
  3479 ;;  pb              4   41[BANK0 ] struct __prbuf
  3480 ;;  ap              2   39[BANK0 ] PTR void [1]
  3481 ;;		 -> ?_sprintf(2), ?_printf(2), 
  3482 ;; Return value:  Size  Location     Type
  3483 ;;                  2   27[BANK0 ] int 
  3484 ;; Registers used:
  3485 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3486 ;; Tracked objects:
  3487 ;;		On entry : 0/0
  3488 ;;		On exit  : 0/0
  3489 ;;		Unchanged: 0/0
  3490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3491 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3492 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3494 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3495 ;;Total ram usage:       18 bytes
  3496 ;; Hardware stack levels used:    1
  3497 ;; Hardware stack levels required when called:    7
  3498 ;; This function calls:
  3499 ;;		__doprnt
  3500 ;; This function is called by:
  3501 ;;		_packaging
  3502 ;; This function uses a non-reentrant model
  3503 ;;
  3504                           
  3505                           	psect	text4
  3506  0025B6                     __ptext4:
  3507                           	opt stack 0
  3508  0025B6                     _sprintf:
  3509                           	opt stack 21
  3510                           
  3511                           ; BSR set to: 2
  3512                           ;incstack = 0
  3513  0025B6  C09B  F0A9         	movff	sprintf@wh,sprintf@pb
  3514  0025BA  C09C  F0AA         	movff	sprintf@wh+1,sprintf@pb+1
  3515  0025BE  0E00               	movlw	0
  3516  0025C0  0100               	movlb	0	; () banked
  3517  0025C2  6FAB               	movwf	(sprintf@pb+2)& (0+255),b
  3518  0025C4  0E00               	movlw	0
  3519  0025C6  6FAC               	movwf	(sprintf@pb+3)& (0+255),b
  3520  0025C8  0E9F               	movlw	low (?_sprintf+4)
  3521  0025CA  6FA7               	movwf	sprintf@ap& (0+255),b
  3522  0025CC  0E00               	movlw	high (?_sprintf+4)
  3523  0025CE  6FA8               	movwf	(sprintf@ap+1)& (0+255),b
  3524                           
  3525                           ; BSR set to: 0
  3526  0025D0  0EA9               	movlw	low sprintf@pb
  3527  0025D2  6F89               	movwf	__doprnt@pb& (0+255),b
  3528  0025D4  0E00               	movlw	high sprintf@pb
  3529  0025D6  6F8A               	movwf	(__doprnt@pb+1)& (0+255),b
  3530  0025D8  C09D  F08B         	movff	sprintf@f,__doprnt@f
  3531  0025DC  C09E  F08C         	movff	sprintf@f+1,__doprnt@f+1
  3532  0025E0  0EA7               	movlw	low sprintf@ap
  3533  0025E2  6F8D               	movwf	__doprnt@ap& (0+255),b
  3534  0025E4  0E00               	movlw	high sprintf@ap
  3535  0025E6  6F8E               	movwf	(__doprnt@ap+1)& (0+255),b
  3536  0025E8  EC82  F003         	call	__doprnt	;wreg free
  3537  0025EC  C0A9  FFD9         	movff	sprintf@pb,fsr2l
  3538  0025F0  C0AA  FFDA         	movff	sprintf@pb+1,fsr2h
  3539  0025F4  0E00               	movlw	0
  3540  0025F6  6EDF               	movwf	indf2,c
  3541  0025F8  0012               	return	
  3542  0025FA                     __end_of_sprintf:
  3543                           	opt stack 0
  3544                           tblptru	equ	0xFF8
  3545                           tblptrh	equ	0xFF7
  3546                           tblptrl	equ	0xFF6
  3547                           tablat	equ	0xFF5
  3548                           prodh	equ	0xFF4
  3549                           prodl	equ	0xFF3
  3550                           postinc0	equ	0xFEE
  3551                           wreg	equ	0xFE8
  3552                           postdec1	equ	0xFE5
  3553                           plusw1	equ	0xFE3
  3554                           fsr1l	equ	0xFE1
  3555                           indf2	equ	0xFDF
  3556                           postinc2	equ	0xFDE
  3557                           postdec2	equ	0xFDD
  3558                           plusw2	equ	0xFDB
  3559                           fsr2h	equ	0xFDA
  3560                           fsr2l	equ	0xFD9
  3561                           status	equ	0xFD8
  3562                           
  3563 ;; *************** function _printf *****************
  3564 ;; Defined at:
  3565 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\printf.c"
  3566 ;; Parameters:    Size  Location     Type
  3567 ;;  f               2   27[BANK0 ] PTR const unsigned char 
  3568 ;;		 -> STR_23(4), STR_22(6), STR_21(16), STR_20(11), 
  3569 ;;		 -> STR_19(12), STR_18(9), STR_16(19), STR_15(10), 
  3570 ;;		 -> STR_14(17), STR_8(15), 
  3571 ;; Auto vars:     Size  Location     Type
  3572 ;;  pb              4   39[BANK0 ] struct __prbuf
  3573 ;;  ap              2   37[BANK0 ] PTR void [1]
  3574 ;;		 -> ?_sprintf(2), ?_printf(2), 
  3575 ;; Return value:  Size  Location     Type
  3576 ;;                  2   27[BANK0 ] int 
  3577 ;; Registers used:
  3578 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3579 ;; Tracked objects:
  3580 ;;		On entry : 0/0
  3581 ;;		On exit  : 0/0
  3582 ;;		Unchanged: 0/0
  3583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3584 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3585 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3587 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3588 ;;Total ram usage:       16 bytes
  3589 ;; Hardware stack levels used:    1
  3590 ;; Hardware stack levels required when called:    7
  3591 ;; This function calls:
  3592 ;;		__doprnt
  3593 ;; This function is called by:
  3594 ;;		_packaging
  3595 ;;		_mainMenu
  3596 ;; This function uses a non-reentrant model
  3597 ;;
  3598                           
  3599                           	psect	text5
  3600  002676                     __ptext5:
  3601                           	opt stack 0
  3602  002676                     _printf:
  3603                           	opt stack 22
  3604                           
  3605                           ;incstack = 0
  3606  002676  0E00               	movlw	0
  3607  002678  0100               	movlb	0	; () banked
  3608  00267A  6FA7               	movwf	printf@pb& (0+255),b
  3609  00267C  0E00               	movlw	0
  3610  00267E  6FA8               	movwf	(printf@pb+1)& (0+255),b
  3611  002680  0EF8               	movlw	low _putch
  3612  002682  6FA9               	movwf	(printf@pb+2)& (0+255),b
  3613  002684  0E27               	movlw	high _putch
  3614  002686  6FAA               	movwf	(printf@pb+3)& (0+255),b
  3615  002688  0E9D               	movlw	low (?_printf+2)
  3616  00268A  6FA5               	movwf	printf@ap& (0+255),b
  3617  00268C  0E00               	movlw	high (?_printf+2)
  3618  00268E  6FA6               	movwf	(printf@ap+1)& (0+255),b
  3619                           
  3620                           ; BSR set to: 0
  3621                           ;	Return value of _printf is never used
  3622  002690  0EA7               	movlw	low printf@pb
  3623  002692  6F89               	movwf	__doprnt@pb& (0+255),b
  3624  002694  0E00               	movlw	high printf@pb
  3625  002696  6F8A               	movwf	(__doprnt@pb+1)& (0+255),b
  3626  002698  C09B  F08B         	movff	printf@f,__doprnt@f
  3627  00269C  C09C  F08C         	movff	printf@f+1,__doprnt@f+1
  3628  0026A0  0EA5               	movlw	low printf@ap
  3629  0026A2  6F8D               	movwf	__doprnt@ap& (0+255),b
  3630  0026A4  0E00               	movlw	high printf@ap
  3631  0026A6  6F8E               	movwf	(__doprnt@ap+1)& (0+255),b
  3632  0026A8  EC82  F003         	call	__doprnt	;wreg free
  3633  0026AC  0012               	return	
  3634  0026AE                     __end_of_printf:
  3635                           	opt stack 0
  3636                           tblptru	equ	0xFF8
  3637                           tblptrh	equ	0xFF7
  3638                           tblptrl	equ	0xFF6
  3639                           tablat	equ	0xFF5
  3640                           prodh	equ	0xFF4
  3641                           prodl	equ	0xFF3
  3642                           postinc0	equ	0xFEE
  3643                           wreg	equ	0xFE8
  3644                           postdec1	equ	0xFE5
  3645                           plusw1	equ	0xFE3
  3646                           fsr1l	equ	0xFE1
  3647                           indf2	equ	0xFDF
  3648                           postinc2	equ	0xFDE
  3649                           postdec2	equ	0xFDD
  3650                           plusw2	equ	0xFDB
  3651                           fsr2h	equ	0xFDA
  3652                           fsr2l	equ	0xFD9
  3653                           status	equ	0xFD8
  3654                           
  3655 ;; *************** function __doprnt *****************
  3656 ;; Defined at:
  3657 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3658 ;; Parameters:    Size  Location     Type
  3659 ;;  pb              2    9[BANK0 ] PTR struct __prbuf
  3660 ;;		 -> sprintf@pb(4), printf@pb(4), 
  3661 ;;  f               2   11[BANK0 ] PTR const unsigned char 
  3662 ;;		 -> STR_23(4), STR_22(6), STR_21(16), STR_20(11), 
  3663 ;;		 -> STR_19(12), STR_18(9), STR_16(19), STR_15(10), 
  3664 ;;		 -> STR_14(17), STR_8(15), STR_7(22), 
  3665 ;;  ap              2   13[BANK0 ] PTR PTR void 
  3666 ;;		 -> sprintf@ap(2), printf@ap(2), 
  3667 ;; Auto vars:     Size  Location     Type
  3668 ;;  val             4   20[BANK0 ] unsigned long 
  3669 ;;  tmpval          4    0        struct .
  3670 ;;  cp              2   24[BANK0 ] PTR const unsigned char 
  3671 ;;		 -> ?_sprintf(2), ?_printf(2), NULL(0), STR_24(7), 
  3672 ;;		 -> fSLookup(105), packaging@msg2(32), 
  3673 ;;  prec            2   17[BANK0 ] int 
  3674 ;;  len             2    0        unsigned int 
  3675 ;;  c               1   26[BANK0 ] char 
  3676 ;;  flag            1   19[BANK0 ] unsigned char 
  3677 ;; Return value:  Size  Location     Type
  3678 ;;                  2    9[BANK0 ] int 
  3679 ;; Registers used:
  3680 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3681 ;; Tracked objects:
  3682 ;;		On entry : 0/0
  3683 ;;		On exit  : 0/0
  3684 ;;		Unchanged: 0/0
  3685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3686 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3687 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3688 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3689 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3690 ;;Total ram usage:       18 bytes
  3691 ;; Hardware stack levels used:    1
  3692 ;; Hardware stack levels required when called:    6
  3693 ;; This function calls:
  3694 ;;		Absolute function
  3695 ;;		___lldiv
  3696 ;;		___llmod
  3697 ;;		_putch
  3698 ;; This function is called by:
  3699 ;;		_printf
  3700 ;;		_sprintf
  3701 ;; This function uses a non-reentrant model
  3702 ;;
  3703                           
  3704                           	psect	text6
  3705  000704                     __ptext6:
  3706                           	opt stack 0
  3707  000704                     __doprnt:
  3708                           	opt stack 22
  3709                           
  3710                           ;doprnt.c: 499: signed char c;
  3711                           ;doprnt.c: 504: int prec;
  3712                           ;doprnt.c: 508: unsigned char flag;
  3713                           ;doprnt.c: 523: union {
  3714                           ;doprnt.c: 524: unsigned long vd;
  3715                           ;doprnt.c: 525: double integ;
  3716                           ;doprnt.c: 526: } tmpval;
  3717                           ;doprnt.c: 528: unsigned long val;
  3718                           ;doprnt.c: 529: unsigned len;
  3719                           ;doprnt.c: 530: const char * cp;
  3720                           ;doprnt.c: 536: while(c = *f++) {
  3721                           
  3722                           ;incstack = 0
  3723  000704  D20E               	goto	u4910
  3724  000706                     
  3725                           ;doprnt.c: 538: if(c != '%')
  3726  000706  0E25               	movlw	37
  3727  000708  0100               	movlb	0	; () banked
  3728  00070A  199A               	xorwf	__doprnt@c& (0+255),w,b
  3729  00070C  B4D8               	btfsc	status,2,c
  3730  00070E  D036               	goto	l653
  3731                           
  3732                           ; BSR set to: 0
  3733                           ;doprnt.c: 540: {
  3734                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  3735  000710  EE20 F002          	lfsr	2,2
  3736  000714  5189               	movf	__doprnt@pb& (0+255),w,b
  3737  000716  26D9               	addwf	fsr2l,f,c
  3738  000718  518A               	movf	(__doprnt@pb+1)& (0+255),w,b
  3739  00071A  22DA               	addwfc	fsr2h,f,c
  3740  00071C  50DE               	movf	postinc2,w,c
  3741  00071E  10DE               	iorwf	postinc2,w,c
  3742  000720  B4D8               	btfsc	status,2,c
  3743  000722  D016               	goto	l654
  3744                           
  3745                           ; BSR set to: 0
  3746  000724  EE20 F002          	lfsr	2,2
  3747  000728  5189               	movf	__doprnt@pb& (0+255),w,b
  3748  00072A  26D9               	addwf	fsr2l,f,c
  3749  00072C  518A               	movf	(__doprnt@pb+1)& (0+255),w,b
  3750  00072E  22DA               	addwfc	fsr2h,f,c
  3751  000730  CFDE F08F          	movff	postinc2,??__doprnt
  3752  000734  CFDD F090          	movff	postdec2,??__doprnt+1
  3753  000738  D801               	call	u4738
  3754  00073A  D1F3               	goto	u4910
  3755  00073C                     u4738:
  3756  00073C  0005               	push	
  3757  00073E  6EFA               	movwf	pclath,c
  3758  000740  518F               	movf	??__doprnt& (0+255),w,b
  3759  000742  6EFD               	movwf	tosl,c
  3760  000744  5190               	movf	(??__doprnt+1)& (0+255),w,b
  3761  000746  6EFE               	movwf	tosh,c
  3762  000748  6AFF               	clrf	tosu,c
  3763  00074A  50FA               	movf	pclath,w,c
  3764  00074C  519A               	movf	__doprnt@c& (0+255),w,b
  3765  00074E  0012               	return		;indir
  3766  000750                     l654:
  3767  000750  C089  FFD9         	movff	__doprnt@pb,fsr2l
  3768  000754  C08A  FFDA         	movff	__doprnt@pb+1,fsr2h
  3769  000758  CFDE F08F          	movff	postinc2,??__doprnt
  3770  00075C  CFDD F090          	movff	postdec2,??__doprnt+1
  3771  000760  C08F  FFD9         	movff	??__doprnt,fsr2l
  3772  000764  C090  FFDA         	movff	??__doprnt+1,fsr2h
  3773  000768  C09A  FFDF         	movff	__doprnt@c,indf2
  3774  00076C  C089  FFD9         	movff	__doprnt@pb,fsr2l
  3775  000770  C08A  FFDA         	movff	__doprnt@pb+1,fsr2h
  3776  000774  2ADE               	incf	postinc2,f,c
  3777  000776  0E00               	movlw	0
  3778  000778  22DD               	addwfc	postdec2,f,c
  3779                           
  3780                           ;doprnt.c: 542: continue;
  3781  00077A  D1D3               	goto	u4910
  3782  00077C                     l653:
  3783                           
  3784                           ;doprnt.c: 543: }
  3785                           ;doprnt.c: 548: flag = 0;
  3786  00077C  0E00               	movlw	0
  3787  00077E  0100               	movlb	0	; () banked
  3788  000780  6F93               	movwf	__doprnt@flag& (0+255),b
  3789                           
  3790                           ; BSR set to: 0
  3791                           ;doprnt.c: 635: switch(c = *f++) {
  3792                           
  3793                           ;doprnt.c: 633: loop:
  3794  000782  D091               	goto	l657
  3795  000784                     
  3796                           ; BSR set to: 0
  3797                           ;doprnt.c: 643: flag |= 0x10;
  3798                           
  3799                           ; BSR set to: 0
  3800  000784  8993               	bsf	__doprnt@flag& (0+255),4,b
  3801                           
  3802                           ;doprnt.c: 644: goto loop;
  3803  000786  D08F               	goto	l657
  3804  000788                     
  3805                           ; BSR set to: 0
  3806                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  3807                           
  3808                           ; BSR set to: 0
  3809  000788  C08D  FFD9         	movff	__doprnt@ap,fsr2l
  3810  00078C  C08E  FFDA         	movff	__doprnt@ap+1,fsr2h
  3811  000790  CFDF F08F          	movff	indf2,??__doprnt
  3812  000794  0E02               	movlw	2
  3813  000796  26DE               	addwf	postinc2,f,c
  3814  000798  CFDF F090          	movff	indf2,??__doprnt+1
  3815  00079C  0E00               	movlw	0
  3816  00079E  22DD               	addwfc	postdec2,f,c
  3817  0007A0  C08F  FFD9         	movff	??__doprnt,fsr2l
  3818  0007A4  C090  FFDA         	movff	??__doprnt+1,fsr2h
  3819  0007A8  CFDE F098          	movff	postinc2,__doprnt@cp
  3820  0007AC  CFDD F099          	movff	postdec2,__doprnt@cp+1
  3821                           
  3822                           ; BSR set to: 0
  3823                           ;doprnt.c: 740: if(!cp)
  3824  0007B0  5198               	movf	__doprnt@cp& (0+255),w,b
  3825  0007B2  1199               	iorwf	(__doprnt@cp+1)& (0+255),w,b
  3826  0007B4  A4D8               	btfss	status,2,c
  3827  0007B6  D062               	goto	l669
  3828                           
  3829                           ; BSR set to: 0
  3830                           ;doprnt.c: 741: cp = "(null)";
  3831  0007B8  0EED               	movlw	low STR_24
  3832  0007BA  6F98               	movwf	__doprnt@cp& (0+255),b
  3833  0007BC  0EFF               	movlw	high STR_24
  3834  0007BE  6F99               	movwf	(__doprnt@cp+1)& (0+255),b
  3835                           
  3836                           ; BSR set to: 0
  3837                           ;doprnt.c: 777: while(*cp)
  3838  0007C0  D05D               	goto	l669
  3839  0007C2                     
  3840                           ;doprnt.c: 778: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
  3841                           
  3842                           ; BSR set to: 0
  3843  0007C2  0100               	movlb	0	; () banked
  3844  0007C4  EE20 F002          	lfsr	2,2
  3845  0007C8  5189               	movf	__doprnt@pb& (0+255),w,b
  3846  0007CA  26D9               	addwf	fsr2l,f,c
  3847  0007CC  518A               	movf	(__doprnt@pb+1)& (0+255),w,b
  3848  0007CE  22DA               	addwfc	fsr2h,f,c
  3849  0007D0  50DE               	movf	postinc2,w,c
  3850  0007D2  10DE               	iorwf	postinc2,w,c
  3851  0007D4  B4D8               	btfsc	status,2,c
  3852  0007D6  D02A               	goto	l668
  3853                           
  3854                           ; BSR set to: 0
  3855  0007D8  EE20 F002          	lfsr	2,2
  3856  0007DC  5189               	movf	__doprnt@pb& (0+255),w,b
  3857  0007DE  26D9               	addwf	fsr2l,f,c
  3858  0007E0  518A               	movf	(__doprnt@pb+1)& (0+255),w,b
  3859  0007E2  22DA               	addwfc	fsr2h,f,c
  3860  0007E4  CFDE F08F          	movff	postinc2,??__doprnt
  3861  0007E8  CFDD F090          	movff	postdec2,??__doprnt+1
  3862  0007EC  D801               	call	u4768
  3863  0007EE  D01A               	goto	u4769
  3864  0007F0                     u4768:
  3865  0007F0  0005               	push	
  3866  0007F2  6EFA               	movwf	pclath,c
  3867  0007F4  518F               	movf	??__doprnt& (0+255),w,b
  3868  0007F6  6EFD               	movwf	tosl,c
  3869  0007F8  5190               	movf	(??__doprnt+1)& (0+255),w,b
  3870  0007FA  6EFE               	movwf	tosh,c
  3871  0007FC  6AFF               	clrf	tosu,c
  3872  0007FE  50FA               	movf	pclath,w,c
  3873  000800  C098  FFF6         	movff	__doprnt@cp,tblptrl
  3874  000804  C099  FFF7         	movff	__doprnt@cp+1,tblptrh
  3875  000808  0E00               	movlw	low (__mediumconst shr (0+16))
  3876  00080A  6EF8               	movwf	tblptru,c
  3877  00080C  0E0F               	movlw	(high __ramtop+-1)
  3878  00080E  64F7               	cpfsgt	tblptrh,c
  3879  000810  D003               	bra	u4777
  3880  000812  0008               	tblrd		*
  3881  000814  50F5               	movf	tablat,w,c
  3882  000816  D005               	bra	u4770
  3883  000818                     u4777:
  3884  000818  CFF6 FFE9          	movff	tblptrl,fsr0l
  3885  00081C  CFF7 FFEA          	movff	tblptrh,fsr0h
  3886  000820  50EF               	movf	indf0,w,c
  3887  000822                     u4770:
  3888  000822  0012               	return		;indir
  3889  000824                     u4769:
  3890  000824  0100               	movlb	0	; () banked
  3891  000826  4B98               	infsnz	__doprnt@cp& (0+255),f,b
  3892  000828  2B99               	incf	(__doprnt@cp+1)& (0+255),f,b
  3893  00082A  D028               	goto	l669
  3894  00082C                     l668:
  3895                           
  3896                           ; BSR set to: 0
  3897                           
  3898                           ; BSR set to: 0
  3899  00082C  C098  FFF6         	movff	__doprnt@cp,tblptrl
  3900  000830  C099  FFF7         	movff	__doprnt@cp+1,tblptrh
  3901  000834  0E00               	movlw	low (__mediumconst shr (0+16))
  3902  000836  6EF8               	movwf	tblptru,c
  3903  000838  C089  FFD9         	movff	__doprnt@pb,fsr2l
  3904  00083C  C08A  FFDA         	movff	__doprnt@pb+1,fsr2h
  3905  000840  CFDE F08F          	movff	postinc2,??__doprnt
  3906  000844  CFDD F090          	movff	postdec2,??__doprnt+1
  3907  000848  C08F  FFD9         	movff	??__doprnt,fsr2l
  3908  00084C  C090  FFDA         	movff	??__doprnt+1,fsr2h
  3909  000850  0E0F               	movlw	(high __ramtop+-1)
  3910  000852  64F7               	cpfsgt	tblptrh,c
  3911  000854  D003               	bra	u4787
  3912  000856  0008               	tblrd		*
  3913  000858  50F5               	movf	tablat,w,c
  3914  00085A  D005               	bra	u4780
  3915  00085C                     u4787:
  3916  00085C  CFF6 FFE9          	movff	tblptrl,fsr0l
  3917  000860  CFF7 FFEA          	movff	tblptrh,fsr0h
  3918  000864  50EF               	movf	indf0,w,c
  3919  000866                     u4780:
  3920  000866  6EDF               	movwf	indf2,c
  3921  000868  0100               	movlb	0	; () banked
  3922  00086A  4B98               	infsnz	__doprnt@cp& (0+255),f,b
  3923  00086C  2B99               	incf	(__doprnt@cp+1)& (0+255),f,b
  3924                           
  3925                           ; BSR set to: 0
  3926  00086E  C089  FFD9         	movff	__doprnt@pb,fsr2l
  3927  000872  C08A  FFDA         	movff	__doprnt@pb+1,fsr2h
  3928  000876  2ADE               	incf	postinc2,f,c
  3929  000878  0E00               	movlw	0
  3930  00087A  22DD               	addwfc	postdec2,f,c
  3931  00087C                     l669:
  3932                           
  3933                           ; BSR set to: 0
  3934                           
  3935                           ; BSR set to: 0
  3936                           
  3937                           ; BSR set to: 0
  3938  00087C  C098  FFF6         	movff	__doprnt@cp,tblptrl
  3939  000880  C099  FFF7         	movff	__doprnt@cp+1,tblptrh
  3940  000884  0E00               	movlw	low (__mediumconst shr (0+16))
  3941  000886  6EF8               	movwf	tblptru,c
  3942  000888  0E0F               	movlw	(high __ramtop+-1)
  3943  00088A  64F7               	cpfsgt	tblptrh,c
  3944  00088C  D003               	bra	u4797
  3945  00088E  0008               	tblrd		*
  3946  000890  50F5               	movf	tablat,w,c
  3947  000892  D005               	bra	u4790
  3948  000894                     u4797:
  3949  000894  CFF6 FFE9          	movff	tblptrl,fsr0l
  3950  000898  CFF7 FFEA          	movff	tblptrh,fsr0h
  3951  00089C  50EF               	movf	indf0,w,c
  3952  00089E                     u4790:
  3953  00089E  0900               	iorlw	0
  3954  0008A0  B4D8               	btfsc	status,2,c
  3955  0008A2  D13F               	goto	u4910
  3956  0008A4  D78E               	goto	l667
  3957  0008A6                     l657:
  3958  0008A6  C08B  FFF6         	movff	__doprnt@f,tblptrl
  3959  0008AA  C08C  FFF7         	movff	__doprnt@f+1,tblptrh
  3960  0008AE  0100               	movlb	0	; () banked
  3961  0008B0  4B8B               	infsnz	__doprnt@f& (0+255),f,b
  3962  0008B2  2B8C               	incf	(__doprnt@f+1)& (0+255),f,b
  3963  0008B4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3964  0008B4  6AF8               	clrf	tblptru,c
  3965  0008B6                     	endif
  3966  0008B6                     	if	0	;tblptru may be non-zero
  3967  0008B6                     	endif
  3968  0008B6  0008               	tblrd		*
  3969  0008B8  CFF5 F09A          	movff	tablat,__doprnt@c
  3970  0008BC  519A               	movf	__doprnt@c& (0+255),w,b
  3971                           
  3972                           ; Switch size 1, requested type "space"
  3973                           ; Number of cases is 5, Range of values is 0 to 115
  3974                           ; switch strategies available:
  3975                           ; Name         Instructions Cycles
  3976                           ; simple_byte           16     9 (average)
  3977                           ;	Chosen strategy is simple_byte
  3978  0008BE  0A00               	xorlw	0	; case 0
  3979  0008C0  B4D8               	btfsc	status,2,c
  3980  0008C2  D13D               	goto	u4920
  3981  0008C4  0A64               	xorlw	100	; case 100
  3982  0008C6  B4D8               	btfsc	status,2,c
  3983  0008C8  D00A               	goto	l663
  3984  0008CA  0A0D               	xorlw	13	; case 105
  3985  0008CC  B4D8               	btfsc	status,2,c
  3986  0008CE  D007               	goto	l663
  3987  0008D0  0A05               	xorlw	5	; case 108
  3988  0008D2  B4D8               	btfsc	status,2,c
  3989  0008D4  D757               	goto	l660
  3990  0008D6  0A1F               	xorlw	31	; case 115
  3991  0008D8  B4D8               	btfsc	status,2,c
  3992  0008DA  D756               	goto	l664
  3993  0008DC  D122               	goto	u4910
  3994  0008DE                     l663:
  3995                           
  3996                           ;doprnt.c: 1253: {
  3997                           ;doprnt.c: 1255: if(flag & 0x10)
  3998  0008DE  0100               	movlb	0	; () banked
  3999  0008E0  A993               	btfss	__doprnt@flag& (0+255),4,b
  4000  0008E2  D019               	goto	l672
  4001                           
  4002                           ; BSR set to: 0
  4003                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  4004  0008E4  C08D  FFD9         	movff	__doprnt@ap,fsr2l
  4005  0008E8  C08E  FFDA         	movff	__doprnt@ap+1,fsr2h
  4006  0008EC  CFDF F08F          	movff	indf2,??__doprnt
  4007  0008F0  0E04               	movlw	4
  4008  0008F2  26DE               	addwf	postinc2,f,c
  4009  0008F4  CFDF F090          	movff	indf2,??__doprnt+1
  4010  0008F8  0E00               	movlw	0
  4011  0008FA  22DD               	addwfc	postdec2,f,c
  4012  0008FC  C08F  FFD9         	movff	??__doprnt,fsr2l
  4013  000900  C090  FFDA         	movff	??__doprnt+1,fsr2h
  4014  000904  CFDE F094          	movff	postinc2,__doprnt@val
  4015  000908  CFDE F095          	movff	postinc2,__doprnt@val+1
  4016  00090C  CFDE F096          	movff	postinc2,__doprnt@val+2
  4017  000910  CFDE F097          	movff	postinc2,__doprnt@val+3
  4018  000914  D019               	goto	l673
  4019  000916                     l672:
  4020                           
  4021                           ; BSR set to: 0
  4022                           ;doprnt.c: 1257: else
  4023                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4024                           
  4025                           ; BSR set to: 0
  4026  000916  C08D  FFD9         	movff	__doprnt@ap,fsr2l
  4027  00091A  C08E  FFDA         	movff	__doprnt@ap+1,fsr2h
  4028  00091E  CFDF F08F          	movff	indf2,??__doprnt
  4029  000922  0E02               	movlw	2
  4030  000924  26DE               	addwf	postinc2,f,c
  4031  000926  CFDF F090          	movff	indf2,??__doprnt+1
  4032  00092A  0E00               	movlw	0
  4033  00092C  22DD               	addwfc	postdec2,f,c
  4034  00092E  C08F  FFD9         	movff	??__doprnt,fsr2l
  4035  000932  C090  FFDA         	movff	??__doprnt+1,fsr2h
  4036  000936  CFDE F094          	movff	postinc2,__doprnt@val
  4037  00093A  CFDD F095          	movff	postdec2,__doprnt@val+1
  4038  00093E  0E00               	movlw	0
  4039  000940  BF95               	btfsc	(__doprnt@val+1)& (0+255),7,b
  4040  000942  0EFF               	movlw	-1
  4041  000944  6F96               	movwf	(__doprnt@val+2)& (0+255),b
  4042  000946  6F97               	movwf	(__doprnt@val+3)& (0+255),b
  4043  000948                     l673:
  4044                           
  4045                           ; BSR set to: 0
  4046                           ;doprnt.c: 1261: if((long)val < 0) {
  4047                           
  4048                           ; BSR set to: 0
  4049  000948  AF97               	btfss	(__doprnt@val+3)& (0+255),7,b
  4050  00094A  D00A               	goto	l674
  4051                           
  4052                           ; BSR set to: 0
  4053                           ;doprnt.c: 1262: flag |= 0x03;
  4054  00094C  0E03               	movlw	3
  4055  00094E  1393               	iorwf	__doprnt@flag& (0+255),f,b
  4056                           
  4057                           ; BSR set to: 0
  4058                           ;doprnt.c: 1263: val = -val;
  4059  000950  1F97               	comf	(__doprnt@val+3)& (0+255),f,b
  4060  000952  1F96               	comf	(__doprnt@val+2)& (0+255),f,b
  4061  000954  1F95               	comf	(__doprnt@val+1)& (0+255),f,b
  4062  000956  6D94               	negf	__doprnt@val& (0+255),b
  4063  000958  0E00               	movlw	0
  4064  00095A  2395               	addwfc	(__doprnt@val+1)& (0+255),f,b
  4065  00095C  2396               	addwfc	(__doprnt@val+2)& (0+255),f,b
  4066  00095E  2397               	addwfc	(__doprnt@val+3)& (0+255),f,b
  4067  000960                     l674:
  4068                           
  4069                           ; BSR set to: 0
  4070                           ;doprnt.c: 1264: }
  4071                           ;doprnt.c: 1266: }
  4072                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4073                           
  4074                           ; BSR set to: 0
  4075  000960  0E01               	movlw	1
  4076  000962  6F9A               	movwf	__doprnt@c& (0+255),b
  4077  000964                     l4299:
  4078                           
  4079                           ; BSR set to: 0
  4080  000964  0E0A               	movlw	10
  4081  000966  199A               	xorwf	__doprnt@c& (0+255),w,b
  4082  000968  B4D8               	btfsc	status,2,c
  4083  00096A  D01B               	goto	u4850
  4084                           
  4085                           ; BSR set to: 0
  4086                           ;doprnt.c: 1306: if(val < dpowers[c])
  4087                           
  4088                           ; BSR set to: 0
  4089                           
  4090                           ; BSR set to: 0
  4091  00096C  519A               	movf	__doprnt@c& (0+255),w,b
  4092  00096E  0D04               	mullw	4
  4093  000970  0E6F               	movlw	low _dpowers
  4094  000972  24F3               	addwf	prodl,w,c
  4095  000974  6EF6               	movwf	tblptrl,c
  4096  000976  0EFC               	movlw	high _dpowers
  4097  000978  20F4               	addwfc	prodh,w,c
  4098  00097A  6EF7               	movwf	tblptrh,c
  4099  00097C                     	if	1	;There are 3 active tblptr bytes
  4100  00097C  6AF8               	clrf	tblptru,c
  4101  00097E  0E00               	movlw	low (__mediumconst shr (0+16))
  4102  000980  22F8               	addwfc	tblptru,f,c
  4103  000982                     	endif
  4104  000982  0009               	tblrd		*+
  4105  000984  50F5               	movf	tablat,w,c
  4106  000986  5D94               	subwf	__doprnt@val& (0+255),w,b
  4107  000988  0009               	tblrd		*+
  4108  00098A  50F5               	movf	tablat,w,c
  4109  00098C  5995               	subwfb	(__doprnt@val+1)& (0+255),w,b
  4110  00098E  0009               	tblrd		*+
  4111  000990  50F5               	movf	tablat,w,c
  4112  000992  5996               	subwfb	(__doprnt@val+2)& (0+255),w,b
  4113  000994  0009               	tblrd		*+
  4114  000996  50F5               	movf	tablat,w,c
  4115  000998  5997               	subwfb	(__doprnt@val+3)& (0+255),w,b
  4116  00099A  A0D8               	btfss	status,0,c
  4117  00099C  D002               	goto	u4850
  4118                           
  4119                           ; BSR set to: 0
  4120                           
  4121                           ; BSR set to: 0
  4122                           
  4123                           ; BSR set to: 0
  4124                           ;doprnt.c: 1307: break;
  4125  00099E  2B9A               	incf	__doprnt@c& (0+255),f,b
  4126  0009A0  D7E1               	goto	l4299
  4127  0009A2                     u4850:
  4128                           
  4129                           ; BSR set to: 0
  4130                           ;doprnt.c: 1422: {
  4131                           ;doprnt.c: 1438: if(flag & 0x03)
  4132                           
  4133                           ; BSR set to: 0
  4134  0009A2  C093  F08F         	movff	__doprnt@flag,??__doprnt
  4135  0009A6  0E03               	movlw	3
  4136  0009A8  178F               	andwf	??__doprnt& (0+255),f,b
  4137  0009AA  B4D8               	btfsc	status,2,c
  4138  0009AC  D035               	goto	l680
  4139                           
  4140                           ; BSR set to: 0
  4141                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  4142  0009AE  EE20 F002          	lfsr	2,2
  4143  0009B2  5189               	movf	__doprnt@pb& (0+255),w,b
  4144  0009B4  26D9               	addwf	fsr2l,f,c
  4145  0009B6  518A               	movf	(__doprnt@pb+1)& (0+255),w,b
  4146  0009B8  22DA               	addwfc	fsr2h,f,c
  4147  0009BA  50DE               	movf	postinc2,w,c
  4148  0009BC  10DE               	iorwf	postinc2,w,c
  4149  0009BE  B4D8               	btfsc	status,2,c
  4150  0009C0  D016               	goto	l679
  4151                           
  4152                           ; BSR set to: 0
  4153  0009C2  EE20 F002          	lfsr	2,2
  4154  0009C6  5189               	movf	__doprnt@pb& (0+255),w,b
  4155  0009C8  26D9               	addwf	fsr2l,f,c
  4156  0009CA  518A               	movf	(__doprnt@pb+1)& (0+255),w,b
  4157  0009CC  22DA               	addwfc	fsr2h,f,c
  4158  0009CE  CFDE F08F          	movff	postinc2,??__doprnt
  4159  0009D2  CFDD F090          	movff	postdec2,??__doprnt+1
  4160  0009D6  D801               	call	u4888
  4161  0009D8  D01F               	goto	l680
  4162  0009DA                     u4888:
  4163  0009DA  0005               	push	
  4164  0009DC  6EFA               	movwf	pclath,c
  4165  0009DE  518F               	movf	??__doprnt& (0+255),w,b
  4166  0009E0  6EFD               	movwf	tosl,c
  4167  0009E2  5190               	movf	(??__doprnt+1)& (0+255),w,b
  4168  0009E4  6EFE               	movwf	tosh,c
  4169  0009E6  6AFF               	clrf	tosu,c
  4170  0009E8  50FA               	movf	pclath,w,c
  4171  0009EA  0E2D               	movlw	45
  4172  0009EC  0012               	return		;indir
  4173  0009EE                     l679:
  4174  0009EE  C089  FFD9         	movff	__doprnt@pb,fsr2l
  4175  0009F2  C08A  FFDA         	movff	__doprnt@pb+1,fsr2h
  4176  0009F6  CFDE F08F          	movff	postinc2,??__doprnt
  4177  0009FA  CFDD F090          	movff	postdec2,??__doprnt+1
  4178  0009FE  C08F  FFD9         	movff	??__doprnt,fsr2l
  4179  000A02  C090  FFDA         	movff	??__doprnt+1,fsr2h
  4180  000A06  0E2D               	movlw	45
  4181  000A08  6EDF               	movwf	indf2,c
  4182  000A0A  C089  FFD9         	movff	__doprnt@pb,fsr2l
  4183  000A0E  C08A  FFDA         	movff	__doprnt@pb+1,fsr2h
  4184  000A12  2ADE               	incf	postinc2,f,c
  4185  000A14  0E00               	movlw	0
  4186  000A16  22DD               	addwfc	postdec2,f,c
  4187  000A18                     l680:
  4188                           
  4189                           ;doprnt.c: 1469: }
  4190                           ;doprnt.c: 1472: prec = c;
  4191  000A18  0100               	movlb	0	; () banked
  4192  000A1A  519A               	movf	__doprnt@c& (0+255),w,b
  4193  000A1C  6F91               	movwf	__doprnt@prec& (0+255),b
  4194  000A1E  6B92               	clrf	(__doprnt@prec+1)& (0+255),b
  4195  000A20  BF91               	btfsc	__doprnt@prec& (0+255),7,b
  4196  000A22  0792               	decf	(__doprnt@prec+1)& (0+255),f,b
  4197                           
  4198                           ;doprnt.c: 1474: while(prec--) {
  4199  000A24  D075               	goto	l684
  4200  000A26                     l4323:
  4201                           
  4202                           ; BSR set to: 0
  4203                           ;doprnt.c: 1478: {
  4204                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4205  000A26  C091  F08F         	movff	__doprnt@prec,??__doprnt
  4206  000A2A  C092  F090         	movff	__doprnt@prec+1,??__doprnt+1
  4207  000A2E  90D8               	bcf	status,0,c
  4208  000A30  378F               	rlcf	??__doprnt& (0+255),f,b
  4209  000A32  3790               	rlcf	(??__doprnt+1)& (0+255),f,b
  4210  000A34  90D8               	bcf	status,0,c
  4211  000A36  378F               	rlcf	??__doprnt& (0+255),f,b
  4212  000A38  3790               	rlcf	(??__doprnt+1)& (0+255),f,b
  4213  000A3A  0E6F               	movlw	low _dpowers
  4214  000A3C  258F               	addwf	??__doprnt& (0+255),w,b
  4215  000A3E  6EF6               	movwf	tblptrl,c
  4216  000A40  0EFC               	movlw	high _dpowers
  4217  000A42  2190               	addwfc	(??__doprnt+1)& (0+255),w,b
  4218  000A44  6EF7               	movwf	tblptrh,c
  4219  000A46                     	if	1	;There are 3 active tblptr bytes
  4220  000A46  6AF8               	clrf	tblptru,c
  4221  000A48  0E00               	movlw	low (__mediumconst shr (0+16))
  4222  000A4A  22F8               	addwfc	tblptru,f,c
  4223  000A4C                     	endif
  4224  000A4C  0009               	tblrd		*+
  4225  000A4E  CFF5 F02B          	movff	tablat,___lldiv@divisor
  4226  000A52  0009               	tblrd		*+
  4227  000A54  CFF5 F02C          	movff	tablat,___lldiv@divisor+1
  4228  000A58  0009               	tblrd		*+
  4229  000A5A  CFF5 F02D          	movff	tablat,___lldiv@divisor+2
  4230  000A5E  000A               	tblrd		*-
  4231  000A60  CFF5 F02E          	movff	tablat,___lldiv@divisor+3
  4232  000A64  C094  F027         	movff	__doprnt@val,___lldiv@dividend
  4233  000A68  C095  F028         	movff	__doprnt@val+1,___lldiv@dividend+1
  4234  000A6C  C096  F029         	movff	__doprnt@val+2,___lldiv@dividend+2
  4235  000A70  C097  F02A         	movff	__doprnt@val+3,___lldiv@dividend+3
  4236  000A74  ECFC  F010         	call	___lldiv
  4237  000A78  C027  F080         	movff	?___lldiv,___llmod@dividend
  4238  000A7C  C028  F081         	movff	?___lldiv+1,___llmod@dividend+1
  4239  000A80  C029  F082         	movff	?___lldiv+2,___llmod@dividend+2
  4240  000A84  C02A  F083         	movff	?___lldiv+3,___llmod@dividend+3
  4241  000A88  0E0A               	movlw	10
  4242  000A8A  0100               	movlb	0	; () banked
  4243  000A8C  6F84               	movwf	___llmod@divisor& (0+255),b
  4244  000A8E  0E00               	movlw	0
  4245  000A90  6F85               	movwf	(___llmod@divisor+1)& (0+255),b
  4246  000A92  0E00               	movlw	0
  4247  000A94  6F86               	movwf	(___llmod@divisor+2)& (0+255),b
  4248  000A96  0E00               	movlw	0
  4249  000A98  6F87               	movwf	(___llmod@divisor+3)& (0+255),b
  4250  000A9A  EC29  F012         	call	___llmod	;wreg free
  4251  000A9E  0100               	movlb	0	; () banked
  4252  000AA0  5180               	movf	?___llmod& (0+255),w,b
  4253  000AA2  0F30               	addlw	48
  4254  000AA4  6F9A               	movwf	__doprnt@c& (0+255),b
  4255                           
  4256                           ; BSR set to: 0
  4257                           ;doprnt.c: 1523: }
  4258                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  4259  000AA6  EE20 F002          	lfsr	2,2
  4260  000AAA  5189               	movf	__doprnt@pb& (0+255),w,b
  4261  000AAC  26D9               	addwf	fsr2l,f,c
  4262  000AAE  518A               	movf	(__doprnt@pb+1)& (0+255),w,b
  4263  000AB0  22DA               	addwfc	fsr2h,f,c
  4264  000AB2  50DE               	movf	postinc2,w,c
  4265  000AB4  10DE               	iorwf	postinc2,w,c
  4266  000AB6  B4D8               	btfsc	status,2,c
  4267  000AB8  D016               	goto	l683
  4268                           
  4269                           ; BSR set to: 0
  4270  000ABA  EE20 F002          	lfsr	2,2
  4271  000ABE  5189               	movf	__doprnt@pb& (0+255),w,b
  4272  000AC0  26D9               	addwf	fsr2l,f,c
  4273  000AC2  518A               	movf	(__doprnt@pb+1)& (0+255),w,b
  4274  000AC4  22DA               	addwfc	fsr2h,f,c
  4275  000AC6  CFDE F08F          	movff	postinc2,??__doprnt
  4276  000ACA  CFDD F090          	movff	postdec2,??__doprnt+1
  4277  000ACE  D801               	call	u4908
  4278  000AD0  D01F               	goto	l684
  4279  000AD2                     u4908:
  4280  000AD2  0005               	push	
  4281  000AD4  6EFA               	movwf	pclath,c
  4282  000AD6  518F               	movf	??__doprnt& (0+255),w,b
  4283  000AD8  6EFD               	movwf	tosl,c
  4284  000ADA  5190               	movf	(??__doprnt+1)& (0+255),w,b
  4285  000ADC  6EFE               	movwf	tosh,c
  4286  000ADE  6AFF               	clrf	tosu,c
  4287  000AE0  50FA               	movf	pclath,w,c
  4288  000AE2  519A               	movf	__doprnt@c& (0+255),w,b
  4289  000AE4  0012               	return		;indir
  4290  000AE6                     l683:
  4291  000AE6  C089  FFD9         	movff	__doprnt@pb,fsr2l
  4292  000AEA  C08A  FFDA         	movff	__doprnt@pb+1,fsr2h
  4293  000AEE  CFDE F08F          	movff	postinc2,??__doprnt
  4294  000AF2  CFDD F090          	movff	postdec2,??__doprnt+1
  4295  000AF6  C08F  FFD9         	movff	??__doprnt,fsr2l
  4296  000AFA  C090  FFDA         	movff	??__doprnt+1,fsr2h
  4297  000AFE  C09A  FFDF         	movff	__doprnt@c,indf2
  4298  000B02  C089  FFD9         	movff	__doprnt@pb,fsr2l
  4299  000B06  C08A  FFDA         	movff	__doprnt@pb+1,fsr2h
  4300  000B0A  2ADE               	incf	postinc2,f,c
  4301  000B0C  0E00               	movlw	0
  4302  000B0E  22DD               	addwfc	postdec2,f,c
  4303  000B10                     l684:
  4304  000B10  0100               	movlb	0	; () banked
  4305  000B12  0791               	decf	__doprnt@prec& (0+255),f,b
  4306  000B14  A0D8               	btfss	status,0,c
  4307  000B16  0792               	decf	(__doprnt@prec+1)& (0+255),f,b
  4308  000B18  2991               	incf	__doprnt@prec& (0+255),w,b
  4309  000B1A  E185               	bnz	l4323
  4310  000B1C  2992               	incf	(__doprnt@prec+1)& (0+255),w,b
  4311  000B1E  A4D8               	btfss	status,2,c
  4312  000B20  D782               	goto	l682
  4313  000B22                     u4910:
  4314                           
  4315                           ; BSR set to: 0
  4316                           
  4317                           ; BSR set to: 0
  4318  000B22  C08B  FFF6         	movff	__doprnt@f,tblptrl
  4319  000B26  C08C  FFF7         	movff	__doprnt@f+1,tblptrh
  4320  000B2A  0100               	movlb	0	; () banked
  4321  000B2C  4B8B               	infsnz	__doprnt@f& (0+255),f,b
  4322  000B2E  2B8C               	incf	(__doprnt@f+1)& (0+255),f,b
  4323  000B30                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4324  000B30  6AF8               	clrf	tblptru,c
  4325  000B32                     	endif
  4326  000B32                     	if	0	;tblptru may be non-zero
  4327  000B32                     	endif
  4328  000B32  0008               	tblrd		*
  4329  000B34  CFF5 F09A          	movff	tablat,__doprnt@c
  4330  000B38  519A               	movf	__doprnt@c& (0+255),w,b
  4331  000B3A  A4D8               	btfss	status,2,c
  4332  000B3C  D5E4               	goto	l652
  4333  000B3E                     u4920:
  4334                           
  4335                           ; BSR set to: 0
  4336                           ;doprnt.c: 1540: return 0;
  4337                           
  4338                           ; BSR set to: 0
  4339                           
  4340                           ;doprnt.c: 1525: }
  4341                           ;doprnt.c: 1533: }
  4342                           ;doprnt.c: 1535: alldone:
  4343                           
  4344                           ; BSR set to: 0
  4345  000B3E  0E00               	movlw	0
  4346  000B40  6F8A               	movwf	(?__doprnt+1)& (0+255),b
  4347  000B42  0E00               	movlw	0
  4348  000B44  6F89               	movwf	?__doprnt& (0+255),b
  4349  000B46  0012               	return	
  4350  000B48                     __end_of__doprnt:
  4351                           	opt stack 0
  4352                           tosu	equ	0xFFF
  4353                           tosh	equ	0xFFE
  4354                           tosl	equ	0xFFD
  4355                           pclath	equ	0xFFA
  4356                           tblptru	equ	0xFF8
  4357                           tblptrh	equ	0xFF7
  4358                           tblptrl	equ	0xFF6
  4359                           tablat	equ	0xFF5
  4360                           prodh	equ	0xFF4
  4361                           prodl	equ	0xFF3
  4362                           indf0	equ	0xFEF
  4363                           postinc0	equ	0xFEE
  4364                           fsr0h	equ	0xFEA
  4365                           fsr0l	equ	0xFE9
  4366                           wreg	equ	0xFE8
  4367                           postdec1	equ	0xFE5
  4368                           plusw1	equ	0xFE3
  4369                           fsr1l	equ	0xFE1
  4370                           indf2	equ	0xFDF
  4371                           postinc2	equ	0xFDE
  4372                           postdec2	equ	0xFDD
  4373                           plusw2	equ	0xFDB
  4374                           fsr2h	equ	0xFDA
  4375                           fsr2l	equ	0xFD9
  4376                           status	equ	0xFD8
  4377                           
  4378 ;; *************** function ___llmod *****************
  4379 ;; Defined at:
  4380 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  4381 ;; Parameters:    Size  Location     Type
  4382 ;;  dividend        4    0[BANK0 ] unsigned long 
  4383 ;;  divisor         4    4[BANK0 ] unsigned long 
  4384 ;; Auto vars:     Size  Location     Type
  4385 ;;  counter         1    8[BANK0 ] unsigned char 
  4386 ;; Return value:  Size  Location     Type
  4387 ;;                  4    0[BANK0 ] unsigned long 
  4388 ;; Registers used:
  4389 ;;		wreg, status,2, status,0
  4390 ;; Tracked objects:
  4391 ;;		On entry : 0/0
  4392 ;;		On exit  : 0/0
  4393 ;;		Unchanged: 0/0
  4394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4395 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4396 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4398 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4399 ;;Total ram usage:        9 bytes
  4400 ;; Hardware stack levels used:    1
  4401 ;; Hardware stack levels required when called:    4
  4402 ;; This function calls:
  4403 ;;		Nothing
  4404 ;; This function is called by:
  4405 ;;		__doprnt
  4406 ;; This function uses a non-reentrant model
  4407 ;;
  4408                           
  4409                           	psect	text7
  4410  002452                     __ptext7:
  4411                           	opt stack 0
  4412  002452                     ___llmod:
  4413                           	opt stack 23
  4414                           
  4415                           ; BSR set to: 0
  4416                           ;incstack = 0
  4417  002452  0100               	movlb	0	; () banked
  4418  002454  5184               	movf	___llmod@divisor& (0+255),w,b
  4419  002456  1185               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  4420  002458  1186               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  4421  00245A  1187               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  4422  00245C  B4D8               	btfsc	status,2,c
  4423  00245E  D024               	goto	l1053
  4424                           
  4425                           ; BSR set to: 0
  4426  002460  0E01               	movlw	1
  4427  002462  6F88               	movwf	___llmod@counter& (0+255),b
  4428  002464  D006               	goto	l1048
  4429  002466                     
  4430                           ; BSR set to: 0
  4431                           
  4432                           ; BSR set to: 0
  4433  002466  90D8               	bcf	status,0,c
  4434  002468  3784               	rlcf	___llmod@divisor& (0+255),f,b
  4435  00246A  3785               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  4436  00246C  3786               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  4437  00246E  3787               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  4438  002470  2B88               	incf	___llmod@counter& (0+255),f,b
  4439  002472                     l1048:
  4440                           
  4441                           ; BSR set to: 0
  4442                           
  4443                           ; BSR set to: 0
  4444  002472  AF87               	btfss	(___llmod@divisor+3)& (0+255),7,b
  4445  002474  D7F8               	goto	l1049
  4446  002476                     u4270:
  4447                           
  4448                           ; BSR set to: 0
  4449                           
  4450                           ; BSR set to: 0
  4451                           
  4452                           ; BSR set to: 0
  4453  002476  5184               	movf	___llmod@divisor& (0+255),w,b
  4454  002478  5D80               	subwf	___llmod@dividend& (0+255),w,b
  4455  00247A  5185               	movf	(___llmod@divisor+1)& (0+255),w,b
  4456  00247C  5981               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  4457  00247E  5186               	movf	(___llmod@divisor+2)& (0+255),w,b
  4458  002480  5982               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  4459  002482  5187               	movf	(___llmod@divisor+3)& (0+255),w,b
  4460  002484  5983               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  4461  002486  A0D8               	btfss	status,0,c
  4462  002488  D008               	goto	l1052
  4463                           
  4464                           ; BSR set to: 0
  4465  00248A  5184               	movf	___llmod@divisor& (0+255),w,b
  4466  00248C  5F80               	subwf	___llmod@dividend& (0+255),f,b
  4467  00248E  5185               	movf	(___llmod@divisor+1)& (0+255),w,b
  4468  002490  5B81               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  4469  002492  5186               	movf	(___llmod@divisor+2)& (0+255),w,b
  4470  002494  5B82               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  4471  002496  5187               	movf	(___llmod@divisor+3)& (0+255),w,b
  4472  002498  5B83               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  4473  00249A                     l1052:
  4474                           
  4475                           ; BSR set to: 0
  4476                           
  4477                           ; BSR set to: 0
  4478  00249A  90D8               	bcf	status,0,c
  4479  00249C  3387               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  4480  00249E  3386               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  4481  0024A0  3385               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  4482  0024A2  3384               	rrcf	___llmod@divisor& (0+255),f,b
  4483                           
  4484                           ; BSR set to: 0
  4485  0024A4  2F88               	decfsz	___llmod@counter& (0+255),f,b
  4486  0024A6  D7E7               	goto	u4270
  4487  0024A8                     l1053:
  4488                           
  4489                           ; BSR set to: 0
  4490                           
  4491                           ; BSR set to: 0
  4492  0024A8  C080  F080         	movff	___llmod@dividend,?___llmod
  4493  0024AC  C081  F081         	movff	___llmod@dividend+1,?___llmod+1
  4494  0024B0  C082  F082         	movff	___llmod@dividend+2,?___llmod+2
  4495  0024B4  C083  F083         	movff	___llmod@dividend+3,?___llmod+3
  4496                           
  4497                           ; BSR set to: 0
  4498  0024B8  0012               	return		;funcret
  4499  0024BA                     __end_of___llmod:
  4500                           	opt stack 0
  4501                           tosu	equ	0xFFF
  4502                           tosh	equ	0xFFE
  4503                           tosl	equ	0xFFD
  4504                           pclath	equ	0xFFA
  4505                           tblptru	equ	0xFF8
  4506                           tblptrh	equ	0xFF7
  4507                           tblptrl	equ	0xFF6
  4508                           tablat	equ	0xFF5
  4509                           prodh	equ	0xFF4
  4510                           prodl	equ	0xFF3
  4511                           indf0	equ	0xFEF
  4512                           postinc0	equ	0xFEE
  4513                           fsr0h	equ	0xFEA
  4514                           fsr0l	equ	0xFE9
  4515                           wreg	equ	0xFE8
  4516                           postdec1	equ	0xFE5
  4517                           plusw1	equ	0xFE3
  4518                           fsr1l	equ	0xFE1
  4519                           indf2	equ	0xFDF
  4520                           postinc2	equ	0xFDE
  4521                           postdec2	equ	0xFDD
  4522                           plusw2	equ	0xFDB
  4523                           fsr2h	equ	0xFDA
  4524                           fsr2l	equ	0xFD9
  4525                           status	equ	0xFD8
  4526                           
  4527 ;; *************** function _packageCompartment *****************
  4528 ;; Defined at:
  4529 ;;		line 23 in file "main.c"
  4530 ;; Parameters:    Size  Location     Type
  4531 ;;  b               1    wreg     unsigned char 
  4532 ;;  n               1    6[BANK0 ] unsigned char 
  4533 ;;  s               1    7[BANK0 ] unsigned char 
  4534 ;;  w               1    8[BANK0 ] unsigned char 
  4535 ;; Auto vars:     Size  Location     Type
  4536 ;;  b               1   14[BANK0 ] unsigned char 
  4537 ;;  currTime        4   48[BANK0 ] long 
  4538 ;;  timeW           4   27[BANK0 ] long 
  4539 ;;  timeS           4   23[BANK0 ] long 
  4540 ;;  timeN           4   19[BANK0 ] long 
  4541 ;;  timeB           4   15[BANK0 ] long 
  4542 ;;  doneW           2   45[BANK0 ] int 
  4543 ;;  doneS           2   43[BANK0 ] int 
  4544 ;;  doneN           2   41[BANK0 ] int 
  4545 ;;  doneB           2   39[BANK0 ] int 
  4546 ;;  numW            2   37[BANK0 ] int 
  4547 ;;  numS            2   35[BANK0 ] int 
  4548 ;;  numN            2   33[BANK0 ] int 
  4549 ;;  numB            2   31[BANK0 ] int 
  4550 ;;  resolution      1   47[BANK0 ] unsigned char 
  4551 ;; Return value:  Size  Location     Type
  4552 ;;                  1    wreg      void 
  4553 ;; Registers used:
  4554 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4555 ;; Tracked objects:
  4556 ;;		On entry : 0/0
  4557 ;;		On exit  : 0/0
  4558 ;;		Unchanged: 0/0
  4559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4560 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4561 ;;      Locals:         0      38       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4562 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4563 ;;      Totals:         0      46       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4564 ;;Total ram usage:       46 bytes
  4565 ;; Hardware stack levels used:    1
  4566 ;; Hardware stack levels required when called:    7
  4567 ;; This function calls:
  4568 ;;		_I2C_Send
  4569 ;;		___fttol
  4570 ;;		_motorControl
  4571 ;;		_tic
  4572 ;;		_tock
  4573 ;; This function is called by:
  4574 ;;		_packaging
  4575 ;; This function uses a non-reentrant model
  4576 ;;
  4577                           
  4578                           	psect	text8
  4579  000B48                     __ptext8:
  4580                           	opt stack 0
  4581  000B48                     _packageCompartment:
  4582                           	opt stack 21
  4583                           
  4584                           ; BSR set to: 0
  4585                           ;incstack = 0
  4586                           ;packageCompartment@b stored from wreg
  4587  000B48  0100               	movlb	0	; () banked
  4588  000B4A  6F8E               	movwf	packageCompartment@b& (0+255),b
  4589                           
  4590                           ;main.c: 24: TRISA = 0xFF;
  4591  000B4C  6892               	setf	3986,c	;volatile
  4592                           
  4593                           ;main.c: 27: motorControl(BOLT, FORWARD);
  4594  000B4E  0E00               	movlw	0
  4595  000B50  6E27               	movwf	motorControl@dir,c
  4596  000B52  0E00               	movlw	0
  4597  000B54  ECDA  F00E         	call	_motorControl
  4598                           
  4599                           ;main.c: 28: motorControl(NUT, FORWARD);
  4600  000B58  0E00               	movlw	0
  4601  000B5A  6E27               	movwf	motorControl@dir,c
  4602  000B5C  0E01               	movlw	1
  4603  000B5E  ECDA  F00E         	call	_motorControl
  4604                           
  4605                           ;main.c: 29: motorControl(SPACER, FORWARD);
  4606  000B62  0E00               	movlw	0
  4607  000B64  6E27               	movwf	motorControl@dir,c
  4608  000B66  0E02               	movlw	2
  4609  000B68  ECDA  F00E         	call	_motorControl
  4610                           
  4611                           ;main.c: 30: motorControl(WASHER, FORWARD);
  4612  000B6C  0E00               	movlw	0
  4613  000B6E  6E27               	movwf	motorControl@dir,c
  4614  000B70  0E03               	movlw	3
  4615  000B72  ECDA  F00E         	call	_motorControl
  4616                           
  4617                           ;main.c: 32: int numB=0, numN=0, numS=0, numW=0;
  4618  000B76  0E00               	movlw	0
  4619  000B78  0100               	movlb	0	; () banked
  4620  000B7A  6FA0               	movwf	(packageCompartment@numB+1)& (0+255),b
  4621  000B7C  0E00               	movlw	0
  4622  000B7E  6F9F               	movwf	packageCompartment@numB& (0+255),b
  4623                           
  4624                           ; BSR set to: 0
  4625  000B80  0E00               	movlw	0
  4626  000B82  6FA2               	movwf	(packageCompartment@numN+1)& (0+255),b
  4627  000B84  0E00               	movlw	0
  4628  000B86  6FA1               	movwf	packageCompartment@numN& (0+255),b
  4629                           
  4630                           ; BSR set to: 0
  4631  000B88  0E00               	movlw	0
  4632  000B8A  6FA4               	movwf	(packageCompartment@numS+1)& (0+255),b
  4633  000B8C  0E00               	movlw	0
  4634  000B8E  6FA3               	movwf	packageCompartment@numS& (0+255),b
  4635                           
  4636                           ; BSR set to: 0
  4637  000B90  0E00               	movlw	0
  4638  000B92  6FA6               	movwf	(packageCompartment@numW+1)& (0+255),b
  4639  000B94  0E00               	movlw	0
  4640  000B96  6FA5               	movwf	packageCompartment@numW& (0+255),b
  4641                           
  4642                           ; BSR set to: 0
  4643                           ;main.c: 33: int doneB=0, doneN=0, doneS=0, doneW=0;
  4644  000B98  0E00               	movlw	0
  4645  000B9A  6FA8               	movwf	(packageCompartment@doneB+1)& (0+255),b
  4646  000B9C  0E00               	movlw	0
  4647  000B9E  6FA7               	movwf	packageCompartment@doneB& (0+255),b
  4648                           
  4649                           ; BSR set to: 0
  4650  000BA0  0E00               	movlw	0
  4651  000BA2  6FAA               	movwf	(packageCompartment@doneN+1)& (0+255),b
  4652  000BA4  0E00               	movlw	0
  4653  000BA6  6FA9               	movwf	packageCompartment@doneN& (0+255),b
  4654                           
  4655                           ; BSR set to: 0
  4656  000BA8  0E00               	movlw	0
  4657  000BAA  6FAC               	movwf	(packageCompartment@doneS+1)& (0+255),b
  4658  000BAC  0E00               	movlw	0
  4659  000BAE  6FAB               	movwf	packageCompartment@doneS& (0+255),b
  4660                           
  4661                           ; BSR set to: 0
  4662  000BB0  0E00               	movlw	0
  4663  000BB2  6FAE               	movwf	(packageCompartment@doneW+1)& (0+255),b
  4664  000BB4  0E00               	movlw	0
  4665  000BB6  6FAD               	movwf	packageCompartment@doneW& (0+255),b
  4666                           
  4667                           ; BSR set to: 0
  4668                           ;main.c: 34: long currTime, timeB=0, timeN=0, timeS=0, timeW=0;
  4669  000BB8  0E00               	movlw	0
  4670  000BBA  6F8F               	movwf	packageCompartment@timeB& (0+255),b
  4671  000BBC  0E00               	movlw	0
  4672  000BBE  6F90               	movwf	(packageCompartment@timeB+1)& (0+255),b
  4673  000BC0  0E00               	movlw	0
  4674  000BC2  6F91               	movwf	(packageCompartment@timeB+2)& (0+255),b
  4675  000BC4  0E00               	movlw	0
  4676  000BC6  6F92               	movwf	(packageCompartment@timeB+3)& (0+255),b
  4677                           
  4678                           ; BSR set to: 0
  4679  000BC8  0E00               	movlw	0
  4680  000BCA  6F93               	movwf	packageCompartment@timeN& (0+255),b
  4681  000BCC  0E00               	movlw	0
  4682  000BCE  6F94               	movwf	(packageCompartment@timeN+1)& (0+255),b
  4683  000BD0  0E00               	movlw	0
  4684  000BD2  6F95               	movwf	(packageCompartment@timeN+2)& (0+255),b
  4685  000BD4  0E00               	movlw	0
  4686  000BD6  6F96               	movwf	(packageCompartment@timeN+3)& (0+255),b
  4687                           
  4688                           ; BSR set to: 0
  4689  000BD8  0E00               	movlw	0
  4690  000BDA  6F97               	movwf	packageCompartment@timeS& (0+255),b
  4691  000BDC  0E00               	movlw	0
  4692  000BDE  6F98               	movwf	(packageCompartment@timeS+1)& (0+255),b
  4693  000BE0  0E00               	movlw	0
  4694  000BE2  6F99               	movwf	(packageCompartment@timeS+2)& (0+255),b
  4695  000BE4  0E00               	movlw	0
  4696  000BE6  6F9A               	movwf	(packageCompartment@timeS+3)& (0+255),b
  4697                           
  4698                           ; BSR set to: 0
  4699  000BE8  0E00               	movlw	0
  4700  000BEA  6F9B               	movwf	packageCompartment@timeW& (0+255),b
  4701  000BEC  0E00               	movlw	0
  4702  000BEE  6F9C               	movwf	(packageCompartment@timeW+1)& (0+255),b
  4703  000BF0  0E00               	movlw	0
  4704  000BF2  6F9D               	movwf	(packageCompartment@timeW+2)& (0+255),b
  4705  000BF4  0E00               	movlw	0
  4706  000BF6  6F9E               	movwf	(packageCompartment@timeW+3)& (0+255),b
  4707                           
  4708                           ; BSR set to: 0
  4709                           ;main.c: 36: char resolution = 2;
  4710  000BF8  0E02               	movlw	2
  4711  000BFA  6FAF               	movwf	packageCompartment@resolution& (0+255),b
  4712                           
  4713                           ; BSR set to: 0
  4714                           ;main.c: 38: tic();
  4715  000BFC  EC10  F014         	call	_tic	;wreg free
  4716  000C00                     
  4717                           ;main.c: 40: currTime = tock();
  4718  000C00  EC22  F014         	call	_tock	;wreg free
  4719  000C04  C027  F02A         	movff	?_tock,___fttol@f1
  4720  000C08  C028  F02B         	movff	?_tock+1,___fttol@f1+1
  4721  000C0C  C029  F02C         	movff	?_tock+2,___fttol@f1+2
  4722  000C10  EC5E  F00E         	call	___fttol	;wreg free
  4723  000C14  C02A  F0B0         	movff	?___fttol,packageCompartment@currTime
  4724  000C18  C02B  F0B1         	movff	?___fttol+1,packageCompartment@currTime+1
  4725  000C1C  C02C  F0B2         	movff	?___fttol+2,packageCompartment@currTime+2
  4726  000C20  C02D  F0B3         	movff	?___fttol+3,packageCompartment@currTime+3
  4727                           
  4728                           ;main.c: 52: if (PORTAbits.RA0 == 0 && currTime > timeB + resolution) {
  4729  000C24  B080               	btfsc	3968,0,c	;volatile
  4730  000C26  D035               	goto	l96
  4731  000C28  0100               	movlb	0	; () banked
  4732  000C2A  51AF               	movf	packageCompartment@resolution& (0+255),w,b
  4733  000C2C  258F               	addwf	packageCompartment@timeB& (0+255),w,b
  4734  000C2E  6F89               	movwf	??_packageCompartment& (0+255),b
  4735  000C30  0E00               	movlw	0
  4736  000C32  2190               	addwfc	(packageCompartment@timeB+1)& (0+255),w,b
  4737  000C34  6F8A               	movwf	(??_packageCompartment+1)& (0+255),b
  4738  000C36  0E00               	movlw	0
  4739  000C38  2191               	addwfc	(packageCompartment@timeB+2)& (0+255),w,b
  4740  000C3A  6F8B               	movwf	(??_packageCompartment+2)& (0+255),b
  4741  000C3C  0E00               	movlw	0
  4742  000C3E  2192               	addwfc	(packageCompartment@timeB+3)& (0+255),w,b
  4743  000C40  6F8C               	movwf	(??_packageCompartment+3)& (0+255),b
  4744  000C42  51B0               	movf	packageCompartment@currTime& (0+255),w,b
  4745  000C44  5D89               	subwf	??_packageCompartment& (0+255),w,b
  4746  000C46  51B1               	movf	(packageCompartment@currTime+1)& (0+255),w,b
  4747  000C48  598A               	subwfb	(??_packageCompartment+1)& (0+255),w,b
  4748  000C4A  51B2               	movf	(packageCompartment@currTime+2)& (0+255),w,b
  4749  000C4C  598B               	subwfb	(??_packageCompartment+2)& (0+255),w,b
  4750  000C4E  518C               	movf	(??_packageCompartment+3)& (0+255),w,b
  4751  000C50  0A80               	xorlw	128
  4752  000C52  6F8D               	movwf	(??_packageCompartment+4)& (0+255),b
  4753  000C54  51B3               	movf	(packageCompartment@currTime+3)& (0+255),w,b
  4754  000C56  0A80               	xorlw	128
  4755  000C58  598D               	subwfb	(??_packageCompartment+4)& (0+255),w,b
  4756  000C5A  B0D8               	btfsc	status,0,c
  4757  000C5C  D01A               	goto	l96
  4758                           
  4759                           ; BSR set to: 0
  4760                           ;main.c: 53: timeB = currTime;
  4761  000C5E  C0B0  F08F         	movff	packageCompartment@currTime,packageCompartment@timeB
  4762  000C62  C0B1  F090         	movff	packageCompartment@currTime+1,packageCompartment@timeB+1
  4763  000C66  C0B2  F091         	movff	packageCompartment@currTime+2,packageCompartment@timeB+2
  4764  000C6A  C0B3  F092         	movff	packageCompartment@currTime+3,packageCompartment@timeB+3
  4765                           
  4766                           ; BSR set to: 0
  4767                           ;main.c: 54: numB++;
  4768  000C6E  4B9F               	infsnz	packageCompartment@numB& (0+255),f,b
  4769  000C70  2BA0               	incf	(packageCompartment@numB+1)& (0+255),f,b
  4770                           
  4771                           ;main.c: 55: dispensed.b++;
  4772  000C72  4A34               	infsnz	_dispensed,f,c
  4773  000C74  2A35               	incf	_dispensed+1,f,c
  4774                           
  4775                           ; BSR set to: 0
  4776                           ;main.c: 56: I2C_Send(nanoAddr, "\1Bolt Counted\0");
  4777  000C76  0E93               	movlw	low STR_1
  4778  000C78  6E2A               	movwf	I2C_Send@data,c
  4779  000C7A  0EFF               	movlw	high STR_1
  4780  000C7C  6E2B               	movwf	I2C_Send@data+1,c
  4781  000C7E  0EBD               	movlw	low _nanoAddr
  4782  000C80  6EF6               	movwf	tblptrl,c
  4783  000C82                     	if	1	;There is more than 1 active tblptr byte
  4784  000C82  0EFC               	movlw	high _nanoAddr
  4785  000C84  6EF7               	movwf	tblptrh,c
  4786  000C86                     	endif
  4787  000C86                     	if	1	;There are 3 active tblptr bytes
  4788  000C86  0E00               	movlw	low (_nanoAddr shr (0+16))
  4789  000C88  6EF8               	movwf	tblptru,c
  4790  000C8A                     	endif
  4791  000C8A  0008               	tblrd		*
  4792  000C8C  50F5               	movf	tablat,w,c
  4793  000C8E  EC30  F010         	call	_I2C_Send
  4794  000C92                     l96:
  4795                           
  4796                           ;main.c: 57: }
  4797                           ;main.c: 60: if (PORTAbits.RA1 == 0 && currTime > timeN + resolution) {
  4798  000C92  B280               	btfsc	3968,1,c	;volatile
  4799  000C94  D035               	goto	l97
  4800  000C96  0100               	movlb	0	; () banked
  4801  000C98  51AF               	movf	packageCompartment@resolution& (0+255),w,b
  4802  000C9A  2593               	addwf	packageCompartment@timeN& (0+255),w,b
  4803  000C9C  6F89               	movwf	??_packageCompartment& (0+255),b
  4804  000C9E  0E00               	movlw	0
  4805  000CA0  2194               	addwfc	(packageCompartment@timeN+1)& (0+255),w,b
  4806  000CA2  6F8A               	movwf	(??_packageCompartment+1)& (0+255),b
  4807  000CA4  0E00               	movlw	0
  4808  000CA6  2195               	addwfc	(packageCompartment@timeN+2)& (0+255),w,b
  4809  000CA8  6F8B               	movwf	(??_packageCompartment+2)& (0+255),b
  4810  000CAA  0E00               	movlw	0
  4811  000CAC  2196               	addwfc	(packageCompartment@timeN+3)& (0+255),w,b
  4812  000CAE  6F8C               	movwf	(??_packageCompartment+3)& (0+255),b
  4813  000CB0  51B0               	movf	packageCompartment@currTime& (0+255),w,b
  4814  000CB2  5D89               	subwf	??_packageCompartment& (0+255),w,b
  4815  000CB4  51B1               	movf	(packageCompartment@currTime+1)& (0+255),w,b
  4816  000CB6  598A               	subwfb	(??_packageCompartment+1)& (0+255),w,b
  4817  000CB8  51B2               	movf	(packageCompartment@currTime+2)& (0+255),w,b
  4818  000CBA  598B               	subwfb	(??_packageCompartment+2)& (0+255),w,b
  4819  000CBC  518C               	movf	(??_packageCompartment+3)& (0+255),w,b
  4820  000CBE  0A80               	xorlw	128
  4821  000CC0  6F8D               	movwf	(??_packageCompartment+4)& (0+255),b
  4822  000CC2  51B3               	movf	(packageCompartment@currTime+3)& (0+255),w,b
  4823  000CC4  0A80               	xorlw	128
  4824  000CC6  598D               	subwfb	(??_packageCompartment+4)& (0+255),w,b
  4825  000CC8  B0D8               	btfsc	status,0,c
  4826  000CCA  D01A               	goto	l97
  4827                           
  4828                           ; BSR set to: 0
  4829                           ;main.c: 61: timeN = currTime;
  4830  000CCC  C0B0  F093         	movff	packageCompartment@currTime,packageCompartment@timeN
  4831  000CD0  C0B1  F094         	movff	packageCompartment@currTime+1,packageCompartment@timeN+1
  4832  000CD4  C0B2  F095         	movff	packageCompartment@currTime+2,packageCompartment@timeN+2
  4833  000CD8  C0B3  F096         	movff	packageCompartment@currTime+3,packageCompartment@timeN+3
  4834                           
  4835                           ; BSR set to: 0
  4836                           ;main.c: 62: numN++;
  4837  000CDC  4BA1               	infsnz	packageCompartment@numN& (0+255),f,b
  4838  000CDE  2BA2               	incf	(packageCompartment@numN+1)& (0+255),f,b
  4839                           
  4840                           ;main.c: 63: dispensed.n++;
  4841  000CE0  4A36               	infsnz	_dispensed+2,f,c
  4842  000CE2  2A37               	incf	_dispensed+3,f,c
  4843                           
  4844                           ; BSR set to: 0
  4845                           ;main.c: 64: I2C_Send(nanoAddr, "\1Nut Counted\0");
  4846  000CE4  0EBF               	movlw	low STR_2
  4847  000CE6  6E2A               	movwf	I2C_Send@data,c
  4848  000CE8  0EFF               	movlw	high STR_2
  4849  000CEA  6E2B               	movwf	I2C_Send@data+1,c
  4850  000CEC  0EBD               	movlw	low _nanoAddr
  4851  000CEE  6EF6               	movwf	tblptrl,c
  4852  000CF0                     	if	1	;There is more than 1 active tblptr byte
  4853  000CF0  0EFC               	movlw	high _nanoAddr
  4854  000CF2  6EF7               	movwf	tblptrh,c
  4855  000CF4                     	endif
  4856  000CF4                     	if	1	;There are 3 active tblptr bytes
  4857  000CF4  0E00               	movlw	low (_nanoAddr shr (0+16))
  4858  000CF6  6EF8               	movwf	tblptru,c
  4859  000CF8                     	endif
  4860  000CF8  0008               	tblrd		*
  4861  000CFA  50F5               	movf	tablat,w,c
  4862  000CFC  EC30  F010         	call	_I2C_Send
  4863  000D00                     l97:
  4864                           
  4865                           ;main.c: 65: }
  4866                           ;main.c: 68: if (PORTAbits.RA2 == 0 && currTime > timeS + resolution) {
  4867  000D00  B480               	btfsc	3968,2,c	;volatile
  4868  000D02  D035               	goto	l98
  4869  000D04  0100               	movlb	0	; () banked
  4870  000D06  51AF               	movf	packageCompartment@resolution& (0+255),w,b
  4871  000D08  2597               	addwf	packageCompartment@timeS& (0+255),w,b
  4872  000D0A  6F89               	movwf	??_packageCompartment& (0+255),b
  4873  000D0C  0E00               	movlw	0
  4874  000D0E  2198               	addwfc	(packageCompartment@timeS+1)& (0+255),w,b
  4875  000D10  6F8A               	movwf	(??_packageCompartment+1)& (0+255),b
  4876  000D12  0E00               	movlw	0
  4877  000D14  2199               	addwfc	(packageCompartment@timeS+2)& (0+255),w,b
  4878  000D16  6F8B               	movwf	(??_packageCompartment+2)& (0+255),b
  4879  000D18  0E00               	movlw	0
  4880  000D1A  219A               	addwfc	(packageCompartment@timeS+3)& (0+255),w,b
  4881  000D1C  6F8C               	movwf	(??_packageCompartment+3)& (0+255),b
  4882  000D1E  51B0               	movf	packageCompartment@currTime& (0+255),w,b
  4883  000D20  5D89               	subwf	??_packageCompartment& (0+255),w,b
  4884  000D22  51B1               	movf	(packageCompartment@currTime+1)& (0+255),w,b
  4885  000D24  598A               	subwfb	(??_packageCompartment+1)& (0+255),w,b
  4886  000D26  51B2               	movf	(packageCompartment@currTime+2)& (0+255),w,b
  4887  000D28  598B               	subwfb	(??_packageCompartment+2)& (0+255),w,b
  4888  000D2A  518C               	movf	(??_packageCompartment+3)& (0+255),w,b
  4889  000D2C  0A80               	xorlw	128
  4890  000D2E  6F8D               	movwf	(??_packageCompartment+4)& (0+255),b
  4891  000D30  51B3               	movf	(packageCompartment@currTime+3)& (0+255),w,b
  4892  000D32  0A80               	xorlw	128
  4893  000D34  598D               	subwfb	(??_packageCompartment+4)& (0+255),w,b
  4894  000D36  B0D8               	btfsc	status,0,c
  4895  000D38  D01A               	goto	l98
  4896                           
  4897                           ; BSR set to: 0
  4898                           ;main.c: 69: timeS = currTime;
  4899  000D3A  C0B0  F097         	movff	packageCompartment@currTime,packageCompartment@timeS
  4900  000D3E  C0B1  F098         	movff	packageCompartment@currTime+1,packageCompartment@timeS+1
  4901  000D42  C0B2  F099         	movff	packageCompartment@currTime+2,packageCompartment@timeS+2
  4902  000D46  C0B3  F09A         	movff	packageCompartment@currTime+3,packageCompartment@timeS+3
  4903                           
  4904                           ; BSR set to: 0
  4905                           ;main.c: 70: numS++;
  4906  000D4A  4BA3               	infsnz	packageCompartment@numS& (0+255),f,b
  4907  000D4C  2BA4               	incf	(packageCompartment@numS+1)& (0+255),f,b
  4908                           
  4909                           ;main.c: 71: dispensed.s++;
  4910  000D4E  4A38               	infsnz	_dispensed+4,f,c
  4911  000D50  2A39               	incf	_dispensed+5,f,c
  4912                           
  4913                           ; BSR set to: 0
  4914                           ;main.c: 72: I2C_Send(nanoAddr, "\1Spacer Counted\0");
  4915  000D52  0E61               	movlw	low STR_3
  4916  000D54  6E2A               	movwf	I2C_Send@data,c
  4917  000D56  0EFF               	movlw	high STR_3
  4918  000D58  6E2B               	movwf	I2C_Send@data+1,c
  4919  000D5A  0EBD               	movlw	low _nanoAddr
  4920  000D5C  6EF6               	movwf	tblptrl,c
  4921  000D5E                     	if	1	;There is more than 1 active tblptr byte
  4922  000D5E  0EFC               	movlw	high _nanoAddr
  4923  000D60  6EF7               	movwf	tblptrh,c
  4924  000D62                     	endif
  4925  000D62                     	if	1	;There are 3 active tblptr bytes
  4926  000D62  0E00               	movlw	low (_nanoAddr shr (0+16))
  4927  000D64  6EF8               	movwf	tblptru,c
  4928  000D66                     	endif
  4929  000D66  0008               	tblrd		*
  4930  000D68  50F5               	movf	tablat,w,c
  4931  000D6A  EC30  F010         	call	_I2C_Send
  4932  000D6E                     l98:
  4933                           
  4934                           ;main.c: 73: }
  4935                           ;main.c: 76: if (PORTAbits.RA3 == 0 && currTime > timeW + resolution) {
  4936  000D6E  B680               	btfsc	3968,3,c	;volatile
  4937  000D70  D035               	goto	l99
  4938  000D72  0100               	movlb	0	; () banked
  4939  000D74  51AF               	movf	packageCompartment@resolution& (0+255),w,b
  4940  000D76  259B               	addwf	packageCompartment@timeW& (0+255),w,b
  4941  000D78  6F89               	movwf	??_packageCompartment& (0+255),b
  4942  000D7A  0E00               	movlw	0
  4943  000D7C  219C               	addwfc	(packageCompartment@timeW+1)& (0+255),w,b
  4944  000D7E  6F8A               	movwf	(??_packageCompartment+1)& (0+255),b
  4945  000D80  0E00               	movlw	0
  4946  000D82  219D               	addwfc	(packageCompartment@timeW+2)& (0+255),w,b
  4947  000D84  6F8B               	movwf	(??_packageCompartment+2)& (0+255),b
  4948  000D86  0E00               	movlw	0
  4949  000D88  219E               	addwfc	(packageCompartment@timeW+3)& (0+255),w,b
  4950  000D8A  6F8C               	movwf	(??_packageCompartment+3)& (0+255),b
  4951  000D8C  51B0               	movf	packageCompartment@currTime& (0+255),w,b
  4952  000D8E  5D89               	subwf	??_packageCompartment& (0+255),w,b
  4953  000D90  51B1               	movf	(packageCompartment@currTime+1)& (0+255),w,b
  4954  000D92  598A               	subwfb	(??_packageCompartment+1)& (0+255),w,b
  4955  000D94  51B2               	movf	(packageCompartment@currTime+2)& (0+255),w,b
  4956  000D96  598B               	subwfb	(??_packageCompartment+2)& (0+255),w,b
  4957  000D98  518C               	movf	(??_packageCompartment+3)& (0+255),w,b
  4958  000D9A  0A80               	xorlw	128
  4959  000D9C  6F8D               	movwf	(??_packageCompartment+4)& (0+255),b
  4960  000D9E  51B3               	movf	(packageCompartment@currTime+3)& (0+255),w,b
  4961  000DA0  0A80               	xorlw	128
  4962  000DA2  598D               	subwfb	(??_packageCompartment+4)& (0+255),w,b
  4963  000DA4  B0D8               	btfsc	status,0,c
  4964  000DA6  D01A               	goto	l99
  4965                           
  4966                           ; BSR set to: 0
  4967                           ;main.c: 77: timeW = currTime;
  4968  000DA8  C0B0  F09B         	movff	packageCompartment@currTime,packageCompartment@timeW
  4969  000DAC  C0B1  F09C         	movff	packageCompartment@currTime+1,packageCompartment@timeW+1
  4970  000DB0  C0B2  F09D         	movff	packageCompartment@currTime+2,packageCompartment@timeW+2
  4971  000DB4  C0B3  F09E         	movff	packageCompartment@currTime+3,packageCompartment@timeW+3
  4972                           
  4973                           ; BSR set to: 0
  4974                           ;main.c: 78: numW++;
  4975  000DB8  4BA5               	infsnz	packageCompartment@numW& (0+255),f,b
  4976  000DBA  2BA6               	incf	(packageCompartment@numW+1)& (0+255),f,b
  4977                           
  4978                           ;main.c: 79: dispensed.w++;
  4979  000DBC  4A3A               	infsnz	_dispensed+6,f,c
  4980  000DBE  2A3B               	incf	_dispensed+7,f,c
  4981                           
  4982                           ; BSR set to: 0
  4983                           ;main.c: 80: I2C_Send(nanoAddr, "\1Washer Counted\0");
  4984  000DC0  0E72               	movlw	low STR_4
  4985  000DC2  6E2A               	movwf	I2C_Send@data,c
  4986  000DC4  0EFF               	movlw	high STR_4
  4987  000DC6  6E2B               	movwf	I2C_Send@data+1,c
  4988  000DC8  0EBD               	movlw	low _nanoAddr
  4989  000DCA  6EF6               	movwf	tblptrl,c
  4990  000DCC                     	if	1	;There is more than 1 active tblptr byte
  4991  000DCC  0EFC               	movlw	high _nanoAddr
  4992  000DCE  6EF7               	movwf	tblptrh,c
  4993  000DD0                     	endif
  4994  000DD0                     	if	1	;There are 3 active tblptr bytes
  4995  000DD0  0E00               	movlw	low (_nanoAddr shr (0+16))
  4996  000DD2  6EF8               	movwf	tblptru,c
  4997  000DD4                     	endif
  4998  000DD4  0008               	tblrd		*
  4999  000DD6  50F5               	movf	tablat,w,c
  5000  000DD8  EC30  F010         	call	_I2C_Send
  5001  000DDC                     l99:
  5002                           
  5003                           ;main.c: 81: }
  5004                           ;main.c: 84: if (numB >= b) {
  5005  000DDC  0100               	movlb	0	; () banked
  5006  000DDE  518E               	movf	packageCompartment@b& (0+255),w,b
  5007  000DE0  6F89               	movwf	??_packageCompartment& (0+255),b
  5008  000DE2  6B8A               	clrf	(??_packageCompartment+1)& (0+255),b
  5009  000DE4  5189               	movf	??_packageCompartment& (0+255),w,b
  5010  000DE6  5D9F               	subwf	packageCompartment@numB& (0+255),w,b
  5011  000DE8  51A0               	movf	(packageCompartment@numB+1)& (0+255),w,b
  5012  000DEA  0A80               	xorlw	128
  5013  000DEC  6F8B               	movwf	(??_packageCompartment+2)& (0+255),b
  5014  000DEE  518A               	movf	(??_packageCompartment+1)& (0+255),w,b
  5015  000DF0  0A80               	xorlw	128
  5016  000DF2  598B               	subwfb	(??_packageCompartment+2)& (0+255),w,b
  5017  000DF4  A0D8               	btfss	status,0,c
  5018  000DF6  D00A               	goto	l100
  5019                           
  5020                           ; BSR set to: 0
  5021                           ;main.c: 85: motorControl(BOLT, STOPMOTOR);
  5022  000DF8  0E02               	movlw	2
  5023  000DFA  6E27               	movwf	motorControl@dir,c
  5024  000DFC  0E00               	movlw	0
  5025  000DFE  ECDA  F00E         	call	_motorControl
  5026                           
  5027                           ;main.c: 86: doneB=1;
  5028  000E02  0E00               	movlw	0
  5029  000E04  0100               	movlb	0	; () banked
  5030  000E06  6FA8               	movwf	(packageCompartment@doneB+1)& (0+255),b
  5031  000E08  0E01               	movlw	1
  5032  000E0A  6FA7               	movwf	packageCompartment@doneB& (0+255),b
  5033  000E0C                     l100:
  5034                           
  5035                           ; BSR set to: 0
  5036                           ;main.c: 87: }
  5037                           ;main.c: 88: if (numN >= n) {
  5038                           
  5039                           ; BSR set to: 0
  5040  000E0C  5186               	movf	packageCompartment@n& (0+255),w,b
  5041  000E0E  6F89               	movwf	??_packageCompartment& (0+255),b
  5042  000E10  6B8A               	clrf	(??_packageCompartment+1)& (0+255),b
  5043  000E12  5189               	movf	??_packageCompartment& (0+255),w,b
  5044  000E14  5DA1               	subwf	packageCompartment@numN& (0+255),w,b
  5045  000E16  51A2               	movf	(packageCompartment@numN+1)& (0+255),w,b
  5046  000E18  0A80               	xorlw	128
  5047  000E1A  6F8B               	movwf	(??_packageCompartment+2)& (0+255),b
  5048  000E1C  518A               	movf	(??_packageCompartment+1)& (0+255),w,b
  5049  000E1E  0A80               	xorlw	128
  5050  000E20  598B               	subwfb	(??_packageCompartment+2)& (0+255),w,b
  5051  000E22  A0D8               	btfss	status,0,c
  5052  000E24  D00A               	goto	l101
  5053                           
  5054                           ; BSR set to: 0
  5055                           ;main.c: 89: motorControl(NUT, STOPMOTOR);
  5056  000E26  0E02               	movlw	2
  5057  000E28  6E27               	movwf	motorControl@dir,c
  5058  000E2A  0E01               	movlw	1
  5059  000E2C  ECDA  F00E         	call	_motorControl
  5060                           
  5061                           ;main.c: 90: doneN=1;
  5062  000E30  0E00               	movlw	0
  5063  000E32  0100               	movlb	0	; () banked
  5064  000E34  6FAA               	movwf	(packageCompartment@doneN+1)& (0+255),b
  5065  000E36  0E01               	movlw	1
  5066  000E38  6FA9               	movwf	packageCompartment@doneN& (0+255),b
  5067  000E3A                     l101:
  5068                           
  5069                           ; BSR set to: 0
  5070                           ;main.c: 91: }
  5071                           ;main.c: 92: if (numS >= s) {
  5072                           
  5073                           ; BSR set to: 0
  5074  000E3A  5187               	movf	packageCompartment@s& (0+255),w,b
  5075  000E3C  6F89               	movwf	??_packageCompartment& (0+255),b
  5076  000E3E  6B8A               	clrf	(??_packageCompartment+1)& (0+255),b
  5077  000E40  5189               	movf	??_packageCompartment& (0+255),w,b
  5078  000E42  5DA3               	subwf	packageCompartment@numS& (0+255),w,b
  5079  000E44  51A4               	movf	(packageCompartment@numS+1)& (0+255),w,b
  5080  000E46  0A80               	xorlw	128
  5081  000E48  6F8B               	movwf	(??_packageCompartment+2)& (0+255),b
  5082  000E4A  518A               	movf	(??_packageCompartment+1)& (0+255),w,b
  5083  000E4C  0A80               	xorlw	128
  5084  000E4E  598B               	subwfb	(??_packageCompartment+2)& (0+255),w,b
  5085  000E50  A0D8               	btfss	status,0,c
  5086  000E52  D00A               	goto	l102
  5087                           
  5088                           ; BSR set to: 0
  5089                           ;main.c: 93: motorControl(SPACER, STOPMOTOR);
  5090  000E54  0E02               	movlw	2
  5091  000E56  6E27               	movwf	motorControl@dir,c
  5092  000E58  0E02               	movlw	2
  5093  000E5A  ECDA  F00E         	call	_motorControl
  5094                           
  5095                           ;main.c: 94: doneS=1;
  5096  000E5E  0E00               	movlw	0
  5097  000E60  0100               	movlb	0	; () banked
  5098  000E62  6FAC               	movwf	(packageCompartment@doneS+1)& (0+255),b
  5099  000E64  0E01               	movlw	1
  5100  000E66  6FAB               	movwf	packageCompartment@doneS& (0+255),b
  5101  000E68                     l102:
  5102                           
  5103                           ; BSR set to: 0
  5104                           ;main.c: 95: }
  5105                           ;main.c: 96: if (numW >= w) {
  5106                           
  5107                           ; BSR set to: 0
  5108  000E68  5188               	movf	packageCompartment@w& (0+255),w,b
  5109  000E6A  6F89               	movwf	??_packageCompartment& (0+255),b
  5110  000E6C  6B8A               	clrf	(??_packageCompartment+1)& (0+255),b
  5111  000E6E  5189               	movf	??_packageCompartment& (0+255),w,b
  5112  000E70  5DA5               	subwf	packageCompartment@numW& (0+255),w,b
  5113  000E72  51A6               	movf	(packageCompartment@numW+1)& (0+255),w,b
  5114  000E74  0A80               	xorlw	128
  5115  000E76  6F8B               	movwf	(??_packageCompartment+2)& (0+255),b
  5116  000E78  518A               	movf	(??_packageCompartment+1)& (0+255),w,b
  5117  000E7A  0A80               	xorlw	128
  5118  000E7C  598B               	subwfb	(??_packageCompartment+2)& (0+255),w,b
  5119  000E7E  A0D8               	btfss	status,0,c
  5120  000E80  D00A               	goto	l103
  5121                           
  5122                           ; BSR set to: 0
  5123                           ;main.c: 97: motorControl(WASHER, STOPMOTOR);
  5124  000E82  0E02               	movlw	2
  5125  000E84  6E27               	movwf	motorControl@dir,c
  5126  000E86  0E03               	movlw	3
  5127  000E88  ECDA  F00E         	call	_motorControl
  5128                           
  5129                           ;main.c: 98: doneW=1;
  5130  000E8C  0E00               	movlw	0
  5131  000E8E  0100               	movlb	0	; () banked
  5132  000E90  6FAE               	movwf	(packageCompartment@doneW+1)& (0+255),b
  5133  000E92  0E01               	movlw	1
  5134  000E94  6FAD               	movwf	packageCompartment@doneW& (0+255),b
  5135  000E96                     l103:
  5136                           
  5137                           ; BSR set to: 0
  5138                           ;main.c: 99: }
  5139                           ;main.c: 101: if (doneB && doneN && doneS && doneW) {
  5140                           
  5141                           ; BSR set to: 0
  5142  000E96  51A7               	movf	packageCompartment@doneB& (0+255),w,b
  5143  000E98  11A8               	iorwf	(packageCompartment@doneB+1)& (0+255),w,b
  5144  000E9A  B4D8               	btfsc	status,2,c
  5145  000E9C  D6B1               	goto	l95
  5146                           
  5147                           ; BSR set to: 0
  5148  000E9E  51A9               	movf	packageCompartment@doneN& (0+255),w,b
  5149  000EA0  11AA               	iorwf	(packageCompartment@doneN+1)& (0+255),w,b
  5150  000EA2  B4D8               	btfsc	status,2,c
  5151  000EA4  D6AD               	goto	l95
  5152                           
  5153                           ; BSR set to: 0
  5154  000EA6  51AB               	movf	packageCompartment@doneS& (0+255),w,b
  5155  000EA8  11AC               	iorwf	(packageCompartment@doneS+1)& (0+255),w,b
  5156  000EAA  B4D8               	btfsc	status,2,c
  5157  000EAC  D6A9               	goto	l95
  5158                           
  5159                           ; BSR set to: 0
  5160  000EAE  51AD               	movf	packageCompartment@doneW& (0+255),w,b
  5161  000EB0  11AE               	iorwf	(packageCompartment@doneW+1)& (0+255),w,b
  5162  000EB2  B4D8               	btfsc	status,2,c
  5163  000EB4  D6A5               	goto	l95
  5164                           
  5165                           ; BSR set to: 0
  5166                           ;main.c: 102: I2C_Send(nanoAddr, "\1Done compartment\0");
  5167  000EB6  0E2C               	movlw	low STR_5
  5168  000EB8  6E2A               	movwf	I2C_Send@data,c
  5169  000EBA  0EFF               	movlw	high STR_5
  5170  000EBC  6E2B               	movwf	I2C_Send@data+1,c
  5171  000EBE  0EBD               	movlw	low _nanoAddr
  5172  000EC0  6EF6               	movwf	tblptrl,c
  5173  000EC2                     	if	1	;There is more than 1 active tblptr byte
  5174  000EC2  0EFC               	movlw	high _nanoAddr
  5175  000EC4  6EF7               	movwf	tblptrh,c
  5176  000EC6                     	endif
  5177  000EC6                     	if	1	;There are 3 active tblptr bytes
  5178  000EC6  0E00               	movlw	low (_nanoAddr shr (0+16))
  5179  000EC8  6EF8               	movwf	tblptru,c
  5180  000ECA                     	endif
  5181  000ECA  0008               	tblrd		*
  5182  000ECC  50F5               	movf	tablat,w,c
  5183  000ECE  EC30  F010         	call	_I2C_Send
  5184                           
  5185                           ;main.c: 104: }
  5186                           ;main.c: 105: }
  5187                           ;main.c: 108: I2C_Send(nanoAddr, 2);
  5188                           
  5189                           ;main.c: 103: break;
  5190  000ED2  0E02               	movlw	2
  5191  000ED4  6E2A               	movwf	I2C_Send@data,c
  5192  000ED6  0E00               	movlw	0
  5193  000ED8  6E2B               	movwf	I2C_Send@data+1,c
  5194  000EDA  0EBD               	movlw	low _nanoAddr
  5195  000EDC  6EF6               	movwf	tblptrl,c
  5196  000EDE                     	if	1	;There is more than 1 active tblptr byte
  5197  000EDE  0EFC               	movlw	high _nanoAddr
  5198  000EE0  6EF7               	movwf	tblptrh,c
  5199  000EE2                     	endif
  5200  000EE2                     	if	1	;There are 3 active tblptr bytes
  5201  000EE2  0E00               	movlw	low (_nanoAddr shr (0+16))
  5202  000EE4  6EF8               	movwf	tblptru,c
  5203  000EE6                     	endif
  5204  000EE6  0008               	tblrd		*
  5205  000EE8  50F5               	movf	tablat,w,c
  5206  000EEA  EC30  F010         	call	_I2C_Send
  5207                           
  5208                           ;main.c: 109: _delay((unsigned long)((5000)*(40000000/4000.0)));
  5209  000EEE  0EFE               	movlw	254
  5210  000EF0  0100               	movlb	0	; () banked
  5211  000EF2  6F8A               	movwf	(??_packageCompartment+1)& (0+255),b
  5212  000EF4  0EA7               	movlw	167
  5213  000EF6  6F89               	movwf	??_packageCompartment& (0+255),b
  5214  000EF8  0E65               	movlw	101
  5215  000EFA                     u6117:
  5216  000EFA  2EE8               	decfsz	wreg,f,c
  5217  000EFC  D7FE               	bra	u6117
  5218  000EFE  2F89               	decfsz	??_packageCompartment& (0+255),f,b
  5219  000F00  D7FC               	bra	u6117
  5220  000F02  2F8A               	decfsz	(??_packageCompartment+1)& (0+255),f,b
  5221  000F04  D7FA               	bra	u6117
  5222  000F06  D000               	nop2	
  5223  000F08  0012               	return		;funcret
  5224  000F0A                     __end_of_packageCompartment:
  5225                           	opt stack 0
  5226                           tosu	equ	0xFFF
  5227                           tosh	equ	0xFFE
  5228                           tosl	equ	0xFFD
  5229                           pclath	equ	0xFFA
  5230                           tblptru	equ	0xFF8
  5231                           tblptrh	equ	0xFF7
  5232                           tblptrl	equ	0xFF6
  5233                           tablat	equ	0xFF5
  5234                           prodh	equ	0xFF4
  5235                           prodl	equ	0xFF3
  5236                           indf0	equ	0xFEF
  5237                           postinc0	equ	0xFEE
  5238                           fsr0h	equ	0xFEA
  5239                           fsr0l	equ	0xFE9
  5240                           wreg	equ	0xFE8
  5241                           postdec1	equ	0xFE5
  5242                           plusw1	equ	0xFE3
  5243                           fsr1l	equ	0xFE1
  5244                           indf2	equ	0xFDF
  5245                           postinc2	equ	0xFDE
  5246                           postdec2	equ	0xFDD
  5247                           plusw2	equ	0xFDB
  5248                           fsr2h	equ	0xFDA
  5249                           fsr2l	equ	0xFD9
  5250                           status	equ	0xFD8
  5251                           
  5252 ;; *************** function _tock *****************
  5253 ;; Defined at:
  5254 ;;		line 56 in file "timer.c"
  5255 ;; Parameters:    Size  Location     Type
  5256 ;;		None
  5257 ;; Auto vars:     Size  Location     Type
  5258 ;;		None
  5259 ;; Return value:  Size  Location     Type
  5260 ;;                  3   38[COMRAM] void 
  5261 ;; Registers used:
  5262 ;;		None
  5263 ;; Tracked objects:
  5264 ;;		On entry : 0/0
  5265 ;;		On exit  : 0/0
  5266 ;;		Unchanged: 0/0
  5267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5268 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5271 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5272 ;;Total ram usage:        3 bytes
  5273 ;; Hardware stack levels used:    1
  5274 ;; Hardware stack levels required when called:    4
  5275 ;; This function calls:
  5276 ;;		Nothing
  5277 ;; This function is called by:
  5278 ;;		_packageCompartment
  5279 ;; This function uses a non-reentrant model
  5280 ;;
  5281                           
  5282                           	psect	text9
  5283  002844                     __ptext9:
  5284                           	opt stack 0
  5285  002844                     _tock:
  5286                           	opt stack 23
  5287                           
  5288                           ;timer.c: 61: return timeSinceLastTic;
  5289                           
  5290                           ;incstack = 0
  5291  002844  C053  F027         	movff	_timeSinceLastTic,?_tock	;volatile
  5292  002848  C054  F028         	movff	_timeSinceLastTic+1,?_tock+1	;volatile
  5293  00284C  C055  F029         	movff	_timeSinceLastTic+2,?_tock+2	;volatile
  5294  002850  0012               	return		;funcret
  5295  002852                     __end_of_tock:
  5296                           	opt stack 0
  5297                           tosu	equ	0xFFF
  5298                           tosh	equ	0xFFE
  5299                           tosl	equ	0xFFD
  5300                           pclath	equ	0xFFA
  5301                           tblptru	equ	0xFF8
  5302                           tblptrh	equ	0xFF7
  5303                           tblptrl	equ	0xFF6
  5304                           tablat	equ	0xFF5
  5305                           prodh	equ	0xFF4
  5306                           prodl	equ	0xFF3
  5307                           indf0	equ	0xFEF
  5308                           postinc0	equ	0xFEE
  5309                           fsr0h	equ	0xFEA
  5310                           fsr0l	equ	0xFE9
  5311                           wreg	equ	0xFE8
  5312                           postdec1	equ	0xFE5
  5313                           plusw1	equ	0xFE3
  5314                           fsr1l	equ	0xFE1
  5315                           indf2	equ	0xFDF
  5316                           postinc2	equ	0xFDE
  5317                           postdec2	equ	0xFDD
  5318                           plusw2	equ	0xFDB
  5319                           fsr2h	equ	0xFDA
  5320                           fsr2l	equ	0xFD9
  5321                           status	equ	0xFD8
  5322                           
  5323 ;; *************** function _tic *****************
  5324 ;; Defined at:
  5325 ;;		line 47 in file "timer.c"
  5326 ;; Parameters:    Size  Location     Type
  5327 ;;		None
  5328 ;; Auto vars:     Size  Location     Type
  5329 ;;		None
  5330 ;; Return value:  Size  Location     Type
  5331 ;;                  1    wreg      void 
  5332 ;; Registers used:
  5333 ;;		wreg, status,2, cstack
  5334 ;; Tracked objects:
  5335 ;;		On entry : 0/0
  5336 ;;		On exit  : 0/0
  5337 ;;		Unchanged: 0/0
  5338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5342 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5343 ;;Total ram usage:        0 bytes
  5344 ;; Hardware stack levels used:    1
  5345 ;; Hardware stack levels required when called:    5
  5346 ;; This function calls:
  5347 ;;		_tmr0Init
  5348 ;; This function is called by:
  5349 ;;		_packageCompartment
  5350 ;; This function uses a non-reentrant model
  5351 ;;
  5352                           
  5353                           	psect	text10
  5354  002820                     __ptext10:
  5355                           	opt stack 0
  5356  002820                     _tic:
  5357                           	opt stack 22
  5358                           
  5359                           ;timer.c: 52: tmr0Init();
  5360                           
  5361                           ;incstack = 0
  5362  002820  ECD2  F013         	call	_tmr0Init	;wreg free
  5363                           
  5364                           ;timer.c: 53: timeSinceLastTic = 0;
  5365  002824  0E00               	movlw	0
  5366  002826  6E53               	movwf	_timeSinceLastTic,c	;volatile
  5367  002828  0E00               	movlw	0
  5368  00282A  6E54               	movwf	_timeSinceLastTic+1,c	;volatile
  5369  00282C  0E00               	movlw	0
  5370  00282E  6E55               	movwf	_timeSinceLastTic+2,c	;volatile
  5371  002830  0012               	return		;funcret
  5372  002832                     __end_of_tic:
  5373                           	opt stack 0
  5374                           tosu	equ	0xFFF
  5375                           tosh	equ	0xFFE
  5376                           tosl	equ	0xFFD
  5377                           pclath	equ	0xFFA
  5378                           tblptru	equ	0xFF8
  5379                           tblptrh	equ	0xFF7
  5380                           tblptrl	equ	0xFF6
  5381                           tablat	equ	0xFF5
  5382                           prodh	equ	0xFF4
  5383                           prodl	equ	0xFF3
  5384                           indf0	equ	0xFEF
  5385                           postinc0	equ	0xFEE
  5386                           fsr0h	equ	0xFEA
  5387                           fsr0l	equ	0xFE9
  5388                           wreg	equ	0xFE8
  5389                           postdec1	equ	0xFE5
  5390                           plusw1	equ	0xFE3
  5391                           fsr1l	equ	0xFE1
  5392                           indf2	equ	0xFDF
  5393                           postinc2	equ	0xFDE
  5394                           postdec2	equ	0xFDD
  5395                           plusw2	equ	0xFDB
  5396                           fsr2h	equ	0xFDA
  5397                           fsr2l	equ	0xFD9
  5398                           status	equ	0xFD8
  5399                           
  5400 ;; *************** function _tmr0Init *****************
  5401 ;; Defined at:
  5402 ;;		line 18 in file "timer.c"
  5403 ;; Parameters:    Size  Location     Type
  5404 ;;		None
  5405 ;; Auto vars:     Size  Location     Type
  5406 ;;		None
  5407 ;; Return value:  Size  Location     Type
  5408 ;;                  1    wreg      void 
  5409 ;; Registers used:
  5410 ;;		wreg, status,2
  5411 ;; Tracked objects:
  5412 ;;		On entry : 0/0
  5413 ;;		On exit  : 0/0
  5414 ;;		Unchanged: 0/0
  5415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5419 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5420 ;;Total ram usage:        0 bytes
  5421 ;; Hardware stack levels used:    1
  5422 ;; Hardware stack levels required when called:    4
  5423 ;; This function calls:
  5424 ;;		Nothing
  5425 ;; This function is called by:
  5426 ;;		_tic
  5427 ;;		_Timer_startOperation
  5428 ;; This function uses a non-reentrant model
  5429 ;;
  5430                           
  5431                           	psect	text11
  5432  0027A4                     __ptext11:
  5433                           	opt stack 0
  5434  0027A4                     _tmr0Init:
  5435                           	opt stack 22
  5436                           
  5437                           ;timer.c: 27: if (!timerInit) {
  5438                           
  5439                           ;incstack = 0
  5440  0027A4  5050               	movf	_timerInit,w,c
  5441  0027A6  A4D8               	btfss	status,2,c
  5442  0027A8  0012               	return	
  5443                           
  5444                           ;timer.c: 28: T0CONbits.T08BIT = 0;
  5445  0027AA  9CD5               	bcf	4053,6,c	;volatile
  5446                           
  5447                           ;timer.c: 29: T0CONbits.T0CS = 0;
  5448  0027AC  9AD5               	bcf	4053,5,c	;volatile
  5449                           
  5450                           ;timer.c: 30: T0CONbits.PSA = 0;
  5451  0027AE  96D5               	bcf	4053,3,c	;volatile
  5452                           
  5453                           ;timer.c: 33: T0CONbits.T0PS2 = 1;
  5454  0027B0  84D5               	bsf	4053,2,c	;volatile
  5455                           
  5456                           ;timer.c: 34: T0CONbits.T0PS1 = 1;
  5457  0027B2  82D5               	bsf	4053,1,c	;volatile
  5458                           
  5459                           ;timer.c: 35: T0CONbits.T0PS0 = 1;
  5460  0027B4  80D5               	bsf	4053,0,c	;volatile
  5461                           
  5462                           ;timer.c: 38: TMR0H = 0xF2;
  5463  0027B6  0EF2               	movlw	242
  5464  0027B8  6ED7               	movwf	4055,c	;volatile
  5465                           
  5466                           ;timer.c: 39: TMR0L = 0xC0;
  5467  0027BA  0EC0               	movlw	192
  5468  0027BC  6ED6               	movwf	4054,c	;volatile
  5469                           
  5470                           ;timer.c: 40: T0CONbits.TMR0ON = 1;
  5471  0027BE  8ED5               	bsf	4053,7,c	;volatile
  5472                           
  5473                           ;timer.c: 41: TMR0IE = 1;
  5474  0027C0  8AF2               	bsf	intcon,5,c	;volatile
  5475                           
  5476                           ;timer.c: 44: (INTCONbits.GIE = 1);
  5477  0027C2  8EF2               	bsf	intcon,7,c	;volatile
  5478  0027C4  0012               	return	
  5479  0027C6                     __end_of_tmr0Init:
  5480                           	opt stack 0
  5481                           tosu	equ	0xFFF
  5482                           tosh	equ	0xFFE
  5483                           tosl	equ	0xFFD
  5484                           pclath	equ	0xFFA
  5485                           tblptru	equ	0xFF8
  5486                           tblptrh	equ	0xFF7
  5487                           tblptrl	equ	0xFF6
  5488                           tablat	equ	0xFF5
  5489                           prodh	equ	0xFF4
  5490                           prodl	equ	0xFF3
  5491                           intcon	equ	0xFF2
  5492                           indf0	equ	0xFEF
  5493                           postinc0	equ	0xFEE
  5494                           fsr0h	equ	0xFEA
  5495                           fsr0l	equ	0xFE9
  5496                           wreg	equ	0xFE8
  5497                           postdec1	equ	0xFE5
  5498                           plusw1	equ	0xFE3
  5499                           fsr1l	equ	0xFE1
  5500                           indf2	equ	0xFDF
  5501                           postinc2	equ	0xFDE
  5502                           postdec2	equ	0xFDD
  5503                           plusw2	equ	0xFDB
  5504                           fsr2h	equ	0xFDA
  5505                           fsr2l	equ	0xFD9
  5506                           status	equ	0xFD8
  5507                           
  5508 ;; *************** function ___fttol *****************
  5509 ;; Defined at:
  5510 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  5511 ;; Parameters:    Size  Location     Type
  5512 ;;  f1              3   41[COMRAM] float 
  5513 ;; Auto vars:     Size  Location     Type
  5514 ;;  lval            4    1[BANK0 ] unsigned long 
  5515 ;;  exp1            1    5[BANK0 ] unsigned char 
  5516 ;;  sign1           1    0[BANK0 ] unsigned char 
  5517 ;; Return value:  Size  Location     Type
  5518 ;;                  4   41[COMRAM] long 
  5519 ;; Registers used:
  5520 ;;		wreg, status,2, status,0
  5521 ;; Tracked objects:
  5522 ;;		On entry : 0/0
  5523 ;;		On exit  : 0/0
  5524 ;;		Unchanged: 0/0
  5525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5526 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5527 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5528 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5529 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5530 ;;Total ram usage:       15 bytes
  5531 ;; Hardware stack levels used:    1
  5532 ;; Hardware stack levels required when called:    4
  5533 ;; This function calls:
  5534 ;;		Nothing
  5535 ;; This function is called by:
  5536 ;;		_packageCompartment
  5537 ;; This function uses a non-reentrant model
  5538 ;;
  5539                           
  5540                           	psect	text12
  5541  001CBC                     __ptext12:
  5542                           	opt stack 0
  5543  001CBC                     ___fttol:
  5544                           	opt stack 23
  5545                           
  5546                           ;incstack = 0
  5547  001CBC  C02C  F02E         	movff	___fttol@f1+2,??___fttol
  5548  001CC0  6A2F               	clrf	(??___fttol+1)& (0+255),c
  5549  001CC2  6A30               	clrf	(??___fttol+2)& (0+255),c
  5550  001CC4  342B               	rlcf	___fttol@f1+1,w,c
  5551  001CC6  362E               	rlcf	??___fttol& (0+255),f,c
  5552  001CC8  E301               	bnc	u4931
  5553  001CCA  802F               	bsf	(??___fttol+1)& (0+255),0,c
  5554  001CCC                     u4931:
  5555  001CCC  502E               	movf	??___fttol,w,c
  5556  001CCE  0100               	movlb	0	; () banked
  5557  001CD0  6F85               	movwf	___fttol@exp1& (0+255),b
  5558  001CD2  5185               	movf	___fttol@exp1& (0+255),w,b
  5559  001CD4  A4D8               	btfss	status,2,c
  5560  001CD6  D009               	goto	l1002
  5561                           
  5562                           ; BSR set to: 0
  5563  001CD8  0E00               	movlw	0
  5564  001CDA  6E2A               	movwf	?___fttol,c
  5565  001CDC  0E00               	movlw	0
  5566  001CDE  6E2B               	movwf	?___fttol+1,c
  5567  001CE0  0E00               	movlw	0
  5568  001CE2  6E2C               	movwf	?___fttol+2,c
  5569  001CE4  0E00               	movlw	0
  5570  001CE6  6E2D               	movwf	?___fttol+3,c
  5571                           
  5572                           ; BSR set to: 0
  5573  001CE8  0012               	return	
  5574  001CEA                     l1002:
  5575                           
  5576                           ; BSR set to: 0
  5577                           
  5578                           ; BSR set to: 0
  5579  001CEA  0E17               	movlw	23
  5580  001CEC  6E2E               	movwf	??___fttol& (0+255),c
  5581  001CEE  C02A  F02F         	movff	___fttol@f1,??___fttol+1
  5582  001CF2  C02B  F030         	movff	___fttol@f1+1,??___fttol+2
  5583  001CF6  C02C  F031         	movff	___fttol@f1+2,??___fttol+3
  5584  001CFA  282E               	incf	??___fttol,w,c
  5585  001CFC  6E32               	movwf	(??___fttol+4)& (0+255),c
  5586  001CFE  D004               	goto	u4950
  5587  001D00                     u4955:
  5588  001D00  90D8               	bcf	status,0,c
  5589  001D02  3231               	rrcf	??___fttol+3,f,c
  5590  001D04  3230               	rrcf	??___fttol+2,f,c
  5591  001D06  322F               	rrcf	??___fttol+1,f,c
  5592  001D08                     u4950:
  5593  001D08  2E32               	decfsz	(??___fttol+4)& (0+255),f,c
  5594  001D0A  D7FA               	goto	u4955
  5595  001D0C  502F               	movf	??___fttol+1,w,c
  5596  001D0E  0100               	movlb	0	; () banked
  5597  001D10  6F80               	movwf	___fttol@sign1& (0+255),b
  5598                           
  5599                           ; BSR set to: 0
  5600  001D12  8E2B               	bsf	___fttol@f1+1,7,c
  5601                           
  5602                           ; BSR set to: 0
  5603  001D14  0EFF               	movlw	255
  5604  001D16  162A               	andwf	___fttol@f1,f,c
  5605  001D18  0EFF               	movlw	255
  5606  001D1A  162B               	andwf	___fttol@f1+1,f,c
  5607  001D1C  0E00               	movlw	0
  5608  001D1E  162C               	andwf	___fttol@f1+2,f,c
  5609                           
  5610                           ; BSR set to: 0
  5611  001D20  502A               	movf	___fttol@f1,w,c
  5612  001D22  6F81               	movwf	___fttol@lval& (0+255),b
  5613  001D24  502B               	movf	___fttol@f1+1,w,c
  5614  001D26  6F82               	movwf	(___fttol@lval+1)& (0+255),b
  5615  001D28  502C               	movf	___fttol@f1+2,w,c
  5616  001D2A  6F83               	movwf	(___fttol@lval+2)& (0+255),b
  5617  001D2C  6B84               	clrf	(___fttol@lval+3)& (0+255),b
  5618                           
  5619                           ; BSR set to: 0
  5620  001D2E  0E8E               	movlw	142
  5621  001D30  5F85               	subwf	___fttol@exp1& (0+255),f,b
  5622                           
  5623                           ; BSR set to: 0
  5624  001D32  AF85               	btfss	___fttol@exp1& (0+255),7,b
  5625  001D34  D016               	goto	l1004
  5626                           
  5627                           ; BSR set to: 0
  5628  001D36  5185               	movf	___fttol@exp1& (0+255),w,b
  5629  001D38  0A80               	xorlw	128
  5630  001D3A  0F8F               	addlw	143
  5631  001D3C  B0D8               	btfsc	status,0,c
  5632  001D3E  D009               	goto	l1005
  5633                           
  5634                           ; BSR set to: 0
  5635  001D40  0E00               	movlw	0
  5636  001D42  6E2A               	movwf	?___fttol,c
  5637  001D44  0E00               	movlw	0
  5638  001D46  6E2B               	movwf	?___fttol+1,c
  5639  001D48  0E00               	movlw	0
  5640  001D4A  6E2C               	movwf	?___fttol+2,c
  5641  001D4C  0E00               	movlw	0
  5642  001D4E  6E2D               	movwf	?___fttol+3,c
  5643                           
  5644                           ; BSR set to: 0
  5645  001D50  0012               	return	
  5646  001D52                     l1005:
  5647                           
  5648                           ; BSR set to: 0
  5649                           
  5650                           ; BSR set to: 0
  5651                           
  5652                           ; BSR set to: 0
  5653  001D52  90D8               	bcf	status,0,c
  5654  001D54  3384               	rrcf	(___fttol@lval+3)& (0+255),f,b
  5655  001D56  3383               	rrcf	(___fttol@lval+2)& (0+255),f,b
  5656  001D58  3382               	rrcf	(___fttol@lval+1)& (0+255),f,b
  5657  001D5A  3381               	rrcf	___fttol@lval& (0+255),f,b
  5658                           
  5659                           ; BSR set to: 0
  5660  001D5C  3F85               	incfsz	___fttol@exp1& (0+255),f,b
  5661  001D5E  D7F9               	goto	l1005
  5662                           
  5663                           ; BSR set to: 0
  5664  001D60  D015               	goto	u4990
  5665  001D62                     l1004:
  5666                           
  5667                           ; BSR set to: 0
  5668                           
  5669                           ; BSR set to: 0
  5670  001D62  0E17               	movlw	23
  5671  001D64  6585               	cpfsgt	___fttol@exp1& (0+255),b
  5672  001D66  D00F               	goto	l1010
  5673                           
  5674                           ; BSR set to: 0
  5675  001D68  0E00               	movlw	0
  5676  001D6A  6E2A               	movwf	?___fttol,c
  5677  001D6C  0E00               	movlw	0
  5678  001D6E  6E2B               	movwf	?___fttol+1,c
  5679  001D70  0E00               	movlw	0
  5680  001D72  6E2C               	movwf	?___fttol+2,c
  5681  001D74  0E00               	movlw	0
  5682  001D76  6E2D               	movwf	?___fttol+3,c
  5683                           
  5684                           ; BSR set to: 0
  5685  001D78  0012               	return	
  5686  001D7A                     
  5687                           ; BSR set to: 0
  5688                           
  5689                           ; BSR set to: 0
  5690  001D7A  90D8               	bcf	status,0,c
  5691  001D7C  3781               	rlcf	___fttol@lval& (0+255),f,b
  5692  001D7E  3782               	rlcf	(___fttol@lval+1)& (0+255),f,b
  5693  001D80  3783               	rlcf	(___fttol@lval+2)& (0+255),f,b
  5694  001D82  3784               	rlcf	(___fttol@lval+3)& (0+255),f,b
  5695  001D84  0785               	decf	___fttol@exp1& (0+255),f,b
  5696  001D86                     l1010:
  5697                           
  5698                           ; BSR set to: 0
  5699                           
  5700                           ; BSR set to: 0
  5701  001D86  5185               	movf	___fttol@exp1& (0+255),w,b
  5702  001D88  A4D8               	btfss	status,2,c
  5703  001D8A  D7F7               	goto	l1011
  5704  001D8C                     u4990:
  5705                           
  5706                           ; BSR set to: 0
  5707                           
  5708                           ; BSR set to: 0
  5709                           
  5710                           ; BSR set to: 0
  5711  001D8C  5180               	movf	___fttol@sign1& (0+255),w,b
  5712  001D8E  B4D8               	btfsc	status,2,c
  5713  001D90  D008               	goto	l1013
  5714                           
  5715                           ; BSR set to: 0
  5716  001D92  1F84               	comf	(___fttol@lval+3)& (0+255),f,b
  5717  001D94  1F83               	comf	(___fttol@lval+2)& (0+255),f,b
  5718  001D96  1F82               	comf	(___fttol@lval+1)& (0+255),f,b
  5719  001D98  6D81               	negf	___fttol@lval& (0+255),b
  5720  001D9A  0E00               	movlw	0
  5721  001D9C  2382               	addwfc	(___fttol@lval+1)& (0+255),f,b
  5722  001D9E  2383               	addwfc	(___fttol@lval+2)& (0+255),f,b
  5723  001DA0  2384               	addwfc	(___fttol@lval+3)& (0+255),f,b
  5724  001DA2                     l1013:
  5725                           
  5726                           ; BSR set to: 0
  5727                           
  5728                           ; BSR set to: 0
  5729  001DA2  C081  F02A         	movff	___fttol@lval,?___fttol
  5730  001DA6  C082  F02B         	movff	___fttol@lval+1,?___fttol+1
  5731  001DAA  C083  F02C         	movff	___fttol@lval+2,?___fttol+2
  5732  001DAE  C084  F02D         	movff	___fttol@lval+3,?___fttol+3
  5733  001DB2  0012               	return	
  5734  001DB4                     __end_of___fttol:
  5735                           	opt stack 0
  5736                           tosu	equ	0xFFF
  5737                           tosh	equ	0xFFE
  5738                           tosl	equ	0xFFD
  5739                           pclath	equ	0xFFA
  5740                           tblptru	equ	0xFF8
  5741                           tblptrh	equ	0xFF7
  5742                           tblptrl	equ	0xFF6
  5743                           tablat	equ	0xFF5
  5744                           prodh	equ	0xFF4
  5745                           prodl	equ	0xFF3
  5746                           intcon	equ	0xFF2
  5747                           indf0	equ	0xFEF
  5748                           postinc0	equ	0xFEE
  5749                           fsr0h	equ	0xFEA
  5750                           fsr0l	equ	0xFE9
  5751                           wreg	equ	0xFE8
  5752                           postdec1	equ	0xFE5
  5753                           plusw1	equ	0xFE3
  5754                           fsr1l	equ	0xFE1
  5755                           indf2	equ	0xFDF
  5756                           postinc2	equ	0xFDE
  5757                           postdec2	equ	0xFDD
  5758                           plusw2	equ	0xFDB
  5759                           fsr2h	equ	0xFDA
  5760                           fsr2l	equ	0xFD9
  5761                           status	equ	0xFD8
  5762                           
  5763 ;; *************** function _inputEntry *****************
  5764 ;; Defined at:
  5765 ;;		line 30 in file "menu.c"
  5766 ;; Parameters:    Size  Location     Type
  5767 ;;		None
  5768 ;; Auto vars:     Size  Location     Type
  5769 ;;  sum             2   85[BANK0 ] int 
  5770 ;;  fastenerStri   32   40[BANK0 ] unsigned char [32]
  5771 ;;  msg            24   16[BANK0 ] unsigned char [24]
  5772 ;;  compartments    1   74[BANK0 ] unsigned char 
  5773 ;;  i               2  101[BANK0 ] int 
  5774 ;;  compartmentN    2   99[BANK0 ] int 
  5775 ;;  numPressed      2   97[BANK0 ] int 
  5776 ;;  inputEntrySt    2   95[BANK0 ] int 
  5777 ;;  numW            2   93[BANK0 ] int 
  5778 ;;  numS            2   91[BANK0 ] int 
  5779 ;;  numN            2   89[BANK0 ] int 
  5780 ;;  numB            2   87[BANK0 ] int 
  5781 ;;  doneCompartm    2   83[BANK0 ] int 
  5782 ;;  doneMultiple    2   81[BANK0 ] int 
  5783 ;;  setIsGood       2   79[BANK0 ] int 
  5784 ;;  found           2   77[BANK0 ] int 
  5785 ;;  done            2   75[BANK0 ] int 
  5786 ;;  compartmentL    2   72[BANK0 ] unsigned char [2]
  5787 ;;  numFasteners    2    0        int 
  5788 ;;  pressed         1  103[BANK0 ] unsigned char 
  5789 ;; Return value:  Size  Location     Type
  5790 ;;                  1    wreg      void 
  5791 ;; Registers used:
  5792 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5793 ;; Tracked objects:
  5794 ;;		On entry : 0/0
  5795 ;;		On exit  : 0/0
  5796 ;;		Unchanged: 0/0
  5797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5799 ;;      Locals:         0      88       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5800 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5801 ;;      Totals:         0      92       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5802 ;;Total ram usage:       92 bytes
  5803 ;; Hardware stack levels used:    1
  5804 ;; Hardware stack levels required when called:    8
  5805 ;; This function calls:
  5806 ;;		_I2C_Send
  5807 ;;		___wmul
  5808 ;;		_lcdInst
  5809 ;;		_lcd_set_cursor
  5810 ;;		_pollKeypad
  5811 ;;		_printErrorLCD
  5812 ;;		_printStringLCD
  5813 ;;		_putch
  5814 ;;		_strcpy
  5815 ;; This function is called by:
  5816 ;;		_mainMenu
  5817 ;; This function uses a non-reentrant model
  5818 ;;
  5819                           
  5820                           	psect	text13
  5821  000012                     __ptext13:
  5822                           	opt stack 0
  5823  000012                     _inputEntry:
  5824                           	opt stack 21
  5825                           
  5826                           ;menu.c: 31: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5827                           
  5828                           ; BSR set to: 0
  5829                           ;incstack = 0
  5830  000012  0E01               	movlw	1
  5831  000014  EC06  F014         	call	_lcdInst
  5832  000018  0EC3               	movlw	195
  5833  00001A  0100               	movlb	0	; () banked
  5834  00001C  6F8C               	movwf	??_inputEntry& (0+255),b
  5835  00001E  0ECD               	movlw	205
  5836  000020                     u6127:
  5837  000020  2EE8               	decfsz	wreg,f,c
  5838  000022  D7FE               	bra	u6127
  5839  000024  2F8C               	decfsz	??_inputEntry& (0+255),f,b
  5840  000026  D7FC               	bra	u6127
  5841                           
  5842                           ;menu.c: 32: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  5843  000028  0E80               	movlw	128
  5844  00002A  EC06  F014         	call	_lcdInst
  5845  00002E  0E41               	movlw	65
  5846  000030  0100               	movlb	0	; () banked
  5847  000032  6F8C               	movwf	??_inputEntry& (0+255),b
  5848  000034  0EEE               	movlw	238
  5849  000036                     u6137:
  5850  000036  2EE8               	decfsz	wreg,f,c
  5851  000038  D7FE               	bra	u6137
  5852  00003A  2F8C               	decfsz	??_inputEntry& (0+255),f,b
  5853  00003C  D7FC               	bra	u6137
  5854  00003E  F000               	nop	
  5855                           
  5856                           ;menu.c: 34: I2C_Send(nanoAddr, "Started input entry, hi\0");
  5857  000040  0ED5               	movlw	low STR_11
  5858  000042  6E2A               	movwf	I2C_Send@data,c
  5859  000044  0EFE               	movlw	high STR_11
  5860  000046  6E2B               	movwf	I2C_Send@data+1,c
  5861  000048  0EBD               	movlw	low _nanoAddr
  5862  00004A  6EF6               	movwf	tblptrl,c
  5863  00004C                     	if	1	;There is more than 1 active tblptr byte
  5864  00004C  0EFC               	movlw	high _nanoAddr
  5865  00004E  6EF7               	movwf	tblptrh,c
  5866  000050                     	endif
  5867  000050                     	if	1	;There are 3 active tblptr bytes
  5868  000050  0E00               	movlw	low (_nanoAddr shr (0+16))
  5869  000052  6EF8               	movwf	tblptru,c
  5870  000054                     	endif
  5871  000054  0008               	tblrd		*
  5872  000056  50F5               	movf	tablat,w,c
  5873  000058  EC30  F010         	call	_I2C_Send
  5874                           
  5875                           ;menu.c: 36: int compartmentNum = 0;
  5876  00005C  0E00               	movlw	0
  5877  00005E  0100               	movlb	0	; () banked
  5878  000060  6FE4               	movwf	(inputEntry@compartmentNum+1)& (0+255),b
  5879  000062  0E00               	movlw	0
  5880  000064  6FE3               	movwf	inputEntry@compartmentNum& (0+255),b
  5881                           
  5882                           ; BSR set to: 0
  5883                           ;menu.c: 37: char compartmentLabel[2] = "C0";
  5884  000066  C0FD  F0C8         	movff	inputEntry@F3177,inputEntry@compartmentLabel
  5885  00006A  C0FE  F0C9         	movff	inputEntry@F3177+1,inputEntry@compartmentLabel+1
  5886                           
  5887                           ; BSR set to: 0
  5888                           ;menu.c: 38: int inputEntryStep = 0;
  5889  00006E  0E00               	movlw	0
  5890  000070  6FE0               	movwf	(inputEntry@inputEntryStep+1)& (0+255),b
  5891  000072  0E00               	movlw	0
  5892  000074  6FDF               	movwf	inputEntry@inputEntryStep& (0+255),b
  5893                           
  5894                           ; BSR set to: 0
  5895                           ;menu.c: 39: int done = 0;
  5896  000076  0E00               	movlw	0
  5897  000078  6FCC               	movwf	(inputEntry@done+1)& (0+255),b
  5898  00007A  0E00               	movlw	0
  5899  00007C  6FCB               	movwf	inputEntry@done& (0+255),b
  5900                           
  5901                           ;menu.c: 41: int i, numPressed, doneCompartment, numB, numN, numS, numW, found, numFaste
      +                          ners;
  5902                           ;menu.c: 42: int setIsGood, doneMultiples;
  5903                           ;menu.c: 43: unsigned char pressed;
  5904                           ;menu.c: 45: while (!done) {
  5905  00007E  D33C               	goto	l334
  5906  000080                     
  5907                           ; BSR set to: 0
  5908                           ;menu.c: 47: if (inputEntryStep == 0) {
  5909                           
  5910                           ; BSR set to: 0
  5911  000080  51DF               	movf	inputEntry@inputEntryStep& (0+255),w,b
  5912  000082  11E0               	iorwf	(inputEntry@inputEntryStep+1)& (0+255),w,b
  5913  000084  A4D8               	btfss	status,2,c
  5914  000086  D04B               	goto	l330
  5915                           
  5916                           ; BSR set to: 0
  5917                           ;menu.c: 48: printStringLCD(inputEntryQuestions[inputEntryStep]);
  5918  000088  C0DF  F027         	movff	inputEntry@inputEntryStep,___wmul@multiplier
  5919  00008C  C0E0  F028         	movff	inputEntry@inputEntryStep+1,___wmul@multiplier+1
  5920  000090  0E00               	movlw	0
  5921  000092  6E2A               	movwf	___wmul@multiplicand+1,c
  5922  000094  0E21               	movlw	33
  5923  000096  6E29               	movwf	___wmul@multiplicand,c
  5924  000098  ECAD  F013         	call	___wmul	;wreg free
  5925  00009C  0EA4               	movlw	low _inputEntryQuestions
  5926  00009E  2427               	addwf	?___wmul,w,c
  5927  0000A0  6E2D               	movwf	printStringLCD@string,c
  5928  0000A2  0EFD               	movlw	high _inputEntryQuestions
  5929  0000A4  2028               	addwfc	?___wmul+1,w,c
  5930  0000A6  6E2E               	movwf	printStringLCD@string+1,c
  5931  0000A8  ECD7  F00A         	call	_printStringLCD	;wreg free
  5932                           
  5933                           ;menu.c: 50: pressed = pollKeypad();
  5934  0000AC  EC70  F013         	call	_pollKeypad	;wreg free
  5935  0000B0  0100               	movlb	0	; () banked
  5936  0000B2  6FE7               	movwf	inputEntry@pressed& (0+255),b
  5937                           
  5938                           ; BSR set to: 0
  5939                           ;menu.c: 51: numPressed = pressed - 48;
  5940  0000B4  0ED0               	movlw	208
  5941  0000B6  25E7               	addwf	inputEntry@pressed& (0+255),w,b
  5942  0000B8  6FE1               	movwf	inputEntry@numPressed& (0+255),b
  5943  0000BA  6BE2               	clrf	(inputEntry@numPressed+1)& (0+255),b
  5944  0000BC  0EFF               	movlw	255
  5945  0000BE  23E2               	addwfc	(inputEntry@numPressed+1)& (0+255),f,b
  5946                           
  5947                           ; BSR set to: 0
  5948                           ;menu.c: 53: putch(pressed);
  5949  0000C0  51E7               	movf	inputEntry@pressed& (0+255),w,b
  5950  0000C2  ECFC  F013         	call	_putch
  5951                           
  5952                           ;menu.c: 54: _delay((unsigned long)((500)*(40000000/4000.0)));
  5953  0000C6  0E1A               	movlw	26
  5954  0000C8  0100               	movlb	0	; () banked
  5955  0000CA  6F8D               	movwf	(??_inputEntry+1)& (0+255),b
  5956  0000CC  0E5E               	movlw	94
  5957  0000CE  6F8C               	movwf	??_inputEntry& (0+255),b
  5958  0000D0  0E6E               	movlw	110
  5959  0000D2                     u6147:
  5960  0000D2  2EE8               	decfsz	wreg,f,c
  5961  0000D4  D7FE               	bra	u6147
  5962  0000D6  2F8C               	decfsz	??_inputEntry& (0+255),f,b
  5963  0000D8  D7FC               	bra	u6147
  5964  0000DA  2F8D               	decfsz	(??_inputEntry+1)& (0+255),f,b
  5965  0000DC  D7FA               	bra	u6147
  5966  0000DE  F000               	nop	
  5967                           
  5968                           ;menu.c: 56: if (numPressed >= 4 && numPressed <= 8) {
  5969  0000E0  0100               	movlb	0	; () banked
  5970  0000E2  BFE2               	btfsc	(inputEntry@numPressed+1)& (0+255),7,b
  5971  0000E4  D015               	goto	l331
  5972  0000E6  51E2               	movf	(inputEntry@numPressed+1)& (0+255),w,b
  5973  0000E8  E104               	bnz	u5410
  5974  0000EA  0E04               	movlw	4
  5975  0000EC  5DE1               	subwf	inputEntry@numPressed& (0+255),w,b
  5976  0000EE  A0D8               	btfss	status,0,c
  5977  0000F0  D00F               	goto	l331
  5978  0000F2                     u5410:
  5979                           
  5980                           ; BSR set to: 0
  5981  0000F2  BFE2               	btfsc	(inputEntry@numPressed+1)& (0+255),7,b
  5982  0000F4  D006               	goto	u5420
  5983  0000F6  51E2               	movf	(inputEntry@numPressed+1)& (0+255),w,b
  5984  0000F8  E10B               	bnz	l4745
  5985  0000FA  0E09               	movlw	9
  5986  0000FC  5DE1               	subwf	inputEntry@numPressed& (0+255),w,b
  5987  0000FE  B0D8               	btfsc	status,0,c
  5988  000100  D007               	goto	l331
  5989  000102                     u5420:
  5990                           
  5991                           ; BSR set to: 0
  5992                           ;menu.c: 57: params.steps = numPressed;
  5993  000102  C0E1  F1A3         	movff	inputEntry@numPressed,_params
  5994  000106  C0E2  F1A4         	movff	inputEntry@numPressed+1,_params+1
  5995                           
  5996                           ; BSR set to: 0
  5997                           ;menu.c: 58: inputEntryStep++;
  5998  00010A  4BDF               	infsnz	inputEntry@inputEntryStep& (0+255),f,b
  5999  00010C  2BE0               	incf	(inputEntry@inputEntryStep+1)& (0+255),f,b
  6000                           
  6001                           ;menu.c: 59: } else printErrorLCD(errMsgs.badEntry);
  6002  00010E  D2F4               	goto	l334
  6003  000110                     l331:
  6004  000110                     l4745:
  6005                           
  6006                           ; BSR set to: 0
  6007  000110  0EC4               	movlw	low _errMsgs
  6008  000112  6E32               	movwf	printErrorLCD@string,c
  6009  000114  0EFC               	movlw	high _errMsgs
  6010  000116  6E33               	movwf	printErrorLCD@string+1,c
  6011  000118  EC9A  F013         	call	_printErrorLCD	;wreg free
  6012                           
  6013                           ;menu.c: 60: } else if (inputEntryStep == 1) {
  6014  00011C  D2ED               	goto	l334
  6015  00011E                     l330:
  6016  00011E  0100               	movlb	0	; () banked
  6017  000120  05DF               	decf	inputEntry@inputEntryStep& (0+255),w,b
  6018  000122  11E0               	iorwf	(inputEntry@inputEntryStep+1)& (0+255),w,b
  6019  000124  A4D8               	btfss	status,2,c
  6020  000126  D2E8               	goto	l334
  6021                           
  6022                           ; BSR set to: 0
  6023                           ;menu.c: 62: char compartmentsToFill = assemblyStepEncoding[params.steps - 4];
  6024  000128  0EFC               	movlw	252
  6025  00012A  6F8C               	movwf	??_inputEntry& (0+255),b
  6026  00012C  0EFF               	movlw	255
  6027  00012E  6F8D               	movwf	(??_inputEntry+1)& (0+255),b
  6028  000130  C1A3  F08E         	movff	_params,??_inputEntry+2
  6029  000134  C1A4  F08F         	movff	_params+1,??_inputEntry+3
  6030  000138  518C               	movf	??_inputEntry& (0+255),w,b
  6031  00013A  278E               	addwf	(??_inputEntry+2)& (0+255),f,b
  6032  00013C  518D               	movf	(??_inputEntry+1)& (0+255),w,b
  6033  00013E  238F               	addwfc	(??_inputEntry+3)& (0+255),f,b
  6034  000140  0EB8               	movlw	low _assemblyStepEncoding
  6035  000142  258E               	addwf	(??_inputEntry+2)& (0+255),w,b
  6036  000144  6EF6               	movwf	tblptrl,c
  6037  000146  0EFC               	movlw	high _assemblyStepEncoding
  6038  000148  218F               	addwfc	(??_inputEntry+3)& (0+255),w,b
  6039  00014A  6EF7               	movwf	tblptrh,c
  6040  00014C                     	if	1	;There are 3 active tblptr bytes
  6041  00014C  6AF8               	clrf	tblptru,c
  6042  00014E  0E00               	movlw	low (__mediumconst shr (0+16))
  6043  000150  22F8               	addwfc	tblptru,f,c
  6044  000152                     	endif
  6045  000152  0008               	tblrd		*
  6046  000154  CFF5 F0CA          	movff	tablat,inputEntry@compartmentsToFill
  6047                           
  6048                           ; BSR set to: 0
  6049                           ;menu.c: 63: for (compartmentNum = 0; compartmentNum < 8; compartmentNum++) {
  6050  000158  0E00               	movlw	0
  6051  00015A  6FE4               	movwf	(inputEntry@compartmentNum+1)& (0+255),b
  6052  00015C  0E00               	movlw	0
  6053  00015E  6FE3               	movwf	inputEntry@compartmentNum& (0+255),b
  6054                           
  6055                           ; BSR set to: 0
  6056  000160  BFE4               	btfsc	(inputEntry@compartmentNum+1)& (0+255),7,b
  6057  000162  D008               	goto	l335
  6058  000164  51E4               	movf	(inputEntry@compartmentNum+1)& (0+255),w,b
  6059  000166  E105               	bnz	u5440
  6060  000168  0E08               	movlw	8
  6061  00016A  5DE3               	subwf	inputEntry@compartmentNum& (0+255),w,b
  6062  00016C  B0D8               	btfsc	status,0,c
  6063  00016E  D2B2               	goto	u5810
  6064  000170  D001               	goto	l335
  6065  000172                     u5440:
  6066                           
  6067                           ; BSR set to: 0
  6068  000172  D2B0               	goto	u5810
  6069  000174                     l335:
  6070                           
  6071                           ; BSR set to: 0
  6072                           ;menu.c: 65: if ((compartmentsToFill >> compartmentNum) & 0b1) {
  6073                           
  6074                           ; BSR set to: 0
  6075                           
  6076                           ;menu.c: 64: STARTCOMPARTMENT:
  6077                           
  6078                           ; BSR set to: 0
  6079  000174  C0E3  F08C         	movff	inputEntry@compartmentNum,??_inputEntry
  6080  000178  C0CA  F08D         	movff	inputEntry@compartmentsToFill,??_inputEntry+1
  6081  00017C  2B8C               	incf	??_inputEntry& (0+255),f,b
  6082  00017E  D002               	goto	u5454
  6083  000180                     u5455:
  6084  000180  90D8               	bcf	status,0,c
  6085  000182  338D               	rrcf	(??_inputEntry+1)& (0+255),f,b
  6086  000184                     u5454:
  6087  000184  2F8C               	decfsz	??_inputEntry& (0+255),f,b
  6088  000186  D7FC               	goto	u5455
  6089  000188  0100               	movlb	0	; () banked
  6090  00018A  A18D               	btfss	(??_inputEntry+1)& (0+255),0,b
  6091  00018C  D284               	goto	l338
  6092                           
  6093                           ; BSR set to: 0
  6094                           ;menu.c: 66: char msg[] = "\1Started compartment x\0";
  6095  00018E  EE21  F022         	lfsr	2,inputEntry@F3198
  6096  000192  EE10  F090         	lfsr	1,inputEntry@msg
  6097  000196  0E17               	movlw	23
  6098  000198                     u5471:
  6099  000198  CFDB FFE3          	movff	plusw2,plusw1
  6100  00019C  06E8               	decf	wreg,f,c
  6101  00019E  E2FC               	bc	u5471
  6102                           
  6103                           ; BSR set to: 0
  6104                           ;menu.c: 67: msg[21] = compartmentNum + 1 + 48;
  6105  0001A0  51E3               	movf	inputEntry@compartmentNum& (0+255),w,b
  6106  0001A2  0F31               	addlw	49
  6107  0001A4  6FA5               	movwf	(inputEntry@msg+21)& (0+255),b
  6108                           
  6109                           ; BSR set to: 0
  6110                           ;menu.c: 68: I2C_Send(nanoAddr, msg);
  6111  0001A6  0E90               	movlw	low inputEntry@msg
  6112  0001A8  6E2A               	movwf	I2C_Send@data,c
  6113  0001AA  0E00               	movlw	high inputEntry@msg
  6114  0001AC  6E2B               	movwf	I2C_Send@data+1,c
  6115  0001AE  0EBD               	movlw	low _nanoAddr
  6116  0001B0  6EF6               	movwf	tblptrl,c
  6117  0001B2                     	if	1	;There is more than 1 active tblptr byte
  6118  0001B2  0EFC               	movlw	high _nanoAddr
  6119  0001B4  6EF7               	movwf	tblptrh,c
  6120  0001B6                     	endif
  6121  0001B6                     	if	1	;There are 3 active tblptr bytes
  6122  0001B6  0E00               	movlw	low (_nanoAddr shr (0+16))
  6123  0001B8  6EF8               	movwf	tblptru,c
  6124  0001BA                     	endif
  6125  0001BA  0008               	tblrd		*
  6126  0001BC  50F5               	movf	tablat,w,c
  6127  0001BE  EC30  F010         	call	_I2C_Send
  6128                           
  6129                           ;menu.c: 70: setIsGood = 0;
  6130  0001C2  0E00               	movlw	0
  6131  0001C4  0100               	movlb	0	; () banked
  6132  0001C6  6FD0               	movwf	(inputEntry@setIsGood+1)& (0+255),b
  6133  0001C8  0E00               	movlw	0
  6134  0001CA  D151               	goto	L3
  6135  0001CC                     
  6136                           ; BSR set to: 0
  6137                           ;menu.c: 72: numB = 0;
  6138                           
  6139                           ; BSR set to: 0
  6140  0001CC  0E00               	movlw	0
  6141  0001CE  6FD8               	movwf	(inputEntry@numB+1)& (0+255),b
  6142  0001D0  0E00               	movlw	0
  6143  0001D2  6FD7               	movwf	inputEntry@numB& (0+255),b
  6144                           
  6145                           ;menu.c: 73: numN = 0;
  6146  0001D4  0E00               	movlw	0
  6147  0001D6  6FDA               	movwf	(inputEntry@numN+1)& (0+255),b
  6148  0001D8  0E00               	movlw	0
  6149  0001DA  6FD9               	movwf	inputEntry@numN& (0+255),b
  6150                           
  6151                           ;menu.c: 74: numS = 0;
  6152  0001DC  0E00               	movlw	0
  6153  0001DE  6FDC               	movwf	(inputEntry@numS+1)& (0+255),b
  6154  0001E0  0E00               	movlw	0
  6155  0001E2  6FDB               	movwf	inputEntry@numS& (0+255),b
  6156                           
  6157                           ;menu.c: 75: numW = 0;
  6158  0001E4  0E00               	movlw	0
  6159  0001E6  6FDE               	movwf	(inputEntry@numW+1)& (0+255),b
  6160  0001E8  0E00               	movlw	0
  6161  0001EA  6FDD               	movwf	inputEntry@numW& (0+255),b
  6162                           
  6163                           ; BSR set to: 0
  6164                           ;menu.c: 76: char fastenerString[32];
  6165                           ;menu.c: 77: strcpy(fastenerString, inputEntryQuestions[inputEntryStep]);
  6166  0001EC  0EA8               	movlw	low inputEntry@fastenerString
  6167  0001EE  6E2D               	movwf	strcpy@to,c
  6168  0001F0  0E00               	movlw	high inputEntry@fastenerString
  6169  0001F2  6E2E               	movwf	strcpy@to+1,c
  6170  0001F4  C0DF  F027         	movff	inputEntry@inputEntryStep,___wmul@multiplier
  6171  0001F8  C0E0  F028         	movff	inputEntry@inputEntryStep+1,___wmul@multiplier+1
  6172  0001FC  0E00               	movlw	0
  6173  0001FE  6E2A               	movwf	___wmul@multiplicand+1,c
  6174  000200  0E21               	movlw	33
  6175  000202  6E29               	movwf	___wmul@multiplicand,c
  6176  000204  ECAD  F013         	call	___wmul	;wreg free
  6177  000208  0EA4               	movlw	low _inputEntryQuestions
  6178  00020A  2427               	addwf	?___wmul,w,c
  6179  00020C  6E2F               	movwf	strcpy@from,c
  6180  00020E  0EFD               	movlw	high _inputEntryQuestions
  6181  000210  2028               	addwfc	?___wmul+1,w,c
  6182  000212  6E30               	movwf	strcpy@from+1,c
  6183  000214  EC57  F013         	call	_strcpy	;wreg free
  6184                           
  6185                           ;menu.c: 78: fastenerString[14] = compartmentNum + 1 + 48;
  6186  000218  0100               	movlb	0	; () banked
  6187  00021A  51E3               	movf	inputEntry@compartmentNum& (0+255),w,b
  6188  00021C  0F31               	addlw	49
  6189  00021E  6FB6               	movwf	(inputEntry@fastenerString+14)& (0+255),b
  6190                           
  6191                           ; BSR set to: 0
  6192                           ;menu.c: 80: printStringLCD(fastenerString);
  6193  000220  0EA8               	movlw	low inputEntry@fastenerString
  6194  000222  6E2D               	movwf	printStringLCD@string,c
  6195  000224  0E00               	movlw	high inputEntry@fastenerString
  6196  000226  6E2E               	movwf	printStringLCD@string+1,c
  6197  000228  ECD7  F00A         	call	_printStringLCD	;wreg free
  6198                           
  6199                           ;menu.c: 81: lcd_set_cursor(9, 1);
  6200  00022C  0E01               	movlw	1
  6201  00022E  6E2D               	movwf	lcd_set_cursor@y,c
  6202  000230  0E09               	movlw	9
  6203  000232  ECFD  F012         	call	_lcd_set_cursor
  6204                           
  6205                           ;menu.c: 82: doneCompartment = 0;
  6206  000236  0E00               	movlw	0
  6207  000238  0100               	movlb	0	; () banked
  6208  00023A  6FD4               	movwf	(inputEntry@doneCompartment+1)& (0+255),b
  6209  00023C  0E00               	movlw	0
  6210  00023E  D04D               	goto	L4
  6211  000240                     
  6212                           ; BSR set to: 0
  6213                           ;menu.c: 85: pressed = pollKeypad();
  6214                           
  6215                           ; BSR set to: 0
  6216  000240  EC70  F013         	call	_pollKeypad	;wreg free
  6217  000244  0100               	movlb	0	; () banked
  6218  000246  6FE7               	movwf	inputEntry@pressed& (0+255),b
  6219                           
  6220                           ; BSR set to: 0
  6221                           ;menu.c: 86: if (pressed == 66 || pressed == 78 || pressed == 83 || pressed == 87) {
  6222  000248  0E42               	movlw	66
  6223  00024A  19E7               	xorwf	inputEntry@pressed& (0+255),w,b
  6224  00024C  B4D8               	btfsc	status,2,c
  6225  00024E  D00C               	goto	u5510
  6226                           
  6227                           ; BSR set to: 0
  6228  000250  0E4E               	movlw	78
  6229  000252  19E7               	xorwf	inputEntry@pressed& (0+255),w,b
  6230  000254  B4D8               	btfsc	status,2,c
  6231  000256  D008               	goto	u5510
  6232                           
  6233                           ; BSR set to: 0
  6234  000258  0E53               	movlw	83
  6235  00025A  19E7               	xorwf	inputEntry@pressed& (0+255),w,b
  6236  00025C  B4D8               	btfsc	status,2,c
  6237  00025E  D004               	goto	u5510
  6238                           
  6239                           ; BSR set to: 0
  6240  000260  0E57               	movlw	87
  6241  000262  19E7               	xorwf	inputEntry@pressed& (0+255),w,b
  6242  000264  A4D8               	btfss	status,2,c
  6243  000266  D022               	goto	l345
  6244  000268                     u5510:
  6245                           
  6246                           ; BSR set to: 0
  6247                           ;menu.c: 87: putch(pressed);
  6248                           
  6249                           ; BSR set to: 0
  6250  000268  51E7               	movf	inputEntry@pressed& (0+255),w,b
  6251  00026A  ECFC  F013         	call	_putch
  6252                           
  6253                           ;menu.c: 88: if (pressed == 66) numB++;
  6254  00026E  0E42               	movlw	66
  6255  000270  0100               	movlb	0	; () banked
  6256  000272  19E7               	xorwf	inputEntry@pressed& (0+255),w,b
  6257  000274  A4D8               	btfss	status,2,c
  6258  000276  D003               	goto	l348
  6259                           
  6260                           ; BSR set to: 0
  6261  000278  4BD7               	infsnz	inputEntry@numB& (0+255),f,b
  6262  00027A  2BD8               	incf	(inputEntry@numB+1)& (0+255),f,b
  6263  00027C  D014               	goto	l354
  6264  00027E                     l348:
  6265                           
  6266                           ; BSR set to: 0
  6267                           ;menu.c: 89: else if (pressed == 78) numN++;
  6268                           
  6269                           ; BSR set to: 0
  6270  00027E  0E4E               	movlw	78
  6271  000280  19E7               	xorwf	inputEntry@pressed& (0+255),w,b
  6272  000282  A4D8               	btfss	status,2,c
  6273  000284  D003               	goto	l350
  6274                           
  6275                           ; BSR set to: 0
  6276  000286  4BD9               	infsnz	inputEntry@numN& (0+255),f,b
  6277  000288  2BDA               	incf	(inputEntry@numN+1)& (0+255),f,b
  6278  00028A  D00D               	goto	l354
  6279  00028C                     l350:
  6280                           
  6281                           ; BSR set to: 0
  6282                           ;menu.c: 90: else if (pressed == 83) numS ++;
  6283                           
  6284                           ; BSR set to: 0
  6285  00028C  0E53               	movlw	83
  6286  00028E  19E7               	xorwf	inputEntry@pressed& (0+255),w,b
  6287  000290  A4D8               	btfss	status,2,c
  6288  000292  D003               	goto	l352
  6289                           
  6290                           ; BSR set to: 0
  6291  000294  4BDB               	infsnz	inputEntry@numS& (0+255),f,b
  6292  000296  2BDC               	incf	(inputEntry@numS+1)& (0+255),f,b
  6293  000298  D006               	goto	l354
  6294  00029A                     l352:
  6295                           
  6296                           ; BSR set to: 0
  6297                           ;menu.c: 91: else if (pressed == 87) numW++;
  6298                           
  6299                           ; BSR set to: 0
  6300  00029A  0E57               	movlw	87
  6301  00029C  19E7               	xorwf	inputEntry@pressed& (0+255),w,b
  6302  00029E  A4D8               	btfss	status,2,c
  6303  0002A0  D002               	goto	l354
  6304                           
  6305                           ; BSR set to: 0
  6306  0002A2  4BDD               	infsnz	inputEntry@numW& (0+255),f,b
  6307  0002A4  2BDE               	incf	(inputEntry@numW+1)& (0+255),f,b
  6308  0002A6                     l354:
  6309                           
  6310                           ; BSR set to: 0
  6311                           ;menu.c: 92: doneCompartment++;
  6312                           
  6313                           ; BSR set to: 0
  6314                           
  6315                           ; BSR set to: 0
  6316                           
  6317                           ; BSR set to: 0
  6318  0002A6  4BD3               	infsnz	inputEntry@doneCompartment& (0+255),f,b
  6319  0002A8  2BD4               	incf	(inputEntry@doneCompartment+1)& (0+255),f,b
  6320                           
  6321                           ;menu.c: 93: } else if (pressed == 35) {
  6322  0002AA  D021               	goto	l361
  6323  0002AC                     l345:
  6324                           
  6325                           ; BSR set to: 0
  6326                           
  6327                           ; BSR set to: 0
  6328  0002AC  0E23               	movlw	35
  6329  0002AE  19E7               	xorwf	inputEntry@pressed& (0+255),w,b
  6330  0002B0  A4D8               	btfss	status,2,c
  6331  0002B2  D015               	goto	l356
  6332                           
  6333                           ; BSR set to: 0
  6334                           ;menu.c: 94: if (numB != 0 || numN != 0 || numS != 0 || numW != 0) doneCompartment = 4;
  6335  0002B4  51D7               	movf	inputEntry@numB& (0+255),w,b
  6336  0002B6  11D8               	iorwf	(inputEntry@numB+1)& (0+255),w,b
  6337  0002B8  A4D8               	btfss	status,2,c
  6338  0002BA  D00C               	goto	u5600
  6339                           
  6340                           ; BSR set to: 0
  6341  0002BC  51D9               	movf	inputEntry@numN& (0+255),w,b
  6342  0002BE  11DA               	iorwf	(inputEntry@numN+1)& (0+255),w,b
  6343  0002C0  A4D8               	btfss	status,2,c
  6344  0002C2  D008               	goto	u5600
  6345                           
  6346                           ; BSR set to: 0
  6347  0002C4  51DB               	movf	inputEntry@numS& (0+255),w,b
  6348  0002C6  11DC               	iorwf	(inputEntry@numS+1)& (0+255),w,b
  6349  0002C8  A4D8               	btfss	status,2,c
  6350  0002CA  D004               	goto	u5600
  6351                           
  6352                           ; BSR set to: 0
  6353  0002CC  51DD               	movf	inputEntry@numW& (0+255),w,b
  6354  0002CE  11DE               	iorwf	(inputEntry@numW+1)& (0+255),w,b
  6355  0002D0  B4D8               	btfsc	status,2,c
  6356  0002D2  D00D               	goto	l361
  6357  0002D4                     u5600:
  6358                           
  6359                           ; BSR set to: 0
  6360                           
  6361                           ; BSR set to: 0
  6362  0002D4  0E00               	movlw	0
  6363  0002D6  6FD4               	movwf	(inputEntry@doneCompartment+1)& (0+255),b
  6364  0002D8  0E04               	movlw	4
  6365  0002DA                     L4:
  6366  0002DA  6FD3               	movwf	inputEntry@doneCompartment& (0+255),b
  6367                           
  6368                           ; BSR set to: 0
  6369                           ;menu.c: 95: } else if (pressed == 42) {
  6370  0002DC  D008               	goto	l361
  6371  0002DE                     l356:
  6372                           
  6373                           ; BSR set to: 0
  6374                           
  6375                           ; BSR set to: 0
  6376  0002DE  0E2A               	movlw	42
  6377  0002E0  19E7               	xorwf	inputEntry@pressed& (0+255),w,b
  6378  0002E2  A4D8               	btfss	status,2,c
  6379  0002E4  D004               	goto	l361
  6380                           
  6381                           ; BSR set to: 0
  6382                           ;menu.c: 96: compartmentNum--;
  6383  0002E6  07E3               	decf	inputEntry@compartmentNum& (0+255),f,b
  6384  0002E8  A0D8               	btfss	status,0,c
  6385  0002EA  07E4               	decf	(inputEntry@compartmentNum+1)& (0+255),f,b
  6386                           
  6387                           ;menu.c: 97: goto STARTMULTIPLES;
  6388  0002EC  D0C6               	goto	u5700
  6389  0002EE                     l361:
  6390                           
  6391                           ; BSR set to: 0
  6392                           
  6393                           ; BSR set to: 0
  6394                           
  6395                           ; BSR set to: 0
  6396                           
  6397                           ; BSR set to: 0
  6398                           
  6399                           ; BSR set to: 0
  6400  0002EE  BFD4               	btfsc	(inputEntry@doneCompartment+1)& (0+255),7,b
  6401  0002F0  D7A7               	goto	l344
  6402  0002F2  51D4               	movf	(inputEntry@doneCompartment+1)& (0+255),w,b
  6403  0002F4  E104               	bnz	l4825
  6404  0002F6  0E04               	movlw	4
  6405  0002F8  5DD3               	subwf	inputEntry@doneCompartment& (0+255),w,b
  6406  0002FA  A0D8               	btfss	status,0,c
  6407  0002FC  D7A1               	goto	l344
  6408  0002FE                     l4825:
  6409                           
  6410                           ; BSR set to: 0
  6411                           ;menu.c: 98: }
  6412                           ;menu.c: 99: }
  6413                           ;menu.c: 102: found = 0;
  6414  0002FE  0E00               	movlw	0
  6415  000300  6FCE               	movwf	(inputEntry@found+1)& (0+255),b
  6416  000302  0E00               	movlw	0
  6417  000304  6FCD               	movwf	inputEntry@found& (0+255),b
  6418                           
  6419                           ;menu.c: 103: for (i = 0; i < 21; i++) {
  6420  000306  0E00               	movlw	0
  6421  000308  6FE6               	movwf	(inputEntry@i+1)& (0+255),b
  6422  00030A  0E00               	movlw	0
  6423  00030C  6FE5               	movwf	inputEntry@i& (0+255),b
  6424                           
  6425                           ; BSR set to: 0
  6426  00030E  BFE6               	btfsc	(inputEntry@i+1)& (0+255),7,b
  6427  000310  D008               	goto	l364
  6428  000312  51E6               	movf	(inputEntry@i+1)& (0+255),w,b
  6429  000314  E105               	bnz	u5630
  6430  000316  0E15               	movlw	21
  6431  000318  5DE5               	subwf	inputEntry@i& (0+255),w,b
  6432  00031A  B0D8               	btfsc	status,0,c
  6433  00031C  D099               	goto	u5680
  6434  00031E  D001               	goto	l364
  6435  000320                     u5630:
  6436                           
  6437                           ; BSR set to: 0
  6438  000320  D097               	goto	u5680
  6439  000322                     l364:
  6440                           
  6441                           ; BSR set to: 0
  6442                           ;menu.c: 104: if (fastenerMatrix[i][0] == numB &&
  6443                           ;menu.c: 105: fastenerMatrix[i][1] == numN &&
  6444                           ;menu.c: 106: fastenerMatrix[i][2] == numS &&
  6445                           ;menu.c: 107: fastenerMatrix[i][3] == numW)
  6446                           
  6447                           ; BSR set to: 0
  6448  000322  C0E5  F08C         	movff	inputEntry@i,??_inputEntry
  6449  000326  C0E6  F08D         	movff	inputEntry@i+1,??_inputEntry+1
  6450  00032A  90D8               	bcf	status,0,c
  6451  00032C  378C               	rlcf	??_inputEntry& (0+255),f,b
  6452  00032E  378D               	rlcf	(??_inputEntry+1)& (0+255),f,b
  6453  000330  90D8               	bcf	status,0,c
  6454  000332  378C               	rlcf	??_inputEntry& (0+255),f,b
  6455  000334  378D               	rlcf	(??_inputEntry+1)& (0+255),f,b
  6456  000336  0E28               	movlw	low _fastenerMatrix
  6457  000338  258C               	addwf	??_inputEntry& (0+255),w,b
  6458  00033A  6EF6               	movwf	tblptrl,c
  6459  00033C  0EFE               	movlw	high _fastenerMatrix
  6460  00033E  218D               	addwfc	(??_inputEntry+1)& (0+255),w,b
  6461  000340  6EF7               	movwf	tblptrh,c
  6462  000342                     	if	1	;There are 3 active tblptr bytes
  6463  000342  6AF8               	clrf	tblptru,c
  6464  000344  0E00               	movlw	low (__mediumconst shr (0+16))
  6465  000346  22F8               	addwfc	tblptru,f,c
  6466  000348                     	endif
  6467  000348  0008               	tblrd		*
  6468  00034A  50F5               	movf	tablat,w,c
  6469  00034C  6F8E               	movwf	(??_inputEntry+2)& (0+255),b
  6470  00034E  6B8F               	clrf	(??_inputEntry+3)& (0+255),b
  6471  000350  51D7               	movf	inputEntry@numB& (0+255),w,b
  6472  000352  198E               	xorwf	(??_inputEntry+2)& (0+255),w,b
  6473  000354  E176               	bnz	l4843
  6474  000356  51D8               	movf	(inputEntry@numB+1)& (0+255),w,b
  6475  000358  198F               	xorwf	(??_inputEntry+3)& (0+255),w,b
  6476  00035A  A4D8               	btfss	status,2,c
  6477  00035C  D072               	goto	l366
  6478                           
  6479                           ; BSR set to: 0
  6480  00035E  C0E5  F08C         	movff	inputEntry@i,??_inputEntry
  6481  000362  C0E6  F08D         	movff	inputEntry@i+1,??_inputEntry+1
  6482  000366  90D8               	bcf	status,0,c
  6483  000368  378C               	rlcf	??_inputEntry& (0+255),f,b
  6484  00036A  378D               	rlcf	(??_inputEntry+1)& (0+255),f,b
  6485  00036C  90D8               	bcf	status,0,c
  6486  00036E  378C               	rlcf	??_inputEntry& (0+255),f,b
  6487  000370  378D               	rlcf	(??_inputEntry+1)& (0+255),f,b
  6488  000372  0E01               	movlw	1
  6489  000374  278C               	addwf	??_inputEntry& (0+255),f,b
  6490  000376  0E00               	movlw	0
  6491  000378  238D               	addwfc	(??_inputEntry+1)& (0+255),f,b
  6492  00037A  0E28               	movlw	low _fastenerMatrix
  6493  00037C  258C               	addwf	??_inputEntry& (0+255),w,b
  6494  00037E  6EF6               	movwf	tblptrl,c
  6495  000380  0EFE               	movlw	high _fastenerMatrix
  6496  000382  218D               	addwfc	(??_inputEntry+1)& (0+255),w,b
  6497  000384  6EF7               	movwf	tblptrh,c
  6498  000386                     	if	1	;There are 3 active tblptr bytes
  6499  000386  6AF8               	clrf	tblptru,c
  6500  000388  0E00               	movlw	low (__mediumconst shr (0+16))
  6501  00038A  22F8               	addwfc	tblptru,f,c
  6502  00038C                     	endif
  6503  00038C  0008               	tblrd		*
  6504  00038E  50F5               	movf	tablat,w,c
  6505  000390  6F8E               	movwf	(??_inputEntry+2)& (0+255),b
  6506  000392  6B8F               	clrf	(??_inputEntry+3)& (0+255),b
  6507  000394  51D9               	movf	inputEntry@numN& (0+255),w,b
  6508  000396  198E               	xorwf	(??_inputEntry+2)& (0+255),w,b
  6509  000398  E154               	bnz	l4843
  6510  00039A  51DA               	movf	(inputEntry@numN+1)& (0+255),w,b
  6511  00039C  198F               	xorwf	(??_inputEntry+3)& (0+255),w,b
  6512  00039E  A4D8               	btfss	status,2,c
  6513  0003A0  D050               	goto	l366
  6514                           
  6515                           ; BSR set to: 0
  6516  0003A2  C0E5  F08C         	movff	inputEntry@i,??_inputEntry
  6517  0003A6  C0E6  F08D         	movff	inputEntry@i+1,??_inputEntry+1
  6518  0003AA  90D8               	bcf	status,0,c
  6519  0003AC  378C               	rlcf	??_inputEntry& (0+255),f,b
  6520  0003AE  378D               	rlcf	(??_inputEntry+1)& (0+255),f,b
  6521  0003B0  90D8               	bcf	status,0,c
  6522  0003B2  378C               	rlcf	??_inputEntry& (0+255),f,b
  6523  0003B4  378D               	rlcf	(??_inputEntry+1)& (0+255),f,b
  6524  0003B6  0E02               	movlw	2
  6525  0003B8  278C               	addwf	??_inputEntry& (0+255),f,b
  6526  0003BA  0E00               	movlw	0
  6527  0003BC  238D               	addwfc	(??_inputEntry+1)& (0+255),f,b
  6528  0003BE  0E28               	movlw	low _fastenerMatrix
  6529  0003C0  258C               	addwf	??_inputEntry& (0+255),w,b
  6530  0003C2  6EF6               	movwf	tblptrl,c
  6531  0003C4  0EFE               	movlw	high _fastenerMatrix
  6532  0003C6  218D               	addwfc	(??_inputEntry+1)& (0+255),w,b
  6533  0003C8  6EF7               	movwf	tblptrh,c
  6534  0003CA                     	if	1	;There are 3 active tblptr bytes
  6535  0003CA  6AF8               	clrf	tblptru,c
  6536  0003CC  0E00               	movlw	low (__mediumconst shr (0+16))
  6537  0003CE  22F8               	addwfc	tblptru,f,c
  6538  0003D0                     	endif
  6539  0003D0  0008               	tblrd		*
  6540  0003D2  50F5               	movf	tablat,w,c
  6541  0003D4  6F8E               	movwf	(??_inputEntry+2)& (0+255),b
  6542  0003D6  6B8F               	clrf	(??_inputEntry+3)& (0+255),b
  6543  0003D8  51DB               	movf	inputEntry@numS& (0+255),w,b
  6544  0003DA  198E               	xorwf	(??_inputEntry+2)& (0+255),w,b
  6545  0003DC  E132               	bnz	l4843
  6546  0003DE  51DC               	movf	(inputEntry@numS+1)& (0+255),w,b
  6547  0003E0  198F               	xorwf	(??_inputEntry+3)& (0+255),w,b
  6548  0003E2  A4D8               	btfss	status,2,c
  6549  0003E4  D02E               	goto	l366
  6550                           
  6551                           ; BSR set to: 0
  6552  0003E6  C0E5  F08C         	movff	inputEntry@i,??_inputEntry
  6553  0003EA  C0E6  F08D         	movff	inputEntry@i+1,??_inputEntry+1
  6554  0003EE  90D8               	bcf	status,0,c
  6555  0003F0  378C               	rlcf	??_inputEntry& (0+255),f,b
  6556  0003F2  378D               	rlcf	(??_inputEntry+1)& (0+255),f,b
  6557  0003F4  90D8               	bcf	status,0,c
  6558  0003F6  378C               	rlcf	??_inputEntry& (0+255),f,b
  6559  0003F8  378D               	rlcf	(??_inputEntry+1)& (0+255),f,b
  6560  0003FA  0E03               	movlw	3
  6561  0003FC  278C               	addwf	??_inputEntry& (0+255),f,b
  6562  0003FE  0E00               	movlw	0
  6563  000400  238D               	addwfc	(??_inputEntry+1)& (0+255),f,b
  6564  000402  0E28               	movlw	low _fastenerMatrix
  6565  000404  258C               	addwf	??_inputEntry& (0+255),w,b
  6566  000406  6EF6               	movwf	tblptrl,c
  6567  000408  0EFE               	movlw	high _fastenerMatrix
  6568  00040A  218D               	addwfc	(??_inputEntry+1)& (0+255),w,b
  6569  00040C  6EF7               	movwf	tblptrh,c
  6570  00040E                     	if	1	;There are 3 active tblptr bytes
  6571  00040E  6AF8               	clrf	tblptru,c
  6572  000410  0E00               	movlw	low (__mediumconst shr (0+16))
  6573  000412  22F8               	addwfc	tblptru,f,c
  6574  000414                     	endif
  6575  000414  0008               	tblrd		*
  6576  000416  50F5               	movf	tablat,w,c
  6577  000418  6F8E               	movwf	(??_inputEntry+2)& (0+255),b
  6578  00041A  6B8F               	clrf	(??_inputEntry+3)& (0+255),b
  6579  00041C  51DD               	movf	inputEntry@numW& (0+255),w,b
  6580  00041E  198E               	xorwf	(??_inputEntry+2)& (0+255),w,b
  6581  000420  E110               	bnz	l4843
  6582  000422  51DE               	movf	(inputEntry@numW+1)& (0+255),w,b
  6583  000424  198F               	xorwf	(??_inputEntry+3)& (0+255),w,b
  6584  000426  A4D8               	btfss	status,2,c
  6585  000428  D00C               	goto	l366
  6586                           
  6587                           ; BSR set to: 0
  6588                           ;menu.c: 108: {
  6589                           ;menu.c: 109: params.toFill[compartmentNum] = i;
  6590  00042A  0EA5               	movlw	low (_params+2)
  6591  00042C  25E3               	addwf	inputEntry@compartmentNum& (0+255),w,b
  6592  00042E  6ED9               	movwf	fsr2l,c
  6593  000430  0E01               	movlw	high (_params+2)
  6594  000432  21E4               	addwfc	(inputEntry@compartmentNum+1)& (0+255),w,b
  6595  000434  6EDA               	movwf	fsr2h,c
  6596  000436  C0E5  FFDF         	movff	inputEntry@i,indf2
  6597                           
  6598                           ; BSR set to: 0
  6599                           ;menu.c: 110: found = 1;
  6600  00043A  0E00               	movlw	0
  6601  00043C  6FCE               	movwf	(inputEntry@found+1)& (0+255),b
  6602  00043E  0E01               	movlw	1
  6603  000440  6FCD               	movwf	inputEntry@found& (0+255),b
  6604  000442                     l366:
  6605  000442                     l4843:
  6606                           
  6607                           ; BSR set to: 0
  6608  000442  4BE5               	infsnz	inputEntry@i& (0+255),f,b
  6609  000444  2BE6               	incf	(inputEntry@i+1)& (0+255),f,b
  6610                           
  6611                           ; BSR set to: 0
  6612  000446  BFE6               	btfsc	(inputEntry@i+1)& (0+255),7,b
  6613  000448  D76C               	goto	l364
  6614  00044A  51E6               	movf	(inputEntry@i+1)& (0+255),w,b
  6615  00044C  E101               	bnz	l4847
  6616  00044E  D763               	goto	L5
  6617  000450                     u5680:
  6618  000450                     l4847:
  6619                           
  6620                           ; BSR set to: 0
  6621                           ;menu.c: 111: }
  6622                           ;menu.c: 112: }
  6623                           ;menu.c: 113: if (!found) {
  6624  000450  51CD               	movf	inputEntry@found& (0+255),w,b
  6625  000452  11CE               	iorwf	(inputEntry@found+1)& (0+255),w,b
  6626  000454  A4D8               	btfss	status,2,c
  6627  000456  D007               	goto	l367
  6628                           
  6629                           ; BSR set to: 0
  6630                           ;menu.c: 114: printErrorLCD(errMsgs.badEntry);
  6631  000458  0EC4               	movlw	low _errMsgs
  6632  00045A  6E32               	movwf	printErrorLCD@string,c
  6633  00045C  0EFC               	movlw	high _errMsgs
  6634  00045E  6E33               	movwf	printErrorLCD@string+1,c
  6635  000460  EC9A  F013         	call	_printErrorLCD	;wreg free
  6636                           
  6637                           ;menu.c: 118: } else {
  6638                           
  6639                           ;menu.c: 117: continue;
  6640  000464  D005               	goto	l368
  6641  000466                     l367:
  6642                           
  6643                           ;menu.c: 119: setIsGood = 1;
  6644  000466  0E00               	movlw	0
  6645  000468  0100               	movlb	0	; () banked
  6646  00046A  6FD0               	movwf	(inputEntry@setIsGood+1)& (0+255),b
  6647  00046C  0E01               	movlw	1
  6648  00046E                     L3:
  6649  00046E  6FCF               	movwf	inputEntry@setIsGood& (0+255),b
  6650  000470                     l368:
  6651                           
  6652                           ; BSR set to: 0
  6653                           
  6654                           ; BSR set to: 0
  6655  000470  0100               	movlb	0	; () banked
  6656  000472  51CF               	movf	inputEntry@setIsGood& (0+255),w,b
  6657  000474  11D0               	iorwf	(inputEntry@setIsGood+1)& (0+255),w,b
  6658  000476  B4D8               	btfsc	status,2,c
  6659  000478  D6A9               	goto	l342
  6660  00047A                     u5700:
  6661                           
  6662                           ; BSR set to: 0
  6663                           ;menu.c: 125: doneMultiples = 0;
  6664                           
  6665                           ; BSR set to: 0
  6666                           
  6667                           ;menu.c: 120: }
  6668                           ;menu.c: 121: }
  6669                           ;menu.c: 124: STARTMULTIPLES:
  6670                           
  6671                           ; BSR set to: 0
  6672  00047A  0E00               	movlw	0
  6673  00047C  6FD2               	movwf	(inputEntry@doneMultiples+1)& (0+255),b
  6674  00047E  0E00               	movlw	0
  6675  000480  D103               	goto	L6
  6676  000482                     
  6677                           ; BSR set to: 0
  6678                           ;menu.c: 127: printStringLCD(inputEntryQuestions[2]);
  6679                           
  6680                           ; BSR set to: 0
  6681  000482  0EE6               	movlw	low (_inputEntryQuestions+66)
  6682  000484  6E2D               	movwf	printStringLCD@string,c
  6683  000486  0EFD               	movlw	high (_inputEntryQuestions+66)
  6684  000488  6E2E               	movwf	printStringLCD@string+1,c
  6685  00048A  ECD7  F00A         	call	_printStringLCD	;wreg free
  6686                           
  6687                           ;menu.c: 128: lcd_set_cursor(14, 1);
  6688  00048E  0E01               	movlw	1
  6689  000490  6E2D               	movwf	lcd_set_cursor@y,c
  6690  000492  0E0E               	movlw	14
  6691  000494  ECFD  F012         	call	_lcd_set_cursor
  6692                           
  6693                           ;menu.c: 130: pressed = pollKeypad();
  6694  000498  EC70  F013         	call	_pollKeypad	;wreg free
  6695  00049C  0100               	movlb	0	; () banked
  6696  00049E  6FE7               	movwf	inputEntry@pressed& (0+255),b
  6697                           
  6698                           ; BSR set to: 0
  6699                           ;menu.c: 131: numPressed = pressed - 48;
  6700  0004A0  0ED0               	movlw	208
  6701  0004A2  25E7               	addwf	inputEntry@pressed& (0+255),w,b
  6702  0004A4  6FE1               	movwf	inputEntry@numPressed& (0+255),b
  6703  0004A6  6BE2               	clrf	(inputEntry@numPressed+1)& (0+255),b
  6704  0004A8  0EFF               	movlw	255
  6705  0004AA  23E2               	addwfc	(inputEntry@numPressed+1)& (0+255),f,b
  6706                           
  6707                           ; BSR set to: 0
  6708                           ;menu.c: 133: if (pressed == 42) goto STARTCOMPARTMENT;
  6709  0004AC  0E2A               	movlw	42
  6710  0004AE  19E7               	xorwf	inputEntry@pressed& (0+255),w,b
  6711  0004B0  B4D8               	btfsc	status,2,c
  6712  0004B2  D660               	goto	l335
  6713                           
  6714                           ; BSR set to: 0
  6715                           ;menu.c: 136: putch(pressed);
  6716                           
  6717                           ; BSR set to: 0
  6718                           
  6719                           ; BSR set to: 0
  6720  0004B4  51E7               	movf	inputEntry@pressed& (0+255),w,b
  6721  0004B6  ECFC  F013         	call	_putch
  6722                           
  6723                           ;menu.c: 137: _delay((unsigned long)((500)*(40000000/4000.0)));
  6724  0004BA  0E1A               	movlw	26
  6725  0004BC  0100               	movlb	0	; () banked
  6726  0004BE  6F8D               	movwf	(??_inputEntry+1)& (0+255),b
  6727  0004C0  0E5E               	movlw	94
  6728  0004C2  6F8C               	movwf	??_inputEntry& (0+255),b
  6729  0004C4  0E6E               	movlw	110
  6730  0004C6                     u6157:
  6731  0004C6  2EE8               	decfsz	wreg,f,c
  6732  0004C8  D7FE               	bra	u6157
  6733  0004CA  2F8C               	decfsz	??_inputEntry& (0+255),f,b
  6734  0004CC  D7FC               	bra	u6157
  6735  0004CE  2F8D               	decfsz	(??_inputEntry+1)& (0+255),f,b
  6736  0004D0  D7FA               	bra	u6157
  6737  0004D2  F000               	nop	
  6738                           
  6739                           ;menu.c: 139: int sum = 0;
  6740  0004D4  0E00               	movlw	0
  6741  0004D6  0100               	movlb	0	; () banked
  6742  0004D8  6FD6               	movwf	(inputEntry@sum+1)& (0+255),b
  6743  0004DA  0E00               	movlw	0
  6744  0004DC  6FD5               	movwf	inputEntry@sum& (0+255),b
  6745                           
  6746                           ; BSR set to: 0
  6747                           ;menu.c: 140: for (i = 0; i < 4; i++) {
  6748  0004DE  0E00               	movlw	0
  6749  0004E0  6FE6               	movwf	(inputEntry@i+1)& (0+255),b
  6750  0004E2  0E00               	movlw	0
  6751  0004E4  6FE5               	movwf	inputEntry@i& (0+255),b
  6752  0004E6                     l4879:
  6753                           
  6754                           ; BSR set to: 0
  6755  0004E6  BFE6               	btfsc	(inputEntry@i+1)& (0+255),7,b
  6756  0004E8  D006               	goto	l373
  6757  0004EA  51E6               	movf	(inputEntry@i+1)& (0+255),w,b
  6758  0004EC  E127               	bnz	l4889
  6759  0004EE  0E04               	movlw	4
  6760  0004F0  5DE5               	subwf	inputEntry@i& (0+255),w,b
  6761  0004F2  B0D8               	btfsc	status,0,c
  6762  0004F4  D023               	goto	u5730
  6763  0004F6                     l373:
  6764                           
  6765                           ; BSR set to: 0
  6766                           ;menu.c: 141: sum += fastenerMatrix[params.toFill[compartmentNum]][i];
  6767                           
  6768                           ; BSR set to: 0
  6769  0004F6  0EA5               	movlw	low (_params+2)
  6770  0004F8  25E3               	addwf	inputEntry@compartmentNum& (0+255),w,b
  6771  0004FA  6ED9               	movwf	fsr2l,c
  6772  0004FC  0E01               	movlw	high (_params+2)
  6773  0004FE  21E4               	addwfc	(inputEntry@compartmentNum+1)& (0+255),w,b
  6774  000500  6EDA               	movwf	fsr2h,c
  6775  000502  50DF               	movf	indf2,w,c
  6776  000504  6F8C               	movwf	??_inputEntry& (0+255),b
  6777  000506  518C               	movf	??_inputEntry& (0+255),w,b
  6778  000508  0D04               	mullw	4
  6779  00050A  0E28               	movlw	low _fastenerMatrix
  6780  00050C  6F8D               	movwf	(??_inputEntry+1)& (0+255),b
  6781  00050E  0EFE               	movlw	high _fastenerMatrix
  6782  000510  6F8E               	movwf	(??_inputEntry+2)& (0+255),b
  6783  000512  50F3               	movf	prodl,w,c
  6784  000514  278D               	addwf	(??_inputEntry+1)& (0+255),f,b
  6785  000516  50F4               	movf	prodh,w,c
  6786  000518  238E               	addwfc	(??_inputEntry+2)& (0+255),f,b
  6787  00051A  51E5               	movf	inputEntry@i& (0+255),w,b
  6788  00051C  278D               	addwf	(??_inputEntry+1)& (0+255),f,b
  6789  00051E  51E6               	movf	(inputEntry@i+1)& (0+255),w,b
  6790  000520  238E               	addwfc	(??_inputEntry+2)& (0+255),f,b
  6791  000522  C08D  FFF6         	movff	??_inputEntry+1,tblptrl
  6792  000526  C08E  FFF7         	movff	??_inputEntry+2,tblptrh
  6793  00052A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6794  00052A  6AF8               	clrf	tblptru,c
  6795  00052C                     	endif
  6796  00052C                     	if	0	;tblptru may be non-zero
  6797  00052C                     	endif
  6798  00052C  0008               	tblrd		*
  6799  00052E  50F5               	movf	tablat,w,c
  6800  000530  27D5               	addwf	inputEntry@sum& (0+255),f,b
  6801  000532  0E00               	movlw	0
  6802  000534  23D6               	addwfc	(inputEntry@sum+1)& (0+255),f,b
  6803                           
  6804                           ; BSR set to: 0
  6805  000536  4BE5               	infsnz	inputEntry@i& (0+255),f,b
  6806  000538  2BE6               	incf	(inputEntry@i+1)& (0+255),f,b
  6807  00053A  D7D5               	goto	l4879
  6808  00053C                     u5730:
  6809  00053C                     l4889:
  6810                           
  6811                           ; BSR set to: 0
  6812                           ;menu.c: 142: };
  6813                           ;menu.c: 143: if (numPressed * sum > 4) {
  6814  00053C  C0E1  F027         	movff	inputEntry@numPressed,___wmul@multiplier
  6815  000540  C0E2  F028         	movff	inputEntry@numPressed+1,___wmul@multiplier+1
  6816  000544  C0D5  F029         	movff	inputEntry@sum,___wmul@multiplicand
  6817  000548  C0D6  F02A         	movff	inputEntry@sum+1,___wmul@multiplicand+1
  6818  00054C  ECAD  F013         	call	___wmul	;wreg free
  6819  000550  BE28               	btfsc	?___wmul+1,7,c
  6820  000552  D00D               	goto	l375
  6821  000554  5028               	movf	?___wmul+1,w,c
  6822  000556  E104               	bnz	u5740
  6823  000558  0E05               	movlw	5
  6824  00055A  5C27               	subwf	?___wmul,w,c
  6825  00055C  A0D8               	btfss	status,0,c
  6826  00055E  D007               	goto	l375
  6827  000560                     u5740:
  6828                           
  6829                           ;menu.c: 144: printErrorLCD(errMsgs.tooManyFasteners);
  6830  000560  0EE4               	movlw	low (_errMsgs+32)
  6831  000562  6E32               	movwf	printErrorLCD@string,c
  6832  000564  0EFC               	movlw	high (_errMsgs+32)
  6833  000566  6E33               	movwf	printErrorLCD@string+1,c
  6834  000568  EC9A  F013         	call	_printErrorLCD	;wreg free
  6835                           
  6836                           ;menu.c: 145: } else if (numPressed * sum <= 0) {
  6837  00056C  D08E               	goto	l386
  6838  00056E                     l375:
  6839  00056E  C0E1  F027         	movff	inputEntry@numPressed,___wmul@multiplier
  6840  000572  C0E2  F028         	movff	inputEntry@numPressed+1,___wmul@multiplier+1
  6841  000576  C0D5  F029         	movff	inputEntry@sum,___wmul@multiplicand
  6842  00057A  C0D6  F02A         	movff	inputEntry@sum+1,___wmul@multiplicand+1
  6843  00057E  ECAD  F013         	call	___wmul	;wreg free
  6844  000582  BE28               	btfsc	?___wmul+1,7,c
  6845  000584  D005               	goto	u5750
  6846  000586  5028               	movf	?___wmul+1,w,c
  6847  000588  E10A               	bnz	l4897
  6848  00058A  0427               	decf	?___wmul,w,c
  6849  00058C  B0D8               	btfsc	status,0,c
  6850  00058E  D007               	goto	l377
  6851  000590                     u5750:
  6852                           
  6853                           ;menu.c: 146: printErrorLCD(errMsgs.noFasteners);
  6854  000590  0E84               	movlw	low (_errMsgs+192)
  6855  000592  6E32               	movwf	printErrorLCD@string,c
  6856  000594  0EFD               	movlw	high (_errMsgs+192)
  6857  000596  6E33               	movwf	printErrorLCD@string+1,c
  6858  000598  EC9A  F013         	call	_printErrorLCD	;wreg free
  6859                           
  6860                           ;menu.c: 150: } else if (numB * numPressed > 2) {
  6861  00059C  D076               	goto	l386
  6862  00059E                     l377:
  6863  00059E                     l4897:
  6864  00059E  C0D7  F027         	movff	inputEntry@numB,___wmul@multiplier
  6865  0005A2  C0D8  F028         	movff	inputEntry@numB+1,___wmul@multiplier+1
  6866  0005A6  C0E1  F029         	movff	inputEntry@numPressed,___wmul@multiplicand
  6867  0005AA  C0E2  F02A         	movff	inputEntry@numPressed+1,___wmul@multiplicand+1
  6868  0005AE  ECAD  F013         	call	___wmul	;wreg free
  6869  0005B2  BE28               	btfsc	?___wmul+1,7,c
  6870  0005B4  D00D               	goto	l379
  6871  0005B6  5028               	movf	?___wmul+1,w,c
  6872  0005B8  E104               	bnz	u5760
  6873  0005BA  0E03               	movlw	3
  6874  0005BC  5C27               	subwf	?___wmul,w,c
  6875  0005BE  A0D8               	btfss	status,0,c
  6876  0005C0  D007               	goto	l379
  6877  0005C2                     u5760:
  6878                           
  6879                           ;menu.c: 151: printErrorLCD(errMsgs.tooManyBolts);
  6880  0005C2  0E04               	movlw	low (_errMsgs+64)
  6881  0005C4  6E32               	movwf	printErrorLCD@string,c
  6882  0005C6  0EFD               	movlw	high (_errMsgs+64)
  6883  0005C8  6E33               	movwf	printErrorLCD@string+1,c
  6884  0005CA  EC9A  F013         	call	_printErrorLCD	;wreg free
  6885                           
  6886                           ;menu.c: 152: } else if (numN * numPressed > 3) {
  6887  0005CE  D05D               	goto	l386
  6888  0005D0                     l379:
  6889  0005D0  C0D9  F027         	movff	inputEntry@numN,___wmul@multiplier
  6890  0005D4  C0DA  F028         	movff	inputEntry@numN+1,___wmul@multiplier+1
  6891  0005D8  C0E1  F029         	movff	inputEntry@numPressed,___wmul@multiplicand
  6892  0005DC  C0E2  F02A         	movff	inputEntry@numPressed+1,___wmul@multiplicand+1
  6893  0005E0  ECAD  F013         	call	___wmul	;wreg free
  6894  0005E4  BE28               	btfsc	?___wmul+1,7,c
  6895  0005E6  D00D               	goto	l381
  6896  0005E8  5028               	movf	?___wmul+1,w,c
  6897  0005EA  E104               	bnz	u5770
  6898  0005EC  0E04               	movlw	4
  6899  0005EE  5C27               	subwf	?___wmul,w,c
  6900  0005F0  A0D8               	btfss	status,0,c
  6901  0005F2  D007               	goto	l381
  6902  0005F4                     u5770:
  6903                           
  6904                           ;menu.c: 153: printErrorLCD(errMsgs.tooManyNuts);
  6905  0005F4  0E24               	movlw	low (_errMsgs+96)
  6906  0005F6  6E32               	movwf	printErrorLCD@string,c
  6907  0005F8  0EFD               	movlw	high (_errMsgs+96)
  6908  0005FA  6E33               	movwf	printErrorLCD@string+1,c
  6909  0005FC  EC9A  F013         	call	_printErrorLCD	;wreg free
  6910                           
  6911                           ;menu.c: 154: } else if (numS * numPressed > 2) {
  6912  000600  D044               	goto	l386
  6913  000602                     l381:
  6914  000602  C0DB  F027         	movff	inputEntry@numS,___wmul@multiplier
  6915  000606  C0DC  F028         	movff	inputEntry@numS+1,___wmul@multiplier+1
  6916  00060A  C0E1  F029         	movff	inputEntry@numPressed,___wmul@multiplicand
  6917  00060E  C0E2  F02A         	movff	inputEntry@numPressed+1,___wmul@multiplicand+1
  6918  000612  ECAD  F013         	call	___wmul	;wreg free
  6919  000616  BE28               	btfsc	?___wmul+1,7,c
  6920  000618  D00D               	goto	l383
  6921  00061A  5028               	movf	?___wmul+1,w,c
  6922  00061C  E104               	bnz	u5780
  6923  00061E  0E03               	movlw	3
  6924  000620  5C27               	subwf	?___wmul,w,c
  6925  000622  A0D8               	btfss	status,0,c
  6926  000624  D007               	goto	l383
  6927  000626                     u5780:
  6928                           
  6929                           ;menu.c: 155: printErrorLCD(errMsgs.tooManySpacers);
  6930  000626  0E64               	movlw	low (_errMsgs+160)
  6931  000628  6E32               	movwf	printErrorLCD@string,c
  6932  00062A  0EFD               	movlw	high (_errMsgs+160)
  6933  00062C  6E33               	movwf	printErrorLCD@string+1,c
  6934  00062E  EC9A  F013         	call	_printErrorLCD	;wreg free
  6935                           
  6936                           ;menu.c: 156: } else if (numW * numPressed > 4) {
  6937  000632  D02B               	goto	l386
  6938  000634                     l383:
  6939  000634  C0DD  F027         	movff	inputEntry@numW,___wmul@multiplier
  6940  000638  C0DE  F028         	movff	inputEntry@numW+1,___wmul@multiplier+1
  6941  00063C  C0E1  F029         	movff	inputEntry@numPressed,___wmul@multiplicand
  6942  000640  C0E2  F02A         	movff	inputEntry@numPressed+1,___wmul@multiplicand+1
  6943  000644  ECAD  F013         	call	___wmul	;wreg free
  6944  000648  BE28               	btfsc	?___wmul+1,7,c
  6945  00064A  D00D               	goto	l385
  6946  00064C  5028               	movf	?___wmul+1,w,c
  6947  00064E  E104               	bnz	u5790
  6948  000650  0E05               	movlw	5
  6949  000652  5C27               	subwf	?___wmul,w,c
  6950  000654  A0D8               	btfss	status,0,c
  6951  000656  D007               	goto	l385
  6952  000658                     u5790:
  6953                           
  6954                           ;menu.c: 157: printErrorLCD(errMsgs.tooManyWashers);
  6955  000658  0E44               	movlw	low (_errMsgs+128)
  6956  00065A  6E32               	movwf	printErrorLCD@string,c
  6957  00065C  0EFD               	movlw	high (_errMsgs+128)
  6958  00065E  6E33               	movwf	printErrorLCD@string+1,c
  6959  000660  EC9A  F013         	call	_printErrorLCD	;wreg free
  6960                           
  6961                           ;menu.c: 158: } else {
  6962  000664  D012               	goto	l386
  6963  000666                     l385:
  6964                           
  6965                           ;menu.c: 159: params.setMultiple[compartmentNum] = numPressed;
  6966  000666  90D8               	bcf	status,0,c
  6967  000668  0100               	movlb	0	; () banked
  6968  00066A  35E3               	rlcf	inputEntry@compartmentNum& (0+255),w,b
  6969  00066C  6ED9               	movwf	fsr2l,c
  6970  00066E  35E4               	rlcf	(inputEntry@compartmentNum+1)& (0+255),w,b
  6971  000670  6EDA               	movwf	fsr2h,c
  6972  000672  0EAD               	movlw	low (_params+10)
  6973  000674  26D9               	addwf	fsr2l,f,c
  6974  000676  0E01               	movlw	high (_params+10)
  6975  000678  22DA               	addwfc	fsr2h,f,c
  6976  00067A  C0E1  FFDE         	movff	inputEntry@numPressed,postinc2
  6977  00067E  C0E2  FFDD         	movff	inputEntry@numPressed+1,postdec2
  6978                           
  6979                           ; BSR set to: 0
  6980                           ;menu.c: 160: doneMultiples = 1;
  6981  000682  0E00               	movlw	0
  6982  000684  6FD2               	movwf	(inputEntry@doneMultiples+1)& (0+255),b
  6983  000686  0E01               	movlw	1
  6984  000688                     L6:
  6985  000688  6FD1               	movwf	inputEntry@doneMultiples& (0+255),b
  6986  00068A                     l386:
  6987                           
  6988                           ; BSR set to: 0
  6989                           
  6990                           ; BSR set to: 0
  6991                           
  6992                           ; BSR set to: 0
  6993                           
  6994                           ; BSR set to: 0
  6995                           
  6996                           ; BSR set to: 0
  6997                           
  6998                           ; BSR set to: 0
  6999                           
  7000                           ; BSR set to: 0
  7001  00068A  0100               	movlb	0	; () banked
  7002  00068C  51D1               	movf	inputEntry@doneMultiples& (0+255),w,b
  7003  00068E  11D2               	iorwf	(inputEntry@doneMultiples+1)& (0+255),w,b
  7004  000690  A4D8               	btfss	status,2,c
  7005  000692  D016               	goto	l388
  7006  000694  D6F6               	goto	l371
  7007  000696                     l338:
  7008                           
  7009                           ; BSR set to: 0
  7010                           ;menu.c: 164: params.toFill[compartmentNum] = NONE;
  7011                           
  7012                           ; BSR set to: 0
  7013  000696  0EA5               	movlw	low (_params+2)
  7014  000698  25E3               	addwf	inputEntry@compartmentNum& (0+255),w,b
  7015  00069A  6ED9               	movwf	fsr2l,c
  7016  00069C  0E01               	movlw	high (_params+2)
  7017  00069E  21E4               	addwfc	(inputEntry@compartmentNum+1)& (0+255),w,b
  7018  0006A0  6EDA               	movwf	fsr2h,c
  7019  0006A2  0E00               	movlw	0
  7020  0006A4  6EDF               	movwf	indf2,c
  7021                           
  7022                           ;menu.c: 165: params.setMultiple[compartmentNum] = 0;
  7023  0006A6  90D8               	bcf	status,0,c
  7024  0006A8  35E3               	rlcf	inputEntry@compartmentNum& (0+255),w,b
  7025  0006AA  6ED9               	movwf	fsr2l,c
  7026  0006AC  35E4               	rlcf	(inputEntry@compartmentNum+1)& (0+255),w,b
  7027  0006AE  6EDA               	movwf	fsr2h,c
  7028  0006B0  0EAD               	movlw	low (_params+10)
  7029  0006B2  26D9               	addwf	fsr2l,f,c
  7030  0006B4  0E01               	movlw	high (_params+10)
  7031  0006B6  22DA               	addwfc	fsr2h,f,c
  7032  0006B8  0E00               	movlw	0
  7033  0006BA  6EDE               	movwf	postinc2,c
  7034  0006BC  0E00               	movlw	0
  7035  0006BE  6EDD               	movwf	postdec2,c
  7036  0006C0                     l388:
  7037                           
  7038                           ; BSR set to: 0
  7039                           
  7040                           ; BSR set to: 0
  7041  0006C0  4BE3               	infsnz	inputEntry@compartmentNum& (0+255),f,b
  7042  0006C2  2BE4               	incf	(inputEntry@compartmentNum+1)& (0+255),f,b
  7043                           
  7044                           ; BSR set to: 0
  7045  0006C4  BFE4               	btfsc	(inputEntry@compartmentNum+1)& (0+255),7,b
  7046  0006C6  D556               	goto	l335
  7047  0006C8  51E4               	movf	(inputEntry@compartmentNum+1)& (0+255),w,b
  7048  0006CA  E104               	bnz	l4925
  7049  0006CC  0E08               	movlw	8
  7050  0006CE  5DE3               	subwf	inputEntry@compartmentNum& (0+255),w,b
  7051  0006D0  A0D8               	btfss	status,0,c
  7052  0006D2  D550               	goto	l335
  7053  0006D4                     u5810:
  7054  0006D4                     l4925:
  7055                           
  7056                           ; BSR set to: 0
  7057                           ;menu.c: 166: }
  7058                           ;menu.c: 167: }
  7059                           ;menu.c: 168: done = 1;
  7060  0006D4  0E00               	movlw	0
  7061  0006D6  6FCC               	movwf	(inputEntry@done+1)& (0+255),b
  7062  0006D8  0E01               	movlw	1
  7063  0006DA  6FCB               	movwf	inputEntry@done& (0+255),b
  7064                           
  7065                           ; BSR set to: 0
  7066                           ;menu.c: 169: I2C_Send(nanoAddr, "\1Done inputs\0");
  7067  0006DC  0EB1               	movlw	low STR_12
  7068  0006DE  6E2A               	movwf	I2C_Send@data,c
  7069  0006E0  0EFF               	movlw	high STR_12
  7070  0006E2  6E2B               	movwf	I2C_Send@data+1,c
  7071  0006E4  0EBD               	movlw	low _nanoAddr
  7072  0006E6  6EF6               	movwf	tblptrl,c
  7073  0006E8                     	if	1	;There is more than 1 active tblptr byte
  7074  0006E8  0EFC               	movlw	high _nanoAddr
  7075  0006EA  6EF7               	movwf	tblptrh,c
  7076  0006EC                     	endif
  7077  0006EC                     	if	1	;There are 3 active tblptr bytes
  7078  0006EC  0E00               	movlw	low (_nanoAddr shr (0+16))
  7079  0006EE  6EF8               	movwf	tblptru,c
  7080  0006F0                     	endif
  7081  0006F0  0008               	tblrd		*
  7082  0006F2  50F5               	movf	tablat,w,c
  7083  0006F4  EC30  F010         	call	_I2C_Send
  7084  0006F8                     l334:
  7085  0006F8  0100               	movlb	0	; () banked
  7086  0006FA  51CB               	movf	inputEntry@done& (0+255),w,b
  7087  0006FC  11CC               	iorwf	(inputEntry@done+1)& (0+255),w,b
  7088  0006FE  A4D8               	btfss	status,2,c
  7089  000700  0012               	return	
  7090  000702  D4BE               	goto	l329
  7091  000704                     __end_of_inputEntry:
  7092                           	opt stack 0
  7093                           tosu	equ	0xFFF
  7094                           tosh	equ	0xFFE
  7095                           tosl	equ	0xFFD
  7096                           pclath	equ	0xFFA
  7097                           tblptru	equ	0xFF8
  7098                           tblptrh	equ	0xFF7
  7099                           tblptrl	equ	0xFF6
  7100                           tablat	equ	0xFF5
  7101                           prodh	equ	0xFF4
  7102                           prodl	equ	0xFF3
  7103                           intcon	equ	0xFF2
  7104                           indf0	equ	0xFEF
  7105                           postinc0	equ	0xFEE
  7106                           fsr0h	equ	0xFEA
  7107                           fsr0l	equ	0xFE9
  7108                           wreg	equ	0xFE8
  7109                           postdec1	equ	0xFE5
  7110                           plusw1	equ	0xFE3
  7111                           fsr1l	equ	0xFE1
  7112                           indf2	equ	0xFDF
  7113                           postinc2	equ	0xFDE
  7114                           postdec2	equ	0xFDD
  7115                           plusw2	equ	0xFDB
  7116                           fsr2h	equ	0xFDA
  7117                           fsr2l	equ	0xFD9
  7118                           status	equ	0xFD8
  7119                           
  7120 ;; *************** function _strcpy *****************
  7121 ;; Defined at:
  7122 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
  7123 ;; Parameters:    Size  Location     Type
  7124 ;;  to              2   44[COMRAM] PTR unsigned char 
  7125 ;;		 -> inputEntry@fastenerString(32), 
  7126 ;;  from            2   46[COMRAM] PTR const unsigned char 
  7127 ;;		 -> inputEntryQuestions(132), 
  7128 ;; Auto vars:     Size  Location     Type
  7129 ;;  cp              2   48[COMRAM] PTR unsigned char 
  7130 ;;		 -> inputEntry@fastenerString(32), 
  7131 ;; Return value:  Size  Location     Type
  7132 ;;                  2   44[COMRAM] PTR unsigned char 
  7133 ;; Registers used:
  7134 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7135 ;; Tracked objects:
  7136 ;;		On entry : 0/0
  7137 ;;		On exit  : 0/0
  7138 ;;		Unchanged: 0/0
  7139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7140 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7141 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7143 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7144 ;;Total ram usage:        6 bytes
  7145 ;; Hardware stack levels used:    1
  7146 ;; Hardware stack levels required when called:    4
  7147 ;; This function calls:
  7148 ;;		Nothing
  7149 ;; This function is called by:
  7150 ;;		_inputEntry
  7151 ;; This function uses a non-reentrant model
  7152 ;;
  7153                           
  7154                           	psect	text14
  7155  0026AE                     __ptext14:
  7156                           	opt stack 0
  7157  0026AE                     _strcpy:
  7158                           	opt stack 24
  7159                           
  7160                           ; BSR set to: 0
  7161                           ;incstack = 0
  7162  0026AE  C02D  F031         	movff	strcpy@to,strcpy@cp
  7163  0026B2  C02E  F032         	movff	strcpy@to+1,strcpy@cp+1
  7164  0026B6  D004               	goto	l1251
  7165  0026B8  4A31               	infsnz	strcpy@cp,f,c
  7166  0026BA  2A32               	incf	strcpy@cp+1,f,c
  7167  0026BC  4A2F               	infsnz	strcpy@from,f,c
  7168  0026BE  2A30               	incf	strcpy@from+1,f,c
  7169  0026C0                     l1251:
  7170  0026C0  C02F  FFF6         	movff	strcpy@from,tblptrl
  7171  0026C4  C030  FFF7         	movff	strcpy@from+1,tblptrh
  7172  0026C8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7173  0026C8  6AF8               	clrf	tblptru,c
  7174  0026CA                     	endif
  7175  0026CA                     	if	0	;tblptru may be non-zero
  7176  0026CA                     	endif
  7177  0026CA  C031  FFD9         	movff	strcpy@cp,fsr2l
  7178  0026CE  C032  FFDA         	movff	strcpy@cp+1,fsr2h
  7179  0026D2  0008               	tblrd		*
  7180  0026D4  CFF5 FFDF          	movff	tablat,indf2
  7181  0026D8  50DF               	movf	indf2,w,c
  7182  0026DA  B4D8               	btfsc	status,2,c
  7183  0026DC  0012               	return	
  7184  0026DE  D7EC               	goto	l1252
  7185  0026E0                     __end_of_strcpy:
  7186                           	opt stack 0
  7187                           tosu	equ	0xFFF
  7188                           tosh	equ	0xFFE
  7189                           tosl	equ	0xFFD
  7190                           pclath	equ	0xFFA
  7191                           tblptru	equ	0xFF8
  7192                           tblptrh	equ	0xFF7
  7193                           tblptrl	equ	0xFF6
  7194                           tablat	equ	0xFF5
  7195                           prodh	equ	0xFF4
  7196                           prodl	equ	0xFF3
  7197                           intcon	equ	0xFF2
  7198                           indf0	equ	0xFEF
  7199                           postinc0	equ	0xFEE
  7200                           fsr0h	equ	0xFEA
  7201                           fsr0l	equ	0xFE9
  7202                           wreg	equ	0xFE8
  7203                           postdec1	equ	0xFE5
  7204                           plusw1	equ	0xFE3
  7205                           fsr1l	equ	0xFE1
  7206                           indf2	equ	0xFDF
  7207                           postinc2	equ	0xFDE
  7208                           postdec2	equ	0xFDD
  7209                           plusw2	equ	0xFDB
  7210                           fsr2h	equ	0xFDA
  7211                           fsr2l	equ	0xFD9
  7212                           status	equ	0xFD8
  7213                           
  7214 ;; *************** function _printErrorLCD *****************
  7215 ;; Defined at:
  7216 ;;		line 62 in file "helpers.c"
  7217 ;; Parameters:    Size  Location     Type
  7218 ;;  string          2   49[COMRAM] PTR unsigned char 
  7219 ;;		 -> errMsgs.noFasteners(32), errMsgs.tooManySpacers(32), errMsgs.tooManyWashers(32), errMsgs.tooManyNuts(32), 
  7220 ;;		 -> errMsgs.tooManyBolts(32), errMsgs.tooManyFasteners(32), errMsgs.badEntry(32), errMsgs(224), 
  7221 ;; Auto vars:     Size  Location     Type
  7222 ;;		None
  7223 ;; Return value:  Size  Location     Type
  7224 ;;                  1    wreg      void 
  7225 ;; Registers used:
  7226 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7227 ;; Tracked objects:
  7228 ;;		On entry : 0/0
  7229 ;;		On exit  : 0/0
  7230 ;;		Unchanged: 0/0
  7231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7232 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7234 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7235 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7236 ;;Total ram usage:        4 bytes
  7237 ;; Hardware stack levels used:    1
  7238 ;; Hardware stack levels required when called:    7
  7239 ;; This function calls:
  7240 ;;		_printStringLCD
  7241 ;; This function is called by:
  7242 ;;		_inputEntry
  7243 ;; This function uses a non-reentrant model
  7244 ;;
  7245                           
  7246                           	psect	text15
  7247  002734                     __ptext15:
  7248                           	opt stack 0
  7249  002734                     _printErrorLCD:
  7250                           	opt stack 21
  7251                           
  7252                           ;helpers.c: 63: printStringLCD(string);
  7253                           
  7254                           ;incstack = 0
  7255  002734  C032  F02D         	movff	printErrorLCD@string,printStringLCD@string
  7256  002738  C033  F02E         	movff	printErrorLCD@string+1,printStringLCD@string+1
  7257  00273C  ECD7  F00A         	call	_printStringLCD	;wreg free
  7258                           
  7259                           ;helpers.c: 64: _delay((unsigned long)((2000)*(40000000/4000.0)));
  7260  002740  0E66               	movlw	102
  7261  002742  0100               	movlb	0	; () banked
  7262  002744  6F8B               	movwf	(??_printErrorLCD+1)& (0+255),b
  7263  002746  0E76               	movlw	118
  7264  002748  6F8A               	movwf	??_printErrorLCD& (0+255),b
  7265  00274A  0EC1               	movlw	193
  7266  00274C                     u6167:
  7267  00274C  2EE8               	decfsz	wreg,f,c
  7268  00274E  D7FE               	bra	u6167
  7269  002750  2F8A               	decfsz	??_printErrorLCD& (0+255),f,b
  7270  002752  D7FC               	bra	u6167
  7271  002754  2F8B               	decfsz	(??_printErrorLCD+1)& (0+255),f,b
  7272  002756  D7FA               	bra	u6167
  7273  002758  0012               	return		;funcret
  7274  00275A                     __end_of_printErrorLCD:
  7275                           	opt stack 0
  7276                           tosu	equ	0xFFF
  7277                           tosh	equ	0xFFE
  7278                           tosl	equ	0xFFD
  7279                           pclath	equ	0xFFA
  7280                           tblptru	equ	0xFF8
  7281                           tblptrh	equ	0xFF7
  7282                           tblptrl	equ	0xFF6
  7283                           tablat	equ	0xFF5
  7284                           prodh	equ	0xFF4
  7285                           prodl	equ	0xFF3
  7286                           intcon	equ	0xFF2
  7287                           indf0	equ	0xFEF
  7288                           postinc0	equ	0xFEE
  7289                           fsr0h	equ	0xFEA
  7290                           fsr0l	equ	0xFE9
  7291                           wreg	equ	0xFE8
  7292                           postdec1	equ	0xFE5
  7293                           plusw1	equ	0xFE3
  7294                           fsr1l	equ	0xFE1
  7295                           indf2	equ	0xFDF
  7296                           postinc2	equ	0xFDE
  7297                           postdec2	equ	0xFDD
  7298                           plusw2	equ	0xFDB
  7299                           fsr2h	equ	0xFDA
  7300                           fsr2l	equ	0xFD9
  7301                           status	equ	0xFD8
  7302                           
  7303 ;; *************** function _lcd_set_cursor *****************
  7304 ;; Defined at:
  7305 ;;		line 81 in file "lcd.c"
  7306 ;; Parameters:    Size  Location     Type
  7307 ;;  x               1    wreg     unsigned char 
  7308 ;;  y               1   44[COMRAM] unsigned char 
  7309 ;; Auto vars:     Size  Location     Type
  7310 ;;  x               1   47[COMRAM] unsigned char 
  7311 ;;  i               1   46[COMRAM] unsigned char 
  7312 ;; Return value:  Size  Location     Type
  7313 ;;                  1    wreg      void 
  7314 ;; Registers used:
  7315 ;;		wreg, status,2, status,0, cstack
  7316 ;; Tracked objects:
  7317 ;;		On entry : 0/0
  7318 ;;		On exit  : 0/0
  7319 ;;		Unchanged: 0/0
  7320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7321 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7322 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7323 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7324 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7325 ;;Total ram usage:        4 bytes
  7326 ;; Hardware stack levels used:    1
  7327 ;; Hardware stack levels required when called:    7
  7328 ;; This function calls:
  7329 ;;		_lcdInst
  7330 ;;		_lcd_shift_cursor
  7331 ;; This function is called by:
  7332 ;;		_inputEntry
  7333 ;; This function uses a non-reentrant model
  7334 ;;
  7335                           
  7336                           	psect	text16
  7337  0025FA                     __ptext16:
  7338                           	opt stack 0
  7339  0025FA                     _lcd_set_cursor:
  7340                           	opt stack 21
  7341                           
  7342                           ;incstack = 0
  7343                           ;lcd_set_cursor@x stored from wreg
  7344  0025FA  6E30               	movwf	lcd_set_cursor@x,c
  7345                           
  7346                           ;lcd.c: 91: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  7347  0025FC  0E80               	movlw	128
  7348  0025FE  EC06  F014         	call	_lcdInst
  7349  002602  0E41               	movlw	65
  7350  002604  6E2E               	movwf	??_lcd_set_cursor& (0+255),c
  7351  002606  0EEE               	movlw	238
  7352  002608                     u6177:
  7353  002608  2EE8               	decfsz	wreg,f,c
  7354  00260A  D7FE               	bra	u6177
  7355  00260C  2E2E               	decfsz	??_lcd_set_cursor& (0+255),f,c
  7356  00260E  D7FC               	bra	u6177
  7357  002610  D000               	nop2	
  7358                           
  7359                           ;lcd.c: 92: for(unsigned char i = 0; i < y; i++){lcdInst(0xC0);;}
  7360  002612  0E00               	movlw	0
  7361  002614  6E2F               	movwf	lcd_set_cursor@i,c
  7362  002616  D004               	goto	l233
  7363  002618  0EC0               	movlw	192
  7364  00261A  EC06  F014         	call	_lcdInst
  7365  00261E  2A2F               	incf	lcd_set_cursor@i,f,c
  7366  002620                     l233:
  7367  002620  502D               	movf	lcd_set_cursor@y,w,c
  7368  002622  5C2F               	subwf	lcd_set_cursor@i,w,c
  7369  002624  A0D8               	btfss	status,0,c
  7370  002626  D7F8               	goto	l234
  7371                           
  7372                           ;lcd.c: 93: if(x > 0){
  7373  002628  5030               	movf	lcd_set_cursor@x,w,c
  7374  00262A  B4D8               	btfsc	status,2,c
  7375  00262C  0012               	return	
  7376                           
  7377                           ;lcd.c: 94: lcd_shift_cursor(x, 1);
  7378  00262E  0E01               	movlw	1
  7379  002630  6E2A               	movwf	lcd_shift_cursor@direction,c
  7380  002632  5030               	movf	lcd_set_cursor@x,w,c
  7381  002634  ECE3  F013         	call	_lcd_shift_cursor
  7382  002638  0012               	return	
  7383  00263A                     __end_of_lcd_set_cursor:
  7384                           	opt stack 0
  7385                           tosu	equ	0xFFF
  7386                           tosh	equ	0xFFE
  7387                           tosl	equ	0xFFD
  7388                           pclath	equ	0xFFA
  7389                           tblptru	equ	0xFF8
  7390                           tblptrh	equ	0xFF7
  7391                           tblptrl	equ	0xFF6
  7392                           tablat	equ	0xFF5
  7393                           prodh	equ	0xFF4
  7394                           prodl	equ	0xFF3
  7395                           intcon	equ	0xFF2
  7396                           indf0	equ	0xFEF
  7397                           postinc0	equ	0xFEE
  7398                           fsr0h	equ	0xFEA
  7399                           fsr0l	equ	0xFE9
  7400                           wreg	equ	0xFE8
  7401                           postdec1	equ	0xFE5
  7402                           plusw1	equ	0xFE3
  7403                           fsr1l	equ	0xFE1
  7404                           indf2	equ	0xFDF
  7405                           postinc2	equ	0xFDE
  7406                           postdec2	equ	0xFDD
  7407                           plusw2	equ	0xFDB
  7408                           fsr2h	equ	0xFDA
  7409                           fsr2l	equ	0xFD9
  7410                           status	equ	0xFD8
  7411                           
  7412 ;; *************** function _lcd_shift_cursor *****************
  7413 ;; Defined at:
  7414 ;;		line 98 in file "lcd.c"
  7415 ;; Parameters:    Size  Location     Type
  7416 ;;  numChars        1    wreg     unsigned char 
  7417 ;;  direction       1   41[COMRAM] unsigned char 
  7418 ;; Auto vars:     Size  Location     Type
  7419 ;;  numChars        1   42[COMRAM] unsigned char 
  7420 ;;  n               1   43[COMRAM] unsigned char 
  7421 ;; Return value:  Size  Location     Type
  7422 ;;                  1    wreg      void 
  7423 ;; Registers used:
  7424 ;;		wreg, status,2, status,0, cstack
  7425 ;; Tracked objects:
  7426 ;;		On entry : 0/0
  7427 ;;		On exit  : 0/0
  7428 ;;		Unchanged: 0/0
  7429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7430 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7431 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7433 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7434 ;;Total ram usage:        3 bytes
  7435 ;; Hardware stack levels used:    1
  7436 ;; Hardware stack levels required when called:    6
  7437 ;; This function calls:
  7438 ;;		_lcdInst
  7439 ;; This function is called by:
  7440 ;;		_lcd_set_cursor
  7441 ;; This function uses a non-reentrant model
  7442 ;;
  7443                           
  7444                           	psect	text17
  7445  0027C6                     __ptext17:
  7446                           	opt stack 0
  7447  0027C6                     _lcd_shift_cursor:
  7448                           	opt stack 21
  7449                           
  7450                           ;incstack = 0
  7451                           ;lcd_shift_cursor@numChars stored from wreg
  7452  0027C6  6E2B               	movwf	lcd_shift_cursor@numChars,c
  7453                           
  7454                           ;lcd.c: 110: for(unsigned char n = numChars; n > 0; n--){
  7455  0027C8  C02B  F02C         	movff	lcd_shift_cursor@numChars,lcd_shift_cursor@n
  7456  0027CC                     l4151:
  7457  0027CC  502C               	movf	lcd_shift_cursor@n,w,c
  7458  0027CE  B4D8               	btfsc	status,2,c
  7459  0027D0  0012               	return	
  7460                           
  7461                           ;lcd.c: 111: lcdInst((unsigned char)(0x10 | (direction << 2)));
  7462  0027D2  442A               	rlncf	lcd_shift_cursor@direction,w,c
  7463  0027D4  46E8               	rlncf	wreg,f,c
  7464  0027D6  0BFC               	andlw	252
  7465  0027D8  0910               	iorlw	16
  7466  0027DA  EC06  F014         	call	_lcdInst
  7467  0027DE  062C               	decf	lcd_shift_cursor@n,f,c
  7468  0027E0  D7F5               	goto	l4151
  7469  0027E2                     __end_of_lcd_shift_cursor:
  7470                           	opt stack 0
  7471                           tosu	equ	0xFFF
  7472                           tosh	equ	0xFFE
  7473                           tosl	equ	0xFFD
  7474                           pclath	equ	0xFFA
  7475                           tblptru	equ	0xFF8
  7476                           tblptrh	equ	0xFF7
  7477                           tblptrl	equ	0xFF6
  7478                           tablat	equ	0xFF5
  7479                           prodh	equ	0xFF4
  7480                           prodl	equ	0xFF3
  7481                           intcon	equ	0xFF2
  7482                           indf0	equ	0xFEF
  7483                           postinc0	equ	0xFEE
  7484                           fsr0h	equ	0xFEA
  7485                           fsr0l	equ	0xFE9
  7486                           wreg	equ	0xFE8
  7487                           postdec1	equ	0xFE5
  7488                           plusw1	equ	0xFE3
  7489                           fsr1l	equ	0xFE1
  7490                           indf2	equ	0xFDF
  7491                           postinc2	equ	0xFDE
  7492                           postdec2	equ	0xFDD
  7493                           plusw2	equ	0xFDB
  7494                           fsr2h	equ	0xFDA
  7495                           fsr2l	equ	0xFD9
  7496                           status	equ	0xFD8
  7497                           
  7498 ;; *************** function _hibernate *****************
  7499 ;; Defined at:
  7500 ;;		line 11 in file "menu.c"
  7501 ;; Parameters:    Size  Location     Type
  7502 ;;		None
  7503 ;; Auto vars:     Size  Location     Type
  7504 ;;  pressed         2   49[COMRAM] int 
  7505 ;; Return value:  Size  Location     Type
  7506 ;;                  1    wreg      void 
  7507 ;; Registers used:
  7508 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7509 ;; Tracked objects:
  7510 ;;		On entry : 0/0
  7511 ;;		On exit  : 0/0
  7512 ;;		Unchanged: 0/0
  7513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7515 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7516 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7517 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7518 ;;Total ram usage:        6 bytes
  7519 ;; Hardware stack levels used:    1
  7520 ;; Hardware stack levels required when called:    7
  7521 ;; This function calls:
  7522 ;;		_pollKeypad
  7523 ;;		_printStringLCD
  7524 ;; This function is called by:
  7525 ;;		_main
  7526 ;;		_mainMenu
  7527 ;; This function uses a non-reentrant model
  7528 ;;
  7529                           
  7530                           	psect	text18
  7531  00263A                     __ptext18:
  7532                           	opt stack 0
  7533  00263A                     _hibernate:
  7534                           	opt stack 22
  7535                           
  7536                           ;menu.c: 12: printStringLCD("Press 1 to begin");
  7537                           
  7538                           ;incstack = 0
  7539  00263A  0E3F               	movlw	low STR_9
  7540  00263C  6E2D               	movwf	printStringLCD@string,c
  7541  00263E  0EFF               	movlw	high STR_9
  7542  002640  6E2E               	movwf	printStringLCD@string+1,c
  7543  002642  ECD7  F00A         	call	_printStringLCD	;wreg free
  7544  002646                     
  7545                           ;menu.c: 15: pressed = pollKeypad();
  7546  002646  EC70  F013         	call	_pollKeypad	;wreg free
  7547  00264A  0100               	movlb	0	; () banked
  7548  00264C  6F8A               	movwf	??_hibernate& (0+255),b
  7549  00264E  518A               	movf	??_hibernate& (0+255),w,b
  7550  002650  6E32               	movwf	hibernate@pressed,c
  7551  002652  6A33               	clrf	hibernate@pressed+1,c
  7552                           
  7553                           ; BSR set to: 0
  7554                           ;menu.c: 16: if (pressed - 48 == 1) {
  7555  002654  0ED0               	movlw	208
  7556  002656  6F8A               	movwf	??_hibernate& (0+255),b
  7557  002658  0EFF               	movlw	255
  7558  00265A  6F8B               	movwf	(??_hibernate+1)& (0+255),b
  7559  00265C  C032  F08C         	movff	hibernate@pressed,??_hibernate+2
  7560  002660  C033  F08D         	movff	hibernate@pressed+1,??_hibernate+3
  7561  002664  518A               	movf	??_hibernate& (0+255),w,b
  7562  002666  278C               	addwf	(??_hibernate+2)& (0+255),f,b
  7563  002668  518B               	movf	(??_hibernate+1)& (0+255),w,b
  7564  00266A  238D               	addwfc	(??_hibernate+3)& (0+255),f,b
  7565  00266C  058C               	decf	(??_hibernate+2)& (0+255),w,b
  7566  00266E  118D               	iorwf	(??_hibernate+3)& (0+255),w,b
  7567  002670  B4D8               	btfsc	status,2,c
  7568  002672  0012               	return	
  7569  002674  D7E8               	goto	l312
  7570  002676                     __end_of_hibernate:
  7571                           	opt stack 0
  7572                           tosu	equ	0xFFF
  7573                           tosh	equ	0xFFE
  7574                           tosl	equ	0xFFD
  7575                           pclath	equ	0xFFA
  7576                           tblptru	equ	0xFF8
  7577                           tblptrh	equ	0xFF7
  7578                           tblptrl	equ	0xFF6
  7579                           tablat	equ	0xFF5
  7580                           prodh	equ	0xFF4
  7581                           prodl	equ	0xFF3
  7582                           intcon	equ	0xFF2
  7583                           indf0	equ	0xFEF
  7584                           postinc0	equ	0xFEE
  7585                           fsr0h	equ	0xFEA
  7586                           fsr0l	equ	0xFE9
  7587                           wreg	equ	0xFE8
  7588                           postdec1	equ	0xFE5
  7589                           plusw1	equ	0xFE3
  7590                           fsr1l	equ	0xFE1
  7591                           indf2	equ	0xFDF
  7592                           postinc2	equ	0xFDE
  7593                           postdec2	equ	0xFDD
  7594                           plusw2	equ	0xFDB
  7595                           fsr2h	equ	0xFDA
  7596                           fsr2l	equ	0xFD9
  7597                           status	equ	0xFD8
  7598                           
  7599 ;; *************** function _printStringLCD *****************
  7600 ;; Defined at:
  7601 ;;		line 7 in file "helpers.c"
  7602 ;; Parameters:    Size  Location     Type
  7603 ;;  string          2   44[COMRAM] PTR unsigned char 
  7604 ;;		 -> STR_13(30), inputEntry@fastenerString(32), inputEntryQuestions(132), STR_10(26), 
  7605 ;;		 -> STR_9(17), errMsgs.noFasteners(32), errMsgs.tooManySpacers(32), errMsgs.tooManyWashers(32), 
  7606 ;;		 -> errMsgs.tooManyNuts(32), errMsgs.tooManyBolts(32), errMsgs.tooManyFasteners(32), errMsgs.badEntry(32), 
  7607 ;;		 -> errMsgs(224), 
  7608 ;; Auto vars:     Size  Location     Type
  7609 ;;  i               2    8[BANK0 ] int 
  7610 ;;  newlineCharI    2    6[BANK0 ] int 
  7611 ;;  newlineIndex    2    4[BANK0 ] int 
  7612 ;;  spaceIndex      2    2[BANK0 ] int 
  7613 ;;  j               2    0[BANK0 ] int 
  7614 ;; Return value:  Size  Location     Type
  7615 ;;                  1    wreg      void 
  7616 ;; Registers used:
  7617 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7618 ;; Tracked objects:
  7619 ;;		On entry : 0/0
  7620 ;;		On exit  : 0/0
  7621 ;;		Unchanged: 0/0
  7622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7623 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7624 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7625 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7626 ;;      Totals:         5      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7627 ;;Total ram usage:       15 bytes
  7628 ;; Hardware stack levels used:    1
  7629 ;; Hardware stack levels required when called:    6
  7630 ;; This function calls:
  7631 ;;		_lcdInst
  7632 ;;		_putch
  7633 ;; This function is called by:
  7634 ;;		_hibernate
  7635 ;;		_viewLogs
  7636 ;;		_inputEntry
  7637 ;;		_mainMenu
  7638 ;;		_printErrorLCD
  7639 ;; This function uses a non-reentrant model
  7640 ;;
  7641                           
  7642                           	psect	text19
  7643  0015AE                     __ptext19:
  7644                           	opt stack 0
  7645  0015AE                     _printStringLCD:
  7646                           	opt stack 22
  7647                           
  7648                           ;helpers.c: 12: int i;
  7649                           ;helpers.c: 13: int j = 1;
  7650                           
  7651                           ; BSR set to: 0
  7652                           ;incstack = 0
  7653  0015AE  0E00               	movlw	0
  7654  0015B0  0100               	movlb	0	; () banked
  7655  0015B2  6F81               	movwf	(printStringLCD@j+1)& (0+255),b
  7656  0015B4  0E01               	movlw	1
  7657  0015B6  6F80               	movwf	printStringLCD@j& (0+255),b
  7658                           
  7659                           ;helpers.c: 14: int newlineIndex = 16;
  7660  0015B8  0E00               	movlw	0
  7661  0015BA  6F85               	movwf	(printStringLCD@newlineIndex+1)& (0+255),b
  7662  0015BC  0E10               	movlw	16
  7663  0015BE  6F84               	movwf	printStringLCD@newlineIndex& (0+255),b
  7664                           
  7665                           ; BSR set to: 0
  7666                           ;helpers.c: 15: int newlineCharIndex = -1;
  7667  0015C0  6986               	setf	printStringLCD@newlineCharIndex& (0+255),b
  7668  0015C2  6987               	setf	(printStringLCD@newlineCharIndex+1)& (0+255),b
  7669                           
  7670                           ;helpers.c: 16: int spaceIndex = 0;
  7671  0015C4  0E00               	movlw	0
  7672  0015C6  6F83               	movwf	(printStringLCD@spaceIndex+1)& (0+255),b
  7673  0015C8  0E00               	movlw	0
  7674  0015CA  6F82               	movwf	printStringLCD@spaceIndex& (0+255),b
  7675                           
  7676                           ; BSR set to: 0
  7677                           ;helpers.c: 18: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  7678  0015CC  0E01               	movlw	1
  7679  0015CE  EC06  F014         	call	_lcdInst
  7680  0015D2  0EC3               	movlw	195
  7681  0015D4  6E2F               	movwf	??_printStringLCD& (0+255),c
  7682  0015D6  0ECD               	movlw	205
  7683  0015D8                     u6187:
  7684  0015D8  2EE8               	decfsz	wreg,f,c
  7685  0015DA  D7FE               	bra	u6187
  7686  0015DC  2E2F               	decfsz	??_printStringLCD& (0+255),f,c
  7687  0015DE  D7FC               	bra	u6187
  7688  0015E0  F000               	nop	
  7689                           
  7690                           ;helpers.c: 19: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  7691  0015E2  0E80               	movlw	128
  7692  0015E4  EC06  F014         	call	_lcdInst
  7693  0015E8  0E41               	movlw	65
  7694  0015EA  6E2F               	movwf	??_printStringLCD& (0+255),c
  7695  0015EC  0EEE               	movlw	238
  7696  0015EE                     u6197:
  7697  0015EE  2EE8               	decfsz	wreg,f,c
  7698  0015F0  D7FE               	bra	u6197
  7699  0015F2  2E2F               	decfsz	??_printStringLCD& (0+255),f,c
  7700  0015F4  D7FC               	bra	u6197
  7701  0015F6  D000               	nop2	
  7702                           
  7703                           ;helpers.c: 22: for (i = 0; i < 17; i++) {
  7704  0015F8  0E00               	movlw	0
  7705  0015FA  0100               	movlb	0	; () banked
  7706  0015FC  6F89               	movwf	(printStringLCD@i+1)& (0+255),b
  7707  0015FE  0E00               	movlw	0
  7708  001600  6F88               	movwf	printStringLCD@i& (0+255),b
  7709                           
  7710                           ; BSR set to: 0
  7711  001602  BF89               	btfsc	(printStringLCD@i+1)& (0+255),7,b
  7712  001604  D008               	goto	l447
  7713  001606  5189               	movf	(printStringLCD@i+1)& (0+255),w,b
  7714  001608  E105               	bnz	u4460
  7715  00160A  0E11               	movlw	17
  7716  00160C  5D88               	subwf	printStringLCD@i& (0+255),w,b
  7717  00160E  B0D8               	btfsc	status,0,c
  7718  001610  D08D               	goto	u4570
  7719  001612  D001               	goto	l447
  7720  001614                     u4460:
  7721                           
  7722                           ; BSR set to: 0
  7723  001614  D08B               	goto	u4570
  7724  001616                     l447:
  7725                           
  7726                           ; BSR set to: 0
  7727                           ;helpers.c: 23: if (string[i] == 0) break;
  7728                           
  7729                           ; BSR set to: 0
  7730  001616  5188               	movf	printStringLCD@i& (0+255),w,b
  7731  001618  242D               	addwf	printStringLCD@string,w,c
  7732  00161A  6E2F               	movwf	??_printStringLCD& (0+255),c
  7733  00161C  5189               	movf	(printStringLCD@i+1)& (0+255),w,b
  7734  00161E  202E               	addwfc	printStringLCD@string+1,w,c
  7735  001620  6E30               	movwf	(??_printStringLCD+1)& (0+255),c
  7736  001622  C02F  FFF6         	movff	??_printStringLCD,tblptrl
  7737  001626  C030  FFF7         	movff	??_printStringLCD+1,tblptrh
  7738  00162A  0E00               	movlw	low (__mediumconst shr (0+16))
  7739  00162C  6EF8               	movwf	tblptru,c
  7740  00162E  0E0F               	movlw	(high __ramtop+-1)
  7741  001630  64F7               	cpfsgt	tblptrh,c
  7742  001632  D003               	bra	u4477
  7743  001634  0008               	tblrd		*
  7744  001636  50F5               	movf	tablat,w,c
  7745  001638  D005               	bra	u4470
  7746  00163A                     u4477:
  7747  00163A  CFF6 FFE9          	movff	tblptrl,fsr0l
  7748  00163E  CFF7 FFEA          	movff	tblptrh,fsr0h
  7749  001642  50EF               	movf	indf0,w,c
  7750  001644                     u4470:
  7751  001644  0900               	iorlw	0
  7752  001646  B4D8               	btfsc	status,2,c
  7753  001648  D071               	goto	u4570
  7754                           
  7755                           ;helpers.c: 24: if (string[i] == 32) {
  7756  00164A  0100               	movlb	0	; () banked
  7757  00164C  5188               	movf	printStringLCD@i& (0+255),w,b
  7758  00164E  242D               	addwf	printStringLCD@string,w,c
  7759  001650  6E2F               	movwf	??_printStringLCD& (0+255),c
  7760  001652  5189               	movf	(printStringLCD@i+1)& (0+255),w,b
  7761  001654  202E               	addwfc	printStringLCD@string+1,w,c
  7762  001656  6E30               	movwf	(??_printStringLCD+1)& (0+255),c
  7763  001658  C02F  FFF6         	movff	??_printStringLCD,tblptrl
  7764  00165C  C030  FFF7         	movff	??_printStringLCD+1,tblptrh
  7765  001660  0E00               	movlw	low (__mediumconst shr (0+16))
  7766  001662  6EF8               	movwf	tblptru,c
  7767  001664  0E0F               	movlw	(high __ramtop+-1)
  7768  001666  64F7               	cpfsgt	tblptrh,c
  7769  001668  D003               	bra	u4497
  7770  00166A  0008               	tblrd		*
  7771  00166C  50F5               	movf	tablat,w,c
  7772  00166E  D005               	bra	u4490
  7773  001670                     u4497:
  7774  001670  CFF6 FFE9          	movff	tblptrl,fsr0l
  7775  001674  CFF7 FFEA          	movff	tblptrh,fsr0h
  7776  001678  50EF               	movf	indf0,w,c
  7777  00167A                     u4490:
  7778  00167A  0A20               	xorlw	32
  7779  00167C  A4D8               	btfss	status,2,c
  7780  00167E  D004               	goto	l450
  7781                           
  7782                           ;helpers.c: 25: spaceIndex = i;
  7783  001680  C088  F082         	movff	printStringLCD@i,printStringLCD@spaceIndex
  7784  001684  C089  F083         	movff	printStringLCD@i+1,printStringLCD@spaceIndex+1
  7785  001688                     l450:
  7786                           
  7787                           ;helpers.c: 26: }
  7788                           ;helpers.c: 28: if (string[i] == 10) {
  7789  001688  0100               	movlb	0	; () banked
  7790  00168A  5188               	movf	printStringLCD@i& (0+255),w,b
  7791  00168C  242D               	addwf	printStringLCD@string,w,c
  7792  00168E  6E2F               	movwf	??_printStringLCD& (0+255),c
  7793  001690  5189               	movf	(printStringLCD@i+1)& (0+255),w,b
  7794  001692  202E               	addwfc	printStringLCD@string+1,w,c
  7795  001694  6E30               	movwf	(??_printStringLCD+1)& (0+255),c
  7796  001696  C02F  FFF6         	movff	??_printStringLCD,tblptrl
  7797  00169A  C030  FFF7         	movff	??_printStringLCD+1,tblptrh
  7798  00169E  0E00               	movlw	low (__mediumconst shr (0+16))
  7799  0016A0  6EF8               	movwf	tblptru,c
  7800  0016A2  0E0F               	movlw	(high __ramtop+-1)
  7801  0016A4  64F7               	cpfsgt	tblptrh,c
  7802  0016A6  D003               	bra	u4517
  7803  0016A8  0008               	tblrd		*
  7804  0016AA  50F5               	movf	tablat,w,c
  7805  0016AC  D005               	bra	u4510
  7806  0016AE                     u4517:
  7807  0016AE  CFF6 FFE9          	movff	tblptrl,fsr0l
  7808  0016B2  CFF7 FFEA          	movff	tblptrh,fsr0h
  7809  0016B6  50EF               	movf	indf0,w,c
  7810  0016B8                     u4510:
  7811  0016B8  0A0A               	xorlw	10
  7812  0016BA  A4D8               	btfss	status,2,c
  7813  0016BC  D008               	goto	l451
  7814                           
  7815                           ;helpers.c: 29: newlineCharIndex = i;
  7816  0016BE  C088  F086         	movff	printStringLCD@i,printStringLCD@newlineCharIndex
  7817  0016C2  C089  F087         	movff	printStringLCD@i+1,printStringLCD@newlineCharIndex+1
  7818                           
  7819                           ;helpers.c: 30: newlineIndex = newlineCharIndex;
  7820  0016C6  C086  F084         	movff	printStringLCD@newlineCharIndex,printStringLCD@newlineIndex
  7821  0016CA  C087  F085         	movff	printStringLCD@newlineCharIndex+1,printStringLCD@newlineIndex+1
  7822  0016CE                     l451:
  7823                           
  7824                           ;helpers.c: 31: }
  7825                           ;helpers.c: 34: if (i == 16 && string[i] != 32 && newlineCharIndex < 0) {
  7826  0016CE  0E10               	movlw	16
  7827  0016D0  0100               	movlb	0	; () banked
  7828  0016D2  1988               	xorwf	printStringLCD@i& (0+255),w,b
  7829  0016D4  1189               	iorwf	(printStringLCD@i+1)& (0+255),w,b
  7830  0016D6  A4D8               	btfss	status,2,c
  7831  0016D8  D021               	goto	l452
  7832                           
  7833                           ; BSR set to: 0
  7834  0016DA  5188               	movf	printStringLCD@i& (0+255),w,b
  7835  0016DC  242D               	addwf	printStringLCD@string,w,c
  7836  0016DE  6E2F               	movwf	??_printStringLCD& (0+255),c
  7837  0016E0  5189               	movf	(printStringLCD@i+1)& (0+255),w,b
  7838  0016E2  202E               	addwfc	printStringLCD@string+1,w,c
  7839  0016E4  6E30               	movwf	(??_printStringLCD+1)& (0+255),c
  7840  0016E6  C02F  FFF6         	movff	??_printStringLCD,tblptrl
  7841  0016EA  C030  FFF7         	movff	??_printStringLCD+1,tblptrh
  7842  0016EE  0E00               	movlw	low (__mediumconst shr (0+16))
  7843  0016F0  6EF8               	movwf	tblptru,c
  7844  0016F2  0E0F               	movlw	(high __ramtop+-1)
  7845  0016F4  64F7               	cpfsgt	tblptrh,c
  7846  0016F6  D003               	bra	u4547
  7847  0016F8  0008               	tblrd		*
  7848  0016FA  50F5               	movf	tablat,w,c
  7849  0016FC  D005               	bra	u4540
  7850  0016FE                     u4547:
  7851  0016FE  CFF6 FFE9          	movff	tblptrl,fsr0l
  7852  001702  CFF7 FFEA          	movff	tblptrh,fsr0h
  7853  001706  50EF               	movf	indf0,w,c
  7854  001708                     u4540:
  7855  001708  0A20               	xorlw	32
  7856  00170A  B4D8               	btfsc	status,2,c
  7857  00170C  D007               	goto	l452
  7858  00170E  0100               	movlb	0	; () banked
  7859  001710  AF87               	btfss	(printStringLCD@newlineCharIndex+1)& (0+255),7,b
  7860  001712  D004               	goto	l452
  7861                           
  7862                           ; BSR set to: 0
  7863                           ;helpers.c: 35: newlineIndex = spaceIndex;
  7864  001714  C082  F084         	movff	printStringLCD@spaceIndex,printStringLCD@newlineIndex
  7865  001718  C083  F085         	movff	printStringLCD@spaceIndex+1,printStringLCD@newlineIndex+1
  7866  00171C                     l452:
  7867                           
  7868                           ; BSR set to: 0
  7869  00171C  0100               	movlb	0	; () banked
  7870  00171E  4B88               	infsnz	printStringLCD@i& (0+255),f,b
  7871  001720  2B89               	incf	(printStringLCD@i+1)& (0+255),f,b
  7872                           
  7873                           ; BSR set to: 0
  7874  001722  BF89               	btfsc	(printStringLCD@i+1)& (0+255),7,b
  7875  001724  D778               	goto	l447
  7876  001726  5189               	movf	(printStringLCD@i+1)& (0+255),w,b
  7877  001728  E101               	bnz	l4201
  7878  00172A  D76F               	goto	L7
  7879  00172C                     u4570:
  7880  00172C                     l4201:
  7881                           
  7882                           ;helpers.c: 36: }
  7883                           ;helpers.c: 37: }
  7884                           ;helpers.c: 40: for (i = 0; i < 32; i++) {
  7885  00172C  0E00               	movlw	0
  7886  00172E  0100               	movlb	0	; () banked
  7887  001730  6F89               	movwf	(printStringLCD@i+1)& (0+255),b
  7888  001732  0E00               	movlw	0
  7889  001734  6F88               	movwf	printStringLCD@i& (0+255),b
  7890                           
  7891                           ; BSR set to: 0
  7892  001736  BF89               	btfsc	(printStringLCD@i+1)& (0+255),7,b
  7893  001738  D008               	goto	l453
  7894  00173A  5189               	movf	(printStringLCD@i+1)& (0+255),w,b
  7895  00173C  E105               	bnz	u4580
  7896  00173E  0E20               	movlw	32
  7897  001740  5D88               	subwf	printStringLCD@i& (0+255),w,b
  7898  001742  B0D8               	btfsc	status,0,c
  7899  001744  0012               	return	
  7900  001746  D001               	goto	l453
  7901  001748                     u4580:
  7902                           
  7903                           ; BSR set to: 0
  7904  001748  0012               	return	
  7905  00174A                     l453:
  7906                           
  7907                           ; BSR set to: 0
  7908                           ;helpers.c: 41: if (string[i] == 0) break;
  7909                           
  7910                           ; BSR set to: 0
  7911  00174A  5188               	movf	printStringLCD@i& (0+255),w,b
  7912  00174C  242D               	addwf	printStringLCD@string,w,c
  7913  00174E  6E2F               	movwf	??_printStringLCD& (0+255),c
  7914  001750  5189               	movf	(printStringLCD@i+1)& (0+255),w,b
  7915  001752  202E               	addwfc	printStringLCD@string+1,w,c
  7916  001754  6E30               	movwf	(??_printStringLCD+1)& (0+255),c
  7917  001756  C02F  FFF6         	movff	??_printStringLCD,tblptrl
  7918  00175A  C030  FFF7         	movff	??_printStringLCD+1,tblptrh
  7919  00175E  0E00               	movlw	low (__mediumconst shr (0+16))
  7920  001760  6EF8               	movwf	tblptru,c
  7921  001762  0E0F               	movlw	(high __ramtop+-1)
  7922  001764  64F7               	cpfsgt	tblptrh,c
  7923  001766  D003               	bra	u4597
  7924  001768  0008               	tblrd		*
  7925  00176A  50F5               	movf	tablat,w,c
  7926  00176C  D005               	bra	u4590
  7927  00176E                     u4597:
  7928  00176E  CFF6 FFE9          	movff	tblptrl,fsr0l
  7929  001772  CFF7 FFEA          	movff	tblptrh,fsr0h
  7930  001776  50EF               	movf	indf0,w,c
  7931  001778                     u4590:
  7932  001778  0900               	iorlw	0
  7933  00177A  B4D8               	btfsc	status,2,c
  7934  00177C  0012               	return	
  7935                           
  7936                           ;helpers.c: 52: if (i == newlineIndex && j < LCD_SIZE_VERT) {
  7937  00177E  0100               	movlb	0	; () banked
  7938  001780  5184               	movf	printStringLCD@newlineIndex& (0+255),w,b
  7939  001782  1988               	xorwf	printStringLCD@i& (0+255),w,b
  7940  001784  E153               	bnz	l4223
  7941  001786  5185               	movf	(printStringLCD@newlineIndex+1)& (0+255),w,b
  7942  001788  1989               	xorwf	(printStringLCD@i+1)& (0+255),w,b
  7943  00178A  A4D8               	btfss	status,2,c
  7944  00178C  D04F               	goto	l457
  7945                           
  7946                           ; BSR set to: 0
  7947  00178E  0EC0               	movlw	low _LCD_SIZE_VERT
  7948  001790  6EF6               	movwf	tblptrl,c
  7949  001792                     	if	1	;There is more than 1 active tblptr byte
  7950  001792  0EFC               	movlw	high _LCD_SIZE_VERT
  7951  001794  6EF7               	movwf	tblptrh,c
  7952  001796                     	endif
  7953  001796                     	if	1	;There are 3 active tblptr bytes
  7954  001796  0E00               	movlw	low (_LCD_SIZE_VERT shr (0+16))
  7955  001798  6EF8               	movwf	tblptru,c
  7956  00179A                     	endif
  7957  00179A  0008               	tblrd		*
  7958  00179C  50F5               	movf	tablat,w,c
  7959  00179E  6E2F               	movwf	??_printStringLCD& (0+255),c
  7960  0017A0  6A30               	clrf	(??_printStringLCD+1)& (0+255),c
  7961  0017A2  502F               	movf	??_printStringLCD,w,c
  7962  0017A4  5D80               	subwf	printStringLCD@j& (0+255),w,b
  7963  0017A6  5181               	movf	(printStringLCD@j+1)& (0+255),w,b
  7964  0017A8  0A80               	xorlw	128
  7965  0017AA  6E31               	movwf	(??_printStringLCD+2)& (0+255),c
  7966  0017AC  5030               	movf	??_printStringLCD+1,w,c
  7967  0017AE  0A80               	xorlw	128
  7968  0017B0  5831               	subwfb	(??_printStringLCD+2)& (0+255),w,c
  7969  0017B2  B0D8               	btfsc	status,0,c
  7970  0017B4  D03B               	goto	l457
  7971                           
  7972                           ; BSR set to: 0
  7973                           ;helpers.c: 53: j++;
  7974  0017B6  4B80               	infsnz	printStringLCD@j& (0+255),f,b
  7975  0017B8  2B81               	incf	(printStringLCD@j+1)& (0+255),f,b
  7976                           
  7977                           ; BSR set to: 0
  7978                           ;helpers.c: 54: lcdInst(0xC0);;
  7979  0017BA  0EC0               	movlw	192
  7980  0017BC  EC06  F014         	call	_lcdInst
  7981                           
  7982                           ;helpers.c: 55: if (string[i] == 32 || string[i] == 10) continue;
  7983  0017C0  0100               	movlb	0	; () banked
  7984  0017C2  5188               	movf	printStringLCD@i& (0+255),w,b
  7985  0017C4  242D               	addwf	printStringLCD@string,w,c
  7986  0017C6  6E2F               	movwf	??_printStringLCD& (0+255),c
  7987  0017C8  5189               	movf	(printStringLCD@i+1)& (0+255),w,b
  7988  0017CA  202E               	addwfc	printStringLCD@string+1,w,c
  7989  0017CC  6E30               	movwf	(??_printStringLCD+1)& (0+255),c
  7990  0017CE  C02F  FFF6         	movff	??_printStringLCD,tblptrl
  7991  0017D2  C030  FFF7         	movff	??_printStringLCD+1,tblptrh
  7992  0017D6  0E00               	movlw	low (__mediumconst shr (0+16))
  7993  0017D8  6EF8               	movwf	tblptru,c
  7994  0017DA  0E0F               	movlw	(high __ramtop+-1)
  7995  0017DC  64F7               	cpfsgt	tblptrh,c
  7996  0017DE  D003               	bra	u4637
  7997  0017E0  0008               	tblrd		*
  7998  0017E2  50F5               	movf	tablat,w,c
  7999  0017E4  D005               	bra	u4630
  8000  0017E6                     u4637:
  8001  0017E6  CFF6 FFE9          	movff	tblptrl,fsr0l
  8002  0017EA  CFF7 FFEA          	movff	tblptrh,fsr0h
  8003  0017EE  50EF               	movf	indf0,w,c
  8004  0017F0                     u4630:
  8005  0017F0  0A20               	xorlw	32
  8006  0017F2  B4D8               	btfsc	status,2,c
  8007  0017F4  D035               	goto	l460
  8008  0017F6  0100               	movlb	0	; () banked
  8009  0017F8  5188               	movf	printStringLCD@i& (0+255),w,b
  8010  0017FA  242D               	addwf	printStringLCD@string,w,c
  8011  0017FC  6E2F               	movwf	??_printStringLCD& (0+255),c
  8012  0017FE  5189               	movf	(printStringLCD@i+1)& (0+255),w,b
  8013  001800  202E               	addwfc	printStringLCD@string+1,w,c
  8014  001802  6E30               	movwf	(??_printStringLCD+1)& (0+255),c
  8015  001804  C02F  FFF6         	movff	??_printStringLCD,tblptrl
  8016  001808  C030  FFF7         	movff	??_printStringLCD+1,tblptrh
  8017  00180C  0E00               	movlw	low (__mediumconst shr (0+16))
  8018  00180E  6EF8               	movwf	tblptru,c
  8019  001810  0E0F               	movlw	(high __ramtop+-1)
  8020  001812  64F7               	cpfsgt	tblptrh,c
  8021  001814  D003               	bra	u4657
  8022  001816  0008               	tblrd		*
  8023  001818  50F5               	movf	tablat,w,c
  8024  00181A  D005               	bra	u4650
  8025  00181C                     u4657:
  8026  00181C  CFF6 FFE9          	movff	tblptrl,fsr0l
  8027  001820  CFF7 FFEA          	movff	tblptrh,fsr0h
  8028  001824  50EF               	movf	indf0,w,c
  8029  001826                     u4650:
  8030  001826  0A0A               	xorlw	10
  8031  001828  B4D8               	btfsc	status,2,c
  8032  00182A  D01A               	goto	l460
  8033  00182C                     l457:
  8034  00182C                     l4223:
  8035                           
  8036                           ;helpers.c: 56: }
  8037                           ;helpers.c: 58: putch(string[i]);
  8038  00182C  0100               	movlb	0	; () banked
  8039  00182E  5188               	movf	printStringLCD@i& (0+255),w,b
  8040  001830  242D               	addwf	printStringLCD@string,w,c
  8041  001832  6E2F               	movwf	??_printStringLCD& (0+255),c
  8042  001834  5189               	movf	(printStringLCD@i+1)& (0+255),w,b
  8043  001836  202E               	addwfc	printStringLCD@string+1,w,c
  8044  001838  6E30               	movwf	(??_printStringLCD+1)& (0+255),c
  8045  00183A  C02F  FFF6         	movff	??_printStringLCD,tblptrl
  8046  00183E  C030  FFF7         	movff	??_printStringLCD+1,tblptrh
  8047  001842  0E00               	movlw	low (__mediumconst shr (0+16))
  8048  001844  6EF8               	movwf	tblptru,c
  8049  001846  0E0F               	movlw	(high __ramtop+-1)
  8050  001848  64F7               	cpfsgt	tblptrh,c
  8051  00184A  D003               	bra	u4677
  8052  00184C  0008               	tblrd		*
  8053  00184E  50F5               	movf	tablat,w,c
  8054  001850  D005               	bra	u4670
  8055  001852                     u4677:
  8056  001852  CFF6 FFE9          	movff	tblptrl,fsr0l
  8057  001856  CFF7 FFEA          	movff	tblptrh,fsr0h
  8058  00185A  50EF               	movf	indf0,w,c
  8059  00185C                     u4670:
  8060  00185C  ECFC  F013         	call	_putch
  8061  001860                     l460:
  8062  001860  0100               	movlb	0	; () banked
  8063  001862  4B88               	infsnz	printStringLCD@i& (0+255),f,b
  8064  001864  2B89               	incf	(printStringLCD@i+1)& (0+255),f,b
  8065                           
  8066                           ; BSR set to: 0
  8067  001866  BF89               	btfsc	(printStringLCD@i+1)& (0+255),7,b
  8068  001868  D770               	goto	l453
  8069  00186A  5189               	movf	(printStringLCD@i+1)& (0+255),w,b
  8070  00186C  E101               	bnz	l461
  8071  00186E  D767               	goto	L8
  8072  001870                     l461:
  8073  001870  0012               	return		;funcret
  8074  001872                     __end_of_printStringLCD:
  8075                           	opt stack 0
  8076                           tosu	equ	0xFFF
  8077                           tosh	equ	0xFFE
  8078                           tosl	equ	0xFFD
  8079                           pclath	equ	0xFFA
  8080                           tblptru	equ	0xFF8
  8081                           tblptrh	equ	0xFF7
  8082                           tblptrl	equ	0xFF6
  8083                           tablat	equ	0xFF5
  8084                           prodh	equ	0xFF4
  8085                           prodl	equ	0xFF3
  8086                           intcon	equ	0xFF2
  8087                           indf0	equ	0xFEF
  8088                           postinc0	equ	0xFEE
  8089                           fsr0h	equ	0xFEA
  8090                           fsr0l	equ	0xFE9
  8091                           wreg	equ	0xFE8
  8092                           postdec1	equ	0xFE5
  8093                           plusw1	equ	0xFE3
  8094                           fsr1l	equ	0xFE1
  8095                           indf2	equ	0xFDF
  8096                           postinc2	equ	0xFDE
  8097                           postdec2	equ	0xFDD
  8098                           plusw2	equ	0xFDB
  8099                           fsr2h	equ	0xFDA
  8100                           fsr2l	equ	0xFD9
  8101                           status	equ	0xFD8
  8102                           
  8103 ;; *************** function _putch *****************
  8104 ;; Defined at:
  8105 ;;		line 25 in file "lcd.c"
  8106 ;; Parameters:    Size  Location     Type
  8107 ;;  data            1    wreg     unsigned char 
  8108 ;; Auto vars:     Size  Location     Type
  8109 ;;  data            1   40[COMRAM] unsigned char 
  8110 ;; Return value:  Size  Location     Type
  8111 ;;                  1    wreg      void 
  8112 ;; Registers used:
  8113 ;;		wreg, status,2, status,0, cstack
  8114 ;; Tracked objects:
  8115 ;;		On entry : 0/0
  8116 ;;		On exit  : 0/0
  8117 ;;		Unchanged: 0/0
  8118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8120 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8122 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8123 ;;Total ram usage:        1 bytes
  8124 ;; Hardware stack levels used:    1
  8125 ;; Hardware stack levels required when called:    5
  8126 ;; This function calls:
  8127 ;;		_lcdNibble
  8128 ;; This function is called by:
  8129 ;;		_inputEntry
  8130 ;;		_mainMenu
  8131 ;;		_printStringLCD
  8132 ;;		_printf
  8133 ;;		__doprnt
  8134 ;; This function uses a non-reentrant model
  8135 ;;
  8136                           
  8137                           	psect	text20
  8138  0027F8                     __ptext20:
  8139                           	opt stack 0
  8140  0027F8                     _putch:
  8141                           	opt stack 22
  8142                           
  8143                           ;incstack = 0
  8144                           ;putch@data stored from wreg
  8145  0027F8  6E29               	movwf	putch@data,c
  8146                           
  8147                           ;lcd.c: 33: LATDbits.LATD2 = 1;
  8148  0027FA  848C               	bsf	3980,2,c	;volatile
  8149                           
  8150                           ;lcd.c: 34: lcdNibble(data);
  8151  0027FC  5029               	movf	putch@data,w,c
  8152  0027FE  EC3D  F011         	call	_lcdNibble
  8153                           
  8154                           ;lcd.c: 35: _delay((unsigned long)((100)*(40000000/4000000.0)));
  8155  002802  0EC8               	movlw	200
  8156  002804                     u6207:
  8157  002804  D000               	nop2	
  8158  002806  2EE8               	decfsz	wreg,f,c
  8159  002808  D7FD               	bra	u6207
  8160  00280A  0012               	return		;funcret
  8161  00280C                     __end_of_putch:
  8162                           	opt stack 0
  8163                           tosu	equ	0xFFF
  8164                           tosh	equ	0xFFE
  8165                           tosl	equ	0xFFD
  8166                           pclath	equ	0xFFA
  8167                           tblptru	equ	0xFF8
  8168                           tblptrh	equ	0xFF7
  8169                           tblptrl	equ	0xFF6
  8170                           tablat	equ	0xFF5
  8171                           prodh	equ	0xFF4
  8172                           prodl	equ	0xFF3
  8173                           intcon	equ	0xFF2
  8174                           indf0	equ	0xFEF
  8175                           postinc0	equ	0xFEE
  8176                           fsr0h	equ	0xFEA
  8177                           fsr0l	equ	0xFE9
  8178                           wreg	equ	0xFE8
  8179                           postdec1	equ	0xFE5
  8180                           plusw1	equ	0xFE3
  8181                           fsr1l	equ	0xFE1
  8182                           indf2	equ	0xFDF
  8183                           postinc2	equ	0xFDE
  8184                           postdec2	equ	0xFDD
  8185                           plusw2	equ	0xFDB
  8186                           fsr2h	equ	0xFDA
  8187                           fsr2l	equ	0xFD9
  8188                           status	equ	0xFD8
  8189                           
  8190 ;; *************** function _pollKeypad *****************
  8191 ;; Defined at:
  8192 ;;		line 68 in file "helpers.c"
  8193 ;; Parameters:    Size  Location     Type
  8194 ;;		None
  8195 ;; Auto vars:     Size  Location     Type
  8196 ;;  keypress        1   38[COMRAM] unsigned char 
  8197 ;; Return value:  Size  Location     Type
  8198 ;;                  1    wreg      unsigned char 
  8199 ;; Registers used:
  8200 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  8201 ;; Tracked objects:
  8202 ;;		On entry : 0/0
  8203 ;;		On exit  : 0/0
  8204 ;;		Unchanged: 0/0
  8205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8207 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8209 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8210 ;;Total ram usage:        1 bytes
  8211 ;; Hardware stack levels used:    1
  8212 ;; Hardware stack levels required when called:    4
  8213 ;; This function calls:
  8214 ;;		Nothing
  8215 ;; This function is called by:
  8216 ;;		_hibernate
  8217 ;;		_viewLogs
  8218 ;;		_inputEntry
  8219 ;;		_mainMenu
  8220 ;; This function uses a non-reentrant model
  8221 ;;
  8222                           
  8223                           	psect	text21
  8224  0026E0                     __ptext21:
  8225                           	opt stack 0
  8226  0026E0                     _pollKeypad:
  8227                           	opt stack 24
  8228                           
  8229                           ;helpers.c: 70: while (PORTBbits.RB1 == 0) {continue;}
  8230                           
  8231                           ;incstack = 0
  8232  0026E0  A281               	btfss	3969,1,c	;volatile
  8233  0026E2  D7FE               	goto	_pollKeypad
  8234                           
  8235                           ;helpers.c: 73: unsigned char keypress = (unsigned char)(PORTB & 0xF0) >> 4;
  8236  0026E4  3881               	swapf	3969,w,c	;volatile
  8237  0026E6  0B0F               	andlw	15
  8238  0026E8  0B0F               	andlw	15
  8239  0026EA  6E27               	movwf	pollKeypad@keypress,c
  8240  0026EC  B281               	btfsc	3969,1,c	;volatile
  8241  0026EE  D7FE               	goto	l471
  8242                           
  8243                           ;helpers.c: 78: __nop();
  8244  0026F0  F000               	nop	
  8245                           
  8246                           ;helpers.c: 80: return keypadChars[keypress];
  8247  0026F2  5027               	movf	pollKeypad@keypress,w,c
  8248  0026F4  0D01               	mullw	1
  8249  0026F6  0E97               	movlw	low _keypadChars
  8250  0026F8  24F3               	addwf	prodl,w,c
  8251  0026FA  6EF6               	movwf	tblptrl,c
  8252  0026FC  0EFC               	movlw	high _keypadChars
  8253  0026FE  20F4               	addwfc	prodh,w,c
  8254  002700  6EF7               	movwf	tblptrh,c
  8255  002702                     	if	1	;There are 3 active tblptr bytes
  8256  002702  6AF8               	clrf	tblptru,c
  8257  002704  0E00               	movlw	low (__mediumconst shr (0+16))
  8258  002706  22F8               	addwfc	tblptru,f,c
  8259  002708                     	endif
  8260  002708  0008               	tblrd		*
  8261  00270A  50F5               	movf	tablat,w,c
  8262  00270C  0012               	return	
  8263  00270E                     __end_of_pollKeypad:
  8264                           	opt stack 0
  8265                           tosu	equ	0xFFF
  8266                           tosh	equ	0xFFE
  8267                           tosl	equ	0xFFD
  8268                           pclath	equ	0xFFA
  8269                           tblptru	equ	0xFF8
  8270                           tblptrh	equ	0xFF7
  8271                           tblptrl	equ	0xFF6
  8272                           tablat	equ	0xFF5
  8273                           prodh	equ	0xFF4
  8274                           prodl	equ	0xFF3
  8275                           intcon	equ	0xFF2
  8276                           indf0	equ	0xFEF
  8277                           postinc0	equ	0xFEE
  8278                           fsr0h	equ	0xFEA
  8279                           fsr0l	equ	0xFE9
  8280                           wreg	equ	0xFE8
  8281                           postdec1	equ	0xFE5
  8282                           plusw1	equ	0xFE3
  8283                           fsr1l	equ	0xFE1
  8284                           indf2	equ	0xFDF
  8285                           postinc2	equ	0xFDE
  8286                           postdec2	equ	0xFDD
  8287                           plusw2	equ	0xFDB
  8288                           fsr2h	equ	0xFDA
  8289                           fsr2l	equ	0xFD9
  8290                           status	equ	0xFD8
  8291                           
  8292 ;; *************** function _clearing *****************
  8293 ;; Defined at:
  8294 ;;		line 144 in file "main.c"
  8295 ;; Parameters:    Size  Location     Type
  8296 ;;		None
  8297 ;; Auto vars:     Size  Location     Type
  8298 ;;  i               2    2[BANK0 ] int 
  8299 ;;  spinTime        2    0[BANK0 ] int 
  8300 ;; Return value:  Size  Location     Type
  8301 ;;                  1    wreg      void 
  8302 ;; Registers used:
  8303 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8304 ;; Tracked objects:
  8305 ;;		On entry : 0/0
  8306 ;;		On exit  : 0/0
  8307 ;;		Unchanged: 0/0
  8308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8310 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8311 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8312 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8313 ;;Total ram usage:        6 bytes
  8314 ;; Hardware stack levels used:    1
  8315 ;; Hardware stack levels required when called:    7
  8316 ;; This function calls:
  8317 ;;		_I2C_Send
  8318 ;;		_motorControl
  8319 ;; This function is called by:
  8320 ;;		_mainMenu
  8321 ;; This function uses a non-reentrant model
  8322 ;;
  8323                           
  8324                           	psect	text22
  8325  001872                     __ptext22:
  8326                           	opt stack 0
  8327  001872                     _clearing:
  8328                           	opt stack 22
  8329                           
  8330                           ;main.c: 149: I2C_Send(nanoAddr, 3);
  8331                           
  8332                           ;incstack = 0
  8333  001872  0E03               	movlw	3
  8334  001874  6E2A               	movwf	I2C_Send@data,c
  8335  001876  0E00               	movlw	0
  8336  001878  6E2B               	movwf	I2C_Send@data+1,c
  8337  00187A  0EBD               	movlw	low _nanoAddr
  8338  00187C  6EF6               	movwf	tblptrl,c
  8339  00187E                     	if	1	;There is more than 1 active tblptr byte
  8340  00187E  0EFC               	movlw	high _nanoAddr
  8341  001880  6EF7               	movwf	tblptrh,c
  8342  001882                     	endif
  8343  001882                     	if	1	;There are 3 active tblptr bytes
  8344  001882  0E00               	movlw	low (_nanoAddr shr (0+16))
  8345  001884  6EF8               	movwf	tblptru,c
  8346  001886                     	endif
  8347  001886  0008               	tblrd		*
  8348  001888  50F5               	movf	tablat,w,c
  8349  00188A  EC30  F010         	call	_I2C_Send
  8350                           
  8351                           ;main.c: 151: int i;
  8352                           ;main.c: 152: int spinTime=100;
  8353  00188E  0E00               	movlw	0
  8354  001890  0100               	movlb	0	; () banked
  8355  001892  6F81               	movwf	(clearing@spinTime+1)& (0+255),b
  8356  001894  0E64               	movlw	100
  8357  001896  6F80               	movwf	clearing@spinTime& (0+255),b
  8358                           
  8359                           ; BSR set to: 0
  8360                           ;main.c: 154: extras.b = 0;
  8361  001898  0E00               	movlw	0
  8362  00189A  6E3D               	movwf	_extras+1,c
  8363  00189C  0E00               	movlw	0
  8364  00189E  6E3C               	movwf	_extras,c
  8365                           
  8366                           ; BSR set to: 0
  8367                           ;main.c: 155: extras.n = 0;
  8368  0018A0  0E00               	movlw	0
  8369  0018A2  6E3F               	movwf	_extras+3,c
  8370  0018A4  0E00               	movlw	0
  8371  0018A6  6E3E               	movwf	_extras+2,c
  8372                           
  8373                           ; BSR set to: 0
  8374                           ;main.c: 156: extras.s = 0;
  8375  0018A8  0E00               	movlw	0
  8376  0018AA  6E41               	movwf	_extras+5,c
  8377  0018AC  0E00               	movlw	0
  8378  0018AE  6E40               	movwf	_extras+4,c
  8379                           
  8380                           ; BSR set to: 0
  8381                           ;main.c: 157: extras.w = 0;
  8382  0018B0  0E00               	movlw	0
  8383  0018B2  6E43               	movwf	_extras+7,c
  8384  0018B4  0E00               	movlw	0
  8385  0018B6  6E42               	movwf	_extras+6,c
  8386                           
  8387                           ; BSR set to: 0
  8388                           ;main.c: 159: motorControl(BOLT, FORWARD);
  8389  0018B8  0E00               	movlw	0
  8390  0018BA  6E27               	movwf	motorControl@dir,c
  8391  0018BC  0E00               	movlw	0
  8392  0018BE  ECDA  F00E         	call	_motorControl
  8393                           
  8394                           ;main.c: 160: for (i = 0; i < spinTime; i++) {
  8395  0018C2  0E00               	movlw	0
  8396  0018C4  0100               	movlb	0	; () banked
  8397  0018C6  6F83               	movwf	(clearing@i+1)& (0+255),b
  8398  0018C8  0E00               	movlw	0
  8399  0018CA  6F82               	movwf	clearing@i& (0+255),b
  8400  0018CC  D01D               	goto	l119
  8401  0018CE                     l120:
  8402                           
  8403                           ; BSR set to: 0
  8404                           ;main.c: 162: if (PORTAbits.RA0 == 0) {
  8405  0018CE  B080               	btfsc	3968,0,c	;volatile
  8406  0018D0  D002               	goto	l121
  8407                           
  8408                           ; BSR set to: 0
  8409                           ;main.c: 163: extras.b++;
  8410  0018D2  4A3C               	infsnz	_extras,f,c
  8411  0018D4  2A3D               	incf	_extras+1,f,c
  8412  0018D6                     l121:
  8413                           
  8414                           ; BSR set to: 0
  8415                           ;main.c: 164: }
  8416                           ;main.c: 165: if (extras.b + dispensed.b == 20) break;
  8417                           
  8418                           ; BSR set to: 0
  8419  0018D6  5034               	movf	_dispensed,w,c
  8420  0018D8  243C               	addwf	_extras,w,c
  8421  0018DA  6E32               	movwf	??_clearing& (0+255),c
  8422  0018DC  5035               	movf	_dispensed+1,w,c
  8423  0018DE  203D               	addwfc	_extras+1,w,c
  8424  0018E0  6E33               	movwf	(??_clearing+1)& (0+255),c
  8425  0018E2  0E14               	movlw	20
  8426  0018E4  1832               	xorwf	??_clearing,w,c
  8427  0018E6  1033               	iorwf	??_clearing+1,w,c
  8428  0018E8  B4D8               	btfsc	status,2,c
  8429  0018EA  D018               	goto	u5280
  8430                           
  8431                           ; BSR set to: 0
  8432                           ;main.c: 166: _delay((unsigned long)((25)*(40000000/4000.0)));
  8433                           
  8434                           ; BSR set to: 0
  8435                           
  8436                           ; BSR set to: 0
  8437  0018EC  0E02               	movlw	2
  8438  0018EE  6E33               	movwf	(??_clearing+1)& (0+255),c
  8439  0018F0  0E45               	movlw	69
  8440  0018F2  6E32               	movwf	??_clearing& (0+255),c
  8441  0018F4  0EAA               	movlw	170
  8442  0018F6                     u6217:
  8443  0018F6  2EE8               	decfsz	wreg,f,c
  8444  0018F8  D7FE               	bra	u6217
  8445  0018FA  2E32               	decfsz	??_clearing& (0+255),f,c
  8446  0018FC  D7FC               	bra	u6217
  8447  0018FE  2E33               	decfsz	(??_clearing+1)& (0+255),f,c
  8448  001900  D7FA               	bra	u6217
  8449  001902  0100               	movlb	0	; () banked
  8450  001904  4B82               	infsnz	clearing@i& (0+255),f,b
  8451  001906  2B83               	incf	(clearing@i+1)& (0+255),f,b
  8452  001908                     l119:
  8453                           
  8454                           ; BSR set to: 0
  8455  001908  5180               	movf	clearing@spinTime& (0+255),w,b
  8456  00190A  5D82               	subwf	clearing@i& (0+255),w,b
  8457  00190C  5183               	movf	(clearing@i+1)& (0+255),w,b
  8458  00190E  0A80               	xorlw	128
  8459  001910  6E32               	movwf	??_clearing& (0+255),c
  8460  001912  5181               	movf	(clearing@spinTime+1)& (0+255),w,b
  8461  001914  0A80               	xorlw	128
  8462  001916  5832               	subwfb	??_clearing& (0+255),w,c
  8463  001918  A0D8               	btfss	status,0,c
  8464  00191A  D7D9               	goto	l120
  8465  00191C                     u5280:
  8466                           
  8467                           ; BSR set to: 0
  8468                           ;main.c: 167: }
  8469                           ;main.c: 168: motorControl(BOLT, STOPMOTOR);
  8470                           
  8471                           ; BSR set to: 0
  8472  00191C  0E02               	movlw	2
  8473  00191E  6E27               	movwf	motorControl@dir,c
  8474  001920  0E00               	movlw	0
  8475  001922  ECDA  F00E         	call	_motorControl
  8476                           
  8477                           ;main.c: 170: I2C_Send(nanoAddr, 4);
  8478  001926  0E04               	movlw	4
  8479  001928  6E2A               	movwf	I2C_Send@data,c
  8480  00192A  0E00               	movlw	0
  8481  00192C  6E2B               	movwf	I2C_Send@data+1,c
  8482  00192E  0EBD               	movlw	low _nanoAddr
  8483  001930  6EF6               	movwf	tblptrl,c
  8484  001932                     	if	1	;There is more than 1 active tblptr byte
  8485  001932  0EFC               	movlw	high _nanoAddr
  8486  001934  6EF7               	movwf	tblptrh,c
  8487  001936                     	endif
  8488  001936                     	if	1	;There are 3 active tblptr bytes
  8489  001936  0E00               	movlw	low (_nanoAddr shr (0+16))
  8490  001938  6EF8               	movwf	tblptru,c
  8491  00193A                     	endif
  8492  00193A  0008               	tblrd		*
  8493  00193C  50F5               	movf	tablat,w,c
  8494  00193E  EC30  F010         	call	_I2C_Send
  8495                           
  8496                           ;main.c: 171: _delay((unsigned long)((5000)*(40000000/4000.0)));
  8497  001942  0EFE               	movlw	254
  8498  001944  6E33               	movwf	(??_clearing+1)& (0+255),c
  8499  001946  0EA7               	movlw	167
  8500  001948  6E32               	movwf	??_clearing& (0+255),c
  8501  00194A  0E66               	movlw	102
  8502  00194C                     u6227:
  8503  00194C  2EE8               	decfsz	wreg,f,c
  8504  00194E  D7FE               	bra	u6227
  8505  001950  2E32               	decfsz	??_clearing& (0+255),f,c
  8506  001952  D7FC               	bra	u6227
  8507  001954  2E33               	decfsz	(??_clearing+1)& (0+255),f,c
  8508  001956  D7FA               	bra	u6227
  8509                           
  8510                           ;main.c: 173: motorControl(NUT, FORWARD);
  8511  001958  0E00               	movlw	0
  8512  00195A  6E27               	movwf	motorControl@dir,c
  8513  00195C  0E01               	movlw	1
  8514  00195E  ECDA  F00E         	call	_motorControl
  8515                           
  8516                           ;main.c: 174: for (i = 0; i < spinTime; i++) {
  8517  001962  0E00               	movlw	0
  8518  001964  0100               	movlb	0	; () banked
  8519  001966  6F83               	movwf	(clearing@i+1)& (0+255),b
  8520  001968  0E00               	movlw	0
  8521  00196A  6F82               	movwf	clearing@i& (0+255),b
  8522  00196C  D01D               	goto	l124
  8523  00196E                     l125:
  8524                           
  8525                           ; BSR set to: 0
  8526                           ;main.c: 175: if (PORTAbits.RA1 == 0) {
  8527  00196E  B280               	btfsc	3968,1,c	;volatile
  8528  001970  D002               	goto	l126
  8529                           
  8530                           ; BSR set to: 0
  8531                           ;main.c: 176: extras.n++;
  8532  001972  4A3E               	infsnz	_extras+2,f,c
  8533  001974  2A3F               	incf	_extras+3,f,c
  8534  001976                     l126:
  8535                           
  8536                           ; BSR set to: 0
  8537                           ;main.c: 177: }
  8538                           ;main.c: 178: if (extras.n + dispensed.n == 25) break;
  8539                           
  8540                           ; BSR set to: 0
  8541  001976  5036               	movf	_dispensed+2,w,c
  8542  001978  243E               	addwf	_extras+2,w,c
  8543  00197A  6E32               	movwf	??_clearing& (0+255),c
  8544  00197C  5037               	movf	_dispensed+3,w,c
  8545  00197E  203F               	addwfc	_extras+3,w,c
  8546  001980  6E33               	movwf	(??_clearing+1)& (0+255),c
  8547  001982  0E19               	movlw	25
  8548  001984  1832               	xorwf	??_clearing,w,c
  8549  001986  1033               	iorwf	??_clearing+1,w,c
  8550  001988  B4D8               	btfsc	status,2,c
  8551  00198A  D018               	goto	u5310
  8552                           
  8553                           ; BSR set to: 0
  8554                           ;main.c: 179: _delay((unsigned long)((25)*(40000000/4000.0)));
  8555                           
  8556                           ; BSR set to: 0
  8557                           
  8558                           ; BSR set to: 0
  8559  00198C  0E02               	movlw	2
  8560  00198E  6E33               	movwf	(??_clearing+1)& (0+255),c
  8561  001990  0E45               	movlw	69
  8562  001992  6E32               	movwf	??_clearing& (0+255),c
  8563  001994  0EAA               	movlw	170
  8564  001996                     u6237:
  8565  001996  2EE8               	decfsz	wreg,f,c
  8566  001998  D7FE               	bra	u6237
  8567  00199A  2E32               	decfsz	??_clearing& (0+255),f,c
  8568  00199C  D7FC               	bra	u6237
  8569  00199E  2E33               	decfsz	(??_clearing+1)& (0+255),f,c
  8570  0019A0  D7FA               	bra	u6237
  8571  0019A2  0100               	movlb	0	; () banked
  8572  0019A4  4B82               	infsnz	clearing@i& (0+255),f,b
  8573  0019A6  2B83               	incf	(clearing@i+1)& (0+255),f,b
  8574  0019A8                     l124:
  8575                           
  8576                           ; BSR set to: 0
  8577  0019A8  5180               	movf	clearing@spinTime& (0+255),w,b
  8578  0019AA  5D82               	subwf	clearing@i& (0+255),w,b
  8579  0019AC  5183               	movf	(clearing@i+1)& (0+255),w,b
  8580  0019AE  0A80               	xorlw	128
  8581  0019B0  6E32               	movwf	??_clearing& (0+255),c
  8582  0019B2  5181               	movf	(clearing@spinTime+1)& (0+255),w,b
  8583  0019B4  0A80               	xorlw	128
  8584  0019B6  5832               	subwfb	??_clearing& (0+255),w,c
  8585  0019B8  A0D8               	btfss	status,0,c
  8586  0019BA  D7D9               	goto	l125
  8587  0019BC                     u5310:
  8588                           
  8589                           ; BSR set to: 0
  8590                           ;main.c: 180: }
  8591                           ;main.c: 181: motorControl(NUT, STOPMOTOR);
  8592                           
  8593                           ; BSR set to: 0
  8594  0019BC  0E02               	movlw	2
  8595  0019BE  6E27               	movwf	motorControl@dir,c
  8596  0019C0  0E01               	movlw	1
  8597  0019C2  ECDA  F00E         	call	_motorControl
  8598                           
  8599                           ;main.c: 183: I2C_Send(nanoAddr, 5);
  8600  0019C6  0E05               	movlw	5
  8601  0019C8  6E2A               	movwf	I2C_Send@data,c
  8602  0019CA  0E00               	movlw	0
  8603  0019CC  6E2B               	movwf	I2C_Send@data+1,c
  8604  0019CE  0EBD               	movlw	low _nanoAddr
  8605  0019D0  6EF6               	movwf	tblptrl,c
  8606  0019D2                     	if	1	;There is more than 1 active tblptr byte
  8607  0019D2  0EFC               	movlw	high _nanoAddr
  8608  0019D4  6EF7               	movwf	tblptrh,c
  8609  0019D6                     	endif
  8610  0019D6                     	if	1	;There are 3 active tblptr bytes
  8611  0019D6  0E00               	movlw	low (_nanoAddr shr (0+16))
  8612  0019D8  6EF8               	movwf	tblptru,c
  8613  0019DA                     	endif
  8614  0019DA  0008               	tblrd		*
  8615  0019DC  50F5               	movf	tablat,w,c
  8616  0019DE  EC30  F010         	call	_I2C_Send
  8617                           
  8618                           ;main.c: 184: _delay((unsigned long)((5000)*(40000000/4000.0)));
  8619  0019E2  0EFE               	movlw	254
  8620  0019E4  6E33               	movwf	(??_clearing+1)& (0+255),c
  8621  0019E6  0EA7               	movlw	167
  8622  0019E8  6E32               	movwf	??_clearing& (0+255),c
  8623  0019EA  0E66               	movlw	102
  8624  0019EC                     u6247:
  8625  0019EC  2EE8               	decfsz	wreg,f,c
  8626  0019EE  D7FE               	bra	u6247
  8627  0019F0  2E32               	decfsz	??_clearing& (0+255),f,c
  8628  0019F2  D7FC               	bra	u6247
  8629  0019F4  2E33               	decfsz	(??_clearing+1)& (0+255),f,c
  8630  0019F6  D7FA               	bra	u6247
  8631                           
  8632                           ;main.c: 186: motorControl(SPACER, FORWARD);
  8633  0019F8  0E00               	movlw	0
  8634  0019FA  6E27               	movwf	motorControl@dir,c
  8635  0019FC  0E02               	movlw	2
  8636  0019FE  ECDA  F00E         	call	_motorControl
  8637                           
  8638                           ;main.c: 187: for (i = 0; i < spinTime; i++) {
  8639  001A02  0E00               	movlw	0
  8640  001A04  0100               	movlb	0	; () banked
  8641  001A06  6F83               	movwf	(clearing@i+1)& (0+255),b
  8642  001A08  0E00               	movlw	0
  8643  001A0A  6F82               	movwf	clearing@i& (0+255),b
  8644  001A0C  D01D               	goto	l129
  8645  001A0E                     l130:
  8646                           
  8647                           ; BSR set to: 0
  8648                           ;main.c: 188: if (PORTAbits.RA2 == 0) {
  8649  001A0E  B480               	btfsc	3968,2,c	;volatile
  8650  001A10  D002               	goto	l131
  8651                           
  8652                           ; BSR set to: 0
  8653                           ;main.c: 189: extras.s++;
  8654  001A12  4A40               	infsnz	_extras+4,f,c
  8655  001A14  2A41               	incf	_extras+5,f,c
  8656  001A16                     l131:
  8657                           
  8658                           ; BSR set to: 0
  8659                           ;main.c: 190: }
  8660                           ;main.c: 191: if (extras.s + dispensed.s == 20) break;
  8661                           
  8662                           ; BSR set to: 0
  8663  001A16  5038               	movf	_dispensed+4,w,c
  8664  001A18  2440               	addwf	_extras+4,w,c
  8665  001A1A  6E32               	movwf	??_clearing& (0+255),c
  8666  001A1C  5039               	movf	_dispensed+5,w,c
  8667  001A1E  2041               	addwfc	_extras+5,w,c
  8668  001A20  6E33               	movwf	(??_clearing+1)& (0+255),c
  8669  001A22  0E14               	movlw	20
  8670  001A24  1832               	xorwf	??_clearing,w,c
  8671  001A26  1033               	iorwf	??_clearing+1,w,c
  8672  001A28  B4D8               	btfsc	status,2,c
  8673  001A2A  D018               	goto	u5340
  8674                           
  8675                           ; BSR set to: 0
  8676                           ;main.c: 192: _delay((unsigned long)((25)*(40000000/4000.0)));
  8677                           
  8678                           ; BSR set to: 0
  8679                           
  8680                           ; BSR set to: 0
  8681  001A2C  0E02               	movlw	2
  8682  001A2E  6E33               	movwf	(??_clearing+1)& (0+255),c
  8683  001A30  0E45               	movlw	69
  8684  001A32  6E32               	movwf	??_clearing& (0+255),c
  8685  001A34  0EAA               	movlw	170
  8686  001A36                     u6257:
  8687  001A36  2EE8               	decfsz	wreg,f,c
  8688  001A38  D7FE               	bra	u6257
  8689  001A3A  2E32               	decfsz	??_clearing& (0+255),f,c
  8690  001A3C  D7FC               	bra	u6257
  8691  001A3E  2E33               	decfsz	(??_clearing+1)& (0+255),f,c
  8692  001A40  D7FA               	bra	u6257
  8693  001A42  0100               	movlb	0	; () banked
  8694  001A44  4B82               	infsnz	clearing@i& (0+255),f,b
  8695  001A46  2B83               	incf	(clearing@i+1)& (0+255),f,b
  8696  001A48                     l129:
  8697                           
  8698                           ; BSR set to: 0
  8699  001A48  5180               	movf	clearing@spinTime& (0+255),w,b
  8700  001A4A  5D82               	subwf	clearing@i& (0+255),w,b
  8701  001A4C  5183               	movf	(clearing@i+1)& (0+255),w,b
  8702  001A4E  0A80               	xorlw	128
  8703  001A50  6E32               	movwf	??_clearing& (0+255),c
  8704  001A52  5181               	movf	(clearing@spinTime+1)& (0+255),w,b
  8705  001A54  0A80               	xorlw	128
  8706  001A56  5832               	subwfb	??_clearing& (0+255),w,c
  8707  001A58  A0D8               	btfss	status,0,c
  8708  001A5A  D7D9               	goto	l130
  8709  001A5C                     u5340:
  8710                           
  8711                           ; BSR set to: 0
  8712                           ;main.c: 193: }
  8713                           ;main.c: 194: motorControl(SPACER, STOPMOTOR);
  8714                           
  8715                           ; BSR set to: 0
  8716  001A5C  0E02               	movlw	2
  8717  001A5E  6E27               	movwf	motorControl@dir,c
  8718  001A60  0E02               	movlw	2
  8719  001A62  ECDA  F00E         	call	_motorControl
  8720                           
  8721                           ;main.c: 196: I2C_Send(nanoAddr, 6);
  8722  001A66  0E06               	movlw	6
  8723  001A68  6E2A               	movwf	I2C_Send@data,c
  8724  001A6A  0E00               	movlw	0
  8725  001A6C  6E2B               	movwf	I2C_Send@data+1,c
  8726  001A6E  0EBD               	movlw	low _nanoAddr
  8727  001A70  6EF6               	movwf	tblptrl,c
  8728  001A72                     	if	1	;There is more than 1 active tblptr byte
  8729  001A72  0EFC               	movlw	high _nanoAddr
  8730  001A74  6EF7               	movwf	tblptrh,c
  8731  001A76                     	endif
  8732  001A76                     	if	1	;There are 3 active tblptr bytes
  8733  001A76  0E00               	movlw	low (_nanoAddr shr (0+16))
  8734  001A78  6EF8               	movwf	tblptru,c
  8735  001A7A                     	endif
  8736  001A7A  0008               	tblrd		*
  8737  001A7C  50F5               	movf	tablat,w,c
  8738  001A7E  EC30  F010         	call	_I2C_Send
  8739                           
  8740                           ;main.c: 197: _delay((unsigned long)((5000)*(40000000/4000.0)));
  8741  001A82  0EFE               	movlw	254
  8742  001A84  6E33               	movwf	(??_clearing+1)& (0+255),c
  8743  001A86  0EA7               	movlw	167
  8744  001A88  6E32               	movwf	??_clearing& (0+255),c
  8745  001A8A  0E66               	movlw	102
  8746  001A8C                     u6267:
  8747  001A8C  2EE8               	decfsz	wreg,f,c
  8748  001A8E  D7FE               	bra	u6267
  8749  001A90  2E32               	decfsz	??_clearing& (0+255),f,c
  8750  001A92  D7FC               	bra	u6267
  8751  001A94  2E33               	decfsz	(??_clearing+1)& (0+255),f,c
  8752  001A96  D7FA               	bra	u6267
  8753                           
  8754                           ;main.c: 199: motorControl(WASHER, FORWARD);
  8755  001A98  0E00               	movlw	0
  8756  001A9A  6E27               	movwf	motorControl@dir,c
  8757  001A9C  0E03               	movlw	3
  8758  001A9E  ECDA  F00E         	call	_motorControl
  8759                           
  8760                           ;main.c: 200: for (i = 0; i < spinTime; i++) {
  8761  001AA2  0E00               	movlw	0
  8762  001AA4  0100               	movlb	0	; () banked
  8763  001AA6  6F83               	movwf	(clearing@i+1)& (0+255),b
  8764  001AA8  0E00               	movlw	0
  8765  001AAA  6F82               	movwf	clearing@i& (0+255),b
  8766  001AAC  D011               	goto	l134
  8767  001AAE                     l135:
  8768                           
  8769                           ; BSR set to: 0
  8770                           ;main.c: 201: if (PORTAbits.RA3 == 0) {
  8771  001AAE  B680               	btfsc	3968,3,c	;volatile
  8772  001AB0  D002               	goto	l136
  8773                           
  8774                           ; BSR set to: 0
  8775                           ;main.c: 202: extras.w++;
  8776  001AB2  4A42               	infsnz	_extras+6,f,c
  8777  001AB4  2A43               	incf	_extras+7,f,c
  8778  001AB6                     l136:
  8779                           
  8780                           ; BSR set to: 0
  8781                           ;main.c: 203: }
  8782                           ;main.c: 204: if (extras.w + dispensed.w == 35) break;
  8783                           
  8784                           ; BSR set to: 0
  8785  001AB6  503A               	movf	_dispensed+6,w,c
  8786  001AB8  2442               	addwf	_extras+6,w,c
  8787  001ABA  6E32               	movwf	??_clearing& (0+255),c
  8788  001ABC  503B               	movf	_dispensed+7,w,c
  8789  001ABE  2043               	addwfc	_extras+7,w,c
  8790  001AC0  6E33               	movwf	(??_clearing+1)& (0+255),c
  8791  001AC2  0E23               	movlw	35
  8792  001AC4  1832               	xorwf	??_clearing,w,c
  8793  001AC6  1033               	iorwf	??_clearing+1,w,c
  8794  001AC8  B4D8               	btfsc	status,2,c
  8795  001ACA  D00C               	goto	u5370
  8796                           
  8797                           ; BSR set to: 0
  8798                           
  8799                           ; BSR set to: 0
  8800                           
  8801                           ; BSR set to: 0
  8802  001ACC  4B82               	infsnz	clearing@i& (0+255),f,b
  8803  001ACE  2B83               	incf	(clearing@i+1)& (0+255),f,b
  8804  001AD0                     l134:
  8805                           
  8806                           ; BSR set to: 0
  8807                           
  8808                           ; BSR set to: 0
  8809  001AD0  5180               	movf	clearing@spinTime& (0+255),w,b
  8810  001AD2  5D82               	subwf	clearing@i& (0+255),w,b
  8811  001AD4  5183               	movf	(clearing@i+1)& (0+255),w,b
  8812  001AD6  0A80               	xorlw	128
  8813  001AD8  6E32               	movwf	??_clearing& (0+255),c
  8814  001ADA  5181               	movf	(clearing@spinTime+1)& (0+255),w,b
  8815  001ADC  0A80               	xorlw	128
  8816  001ADE  5832               	subwfb	??_clearing& (0+255),w,c
  8817  001AE0  A0D8               	btfss	status,0,c
  8818  001AE2  D7E5               	goto	l135
  8819  001AE4                     u5370:
  8820                           
  8821                           ; BSR set to: 0
  8822                           ;main.c: 205: }
  8823                           ;main.c: 206: motorControl(WASHER, STOP);
  8824                           
  8825                           ; BSR set to: 0
  8826  001AE4  0E00               	movlw	0
  8827  001AE6  B8C7               	btfsc	4039,4,c	;volatile
  8828  001AE8  0E01               	movlw	1
  8829  001AEA  6E27               	movwf	motorControl@dir,c
  8830  001AEC  0E03               	movlw	3
  8831  001AEE  ECDA  F00E         	call	_motorControl
  8832                           
  8833                           ;main.c: 208: I2C_Send(nanoAddr, 7);
  8834  001AF2  0E07               	movlw	7
  8835  001AF4  6E2A               	movwf	I2C_Send@data,c
  8836  001AF6  0E00               	movlw	0
  8837  001AF8  6E2B               	movwf	I2C_Send@data+1,c
  8838  001AFA  0EBD               	movlw	low _nanoAddr
  8839  001AFC  6EF6               	movwf	tblptrl,c
  8840  001AFE                     	if	1	;There is more than 1 active tblptr byte
  8841  001AFE  0EFC               	movlw	high _nanoAddr
  8842  001B00  6EF7               	movwf	tblptrh,c
  8843  001B02                     	endif
  8844  001B02                     	if	1	;There are 3 active tblptr bytes
  8845  001B02  0E00               	movlw	low (_nanoAddr shr (0+16))
  8846  001B04  6EF8               	movwf	tblptru,c
  8847  001B06                     	endif
  8848  001B06  0008               	tblrd		*
  8849  001B08  50F5               	movf	tablat,w,c
  8850  001B0A  EC30  F010         	call	_I2C_Send
  8851  001B0E  0012               	return		;funcret
  8852  001B10                     __end_of_clearing:
  8853                           	opt stack 0
  8854                           tosu	equ	0xFFF
  8855                           tosh	equ	0xFFE
  8856                           tosl	equ	0xFFD
  8857                           pclath	equ	0xFFA
  8858                           tblptru	equ	0xFF8
  8859                           tblptrh	equ	0xFF7
  8860                           tblptrl	equ	0xFF6
  8861                           tablat	equ	0xFF5
  8862                           prodh	equ	0xFF4
  8863                           prodl	equ	0xFF3
  8864                           intcon	equ	0xFF2
  8865                           indf0	equ	0xFEF
  8866                           postinc0	equ	0xFEE
  8867                           fsr0h	equ	0xFEA
  8868                           fsr0l	equ	0xFE9
  8869                           wreg	equ	0xFE8
  8870                           postdec1	equ	0xFE5
  8871                           plusw1	equ	0xFE3
  8872                           fsr1l	equ	0xFE1
  8873                           indf2	equ	0xFDF
  8874                           postinc2	equ	0xFDE
  8875                           postdec2	equ	0xFDD
  8876                           plusw2	equ	0xFDB
  8877                           fsr2h	equ	0xFDA
  8878                           fsr2l	equ	0xFD9
  8879                           status	equ	0xFD8
  8880                           
  8881 ;; *************** function _motorControl *****************
  8882 ;; Defined at:
  8883 ;;		line 6 in file "motors.c"
  8884 ;; Parameters:    Size  Location     Type
  8885 ;;  motor           1    wreg     enum E2960
  8886 ;;  dir             1   38[COMRAM] enum E2966
  8887 ;; Auto vars:     Size  Location     Type
  8888 ;;  motor           1   39[COMRAM] enum E2960
  8889 ;; Return value:  Size  Location     Type
  8890 ;;                  1    wreg      void 
  8891 ;; Registers used:
  8892 ;;		wreg, status,2, status,0
  8893 ;; Tracked objects:
  8894 ;;		On entry : 0/0
  8895 ;;		On exit  : 0/0
  8896 ;;		Unchanged: 0/0
  8897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8898 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8899 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8901 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8902 ;;Total ram usage:        2 bytes
  8903 ;; Hardware stack levels used:    1
  8904 ;; Hardware stack levels required when called:    4
  8905 ;; This function calls:
  8906 ;;		Nothing
  8907 ;; This function is called by:
  8908 ;;		_packageCompartment
  8909 ;;		_clearing
  8910 ;; This function uses a non-reentrant model
  8911 ;;
  8912                           
  8913                           	psect	text23
  8914  001DB4                     __ptext23:
  8915                           	opt stack 0
  8916  001DB4                     _motorControl:
  8917                           	opt stack 23
  8918                           
  8919                           ;incstack = 0
  8920                           ;motorControl@motor stored from wreg
  8921  001DB4  6E28               	movwf	motorControl@motor,c
  8922                           
  8923                           ;motors.c: 7: switch(motor) {
  8924  001DB6  D04C               	goto	l617
  8925  001DB8                     
  8926                           ;motors.c: 9: if (dir == FORWARD) {
  8927  001DB8  5027               	movf	motorControl@dir,w,c
  8928  001DBA  A4D8               	btfss	status,2,c
  8929  001DBC  D003               	goto	l619
  8930                           
  8931                           ;motors.c: 10: LATBbits.LATB3 = 1;
  8932  001DBE  868A               	bsf	3978,3,c	;volatile
  8933                           
  8934                           ;motors.c: 11: LATCbits.LATC0 = 0;
  8935  001DC0  908B               	bcf	3979,0,c	;volatile
  8936                           
  8937                           ;motors.c: 12: } else if (dir == REVERSE) {
  8938  001DC2  0012               	return	
  8939  001DC4                     l619:
  8940  001DC4  0427               	decf	motorControl@dir,w,c
  8941  001DC6  A4D8               	btfss	status,2,c
  8942  001DC8  D003               	goto	l621
  8943                           
  8944                           ;motors.c: 13: LATBbits.LATB3 = 0;
  8945  001DCA  968A               	bcf	3978,3,c	;volatile
  8946                           
  8947                           ;motors.c: 14: LATCbits.LATC0 = 1;
  8948  001DCC  808B               	bsf	3979,0,c	;volatile
  8949                           
  8950                           ;motors.c: 15: } else if (dir == STOPMOTOR) {
  8951  001DCE  0012               	return	
  8952  001DD0                     l621:
  8953  001DD0  0E02               	movlw	2
  8954  001DD2  1827               	xorwf	motorControl@dir,w,c
  8955  001DD4  A4D8               	btfss	status,2,c
  8956  001DD6  0012               	return	
  8957                           
  8958                           ;motors.c: 16: LATBbits.LATB3 = 1;
  8959  001DD8  868A               	bsf	3978,3,c	;volatile
  8960                           
  8961                           ;motors.c: 17: LATCbits.LATC0 = 1;
  8962  001DDA  808B               	bsf	3979,0,c	;volatile
  8963                           
  8964                           ;motors.c: 18: }
  8965                           ;motors.c: 19: break;
  8966  001DDC  0012               	return	
  8967  001DDE                     
  8968                           ;motors.c: 21: if (dir == FORWARD) {
  8969  001DDE  5027               	movf	motorControl@dir,w,c
  8970  001DE0  A4D8               	btfss	status,2,c
  8971  001DE2  D003               	goto	l626
  8972                           
  8973                           ;motors.c: 22: LATCbits.LATC1 = 1;
  8974  001DE4  828B               	bsf	3979,1,c	;volatile
  8975                           
  8976                           ;motors.c: 23: LATCbits.LATC2 = 0;
  8977  001DE6  948B               	bcf	3979,2,c	;volatile
  8978                           
  8979                           ;motors.c: 24: } else if (dir == REVERSE) {
  8980  001DE8  0012               	return	
  8981  001DEA                     l626:
  8982  001DEA  0427               	decf	motorControl@dir,w,c
  8983  001DEC  A4D8               	btfss	status,2,c
  8984  001DEE  D003               	goto	l628
  8985                           
  8986                           ;motors.c: 25: LATCbits.LATC1 = 0;
  8987  001DF0  928B               	bcf	3979,1,c	;volatile
  8988                           
  8989                           ;motors.c: 26: LATCbits.LATC2 = 1;
  8990  001DF2  848B               	bsf	3979,2,c	;volatile
  8991                           
  8992                           ;motors.c: 27: } else if (dir == STOPMOTOR) {
  8993  001DF4  0012               	return	
  8994  001DF6                     l628:
  8995  001DF6  0E02               	movlw	2
  8996  001DF8  1827               	xorwf	motorControl@dir,w,c
  8997  001DFA  A4D8               	btfss	status,2,c
  8998  001DFC  0012               	return	
  8999                           
  9000                           ;motors.c: 28: LATCbits.LATC1 = 1;
  9001  001DFE  828B               	bsf	3979,1,c	;volatile
  9002                           
  9003                           ;motors.c: 29: LATCbits.LATC2 = 1;
  9004  001E00  848B               	bsf	3979,2,c	;volatile
  9005                           
  9006                           ;motors.c: 30: }
  9007                           ;motors.c: 31: break;
  9008  001E02  0012               	return	
  9009  001E04                     
  9010                           ;motors.c: 33: if (dir == FORWARD) {
  9011  001E04  5027               	movf	motorControl@dir,w,c
  9012  001E06  A4D8               	btfss	status,2,c
  9013  001E08  D003               	goto	l632
  9014                           
  9015                           ;motors.c: 34: LATCbits.LATC5 = 1;
  9016  001E0A  8A8B               	bsf	3979,5,c	;volatile
  9017                           
  9018                           ;motors.c: 35: LATCbits.LATC6 = 0;
  9019  001E0C  9C8B               	bcf	3979,6,c	;volatile
  9020                           
  9021                           ;motors.c: 36: } else if (dir == REVERSE) {
  9022  001E0E  0012               	return	
  9023  001E10                     l632:
  9024  001E10  0427               	decf	motorControl@dir,w,c
  9025  001E12  A4D8               	btfss	status,2,c
  9026  001E14  D003               	goto	l634
  9027                           
  9028                           ;motors.c: 37: LATCbits.LATC5 = 0;
  9029  001E16  9A8B               	bcf	3979,5,c	;volatile
  9030                           
  9031                           ;motors.c: 38: LATCbits.LATC6 = 1;
  9032  001E18  8C8B               	bsf	3979,6,c	;volatile
  9033                           
  9034                           ;motors.c: 39: } else if (dir == STOPMOTOR) {
  9035  001E1A  0012               	return	
  9036  001E1C                     l634:
  9037  001E1C  0E02               	movlw	2
  9038  001E1E  1827               	xorwf	motorControl@dir,w,c
  9039  001E20  A4D8               	btfss	status,2,c
  9040  001E22  0012               	return	
  9041                           
  9042                           ;motors.c: 40: LATCbits.LATC5 = 1;
  9043  001E24  8A8B               	bsf	3979,5,c	;volatile
  9044                           
  9045                           ;motors.c: 41: LATCbits.LATC6 = 1;
  9046  001E26  8C8B               	bsf	3979,6,c	;volatile
  9047                           
  9048                           ;motors.c: 42: }
  9049                           ;motors.c: 43: break;
  9050  001E28  0012               	return	
  9051  001E2A                     
  9052                           ;motors.c: 45: if (dir == FORWARD) {
  9053  001E2A  5027               	movf	motorControl@dir,w,c
  9054  001E2C  A4D8               	btfss	status,2,c
  9055  001E2E  D003               	goto	l638
  9056                           
  9057                           ;motors.c: 46: LATCbits.LATC7 = 1;
  9058  001E30  8E8B               	bsf	3979,7,c	;volatile
  9059                           
  9060                           ;motors.c: 47: LATEbits.LATE0 = 0;
  9061  001E32  908D               	bcf	3981,0,c	;volatile
  9062                           
  9063                           ;motors.c: 48: } else if (dir == REVERSE) {
  9064  001E34  0012               	return	
  9065  001E36                     l638:
  9066  001E36  0427               	decf	motorControl@dir,w,c
  9067  001E38  A4D8               	btfss	status,2,c
  9068  001E3A  D003               	goto	l640
  9069                           
  9070                           ;motors.c: 49: LATCbits.LATC7 = 0;
  9071  001E3C  9E8B               	bcf	3979,7,c	;volatile
  9072                           
  9073                           ;motors.c: 50: LATEbits.LATE0 = 1;
  9074  001E3E  808D               	bsf	3981,0,c	;volatile
  9075                           
  9076                           ;motors.c: 51: } else if (dir == STOPMOTOR) {
  9077  001E40  0012               	return	
  9078  001E42                     l640:
  9079  001E42  0E02               	movlw	2
  9080  001E44  1827               	xorwf	motorControl@dir,w,c
  9081  001E46  A4D8               	btfss	status,2,c
  9082  001E48  0012               	return	
  9083                           
  9084                           ;motors.c: 52: LATCbits.LATC7 = 1;
  9085  001E4A  8E8B               	bsf	3979,7,c	;volatile
  9086                           
  9087                           ;motors.c: 53: LATEbits.LATE0 = 1;
  9088  001E4C  808D               	bsf	3981,0,c	;volatile
  9089                           
  9090                           ;motors.c: 58: }
  9091                           
  9092                           ;motors.c: 57: break;
  9093                           
  9094                           ;motors.c: 56: default:
  9095                           
  9096                           ;motors.c: 54: }
  9097                           ;motors.c: 55: break;
  9098  001E4E  0012               	return	
  9099  001E50                     l617:
  9100  001E50  5028               	movf	motorControl@motor,w,c
  9101                           
  9102                           ; Switch size 1, requested type "space"
  9103                           ; Number of cases is 4, Range of values is 0 to 3
  9104                           ; switch strategies available:
  9105                           ; Name         Instructions Cycles
  9106                           ; simple_byte           13     7 (average)
  9107                           ;	Chosen strategy is simple_byte
  9108  001E52  0A00               	xorlw	0	; case 0
  9109  001E54  B4D8               	btfsc	status,2,c
  9110  001E56  D7B0               	goto	l618
  9111  001E58  0A01               	xorlw	1	; case 1
  9112  001E5A  B4D8               	btfsc	status,2,c
  9113  001E5C  D7C0               	goto	l625
  9114  001E5E  0A03               	xorlw	3	; case 2
  9115  001E60  B4D8               	btfsc	status,2,c
  9116  001E62  D7D0               	goto	l631
  9117  001E64  0A01               	xorlw	1	; case 3
  9118  001E66  A4D8               	btfss	status,2,c
  9119  001E68  0012               	return	
  9120  001E6A  D7DF               	goto	l637
  9121  001E6C                     __end_of_motorControl:
  9122                           	opt stack 0
  9123                           tosu	equ	0xFFF
  9124                           tosh	equ	0xFFE
  9125                           tosl	equ	0xFFD
  9126                           pclath	equ	0xFFA
  9127                           tblptru	equ	0xFF8
  9128                           tblptrh	equ	0xFF7
  9129                           tblptrl	equ	0xFF6
  9130                           tablat	equ	0xFF5
  9131                           prodh	equ	0xFF4
  9132                           prodl	equ	0xFF3
  9133                           intcon	equ	0xFF2
  9134                           indf0	equ	0xFEF
  9135                           postinc0	equ	0xFEE
  9136                           fsr0h	equ	0xFEA
  9137                           fsr0l	equ	0xFE9
  9138                           wreg	equ	0xFE8
  9139                           postdec1	equ	0xFE5
  9140                           plusw1	equ	0xFE3
  9141                           fsr1l	equ	0xFE1
  9142                           indf2	equ	0xFDF
  9143                           postinc2	equ	0xFDE
  9144                           postdec2	equ	0xFDD
  9145                           plusw2	equ	0xFDB
  9146                           fsr2h	equ	0xFDA
  9147                           fsr2l	equ	0xFD9
  9148                           status	equ	0xFD8
  9149                           
  9150 ;; *************** function _I2C_Send *****************
  9151 ;; Defined at:
  9152 ;;		line 83 in file "helpers.c"
  9153 ;; Parameters:    Size  Location     Type
  9154 ;;  address         1    wreg     unsigned char 
  9155 ;;  data            2   41[COMRAM] PTR unsigned char 
  9156 ;;		 -> STR_17(21), STR_12(14), inputEntry@msg(24), STR_11(25), 
  9157 ;;		 -> packaging@msg2(32), packaging@msg(34), STR_6(33), RAM(3967), 
  9158 ;;		 -> STR_5(19), STR_4(17), STR_3(17), STR_2(14), 
  9159 ;;		 -> STR_1(15), 
  9160 ;; Auto vars:     Size  Location     Type
  9161 ;;  address         1   46[COMRAM] unsigned char 
  9162 ;;  i               2   47[COMRAM] int 
  9163 ;; Return value:  Size  Location     Type
  9164 ;;                  1    wreg      void 
  9165 ;; Registers used:
  9166 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9167 ;; Tracked objects:
  9168 ;;		On entry : 0/0
  9169 ;;		On exit  : 0/0
  9170 ;;		Unchanged: 0/0
  9171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9172 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9173 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9174 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9175 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9176 ;;Total ram usage:        8 bytes
  9177 ;; Hardware stack levels used:    1
  9178 ;; Hardware stack levels required when called:    6
  9179 ;; This function calls:
  9180 ;;		_I2C_Master_Start
  9181 ;;		_I2C_Master_Stop
  9182 ;;		_I2C_Master_Write
  9183 ;; This function is called by:
  9184 ;;		_packageCompartment
  9185 ;;		_packaging
  9186 ;;		_clearing
  9187 ;;		_inputEntry
  9188 ;;		_mainMenu
  9189 ;; This function uses a non-reentrant model
  9190 ;;
  9191                           
  9192                           	psect	text24
  9193  002060                     __ptext24:
  9194                           	opt stack 0
  9195  002060                     _I2C_Send:
  9196                           	opt stack 21
  9197                           
  9198                           ;incstack = 0
  9199                           ;I2C_Send@address stored from wreg
  9200  002060  6E2F               	movwf	I2C_Send@address,c
  9201                           
  9202                           ;helpers.c: 88: int i=0;
  9203  002062  0E00               	movlw	0
  9204  002064  6E31               	movwf	I2C_Send@i+1,c
  9205  002066  0E00               	movlw	0
  9206  002068  6E30               	movwf	I2C_Send@i,c
  9207                           
  9208                           ;helpers.c: 90: I2C_Master_Start();
  9209  00206A  EC32  F014         	call	_I2C_Master_Start	;wreg free
  9210                           
  9211                           ;helpers.c: 91: I2C_Master_Write(address);
  9212  00206E  C02F  F028         	movff	I2C_Send@address,I2C_Master_Write@byteToWrite
  9213  002072  6A29               	clrf	I2C_Master_Write@byteToWrite+1,c
  9214  002074  EC29  F014         	call	_I2C_Master_Write	;wreg free
  9215                           
  9216                           ;helpers.c: 93: while (data[i] != 0) {
  9217  002078  D01F               	goto	l476
  9218  00207A                     
  9219                           ;helpers.c: 94: I2C_Master_Write(data[i]);
  9220  00207A  5030               	movf	I2C_Send@i,w,c
  9221  00207C  242A               	addwf	I2C_Send@data,w,c
  9222  00207E  6E2C               	movwf	??_I2C_Send& (0+255),c
  9223  002080  5031               	movf	I2C_Send@i+1,w,c
  9224  002082  202B               	addwfc	I2C_Send@data+1,w,c
  9225  002084  6E2D               	movwf	(??_I2C_Send+1)& (0+255),c
  9226  002086  C02C  FFF6         	movff	??_I2C_Send,tblptrl
  9227  00208A  C02D  FFF7         	movff	??_I2C_Send+1,tblptrh
  9228  00208E  0E00               	movlw	low (__mediumconst shr (0+16))
  9229  002090  6EF8               	movwf	tblptru,c
  9230  002092  0E0F               	movlw	(high __ramtop+-1)
  9231  002094  64F7               	cpfsgt	tblptrh,c
  9232  002096  D003               	bra	u4417
  9233  002098  0008               	tblrd		*
  9234  00209A  50F5               	movf	tablat,w,c
  9235  00209C  D005               	bra	u4410
  9236  00209E                     u4417:
  9237  00209E  CFF6 FFE9          	movff	tblptrl,fsr0l
  9238  0020A2  CFF7 FFEA          	movff	tblptrh,fsr0h
  9239  0020A6  50EF               	movf	indf0,w,c
  9240  0020A8                     u4410:
  9241  0020A8  6E2E               	movwf	(??_I2C_Send+2)& (0+255),c
  9242  0020AA  502E               	movf	??_I2C_Send+2,w,c
  9243  0020AC  6E28               	movwf	I2C_Master_Write@byteToWrite,c
  9244  0020AE  6A29               	clrf	I2C_Master_Write@byteToWrite+1,c
  9245  0020B0  EC29  F014         	call	_I2C_Master_Write	;wreg free
  9246                           
  9247                           ;helpers.c: 95: i++;
  9248  0020B4  4A30               	infsnz	I2C_Send@i,f,c
  9249  0020B6  2A31               	incf	I2C_Send@i+1,f,c
  9250  0020B8                     l476:
  9251  0020B8  5030               	movf	I2C_Send@i,w,c
  9252  0020BA  242A               	addwf	I2C_Send@data,w,c
  9253  0020BC  6E2C               	movwf	??_I2C_Send& (0+255),c
  9254  0020BE  5031               	movf	I2C_Send@i+1,w,c
  9255  0020C0  202B               	addwfc	I2C_Send@data+1,w,c
  9256  0020C2  6E2D               	movwf	(??_I2C_Send+1)& (0+255),c
  9257  0020C4  C02C  FFF6         	movff	??_I2C_Send,tblptrl
  9258  0020C8  C02D  FFF7         	movff	??_I2C_Send+1,tblptrh
  9259  0020CC  0E00               	movlw	low (__mediumconst shr (0+16))
  9260  0020CE  6EF8               	movwf	tblptru,c
  9261  0020D0  0E0F               	movlw	(high __ramtop+-1)
  9262  0020D2  64F7               	cpfsgt	tblptrh,c
  9263  0020D4  D003               	bra	u4427
  9264  0020D6  0008               	tblrd		*
  9265  0020D8  50F5               	movf	tablat,w,c
  9266  0020DA  D005               	bra	u4420
  9267  0020DC                     u4427:
  9268  0020DC  CFF6 FFE9          	movff	tblptrl,fsr0l
  9269  0020E0  CFF7 FFEA          	movff	tblptrh,fsr0h
  9270  0020E4  50EF               	movf	indf0,w,c
  9271  0020E6                     u4420:
  9272  0020E6  0900               	iorlw	0
  9273  0020E8  A4D8               	btfss	status,2,c
  9274  0020EA  D7C7               	goto	l477
  9275                           
  9276                           ;helpers.c: 96: }
  9277                           ;helpers.c: 98: I2C_Master_Stop();
  9278  0020EC  EC2E  F014         	call	_I2C_Master_Stop	;wreg free
  9279  0020F0  0012               	return	
  9280  0020F2                     __end_of_I2C_Send:
  9281                           	opt stack 0
  9282                           tosu	equ	0xFFF
  9283                           tosh	equ	0xFFE
  9284                           tosl	equ	0xFFD
  9285                           pclath	equ	0xFFA
  9286                           tblptru	equ	0xFF8
  9287                           tblptrh	equ	0xFF7
  9288                           tblptrl	equ	0xFF6
  9289                           tablat	equ	0xFF5
  9290                           prodh	equ	0xFF4
  9291                           prodl	equ	0xFF3
  9292                           intcon	equ	0xFF2
  9293                           indf0	equ	0xFEF
  9294                           postinc0	equ	0xFEE
  9295                           fsr0h	equ	0xFEA
  9296                           fsr0l	equ	0xFE9
  9297                           wreg	equ	0xFE8
  9298                           postdec1	equ	0xFE5
  9299                           plusw1	equ	0xFE3
  9300                           fsr1l	equ	0xFE1
  9301                           indf2	equ	0xFDF
  9302                           postinc2	equ	0xFDE
  9303                           postdec2	equ	0xFDD
  9304                           plusw2	equ	0xFDB
  9305                           fsr2h	equ	0xFDA
  9306                           fsr2l	equ	0xFD9
  9307                           status	equ	0xFD8
  9308                           
  9309 ;; *************** function _RTC_startOperation *****************
  9310 ;; Defined at:
  9311 ;;		line 47 in file "RTC.c"
  9312 ;; Parameters:    Size  Location     Type
  9313 ;;		None
  9314 ;; Auto vars:     Size  Location     Type
  9315 ;;		None
  9316 ;; Return value:  Size  Location     Type
  9317 ;;                  1    wreg      void 
  9318 ;; Registers used:
  9319 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9320 ;; Tracked objects:
  9321 ;;		On entry : 0/0
  9322 ;;		On exit  : 0/0
  9323 ;;		Unchanged: 0/0
  9324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9328 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9329 ;;Total ram usage:        0 bytes
  9330 ;; Hardware stack levels used:    1
  9331 ;; Hardware stack levels required when called:    8
  9332 ;; This function calls:
  9333 ;;		_RTC_getSeconds
  9334 ;; This function is called by:
  9335 ;;		_mainMenu
  9336 ;; This function uses a non-reentrant model
  9337 ;;
  9338                           
  9339                           	psect	text25
  9340  0027E2                     __ptext25:
  9341                           	opt stack 0
  9342  0027E2                     _RTC_startOperation:
  9343                           	opt stack 21
  9344                           
  9345                           ;RTC.c: 49: startTime = RTC_getSeconds();
  9346                           
  9347                           ;incstack = 0
  9348  0027E2  EC7C  F011         	call	_RTC_getSeconds	;wreg free
  9349  0027E6  C02D  F048         	movff	?_RTC_getSeconds,_startTime
  9350  0027EA  C02E  F049         	movff	?_RTC_getSeconds+1,_startTime+1
  9351  0027EE  C02F  F04A         	movff	?_RTC_getSeconds+2,_startTime+2
  9352  0027F2  C030  F04B         	movff	?_RTC_getSeconds+3,_startTime+3
  9353  0027F6  0012               	return		;funcret
  9354  0027F8                     __end_of_RTC_startOperation:
  9355                           	opt stack 0
  9356                           tosu	equ	0xFFF
  9357                           tosh	equ	0xFFE
  9358                           tosl	equ	0xFFD
  9359                           pclath	equ	0xFFA
  9360                           tblptru	equ	0xFF8
  9361                           tblptrh	equ	0xFF7
  9362                           tblptrl	equ	0xFF6
  9363                           tablat	equ	0xFF5
  9364                           prodh	equ	0xFF4
  9365                           prodl	equ	0xFF3
  9366                           intcon	equ	0xFF2
  9367                           indf0	equ	0xFEF
  9368                           postinc0	equ	0xFEE
  9369                           fsr0h	equ	0xFEA
  9370                           fsr0l	equ	0xFE9
  9371                           wreg	equ	0xFE8
  9372                           postdec1	equ	0xFE5
  9373                           plusw1	equ	0xFE3
  9374                           fsr1l	equ	0xFE1
  9375                           indf2	equ	0xFDF
  9376                           postinc2	equ	0xFDE
  9377                           postdec2	equ	0xFDD
  9378                           plusw2	equ	0xFDB
  9379                           fsr2h	equ	0xFDA
  9380                           fsr2l	equ	0xFD9
  9381                           status	equ	0xFD8
  9382                           
  9383 ;; *************** function _RTC_getOperatingTime *****************
  9384 ;; Defined at:
  9385 ;;		line 52 in file "RTC.c"
  9386 ;; Parameters:    Size  Location     Type
  9387 ;;		None
  9388 ;; Auto vars:     Size  Location     Type
  9389 ;;		None
  9390 ;; Return value:  Size  Location     Type
  9391 ;;                  4   11[BANK0 ] long 
  9392 ;; Registers used:
  9393 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9394 ;; Tracked objects:
  9395 ;;		On entry : 0/0
  9396 ;;		On exit  : 0/0
  9397 ;;		Unchanged: 0/0
  9398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9399 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9401 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9402 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9403 ;;Total ram usage:        8 bytes
  9404 ;; Hardware stack levels used:    1
  9405 ;; Hardware stack levels required when called:    8
  9406 ;; This function calls:
  9407 ;;		_RTC_getSeconds
  9408 ;; This function is called by:
  9409 ;;		_mainMenu
  9410 ;; This function uses a non-reentrant model
  9411 ;;
  9412                           
  9413                           	psect	text26
  9414  002518                     __ptext26:
  9415                           	opt stack 0
  9416  002518                     _RTC_getOperatingTime:
  9417                           	opt stack 21
  9418                           
  9419                           ;RTC.c: 54: endTime = RTC_getSeconds();
  9420                           
  9421                           ;incstack = 0
  9422  002518  EC7C  F011         	call	_RTC_getSeconds	;wreg free
  9423  00251C  C02D  F044         	movff	?_RTC_getSeconds,_endTime
  9424  002520  C02E  F045         	movff	?_RTC_getSeconds+1,_endTime+1
  9425  002524  C02F  F046         	movff	?_RTC_getSeconds+2,_endTime+2
  9426  002528  C030  F047         	movff	?_RTC_getSeconds+3,_endTime+3
  9427                           
  9428                           ;RTC.c: 55: return endTime - startTime;
  9429  00252C  C048  F08F         	movff	_startTime,??_RTC_getOperatingTime
  9430  002530  C049  F090         	movff	_startTime+1,??_RTC_getOperatingTime+1
  9431  002534  C04A  F091         	movff	_startTime+2,??_RTC_getOperatingTime+2
  9432  002538  C04B  F092         	movff	_startTime+3,??_RTC_getOperatingTime+3
  9433  00253C  0100               	movlb	0	; () banked
  9434  00253E  1F8F               	comf	??_RTC_getOperatingTime& (0+255),f,b
  9435  002540  1F90               	comf	(??_RTC_getOperatingTime+1)& (0+255),f,b
  9436  002542  1F91               	comf	(??_RTC_getOperatingTime+2)& (0+255),f,b
  9437  002544  1F92               	comf	(??_RTC_getOperatingTime+3)& (0+255),f,b
  9438  002546  2B8F               	incf	??_RTC_getOperatingTime& (0+255),f,b
  9439  002548  0E00               	movlw	0
  9440  00254A  2390               	addwfc	(??_RTC_getOperatingTime+1)& (0+255),f,b
  9441  00254C  2391               	addwfc	(??_RTC_getOperatingTime+2)& (0+255),f,b
  9442  00254E  2392               	addwfc	(??_RTC_getOperatingTime+3)& (0+255),f,b
  9443  002550  5044               	movf	_endTime,w,c
  9444  002552  258F               	addwf	??_RTC_getOperatingTime& (0+255),w,b
  9445  002554  6F8B               	movwf	?_RTC_getOperatingTime& (0+255),b
  9446  002556  5045               	movf	_endTime+1,w,c
  9447  002558  2190               	addwfc	(??_RTC_getOperatingTime+1)& (0+255),w,b
  9448  00255A  6F8C               	movwf	(?_RTC_getOperatingTime+1)& (0+255),b
  9449  00255C  5046               	movf	_endTime+2,w,c
  9450  00255E  2191               	addwfc	(??_RTC_getOperatingTime+2)& (0+255),w,b
  9451  002560  6F8D               	movwf	(?_RTC_getOperatingTime+2)& (0+255),b
  9452  002562  5047               	movf	_endTime+3,w,c
  9453  002564  2192               	addwfc	(??_RTC_getOperatingTime+3)& (0+255),w,b
  9454  002566  6F8E               	movwf	(?_RTC_getOperatingTime+3)& (0+255),b
  9455  002568  0012               	return	
  9456  00256A                     __end_of_RTC_getOperatingTime:
  9457                           	opt stack 0
  9458                           tosu	equ	0xFFF
  9459                           tosh	equ	0xFFE
  9460                           tosl	equ	0xFFD
  9461                           pclath	equ	0xFFA
  9462                           tblptru	equ	0xFF8
  9463                           tblptrh	equ	0xFF7
  9464                           tblptrl	equ	0xFF6
  9465                           tablat	equ	0xFF5
  9466                           prodh	equ	0xFF4
  9467                           prodl	equ	0xFF3
  9468                           intcon	equ	0xFF2
  9469                           indf0	equ	0xFEF
  9470                           postinc0	equ	0xFEE
  9471                           fsr0h	equ	0xFEA
  9472                           fsr0l	equ	0xFE9
  9473                           wreg	equ	0xFE8
  9474                           postdec1	equ	0xFE5
  9475                           plusw1	equ	0xFE3
  9476                           fsr1l	equ	0xFE1
  9477                           indf2	equ	0xFDF
  9478                           postinc2	equ	0xFDE
  9479                           postdec2	equ	0xFDD
  9480                           plusw2	equ	0xFDB
  9481                           fsr2h	equ	0xFDA
  9482                           fsr2l	equ	0xFD9
  9483                           status	equ	0xFD8
  9484                           
  9485 ;; *************** function _RTC_getSeconds *****************
  9486 ;; Defined at:
  9487 ;;		line 36 in file "RTC.c"
  9488 ;; Parameters:    Size  Location     Type
  9489 ;;		None
  9490 ;; Auto vars:     Size  Location     Type
  9491 ;;  time            7    0[BANK0 ] unsigned char [7]
  9492 ;;  seconds         4    7[BANK0 ] long 
  9493 ;; Return value:  Size  Location     Type
  9494 ;;                  4   44[COMRAM] long 
  9495 ;; Registers used:
  9496 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9497 ;; Tracked objects:
  9498 ;;		On entry : 0/0
  9499 ;;		On exit  : 0/0
  9500 ;;		Unchanged: 0/0
  9501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9502 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9503 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9504 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9505 ;;      Totals:         6      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9506 ;;Total ram usage:       17 bytes
  9507 ;; Hardware stack levels used:    1
  9508 ;; Hardware stack levels required when called:    7
  9509 ;; This function calls:
  9510 ;;		_RTC_getTime
  9511 ;;		___wmul
  9512 ;; This function is called by:
  9513 ;;		_RTC_startOperation
  9514 ;;		_RTC_getOperatingTime
  9515 ;; This function uses a non-reentrant model
  9516 ;;
  9517                           
  9518                           	psect	text27
  9519  0022F8                     __ptext27:
  9520                           	opt stack 0
  9521  0022F8                     _RTC_getSeconds:
  9522                           	opt stack 21
  9523                           
  9524                           ;RTC.c: 40: unsigned char time[7];
  9525                           ;RTC.c: 41: RTC_getTime(time);
  9526                           
  9527                           ; BSR set to: 0
  9528                           ;incstack = 0
  9529  0022F8  0E80               	movlw	low RTC_getSeconds@time
  9530  0022FA  6E2A               	movwf	RTC_getTime@time,c
  9531  0022FC  0E00               	movlw	high RTC_getSeconds@time
  9532  0022FE  6E2B               	movwf	RTC_getTime@time+1,c
  9533  002300  ECB9  F011         	call	_RTC_getTime	;wreg free
  9534                           
  9535                           ;RTC.c: 43: long seconds = time[0] + 60*time[1] + 60*60*time[2] + 60*60*24*time[3];
  9536  002304  C082  F027         	movff	RTC_getSeconds@time+2,___wmul@multiplier
  9537  002308  6A28               	clrf	___wmul@multiplier+1,c
  9538  00230A  0E0E               	movlw	14
  9539  00230C  6E2A               	movwf	___wmul@multiplicand+1,c
  9540  00230E  0E10               	movlw	16
  9541  002310  6E29               	movwf	___wmul@multiplicand,c
  9542  002312  ECAD  F013         	call	___wmul	;wreg free
  9543  002316  0100               	movlb	0	; () banked
  9544  002318  5181               	movf	(RTC_getSeconds@time+1)& (0+255),w,b
  9545  00231A  0D3C               	mullw	60
  9546  00231C  5180               	movf	RTC_getSeconds@time& (0+255),w,b
  9547  00231E  6E31               	movwf	??_RTC_getSeconds& (0+255),c
  9548  002320  6A32               	clrf	(??_RTC_getSeconds+1)& (0+255),c
  9549  002322  50F3               	movf	prodl,w,c
  9550  002324  2631               	addwf	??_RTC_getSeconds,f,c
  9551  002326  50F4               	movf	prodh,w,c
  9552  002328  2232               	addwfc	??_RTC_getSeconds+1,f,c
  9553  00232A  5027               	movf	?___wmul,w,c
  9554  00232C  2631               	addwf	??_RTC_getSeconds,f,c
  9555  00232E  5028               	movf	?___wmul+1,w,c
  9556  002330  2232               	addwfc	??_RTC_getSeconds+1,f,c
  9557  002332  C083  F027         	movff	RTC_getSeconds@time+3,___wmul@multiplier
  9558  002336  6A28               	clrf	___wmul@multiplier+1,c
  9559  002338  0E51               	movlw	81
  9560  00233A  6E2A               	movwf	___wmul@multiplicand+1,c
  9561  00233C  0E80               	movlw	128
  9562  00233E  6E29               	movwf	___wmul@multiplicand,c
  9563  002340  ECAD  F013         	call	___wmul	;wreg free
  9564  002344  5027               	movf	?___wmul,w,c
  9565  002346  2631               	addwf	??_RTC_getSeconds,f,c
  9566  002348  5028               	movf	?___wmul+1,w,c
  9567  00234A  2232               	addwfc	??_RTC_getSeconds+1,f,c
  9568  00234C  C031  F087         	movff	??_RTC_getSeconds,RTC_getSeconds@seconds
  9569  002350  C032  F088         	movff	??_RTC_getSeconds+1,RTC_getSeconds@seconds+1
  9570  002354  0100               	movlb	0	; () banked
  9571  002356  0E00               	movlw	0
  9572  002358  BF88               	btfsc	(RTC_getSeconds@seconds+1)& (0+255),7,b
  9573  00235A  0EFF               	movlw	-1
  9574  00235C  6F89               	movwf	(RTC_getSeconds@seconds+2)& (0+255),b
  9575  00235E  6F8A               	movwf	(RTC_getSeconds@seconds+3)& (0+255),b
  9576                           
  9577                           ; BSR set to: 0
  9578                           ;RTC.c: 44: return seconds;
  9579  002360  C087  F02D         	movff	RTC_getSeconds@seconds,?_RTC_getSeconds
  9580  002364  C088  F02E         	movff	RTC_getSeconds@seconds+1,?_RTC_getSeconds+1
  9581  002368  C089  F02F         	movff	RTC_getSeconds@seconds+2,?_RTC_getSeconds+2
  9582  00236C  C08A  F030         	movff	RTC_getSeconds@seconds+3,?_RTC_getSeconds+3
  9583  002370  0012               	return	
  9584  002372                     __end_of_RTC_getSeconds:
  9585                           	opt stack 0
  9586                           tosu	equ	0xFFF
  9587                           tosh	equ	0xFFE
  9588                           tosl	equ	0xFFD
  9589                           pclath	equ	0xFFA
  9590                           tblptru	equ	0xFF8
  9591                           tblptrh	equ	0xFF7
  9592                           tblptrl	equ	0xFF6
  9593                           tablat	equ	0xFF5
  9594                           prodh	equ	0xFF4
  9595                           prodl	equ	0xFF3
  9596                           intcon	equ	0xFF2
  9597                           indf0	equ	0xFEF
  9598                           postinc0	equ	0xFEE
  9599                           fsr0h	equ	0xFEA
  9600                           fsr0l	equ	0xFE9
  9601                           wreg	equ	0xFE8
  9602                           postdec1	equ	0xFE5
  9603                           plusw1	equ	0xFE3
  9604                           fsr1l	equ	0xFE1
  9605                           indf2	equ	0xFDF
  9606                           postinc2	equ	0xFDE
  9607                           postdec2	equ	0xFDD
  9608                           plusw2	equ	0xFDB
  9609                           fsr2h	equ	0xFDA
  9610                           fsr2l	equ	0xFD9
  9611                           status	equ	0xFD8
  9612                           
  9613 ;; *************** function ___wmul *****************
  9614 ;; Defined at:
  9615 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  9616 ;; Parameters:    Size  Location     Type
  9617 ;;  multiplier      2   38[COMRAM] unsigned int 
  9618 ;;  multiplicand    2   40[COMRAM] unsigned int 
  9619 ;; Auto vars:     Size  Location     Type
  9620 ;;  product         2   42[COMRAM] unsigned int 
  9621 ;; Return value:  Size  Location     Type
  9622 ;;                  2   38[COMRAM] unsigned int 
  9623 ;; Registers used:
  9624 ;;		wreg, status,2, status,0, prodl, prodh
  9625 ;; Tracked objects:
  9626 ;;		On entry : 0/0
  9627 ;;		On exit  : 0/0
  9628 ;;		Unchanged: 0/0
  9629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9630 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9631 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9633 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9634 ;;Total ram usage:        6 bytes
  9635 ;; Hardware stack levels used:    1
  9636 ;; Hardware stack levels required when called:    4
  9637 ;; This function calls:
  9638 ;;		Nothing
  9639 ;; This function is called by:
  9640 ;;		_packaging
  9641 ;;		_inputEntry
  9642 ;;		_RTC_getSeconds
  9643 ;; This function uses a non-reentrant model
  9644 ;;
  9645                           
  9646                           	psect	text28
  9647  00275A                     __ptext28:
  9648                           	opt stack 0
  9649  00275A                     ___wmul:
  9650                           	opt stack 24
  9651                           
  9652                           ; BSR set to: 0
  9653                           ;incstack = 0
  9654  00275A  5027               	movf	___wmul@multiplier,w,c
  9655  00275C  0229               	mulwf	___wmul@multiplicand,c
  9656  00275E  CFF3 F02B          	movff	prodl,___wmul@product
  9657  002762  CFF4 F02C          	movff	prodh,___wmul@product+1
  9658  002766  5027               	movf	___wmul@multiplier,w,c
  9659  002768  022A               	mulwf	___wmul@multiplicand+1,c
  9660  00276A  50F3               	movf	prodl,w,c
  9661  00276C  262C               	addwf	___wmul@product+1,f,c
  9662  00276E  5028               	movf	___wmul@multiplier+1,w,c
  9663  002770  0229               	mulwf	___wmul@multiplicand,c
  9664  002772  50F3               	movf	prodl,w,c
  9665  002774  262C               	addwf	___wmul@product+1,f,c
  9666  002776  C02B  F027         	movff	___wmul@product,?___wmul
  9667  00277A  C02C  F028         	movff	___wmul@product+1,?___wmul+1
  9668  00277E  0012               	return	
  9669  002780                     __end_of___wmul:
  9670                           	opt stack 0
  9671                           tosu	equ	0xFFF
  9672                           tosh	equ	0xFFE
  9673                           tosl	equ	0xFFD
  9674                           pclath	equ	0xFFA
  9675                           tblptru	equ	0xFF8
  9676                           tblptrh	equ	0xFF7
  9677                           tblptrl	equ	0xFF6
  9678                           tablat	equ	0xFF5
  9679                           prodh	equ	0xFF4
  9680                           prodl	equ	0xFF3
  9681                           intcon	equ	0xFF2
  9682                           indf0	equ	0xFEF
  9683                           postinc0	equ	0xFEE
  9684                           fsr0h	equ	0xFEA
  9685                           fsr0l	equ	0xFE9
  9686                           wreg	equ	0xFE8
  9687                           postdec1	equ	0xFE5
  9688                           plusw1	equ	0xFE3
  9689                           fsr1l	equ	0xFE1
  9690                           indf2	equ	0xFDF
  9691                           postinc2	equ	0xFDE
  9692                           postdec2	equ	0xFDD
  9693                           plusw2	equ	0xFDB
  9694                           fsr2h	equ	0xFDA
  9695                           fsr2l	equ	0xFD9
  9696                           status	equ	0xFD8
  9697                           
  9698 ;; *************** function _RTC_getTime *****************
  9699 ;; Defined at:
  9700 ;;		line 16 in file "RTC.c"
  9701 ;; Parameters:    Size  Location     Type
  9702 ;;  time            2   41[COMRAM] PTR unsigned char 
  9703 ;;		 -> RTC_getSeconds@time(7), 
  9704 ;; Auto vars:     Size  Location     Type
  9705 ;;  i               1   43[COMRAM] unsigned char 
  9706 ;; Return value:  Size  Location     Type
  9707 ;;                  1    wreg      void 
  9708 ;; Registers used:
  9709 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9710 ;; Tracked objects:
  9711 ;;		On entry : 0/0
  9712 ;;		On exit  : 0/0
  9713 ;;		Unchanged: 0/0
  9714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9715 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9716 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9718 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9719 ;;Total ram usage:        3 bytes
  9720 ;; Hardware stack levels used:    1
  9721 ;; Hardware stack levels required when called:    6
  9722 ;; This function calls:
  9723 ;;		_I2C_Master_Read
  9724 ;;		_I2C_Master_Start
  9725 ;;		_I2C_Master_Stop
  9726 ;;		_I2C_Master_Write
  9727 ;; This function is called by:
  9728 ;;		_RTC_getSeconds
  9729 ;; This function uses a non-reentrant model
  9730 ;;
  9731                           
  9732                           	psect	text29
  9733  002372                     __ptext29:
  9734                           	opt stack 0
  9735  002372                     _RTC_getTime:
  9736                           	opt stack 21
  9737                           
  9738                           ;RTC.c: 18: I2C_Master_Start();
  9739                           
  9740                           ;incstack = 0
  9741  002372  EC32  F014         	call	_I2C_Master_Start	;wreg free
  9742                           
  9743                           ;RTC.c: 19: I2C_Master_Write(0b11010000);
  9744  002376  0E00               	movlw	0
  9745  002378  6E29               	movwf	I2C_Master_Write@byteToWrite+1,c
  9746  00237A  0ED0               	movlw	208
  9747  00237C  6E28               	movwf	I2C_Master_Write@byteToWrite,c
  9748  00237E  EC29  F014         	call	_I2C_Master_Write	;wreg free
  9749                           
  9750                           ;RTC.c: 20: I2C_Master_Write(0x00);
  9751  002382  0E00               	movlw	0
  9752  002384  6E29               	movwf	I2C_Master_Write@byteToWrite+1,c
  9753  002386  0E00               	movlw	0
  9754  002388  6E28               	movwf	I2C_Master_Write@byteToWrite,c
  9755  00238A  EC29  F014         	call	_I2C_Master_Write	;wreg free
  9756                           
  9757                           ;RTC.c: 21: I2C_Master_Stop();
  9758  00238E  EC2E  F014         	call	_I2C_Master_Stop	;wreg free
  9759                           
  9760                           ;RTC.c: 24: char i;
  9761                           ;RTC.c: 26: I2C_Master_Start();
  9762  002392  EC32  F014         	call	_I2C_Master_Start	;wreg free
  9763                           
  9764                           ;RTC.c: 27: I2C_Master_Write(0b11010001);
  9765  002396  0E00               	movlw	0
  9766  002398  6E29               	movwf	I2C_Master_Write@byteToWrite+1,c
  9767  00239A  0ED1               	movlw	209
  9768  00239C  6E28               	movwf	I2C_Master_Write@byteToWrite,c
  9769  00239E  EC29  F014         	call	_I2C_Master_Write	;wreg free
  9770                           
  9771                           ;RTC.c: 29: for (i = 0; i < 6; i++) {
  9772  0023A2  0E00               	movlw	0
  9773  0023A4  6E2C               	movwf	RTC_getTime@i,c
  9774  0023A6                     l4233:
  9775  0023A6  0E05               	movlw	5
  9776  0023A8  642C               	cpfsgt	RTC_getTime@i,c
  9777  0023AA  D001               	goto	l516
  9778  0023AC  D00E               	goto	u4700
  9779  0023AE                     l516:
  9780                           
  9781                           ;RTC.c: 30: time[i] = I2C_Master_Read(0);
  9782  0023AE  502C               	movf	RTC_getTime@i,w,c
  9783  0023B0  0D01               	mullw	1
  9784  0023B2  50F3               	movf	prodl,w,c
  9785  0023B4  242A               	addwf	RTC_getTime@time,w,c
  9786  0023B6  6ED9               	movwf	fsr2l,c
  9787  0023B8  50F4               	movf	prodh,w,c
  9788  0023BA  202B               	addwfc	RTC_getTime@time+1,w,c
  9789  0023BC  6EDA               	movwf	fsr2h,c
  9790  0023BE  0E00               	movlw	0
  9791  0023C0  ECC0  F013         	call	_I2C_Master_Read
  9792  0023C4  6EDF               	movwf	indf2,c
  9793  0023C6  2A2C               	incf	RTC_getTime@i,f,c
  9794  0023C8  D7EE               	goto	l4233
  9795  0023CA                     u4700:
  9796                           
  9797                           ;RTC.c: 31: }
  9798                           ;RTC.c: 32: time[6] = I2C_Master_Read(1);
  9799  0023CA  EE20 F006          	lfsr	2,6
  9800  0023CE  502A               	movf	RTC_getTime@time,w,c
  9801  0023D0  26D9               	addwf	fsr2l,f,c
  9802  0023D2  502B               	movf	RTC_getTime@time+1,w,c
  9803  0023D4  22DA               	addwfc	fsr2h,f,c
  9804  0023D6  0E01               	movlw	1
  9805  0023D8  ECC0  F013         	call	_I2C_Master_Read
  9806  0023DC  6EDF               	movwf	indf2,c
  9807                           
  9808                           ;RTC.c: 33: I2C_Master_Stop();
  9809  0023DE  EC2E  F014         	call	_I2C_Master_Stop	;wreg free
  9810  0023E2  0012               	return		;funcret
  9811  0023E4                     __end_of_RTC_getTime:
  9812                           	opt stack 0
  9813                           tosu	equ	0xFFF
  9814                           tosh	equ	0xFFE
  9815                           tosl	equ	0xFFD
  9816                           pclath	equ	0xFFA
  9817                           tblptru	equ	0xFF8
  9818                           tblptrh	equ	0xFF7
  9819                           tblptrl	equ	0xFF6
  9820                           tablat	equ	0xFF5
  9821                           prodh	equ	0xFF4
  9822                           prodl	equ	0xFF3
  9823                           intcon	equ	0xFF2
  9824                           indf0	equ	0xFEF
  9825                           postinc0	equ	0xFEE
  9826                           fsr0h	equ	0xFEA
  9827                           fsr0l	equ	0xFE9
  9828                           wreg	equ	0xFE8
  9829                           postdec1	equ	0xFE5
  9830                           plusw1	equ	0xFE3
  9831                           fsr1l	equ	0xFE1
  9832                           indf2	equ	0xFDF
  9833                           postinc2	equ	0xFDE
  9834                           postdec2	equ	0xFDD
  9835                           plusw2	equ	0xFDB
  9836                           fsr2h	equ	0xFDA
  9837                           fsr2l	equ	0xFD9
  9838                           status	equ	0xFD8
  9839                           
  9840 ;; *************** function _I2C_Master_Write *****************
  9841 ;; Defined at:
  9842 ;;		line 108 in file "I2C.c"
  9843 ;; Parameters:    Size  Location     Type
  9844 ;;  byteToWrite     2   39[COMRAM] unsigned int 
  9845 ;; Auto vars:     Size  Location     Type
  9846 ;;		None
  9847 ;; Return value:  Size  Location     Type
  9848 ;;                  1    wreg      void 
  9849 ;; Registers used:
  9850 ;;		wreg, status,2, status,0, cstack
  9851 ;; Tracked objects:
  9852 ;;		On entry : 0/0
  9853 ;;		On exit  : 0/0
  9854 ;;		Unchanged: 0/0
  9855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9856 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9859 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9860 ;;Total ram usage:        2 bytes
  9861 ;; Hardware stack levels used:    1
  9862 ;; Hardware stack levels required when called:    5
  9863 ;; This function calls:
  9864 ;;		_I2C_Master_Wait
  9865 ;; This function is called by:
  9866 ;;		_I2C_Send
  9867 ;;		_RTC_getTime
  9868 ;; This function uses a non-reentrant model
  9869 ;;
  9870                           
  9871                           	psect	text30
  9872  002852                     __ptext30:
  9873                           	opt stack 0
  9874  002852                     _I2C_Master_Write:
  9875                           	opt stack 21
  9876                           
  9877                           ;I2C.c: 116: I2C_Master_Wait();
  9878                           
  9879                           ;incstack = 0
  9880  002852  EC19  F014         	call	_I2C_Master_Wait	;wreg free
  9881                           
  9882                           ;I2C.c: 117: SSPBUF = byteToWrite;
  9883  002856  C028  FFC9         	movff	I2C_Master_Write@byteToWrite,4041	;volatile
  9884  00285A  0012               	return		;funcret
  9885  00285C                     __end_of_I2C_Master_Write:
  9886                           	opt stack 0
  9887                           tosu	equ	0xFFF
  9888                           tosh	equ	0xFFE
  9889                           tosl	equ	0xFFD
  9890                           pclath	equ	0xFFA
  9891                           tblptru	equ	0xFF8
  9892                           tblptrh	equ	0xFF7
  9893                           tblptrl	equ	0xFF6
  9894                           tablat	equ	0xFF5
  9895                           prodh	equ	0xFF4
  9896                           prodl	equ	0xFF3
  9897                           intcon	equ	0xFF2
  9898                           indf0	equ	0xFEF
  9899                           postinc0	equ	0xFEE
  9900                           fsr0h	equ	0xFEA
  9901                           fsr0l	equ	0xFE9
  9902                           wreg	equ	0xFE8
  9903                           postdec1	equ	0xFE5
  9904                           plusw1	equ	0xFE3
  9905                           fsr1l	equ	0xFE1
  9906                           indf2	equ	0xFDF
  9907                           postinc2	equ	0xFDE
  9908                           postdec2	equ	0xFDD
  9909                           plusw2	equ	0xFDB
  9910                           fsr2h	equ	0xFDA
  9911                           fsr2l	equ	0xFD9
  9912                           status	equ	0xFD8
  9913                           
  9914 ;; *************** function _I2C_Master_Stop *****************
  9915 ;; Defined at:
  9916 ;;		line 95 in file "I2C.c"
  9917 ;; Parameters:    Size  Location     Type
  9918 ;;		None
  9919 ;; Auto vars:     Size  Location     Type
  9920 ;;		None
  9921 ;; Return value:  Size  Location     Type
  9922 ;;                  1    wreg      void 
  9923 ;; Registers used:
  9924 ;;		wreg, status,2, status,0, cstack
  9925 ;; Tracked objects:
  9926 ;;		On entry : 0/0
  9927 ;;		On exit  : 0/0
  9928 ;;		Unchanged: 0/0
  9929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9933 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9934 ;;Total ram usage:        0 bytes
  9935 ;; Hardware stack levels used:    1
  9936 ;; Hardware stack levels required when called:    5
  9937 ;; This function calls:
  9938 ;;		_I2C_Master_Wait
  9939 ;; This function is called by:
  9940 ;;		_I2C_Send
  9941 ;;		_RTC_getTime
  9942 ;; This function uses a non-reentrant model
  9943 ;;
  9944                           
  9945                           	psect	text31
  9946  00285C                     __ptext31:
  9947                           	opt stack 0
  9948  00285C                     _I2C_Master_Stop:
  9949                           	opt stack 21
  9950                           
  9951                           ;I2C.c: 104: I2C_Master_Wait();
  9952                           
  9953                           ;incstack = 0
  9954  00285C  EC19  F014         	call	_I2C_Master_Wait	;wreg free
  9955                           
  9956                           ;I2C.c: 105: SSPCON2bits.PEN = 1;
  9957  002860  84C5               	bsf	4037,2,c	;volatile
  9958  002862  0012               	return		;funcret
  9959  002864                     __end_of_I2C_Master_Stop:
  9960                           	opt stack 0
  9961                           tosu	equ	0xFFF
  9962                           tosh	equ	0xFFE
  9963                           tosl	equ	0xFFD
  9964                           pclath	equ	0xFFA
  9965                           tblptru	equ	0xFF8
  9966                           tblptrh	equ	0xFF7
  9967                           tblptrl	equ	0xFF6
  9968                           tablat	equ	0xFF5
  9969                           prodh	equ	0xFF4
  9970                           prodl	equ	0xFF3
  9971                           intcon	equ	0xFF2
  9972                           indf0	equ	0xFEF
  9973                           postinc0	equ	0xFEE
  9974                           fsr0h	equ	0xFEA
  9975                           fsr0l	equ	0xFE9
  9976                           wreg	equ	0xFE8
  9977                           postdec1	equ	0xFE5
  9978                           plusw1	equ	0xFE3
  9979                           fsr1l	equ	0xFE1
  9980                           indf2	equ	0xFDF
  9981                           postinc2	equ	0xFDE
  9982                           postdec2	equ	0xFDD
  9983                           plusw2	equ	0xFDB
  9984                           fsr2h	equ	0xFDA
  9985                           fsr2l	equ	0xFD9
  9986                           status	equ	0xFD8
  9987                           
  9988 ;; *************** function _I2C_Master_Start *****************
  9989 ;; Defined at:
  9990 ;;		line 69 in file "I2C.c"
  9991 ;; Parameters:    Size  Location     Type
  9992 ;;		None
  9993 ;; Auto vars:     Size  Location     Type
  9994 ;;		None
  9995 ;; Return value:  Size  Location     Type
  9996 ;;                  1    wreg      void 
  9997 ;; Registers used:
  9998 ;;		wreg, status,2, status,0, cstack
  9999 ;; Tracked objects:
 10000 ;;		On entry : 0/0
 10001 ;;		On exit  : 0/0
 10002 ;;		Unchanged: 0/0
 10003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10007 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10008 ;;Total ram usage:        0 bytes
 10009 ;; Hardware stack levels used:    1
 10010 ;; Hardware stack levels required when called:    5
 10011 ;; This function calls:
 10012 ;;		_I2C_Master_Wait
 10013 ;; This function is called by:
 10014 ;;		_I2C_Send
 10015 ;;		_RTC_getTime
 10016 ;; This function uses a non-reentrant model
 10017 ;;
 10018                           
 10019                           	psect	text32
 10020  002864                     __ptext32:
 10021                           	opt stack 0
 10022  002864                     _I2C_Master_Start:
 10023                           	opt stack 21
 10024                           
 10025                           ;I2C.c: 78: I2C_Master_Wait();
 10026                           
 10027                           ;incstack = 0
 10028  002864  EC19  F014         	call	_I2C_Master_Wait	;wreg free
 10029                           
 10030                           ;I2C.c: 79: SSPCON2bits.SEN = 1;
 10031  002868  80C5               	bsf	4037,0,c	;volatile
 10032  00286A  0012               	return		;funcret
 10033  00286C                     __end_of_I2C_Master_Start:
 10034                           	opt stack 0
 10035                           tosu	equ	0xFFF
 10036                           tosh	equ	0xFFE
 10037                           tosl	equ	0xFFD
 10038                           pclath	equ	0xFFA
 10039                           tblptru	equ	0xFF8
 10040                           tblptrh	equ	0xFF7
 10041                           tblptrl	equ	0xFF6
 10042                           tablat	equ	0xFF5
 10043                           prodh	equ	0xFF4
 10044                           prodl	equ	0xFF3
 10045                           intcon	equ	0xFF2
 10046                           indf0	equ	0xFEF
 10047                           postinc0	equ	0xFEE
 10048                           fsr0h	equ	0xFEA
 10049                           fsr0l	equ	0xFE9
 10050                           wreg	equ	0xFE8
 10051                           postdec1	equ	0xFE5
 10052                           plusw1	equ	0xFE3
 10053                           fsr1l	equ	0xFE1
 10054                           indf2	equ	0xFDF
 10055                           postinc2	equ	0xFDE
 10056                           postdec2	equ	0xFDD
 10057                           plusw2	equ	0xFDB
 10058                           fsr2h	equ	0xFDA
 10059                           fsr2l	equ	0xFD9
 10060                           status	equ	0xFD8
 10061                           
 10062 ;; *************** function _I2C_Master_Read *****************
 10063 ;; Defined at:
 10064 ;;		line 120 in file "I2C.c"
 10065 ;; Parameters:    Size  Location     Type
 10066 ;;  ackBit          1    wreg     unsigned char 
 10067 ;; Auto vars:     Size  Location     Type
 10068 ;;  ackBit          1   39[COMRAM] unsigned char 
 10069 ;;  receivedByte    1   40[COMRAM] unsigned char 
 10070 ;; Return value:  Size  Location     Type
 10071 ;;                  1    wreg      unsigned char 
 10072 ;; Registers used:
 10073 ;;		wreg, status,2, status,0, cstack
 10074 ;; Tracked objects:
 10075 ;;		On entry : 0/0
 10076 ;;		On exit  : 0/0
 10077 ;;		Unchanged: 0/0
 10078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10080 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10082 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10083 ;;Total ram usage:        2 bytes
 10084 ;; Hardware stack levels used:    1
 10085 ;; Hardware stack levels required when called:    5
 10086 ;; This function calls:
 10087 ;;		_I2C_Master_Wait
 10088 ;; This function is called by:
 10089 ;;		_RTC_getTime
 10090 ;; This function uses a non-reentrant model
 10091 ;;
 10092                           
 10093                           	psect	text33
 10094  002780                     __ptext33:
 10095                           	opt stack 0
 10096  002780                     _I2C_Master_Read:
 10097                           	opt stack 21
 10098                           
 10099                           ;incstack = 0
 10100                           ;I2C_Master_Read@ackBit stored from wreg
 10101  002780  6E28               	movwf	I2C_Master_Read@ackBit,c
 10102                           
 10103                           ;I2C.c: 130: unsigned char receivedByte;
 10104                           ;I2C.c: 132: I2C_Master_Wait();
 10105  002782  EC19  F014         	call	_I2C_Master_Wait	;wreg free
 10106                           
 10107                           ;I2C.c: 133: SSPCON2bits.RCEN = 1;
 10108  002786  86C5               	bsf	4037,3,c	;volatile
 10109                           
 10110                           ;I2C.c: 135: I2C_Master_Wait();
 10111  002788  EC19  F014         	call	_I2C_Master_Wait	;wreg free
 10112                           
 10113                           ;I2C.c: 136: receivedByte = SSPBUF;
 10114  00278C  CFC9 F029          	movff	4041,I2C_Master_Read@receivedByte	;volatile
 10115                           
 10116                           ;I2C.c: 138: I2C_Master_Wait();
 10117  002790  EC19  F014         	call	_I2C_Master_Wait	;wreg free
 10118                           
 10119                           ;I2C.c: 139: SSPCON2bits.ACKDT = ackBit;
 10120  002794  B028               	btfsc	I2C_Master_Read@ackBit,0,c
 10121  002796  D002               	bra	u4215
 10122  002798  9AC5               	bcf	4037,5,c	;volatile
 10123  00279A  D001               	bra	u4216
 10124  00279C                     u4215:
 10125  00279C  8AC5               	bsf	4037,5,c	;volatile
 10126  00279E                     u4216:
 10127                           
 10128                           ;I2C.c: 140: SSPCON2bits.ACKEN = 1;
 10129  00279E  88C5               	bsf	4037,4,c	;volatile
 10130                           
 10131                           ;I2C.c: 142: return receivedByte;
 10132  0027A0  5029               	movf	I2C_Master_Read@receivedByte,w,c
 10133  0027A2  0012               	return	
 10134  0027A4                     __end_of_I2C_Master_Read:
 10135                           	opt stack 0
 10136                           tosu	equ	0xFFF
 10137                           tosh	equ	0xFFE
 10138                           tosl	equ	0xFFD
 10139                           pclath	equ	0xFFA
 10140                           tblptru	equ	0xFF8
 10141                           tblptrh	equ	0xFF7
 10142                           tblptrl	equ	0xFF6
 10143                           tablat	equ	0xFF5
 10144                           prodh	equ	0xFF4
 10145                           prodl	equ	0xFF3
 10146                           intcon	equ	0xFF2
 10147                           indf0	equ	0xFEF
 10148                           postinc0	equ	0xFEE
 10149                           fsr0h	equ	0xFEA
 10150                           fsr0l	equ	0xFE9
 10151                           wreg	equ	0xFE8
 10152                           postdec1	equ	0xFE5
 10153                           plusw1	equ	0xFE3
 10154                           fsr1l	equ	0xFE1
 10155                           indf2	equ	0xFDF
 10156                           postinc2	equ	0xFDE
 10157                           postdec2	equ	0xFDD
 10158                           plusw2	equ	0xFDB
 10159                           fsr2h	equ	0xFDA
 10160                           fsr2l	equ	0xFD9
 10161                           status	equ	0xFD8
 10162                           
 10163 ;; *************** function _I2C_Master_Wait *****************
 10164 ;; Defined at:
 10165 ;;		line 51 in file "I2C.c"
 10166 ;; Parameters:    Size  Location     Type
 10167 ;;		None
 10168 ;; Auto vars:     Size  Location     Type
 10169 ;;		None
 10170 ;; Return value:  Size  Location     Type
 10171 ;;                  1    wreg      void 
 10172 ;; Registers used:
 10173 ;;		wreg, status,2, status,0
 10174 ;; Tracked objects:
 10175 ;;		On entry : 0/0
 10176 ;;		On exit  : 0/0
 10177 ;;		Unchanged: 0/0
 10178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10181 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10182 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10183 ;;Total ram usage:        1 bytes
 10184 ;; Hardware stack levels used:    1
 10185 ;; Hardware stack levels required when called:    4
 10186 ;; This function calls:
 10187 ;;		Nothing
 10188 ;; This function is called by:
 10189 ;;		_I2C_Master_Start
 10190 ;;		_I2C_Master_Stop
 10191 ;;		_I2C_Master_Write
 10192 ;;		_I2C_Master_Read
 10193 ;;		_I2C_Master_RepeatedStart
 10194 ;; This function uses a non-reentrant model
 10195 ;;
 10196                           
 10197                           	psect	text34
 10198  002832                     __ptext34:
 10199                           	opt stack 0
 10200  002832                     _I2C_Master_Wait:
 10201                           	opt stack 21
 10202                           
 10203                           ;I2C.c: 66: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
 10204                           
 10205                           ;incstack = 0
 10206  002832  B4C7               	btfsc	4039,2,c	;volatile
 10207  002834  D7FE               	goto	_I2C_Master_Wait
 10208  002836  CFC5 F027          	movff	4037,??_I2C_Master_Wait	;volatile
 10209  00283A  0E1F               	movlw	31
 10210  00283C  1627               	andwf	??_I2C_Master_Wait,f,c
 10211  00283E  B4D8               	btfsc	status,2,c
 10212  002840  0012               	return	
 10213  002842  D7F7               	goto	_I2C_Master_Wait
 10214  002844                     __end_of_I2C_Master_Wait:
 10215                           	opt stack 0
 10216                           tosu	equ	0xFFF
 10217                           tosh	equ	0xFFE
 10218                           tosl	equ	0xFFD
 10219                           pclath	equ	0xFFA
 10220                           tblptru	equ	0xFF8
 10221                           tblptrh	equ	0xFF7
 10222                           tblptrl	equ	0xFF6
 10223                           tablat	equ	0xFF5
 10224                           prodh	equ	0xFF4
 10225                           prodl	equ	0xFF3
 10226                           intcon	equ	0xFF2
 10227                           indf0	equ	0xFEF
 10228                           postinc0	equ	0xFEE
 10229                           fsr0h	equ	0xFEA
 10230                           fsr0l	equ	0xFE9
 10231                           wreg	equ	0xFE8
 10232                           postdec1	equ	0xFE5
 10233                           plusw1	equ	0xFE3
 10234                           fsr1l	equ	0xFE1
 10235                           indf2	equ	0xFDF
 10236                           postinc2	equ	0xFDE
 10237                           postdec2	equ	0xFDD
 10238                           plusw2	equ	0xFDB
 10239                           fsr2h	equ	0xFDA
 10240                           fsr2l	equ	0xFD9
 10241                           status	equ	0xFD8
 10242                           
 10243 ;; *************** function _initLCD *****************
 10244 ;; Defined at:
 10245 ;;		line 61 in file "lcd.c"
 10246 ;; Parameters:    Size  Location     Type
 10247 ;;		None
 10248 ;; Auto vars:     Size  Location     Type
 10249 ;;		None
 10250 ;; Return value:  Size  Location     Type
 10251 ;;                  1    wreg      void 
 10252 ;; Registers used:
 10253 ;;		wreg, status,2, status,0, cstack
 10254 ;; Tracked objects:
 10255 ;;		On entry : 0/0
 10256 ;;		On exit  : 0/0
 10257 ;;		Unchanged: 0/0
 10258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10261 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10262 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10263 ;;Total ram usage:        1 bytes
 10264 ;; Hardware stack levels used:    1
 10265 ;; Hardware stack levels required when called:    6
 10266 ;; This function calls:
 10267 ;;		_lcdInst
 10268 ;; This function is called by:
 10269 ;;		_main
 10270 ;; This function uses a non-reentrant model
 10271 ;;
 10272                           
 10273                           	psect	text35
 10274  00256A                     __ptext35:
 10275                           	opt stack 0
 10276  00256A                     _initLCD:
 10277                           	opt stack 24
 10278                           
 10279                           ;lcd.c: 69: _delay((unsigned long)((15)*(40000000/4000.0)));
 10280                           
 10281                           ;incstack = 0
 10282  00256A  0EC3               	movlw	195
 10283  00256C  6E2A               	movwf	??_initLCD& (0+255),c
 10284  00256E  0ECD               	movlw	205
 10285  002570                     u6277:
 10286  002570  2EE8               	decfsz	wreg,f,c
 10287  002572  D7FE               	bra	u6277
 10288  002574  2E2A               	decfsz	??_initLCD& (0+255),f,c
 10289  002576  D7FC               	bra	u6277
 10290  002578  F000               	nop	
 10291                           
 10292                           ;lcd.c: 70: lcdInst(0b00110011);
 10293  00257A  0E33               	movlw	51
 10294  00257C  EC06  F014         	call	_lcdInst
 10295                           
 10296                           ;lcd.c: 71: lcdInst(0b00110010);
 10297  002580  0E32               	movlw	50
 10298  002582  EC06  F014         	call	_lcdInst
 10299                           
 10300                           ;lcd.c: 72: lcdInst(0b00101000);
 10301  002586  0E28               	movlw	40
 10302  002588  EC06  F014         	call	_lcdInst
 10303                           
 10304                           ;lcd.c: 73: lcdInst(0b00001111);
 10305  00258C  0E0F               	movlw	15
 10306  00258E  EC06  F014         	call	_lcdInst
 10307                           
 10308                           ;lcd.c: 74: lcdInst(0b00000110);
 10309  002592  0E06               	movlw	6
 10310  002594  EC06  F014         	call	_lcdInst
 10311                           
 10312                           ;lcd.c: 75: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
 10313  002598  0E01               	movlw	1
 10314  00259A  EC06  F014         	call	_lcdInst
 10315  00259E  0EC3               	movlw	195
 10316  0025A0  6E2A               	movwf	??_initLCD& (0+255),c
 10317  0025A2  0ECD               	movlw	205
 10318  0025A4                     u6287:
 10319  0025A4  2EE8               	decfsz	wreg,f,c
 10320  0025A6  D7FE               	bra	u6287
 10321  0025A8  2E2A               	decfsz	??_initLCD& (0+255),f,c
 10322  0025AA  D7FC               	bra	u6287
 10323  0025AC  F000               	nop	
 10324                           
 10325                           ;lcd.c: 78: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
 10326  0025AE  0E0F               	movlw	15
 10327  0025B0  EC06  F014         	call	_lcdInst
 10328  0025B4  0012               	return		;funcret
 10329  0025B6                     __end_of_initLCD:
 10330                           	opt stack 0
 10331                           tosu	equ	0xFFF
 10332                           tosh	equ	0xFFE
 10333                           tosl	equ	0xFFD
 10334                           pclath	equ	0xFFA
 10335                           tblptru	equ	0xFF8
 10336                           tblptrh	equ	0xFF7
 10337                           tblptrl	equ	0xFF6
 10338                           tablat	equ	0xFF5
 10339                           prodh	equ	0xFF4
 10340                           prodl	equ	0xFF3
 10341                           intcon	equ	0xFF2
 10342                           indf0	equ	0xFEF
 10343                           postinc0	equ	0xFEE
 10344                           fsr0h	equ	0xFEA
 10345                           fsr0l	equ	0xFE9
 10346                           wreg	equ	0xFE8
 10347                           postdec1	equ	0xFE5
 10348                           plusw1	equ	0xFE3
 10349                           fsr1l	equ	0xFE1
 10350                           indf2	equ	0xFDF
 10351                           postinc2	equ	0xFDE
 10352                           postdec2	equ	0xFDD
 10353                           plusw2	equ	0xFDB
 10354                           fsr2h	equ	0xFDA
 10355                           fsr2l	equ	0xFD9
 10356                           status	equ	0xFD8
 10357                           
 10358 ;; *************** function _lcdInst *****************
 10359 ;; Defined at:
 10360 ;;		line 12 in file "lcd.c"
 10361 ;; Parameters:    Size  Location     Type
 10362 ;;  data            1    wreg     unsigned char 
 10363 ;; Auto vars:     Size  Location     Type
 10364 ;;  data            1   40[COMRAM] unsigned char 
 10365 ;; Return value:  Size  Location     Type
 10366 ;;                  1    wreg      void 
 10367 ;; Registers used:
 10368 ;;		wreg, status,2, status,0, cstack
 10369 ;; Tracked objects:
 10370 ;;		On entry : 0/0
 10371 ;;		On exit  : 0/0
 10372 ;;		Unchanged: 0/0
 10373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10375 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10377 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10378 ;;Total ram usage:        1 bytes
 10379 ;; Hardware stack levels used:    1
 10380 ;; Hardware stack levels required when called:    5
 10381 ;; This function calls:
 10382 ;;		_lcdNibble
 10383 ;; This function is called by:
 10384 ;;		_packaging
 10385 ;;		_main
 10386 ;;		_initLCD
 10387 ;;		_lcd_set_cursor
 10388 ;;		_lcd_shift_cursor
 10389 ;;		_inputEntry
 10390 ;;		_mainMenu
 10391 ;;		_printStringLCD
 10392 ;;		_lcd_shift_display
 10393 ;; This function uses a non-reentrant model
 10394 ;;
 10395                           
 10396                           	psect	text36
 10397  00280C                     __ptext36:
 10398                           	opt stack 0
 10399  00280C                     _lcdInst:
 10400                           	opt stack 22
 10401                           
 10402                           ;incstack = 0
 10403                           ;lcdInst@data stored from wreg
 10404  00280C  6E29               	movwf	lcdInst@data,c
 10405                           
 10406                           ;lcd.c: 20: LATDbits.LATD2 = 0;
 10407  00280E  948C               	bcf	3980,2,c	;volatile
 10408                           
 10409                           ;lcd.c: 21: lcdNibble(data);
 10410  002810  5029               	movf	lcdInst@data,w,c
 10411  002812  EC3D  F011         	call	_lcdNibble
 10412                           
 10413                           ;lcd.c: 22: _delay((unsigned long)((100)*(40000000/4000000.0)));
 10414  002816  0EC8               	movlw	200
 10415  002818                     u6297:
 10416  002818  D000               	nop2	
 10417  00281A  2EE8               	decfsz	wreg,f,c
 10418  00281C  D7FD               	bra	u6297
 10419  00281E  0012               	return		;funcret
 10420  002820                     __end_of_lcdInst:
 10421                           	opt stack 0
 10422                           tosu	equ	0xFFF
 10423                           tosh	equ	0xFFE
 10424                           tosl	equ	0xFFD
 10425                           pclath	equ	0xFFA
 10426                           tblptru	equ	0xFF8
 10427                           tblptrh	equ	0xFF7
 10428                           tblptrl	equ	0xFF6
 10429                           tablat	equ	0xFF5
 10430                           prodh	equ	0xFF4
 10431                           prodl	equ	0xFF3
 10432                           intcon	equ	0xFF2
 10433                           indf0	equ	0xFEF
 10434                           postinc0	equ	0xFEE
 10435                           fsr0h	equ	0xFEA
 10436                           fsr0l	equ	0xFE9
 10437                           wreg	equ	0xFE8
 10438                           postdec1	equ	0xFE5
 10439                           plusw1	equ	0xFE3
 10440                           fsr1l	equ	0xFE1
 10441                           indf2	equ	0xFDF
 10442                           postinc2	equ	0xFDE
 10443                           postdec2	equ	0xFDD
 10444                           plusw2	equ	0xFDB
 10445                           fsr2h	equ	0xFDA
 10446                           fsr2l	equ	0xFD9
 10447                           status	equ	0xFD8
 10448                           
 10449 ;; *************** function _lcdNibble *****************
 10450 ;; Defined at:
 10451 ;;		line 38 in file "lcd.c"
 10452 ;; Parameters:    Size  Location     Type
 10453 ;;  data            1    wreg     unsigned char 
 10454 ;; Auto vars:     Size  Location     Type
 10455 ;;  data            1   39[COMRAM] unsigned char 
 10456 ;;  temp            1   38[COMRAM] unsigned char 
 10457 ;; Return value:  Size  Location     Type
 10458 ;;                  1    wreg      void 
 10459 ;; Registers used:
 10460 ;;		wreg, status,2, status,0
 10461 ;; Tracked objects:
 10462 ;;		On entry : 0/0
 10463 ;;		On exit  : 0/0
 10464 ;;		Unchanged: 0/0
 10465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10467 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10469 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10470 ;;Total ram usage:        2 bytes
 10471 ;; Hardware stack levels used:    1
 10472 ;; Hardware stack levels required when called:    4
 10473 ;; This function calls:
 10474 ;;		Nothing
 10475 ;; This function is called by:
 10476 ;;		_lcdInst
 10477 ;;		_putch
 10478 ;; This function uses a non-reentrant model
 10479 ;;
 10480                           
 10481                           	psect	text37
 10482  00227A                     __ptext37:
 10483                           	opt stack 0
 10484  00227A                     _lcdNibble:
 10485                           	opt stack 22
 10486                           
 10487                           ;incstack = 0
 10488                           ;lcdNibble@data stored from wreg
 10489  00227A  6E28               	movwf	lcdNibble@data,c
 10490                           
 10491                           ;lcd.c: 46: char temp = (unsigned char) (data & 0xF0);
 10492  00227C  5028               	movf	lcdNibble@data,w,c
 10493  00227E  0BF0               	andlw	240
 10494  002280  6E27               	movwf	lcdNibble@temp,c
 10495                           
 10496                           ;lcd.c: 47: LATD = (unsigned char) (LATD & 0x0F);
 10497  002282  508C               	movf	3980,w,c	;volatile
 10498  002284  0B0F               	andlw	15
 10499  002286  6E8C               	movwf	3980,c	;volatile
 10500                           
 10501                           ;lcd.c: 48: LATD = (unsigned char) (temp | LATD);
 10502  002288  5027               	movf	lcdNibble@temp,w,c
 10503  00228A  108C               	iorwf	3980,w,c	;volatile
 10504  00228C  6E8C               	movwf	3980,c	;volatile
 10505                           
 10506                           ;lcd.c: 50: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 10507  00228E  0E00               	movlw	0
 10508  002290  BEF2               	btfsc	intcon,7,c	;volatile
 10509  002292  0E01               	movlw	1
 10510  002294  6E52               	movwf	_LCDinterruptState,c
 10511  002296  9EF2               	bcf	intcon,7,c	;volatile
 10512  002298  868C               	bsf	3980,3,c	;volatile
 10513  00229A  0E53               	movlw	83
 10514  00229C                     u6307:
 10515  00229C  2EE8               	decfsz	wreg,f,c
 10516  00229E  D7FE               	bra	u6307
 10517  0022A0  F000               	nop	
 10518  0022A2  968C               	bcf	3980,3,c	;volatile
 10519  0022A4  0EC8               	movlw	200
 10520  0022A6                     u6317:
 10521  0022A6  D000               	nop2	
 10522  0022A8  2EE8               	decfsz	wreg,f,c
 10523  0022AA  D7FD               	bra	u6317
 10524  0022AC  B052               	btfsc	_LCDinterruptState,0,c
 10525  0022AE  D002               	bra	u4195
 10526  0022B0  9EF2               	bcf	intcon,7,c	;volatile
 10527  0022B2  D001               	bra	u4196
 10528  0022B4                     u4195:
 10529  0022B4  8EF2               	bsf	intcon,7,c	;volatile
 10530  0022B6                     u4196:
 10531                           
 10532                           ;lcd.c: 53: data = (unsigned char) (data << 4);
 10533  0022B6  3828               	swapf	lcdNibble@data,w,c
 10534  0022B8  0BF0               	andlw	240
 10535  0022BA  6E28               	movwf	lcdNibble@data,c
 10536                           
 10537                           ;lcd.c: 54: temp = (unsigned char) (data & 0xF0);
 10538  0022BC  5028               	movf	lcdNibble@data,w,c
 10539  0022BE  0BF0               	andlw	240
 10540  0022C0  6E27               	movwf	lcdNibble@temp,c
 10541                           
 10542                           ;lcd.c: 55: LATD = (unsigned char) (LATD & 0x0F);
 10543  0022C2  508C               	movf	3980,w,c	;volatile
 10544  0022C4  0B0F               	andlw	15
 10545  0022C6  6E8C               	movwf	3980,c	;volatile
 10546                           
 10547                           ;lcd.c: 56: LATD = (unsigned char) (temp | LATD);
 10548  0022C8  5027               	movf	lcdNibble@temp,w,c
 10549  0022CA  108C               	iorwf	3980,w,c	;volatile
 10550  0022CC  6E8C               	movwf	3980,c	;volatile
 10551                           
 10552                           ;lcd.c: 58: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
 10553  0022CE  0E00               	movlw	0
 10554  0022D0  BEF2               	btfsc	intcon,7,c	;volatile
 10555  0022D2  0E01               	movlw	1
 10556  0022D4  6E52               	movwf	_LCDinterruptState,c
 10557  0022D6  9EF2               	bcf	intcon,7,c	;volatile
 10558  0022D8  868C               	bsf	3980,3,c	;volatile
 10559  0022DA  0E53               	movlw	83
 10560  0022DC                     u6327:
 10561  0022DC  2EE8               	decfsz	wreg,f,c
 10562  0022DE  D7FE               	bra	u6327
 10563  0022E0  F000               	nop	
 10564  0022E2  968C               	bcf	3980,3,c	;volatile
 10565  0022E4  0EC8               	movlw	200
 10566  0022E6                     u6337:
 10567  0022E6  D000               	nop2	
 10568  0022E8  2EE8               	decfsz	wreg,f,c
 10569  0022EA  D7FD               	bra	u6337
 10570  0022EC  B052               	btfsc	_LCDinterruptState,0,c
 10571  0022EE  D002               	bra	u4205
 10572  0022F0  9EF2               	bcf	intcon,7,c	;volatile
 10573  0022F2  D001               	bra	u4206
 10574  0022F4                     u4205:
 10575  0022F4  8EF2               	bsf	intcon,7,c	;volatile
 10576  0022F6                     u4206:
 10577  0022F6  0012               	return		;funcret
 10578  0022F8                     __end_of_lcdNibble:
 10579                           	opt stack 0
 10580                           tosu	equ	0xFFF
 10581                           tosh	equ	0xFFE
 10582                           tosl	equ	0xFFD
 10583                           pclath	equ	0xFFA
 10584                           tblptru	equ	0xFF8
 10585                           tblptrh	equ	0xFF7
 10586                           tblptrl	equ	0xFF6
 10587                           tablat	equ	0xFF5
 10588                           prodh	equ	0xFF4
 10589                           prodl	equ	0xFF3
 10590                           intcon	equ	0xFF2
 10591                           indf0	equ	0xFEF
 10592                           postinc0	equ	0xFEE
 10593                           fsr0h	equ	0xFEA
 10594                           fsr0l	equ	0xFE9
 10595                           wreg	equ	0xFE8
 10596                           postdec1	equ	0xFE5
 10597                           plusw1	equ	0xFE3
 10598                           fsr1l	equ	0xFE1
 10599                           indf2	equ	0xFDF
 10600                           postinc2	equ	0xFDE
 10601                           postdec2	equ	0xFDD
 10602                           plusw2	equ	0xFDB
 10603                           fsr2h	equ	0xFDA
 10604                           fsr2l	equ	0xFD9
 10605                           status	equ	0xFD8
 10606                           
 10607 ;; *************** function _I2C_Master_Init *****************
 10608 ;; Defined at:
 10609 ;;		line 14 in file "I2C.c"
 10610 ;; Parameters:    Size  Location     Type
 10611 ;;  clockFreq       4    0[BANK0 ] const unsigned long 
 10612 ;; Auto vars:     Size  Location     Type
 10613 ;;		None
 10614 ;; Return value:  Size  Location     Type
 10615 ;;                  1    wreg      void 
 10616 ;; Registers used:
 10617 ;;		wreg, status,2, status,0, cstack
 10618 ;; Tracked objects:
 10619 ;;		On entry : 0/0
 10620 ;;		On exit  : 0/0
 10621 ;;		Unchanged: 0/0
 10622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10623 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10625 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10626 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10627 ;;Total ram usage:        8 bytes
 10628 ;; Hardware stack levels used:    1
 10629 ;; Hardware stack levels required when called:    5
 10630 ;; This function calls:
 10631 ;;		___lldiv
 10632 ;; This function is called by:
 10633 ;;		_main
 10634 ;; This function uses a non-reentrant model
 10635 ;;
 10636                           
 10637                           	psect	text38
 10638  0024BA                     __ptext38:
 10639                           	opt stack 0
 10640  0024BA                     _I2C_Master_Init:
 10641                           	opt stack 25
 10642                           
 10643                           ;I2C.c: 34: SSPCON1bits.SSPEN = 0;
 10644                           
 10645                           ;incstack = 0
 10646  0024BA  9AC6               	bcf	4038,5,c	;volatile
 10647                           
 10648                           ;I2C.c: 37: TRISCbits.TRISC3 = 1;
 10649  0024BC  8694               	bsf	3988,3,c	;volatile
 10650                           
 10651                           ;I2C.c: 38: TRISCbits.TRISC4 = 1;
 10652  0024BE  8894               	bsf	3988,4,c	;volatile
 10653                           
 10654                           ;I2C.c: 41: SSPSTAT = 0b10000000;
 10655  0024C0  0E80               	movlw	128
 10656  0024C2  6EC7               	movwf	4039,c	;volatile
 10657                           
 10658                           ;I2C.c: 42: SSPCON1 = 0b00101000;
 10659  0024C4  0E28               	movlw	40
 10660  0024C6  6EC6               	movwf	4038,c	;volatile
 10661                           
 10662                           ;I2C.c: 43: SSPCON2 = 0b00000000;
 10663  0024C8  0E00               	movlw	0
 10664  0024CA  6EC5               	movwf	4037,c	;volatile
 10665                           
 10666                           ;I2C.c: 48: SSPADD = (40000000 / (4 * clockFreq)) - 1;
 10667  0024CC  0E00               	movlw	0
 10668  0024CE  6E27               	movwf	___lldiv@dividend,c
 10669  0024D0  0E5A               	movlw	90
 10670  0024D2  6E28               	movwf	___lldiv@dividend+1,c
 10671  0024D4  0E62               	movlw	98
 10672  0024D6  6E29               	movwf	___lldiv@dividend+2,c
 10673  0024D8  0E02               	movlw	2
 10674  0024DA  6E2A               	movwf	___lldiv@dividend+3,c
 10675  0024DC  C080  F084         	movff	I2C_Master_Init@clockFreq,??_I2C_Master_Init
 10676  0024E0  C081  F085         	movff	I2C_Master_Init@clockFreq+1,??_I2C_Master_Init+1
 10677  0024E4  C082  F086         	movff	I2C_Master_Init@clockFreq+2,??_I2C_Master_Init+2
 10678  0024E8  C083  F087         	movff	I2C_Master_Init@clockFreq+3,??_I2C_Master_Init+3
 10679  0024EC  0E02               	movlw	2
 10680  0024EE                     u5835:
 10681  0024EE  90D8               	bcf	status,0,c
 10682  0024F0  0100               	movlb	0	; () banked
 10683  0024F2  3784               	rlcf	??_I2C_Master_Init& (0+255),f,b
 10684  0024F4  3785               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
 10685  0024F6  3786               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
 10686  0024F8  3787               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
 10687  0024FA  2EE8               	decfsz	wreg,f,c
 10688  0024FC  D7F8               	goto	u5835
 10689  0024FE  C084  F02B         	movff	??_I2C_Master_Init,___lldiv@divisor
 10690  002502  C085  F02C         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 10691  002506  C086  F02D         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 10692  00250A  C087  F02E         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 10693  00250E  ECFC  F010         	call	___lldiv	;wreg free
 10694  002512  0427               	decf	?___lldiv,w,c
 10695  002514  6EC8               	movwf	4040,c	;volatile
 10696  002516  0012               	return		;funcret
 10697  002518                     __end_of_I2C_Master_Init:
 10698                           	opt stack 0
 10699                           tosu	equ	0xFFF
 10700                           tosh	equ	0xFFE
 10701                           tosl	equ	0xFFD
 10702                           pclath	equ	0xFFA
 10703                           tblptru	equ	0xFF8
 10704                           tblptrh	equ	0xFF7
 10705                           tblptrl	equ	0xFF6
 10706                           tablat	equ	0xFF5
 10707                           prodh	equ	0xFF4
 10708                           prodl	equ	0xFF3
 10709                           intcon	equ	0xFF2
 10710                           indf0	equ	0xFEF
 10711                           postinc0	equ	0xFEE
 10712                           fsr0h	equ	0xFEA
 10713                           fsr0l	equ	0xFE9
 10714                           wreg	equ	0xFE8
 10715                           postdec1	equ	0xFE5
 10716                           plusw1	equ	0xFE3
 10717                           fsr1l	equ	0xFE1
 10718                           indf2	equ	0xFDF
 10719                           postinc2	equ	0xFDE
 10720                           postdec2	equ	0xFDD
 10721                           plusw2	equ	0xFDB
 10722                           fsr2h	equ	0xFDA
 10723                           fsr2l	equ	0xFD9
 10724                           status	equ	0xFD8
 10725                           
 10726 ;; *************** function ___lldiv *****************
 10727 ;; Defined at:
 10728 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 10729 ;; Parameters:    Size  Location     Type
 10730 ;;  dividend        4   38[COMRAM] unsigned long 
 10731 ;;  divisor         4   42[COMRAM] unsigned long 
 10732 ;; Auto vars:     Size  Location     Type
 10733 ;;  quotient        4   46[COMRAM] unsigned long 
 10734 ;;  counter         1   50[COMRAM] unsigned char 
 10735 ;; Return value:  Size  Location     Type
 10736 ;;                  4   38[COMRAM] unsigned long 
 10737 ;; Registers used:
 10738 ;;		wreg, status,2, status,0
 10739 ;; Tracked objects:
 10740 ;;		On entry : 0/0
 10741 ;;		On exit  : 0/0
 10742 ;;		Unchanged: 0/0
 10743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10744 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10745 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10747 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10748 ;;Total ram usage:       13 bytes
 10749 ;; Hardware stack levels used:    1
 10750 ;; Hardware stack levels required when called:    4
 10751 ;; This function calls:
 10752 ;;		Nothing
 10753 ;; This function is called by:
 10754 ;;		_I2C_Master_Init
 10755 ;;		__doprnt
 10756 ;; This function uses a non-reentrant model
 10757 ;;
 10758                           
 10759                           	psect	text39
 10760  0021F8                     __ptext39:
 10761                           	opt stack 0
 10762  0021F8                     ___lldiv:
 10763                           	opt stack 23
 10764                           
 10765                           ;incstack = 0
 10766  0021F8  0E00               	movlw	0
 10767  0021FA  6E2F               	movwf	___lldiv@quotient,c
 10768  0021FC  0E00               	movlw	0
 10769  0021FE  6E30               	movwf	___lldiv@quotient+1,c
 10770  002200  0E00               	movlw	0
 10771  002202  6E31               	movwf	___lldiv@quotient+2,c
 10772  002204  0E00               	movlw	0
 10773  002206  6E32               	movwf	___lldiv@quotient+3,c
 10774  002208  502B               	movf	___lldiv@divisor,w,c
 10775  00220A  102C               	iorwf	___lldiv@divisor+1,w,c
 10776  00220C  102D               	iorwf	___lldiv@divisor+2,w,c
 10777  00220E  102E               	iorwf	___lldiv@divisor+3,w,c
 10778  002210  B4D8               	btfsc	status,2,c
 10779  002212  D02A               	goto	l1043
 10780  002214  0E01               	movlw	1
 10781  002216  6E33               	movwf	___lldiv@counter,c
 10782  002218  D006               	goto	l1038
 10783  00221A  90D8               	bcf	status,0,c
 10784  00221C  362B               	rlcf	___lldiv@divisor,f,c
 10785  00221E  362C               	rlcf	___lldiv@divisor+1,f,c
 10786  002220  362D               	rlcf	___lldiv@divisor+2,f,c
 10787  002222  362E               	rlcf	___lldiv@divisor+3,f,c
 10788  002224  2A33               	incf	___lldiv@counter,f,c
 10789  002226                     l1038:
 10790  002226  AE2E               	btfss	___lldiv@divisor+3,7,c
 10791  002228  D7F8               	goto	l1039
 10792  00222A                     u4240:
 10793  00222A  90D8               	bcf	status,0,c
 10794  00222C  362F               	rlcf	___lldiv@quotient,f,c
 10795  00222E  3630               	rlcf	___lldiv@quotient+1,f,c
 10796  002230  3631               	rlcf	___lldiv@quotient+2,f,c
 10797  002232  3632               	rlcf	___lldiv@quotient+3,f,c
 10798  002234  502B               	movf	___lldiv@divisor,w,c
 10799  002236  5C27               	subwf	___lldiv@dividend,w,c
 10800  002238  502C               	movf	___lldiv@divisor+1,w,c
 10801  00223A  5828               	subwfb	___lldiv@dividend+1,w,c
 10802  00223C  502D               	movf	___lldiv@divisor+2,w,c
 10803  00223E  5829               	subwfb	___lldiv@dividend+2,w,c
 10804  002240  502E               	movf	___lldiv@divisor+3,w,c
 10805  002242  582A               	subwfb	___lldiv@dividend+3,w,c
 10806  002244  A0D8               	btfss	status,0,c
 10807  002246  D009               	goto	l1042
 10808  002248  502B               	movf	___lldiv@divisor,w,c
 10809  00224A  5E27               	subwf	___lldiv@dividend,f,c
 10810  00224C  502C               	movf	___lldiv@divisor+1,w,c
 10811  00224E  5A28               	subwfb	___lldiv@dividend+1,f,c
 10812  002250  502D               	movf	___lldiv@divisor+2,w,c
 10813  002252  5A29               	subwfb	___lldiv@dividend+2,f,c
 10814  002254  502E               	movf	___lldiv@divisor+3,w,c
 10815  002256  5A2A               	subwfb	___lldiv@dividend+3,f,c
 10816  002258  802F               	bsf	___lldiv@quotient,0,c
 10817  00225A                     l1042:
 10818  00225A  90D8               	bcf	status,0,c
 10819  00225C  322E               	rrcf	___lldiv@divisor+3,f,c
 10820  00225E  322D               	rrcf	___lldiv@divisor+2,f,c
 10821  002260  322C               	rrcf	___lldiv@divisor+1,f,c
 10822  002262  322B               	rrcf	___lldiv@divisor,f,c
 10823  002264  2E33               	decfsz	___lldiv@counter,f,c
 10824  002266  D7E1               	goto	u4240
 10825  002268                     l1043:
 10826  002268  C02F  F027         	movff	___lldiv@quotient,?___lldiv
 10827  00226C  C030  F028         	movff	___lldiv@quotient+1,?___lldiv+1
 10828  002270  C031  F029         	movff	___lldiv@quotient+2,?___lldiv+2
 10829  002274  C032  F02A         	movff	___lldiv@quotient+3,?___lldiv+3
 10830  002278  0012               	return		;funcret
 10831  00227A                     __end_of___lldiv:
 10832                           	opt stack 0
 10833                           tosu	equ	0xFFF
 10834                           tosh	equ	0xFFE
 10835                           tosl	equ	0xFFD
 10836                           pclath	equ	0xFFA
 10837                           tblptru	equ	0xFF8
 10838                           tblptrh	equ	0xFF7
 10839                           tblptrl	equ	0xFF6
 10840                           tablat	equ	0xFF5
 10841                           prodh	equ	0xFF4
 10842                           prodl	equ	0xFF3
 10843                           intcon	equ	0xFF2
 10844                           indf0	equ	0xFEF
 10845                           postinc0	equ	0xFEE
 10846                           fsr0h	equ	0xFEA
 10847                           fsr0l	equ	0xFE9
 10848                           wreg	equ	0xFE8
 10849                           postdec1	equ	0xFE5
 10850                           plusw1	equ	0xFE3
 10851                           fsr1l	equ	0xFE1
 10852                           indf2	equ	0xFDF
 10853                           postinc2	equ	0xFDE
 10854                           postdec2	equ	0xFDD
 10855                           plusw2	equ	0xFDB
 10856                           fsr2h	equ	0xFDA
 10857                           fsr2l	equ	0xFD9
 10858                           status	equ	0xFD8
 10859                           
 10860 ;; *************** function _interruptHandler *****************
 10861 ;; Defined at:
 10862 ;;		line 212 in file "main.c"
 10863 ;; Parameters:    Size  Location     Type
 10864 ;;		None
 10865 ;; Auto vars:     Size  Location     Type
 10866 ;;		None
 10867 ;; Return value:  Size  Location     Type
 10868 ;;                  1    wreg      void 
 10869 ;; Registers used:
 10870 ;;		wreg, status,2, status,0, cstack
 10871 ;; Tracked objects:
 10872 ;;		On entry : 0/0
 10873 ;;		On exit  : 0/0
 10874 ;;		Unchanged: 0/0
 10875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10878 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10879 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10880 ;;Total ram usage:       18 bytes
 10881 ;; Hardware stack levels used:    1
 10882 ;; Hardware stack levels required when called:    3
 10883 ;; This function calls:
 10884 ;;		_tmr0_ISR
 10885 ;; This function is called by:
 10886 ;;		Interrupt level 2
 10887 ;; This function uses a non-reentrant model
 10888 ;;
 10889                           
 10890                           	psect	intcode
 10891  000008                     __pintcode:
 10892                           	opt stack 0
 10893  000008                     _interruptHandler:
 10894                           	opt stack 21
 10895                           
 10896                           ;incstack = 0
 10897  000008  8259               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10898  00000A  EDDF  F00F         	call	int_func,f	;refresh shadow registers
 10899                           tosu	equ	0xFFF
 10900                           tosh	equ	0xFFE
 10901                           tosl	equ	0xFFD
 10902                           pclath	equ	0xFFA
 10903                           tblptru	equ	0xFF8
 10904                           tblptrh	equ	0xFF7
 10905                           tblptrl	equ	0xFF6
 10906                           tablat	equ	0xFF5
 10907                           prodh	equ	0xFF4
 10908                           prodl	equ	0xFF3
 10909                           intcon	equ	0xFF2
 10910                           indf0	equ	0xFEF
 10911                           postinc0	equ	0xFEE
 10912                           fsr0h	equ	0xFEA
 10913                           fsr0l	equ	0xFE9
 10914                           wreg	equ	0xFE8
 10915                           postdec1	equ	0xFE5
 10916                           plusw1	equ	0xFE3
 10917                           fsr1l	equ	0xFE1
 10918                           indf2	equ	0xFDF
 10919                           postinc2	equ	0xFDE
 10920                           postdec2	equ	0xFDD
 10921                           plusw2	equ	0xFDB
 10922                           fsr2h	equ	0xFDA
 10923                           fsr2l	equ	0xFD9
 10924                           status	equ	0xFD8
 10925                           
 10926                           	psect	intcode_body
 10927  001FBE                     __pintcode_body:
 10928                           	opt stack 21
 10929  001FBE                     int_func:
 10930                           	opt stack 21
 10931  001FBE  0006               	pop		; remove dummy address from shadow register refresh
 10932  001FC0  CFFA F015          	movff	pclath,??_interruptHandler
 10933  001FC4  CFFB F016          	movff	pclatu,??_interruptHandler+1
 10934  001FC8  CFE9 F017          	movff	fsr0l,??_interruptHandler+2
 10935  001FCC  CFEA F018          	movff	fsr0h,??_interruptHandler+3
 10936  001FD0  CFE1 F019          	movff	fsr1l,??_interruptHandler+4
 10937  001FD4  CFE2 F01A          	movff	fsr1h,??_interruptHandler+5
 10938  001FD8  CFD9 F01B          	movff	fsr2l,??_interruptHandler+6
 10939  001FDC  CFDA F01C          	movff	fsr2h,??_interruptHandler+7
 10940  001FE0  CFF3 F01D          	movff	prodl,??_interruptHandler+8
 10941  001FE4  CFF4 F01E          	movff	prodh,??_interruptHandler+9
 10942  001FE8  CFF6 F01F          	movff	tblptrl,??_interruptHandler+10
 10943  001FEC  CFF7 F020          	movff	tblptrh,??_interruptHandler+11
 10944  001FF0  CFF8 F021          	movff	tblptru,??_interruptHandler+12
 10945  001FF4  CFF5 F022          	movff	tablat,??_interruptHandler+13
 10946  001FF8  C059  F023         	movff	btemp,??_interruptHandler+14
 10947  001FFC  C05A  F024         	movff	btemp+1,??_interruptHandler+15
 10948  002000  C05B  F025         	movff	btemp+2,??_interruptHandler+16
 10949  002004  C05C  F026         	movff	btemp+3,??_interruptHandler+17
 10950                           
 10951                           ;main.c: 213: if (T0IE && T0IF) {
 10952  002008  BAF2               	btfsc	intcon,5,c	;volatile
 10953  00200A  A4F2               	btfss	intcon,2,c	;volatile
 10954  00200C  D003               	goto	i2l144
 10955                           
 10956                           ;main.c: 214: T0IF = 0;
 10957  00200E  94F2               	bcf	intcon,2,c	;volatile
 10958                           
 10959                           ;main.c: 215: tmr0_ISR();
 10960  002010  ECF2  F011         	call	_tmr0_ISR	;wreg free
 10961  002014                     i2l144:
 10962  002014  C026  F05C         	movff	??_interruptHandler+17,btemp+3
 10963  002018  C025  F05B         	movff	??_interruptHandler+16,btemp+2
 10964  00201C  C024  F05A         	movff	??_interruptHandler+15,btemp+1
 10965  002020  C023  F059         	movff	??_interruptHandler+14,btemp
 10966  002024  C022  FFF5         	movff	??_interruptHandler+13,tablat
 10967  002028  C021  FFF8         	movff	??_interruptHandler+12,tblptru
 10968  00202C  C020  FFF7         	movff	??_interruptHandler+11,tblptrh
 10969  002030  C01F  FFF6         	movff	??_interruptHandler+10,tblptrl
 10970  002034  C01E  FFF4         	movff	??_interruptHandler+9,prodh
 10971  002038  C01D  FFF3         	movff	??_interruptHandler+8,prodl
 10972  00203C  C01C  FFDA         	movff	??_interruptHandler+7,fsr2h
 10973  002040  C01B  FFD9         	movff	??_interruptHandler+6,fsr2l
 10974  002044  C01A  FFE2         	movff	??_interruptHandler+5,fsr1h
 10975  002048  C019  FFE1         	movff	??_interruptHandler+4,fsr1l
 10976  00204C  C018  FFEA         	movff	??_interruptHandler+3,fsr0h
 10977  002050  C017  FFE9         	movff	??_interruptHandler+2,fsr0l
 10978  002054  C016  FFFB         	movff	??_interruptHandler+1,pclatu
 10979  002058  C015  FFFA         	movff	??_interruptHandler,pclath
 10980  00205C  9259               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10981  00205E  0011               	retfie		f
 10982  002060                     __end_of_interruptHandler:
 10983                           	opt stack 0
 10984                           tosu	equ	0xFFF
 10985                           tosh	equ	0xFFE
 10986                           tosl	equ	0xFFD
 10987                           pclatu	equ	0xFFB
 10988                           pclath	equ	0xFFA
 10989                           tblptru	equ	0xFF8
 10990                           tblptrh	equ	0xFF7
 10991                           tblptrl	equ	0xFF6
 10992                           tablat	equ	0xFF5
 10993                           prodh	equ	0xFF4
 10994                           prodl	equ	0xFF3
 10995                           intcon	equ	0xFF2
 10996                           indf0	equ	0xFEF
 10997                           postinc0	equ	0xFEE
 10998                           fsr0h	equ	0xFEA
 10999                           fsr0l	equ	0xFE9
 11000                           wreg	equ	0xFE8
 11001                           postdec1	equ	0xFE5
 11002                           plusw1	equ	0xFE3
 11003                           fsr1h	equ	0xFE2
 11004                           fsr1l	equ	0xFE1
 11005                           indf2	equ	0xFDF
 11006                           postinc2	equ	0xFDE
 11007                           postdec2	equ	0xFDD
 11008                           plusw2	equ	0xFDB
 11009                           fsr2h	equ	0xFDA
 11010                           fsr2l	equ	0xFD9
 11011                           status	equ	0xFD8
 11012                           
 11013 ;; *************** function _tmr0_ISR *****************
 11014 ;; Defined at:
 11015 ;;		line 86 in file "timer.c"
 11016 ;; Parameters:    Size  Location     Type
 11017 ;;		None
 11018 ;; Auto vars:     Size  Location     Type
 11019 ;;		None
 11020 ;; Return value:  Size  Location     Type
 11021 ;;                  1    wreg      void 
 11022 ;; Registers used:
 11023 ;;		wreg, status,2, status,0, cstack
 11024 ;; Tracked objects:
 11025 ;;		On entry : 0/0
 11026 ;;		On exit  : 0/0
 11027 ;;		Unchanged: 0/0
 11028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11032 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11033 ;;Total ram usage:        0 bytes
 11034 ;; Hardware stack levels used:    1
 11035 ;; Hardware stack levels required when called:    2
 11036 ;; This function calls:
 11037 ;;		___ftadd
 11038 ;; This function is called by:
 11039 ;;		_interruptHandler
 11040 ;; This function uses a non-reentrant model
 11041 ;;
 11042                           
 11043                           	psect	text41
 11044  0023E4                     __ptext41:
 11045                           	opt stack 0
 11046  0023E4                     _tmr0_ISR:
 11047                           	opt stack 21
 11048                           
 11049                           ;timer.c: 87: timeSinceLastTic += 0.1;
 11050                           
 11051                           ;incstack = 0
 11052  0023E4  C053  F009         	movff	_timeSinceLastTic,___ftadd@f1	;volatile
 11053  0023E8  C054  F00A         	movff	_timeSinceLastTic+1,___ftadd@f1+1	;volatile
 11054  0023EC  C055  F00B         	movff	_timeSinceLastTic+2,___ftadd@f1+2	;volatile
 11055  0023F0  0ECD               	movlw	205
 11056  0023F2  6E0C               	movwf	___ftadd@f2,c
 11057  0023F4  0ECC               	movlw	204
 11058  0023F6  6E0D               	movwf	___ftadd@f2+1,c
 11059  0023F8  0E3D               	movlw	61
 11060  0023FA  6E0E               	movwf	___ftadd@f2+2,c
 11061  0023FC  EC88  F00D         	call	___ftadd	;wreg free
 11062  002400  C009  F053         	movff	?___ftadd,_timeSinceLastTic	;volatile
 11063  002404  C00A  F054         	movff	?___ftadd+1,_timeSinceLastTic+1	;volatile
 11064  002408  C00B  F055         	movff	?___ftadd+2,_timeSinceLastTic+2	;volatile
 11065                           
 11066                           ;timer.c: 88: test++;
 11067  00240C  0E01               	movlw	1
 11068  00240E  0100               	movlb	0	; () banked
 11069  002410  27F9               	addwf	_test& (0+255),f,b	;volatile
 11070  002412  0E00               	movlw	0
 11071  002414  23FA               	addwfc	(_test+1)& (0+255),f,b	;volatile
 11072  002416  23FB               	addwfc	(_test+2)& (0+255),f,b	;volatile
 11073  002418  23FC               	addwfc	(_test+3)& (0+255),f,b	;volatile
 11074                           
 11075                           ; BSR set to: 0
 11076                           ;timer.c: 89: if (operating) operatingTime += 0.1;
 11077  00241A  5051               	movf	_operating,w,c
 11078  00241C  B4D8               	btfsc	status,2,c
 11079  00241E  D014               	goto	i2l587
 11080                           
 11081                           ; BSR set to: 0
 11082  002420  C056  F009         	movff	timer@operatingTime,___ftadd@f1	;volatile
 11083  002424  C057  F00A         	movff	timer@operatingTime+1,___ftadd@f1+1	;volatile
 11084  002428  C058  F00B         	movff	timer@operatingTime+2,___ftadd@f1+2	;volatile
 11085  00242C  0ECD               	movlw	205
 11086  00242E  6E0C               	movwf	___ftadd@f2,c
 11087  002430  0ECC               	movlw	204
 11088  002432  6E0D               	movwf	___ftadd@f2+1,c
 11089  002434  0E3D               	movlw	61
 11090  002436  6E0E               	movwf	___ftadd@f2+2,c
 11091  002438  EC88  F00D         	call	___ftadd	;wreg free
 11092  00243C  C009  F056         	movff	?___ftadd,timer@operatingTime	;volatile
 11093  002440  C00A  F057         	movff	?___ftadd+1,timer@operatingTime+1	;volatile
 11094  002444  C00B  F058         	movff	?___ftadd+2,timer@operatingTime+2	;volatile
 11095  002448                     i2l587:
 11096                           
 11097                           ;timer.c: 90: TMR0H = 0xF2;
 11098  002448  0EF2               	movlw	242
 11099  00244A  6ED7               	movwf	4055,c	;volatile
 11100                           
 11101                           ;timer.c: 91: TMR0L = 0xC0;
 11102  00244C  0EC0               	movlw	192
 11103  00244E  6ED6               	movwf	4054,c	;volatile
 11104  002450  0012               	return		;funcret
 11105  002452                     __end_of_tmr0_ISR:
 11106                           	opt stack 0
 11107                           tosu	equ	0xFFF
 11108                           tosh	equ	0xFFE
 11109                           tosl	equ	0xFFD
 11110                           pclatu	equ	0xFFB
 11111                           pclath	equ	0xFFA
 11112                           tblptru	equ	0xFF8
 11113                           tblptrh	equ	0xFF7
 11114                           tblptrl	equ	0xFF6
 11115                           tablat	equ	0xFF5
 11116                           prodh	equ	0xFF4
 11117                           prodl	equ	0xFF3
 11118                           intcon	equ	0xFF2
 11119                           indf0	equ	0xFEF
 11120                           postinc0	equ	0xFEE
 11121                           fsr0h	equ	0xFEA
 11122                           fsr0l	equ	0xFE9
 11123                           wreg	equ	0xFE8
 11124                           postdec1	equ	0xFE5
 11125                           plusw1	equ	0xFE3
 11126                           fsr1h	equ	0xFE2
 11127                           fsr1l	equ	0xFE1
 11128                           indf2	equ	0xFDF
 11129                           postinc2	equ	0xFDE
 11130                           postdec2	equ	0xFDD
 11131                           plusw2	equ	0xFDB
 11132                           fsr2h	equ	0xFDA
 11133                           fsr2l	equ	0xFD9
 11134                           status	equ	0xFD8
 11135                           
 11136 ;; *************** function ___ftadd *****************
 11137 ;; Defined at:
 11138 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 11139 ;; Parameters:    Size  Location     Type
 11140 ;;  f1              3    8[COMRAM] float 
 11141 ;;  f2              3   11[COMRAM] float 
 11142 ;; Auto vars:     Size  Location     Type
 11143 ;;  exp1            1   19[COMRAM] unsigned char 
 11144 ;;  exp2            1   18[COMRAM] unsigned char 
 11145 ;;  sign            1   17[COMRAM] unsigned char 
 11146 ;; Return value:  Size  Location     Type
 11147 ;;                  3    8[COMRAM] float 
 11148 ;; Registers used:
 11149 ;;		wreg, status,2, status,0, cstack
 11150 ;; Tracked objects:
 11151 ;;		On entry : 0/0
 11152 ;;		On exit  : 0/0
 11153 ;;		Unchanged: 0/0
 11154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11155 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11156 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11157 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11158 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11159 ;;Total ram usage:       12 bytes
 11160 ;; Hardware stack levels used:    1
 11161 ;; Hardware stack levels required when called:    1
 11162 ;; This function calls:
 11163 ;;		___ftpack
 11164 ;; This function is called by:
 11165 ;;		_tmr0_ISR
 11166 ;; This function uses a non-reentrant model
 11167 ;;
 11168                           
 11169                           	psect	text42
 11170  001B10                     __ptext42:
 11171                           	opt stack 0
 11172  001B10                     ___ftadd:
 11173                           	opt stack 21
 11174                           
 11175                           ;incstack = 0
 11176  001B10  C00B  F00F         	movff	___ftadd@f1+2,??___ftadd
 11177  001B14  6A10               	clrf	(??___ftadd+1)& (0+255),c
 11178  001B16  6A11               	clrf	(??___ftadd+2)& (0+255),c
 11179  001B18  340A               	rlcf	___ftadd@f1+1,w,c
 11180  001B1A  360F               	rlcf	??___ftadd& (0+255),f,c
 11181  001B1C  E301               	bnc	u383_41
 11182  001B1E  8010               	bsf	(??___ftadd+1)& (0+255),0,c
 11183  001B20                     u383_41:
 11184  001B20  500F               	movf	??___ftadd,w,c
 11185  001B22  6E14               	movwf	___ftadd@exp1,c
 11186  001B24  C00E  F00F         	movff	___ftadd@f2+2,??___ftadd
 11187  001B28  6A10               	clrf	(??___ftadd+1)& (0+255),c
 11188  001B2A  6A11               	clrf	(??___ftadd+2)& (0+255),c
 11189  001B2C  340D               	rlcf	___ftadd@f2+1,w,c
 11190  001B2E  360F               	rlcf	??___ftadd& (0+255),f,c
 11191  001B30  E301               	bnc	u384_41
 11192  001B32  8010               	bsf	(??___ftadd+1)& (0+255),0,c
 11193  001B34                     u384_41:
 11194  001B34  500F               	movf	??___ftadd,w,c
 11195  001B36  6E13               	movwf	___ftadd@exp2,c
 11196  001B38  5014               	movf	___ftadd@exp1,w,c
 11197  001B3A  B4D8               	btfsc	status,2,c
 11198  001B3C  D00B               	goto	i2u387_40
 11199  001B3E  5013               	movf	___ftadd@exp2,w,c
 11200  001B40  5C14               	subwf	___ftadd@exp1,w,c
 11201  001B42  B0D8               	btfsc	status,0,c
 11202  001B44  D00E               	goto	i2l933
 11203  001B46  5014               	movf	___ftadd@exp1,w,c
 11204  001B48  0800               	sublw	0
 11205  001B4A  2413               	addwf	___ftadd@exp2,w,c
 11206  001B4C  6E0F               	movwf	??___ftadd& (0+255),c
 11207  001B4E  0E18               	movlw	24
 11208  001B50  640F               	cpfsgt	??___ftadd,c
 11209  001B52  D007               	goto	i2l933
 11210  001B54                     i2u387_40:
 11211  001B54  C00C  F009         	movff	___ftadd@f2,?___ftadd
 11212  001B58  C00D  F00A         	movff	___ftadd@f2+1,?___ftadd+1
 11213  001B5C  C00E  F00B         	movff	___ftadd@f2+2,?___ftadd+2
 11214  001B60  0012               	return	
 11215  001B62                     i2l933:
 11216  001B62  5013               	movf	___ftadd@exp2,w,c
 11217  001B64  B4D8               	btfsc	status,2,c
 11218  001B66  D00B               	goto	i2u390_40
 11219  001B68  5014               	movf	___ftadd@exp1,w,c
 11220  001B6A  5C13               	subwf	___ftadd@exp2,w,c
 11221  001B6C  B0D8               	btfsc	status,0,c
 11222  001B6E  D00E               	goto	i2l937
 11223  001B70  5013               	movf	___ftadd@exp2,w,c
 11224  001B72  0800               	sublw	0
 11225  001B74  2414               	addwf	___ftadd@exp1,w,c
 11226  001B76  6E0F               	movwf	??___ftadd& (0+255),c
 11227  001B78  0E18               	movlw	24
 11228  001B7A  640F               	cpfsgt	??___ftadd,c
 11229  001B7C  D007               	goto	i2l937
 11230  001B7E                     i2u390_40:
 11231  001B7E  C009  F009         	movff	___ftadd@f1,?___ftadd
 11232  001B82  C00A  F00A         	movff	___ftadd@f1+1,?___ftadd+1
 11233  001B86  C00B  F00B         	movff	___ftadd@f1+2,?___ftadd+2
 11234  001B8A  0012               	return	
 11235  001B8C                     i2l937:
 11236  001B8C  0E06               	movlw	6
 11237  001B8E  6E12               	movwf	___ftadd@sign,c
 11238  001B90  BE0B               	btfsc	___ftadd@f1+2,7,c
 11239  001B92  8E12               	bsf	___ftadd@sign,7,c
 11240  001B94  BE0E               	btfsc	___ftadd@f2+2,7,c
 11241  001B96  8C12               	bsf	___ftadd@sign,6,c
 11242  001B98  8E0A               	bsf	___ftadd@f1+1,7,c
 11243  001B9A  0EFF               	movlw	255
 11244  001B9C  1609               	andwf	___ftadd@f1,f,c
 11245  001B9E  0EFF               	movlw	255
 11246  001BA0  160A               	andwf	___ftadd@f1+1,f,c
 11247  001BA2  0E00               	movlw	0
 11248  001BA4  160B               	andwf	___ftadd@f1+2,f,c
 11249  001BA6  8E0D               	bsf	___ftadd@f2+1,7,c
 11250  001BA8  0EFF               	movlw	255
 11251  001BAA  160C               	andwf	___ftadd@f2,f,c
 11252  001BAC  0EFF               	movlw	255
 11253  001BAE  160D               	andwf	___ftadd@f2+1,f,c
 11254  001BB0  0E00               	movlw	0
 11255  001BB2  160E               	andwf	___ftadd@f2+2,f,c
 11256  001BB4  5013               	movf	___ftadd@exp2,w,c
 11257  001BB6  5C14               	subwf	___ftadd@exp1,w,c
 11258  001BB8  B0D8               	btfsc	status,0,c
 11259  001BBA  D01B               	goto	i2l942
 11260  001BBC                     i2u393_40:
 11261  001BBC  90D8               	bcf	status,0,c
 11262  001BBE  360C               	rlcf	___ftadd@f2,f,c
 11263  001BC0  360D               	rlcf	___ftadd@f2+1,f,c
 11264  001BC2  360E               	rlcf	___ftadd@f2+2,f,c
 11265  001BC4  0613               	decf	___ftadd@exp2,f,c
 11266  001BC6  5014               	movf	___ftadd@exp1,w,c
 11267  001BC8  1813               	xorwf	___ftadd@exp2,w,c
 11268  001BCA  B4D8               	btfsc	status,2,c
 11269  001BCC  D00D               	goto	i2l947
 11270  001BCE  0612               	decf	___ftadd@sign,f,c
 11271  001BD0  C012  F00F         	movff	___ftadd@sign,??___ftadd
 11272  001BD4  0E07               	movlw	7
 11273  001BD6  160F               	andwf	??___ftadd,f,c
 11274  001BD8  B4D8               	btfsc	status,2,c
 11275  001BDA  D006               	goto	i2l947
 11276  001BDC  D7EF               	goto	i2u393_40
 11277  001BDE  90D8               	bcf	status,0,c
 11278  001BE0  320B               	rrcf	___ftadd@f1+2,f,c
 11279  001BE2  320A               	rrcf	___ftadd@f1+1,f,c
 11280  001BE4  3209               	rrcf	___ftadd@f1,f,c
 11281  001BE6  2A14               	incf	___ftadd@exp1,f,c
 11282  001BE8                     i2l947:
 11283  001BE8  5013               	movf	___ftadd@exp2,w,c
 11284  001BEA  1814               	xorwf	___ftadd@exp1,w,c
 11285  001BEC  B4D8               	btfsc	status,2,c
 11286  001BEE  D01F               	goto	i2u400_40
 11287  001BF0  D7F6               	goto	i2l948
 11288  001BF2                     i2l942:
 11289  001BF2  5014               	movf	___ftadd@exp1,w,c
 11290  001BF4  5C13               	subwf	___ftadd@exp2,w,c
 11291  001BF6  B0D8               	btfsc	status,0,c
 11292  001BF8  D01A               	goto	i2u400_40
 11293  001BFA                     i2u397_40:
 11294  001BFA  90D8               	bcf	status,0,c
 11295  001BFC  3609               	rlcf	___ftadd@f1,f,c
 11296  001BFE  360A               	rlcf	___ftadd@f1+1,f,c
 11297  001C00  360B               	rlcf	___ftadd@f1+2,f,c
 11298  001C02  0614               	decf	___ftadd@exp1,f,c
 11299  001C04  5014               	movf	___ftadd@exp1,w,c
 11300  001C06  1813               	xorwf	___ftadd@exp2,w,c
 11301  001C08  B4D8               	btfsc	status,2,c
 11302  001C0A  D00D               	goto	i2l956
 11303  001C0C  0612               	decf	___ftadd@sign,f,c
 11304  001C0E  C012  F00F         	movff	___ftadd@sign,??___ftadd
 11305  001C12  0E07               	movlw	7
 11306  001C14  160F               	andwf	??___ftadd,f,c
 11307  001C16  B4D8               	btfsc	status,2,c
 11308  001C18  D006               	goto	i2l956
 11309  001C1A  D7EF               	goto	i2u397_40
 11310  001C1C  90D8               	bcf	status,0,c
 11311  001C1E  320E               	rrcf	___ftadd@f2+2,f,c
 11312  001C20  320D               	rrcf	___ftadd@f2+1,f,c
 11313  001C22  320C               	rrcf	___ftadd@f2,f,c
 11314  001C24  2A13               	incf	___ftadd@exp2,f,c
 11315  001C26                     i2l956:
 11316  001C26  5013               	movf	___ftadd@exp2,w,c
 11317  001C28  1814               	xorwf	___ftadd@exp1,w,c
 11318  001C2A  A4D8               	btfss	status,2,c
 11319  001C2C  D7F7               	goto	i2l957
 11320  001C2E                     i2u400_40:
 11321  001C2E  AE12               	btfss	___ftadd@sign,7,c
 11322  001C30  D00C               	goto	i2l959
 11323  001C32  0EFF               	movlw	255
 11324  001C34  1A09               	xorwf	___ftadd@f1,f,c
 11325  001C36  0EFF               	movlw	255
 11326  001C38  1A0A               	xorwf	___ftadd@f1+1,f,c
 11327  001C3A  0EFF               	movlw	255
 11328  001C3C  1A0B               	xorwf	___ftadd@f1+2,f,c
 11329  001C3E  0E01               	movlw	1
 11330  001C40  2609               	addwf	___ftadd@f1,f,c
 11331  001C42  0E00               	movlw	0
 11332  001C44  220A               	addwfc	___ftadd@f1+1,f,c
 11333  001C46  0E00               	movlw	0
 11334  001C48  220B               	addwfc	___ftadd@f1+2,f,c
 11335  001C4A                     i2l959:
 11336  001C4A  AC12               	btfss	___ftadd@sign,6,c
 11337  001C4C  D00C               	goto	i2l960
 11338  001C4E  0EFF               	movlw	255
 11339  001C50  1A0C               	xorwf	___ftadd@f2,f,c
 11340  001C52  0EFF               	movlw	255
 11341  001C54  1A0D               	xorwf	___ftadd@f2+1,f,c
 11342  001C56  0EFF               	movlw	255
 11343  001C58  1A0E               	xorwf	___ftadd@f2+2,f,c
 11344  001C5A  0E01               	movlw	1
 11345  001C5C  260C               	addwf	___ftadd@f2,f,c
 11346  001C5E  0E00               	movlw	0
 11347  001C60  220D               	addwfc	___ftadd@f2+1,f,c
 11348  001C62  0E00               	movlw	0
 11349  001C64  220E               	addwfc	___ftadd@f2+2,f,c
 11350  001C66                     i2l960:
 11351  001C66  0E00               	movlw	0
 11352  001C68  6E12               	movwf	___ftadd@sign,c
 11353  001C6A  5009               	movf	___ftadd@f1,w,c
 11354  001C6C  260C               	addwf	___ftadd@f2,f,c
 11355  001C6E  500A               	movf	___ftadd@f1+1,w,c
 11356  001C70  220D               	addwfc	___ftadd@f2+1,f,c
 11357  001C72  500B               	movf	___ftadd@f1+2,w,c
 11358  001C74  220E               	addwfc	___ftadd@f2+2,f,c
 11359  001C76  AE0E               	btfss	___ftadd@f2+2,7,c
 11360  001C78  D00E               	goto	i2l961
 11361  001C7A  0EFF               	movlw	255
 11362  001C7C  1A0C               	xorwf	___ftadd@f2,f,c
 11363  001C7E  0EFF               	movlw	255
 11364  001C80  1A0D               	xorwf	___ftadd@f2+1,f,c
 11365  001C82  0EFF               	movlw	255
 11366  001C84  1A0E               	xorwf	___ftadd@f2+2,f,c
 11367  001C86  0E01               	movlw	1
 11368  001C88  260C               	addwf	___ftadd@f2,f,c
 11369  001C8A  0E00               	movlw	0
 11370  001C8C  220D               	addwfc	___ftadd@f2+1,f,c
 11371  001C8E  0E00               	movlw	0
 11372  001C90  220E               	addwfc	___ftadd@f2+2,f,c
 11373  001C92  0E01               	movlw	1
 11374  001C94  6E12               	movwf	___ftadd@sign,c
 11375  001C96                     i2l961:
 11376  001C96  C00C  F001         	movff	___ftadd@f2,___ftpack@arg
 11377  001C9A  C00D  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 11378  001C9E  C00E  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 11379  001CA2  C014  F004         	movff	___ftadd@exp1,___ftpack@exp
 11380  001CA6  C012  F005         	movff	___ftadd@sign,___ftpack@sign
 11381  001CAA  EC36  F00F         	call	___ftpack	;wreg free
 11382  001CAE  C001  F009         	movff	?___ftpack,?___ftadd
 11383  001CB2  C002  F00A         	movff	?___ftpack+1,?___ftadd+1
 11384  001CB6  C003  F00B         	movff	?___ftpack+2,?___ftadd+2
 11385  001CBA  0012               	return	
 11386  001CBC                     __end_of___ftadd:
 11387                           	opt stack 0
 11388                           tosu	equ	0xFFF
 11389                           tosh	equ	0xFFE
 11390                           tosl	equ	0xFFD
 11391                           pclatu	equ	0xFFB
 11392                           pclath	equ	0xFFA
 11393                           tblptru	equ	0xFF8
 11394                           tblptrh	equ	0xFF7
 11395                           tblptrl	equ	0xFF6
 11396                           tablat	equ	0xFF5
 11397                           prodh	equ	0xFF4
 11398                           prodl	equ	0xFF3
 11399                           intcon	equ	0xFF2
 11400                           indf0	equ	0xFEF
 11401                           postinc0	equ	0xFEE
 11402                           fsr0h	equ	0xFEA
 11403                           fsr0l	equ	0xFE9
 11404                           wreg	equ	0xFE8
 11405                           postdec1	equ	0xFE5
 11406                           plusw1	equ	0xFE3
 11407                           fsr1h	equ	0xFE2
 11408                           fsr1l	equ	0xFE1
 11409                           indf2	equ	0xFDF
 11410                           postinc2	equ	0xFDE
 11411                           postdec2	equ	0xFDD
 11412                           plusw2	equ	0xFDB
 11413                           fsr2h	equ	0xFDA
 11414                           fsr2l	equ	0xFD9
 11415                           status	equ	0xFD8
 11416                           
 11417 ;; *************** function ___ftpack *****************
 11418 ;; Defined at:
 11419 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 11420 ;; Parameters:    Size  Location     Type
 11421 ;;  arg             3    0[COMRAM] unsigned um
 11422 ;;  exp             1    3[COMRAM] unsigned char 
 11423 ;;  sign            1    4[COMRAM] unsigned char 
 11424 ;; Auto vars:     Size  Location     Type
 11425 ;;		None
 11426 ;; Return value:  Size  Location     Type
 11427 ;;                  3    0[COMRAM] float 
 11428 ;; Registers used:
 11429 ;;		wreg, status,2, status,0
 11430 ;; Tracked objects:
 11431 ;;		On entry : 0/0
 11432 ;;		On exit  : 0/0
 11433 ;;		Unchanged: 0/0
 11434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11435 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11437 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11438 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11439 ;;Total ram usage:        8 bytes
 11440 ;; Hardware stack levels used:    1
 11441 ;; This function calls:
 11442 ;;		Nothing
 11443 ;; This function is called by:
 11444 ;;		___ftadd
 11445 ;; This function uses a non-reentrant model
 11446 ;;
 11447                           
 11448                           	psect	text43
 11449  001E6C                     __ptext43:
 11450                           	opt stack 0
 11451  001E6C                     ___ftpack:
 11452                           	opt stack 21
 11453                           
 11454                           ;incstack = 0
 11455  001E6C  5004               	movf	___ftpack@exp,w,c
 11456  001E6E  B4D8               	btfsc	status,2,c
 11457  001E70  D005               	goto	i2u315_40
 11458  001E72  5001               	movf	___ftpack@arg,w,c
 11459  001E74  1002               	iorwf	___ftpack@arg+1,w,c
 11460  001E76  1003               	iorwf	___ftpack@arg+2,w,c
 11461  001E78  A4D8               	btfss	status,2,c
 11462  001E7A  D00C               	goto	i2l902
 11463  001E7C                     i2u315_40:
 11464  001E7C  0E00               	movlw	0
 11465  001E7E  6E01               	movwf	?___ftpack,c
 11466  001E80  0E00               	movlw	0
 11467  001E82  6E02               	movwf	?___ftpack+1,c
 11468  001E84  0E00               	movlw	0
 11469  001E86  6E03               	movwf	?___ftpack+2,c
 11470  001E88  0012               	return	
 11471  001E8A  2A04               	incf	___ftpack@exp,f,c
 11472  001E8C  90D8               	bcf	status,0,c
 11473  001E8E  3203               	rrcf	___ftpack@arg+2,f,c
 11474  001E90  3202               	rrcf	___ftpack@arg+1,f,c
 11475  001E92  3201               	rrcf	___ftpack@arg,f,c
 11476  001E94                     i2l902:
 11477  001E94  0E00               	movlw	0
 11478  001E96  1401               	andwf	___ftpack@arg,w,c
 11479  001E98  6E06               	movwf	??___ftpack& (0+255),c
 11480  001E9A  0E00               	movlw	0
 11481  001E9C  1402               	andwf	___ftpack@arg+1,w,c
 11482  001E9E  6E07               	movwf	(??___ftpack+1)& (0+255),c
 11483  001EA0  0EFE               	movlw	254
 11484  001EA2  1403               	andwf	___ftpack@arg+2,w,c
 11485  001EA4  6E08               	movwf	(??___ftpack+2)& (0+255),c
 11486  001EA6  5006               	movf	??___ftpack,w,c
 11487  001EA8  1007               	iorwf	??___ftpack+1,w,c
 11488  001EAA  1008               	iorwf	??___ftpack+2,w,c
 11489  001EAC  B4D8               	btfsc	status,2,c
 11490  001EAE  D00C               	goto	i2l905
 11491  001EB0  D7EC               	goto	i2l903
 11492  001EB2  2A04               	incf	___ftpack@exp,f,c
 11493  001EB4  0E01               	movlw	1
 11494  001EB6  2601               	addwf	___ftpack@arg,f,c
 11495  001EB8  0E00               	movlw	0
 11496  001EBA  2202               	addwfc	___ftpack@arg+1,f,c
 11497  001EBC  0E00               	movlw	0
 11498  001EBE  2203               	addwfc	___ftpack@arg+2,f,c
 11499  001EC0  90D8               	bcf	status,0,c
 11500  001EC2  3203               	rrcf	___ftpack@arg+2,f,c
 11501  001EC4  3202               	rrcf	___ftpack@arg+1,f,c
 11502  001EC6  3201               	rrcf	___ftpack@arg,f,c
 11503  001EC8                     i2l905:
 11504  001EC8  0E00               	movlw	0
 11505  001ECA  1401               	andwf	___ftpack@arg,w,c
 11506  001ECC  6E06               	movwf	??___ftpack& (0+255),c
 11507  001ECE  0E00               	movlw	0
 11508  001ED0  1402               	andwf	___ftpack@arg+1,w,c
 11509  001ED2  6E07               	movwf	(??___ftpack+1)& (0+255),c
 11510  001ED4  0EFF               	movlw	255
 11511  001ED6  1403               	andwf	___ftpack@arg+2,w,c
 11512  001ED8  6E08               	movwf	(??___ftpack+2)& (0+255),c
 11513  001EDA  5006               	movf	??___ftpack,w,c
 11514  001EDC  1007               	iorwf	??___ftpack+1,w,c
 11515  001EDE  1008               	iorwf	??___ftpack+2,w,c
 11516  001EE0  B4D8               	btfsc	status,2,c
 11517  001EE2  D006               	goto	i2l908
 11518  001EE4  D7E6               	goto	i2l906
 11519  001EE6  0604               	decf	___ftpack@exp,f,c
 11520  001EE8  90D8               	bcf	status,0,c
 11521  001EEA  3601               	rlcf	___ftpack@arg,f,c
 11522  001EEC  3602               	rlcf	___ftpack@arg+1,f,c
 11523  001EEE  3603               	rlcf	___ftpack@arg+2,f,c
 11524  001EF0                     i2l908:
 11525  001EF0  BE02               	btfsc	___ftpack@arg+1,7,c
 11526  001EF2  D003               	goto	i2u319_40
 11527  001EF4  0E02               	movlw	2
 11528  001EF6  6004               	cpfslt	___ftpack@exp,c
 11529  001EF8  D7F6               	goto	i2l909
 11530  001EFA                     i2u319_40:
 11531  001EFA  A004               	btfss	___ftpack@exp,0,c
 11532  001EFC  9E02               	bcf	___ftpack@arg+1,7,c
 11533  001EFE  90D8               	bcf	status,0,c
 11534  001F00  3204               	rrcf	___ftpack@exp,f,c
 11535  001F02  5004               	movf	___ftpack@exp,w,c
 11536  001F04  1203               	iorwf	___ftpack@arg+2,f,c
 11537  001F06  5005               	movf	___ftpack@sign,w,c
 11538  001F08  A4D8               	btfss	status,2,c
 11539  001F0A  8E03               	bsf	___ftpack@arg+2,7,c
 11540  001F0C  C001  F001         	movff	___ftpack@arg,?___ftpack
 11541  001F10  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 11542  001F14  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 11543  001F18  0012               	return	
 11544  001F1A                     __end_of___ftpack:
 11545                           	opt stack 0
 11546                           tosu	equ	0xFFF
 11547                           tosh	equ	0xFFE
 11548                           tosl	equ	0xFFD
 11549                           pclatu	equ	0xFFB
 11550                           pclath	equ	0xFFA
 11551                           tblptru	equ	0xFF8
 11552                           tblptrh	equ	0xFF7
 11553                           tblptrl	equ	0xFF6
 11554                           tablat	equ	0xFF5
 11555                           prodh	equ	0xFF4
 11556                           prodl	equ	0xFF3
 11557                           intcon	equ	0xFF2
 11558                           indf0	equ	0xFEF
 11559                           postinc0	equ	0xFEE
 11560                           fsr0h	equ	0xFEA
 11561                           fsr0l	equ	0xFE9
 11562                           wreg	equ	0xFE8
 11563                           postdec1	equ	0xFE5
 11564                           plusw1	equ	0xFE3
 11565                           fsr1h	equ	0xFE2
 11566                           fsr1l	equ	0xFE1
 11567                           indf2	equ	0xFDF
 11568                           postinc2	equ	0xFDE
 11569                           postdec2	equ	0xFDD
 11570                           plusw2	equ	0xFDB
 11571                           fsr2h	equ	0xFDA
 11572                           fsr2l	equ	0xFD9
 11573                           status	equ	0xFD8
 11574                           tosu	equ	0xFFF
 11575                           tosh	equ	0xFFE
 11576                           tosl	equ	0xFFD
 11577                           pclatu	equ	0xFFB
 11578                           pclath	equ	0xFFA
 11579                           tblptru	equ	0xFF8
 11580                           tblptrh	equ	0xFF7
 11581                           tblptrl	equ	0xFF6
 11582                           tablat	equ	0xFF5
 11583                           prodh	equ	0xFF4
 11584                           prodl	equ	0xFF3
 11585                           intcon	equ	0xFF2
 11586                           indf0	equ	0xFEF
 11587                           postinc0	equ	0xFEE
 11588                           fsr0h	equ	0xFEA
 11589                           fsr0l	equ	0xFE9
 11590                           wreg	equ	0xFE8
 11591                           postdec1	equ	0xFE5
 11592                           plusw1	equ	0xFE3
 11593                           fsr1h	equ	0xFE2
 11594                           fsr1l	equ	0xFE1
 11595                           indf2	equ	0xFDF
 11596                           postinc2	equ	0xFDE
 11597                           postdec2	equ	0xFDD
 11598                           plusw2	equ	0xFDB
 11599                           fsr2h	equ	0xFDA
 11600                           fsr2l	equ	0xFD9
 11601                           status	equ	0xFD8
 11602                           
 11603                           	psect	text44
 11604  000000                     __ptext44:
 11605                           	opt stack 0
 11606                           tosu	equ	0xFFF
 11607                           tosh	equ	0xFFE
 11608                           tosl	equ	0xFFD
 11609                           pclatu	equ	0xFFB
 11610                           pclath	equ	0xFFA
 11611                           tblptru	equ	0xFF8
 11612                           tblptrh	equ	0xFF7
 11613                           tblptrl	equ	0xFF6
 11614                           tablat	equ	0xFF5
 11615                           prodh	equ	0xFF4
 11616                           prodl	equ	0xFF3
 11617                           intcon	equ	0xFF2
 11618                           indf0	equ	0xFEF
 11619                           postinc0	equ	0xFEE
 11620                           fsr0h	equ	0xFEA
 11621                           fsr0l	equ	0xFE9
 11622                           wreg	equ	0xFE8
 11623                           postdec1	equ	0xFE5
 11624                           plusw1	equ	0xFE3
 11625                           fsr1h	equ	0xFE2
 11626                           fsr1l	equ	0xFE1
 11627                           indf2	equ	0xFDF
 11628                           postinc2	equ	0xFDE
 11629                           postdec2	equ	0xFDD
 11630                           plusw2	equ	0xFDB
 11631                           fsr2h	equ	0xFDA
 11632                           fsr2l	equ	0xFD9
 11633                           status	equ	0xFD8
 11634                           
 11635                           	psect	rparam
 11636  0000                     tosu	equ	0xFFF
 11637                           tosh	equ	0xFFE
 11638                           tosl	equ	0xFFD
 11639                           pclatu	equ	0xFFB
 11640                           pclath	equ	0xFFA
 11641                           tblptru	equ	0xFF8
 11642                           tblptrh	equ	0xFF7
 11643                           tblptrl	equ	0xFF6
 11644                           tablat	equ	0xFF5
 11645                           prodh	equ	0xFF4
 11646                           prodl	equ	0xFF3
 11647                           intcon	equ	0xFF2
 11648                           indf0	equ	0xFEF
 11649                           postinc0	equ	0xFEE
 11650                           fsr0h	equ	0xFEA
 11651                           fsr0l	equ	0xFE9
 11652                           wreg	equ	0xFE8
 11653                           postdec1	equ	0xFE5
 11654                           plusw1	equ	0xFE3
 11655                           fsr1h	equ	0xFE2
 11656                           fsr1l	equ	0xFE1
 11657                           indf2	equ	0xFDF
 11658                           postinc2	equ	0xFDE
 11659                           postdec2	equ	0xFDD
 11660                           plusw2	equ	0xFDB
 11661                           fsr2h	equ	0xFDA
 11662                           fsr2l	equ	0xFD9
 11663                           status	equ	0xFD8
 11664                           
 11665                           	psect	temp
 11666  000059                     btemp:
 11667                           	opt stack 0
 11668  000059                     	ds	1
 11669  0000                     int$flags	set	btemp
 11670  0000                     wtemp6	set	btemp+1
 11671                           tosu	equ	0xFFF
 11672                           tosh	equ	0xFFE
 11673                           tosl	equ	0xFFD
 11674                           pclatu	equ	0xFFB
 11675                           pclath	equ	0xFFA
 11676                           tblptru	equ	0xFF8
 11677                           tblptrh	equ	0xFF7
 11678                           tblptrl	equ	0xFF6
 11679                           tablat	equ	0xFF5
 11680                           prodh	equ	0xFF4
 11681                           prodl	equ	0xFF3
 11682                           intcon	equ	0xFF2
 11683                           indf0	equ	0xFEF
 11684                           postinc0	equ	0xFEE
 11685                           fsr0h	equ	0xFEA
 11686                           fsr0l	equ	0xFE9
 11687                           wreg	equ	0xFE8
 11688                           postdec1	equ	0xFE5
 11689                           plusw1	equ	0xFE3
 11690                           fsr1h	equ	0xFE2
 11691                           fsr1l	equ	0xFE1
 11692                           indf2	equ	0xFDF
 11693                           postinc2	equ	0xFDE
 11694                           postdec2	equ	0xFDD
 11695                           plusw2	equ	0xFDB
 11696                           fsr2h	equ	0xFDA
 11697                           fsr2l	equ	0xFD9
 11698                           status	equ	0xFD8


Data Sizes:
    Strings     386
    Constant    525
    Data        171
    BSS         61
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     51      88
    BANK0           128    121     127
    BANK1           256      0     189
    BANK2           256     72      72
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 132
		 -> inputEntryQuestions(CODE[132]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 32
		 -> inputEntry@fastenerString(BANK0[32]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 32
		 -> inputEntry@fastenerString(BANK0[32]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_7(CODE[22]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 32
		 -> packaging@msg2(BANK2[32]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 32
		 -> NULL(NULL[0]), packaging@msg2(BANK2[32]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_23(CODE[4]), STR_22(CODE[6]), STR_21(CODE[16]), STR_20(CODE[11]), 
		 -> STR_19(CODE[12]), STR_18(CODE[9]), STR_16(CODE[19]), STR_15(CODE[10]), 
		 -> STR_14(CODE[17]), STR_8(CODE[15]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 32
		 -> NULL(NULL[0]), packaging@msg2(BANK2[32]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_23(CODE[4]), STR_22(CODE[6]), STR_21(CODE[16]), STR_20(CODE[11]), 
		 -> STR_19(CODE[12]), STR_18(CODE[9]), STR_16(CODE[19]), STR_15(CODE[10]), 
		 -> STR_14(CODE[17]), STR_8(CODE[15]), STR_7(CODE[22]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), printf@ap(BANK0[2]), 

    _doprnt@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), NULL(NULL[0]), STR_24(CODE[7]), 
		 -> fSLookup(BANK1[105]), packaging@msg2(BANK2[32]), 

    S1240__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S1240__prbuf$ptr	PTR unsigned char  size(2) Largest target is 32
		 -> NULL(NULL[0]), packaging@msg2(BANK2[32]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 32
		 -> NULL(NULL[0]), packaging@msg2(BANK2[32]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(BANK0[4]), printf@pb(BANK0[4]), 

    RTC_getTime@time	PTR unsigned char  size(2) Largest target is 7
		 -> RTC_getSeconds@time(BANK0[7]), 

    I2C_Send@data	PTR unsigned char  size(2) Largest target is 3967
		 -> STR_17(CODE[21]), STR_12(CODE[14]), inputEntry@msg(BANK0[24]), STR_11(CODE[25]), 
		 -> packaging@msg2(BANK2[32]), packaging@msg(BANK2[34]), STR_6(CODE[33]), RAM(DATA[3967]), 
		 -> STR_5(CODE[19]), STR_4(CODE[17]), STR_3(CODE[17]), STR_2(CODE[14]), 
		 -> STR_1(CODE[15]), 

    printErrorLCD@string	PTR unsigned char  size(2) Largest target is 224
		 -> errMsgs.noFasteners(CODE[32]), errMsgs.tooManySpacers(CODE[32]), errMsgs.tooManyWashers(CODE[32]), errMsgs.tooManyNuts(CODE[32]), 
		 -> errMsgs.tooManyBolts(CODE[32]), errMsgs.tooManyFasteners(CODE[32]), errMsgs.badEntry(CODE[32]), errMsgs(CODE[224]), 

    printStringLCD@string	PTR unsigned char  size(2) Largest target is 224
		 -> STR_13(CODE[30]), inputEntry@fastenerString(BANK0[32]), inputEntryQuestions(CODE[132]), STR_10(CODE[26]), 
		 -> STR_9(CODE[17]), errMsgs.noFasteners(CODE[32]), errMsgs.tooManySpacers(CODE[32]), errMsgs.tooManyWashers(CODE[32]), 
		 -> errMsgs.tooManyNuts(CODE[32]), errMsgs.tooManyBolts(CODE[32]), errMsgs.tooManyFasteners(CODE[32]), errMsgs.badEntry(CODE[32]), 
		 -> errMsgs(CODE[224]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 32
		 -> inputEntry@fastenerString(BANK0[32]), 

    packaging@set	PTR unsigned char  size(2) Largest target is 84
		 -> fastenerMatrix(CODE[84]), 


Critical Paths under _main in COMRAM

    _main->_hibernate
    _mainMenu->_clearing
    _mainMenu->_hibernate
    _viewLogs->_printStringLCD
    __doprnt->___lldiv
    ___llmod->___lldiv
    _packageCompartment->___fttol
    ___fttol->_tock
    _inputEntry->_printErrorLCD
    _strcpy->___wmul
    _printErrorLCD->_printStringLCD
    _lcd_set_cursor->_lcd_shift_cursor
    _lcd_shift_cursor->_lcdInst
    _hibernate->_printStringLCD
    _printStringLCD->___wmul
    _putch->_lcdNibble
    _clearing->_I2C_Send
    _I2C_Send->_I2C_Master_Write
    _RTC_startOperation->_RTC_getSeconds
    _RTC_getOperatingTime->_RTC_getSeconds
    _RTC_getSeconds->_RTC_getTime
    _RTC_getSeconds->___wmul
    _RTC_getTime->_I2C_Master_Read
    _RTC_getTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _interruptHandler in COMRAM

    _tmr0_ISR->___ftadd
    ___ftadd->___ftpack

Critical Paths under _main in BANK0

    _main->_mainMenu
    _mainMenu->_inputEntry
    _viewLogs->_printStringLCD
    _packaging->_packageCompartment
    _sprintf->__doprnt
    _printf->__doprnt
    __doprnt->___llmod
    _packageCompartment->___fttol
    _inputEntry->_printErrorLCD
    _printErrorLCD->_printStringLCD
    _hibernate->_printStringLCD
    _RTC_startOperation->_RTC_getSeconds
    _RTC_getOperatingTime->_RTC_getSeconds

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    _mainMenu->_packaging

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   61830
                                            120 BANK0      1     1      0
                    _I2C_Master_Init
                          _hibernate
                            _initLCD
                            _lcdInst
                           _mainMenu
 ---------------------------------------------------------------------------------
 (1) _mainMenu                                            16    16      0   58692
                                            104 BANK0     16    16      0
                           _I2C_Send
               _RTC_getOperatingTime
                 _RTC_startOperation
                           _clearing
                          _hibernate
                         _inputEntry
                            _lcdInst
                          _packaging
                         _pollKeypad
                     _printStringLCD
                             _printf
                              _putch
                           _viewLogs
 ---------------------------------------------------------------------------------
 (2) _viewLogs                                             3     3      0    2026
                                             49 COMRAM     1     1      0
                                             10 BANK0      2     2      0
                         _pollKeypad
                     _printStringLCD
 ---------------------------------------------------------------------------------
 (2) _packaging                                           78    78      0   19680
                                             52 BANK0      6     6      0
                                              0 BANK2     72    72      0
                           _I2C_Send
                             ___wmul
                            _lcdInst
                 _packageCompartment
                             _printf
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             18     6     12    3568
                                             27 BANK0     18     6     12
                             ___wmul (ARG)
                            __doprnt
 ---------------------------------------------------------------------------------
 (2) _printf                                              16     6     10    4212
                                             27 BANK0     16     6     10
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) __doprnt                                             24    18      6    3098
                                              9 BANK0     18    12      6
                   Absolute function *
                            ___lldiv
                            ___llmod
                              _putch *
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     412
                                              0 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _packageCompartment                                  46    43      3    5782
                                              6 BANK0     46    43      3
                           _I2C_Send
                            ___fttol
                       _motorControl
                                _tic
                               _tock
 ---------------------------------------------------------------------------------
 (4) _tock                                                 3     0      3       0
                                             38 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) _tic                                                  0     0      0       0
                           _tmr0Init
 ---------------------------------------------------------------------------------
 (5) _tmr0Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     461
                                             41 COMRAM     9     5      4
                                              0 BANK0      6     6      0
                               _tock (ARG)
 ---------------------------------------------------------------------------------
 (2) _inputEntry                                          94    94      0   13804
                                             12 BANK0     92    92      0
                           _I2C_Send
                             ___wmul
                            _lcdInst
                     _lcd_set_cursor
                         _pollKeypad
                      _printErrorLCD
                     _printStringLCD
                              _putch
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _strcpy                                               6     2      4     289
                                             44 COMRAM     6     2      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _printErrorLCD                                        4     2      2    2709
                                             49 COMRAM     2     0      2
                                             10 BANK0      2     2      0
                     _printStringLCD
 ---------------------------------------------------------------------------------
 (3) _lcd_set_cursor                                       4     3      1     920
                                             44 COMRAM     4     3      1
                            _lcdInst
                   _lcd_shift_cursor
 ---------------------------------------------------------------------------------
 (4) _lcd_shift_cursor                                     3     2      1     415
                                             41 COMRAM     3     2      1
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _hibernate                                            6     6      0    2026
                                             49 COMRAM     2     2      0
                                             10 BANK0      4     4      0
                         _pollKeypad
                     _printStringLCD
 ---------------------------------------------------------------------------------
 (3) _printStringLCD                                      15    13      2    1958
                                             44 COMRAM     5     3      2
                                              0 BANK0     10    10      0
                             ___wmul (ARG)
                            _lcdInst
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     195
                                             40 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _pollKeypad                                           1     1      0      34
                                             38 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _clearing                                             6     6      0    4380
                                             49 COMRAM     2     2      0
                                              0 BANK0      4     4      0
                           _I2C_Send
                       _motorControl
 ---------------------------------------------------------------------------------
 (4) _motorControl                                         2     1      1    1843
                                             38 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _I2C_Send                                             8     6      2    2262
                                             41 COMRAM     8     6      2
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _RTC_startOperation                                   0     0      0    3759
                     _RTC_getSeconds
 ---------------------------------------------------------------------------------
 (2) _RTC_getOperatingTime                                 8     4      4    3759
                                             11 BANK0      8     4      4
                     _RTC_getSeconds
 ---------------------------------------------------------------------------------
 (3) _RTC_getSeconds                                      17    13      4    3759
                                             44 COMRAM     6     2      4
                                              0 BANK0     11    11      0
                        _RTC_getTime
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2752
                                             38 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _RTC_getTime                                          3     1      2     797
                                             41 COMRAM     3     1      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     481
                                             39 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      65
                                             39 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                             38 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             41 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (4) _lcdInst                                              1     1      0     195
                                             40 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNibble                                            2     2      0     164
                                             38 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     722
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     601
                                             38 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _interruptHandler                                    18    18      0    3745
                                             20 COMRAM    18    18      0
                           _tmr0_ISR
 ---------------------------------------------------------------------------------
 (8) _tmr0_ISR                                             0     0      0    3745
                            ___ftadd
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             12     6      6    3745
                                              8 COMRAM    12     6      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2349
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _hibernate
     _pollKeypad
     _printStringLCD
       ___wmul (ARG)
       _lcdInst (ARG)
         _lcdNibble
       _putch (ARG)
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _mainMenu
     _I2C_Send
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _RTC_getOperatingTime
       _RTC_getSeconds
         _RTC_getTime
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         ___wmul
     _RTC_startOperation
       _RTC_getSeconds
         _RTC_getTime
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         ___wmul
     _clearing
       _I2C_Send
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _motorControl
     _hibernate
       _pollKeypad
       _printStringLCD
         ___wmul (ARG)
         _lcdInst (ARG)
           _lcdNibble
         _putch (ARG)
           _lcdNibble
     _inputEntry
       _I2C_Send
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       ___wmul
       _lcdInst
         _lcdNibble
       _lcd_set_cursor
         _lcdInst
           _lcdNibble
         _lcd_shift_cursor
           _lcdInst
             _lcdNibble
       _pollKeypad
       _printErrorLCD
         _printStringLCD
           ___wmul (ARG)
           _lcdInst (ARG)
             _lcdNibble
           _putch (ARG)
             _lcdNibble
       _printStringLCD
         ___wmul (ARG)
         _lcdInst (ARG)
           _lcdNibble
         _putch (ARG)
           _lcdNibble
       _putch
         _lcdNibble
       _strcpy
         ___wmul (ARG)
     _lcdInst
       _lcdNibble
     _packaging
       _I2C_Send
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       ___wmul
       _lcdInst
         _lcdNibble
       _packageCompartment
         _I2C_Send
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         ___fttol
           _tock (ARG)
         _motorControl
         _tic
           _tmr0Init
         _tock
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lldiv *
           ___llmod *
             ___lldiv (ARG)
           _putch *
             _lcdNibble
       _sprintf
         ___wmul (ARG)
         __doprnt (ARG)
           Absolute function(Fake) *
           ___lldiv *
           ___llmod *
             ___lldiv (ARG)
           _putch *
             _lcdNibble
     _pollKeypad
     _printStringLCD
       ___wmul (ARG)
       _lcdInst (ARG)
         _lcdNibble
       _putch (ARG)
         _lcdNibble
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lldiv *
         ___llmod *
           ___lldiv (ARG)
         _putch *
           _lcdNibble
     _putch
       _lcdNibble
     _viewLogs
       _pollKeypad
       _printStringLCD
         ___wmul (ARG)
         _lcdInst (ARG)
           _lcdNibble
         _putch (ARG)
           _lcdNibble

 _interruptHandler (ROOT)
   _tmr0_ISR
     ___ftadd
       ___ftpack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     48      48       9       28.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      BD       7       73.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     79      7F       5       99.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     33      58       1       69.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1DC      34        0.0%
DATA                 0      0     1DC       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Mar 11 23:59:38 2018

                            l95 0C00                              l96 0C92                              l97 0D00  
                            l98 0D6E                              l99 0DDC             printErrorLCD@string 0032  
           ___wmul@multiplicand 0029                     __CFG_BORV$3 000000                    __CFG_CP0$OFF 000000  
                   _RTC_getTime 2372                    __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000  
                  __CFG_CP3$OFF 000000                    ___ftadd@exp1 0014                    ___ftadd@exp2 0013  
                  ___ftadd@sign 0012                             l100 0E0C                             l101 0E3A  
                           l102 0E68                             l110 12F4                             l103 0E96  
                           l120 18CE                             l121 18D6                             l130 1A0E  
                           l131 1A16                             l115 159A                             l124 19A8  
                           l125 196E                             l134 1AD0                             l126 1976  
                           l135 1AAE                             l119 1908                             l136 1AB6  
                           l312 2646                             l129 1A48                             l233 2620  
                           l401 10B8                             l234 2618                             l330 011E  
                           l402 10D2                             l331 0110                             l334 06F8  
                           l350 028C                             l342 01CC                             l335 0174  
                           l319 271A                             l352 029A                             l344 0240  
                           l361 02EE                             l345 02AC                             l329 0080  
                           l450 1688                             l338 0696                             l354 02A6  
                           l451 16CE                             l371 0482                             l516 23AE  
                           l460 1860                             l452 171C                             l364 0322  
                           l356 02DE                             l348 027E                             l621 1DD0  
                           l453 174A                             l461 1870                             l381 0602  
                           l373 04F6                             l366 0442                             l631 1E04  
                           l471 26EC                             l447 1616                             l383 0634  
                           l375 056E                             l367 0466                             l640 1E42  
                           l632 1E10                             l368 0470                             l617 1E50  
                           l625 1DDE                             l457 182C                             l385 0666  
                           l377 059E                             l393 0F14                             l634 1E1C  
                           l626 1DEA                             l618 1DB8                             l386 068A  
                           l394 0F34                             l619 1DC4                             l379 05D0  
                           l395 0F70                             l476 20B8                             l628 1DF6  
                           l388 06C0                             l660 0784                             l652 0706  
                           l477 207A                             l637 1E2A                             l653 077C  
                           l397 1276                             l638 1E36                             l654 0750  
                           l663 08DE                             l399 0FEA                             l680 0A18  
                           l672 0916                             l664 0788                             l673 0948  
                           l657 08A6                             l682 0A26                             l674 0960  
                           l683 0AE6                             l667 07C2                             l684 0B10  
                           l668 082C                             l669 087C                             l679 09EE  
                  __CFG_CPB$OFF 000000                    __CFG_CPD$OFF 000000                             _tic 2820  
                           prod 000FF3                             tosl 000FFD                             wreg 000FE8  
               ?_lcd_set_cursor 002D                    __CFG_LVP$OFF 000000                    __CFG_WDT$OFF 000000  
                          l1010 1D86                            l1002 1CEA                            l1011 1D7A  
                          l1004 1D62                            l1013 1DA2                            l1005 1D52  
                          l1042 225A                            l1043 2268                            l1052 249A  
                          l1053 24A8                            l1038 2226                            l1039 221A  
                          l1048 2472                            l1049 2466                            l1251 26C0  
                          l1252 26B8                            l4201 172C                            l4223 182C  
                          l4151 27CC                            l4233 23A6                            l4323 0A26  
                          l5029 10C2                            l5047 1174                            l4299 0964  
                          l4571 12F4                            l4825 02FE                            l4745 0110  
                          l4843 0442                            l4925 06D4                            l4847 0450  
                          l4879 04E6                            l4897 059E                            l4889 053C  
                          ?_tic 0001                            STR_1 FF93                            STR_2 FFBF  
                          STR_3 FF61                            STR_4 FF72                            STR_5 FF2C  
                          STR_6 FE7C                            STR_7 FEEE                            STR_8 FFA2  
                          STR_9 FF3F                            _T0IE 007F95                            _T0IF 007F92  
                          _LATA 000F89                            _LATB 000F8A                            _LATC 000F8B  
                          _LATD 000F8C                            _LATE 000F8D                            u4205 22F4  
                          u4206 22F6                            u4215 279C                            u4240 222A  
                          u4216 279E                            u4410 20A8                            u4420 20E6  
                          u5310 19BC                            u4510 16B8                            u4270 2476  
                          u5231 12FE                            u6007 10E0                            u4417 209E  
                          u6017 10F6                            u5410 00F2                            u4195 22B4  
                          u4427 20DC                            u5251 15AC                            u6107 14EA  
                          u6027 1160                            u4196 22B6                            u4700 23CA  
                          u5340 1A5C                            u4540 1708                            u4460 1614  
                          u5420 0102                            u4517 16AE                            u6117 0EFA  
                          u6037 1182                            u4630 17F0                            u4470 1644  
                          u5510 0268                            u6207 2804                            u6127 0020  
                          u6047 1198                            u5280 191C                            u5600 02D4  
                          u5440 0172                            u6217 18F6                            u6137 0036  
                          u6057 11F0                            u5370 1AE4                            u4650 1826  
                          u4570 172C                            u4490 167A                            u6307 229C  
                          u6227 194C                            u4547 16FE                            u6147 00D2  
                          u6067 120A                            u4580 1748                            u5700 047A  
                          u6317 22A6                            u6237 1996                            u4637 17E6  
                          u4477 163A                            u6157 04C6                            u6077 1220  
                          u4670 185C                            u4590 1778                            u5630 0320  
                          u5454 0184                            u4910 0B22                            u6327 22DC  
                          u6247 19EC                            u6167 274C                            u5471 0198  
                          u5455 0180                            u6087 1268                            u4920 0B3E  
                          u6337 22E6                            u6257 1A36                            u4657 181C  
                          u4497 1670                            u6177 2608                            u6097 14D4  
                          u5810 06D4                            u5730 053C                            u4850 09A2  
                          u4770 0822                            u4738 073C                            u6267 1A8C  
                          u6187 15D8                            u4931 1CCC                            u5740 0560  
                          u4908 0AD2                            u4780 0866                            u6277 2570  
                          u4677 1852                            u4597 176E                            u6197 15EE  
                          u5750 0590                            u4950 1D08                            u4790 089E  
                          u6287 25A4                            u5760 05C2                            u5680 0450  
                          u4768 07F0                            u6297 2818                            u4777 0818  
                          u4769 0824                            u5770 05F4                            u5835 24EE  
                          u4955 1D00                            u4787 085C                            u5780 0626  
                          u4797 0894                            u5790 0658                            u4990 1D8C  
                          u4888 09DA                            u5937 21CC                            u5890 1174  
                          u5947 21E2                            u5957 0FA2                            u5967 0FB8  
                          u5977 102A                            u5987 1040                            u5997 10AA  
                          _STOP 007E3C                            _main 2176        __end_of_interruptHandler 2060  
                  ___ftpack@arg 0001            _RTC_getOperatingTime 2518                    ___ftpack@exp 0004  
                          _tock 2844                            _test 00F9    __end_of_assemblyStepEncoding FCBD  
                          fsr0h 000FEA                            fsr1h 000FE2                            indf0 000FEF  
                          fsr2h 000FDA                            fsr0l 000FE9                            indf2 000FDF  
                          fsr1l 000FE1                            fsr2l 000FD9                __end_of_I2C_Send 20F2  
                          btemp 0059                            prodh 000FF4                            prodl 000FF3  
                          start 000E                   __CFG_IESO$OFF 000000                   __CFG_MCLRE$ON 000000  
                  ___param_bank 000000                __end_of_LCD_LEFT FCBF                    ___fttol@exp1 0085  
                  ___fttol@lval 0081                           ??_tic 0027                 ??_printErrorLCD 008A  
         I2C_Master_Read@ackBit 0028                ?_I2C_Master_Init 0080                ?_I2C_Master_Read 0001  
              ?_I2C_Master_Wait 0001                ?_I2C_Master_Stop 0001                           ?_main 0001  
               __end_of___ftadd 1CBC                           STR_10 FEBB                           STR_11 FED5  
                         STR_20 FFD9                           STR_12 FFB1                           STR_21 FF83  
                         STR_13 FE9D                           STR_22 FFF4                           STR_14 FF50  
                         STR_15 FF22                           STR_23 FFFA                           STR_24 FFED  
                         STR_16 FF19                           STR_17 FF04                           STR_18 FFE4  
                         STR_19 FFCD                           ?_tock 0027                 __end_of___lldiv 227A  
               __end_of___llmod 24BA                 __end_of___fttol 1DB4                           i2l144 2014  
                         i2l902 1E94                           i2l903 1E8A                           i2l905 1EC8  
                         i2l906 1EB2                           i2l587 2448                           i2l908 1EF0  
                         i2l909 1EE6                           i2l933 1B62                           i2l942 1BF2  
                         i2l960 1C66                           i2l961 1C96                           i2l937 1B8C  
                         i2l947 1BE8                           i2l956 1C26                           i2l948 1BDE  
                         i2l957 1C1C                           i2l959 1C4A                           _TMR0H 000FD7  
                         _TMR0L 000FD6                           _PORTB 000F81                 __end_of__doprnt 0B48  
                         _TRISA 000F92                           _TRISB 000F93                           _TRISC 000F94  
                         _TRISD 000F95                           _TRISE 000F96            printStringLCD@string 002D  
               mainMenu@pressed 00F4                   __CFG_PWRT$OFF 000000              RTC_getSeconds@time 0080  
                 __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000                   __CFG_WRT2$OFF 000000  
                 __CFG_WRT3$OFF 000000                 __end_of_lcdInst 2820                  __CFG_EBTR0$OFF 000000  
                __CFG_FCMEN$OFF 000000                  __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000  
                __CFG_EBTR3$OFF 000000                   __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000  
                 __CFG_WRTD$OFF 000000                 __end_of_errMsgs FDA4                 __end_of_initLCD 25B6  
                __CFG_EBTRB$OFF 000000                 __end_of_dpowers FC97                   ___ftpack@sign 0005  
                         _putch 27F8                           pclath 000FFA                           tablat 000FF5  
             _LCDinterruptState 0052                           plusw1 000FE3                           plusw2 000FDB  
         ?_RTC_getOperatingTime 008B                           status 000FD8     I2C_Master_Read@receivedByte 0029  
                         wtemp6 005A                 __end_of_sprintf 25FA                _timeSinceLastTic 0053  
               __initialization 20F2                    __end_of_main 21F8                  _RTC_getSeconds 22F8  
                  __end_of_tock 2852               ?_lcd_shift_cursor 002A                  __CFG_OSC$HSPLL 000000  
             __end_of_LCD_RIGHT FCC0                          ??_main 00F8                   ___fttol@sign1 0080  
                        ??_tock 002A              ??_lcd_shift_cursor 002B                   __activetblptr 000003  
                packaging@F3205 0100               ?_I2C_Master_Start 0001               ?_I2C_Master_Write 0028  
                     I2C_Send@i 0030              ??_I2C_Master_Start 0028                          _ADCON0 000FC2  
                        _ADCON1 000FC1              ??_I2C_Master_Write 002A                ___llmod@dividend 0080  
   __size_of_RTC_startOperation 0016                          ?_putch 0001                __end_of___ftpack 1F1A  
                        u383_41 1B20                          u384_41 1B34                   inputEntry@msg 0090  
                        _TMR0IE 007F95                   inputEntry@sum 00D5                          _SSPADD 000FC8  
                        _SSPBUF 000FC9                __end_of_clearing 1B10                  __CFG_XINST$OFF 000000  
        __end_of_RTC_getSeconds 2372                __end_of_mainMenu 12A0                    RTC_getTime@i 002C  
               motorControl@dir 0027                          ___wmul 275A                       ??___ftadd 000F  
                __CFG_STVREN$ON 000000                __end_of_nanoAddr FCBE                       ??___lldiv 002F  
                     ??___llmod 0034                       ??___fttol 002E                       ??__doprnt 008F  
                        _params 01A3                          clear_0 2150                          clear_1 2166  
                        _extras 003C                    __doprnt@flag 0093                ??_printStringLCD 002F  
                     ??_lcdInst 0029                          _printf 2676                __end_of_tmr0_ISR 2452  
                  __doprnt@prec 0091                __end_of_tmr0Init 27C6                          _strcpy 26AE  
                     ??_initLCD 002A            _assemblyStepEncoding FCB8                    __pdataCOMRAM 0053  
                     ?_I2C_Send 002A                    __mediumconst FC6E                __end_of_viewLogs 2734  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
                     ??_sprintf 0034            __end_of_LCDMenuIcons FCB8          ??_RTC_getOperatingTime 008F  
                    __accesstop 0080         __end_of__initialization 216C                 __CFG_PBADEN$OFF 000000  
                    ___ftadd@f1 0009                      ___ftadd@f2 000C                   ___rparam_used 000001  
               ?_RTC_getSeconds 002D      packageCompartment@currTime 00B0                      ___fttol@f1 002A  
                __pcstackCOMRAM 0001                    __pidataBANK0 2872                    __pidataBANK1 1F1A  
               viewLogs@pressed 008A      __end_of_packageCompartment 0F0A                   __end_of_putch 280C  
                  ?_RTC_getTime 002A                ??_lcd_set_cursor 002E              __size_of_lcdNibble 007E  
                    ??_I2C_Send 002C                     inputEntry@i 00E5                    packaging@msg 0200  
                  packaging@set 0244              __size_of_hibernate 003C                      __doprnt@ap 008D  
                    __doprnt@cp 0098                      __doprnt@pb 0089                         ??_putch 0029  
                    __pbssBANK0 00F9                      __pbssBANK1 01A3              __size_of_packaging 030E  
           mainMenu@needToPrint 00F2               ?_interruptHandler 0001              ??_interruptHandler 0015  
           _inputEntryQuestions FDA4                         ?___wmul 0027                       ?___ftpack 0001  
                       ?_printf 009B                    I2C_Send@data 002A                         ?_strcpy 002D  
                inputEntry@done 00CB                       ?_clearing 0001                  inputEntry@numB 00D7  
                inputEntry@numN 00D9                  inputEntry@numS 00DB                  inputEntry@numW 00DD  
                       _SSPCON1 000FC6                         _SSPCON2 000FC5                         _SSPSTAT 000FC7  
                     ?_mainMenu 0001              timer@operatingTime 0056                       ?_tmr0_ISR 0001  
             __end_of_lcdNibble 22F8                       ?_tmr0Init 0001                         __Hparam 0000  
                       __Lparam 0000               __end_of_hibernate 2676                       ?_viewLogs 0001  
                       ___ftadd 1B10                         ___lldiv 21F8                 __size_of___wmul 0026  
                       ___llmod 2452                         ___fttol 1CBC                         __doprnt 0704  
                 ?_motorControl 0027                         __pcinit 20F2                      ??___ftpack 0006  
                       __ramtop 1000                         _endTime 0044           __end_of_printErrorLCD 275A  
                       _lcdInst 280C               __end_of_packaging 15AE                         __ptext0 2176  
                       __ptext1 0F0A                         __ptext2 270E                         __ptext3 12A0  
                       __ptext4 25B6                         __ptext5 2676                         __ptext6 0704  
                       __ptext7 2452                         __ptext8 0B48                         __ptext9 2844  
               __size_of_printf 0038                       _T0CONbits 000FD5                         _errMsgs FCC4  
               __size_of_strcpy 0032                         _initLCD 256A                         _dpowers FC6F  
    printStringLCD@newlineIndex 0084                    __size_of_tic 0012                       _LCD_RIGHT FCBF  
                    _inputEntry 0012        __size_of_I2C_Master_Init 005E        __size_of_I2C_Master_Read 0024  
                    ??_clearing 0032        __size_of_I2C_Master_Wait 0012        __size_of_I2C_Master_Stop 0008  
      printStringLCD@spaceIndex 0082                 printStringLCD@i 0088                 printStringLCD@j 0080  
                       _sprintf 25B6                  __pintcode_body 1FBE       __size_of_lcd_shift_cursor 001C  
          end_of_initialization 216C                      ??_mainMenu 00E8           __end_of_LCD_SIZE_HORZ FCC2  
         __end_of_LCD_SIZE_VERT FCC1        inputEntry@fastenerString 00A8                         int_func 1FBE  
                    ??_tmr0_ISR 0015                      ??_tmr0Init 0027       __size_of_I2C_Master_Start 0008  
     __size_of_I2C_Master_Write 000A                 ___lldiv@divisor 002B                 ___lldiv@counter 0033  
                    _pollKeypad 26E0          packageCompartment@numB 009F          packageCompartment@numN 00A1  
        packageCompartment@numS 00A3          packageCompartment@numW 00A5                         printf@f 009B  
                       postdec1 000FE5                         postdec2 000FDD                      ??_viewLogs 0032  
                       postinc0 000FEE                         postinc2 000FDE                  ??_motorControl 0028  
     inputEntry@doneCompartment 00D3                    _LCDMenuIcons FCA8                       _PORTAbits 000F80  
                     _PORTBbits 000F81            __size_of_RTC_getTime 0072                       _TRISCbits 000F94  
    __end_of_RTC_startOperation 27F8               __size_of_I2C_Send 0092    inputEntry@compartmentsToFill 00CA  
              ??_RTC_getSeconds 0031       lcd_shift_cursor@direction 002A                  __end_of___wmul 2780  
                 __pidataCOMRAM 286C              pollKeypad@keypress 0027                  __end_of_printf 26AE  
           packageCompartment@b 008E             packageCompartment@n 0086             packageCompartment@s 0087  
           packageCompartment@w 0088                  __end_of_strcpy 26E0             start_initialization 20F2  
                   ?_inputEntry 0001              _packageCompartment 0B48                     __end_of_tic 2832  
          inputEntry@numPressed 00E1               ??_I2C_Master_Init 0084               ??_I2C_Master_Read 0028  
           ?_packageCompartment 0086               ??_I2C_Master_Wait 0027               ??_I2C_Master_Stop 0028  
 __size_of_RTC_getOperatingTime 0052                 ___llmod@divisor 0084                 ___llmod@counter 0088  
                 packaging@msg2 0222                   packaging@mult 0246         packaging@compartmentNum 0242  
                   ?_pollKeypad 0001                        ??___wmul 002B                     __doprnt@val 0094  
      I2C_Master_Init@clockFreq 0080                     __pdataBANK0 00FD                     __pdataBANK1 0100  
              __CFG_LPT1OSC$OFF 000000            ??_packageCompartment 0089                        ??_printf 0034  
     __size_of_interruptHandler 2058                        ??_strcpy 0031               __size_of___ftpack 00AE  
                   __pbssCOMRAM 0034                hibernate@pressed 0032                   __pcstackBANK0 0080  
                 __pcstackBANK2 0200        inputEntry@inputEntryStep 00DF                _lcd_shift_cursor 27C6  
       __size_of_printStringLCD 02C4               __size_of_clearing 029E                 RTC_getTime@time 002A  
          __end_of_motorControl 1E6C                       __doprnt@c 009A                       __doprnt@f 008B  
             __size_of_mainMenu 0396                _I2C_Master_Start 2864                _I2C_Master_Write 2852  
             __CFG_CCP2MX$PORTC 000000               __size_of_tmr0_ISR 006E               __size_of_tmr0Init 0022  
           __size_of_inputEntry 06F2                       __pintcode 0008                   __pmediumconst FC6E  
                     _lcdNibble 227A                        ?___ftadd 0009                        ?___lldiv 0027  
                      ?___llmod 0080                        ?___fttol 002A                        ?__doprnt 0089  
             __size_of_viewLogs 0026                       _hibernate 263A                        ?_lcdInst 0001  
                     _dispensed 0034                        ?_initLCD 0001                        _I2C_Send 2060  
                     _packaging 12A0             __size_of_pollKeypad 002E                        ?_sprintf 009B  
                __size_of_putch 0014                 inputEntry@F3177 00FD                 inputEntry@F3198 0122  
           __end_of_keypadChars FCA8                        _LCD_LEFT FCBE         __size_of_lcd_set_cursor 0040  
                _fastenerMatrix FE28                  ___wmul@product 002B                        _LATBbits 000F8A  
                      _LATCbits 000F8B      inputEntry@compartmentLabel 00C8                        _LATDbits 000F8C  
                      _LATEbits 000F8D                   _operatingTime 004C                       clearing@i 0082  
               lcd_set_cursor@i 002F                 lcd_set_cursor@x 0030                 lcd_set_cursor@y 002D  
                      i2u400_40 1C2E                        i2u315_40 1E7C                        i2u319_40 1EFA  
  packageCompartment@resolution 00AF                        i2u390_40 1B7E                       _operating 0051  
                      i2u393_40 1BBC                        i2u387_40 1B54                        i2u397_40 1BFA  
               inputEntry@found 00CD                __CFG_WDTPS$32768 000000                      ?_lcdNibble 0001  
      inputEntry@compartmentNum 00E3                       _timerInit 0050     __end_of_inputEntryQuestions FE28  
                    ?_hibernate 0001               ___wmul@multiplier 0027                       _startTime 0048  
                 lcdNibble@data 0028                   lcdNibble@temp 0027           RTC_getSeconds@seconds 0087  
                    ?_packaging 0001                       mainMenu@i 00F6                  _LCD_HORZ_LIMIT FCC3  
           inputEntry@setIsGood 00CF                       copy_data0 2106                       copy_data1 213E  
        __end_of_fastenerMatrix FE7C         inputEntry@doneMultiples 00D1              mainMenu@startPress 00F0  
        __size_of_printErrorLCD 0026              _RTC_startOperation 27E2                        __Hrparam 0000  
                      __Lrparam 0000              __CFG_BOREN$SBORDIS 000000                        _fSLookup 013A  
           ?_RTC_startOperation 0001                 I2C_Send@address 002F                __size_of___ftadd 01AC  
              __size_of___lldiv 0082                __size_of___llmod 0068                __size_of___fttol 00F8  
                 ??_RTC_getTime 002C                        ___ftpack 1E6C                __size_of__doprnt 0444  
              _interruptHandler 0008                __size_of_lcdInst 0014               motorControl@motor 0028  
               _I2C_Master_Init 24BA                 _I2C_Master_Read 2780                __size_of_initLCD 004C  
               _I2C_Master_Wait 2832                 _I2C_Master_Stop 285C          __end_of_LCD_HORZ_LIMIT FCC4  
                  ??_inputEntry 008C                     _keypadChars FC97           __size_of_motorControl 00B8  
                      _clearing 1872                        __ptext10 2820                        __ptext11 27A4  
                      __ptext20 27F8                        __ptext12 1CBC                        __ptext21 26E0  
                      __ptext13 0012                        __ptext30 2852                        __ptext22 1872  
                      __ptext14 26AE                        __ptext31 285C                        __ptext23 1DB4  
                      __ptext15 2734                        __ptext32 2864                        __ptext24 2060  
                      __ptext16 25FA                        __ptext41 23E4                        __ptext33 2780  
                      __ptext25 27E2                        __ptext17 27C6                        __ptext42 1B10  
                      __ptext34 2832                        __ptext26 2518                        __ptext18 263A  
                      __ptext43 1E6C                        __ptext35 256A                        __ptext27 22F8  
                      __ptext19 15AE                        __ptext44 0000                        __ptext36 280C  
                      __ptext28 275A                        __ptext37 227A                        __ptext29 2372  
                      __ptext38 24BA                        __ptext39 21F8                  _printStringLCD 15AE  
          ??_RTC_startOperation 0033                  _LCD_VERT_LIMIT FCC2                        _mainMenu 0F0A  
              __size_of_sprintf 0044                        _nanoAddr FCBD                      strcpy@from 002F  
                 __size_of_main 0082                   __size_of_tock 000E                        _tmr0_ISR 23E4  
                      _tmr0Init 27A4                    ??_pollKeypad 0027                     ??_lcdNibble 0027  
                      _viewLogs 270E              __end_of_inputEntry 0704                        int$flags 0059  
      __end_of_lcd_shift_cursor 27E2                     ??_hibernate 008A    __end_of_RTC_getOperatingTime 256A  
                  _motorControl 1DB4     I2C_Master_Write@byteToWrite 0028                   _printErrorLCD 2734  
             lcd_shift_cursor@n 002C                       putch@data 0029        __end_of_I2C_Master_Start 286C  
      __end_of_I2C_Master_Write 285C                      _INTCONbits 000FF2                     ??_packaging 00B4  
        __end_of_printStringLCD 1872          __end_of_LCD_VERT_LIMIT FCC3             __end_of_RTC_getTime 23E4  
printStringLCD@newlineCharIndex 0086              __end_of_pollKeypad 270E                        intlevel2 0000  
                _lcd_set_cursor 25FA                       sprintf@ap 00A7                       sprintf@pb 00A9  
                     sprintf@wh 009B                   _LCD_SIZE_HORZ FCC1                   _LCD_SIZE_VERT FCC0  
              ___lldiv@dividend 0027           mainMenu@operationTime 00EC         packageCompartment@doneB 00A7  
       packageCompartment@doneN 00A9         packageCompartment@doneS 00AB         packageCompartment@doneW 00AD  
       packageCompartment@timeB 008F         packageCompartment@timeN 0093         packageCompartment@timeS 0097  
       packageCompartment@timeW 009B                        printf@ap 00A5                        printf@pb 00A7  
       __size_of_RTC_getSeconds 007A         __end_of_I2C_Master_Init 2518         __end_of_I2C_Master_Read 27A4  
       __end_of_I2C_Master_Wait 2844         __end_of_I2C_Master_Stop 2864                     lcdInst@data 0029  
             inputEntry@pressed 00E7                  ?_printErrorLCD 0032     __size_of_packageCompartment 03C2  
                      sprintf@f 009D                ___lldiv@quotient 002F                        strcpy@cp 0031  
                      strcpy@to 002D                 ?_printStringLCD 002D                     _SSPCON1bits 000FC6  
                   _SSPCON2bits 000FC5          __end_of_lcd_set_cursor 263A        lcd_shift_cursor@numChars 002B  
              clearing@spinTime 0080  
