

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Feb 06 00:30:27 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    29  0000                     
    30                           ; Version 1.45
    31                           ; Generated 16/11/2017 GMT
    32                           ; 
    33                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC18F4620 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     
    65                           	psect	idataCOMRAM
    66  00F1A8                     __pidataCOMRAM:
    67                           	opt stack 0
    68                           
    69                           ;initializer for inputEntry@F3113
    70  00F1A8  43                 	db	67
    71  00F1A9  30                 	db	48
    72                           
    73                           	psect	mediumconst
    74  00FE04                     __pmediumconst:
    75                           	opt stack 0
    76  00FE04  00                 	db	0
    77  00FE05                     _fastenerMatrix:
    78                           	opt stack 0
    79  00FE05  01                 	db	1
    80  00FE06  00                 	db	0
    81  00FE07  00                 	db	0
    82  00FE08  00                 	db	0
    83  00FE09  00                 	db	0
    84  00FE0A  01                 	db	1
    85  00FE0B  00                 	db	0
    86  00FE0C  00                 	db	0
    87  00FE0D  00                 	db	0
    88  00FE0E  00                 	db	0
    89  00FE0F  01                 	db	1
    90  00FE10  00                 	db	0
    91  00FE11  00                 	db	0
    92  00FE12  00                 	db	0
    93  00FE13  00                 	db	0
    94  00FE14  01                 	db	1
    95  00FE15  01                 	db	1
    96  00FE16  01                 	db	1
    97  00FE17  00                 	db	0
    98  00FE18  00                 	db	0
    99  00FE19  01                 	db	1
   100  00FE1A  00                 	db	0
   101  00FE1B  01                 	db	1
   102  00FE1C  00                 	db	0
   103  00FE1D  01                 	db	1
   104  00FE1E  00                 	db	0
   105  00FE1F  00                 	db	0
   106  00FE20  01                 	db	1
   107  00FE21  02                 	db	2
   108  00FE22  01                 	db	1
   109  00FE23  00                 	db	0
   110  00FE24  00                 	db	0
   111  00FE25  02                 	db	2
   112  00FE26  00                 	db	0
   113  00FE27  01                 	db	1
   114  00FE28  00                 	db	0
   115  00FE29  02                 	db	2
   116  00FE2A  00                 	db	0
   117  00FE2B  00                 	db	0
   118  00FE2C  01                 	db	1
   119  00FE2D  01                 	db	1
   120  00FE2E  01                 	db	1
   121  00FE2F  00                 	db	0
   122  00FE30  01                 	db	1
   123  00FE31  01                 	db	1
   124  00FE32  00                 	db	0
   125  00FE33  01                 	db	1
   126  00FE34  01                 	db	1
   127  00FE35  01                 	db	1
   128  00FE36  00                 	db	0
   129  00FE37  00                 	db	0
   130  00FE38  02                 	db	2
   131  00FE39  01                 	db	1
   132  00FE3A  01                 	db	1
   133  00FE3B  00                 	db	0
   134  00FE3C  02                 	db	2
   135  00FE3D  01                 	db	1
   136  00FE3E  00                 	db	0
   137  00FE3F  01                 	db	1
   138  00FE40  02                 	db	2
   139  00FE41  02                 	db	2
   140  00FE42  00                 	db	0
   141  00FE43  01                 	db	1
   142  00FE44  01                 	db	1
   143  00FE45  02                 	db	2
   144  00FE46  01                 	db	1
   145  00FE47  00                 	db	0
   146  00FE48  01                 	db	1
   147  00FE49  01                 	db	1
   148  00FE4A  02                 	db	2
   149  00FE4B  00                 	db	0
   150  00FE4C  01                 	db	1
   151  00FE4D  01                 	db	1
   152  00FE4E  03                 	db	3
   153  00FE4F  00                 	db	0
   154  00FE50  00                 	db	0
   155  00FE51  01                 	db	1
   156  00FE52  00                 	db	0
   157  00FE53  00                 	db	0
   158  00FE54  03                 	db	3
   159  00FE55                     __end_of_fastenerMatrix:
   160                           	opt stack 0
   161  00FE55                     _keypadChars:
   162                           	opt stack 0
   163  00FE55  31                 	db	49
   164  00FE56  32                 	db	50
   165  00FE57  33                 	db	51
   166  00FE58  42                 	db	66
   167  00FE59  34                 	db	52
   168  00FE5A  35                 	db	53
   169  00FE5B  36                 	db	54
   170  00FE5C  4E                 	db	78
   171  00FE5D  37                 	db	55
   172  00FE5E  38                 	db	56
   173  00FE5F  39                 	db	57
   174  00FE60  53                 	db	83
   175  00FE61  2A                 	db	42
   176  00FE62  30                 	db	48
   177  00FE63  23                 	db	35
   178  00FE64  57                 	db	87
   179  00FE65  00                 	db	0
   180  00FE66                     __end_of_keypadChars:
   181                           	opt stack 0
   182  00FE66                     _LCDMenuIcons:
   183                           	opt stack 0
   184  00FE66  2A                 	db	42
   185  00FE67  3C                 	db	60
   186  00FE68  2D                 	db	45
   187  00FE69  20                 	db	32
   188  00FE6A  20                 	db	32
   189  00FE6B  20                 	db	32
   190  00FE6C  28                 	db	40
   191  00FE6D  20                 	db	32
   192  00FE6E  2D                 	db	45
   193  00FE6F  20                 	db	32
   194  00FE70  29                 	db	41
   195  00FE71  20                 	db	32
   196  00FE72  20                 	db	32
   197  00FE73  20                 	db	32
   198  00FE74  20                 	db	32
   199  00FE75  00                 	db	0
   200  00FE76                     __end_of_LCDMenuIcons:
   201                           	opt stack 0
   202  00FE76                     _dpowers:
   203                           	opt stack 0
   204  00FE76  0001               	dw	1
   205  00FE78  000A               	dw	10
   206  00FE7A  0064               	dw	100
   207  00FE7C  03E8               	dw	1000
   208  00FE7E  2710               	dw	10000
   209  00FE80                     __end_of_dpowers:
   210                           	opt stack 0
   211  00FE80                     _assemblyStepEncoding:
   212                           	opt stack 0
   213  00FE80  55                 	db	85
   214  00FE81  5B                 	db	91
   215  00FE82  77                 	db	119
   216  00FE83  7F                 	db	127
   217  00FE84  FF                 	db	255
   218  00FE85                     __end_of_assemblyStepEncoding:
   219                           	opt stack 0
   220  00FE85                     _LCD_LEFT:
   221                           	opt stack 0
   222  00FE85  00                 	db	0
   223  00FE86                     __end_of_LCD_LEFT:
   224                           	opt stack 0
   225  00FE86                     _LCD_RIGHT:
   226                           	opt stack 0
   227  00FE86  01                 	db	1
   228  00FE87                     __end_of_LCD_RIGHT:
   229                           	opt stack 0
   230  00FE87                     _LCD_SIZE_VERT:
   231                           	opt stack 0
   232  00FE87  02                 	db	2
   233  00FE88                     __end_of_LCD_SIZE_VERT:
   234                           	opt stack 0
   235  00FE88                     _LCD_SIZE_HORZ:
   236                           	opt stack 0
   237  00FE88  10                 	db	16
   238  00FE89                     __end_of_LCD_SIZE_HORZ:
   239                           	opt stack 0
   240  00FE89                     _LCD_VERT_LIMIT:
   241                           	opt stack 0
   242  00FE89  02                 	db	2
   243  00FE8A                     __end_of_LCD_VERT_LIMIT:
   244                           	opt stack 0
   245  00FE8A                     _LCD_HORZ_LIMIT:
   246                           	opt stack 0
   247  00FE8A  28                 	db	40
   248  00FE8B                     __end_of_LCD_HORZ_LIMIT:
   249                           	opt stack 0
   250  00FE8B                     _errMsgs:
   251                           	opt stack 0
   252  00FE8B  49                 	db	73
   253  00FE8C  6E                 	db	110
   254  00FE8D  76                 	db	118
   255  00FE8E  61                 	db	97
   256  00FE8F  6C                 	db	108
   257  00FE90  69                 	db	105
   258  00FE91  64                 	db	100
   259  00FE92  20                 	db	32
   260  00FE93  65                 	db	101
   261  00FE94  6E                 	db	110
   262  00FE95  74                 	db	116
   263  00FE96  72                 	db	114
   264  00FE97  79                 	db	121
   265  00FE98  0A                 	db	10
   266  00FE99  50                 	db	80
   267  00FE9A  6C                 	db	108
   268  00FE9B  65                 	db	101
   269  00FE9C  61                 	db	97
   270  00FE9D  73                 	db	115
   271  00FE9E  65                 	db	101
   272  00FE9F  20                 	db	32
   273  00FEA0  74                 	db	116
   274  00FEA1  72                 	db	114
   275  00FEA2  79                 	db	121
   276  00FEA3  20                 	db	32
   277  00FEA4  61                 	db	97
   278  00FEA5  67                 	db	103
   279  00FEA6  61                 	db	97
   280  00FEA7  69                 	db	105
   281  00FEA8  6E                 	db	110
   282  00FEA9  00                 	db	0
   283  00FEAA  00                 	db	0
   284  00FEAB  54                 	db	84
   285  00FEAC  6F                 	db	111
   286  00FEAD  6F                 	db	111
   287  00FEAE  20                 	db	32
   288  00FEAF  6D                 	db	109
   289  00FEB0  61                 	db	97
   290  00FEB1  6E                 	db	110
   291  00FEB2  79                 	db	121
   292  00FEB3  20                 	db	32
   293  00FEB4  66                 	db	102
   294  00FEB5  61                 	db	97
   295  00FEB6  73                 	db	115
   296  00FEB7  74                 	db	116
   297  00FEB8  65                 	db	101
   298  00FEB9  6E                 	db	110
   299  00FEBA  65                 	db	101
   300  00FEBB  72                 	db	114
   301  00FEBC  73                 	db	115
   302  00FEBD  00                 	db	0
   303  00FEBE  00                 	db	0
   304  00FEBF  00                 	db	0
   305  00FEC0  00                 	db	0
   306  00FEC1  00                 	db	0
   307  00FEC2  00                 	db	0
   308  00FEC3  00                 	db	0
   309  00FEC4  00                 	db	0
   310  00FEC5  00                 	db	0
   311  00FEC6  00                 	db	0
   312  00FEC7  00                 	db	0
   313  00FEC8  00                 	db	0
   314  00FEC9  00                 	db	0
   315  00FECA  00                 	db	0
   316  00FECB  54                 	db	84
   317  00FECC  6F                 	db	111
   318  00FECD  6F                 	db	111
   319  00FECE  20                 	db	32
   320  00FECF  6D                 	db	109
   321  00FED0  61                 	db	97
   322  00FED1  6E                 	db	110
   323  00FED2  79                 	db	121
   324  00FED3  20                 	db	32
   325  00FED4  62                 	db	98
   326  00FED5  6F                 	db	111
   327  00FED6  6C                 	db	108
   328  00FED7  74                 	db	116
   329  00FED8  73                 	db	115
   330  00FED9  00                 	db	0
   331  00FEDA  00                 	db	0
   332  00FEDB  00                 	db	0
   333  00FEDC  00                 	db	0
   334  00FEDD  00                 	db	0
   335  00FEDE  00                 	db	0
   336  00FEDF  00                 	db	0
   337  00FEE0  00                 	db	0
   338  00FEE1  00                 	db	0
   339  00FEE2  00                 	db	0
   340  00FEE3  00                 	db	0
   341  00FEE4  00                 	db	0
   342  00FEE5  00                 	db	0
   343  00FEE6  00                 	db	0
   344  00FEE7  00                 	db	0
   345  00FEE8  00                 	db	0
   346  00FEE9  00                 	db	0
   347  00FEEA  00                 	db	0
   348  00FEEB  54                 	db	84
   349  00FEEC  6F                 	db	111
   350  00FEED  6F                 	db	111
   351  00FEEE  20                 	db	32
   352  00FEEF  6D                 	db	109
   353  00FEF0  61                 	db	97
   354  00FEF1  6E                 	db	110
   355  00FEF2  79                 	db	121
   356  00FEF3  20                 	db	32
   357  00FEF4  6E                 	db	110
   358  00FEF5  75                 	db	117
   359  00FEF6  74                 	db	116
   360  00FEF7  73                 	db	115
   361  00FEF8  00                 	db	0
   362  00FEF9  00                 	db	0
   363  00FEFA  00                 	db	0
   364  00FEFB  00                 	db	0
   365  00FEFC  00                 	db	0
   366  00FEFD  00                 	db	0
   367  00FEFE  00                 	db	0
   368  00FEFF  00                 	db	0
   369  00FF00  00                 	db	0
   370  00FF01  00                 	db	0
   371  00FF02  00                 	db	0
   372  00FF03  00                 	db	0
   373  00FF04  00                 	db	0
   374  00FF05  00                 	db	0
   375  00FF06  00                 	db	0
   376  00FF07  00                 	db	0
   377  00FF08  00                 	db	0
   378  00FF09  00                 	db	0
   379  00FF0A  00                 	db	0
   380  00FF0B  54                 	db	84
   381  00FF0C  6F                 	db	111
   382  00FF0D  6F                 	db	111
   383  00FF0E  20                 	db	32
   384  00FF0F  6D                 	db	109
   385  00FF10  61                 	db	97
   386  00FF11  6E                 	db	110
   387  00FF12  79                 	db	121
   388  00FF13  20                 	db	32
   389  00FF14  77                 	db	119
   390  00FF15  61                 	db	97
   391  00FF16  73                 	db	115
   392  00FF17  68                 	db	104
   393  00FF18  65                 	db	101
   394  00FF19  72                 	db	114
   395  00FF1A  73                 	db	115
   396  00FF1B  00                 	db	0
   397  00FF1C  00                 	db	0
   398  00FF1D  00                 	db	0
   399  00FF1E  00                 	db	0
   400  00FF1F  00                 	db	0
   401  00FF20  00                 	db	0
   402  00FF21  00                 	db	0
   403  00FF22  00                 	db	0
   404  00FF23  00                 	db	0
   405  00FF24  00                 	db	0
   406  00FF25  00                 	db	0
   407  00FF26  00                 	db	0
   408  00FF27  00                 	db	0
   409  00FF28  00                 	db	0
   410  00FF29  00                 	db	0
   411  00FF2A  00                 	db	0
   412  00FF2B  54                 	db	84
   413  00FF2C  6F                 	db	111
   414  00FF2D  6F                 	db	111
   415  00FF2E  20                 	db	32
   416  00FF2F  6D                 	db	109
   417  00FF30  61                 	db	97
   418  00FF31  6E                 	db	110
   419  00FF32  79                 	db	121
   420  00FF33  20                 	db	32
   421  00FF34  73                 	db	115
   422  00FF35  70                 	db	112
   423  00FF36  61                 	db	97
   424  00FF37  63                 	db	99
   425  00FF38  65                 	db	101
   426  00FF39  72                 	db	114
   427  00FF3A  73                 	db	115
   428  00FF3B  00                 	db	0
   429  00FF3C  00                 	db	0
   430  00FF3D  00                 	db	0
   431  00FF3E  00                 	db	0
   432  00FF3F  00                 	db	0
   433  00FF40  00                 	db	0
   434  00FF41  00                 	db	0
   435  00FF42  00                 	db	0
   436  00FF43  00                 	db	0
   437  00FF44  00                 	db	0
   438  00FF45  00                 	db	0
   439  00FF46  00                 	db	0
   440  00FF47  00                 	db	0
   441  00FF48  00                 	db	0
   442  00FF49  00                 	db	0
   443  00FF4A  00                 	db	0
   444  00FF4B  4E                 	db	78
   445  00FF4C  6F                 	db	111
   446  00FF4D  20                 	db	32
   447  00FF4E  66                 	db	102
   448  00FF4F  61                 	db	97
   449  00FF50  73                 	db	115
   450  00FF51  74                 	db	116
   451  00FF52  65                 	db	101
   452  00FF53  6E                 	db	110
   453  00FF54  65                 	db	101
   454  00FF55  72                 	db	114
   455  00FF56  73                 	db	115
   456  00FF57  20                 	db	32
   457  00FF58  73                 	db	115
   458  00FF59  65                 	db	101
   459  00FF5A  6C                 	db	108
   460  00FF5B  65                 	db	101
   461  00FF5C  63                 	db	99
   462  00FF5D  74                 	db	116
   463  00FF5E  65                 	db	101
   464  00FF5F  64                 	db	100
   465  00FF60  00                 	db	0
   466  00FF61  00                 	db	0
   467  00FF62  00                 	db	0
   468  00FF63  00                 	db	0
   469  00FF64  00                 	db	0
   470  00FF65  00                 	db	0
   471  00FF66  00                 	db	0
   472  00FF67  00                 	db	0
   473  00FF68  00                 	db	0
   474  00FF69  00                 	db	0
   475  00FF6A  00                 	db	0
   476  00FF6B                     __end_of_errMsgs:
   477                           	opt stack 0
   478  00FF6B                     _inputEntryQuestions:
   479                           	opt stack 0
   480  00FF6B  41                 	db	65
   481  00FF6C  73                 	db	115
   482  00FF6D  73                 	db	115
   483  00FF6E  65                 	db	101
   484  00FF6F  6D                 	db	109
   485  00FF70  62                 	db	98
   486  00FF71  6C                 	db	108
   487  00FF72  79                 	db	121
   488  00FF73  20                 	db	32
   489  00FF74  73                 	db	115
   490  00FF75  74                 	db	116
   491  00FF76  65                 	db	101
   492  00FF77  70                 	db	112
   493  00FF78  73                 	db	115
   494  00FF79  0A                 	db	10
   495  00FF7A  2A                 	db	42
   496  00FF7B  3C                 	db	60
   497  00FF7C  2D                 	db	45
   498  00FF7D  20                 	db	32
   499  00FF7E  20                 	db	32
   500  00FF7F  28                 	db	40
   501  00FF80  34                 	db	52
   502  00FF81  2D                 	db	45
   503  00FF82  38                 	db	56
   504  00FF83  29                 	db	41
   505  00FF84  20                 	db	32
   506  00FF85  20                 	db	32
   507  00FF86  20                 	db	32
   508  00FF87  20                 	db	32
   509  00FF88  20                 	db	32
   510  00FF89  00                 	db	0
   511  00FF8A  00                 	db	0
   512  00FF8B  00                 	db	0
   513  00FF8C  46                 	db	70
   514  00FF8D  61                 	db	97
   515  00FF8E  73                 	db	115
   516  00FF8F  74                 	db	116
   517  00FF90  65                 	db	101
   518  00FF91  6E                 	db	110
   519  00FF92  65                 	db	101
   520  00FF93  72                 	db	114
   521  00FF94  73                 	db	115
   522  00FF95  20                 	db	32
   523  00FF96  69                 	db	105
   524  00FF97  6E                 	db	110
   525  00FF98  20                 	db	32
   526  00FF99  43                 	db	67
   527  00FF9A  78                 	db	120
   528  00FF9B  0A                 	db	10
   529  00FF9C  2A                 	db	42
   530  00FF9D  3C                 	db	60
   531  00FF9E  2D                 	db	45
   532  00FF9F  28                 	db	40
   533  00FFA0  42                 	db	66
   534  00FFA1  4E                 	db	78
   535  00FFA2  53                 	db	83
   536  00FFA3  57                 	db	87
   537  00FFA4  29                 	db	41
   538  00FFA5  20                 	db	32
   539  00FFA6  20                 	db	32
   540  00FFA7  20                 	db	32
   541  00FFA8  20                 	db	32
   542  00FFA9  2D                 	db	45
   543  00FFAA  3E                 	db	62
   544  00FFAB  23                 	db	35
   545  00FFAC  00                 	db	0
   546  00FFAD  48                 	db	72
   547  00FFAE  6F                 	db	111
   548  00FFAF  77                 	db	119
   549  00FFB0  20                 	db	32
   550  00FFB1  6D                 	db	109
   551  00FFB2  61                 	db	97
   552  00FFB3  6E                 	db	110
   553  00FFB4  79                 	db	121
   554  00FFB5  20                 	db	32
   555  00FFB6  73                 	db	115
   556  00FFB7  65                 	db	101
   557  00FFB8  74                 	db	116
   558  00FFB9  73                 	db	115
   559  00FFBA  3F                 	db	63
   560  00FFBB  0A                 	db	10
   561  00FFBC  2A                 	db	42
   562  00FFBD  3C                 	db	60
   563  00FFBE  2D                 	db	45
   564  00FFBF  20                 	db	32
   565  00FFC0  20                 	db	32
   566  00FFC1  28                 	db	40
   567  00FFC2  31                 	db	49
   568  00FFC3  2D                 	db	45
   569  00FFC4  34                 	db	52
   570  00FFC5  29                 	db	41
   571  00FFC6  20                 	db	32
   572  00FFC7  20                 	db	32
   573  00FFC8  20                 	db	32
   574  00FFC9  20                 	db	32
   575  00FFCA  20                 	db	32
   576  00FFCB  00                 	db	0
   577  00FFCC  00                 	db	0
   578  00FFCD  00                 	db	0
   579  00FFCE  43                 	db	67
   580  00FFCF  6F                 	db	111
   581  00FFD0  6E                 	db	110
   582  00FFD1  66                 	db	102
   583  00FFD2  69                 	db	105
   584  00FFD3  72                 	db	114
   585  00FFD4  6D                 	db	109
   586  00FFD5  3F                 	db	63
   587  00FFD6  0A                 	db	10
   588  00FFD7  2A                 	db	42
   589  00FFD8  3C                 	db	60
   590  00FFD9  2D                 	db	45
   591  00FFDA  20                 	db	32
   592  00FFDB  20                 	db	32
   593  00FFDC  28                 	db	40
   594  00FFDD  41                 	db	65
   595  00FFDE  3A                 	db	58
   596  00FFDF  59                 	db	89
   597  00FFE0  2F                 	db	47
   598  00FFE1  42                 	db	66
   599  00FFE2  3A                 	db	58
   600  00FFE3  4E                 	db	78
   601  00FFE4  29                 	db	41
   602  00FFE5  20                 	db	32
   603  00FFE6  00                 	db	0
   604  00FFE7  00                 	db	0
   605  00FFE8  00                 	db	0
   606  00FFE9  00                 	db	0
   607  00FFEA  00                 	db	0
   608  00FFEB  00                 	db	0
   609  00FFEC  00                 	db	0
   610  00FFED  00                 	db	0
   611  00FFEE  00                 	db	0
   612  00FFEF                     __end_of_inputEntryQuestions:
   613                           	opt stack 0
   614  0000                     _PORTB	set	3969
   615  0000                     _PORTBbits	set	3969
   616  0000                     _INTCONbits	set	4082
   617  0000                     _LATDbits	set	3980
   618  0000                     _TRISE	set	3990
   619  0000                     _TRISD	set	3989
   620  0000                     _TRISC	set	3988
   621  0000                     _TRISB	set	3987
   622  0000                     _TRISA	set	3986
   623  0000                     _LATE	set	3981
   624  0000                     _LATD	set	3980
   625  0000                     _LATC	set	3979
   626  0000                     _LATB	set	3978
   627  0000                     _LATA	set	3977
   628  00FFEF                     STR_2:
   629  00FFEF  57                 	db	87	;'W'
   630  00FFF0  65                 	db	101	;'e'
   631  00FFF1  20                 	db	32
   632  00FFF2  64                 	db	100	;'d'
   633  00FFF3  6F                 	db	111	;'o'
   634  00FFF4  6E                 	db	110	;'n'
   635  00FFF5  65                 	db	101	;'e'
   636  00FFF6  21                 	db	33
   637  00FFF7  00                 	db	0
   638  00FFF8                     STR_1:
   639  00FFF8  63                 	db	99	;'c'
   640  00FFF9  6E                 	db	110	;'n'
   641  00FFFA  3A                 	db	58	;':'
   642  00FFFB  20                 	db	32
   643  00FFFC  25                 	db	37
   644  00FFFD  64                 	db	100	;'d'
   645  00FFFE  00                 	db	0
   646                           
   647                           ; #config settings
   648  00FFFF  00                 	db	0	; dummy byte at the end
   649  0000                     
   650                           	psect	cinit
   651  00F290                     __pcinit:
   652                           	opt stack 0
   653  00F290                     start_initialization:
   654                           	opt stack 0
   655  00F290                     __initialization:
   656                           	opt stack 0
   657                           
   658                           ; Initialize objects allocated to COMRAM (2 bytes)
   659                           ; load TBLPTR registers with __pidataCOMRAM
   660  00F290  0EA8               	movlw	low __pidataCOMRAM
   661  00F292  6EF6               	movwf	tblptrl,c
   662  00F294  0EF1               	movlw	high __pidataCOMRAM
   663  00F296  6EF7               	movwf	tblptrh,c
   664  00F298  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   665  00F29A  6EF8               	movwf	tblptru,c
   666  00F29C  0009               	tblrd		*+	;fetch initializer
   667  00F29E  CFF5 F07B          	movff	tablat,__pdataCOMRAM
   668  00F2A2  0009               	tblrd		*+	;fetch initializer
   669  00F2A4  CFF5 F07C          	movff	tablat,__pdataCOMRAM+1
   670                           
   671                           ; Clear objects allocated to COMRAM (27 bytes)
   672  00F2A8  EE00  F060         	lfsr	0,__pbssCOMRAM
   673  00F2AC  0E1B               	movlw	27
   674  00F2AE                     clear_0:
   675  00F2AE  6AEE               	clrf	postinc0,c
   676  00F2B0  06E8               	decf	wreg,f,c
   677  00F2B2  E1FD               	bnz	clear_0
   678  00F2B4                     end_of_initialization:
   679                           	opt stack 0
   680  00F2B4                     __end_of__initialization:
   681                           	opt stack 0
   682  00F2B4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   683  00F2B6  6EF8               	movwf	tblptru,c
   684  00F2B8  0100               	movlb	0
   685  00F2BA  EF31  F079         	goto	_main	;jump to C main() function
   686                           tblptru	equ	0xFF8
   687                           tblptrh	equ	0xFF7
   688                           tblptrl	equ	0xFF6
   689                           tablat	equ	0xFF5
   690                           postinc0	equ	0xFEE
   691                           wreg	equ	0xFE8
   692                           
   693                           	psect	bssCOMRAM
   694  000060                     __pbssCOMRAM:
   695                           	opt stack 0
   696  000060                     _params:
   697                           	opt stack 0
   698  000060                     	ds	26
   699  00007A                     _LCDinterruptState:
   700                           	opt stack 0
   701  00007A                     	ds	1
   702                           tblptru	equ	0xFF8
   703                           tblptrh	equ	0xFF7
   704                           tblptrl	equ	0xFF6
   705                           tablat	equ	0xFF5
   706                           postinc0	equ	0xFEE
   707                           wreg	equ	0xFE8
   708                           
   709                           	psect	dataCOMRAM
   710  00007B                     __pdataCOMRAM:
   711                           	opt stack 0
   712  00007B                     inputEntry@F3113:
   713                           	opt stack 0
   714  00007B                     	ds	2
   715                           tblptru	equ	0xFF8
   716                           tblptrh	equ	0xFF7
   717                           tblptrl	equ	0xFF6
   718                           tablat	equ	0xFF5
   719                           postinc0	equ	0xFEE
   720                           wreg	equ	0xFE8
   721                           
   722                           	psect	cstackCOMRAM
   723  000001                     __pcstackCOMRAM:
   724                           	opt stack 0
   725  000001                     ?___wmul:
   726                           	opt stack 0
   727  000001                     ?___lwdiv:
   728                           	opt stack 0
   729  000001                     lcdNibble@temp:
   730                           	opt stack 0
   731  000001                     pollKeypad@keypress:
   732                           	opt stack 0
   733  000001                     ___wmul@multiplier:
   734                           	opt stack 0
   735  000001                     ___lwdiv@dividend:
   736                           	opt stack 0
   737                           
   738                           ; 2 bytes @ 0x0
   739  000001                     	ds	1
   740  000002                     lcdNibble@data:
   741                           	opt stack 0
   742                           
   743                           ; 1 bytes @ 0x1
   744  000002                     	ds	1
   745  000003                     lcdInst@data:
   746                           	opt stack 0
   747  000003                     putch@data:
   748                           	opt stack 0
   749  000003                     ___wmul@multiplicand:
   750                           	opt stack 0
   751  000003                     ___lwdiv@divisor:
   752                           	opt stack 0
   753                           
   754                           ; 2 bytes @ 0x2
   755  000003                     	ds	1
   756  000004                     ??_initLCD:
   757  000004                     lcd_shift_cursor@direction:
   758                           	opt stack 0
   759                           
   760                           ; 1 bytes @ 0x3
   761  000004                     	ds	1
   762  000005                     lcd_shift_cursor@numChars:
   763                           	opt stack 0
   764  000005                     ___wmul@product:
   765                           	opt stack 0
   766  000005                     ___lwdiv@quotient:
   767                           	opt stack 0
   768                           
   769                           ; 2 bytes @ 0x4
   770  000005                     	ds	1
   771  000006                     lcd_shift_cursor@n:
   772                           	opt stack 0
   773                           
   774                           ; 1 bytes @ 0x5
   775  000006                     	ds	1
   776  000007                     lcd_set_cursor@y:
   777                           	opt stack 0
   778  000007                     ___lwdiv@counter:
   779                           	opt stack 0
   780  000007                     printStringLCD@string:
   781                           	opt stack 0
   782  000007                     strcpy@to:
   783                           	opt stack 0
   784                           
   785                           ; 2 bytes @ 0x6
   786  000007                     	ds	1
   787  000008                     ??_lcd_set_cursor:
   788  000008                     ?___lwmod:
   789                           	opt stack 0
   790  000008                     ___lwmod@dividend:
   791                           	opt stack 0
   792                           
   793                           ; 2 bytes @ 0x7
   794  000008                     	ds	1
   795  000009                     ??_printStringLCD:
   796  000009                     lcd_set_cursor@i:
   797                           	opt stack 0
   798  000009                     strcpy@from:
   799                           	opt stack 0
   800                           
   801                           ; 2 bytes @ 0x8
   802  000009                     	ds	1
   803  00000A                     lcd_set_cursor@x:
   804                           	opt stack 0
   805  00000A                     ___lwmod@divisor:
   806                           	opt stack 0
   807                           
   808                           ; 2 bytes @ 0x9
   809  00000A                     	ds	1
   810  00000B                     strcpy@cp:
   811                           	opt stack 0
   812                           
   813                           ; 2 bytes @ 0xA
   814  00000B                     	ds	1
   815  00000C                     ___lwmod@counter:
   816                           	opt stack 0
   817  00000C                     printStringLCD@j:
   818                           	opt stack 0
   819                           
   820                           ; 2 bytes @ 0xB
   821  00000C                     	ds	1
   822  00000D                     ?_printf:
   823                           	opt stack 0
   824  00000D                     printf@f:
   825                           	opt stack 0
   826                           
   827                           ; 2 bytes @ 0xC
   828  00000D                     	ds	1
   829  00000E                     printStringLCD@spaceIndex:
   830                           	opt stack 0
   831                           
   832                           ; 2 bytes @ 0xD
   833  00000E                     	ds	2
   834  000010                     printStringLCD@newlineIndex:
   835                           	opt stack 0
   836                           
   837                           ; 2 bytes @ 0xF
   838  000010                     	ds	1
   839  000011                     ??_printf:
   840                           
   841                           ; 1 bytes @ 0x10
   842  000011                     	ds	1
   843  000012                     printStringLCD@newlineCharIndex:
   844                           	opt stack 0
   845  000012                     printf@ap:
   846                           	opt stack 0
   847                           
   848                           ; 2 bytes @ 0x11
   849  000012                     	ds	2
   850  000014                     printf@flag:
   851                           	opt stack 0
   852  000014                     printStringLCD@i:
   853                           	opt stack 0
   854                           
   855                           ; 2 bytes @ 0x13
   856  000014                     	ds	1
   857  000015                     printf@prec:
   858                           	opt stack 0
   859                           
   860                           ; 1 bytes @ 0x14
   861  000015                     	ds	1
   862  000016                     printErrorLCD@string:
   863                           	opt stack 0
   864  000016                     printf@val:
   865                           	opt stack 0
   866                           
   867                           ; 2 bytes @ 0x15
   868  000016                     	ds	2
   869  000018                     ??_printErrorLCD:
   870  000018                     printf@c:
   871                           	opt stack 0
   872                           
   873                           ; 1 bytes @ 0x17
   874  000018                     	ds	2
   875  00001A                     ??_inputEntry:
   876                           
   877                           ; 1 bytes @ 0x19
   878  00001A                     	ds	4
   879  00001E                     inputEntry@fastenerString:
   880                           	opt stack 0
   881                           
   882                           ; 32 bytes @ 0x1D
   883  00001E                     	ds	32
   884  00003E                     inputEntry@compartmentLabel:
   885                           	opt stack 0
   886                           
   887                           ; 2 bytes @ 0x3D
   888  00003E                     	ds	2
   889  000040                     inputEntry@stepID:
   890                           	opt stack 0
   891                           
   892                           ; 2 bytes @ 0x3F
   893  000040                     	ds	2
   894  000042                     inputEntry@done:
   895                           	opt stack 0
   896                           
   897                           ; 2 bytes @ 0x41
   898  000042                     	ds	2
   899  000044                     inputEntry@numB:
   900                           	opt stack 0
   901                           
   902                           ; 2 bytes @ 0x43
   903  000044                     	ds	2
   904  000046                     inputEntry@numN:
   905                           	opt stack 0
   906                           
   907                           ; 2 bytes @ 0x45
   908  000046                     	ds	2
   909  000048                     inputEntry@numS:
   910                           	opt stack 0
   911                           
   912                           ; 2 bytes @ 0x47
   913  000048                     	ds	2
   914  00004A                     inputEntry@numW:
   915                           	opt stack 0
   916                           
   917                           ; 2 bytes @ 0x49
   918  00004A                     	ds	2
   919  00004C                     inputEntry@found:
   920                           	opt stack 0
   921                           
   922                           ; 2 bytes @ 0x4B
   923  00004C                     	ds	2
   924  00004E                     inputEntry@setIsGood:
   925                           	opt stack 0
   926                           
   927                           ; 2 bytes @ 0x4D
   928  00004E                     	ds	2
   929  000050                     inputEntry@doneMultiples:
   930                           	opt stack 0
   931                           
   932                           ; 2 bytes @ 0x4F
   933  000050                     	ds	2
   934  000052                     inputEntry@compartmentsToFill:
   935                           	opt stack 0
   936                           
   937                           ; 1 bytes @ 0x51
   938  000052                     	ds	1
   939  000053                     inputEntry@doneCompartment:
   940                           	opt stack 0
   941                           
   942                           ; 2 bytes @ 0x52
   943  000053                     	ds	2
   944  000055                     inputEntry@sum:
   945                           	opt stack 0
   946                           
   947                           ; 2 bytes @ 0x54
   948  000055                     	ds	2
   949  000057                     inputEntry@inputEntryStep:
   950                           	opt stack 0
   951                           
   952                           ; 2 bytes @ 0x56
   953  000057                     	ds	2
   954  000059                     inputEntry@numPressed:
   955                           	opt stack 0
   956                           
   957                           ; 2 bytes @ 0x58
   958  000059                     	ds	2
   959  00005B                     inputEntry@compartmentNum:
   960                           	opt stack 0
   961                           
   962                           ; 2 bytes @ 0x5A
   963  00005B                     	ds	2
   964  00005D                     inputEntry@i:
   965                           	opt stack 0
   966                           
   967                           ; 2 bytes @ 0x5C
   968  00005D                     	ds	2
   969  00005F                     inputEntry@pressed:
   970                           	opt stack 0
   971                           
   972                           ; 1 bytes @ 0x5E
   973  00005F                     	ds	1
   974  000060                     tblptru	equ	0xFF8
   975                           tblptrh	equ	0xFF7
   976                           tblptrl	equ	0xFF6
   977                           tablat	equ	0xFF5
   978                           postinc0	equ	0xFEE
   979                           wreg	equ	0xFE8
   980                           
   981                           ; 1 bytes @ 0x5F
   982 ;;
   983 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   984 ;;
   985 ;; *************** function _main *****************
   986 ;; Defined at:
   987 ;;		line 254 in file "main.c"
   988 ;; Parameters:    Size  Location     Type
   989 ;;		None
   990 ;; Auto vars:     Size  Location     Type
   991 ;;		None
   992 ;; Return value:  Size  Location     Type
   993 ;;                  1    wreg      void 
   994 ;; Registers used:
   995 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   996 ;; Tracked objects:
   997 ;;		On entry : 0/0
   998 ;;		On exit  : 0/0
   999 ;;		Unchanged: 0/0
  1000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1004 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1005 ;;Total ram usage:        0 bytes
  1006 ;; Hardware stack levels required when called:    5
  1007 ;; This function calls:
  1008 ;;		_initLCD
  1009 ;;		_inputEntry
  1010 ;; This function is called by:
  1011 ;;		Startup code after reset
  1012 ;; This function uses a non-reentrant model
  1013 ;;
  1014                           
  1015                           	psect	text0
  1016  00F262                     __ptext0:
  1017                           	opt stack 0
  1018  00F262                     _main:
  1019                           	opt stack 26
  1020                           
  1021                           ;main.c: 259: LATA = 0x00;
  1022                           
  1023                           ;incstack = 0
  1024  00F262  0E00               	movlw	0
  1025  00F264  6E89               	movwf	3977,c	;volatile
  1026                           
  1027                           ;main.c: 260: LATB = 0x00;
  1028  00F266  0E00               	movlw	0
  1029  00F268  6E8A               	movwf	3978,c	;volatile
  1030                           
  1031                           ;main.c: 261: LATC = 0x00;
  1032  00F26A  0E00               	movlw	0
  1033  00F26C  6E8B               	movwf	3979,c	;volatile
  1034                           
  1035                           ;main.c: 262: LATD = 0x00;
  1036  00F26E  0E00               	movlw	0
  1037  00F270  6E8C               	movwf	3980,c	;volatile
  1038                           
  1039                           ;main.c: 263: LATE = 0x00;
  1040  00F272  0E00               	movlw	0
  1041  00F274  6E8D               	movwf	3981,c	;volatile
  1042                           
  1043                           ;main.c: 266: TRISA = 0xFF;
  1044  00F276  6892               	setf	3986,c	;volatile
  1045                           
  1046                           ;main.c: 267: TRISB = 0xFF;
  1047  00F278  6893               	setf	3987,c	;volatile
  1048                           
  1049                           ;main.c: 268: TRISC = 0x00;
  1050  00F27A  0E00               	movlw	0
  1051  00F27C  6E94               	movwf	3988,c	;volatile
  1052                           
  1053                           ;main.c: 269: TRISD = 0x00;
  1054  00F27E  0E00               	movlw	0
  1055  00F280  6E95               	movwf	3989,c	;volatile
  1056                           
  1057                           ;main.c: 270: TRISE = 0x00;
  1058  00F282  0E00               	movlw	0
  1059  00F284  6E96               	movwf	3990,c	;volatile
  1060                           
  1061                           ;main.c: 276: initLCD();
  1062  00F286  ECB8  F079         	call	_initLCD	;wreg free
  1063                           
  1064                           ;main.c: 277: inputEntry();
  1065  00F28A  EC27  F07C         	call	_inputEntry	;wreg free
  1066  00F28E                     l123:
  1067  00F28E  D7FF               	goto	l123
  1068  00F290                     __end_of_main:
  1069                           	opt stack 0
  1070                           tblptru	equ	0xFF8
  1071                           tblptrh	equ	0xFF7
  1072                           tblptrl	equ	0xFF6
  1073                           tablat	equ	0xFF5
  1074                           postinc0	equ	0xFEE
  1075                           wreg	equ	0xFE8
  1076                           
  1077 ;; *************** function _inputEntry *****************
  1078 ;; Defined at:
  1079 ;;		line 89 in file "main.c"
  1080 ;; Parameters:    Size  Location     Type
  1081 ;;		None
  1082 ;; Auto vars:     Size  Location     Type
  1083 ;;  sum             2   84[COMRAM] int 
  1084 ;;  fastenerStri   32   29[COMRAM] unsigned char [32]
  1085 ;;  doneMultiple    2   79[COMRAM] int 
  1086 ;;  setIsGood       2   77[COMRAM] int 
  1087 ;;  stepID          2   63[COMRAM] int 
  1088 ;;  compartments    1   81[COMRAM] unsigned char 
  1089 ;;  i               2   92[COMRAM] int 
  1090 ;;  compartmentN    2   90[COMRAM] int 
  1091 ;;  numPressed      2   88[COMRAM] int 
  1092 ;;  inputEntrySt    2   86[COMRAM] int 
  1093 ;;  doneCompartm    2   82[COMRAM] int 
  1094 ;;  found           2   75[COMRAM] int 
  1095 ;;  numW            2   73[COMRAM] int 
  1096 ;;  numS            2   71[COMRAM] int 
  1097 ;;  numN            2   69[COMRAM] int 
  1098 ;;  numB            2   67[COMRAM] int 
  1099 ;;  done            2   65[COMRAM] int 
  1100 ;;  compartmentL    2   61[COMRAM] unsigned char [2]
  1101 ;;  numFasteners    2    0        int 
  1102 ;;  pressed         1   94[COMRAM] unsigned char 
  1103 ;; Return value:  Size  Location     Type
  1104 ;;                  2   68[None  ] int 
  1105 ;; Registers used:
  1106 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1107 ;; Tracked objects:
  1108 ;;		On entry : 0/0
  1109 ;;		On exit  : 0/0
  1110 ;;		Unchanged: 0/0
  1111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1113 ;;      Locals:        66       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1114 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1115 ;;      Totals:        70       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1116 ;;Total ram usage:       70 bytes
  1117 ;; Hardware stack levels used:    1
  1118 ;; Hardware stack levels required when called:    4
  1119 ;; This function calls:
  1120 ;;		___wmul
  1121 ;;		_lcdInst
  1122 ;;		_lcd_set_cursor
  1123 ;;		_pollKeypad
  1124 ;;		_printErrorLCD
  1125 ;;		_printStringLCD
  1126 ;;		_printf
  1127 ;;		_putch
  1128 ;;		_strcpy
  1129 ;; This function is called by:
  1130 ;;		_main
  1131 ;; This function uses a non-reentrant model
  1132 ;;
  1133                           
  1134                           	psect	text1
  1135  00F84E                     __ptext1:
  1136                           	opt stack 0
  1137  00F84E                     _inputEntry:
  1138                           	opt stack 26
  1139                           
  1140                           ;main.c: 90: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1141                           
  1142                           ;incstack = 0
  1143  00F84E  0E01               	movlw	1
  1144  00F850  ECD5  F078         	call	_lcdInst
  1145  00F854  0EC3               	movlw	195
  1146  00F856  6E1A               	movwf	??_inputEntry& (0+255),c
  1147  00F858  0ECD               	movlw	205
  1148  00F85A                     u1577:
  1149  00F85A  2EE8               	decfsz	wreg,f,c
  1150  00F85C  D7FE               	bra	u1577
  1151  00F85E  2E1A               	decfsz	??_inputEntry& (0+255),f,c
  1152  00F860  D7FC               	bra	u1577
  1153  00F862  F000               	nop	
  1154                           
  1155                           ;main.c: 91: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1156  00F864  0E80               	movlw	128
  1157  00F866  ECD5  F078         	call	_lcdInst
  1158  00F86A  0E41               	movlw	65
  1159  00F86C  6E1A               	movwf	??_inputEntry& (0+255),c
  1160  00F86E  0EEE               	movlw	238
  1161  00F870                     u1587:
  1162  00F870  2EE8               	decfsz	wreg,f,c
  1163  00F872  D7FE               	bra	u1587
  1164  00F874  2E1A               	decfsz	??_inputEntry& (0+255),f,c
  1165  00F876  D7FC               	bra	u1587
  1166  00F878  D000               	nop2	
  1167                           
  1168                           ;main.c: 93: int compartmentNum = 0;
  1169  00F87A  0E00               	movlw	0
  1170  00F87C  6E5C               	movwf	inputEntry@compartmentNum+1,c
  1171  00F87E  0E00               	movlw	0
  1172  00F880  6E5B               	movwf	inputEntry@compartmentNum,c
  1173                           
  1174                           ;main.c: 94: char compartmentLabel[2] = "C0";
  1175  00F882  C07B  F03E         	movff	inputEntry@F3113,inputEntry@compartmentLabel
  1176  00F886  C07C  F03F         	movff	inputEntry@F3113+1,inputEntry@compartmentLabel+1
  1177                           
  1178                           ;main.c: 95: int inputEntryStep = 0;
  1179  00F88A  0E00               	movlw	0
  1180  00F88C  6E58               	movwf	inputEntry@inputEntryStep+1,c
  1181  00F88E  0E00               	movlw	0
  1182  00F890  6E57               	movwf	inputEntry@inputEntryStep,c
  1183                           
  1184                           ;main.c: 96: int done = 0;
  1185  00F892  0E00               	movlw	0
  1186  00F894  6E43               	movwf	inputEntry@done+1,c
  1187  00F896  0E00               	movlw	0
  1188  00F898  D293               	goto	L1
  1189  00F89A                     
  1190                           ;main.c: 103: if (inputEntryStep == 0) {
  1191  00F89A  5057               	movf	inputEntry@inputEntryStep,w,c
  1192  00F89C  1058               	iorwf	inputEntry@inputEntryStep+1,w,c
  1193  00F89E  A4D8               	btfss	status,2,c
  1194  00F8A0  D048               	goto	l73
  1195                           
  1196                           ;main.c: 104: printStringLCD(inputEntryQuestions[inputEntryStep]);
  1197  00F8A2  C057  F001         	movff	inputEntry@inputEntryStep,___wmul@multiplier
  1198  00F8A6  C058  F002         	movff	inputEntry@inputEntryStep+1,___wmul@multiplier+1
  1199  00F8AA  0E00               	movlw	0
  1200  00F8AC  6E04               	movwf	___wmul@multiplicand+1,c
  1201  00F8AE  0E21               	movlw	33
  1202  00F8B0  6E03               	movwf	___wmul@multiplicand,c
  1203  00F8B2  ECF7  F078         	call	___wmul	;wreg free
  1204  00F8B6  0E6B               	movlw	low _inputEntryQuestions
  1205  00F8B8  2401               	addwf	?___wmul,w,c
  1206  00F8BA  6E07               	movwf	printStringLCD@string,c
  1207  00F8BC  0EFF               	movlw	high _inputEntryQuestions
  1208  00F8BE  2002               	addwfc	?___wmul+1,w,c
  1209  00F8C0  6E08               	movwf	printStringLCD@string+1,c
  1210  00F8C2  ECD5  F07A         	call	_printStringLCD	;wreg free
  1211                           
  1212                           ;main.c: 106: pressed = pollKeypad();
  1213  00F8C6  EC1D  F079         	call	_pollKeypad	;wreg free
  1214  00F8CA  6E5F               	movwf	inputEntry@pressed,c
  1215                           
  1216                           ;main.c: 107: numPressed = pressed - 48;
  1217  00F8CC  0ED0               	movlw	208
  1218  00F8CE  245F               	addwf	inputEntry@pressed,w,c
  1219  00F8D0  6E59               	movwf	inputEntry@numPressed,c
  1220  00F8D2  6A5A               	clrf	inputEntry@numPressed+1,c
  1221  00F8D4  0EFF               	movlw	255
  1222  00F8D6  225A               	addwfc	inputEntry@numPressed+1,f,c
  1223                           
  1224                           ;main.c: 109: putch(pressed);
  1225  00F8D8  505F               	movf	inputEntry@pressed,w,c
  1226  00F8DA  ECDF  F078         	call	_putch
  1227                           
  1228                           ;main.c: 110: _delay((unsigned long)((500)*(40000000/4000.0)));
  1229  00F8DE  0E1A               	movlw	26
  1230  00F8E0  6E1B               	movwf	(??_inputEntry+1)& (0+255),c
  1231  00F8E2  0E5E               	movlw	94
  1232  00F8E4  6E1A               	movwf	??_inputEntry& (0+255),c
  1233  00F8E6  0E6E               	movlw	110
  1234  00F8E8                     u1597:
  1235  00F8E8  2EE8               	decfsz	wreg,f,c
  1236  00F8EA  D7FE               	bra	u1597
  1237  00F8EC  2E1A               	decfsz	??_inputEntry& (0+255),f,c
  1238  00F8EE  D7FC               	bra	u1597
  1239  00F8F0  2E1B               	decfsz	(??_inputEntry+1)& (0+255),f,c
  1240  00F8F2  D7FA               	bra	u1597
  1241  00F8F4  D000               	nop2	
  1242                           
  1243                           ;main.c: 112: if (numPressed >= 4 && numPressed <= 8) {
  1244  00F8F6  BE5A               	btfsc	inputEntry@numPressed+1,7,c
  1245  00F8F8  D015               	goto	l74
  1246  00F8FA  505A               	movf	inputEntry@numPressed+1,w,c
  1247  00F8FC  E104               	bnz	u1250
  1248  00F8FE  0E04               	movlw	4
  1249  00F900  5C59               	subwf	inputEntry@numPressed,w,c
  1250  00F902  A0D8               	btfss	status,0,c
  1251  00F904  D00F               	goto	l74
  1252  00F906                     u1250:
  1253  00F906  BE5A               	btfsc	inputEntry@numPressed+1,7,c
  1254  00F908  D006               	goto	u1260
  1255  00F90A  505A               	movf	inputEntry@numPressed+1,w,c
  1256  00F90C  E10B               	bnz	l1626
  1257  00F90E  0E09               	movlw	9
  1258  00F910  5C59               	subwf	inputEntry@numPressed,w,c
  1259  00F912  B0D8               	btfsc	status,0,c
  1260  00F914  D007               	goto	l74
  1261  00F916                     u1260:
  1262                           
  1263                           ;main.c: 113: params.steps = numPressed;
  1264  00F916  C059  F060         	movff	inputEntry@numPressed,_params
  1265  00F91A  C05A  F061         	movff	inputEntry@numPressed+1,_params+1
  1266                           
  1267                           ;main.c: 114: inputEntryStep++;
  1268  00F91E  4A57               	infsnz	inputEntry@inputEntryStep,f,c
  1269  00F920  2A58               	incf	inputEntry@inputEntryStep+1,f,c
  1270                           
  1271                           ;main.c: 115: } else printErrorLCD(errMsgs.badEntry);
  1272  00F922  D24F               	goto	l77
  1273  00F924                     l74:
  1274  00F924                     l1626:
  1275  00F924  0E8B               	movlw	low _errMsgs
  1276  00F926  6E16               	movwf	printErrorLCD@string,c
  1277  00F928  0EFE               	movlw	high _errMsgs
  1278  00F92A  6E17               	movwf	printErrorLCD@string+1,c
  1279  00F92C  EC0A  F079         	call	_printErrorLCD	;wreg free
  1280                           
  1281                           ;main.c: 116: } else if (inputEntryStep == 1) {
  1282  00F930  D248               	goto	l77
  1283  00F932                     l73:
  1284  00F932  0457               	decf	inputEntry@inputEntryStep,w,c
  1285  00F934  1058               	iorwf	inputEntry@inputEntryStep+1,w,c
  1286  00F936  A4D8               	btfss	status,2,c
  1287  00F938  D244               	goto	l77
  1288                           
  1289                           ;main.c: 117: int stepID = 0;
  1290  00F93A  0E00               	movlw	0
  1291  00F93C  6E41               	movwf	inputEntry@stepID+1,c
  1292  00F93E  0E00               	movlw	0
  1293  00F940  6E40               	movwf	inputEntry@stepID,c
  1294                           
  1295                           ;main.c: 129: char compartmentsToFill = assemblyStepEncoding[params.steps - 4];
  1296  00F942  0EFC               	movlw	252
  1297  00F944  6E1A               	movwf	??_inputEntry& (0+255),c
  1298  00F946  0EFF               	movlw	255
  1299  00F948  6E1B               	movwf	(??_inputEntry+1)& (0+255),c
  1300  00F94A  C060  F01C         	movff	_params,??_inputEntry+2
  1301  00F94E  C061  F01D         	movff	_params+1,??_inputEntry+3
  1302  00F952  501A               	movf	??_inputEntry,w,c
  1303  00F954  261C               	addwf	??_inputEntry+2,f,c
  1304  00F956  501B               	movf	??_inputEntry+1,w,c
  1305  00F958  221D               	addwfc	??_inputEntry+3,f,c
  1306  00F95A  0E80               	movlw	low _assemblyStepEncoding
  1307  00F95C  241C               	addwf	??_inputEntry+2,w,c
  1308  00F95E  6EF6               	movwf	tblptrl,c
  1309  00F960  0EFE               	movlw	high _assemblyStepEncoding
  1310  00F962  201D               	addwfc	??_inputEntry+3,w,c
  1311  00F964  6EF7               	movwf	tblptrh,c
  1312  00F966                     	if	0	;There are less than 3 active tblptr bytes
  1313  00F966                     	endif
  1314  00F966  0008               	tblrd		*
  1315  00F968  CFF5 F052          	movff	tablat,inputEntry@compartmentsToFill
  1316                           
  1317                           ;main.c: 131: for (compartmentNum = 0; compartmentNum < 8; compartmentNum++) {
  1318  00F96C  0E00               	movlw	0
  1319  00F96E  6E5C               	movwf	inputEntry@compartmentNum+1,c
  1320  00F970  0E00               	movlw	0
  1321  00F972  6E5B               	movwf	inputEntry@compartmentNum,c
  1322  00F974  BE5C               	btfsc	inputEntry@compartmentNum+1,7,c
  1323  00F976  D008               	goto	l78
  1324  00F978  505C               	movf	inputEntry@compartmentNum+1,w,c
  1325  00F97A  E105               	bnz	u1280
  1326  00F97C  0E08               	movlw	8
  1327  00F97E  5C5B               	subwf	inputEntry@compartmentNum,w,c
  1328  00F980  B0D8               	btfsc	status,0,c
  1329  00F982  D21B               	goto	u1550
  1330  00F984  D001               	goto	l78
  1331  00F986                     u1280:
  1332  00F986  D219               	goto	u1550
  1333  00F988                     l78:
  1334                           
  1335                           ;main.c: 132: STARTCOMPARTMENT: if ((compartmentsToFill >> compartmentNum) & 0b1) {
  1336  00F988  C05B  F01A         	movff	inputEntry@compartmentNum,??_inputEntry
  1337  00F98C  C052  F01B         	movff	inputEntry@compartmentsToFill,??_inputEntry+1
  1338  00F990  2A1A               	incf	??_inputEntry,f,c
  1339  00F992  D002               	goto	u1294
  1340  00F994                     u1295:
  1341  00F994  90D8               	bcf	status,0,c
  1342  00F996  321B               	rrcf	??_inputEntry+1,f,c
  1343  00F998                     u1294:
  1344  00F998  2E1A               	decfsz	??_inputEntry,f,c
  1345  00F99A  D7FC               	goto	u1295
  1346  00F99C  A01B               	btfss	??_inputEntry+1,0,c
  1347  00F99E  D1D7               	goto	u1540
  1348                           
  1349                           ;main.c: 134: int setIsGood = 0;
  1350  00F9A0  0E00               	movlw	0
  1351  00F9A2  6E4F               	movwf	inputEntry@setIsGood+1,c
  1352  00F9A4  0E00               	movlw	0
  1353  00F9A6  6E4E               	movwf	inputEntry@setIsGood,c
  1354                           
  1355                           ;main.c: 135: while (!setIsGood) {
  1356  00F9A8  D136               	goto	l105
  1357  00F9AA                     
  1358                           ;main.c: 136: numB = 0;
  1359  00F9AA  0E00               	movlw	0
  1360  00F9AC  6E45               	movwf	inputEntry@numB+1,c
  1361  00F9AE  0E00               	movlw	0
  1362  00F9B0  6E44               	movwf	inputEntry@numB,c
  1363                           
  1364                           ;main.c: 137: numN = 0;
  1365  00F9B2  0E00               	movlw	0
  1366  00F9B4  6E47               	movwf	inputEntry@numN+1,c
  1367  00F9B6  0E00               	movlw	0
  1368  00F9B8  6E46               	movwf	inputEntry@numN,c
  1369                           
  1370                           ;main.c: 138: numS = 0;
  1371  00F9BA  0E00               	movlw	0
  1372  00F9BC  6E49               	movwf	inputEntry@numS+1,c
  1373  00F9BE  0E00               	movlw	0
  1374  00F9C0  6E48               	movwf	inputEntry@numS,c
  1375                           
  1376                           ;main.c: 139: numW = 0;
  1377  00F9C2  0E00               	movlw	0
  1378  00F9C4  6E4B               	movwf	inputEntry@numW+1,c
  1379  00F9C6  0E00               	movlw	0
  1380  00F9C8  6E4A               	movwf	inputEntry@numW,c
  1381                           
  1382                           ;main.c: 140: char fastenerString[32];
  1383                           ;main.c: 141: strcpy(fastenerString, inputEntryQuestions[inputEntryStep]);
  1384  00F9CA  0E1E               	movlw	low inputEntry@fastenerString
  1385  00F9CC  6E07               	movwf	strcpy@to,c
  1386  00F9CE  0E00               	movlw	high inputEntry@fastenerString
  1387  00F9D0  6E08               	movwf	strcpy@to+1,c
  1388  00F9D2  C057  F001         	movff	inputEntry@inputEntryStep,___wmul@multiplier
  1389  00F9D6  C058  F002         	movff	inputEntry@inputEntryStep+1,___wmul@multiplier+1
  1390  00F9DA  0E00               	movlw	0
  1391  00F9DC  6E04               	movwf	___wmul@multiplicand+1,c
  1392  00F9DE  0E21               	movlw	33
  1393  00F9E0  6E03               	movwf	___wmul@multiplicand,c
  1394  00F9E2  ECF7  F078         	call	___wmul	;wreg free
  1395  00F9E6  0E6B               	movlw	low _inputEntryQuestions
  1396  00F9E8  2401               	addwf	?___wmul,w,c
  1397  00F9EA  6E09               	movwf	strcpy@from,c
  1398  00F9EC  0EFF               	movlw	high _inputEntryQuestions
  1399  00F9EE  2002               	addwfc	?___wmul+1,w,c
  1400  00F9F0  6E0A               	movwf	strcpy@from+1,c
  1401  00F9F2  EC5F  F079         	call	_strcpy	;wreg free
  1402                           
  1403                           ;main.c: 142: fastenerString[14] = compartmentNum + 1 + 48;
  1404  00F9F6  505B               	movf	inputEntry@compartmentNum,w,c
  1405  00F9F8  0F31               	addlw	49
  1406  00F9FA  6E2C               	movwf	inputEntry@fastenerString+14,c
  1407                           
  1408                           ;main.c: 144: printStringLCD(fastenerString);
  1409  00F9FC  0E1E               	movlw	low inputEntry@fastenerString
  1410  00F9FE  6E07               	movwf	printStringLCD@string,c
  1411  00FA00  0E00               	movlw	high inputEntry@fastenerString
  1412  00FA02  6E08               	movwf	printStringLCD@string+1,c
  1413  00FA04  ECD5  F07A         	call	_printStringLCD	;wreg free
  1414                           
  1415                           ;main.c: 145: lcd_set_cursor(9, 1);
  1416  00FA08  0E01               	movlw	1
  1417  00FA0A  6E07               	movwf	lcd_set_cursor@y,c
  1418  00FA0C  0E09               	movlw	9
  1419  00FA0E  EC77  F079         	call	_lcd_set_cursor
  1420                           
  1421                           ;main.c: 146: doneCompartment = 0;
  1422  00FA12  0E00               	movlw	0
  1423  00FA14  6E54               	movwf	inputEntry@doneCompartment+1,c
  1424  00FA16  0E00               	movlw	0
  1425  00FA18  D03B               	goto	L2
  1426  00FA1A                     
  1427                           ;main.c: 149: pressed = pollKeypad();
  1428  00FA1A  EC1D  F079         	call	_pollKeypad	;wreg free
  1429  00FA1E  6E5F               	movwf	inputEntry@pressed,c
  1430                           
  1431                           ;main.c: 150: if (pressed == 66 || pressed == 78 || pressed == 83 || pressed == 87) {
  1432  00FA20  0E42               	movlw	66
  1433  00FA22  185F               	xorwf	inputEntry@pressed,w,c
  1434  00FA24  B4D8               	btfsc	status,2,c
  1435  00FA26  D00C               	goto	u1340
  1436  00FA28  0E4E               	movlw	78
  1437  00FA2A  185F               	xorwf	inputEntry@pressed,w,c
  1438  00FA2C  B4D8               	btfsc	status,2,c
  1439  00FA2E  D008               	goto	u1340
  1440  00FA30  0E53               	movlw	83
  1441  00FA32  185F               	xorwf	inputEntry@pressed,w,c
  1442  00FA34  B4D8               	btfsc	status,2,c
  1443  00FA36  D004               	goto	u1340
  1444  00FA38  0E57               	movlw	87
  1445  00FA3A  185F               	xorwf	inputEntry@pressed,w,c
  1446  00FA3C  A4D8               	btfss	status,2,c
  1447  00FA3E  D021               	goto	l86
  1448  00FA40                     u1340:
  1449                           
  1450                           ;main.c: 151: putch(pressed);
  1451  00FA40  505F               	movf	inputEntry@pressed,w,c
  1452  00FA42  ECDF  F078         	call	_putch
  1453                           
  1454                           ;main.c: 152: if (pressed == 66) numB++;
  1455  00FA46  0E42               	movlw	66
  1456  00FA48  185F               	xorwf	inputEntry@pressed,w,c
  1457  00FA4A  A4D8               	btfss	status,2,c
  1458  00FA4C  D003               	goto	l89
  1459  00FA4E  4A44               	infsnz	inputEntry@numB,f,c
  1460  00FA50  2A45               	incf	inputEntry@numB+1,f,c
  1461  00FA52  D014               	goto	l95
  1462  00FA54                     l89:
  1463                           
  1464                           ;main.c: 153: else if (pressed == 78) numN++;
  1465  00FA54  0E4E               	movlw	78
  1466  00FA56  185F               	xorwf	inputEntry@pressed,w,c
  1467  00FA58  A4D8               	btfss	status,2,c
  1468  00FA5A  D003               	goto	l91
  1469  00FA5C  4A46               	infsnz	inputEntry@numN,f,c
  1470  00FA5E  2A47               	incf	inputEntry@numN+1,f,c
  1471  00FA60  D00D               	goto	l95
  1472  00FA62                     l91:
  1473                           
  1474                           ;main.c: 154: else if (pressed == 83) numS ++;
  1475  00FA62  0E53               	movlw	83
  1476  00FA64  185F               	xorwf	inputEntry@pressed,w,c
  1477  00FA66  A4D8               	btfss	status,2,c
  1478  00FA68  D003               	goto	l93
  1479  00FA6A  4A48               	infsnz	inputEntry@numS,f,c
  1480  00FA6C  2A49               	incf	inputEntry@numS+1,f,c
  1481  00FA6E  D006               	goto	l95
  1482  00FA70                     l93:
  1483                           
  1484                           ;main.c: 155: else if (pressed == 87) numW++;
  1485  00FA70  0E57               	movlw	87
  1486  00FA72  185F               	xorwf	inputEntry@pressed,w,c
  1487  00FA74  A4D8               	btfss	status,2,c
  1488  00FA76  D002               	goto	l95
  1489  00FA78  4A4A               	infsnz	inputEntry@numW,f,c
  1490  00FA7A  2A4B               	incf	inputEntry@numW+1,f,c
  1491  00FA7C                     l95:
  1492                           
  1493                           ;main.c: 172: doneCompartment++;
  1494  00FA7C  4A53               	infsnz	inputEntry@doneCompartment,f,c
  1495  00FA7E  2A54               	incf	inputEntry@doneCompartment+1,f,c
  1496                           
  1497                           ;main.c: 173: } else if (pressed == 35) {
  1498  00FA80  D014               	goto	l99
  1499  00FA82                     l86:
  1500  00FA82  0E23               	movlw	35
  1501  00FA84  185F               	xorwf	inputEntry@pressed,w,c
  1502  00FA86  A4D8               	btfss	status,2,c
  1503  00FA88  D005               	goto	l97
  1504                           
  1505                           ;main.c: 174: doneCompartment = 4;
  1506  00FA8A  0E00               	movlw	0
  1507  00FA8C  6E54               	movwf	inputEntry@doneCompartment+1,c
  1508  00FA8E  0E04               	movlw	4
  1509  00FA90                     L2:
  1510  00FA90  6E53               	movwf	inputEntry@doneCompartment,c
  1511                           
  1512                           ;main.c: 175: } else if (pressed == 42) {
  1513  00FA92  D00B               	goto	l99
  1514  00FA94                     l97:
  1515  00FA94  0E2A               	movlw	42
  1516  00FA96  185F               	xorwf	inputEntry@pressed,w,c
  1517  00FA98  A4D8               	btfss	status,2,c
  1518  00FA9A  D007               	goto	l99
  1519                           
  1520                           ;main.c: 176: compartmentNum--;
  1521  00FA9C  065B               	decf	inputEntry@compartmentNum,f,c
  1522  00FA9E  A0D8               	btfss	status,0,c
  1523  00FAA0  065C               	decf	inputEntry@compartmentNum+1,f,c
  1524                           
  1525                           ;main.c: 177: stepID--;
  1526  00FAA2  0640               	decf	inputEntry@stepID,f,c
  1527  00FAA4  A0D8               	btfss	status,0,c
  1528  00FAA6  0641               	decf	inputEntry@stepID+1,f,c
  1529                           
  1530                           ;main.c: 178: goto STARTCOMPARTMENT;
  1531  00FAA8  D76F               	goto	l78
  1532  00FAAA                     l99:
  1533  00FAAA  BE54               	btfsc	inputEntry@doneCompartment+1,7,c
  1534  00FAAC  D7B6               	goto	l85
  1535  00FAAE  5054               	movf	inputEntry@doneCompartment+1,w,c
  1536  00FAB0  E104               	bnz	l1694
  1537  00FAB2  0E04               	movlw	4
  1538  00FAB4  5C53               	subwf	inputEntry@doneCompartment,w,c
  1539  00FAB6  A0D8               	btfss	status,0,c
  1540  00FAB8  D7B0               	goto	l85
  1541  00FABA                     l1694:
  1542                           
  1543                           ;main.c: 186: }
  1544                           ;main.c: 187: }
  1545                           ;main.c: 190: found = 0;
  1546  00FABA  0E00               	movlw	0
  1547  00FABC  6E4D               	movwf	inputEntry@found+1,c
  1548  00FABE  0E00               	movlw	0
  1549  00FAC0  6E4C               	movwf	inputEntry@found,c
  1550                           
  1551                           ;main.c: 191: for (i = 0; i < 20; i++) {
  1552  00FAC2  0E00               	movlw	0
  1553  00FAC4  6E5E               	movwf	inputEntry@i+1,c
  1554  00FAC6  0E00               	movlw	0
  1555  00FAC8  6E5D               	movwf	inputEntry@i,c
  1556  00FACA  BE5E               	btfsc	inputEntry@i+1,7,c
  1557  00FACC  D008               	goto	l101
  1558  00FACE  505E               	movf	inputEntry@i+1,w,c
  1559  00FAD0  E105               	bnz	u1420
  1560  00FAD2  0E14               	movlw	20
  1561  00FAD4  5C5D               	subwf	inputEntry@i,w,c
  1562  00FAD6  B0D8               	btfsc	status,0,c
  1563  00FAD8  D08D               	goto	u1470
  1564  00FADA  D001               	goto	l101
  1565  00FADC                     u1420:
  1566  00FADC  D08B               	goto	u1470
  1567  00FADE                     l101:
  1568                           
  1569                           ;main.c: 192: if (fastenerMatrix[i][0] == numB &&
  1570                           ;main.c: 193: fastenerMatrix[i][1] == numN &&
  1571                           ;main.c: 194: fastenerMatrix[i][2] == numS &&
  1572                           ;main.c: 195: fastenerMatrix[i][3] == numW)
  1573  00FADE  C05D  F01A         	movff	inputEntry@i,??_inputEntry
  1574  00FAE2  C05E  F01B         	movff	inputEntry@i+1,??_inputEntry+1
  1575  00FAE6  90D8               	bcf	status,0,c
  1576  00FAE8  361A               	rlcf	??_inputEntry,f,c
  1577  00FAEA  361B               	rlcf	??_inputEntry+1,f,c
  1578  00FAEC  90D8               	bcf	status,0,c
  1579  00FAEE  361A               	rlcf	??_inputEntry,f,c
  1580  00FAF0  361B               	rlcf	??_inputEntry+1,f,c
  1581  00FAF2  0E05               	movlw	low _fastenerMatrix
  1582  00FAF4  241A               	addwf	??_inputEntry,w,c
  1583  00FAF6  6EF6               	movwf	tblptrl,c
  1584  00FAF8  0EFE               	movlw	high _fastenerMatrix
  1585  00FAFA  201B               	addwfc	??_inputEntry+1,w,c
  1586  00FAFC  6EF7               	movwf	tblptrh,c
  1587  00FAFE                     	if	0	;There are less than 3 active tblptr bytes
  1588  00FAFE                     	endif
  1589  00FAFE  0008               	tblrd		*
  1590  00FB00  50F5               	movf	tablat,w,c
  1591  00FB02  6E1C               	movwf	(??_inputEntry+2)& (0+255),c
  1592  00FB04  6A1D               	clrf	(??_inputEntry+3)& (0+255),c
  1593  00FB06  5044               	movf	inputEntry@numB,w,c
  1594  00FB08  181C               	xorwf	??_inputEntry+2,w,c
  1595  00FB0A  E16D               	bnz	l1712
  1596  00FB0C  5045               	movf	inputEntry@numB+1,w,c
  1597  00FB0E  181D               	xorwf	??_inputEntry+3,w,c
  1598  00FB10  A4D8               	btfss	status,2,c
  1599  00FB12  D069               	goto	l103
  1600  00FB14  C05D  F01A         	movff	inputEntry@i,??_inputEntry
  1601  00FB18  C05E  F01B         	movff	inputEntry@i+1,??_inputEntry+1
  1602  00FB1C  90D8               	bcf	status,0,c
  1603  00FB1E  361A               	rlcf	??_inputEntry,f,c
  1604  00FB20  361B               	rlcf	??_inputEntry+1,f,c
  1605  00FB22  90D8               	bcf	status,0,c
  1606  00FB24  361A               	rlcf	??_inputEntry,f,c
  1607  00FB26  361B               	rlcf	??_inputEntry+1,f,c
  1608  00FB28  0E01               	movlw	1
  1609  00FB2A  261A               	addwf	??_inputEntry,f,c
  1610  00FB2C  0E00               	movlw	0
  1611  00FB2E  221B               	addwfc	??_inputEntry+1,f,c
  1612  00FB30  0E05               	movlw	low _fastenerMatrix
  1613  00FB32  241A               	addwf	??_inputEntry,w,c
  1614  00FB34  6EF6               	movwf	tblptrl,c
  1615  00FB36  0EFE               	movlw	high _fastenerMatrix
  1616  00FB38  201B               	addwfc	??_inputEntry+1,w,c
  1617  00FB3A  6EF7               	movwf	tblptrh,c
  1618  00FB3C                     	if	0	;There are less than 3 active tblptr bytes
  1619  00FB3C                     	endif
  1620  00FB3C  0008               	tblrd		*
  1621  00FB3E  50F5               	movf	tablat,w,c
  1622  00FB40  6E1C               	movwf	(??_inputEntry+2)& (0+255),c
  1623  00FB42  6A1D               	clrf	(??_inputEntry+3)& (0+255),c
  1624  00FB44  5046               	movf	inputEntry@numN,w,c
  1625  00FB46  181C               	xorwf	??_inputEntry+2,w,c
  1626  00FB48  E14E               	bnz	l1712
  1627  00FB4A  5047               	movf	inputEntry@numN+1,w,c
  1628  00FB4C  181D               	xorwf	??_inputEntry+3,w,c
  1629  00FB4E  A4D8               	btfss	status,2,c
  1630  00FB50  D04A               	goto	l103
  1631  00FB52  C05D  F01A         	movff	inputEntry@i,??_inputEntry
  1632  00FB56  C05E  F01B         	movff	inputEntry@i+1,??_inputEntry+1
  1633  00FB5A  90D8               	bcf	status,0,c
  1634  00FB5C  361A               	rlcf	??_inputEntry,f,c
  1635  00FB5E  361B               	rlcf	??_inputEntry+1,f,c
  1636  00FB60  90D8               	bcf	status,0,c
  1637  00FB62  361A               	rlcf	??_inputEntry,f,c
  1638  00FB64  361B               	rlcf	??_inputEntry+1,f,c
  1639  00FB66  0E02               	movlw	2
  1640  00FB68  261A               	addwf	??_inputEntry,f,c
  1641  00FB6A  0E00               	movlw	0
  1642  00FB6C  221B               	addwfc	??_inputEntry+1,f,c
  1643  00FB6E  0E05               	movlw	low _fastenerMatrix
  1644  00FB70  241A               	addwf	??_inputEntry,w,c
  1645  00FB72  6EF6               	movwf	tblptrl,c
  1646  00FB74  0EFE               	movlw	high _fastenerMatrix
  1647  00FB76  201B               	addwfc	??_inputEntry+1,w,c
  1648  00FB78  6EF7               	movwf	tblptrh,c
  1649  00FB7A                     	if	0	;There are less than 3 active tblptr bytes
  1650  00FB7A                     	endif
  1651  00FB7A  0008               	tblrd		*
  1652  00FB7C  50F5               	movf	tablat,w,c
  1653  00FB7E  6E1C               	movwf	(??_inputEntry+2)& (0+255),c
  1654  00FB80  6A1D               	clrf	(??_inputEntry+3)& (0+255),c
  1655  00FB82  5048               	movf	inputEntry@numS,w,c
  1656  00FB84  181C               	xorwf	??_inputEntry+2,w,c
  1657  00FB86  E12F               	bnz	l1712
  1658  00FB88  5049               	movf	inputEntry@numS+1,w,c
  1659  00FB8A  181D               	xorwf	??_inputEntry+3,w,c
  1660  00FB8C  A4D8               	btfss	status,2,c
  1661  00FB8E  D02B               	goto	l103
  1662  00FB90  C05D  F01A         	movff	inputEntry@i,??_inputEntry
  1663  00FB94  C05E  F01B         	movff	inputEntry@i+1,??_inputEntry+1
  1664  00FB98  90D8               	bcf	status,0,c
  1665  00FB9A  361A               	rlcf	??_inputEntry,f,c
  1666  00FB9C  361B               	rlcf	??_inputEntry+1,f,c
  1667  00FB9E  90D8               	bcf	status,0,c
  1668  00FBA0  361A               	rlcf	??_inputEntry,f,c
  1669  00FBA2  361B               	rlcf	??_inputEntry+1,f,c
  1670  00FBA4  0E03               	movlw	3
  1671  00FBA6  261A               	addwf	??_inputEntry,f,c
  1672  00FBA8  0E00               	movlw	0
  1673  00FBAA  221B               	addwfc	??_inputEntry+1,f,c
  1674  00FBAC  0E05               	movlw	low _fastenerMatrix
  1675  00FBAE  241A               	addwf	??_inputEntry,w,c
  1676  00FBB0  6EF6               	movwf	tblptrl,c
  1677  00FBB2  0EFE               	movlw	high _fastenerMatrix
  1678  00FBB4  201B               	addwfc	??_inputEntry+1,w,c
  1679  00FBB6  6EF7               	movwf	tblptrh,c
  1680  00FBB8                     	if	0	;There are less than 3 active tblptr bytes
  1681  00FBB8                     	endif
  1682  00FBB8  0008               	tblrd		*
  1683  00FBBA  50F5               	movf	tablat,w,c
  1684  00FBBC  6E1C               	movwf	(??_inputEntry+2)& (0+255),c
  1685  00FBBE  6A1D               	clrf	(??_inputEntry+3)& (0+255),c
  1686  00FBC0  504A               	movf	inputEntry@numW,w,c
  1687  00FBC2  181C               	xorwf	??_inputEntry+2,w,c
  1688  00FBC4  E110               	bnz	l1712
  1689  00FBC6  504B               	movf	inputEntry@numW+1,w,c
  1690  00FBC8  181D               	xorwf	??_inputEntry+3,w,c
  1691  00FBCA  A4D8               	btfss	status,2,c
  1692  00FBCC  D00C               	goto	l103
  1693                           
  1694                           ;main.c: 196: {
  1695                           ;main.c: 197: params.toFill[compartmentNum] = i;
  1696  00FBCE  0E62               	movlw	low (_params+2)
  1697  00FBD0  245B               	addwf	inputEntry@compartmentNum,w,c
  1698  00FBD2  6ED9               	movwf	fsr2l,c
  1699  00FBD4  0E00               	movlw	high (_params+2)
  1700  00FBD6  205C               	addwfc	inputEntry@compartmentNum+1,w,c
  1701  00FBD8  6EDA               	movwf	fsr2h,c
  1702  00FBDA  C05D  FFDF         	movff	inputEntry@i,indf2
  1703                           
  1704                           ;main.c: 198: found = 1;
  1705  00FBDE  0E00               	movlw	0
  1706  00FBE0  6E4D               	movwf	inputEntry@found+1,c
  1707  00FBE2  0E01               	movlw	1
  1708  00FBE4  6E4C               	movwf	inputEntry@found,c
  1709  00FBE6                     l103:
  1710  00FBE6                     l1712:
  1711  00FBE6  4A5D               	infsnz	inputEntry@i,f,c
  1712  00FBE8  2A5E               	incf	inputEntry@i+1,f,c
  1713  00FBEA  BE5E               	btfsc	inputEntry@i+1,7,c
  1714  00FBEC  D778               	goto	l101
  1715  00FBEE  505E               	movf	inputEntry@i+1,w,c
  1716  00FBF0  E101               	bnz	l1716
  1717  00FBF2  D76F               	goto	L3
  1718  00FBF4                     u1470:
  1719  00FBF4                     l1716:
  1720                           
  1721                           ;main.c: 199: }
  1722                           ;main.c: 200: }
  1723                           ;main.c: 201: if (!found) {
  1724  00FBF4  504C               	movf	inputEntry@found,w,c
  1725  00FBF6  104D               	iorwf	inputEntry@found+1,w,c
  1726  00FBF8  A4D8               	btfss	status,2,c
  1727  00FBFA  D007               	goto	l104
  1728                           
  1729                           ;main.c: 202: printErrorLCD(errMsgs.badEntry);
  1730  00FBFC  0E8B               	movlw	low _errMsgs
  1731  00FBFE  6E16               	movwf	printErrorLCD@string,c
  1732  00FC00  0EFE               	movlw	high _errMsgs
  1733  00FC02  6E17               	movwf	printErrorLCD@string+1,c
  1734  00FC04  EC0A  F079         	call	_printErrorLCD	;wreg free
  1735                           
  1736                           ;main.c: 206: } else {
  1737                           
  1738                           ;main.c: 205: continue;
  1739  00FC08  D006               	goto	l105
  1740  00FC0A                     l104:
  1741                           
  1742                           ;main.c: 207: setIsGood = 1;
  1743  00FC0A  0E00               	movlw	0
  1744  00FC0C  6E4F               	movwf	inputEntry@setIsGood+1,c
  1745  00FC0E  0E01               	movlw	1
  1746  00FC10  6E4E               	movwf	inputEntry@setIsGood,c
  1747                           
  1748                           ;main.c: 208: stepID++;
  1749  00FC12  4A40               	infsnz	inputEntry@stepID,f,c
  1750  00FC14  2A41               	incf	inputEntry@stepID+1,f,c
  1751  00FC16                     l105:
  1752  00FC16  504E               	movf	inputEntry@setIsGood,w,c
  1753  00FC18  104F               	iorwf	inputEntry@setIsGood+1,w,c
  1754  00FC1A  B4D8               	btfsc	status,2,c
  1755  00FC1C  D6C6               	goto	l83
  1756                           
  1757                           ;main.c: 209: }
  1758                           ;main.c: 210: }
  1759                           ;main.c: 212: int doneMultiples = 0;
  1760  00FC1E  0E00               	movlw	0
  1761  00FC20  6E51               	movwf	inputEntry@doneMultiples+1,c
  1762  00FC22  0E00               	movlw	0
  1763  00FC24  D08F               	goto	L4
  1764  00FC26                     
  1765                           ;main.c: 214: printStringLCD(inputEntryQuestions[2]);
  1766  00FC26  0EAD               	movlw	low (_inputEntryQuestions+66)
  1767  00FC28  6E07               	movwf	printStringLCD@string,c
  1768  00FC2A  0EFF               	movlw	high (_inputEntryQuestions+66)
  1769  00FC2C  6E08               	movwf	printStringLCD@string+1,c
  1770  00FC2E  ECD5  F07A         	call	_printStringLCD	;wreg free
  1771                           
  1772                           ;main.c: 215: lcd_set_cursor(14, 1);
  1773  00FC32  0E01               	movlw	1
  1774  00FC34  6E07               	movwf	lcd_set_cursor@y,c
  1775  00FC36  0E0E               	movlw	14
  1776  00FC38  EC77  F079         	call	_lcd_set_cursor
  1777                           
  1778                           ;main.c: 217: pressed = pollKeypad();
  1779  00FC3C  EC1D  F079         	call	_pollKeypad	;wreg free
  1780  00FC40  6E5F               	movwf	inputEntry@pressed,c
  1781                           
  1782                           ;main.c: 218: numPressed = pressed - 48;
  1783  00FC42  0ED0               	movlw	208
  1784  00FC44  245F               	addwf	inputEntry@pressed,w,c
  1785  00FC46  6E59               	movwf	inputEntry@numPressed,c
  1786  00FC48  6A5A               	clrf	inputEntry@numPressed+1,c
  1787  00FC4A  0EFF               	movlw	255
  1788  00FC4C  225A               	addwfc	inputEntry@numPressed+1,f,c
  1789                           
  1790                           ;main.c: 219: putch(pressed);
  1791  00FC4E  505F               	movf	inputEntry@pressed,w,c
  1792  00FC50  ECDF  F078         	call	_putch
  1793                           
  1794                           ;main.c: 220: _delay((unsigned long)((500)*(40000000/4000.0)));
  1795  00FC54  0E1A               	movlw	26
  1796  00FC56  6E1B               	movwf	(??_inputEntry+1)& (0+255),c
  1797  00FC58  0E5E               	movlw	94
  1798  00FC5A  6E1A               	movwf	??_inputEntry& (0+255),c
  1799  00FC5C  0E6E               	movlw	110
  1800  00FC5E                     u1607:
  1801  00FC5E  2EE8               	decfsz	wreg,f,c
  1802  00FC60  D7FE               	bra	u1607
  1803  00FC62  2E1A               	decfsz	??_inputEntry& (0+255),f,c
  1804  00FC64  D7FC               	bra	u1607
  1805  00FC66  2E1B               	decfsz	(??_inputEntry+1)& (0+255),f,c
  1806  00FC68  D7FA               	bra	u1607
  1807  00FC6A  D000               	nop2	
  1808                           
  1809                           ;main.c: 222: int sum = 0;
  1810  00FC6C  0E00               	movlw	0
  1811  00FC6E  6E56               	movwf	inputEntry@sum+1,c
  1812  00FC70  0E00               	movlw	0
  1813  00FC72  6E55               	movwf	inputEntry@sum,c
  1814                           
  1815                           ;main.c: 223: for (i = 0; i < 4; i++) {
  1816  00FC74  0E00               	movlw	0
  1817  00FC76  6E5E               	movwf	inputEntry@i+1,c
  1818  00FC78  0E00               	movlw	0
  1819  00FC7A  6E5D               	movwf	inputEntry@i,c
  1820  00FC7C                     l1746:
  1821  00FC7C  BE5E               	btfsc	inputEntry@i+1,7,c
  1822  00FC7E  D006               	goto	l109
  1823  00FC80  505E               	movf	inputEntry@i+1,w,c
  1824  00FC82  E126               	bnz	l1756
  1825  00FC84  0E04               	movlw	4
  1826  00FC86  5C5D               	subwf	inputEntry@i,w,c
  1827  00FC88  B0D8               	btfsc	status,0,c
  1828  00FC8A  D022               	goto	u1510
  1829  00FC8C                     l109:
  1830                           
  1831                           ;main.c: 224: sum += fastenerMatrix[params.toFill[compartmentNum]][i];
  1832  00FC8C  0E62               	movlw	low (_params+2)
  1833  00FC8E  245B               	addwf	inputEntry@compartmentNum,w,c
  1834  00FC90  6ED9               	movwf	fsr2l,c
  1835  00FC92  0E00               	movlw	high (_params+2)
  1836  00FC94  205C               	addwfc	inputEntry@compartmentNum+1,w,c
  1837  00FC96  6EDA               	movwf	fsr2h,c
  1838  00FC98  50DF               	movf	indf2,w,c
  1839  00FC9A  6E1A               	movwf	??_inputEntry& (0+255),c
  1840  00FC9C  501A               	movf	??_inputEntry,w,c
  1841  00FC9E  0D04               	mullw	4
  1842  00FCA0  0E05               	movlw	low _fastenerMatrix
  1843  00FCA2  6E1B               	movwf	(??_inputEntry+1)& (0+255),c
  1844  00FCA4  0EFE               	movlw	high _fastenerMatrix
  1845  00FCA6  6E1C               	movwf	(??_inputEntry+2)& (0+255),c
  1846  00FCA8  50F3               	movf	prodl,w,c
  1847  00FCAA  261B               	addwf	??_inputEntry+1,f,c
  1848  00FCAC  50F4               	movf	prodh,w,c
  1849  00FCAE  221C               	addwfc	??_inputEntry+2,f,c
  1850  00FCB0  505D               	movf	inputEntry@i,w,c
  1851  00FCB2  261B               	addwf	??_inputEntry+1,f,c
  1852  00FCB4  505E               	movf	inputEntry@i+1,w,c
  1853  00FCB6  221C               	addwfc	??_inputEntry+2,f,c
  1854  00FCB8  C01B  FFF6         	movff	??_inputEntry+1,tblptrl
  1855  00FCBC  C01C  FFF7         	movff	??_inputEntry+2,tblptrh
  1856  00FCC0                     	if	0	;tblptru may be non-zero
  1857  00FCC0                     	endif
  1858  00FCC0                     	if	0	;tblptru may be non-zero
  1859  00FCC0                     	endif
  1860  00FCC0  0008               	tblrd		*
  1861  00FCC2  50F5               	movf	tablat,w,c
  1862  00FCC4  2655               	addwf	inputEntry@sum,f,c
  1863  00FCC6  0E00               	movlw	0
  1864  00FCC8  2256               	addwfc	inputEntry@sum+1,f,c
  1865  00FCCA  4A5D               	infsnz	inputEntry@i,f,c
  1866  00FCCC  2A5E               	incf	inputEntry@i+1,f,c
  1867  00FCCE  D7D6               	goto	l1746
  1868  00FCD0                     u1510:
  1869  00FCD0                     l1756:
  1870                           
  1871                           ;main.c: 225: };
  1872                           ;main.c: 226: if (numPressed * sum > 4 || numPressed * sum <= 0) {
  1873  00FCD0  C059  F001         	movff	inputEntry@numPressed,___wmul@multiplier
  1874  00FCD4  C05A  F002         	movff	inputEntry@numPressed+1,___wmul@multiplier+1
  1875  00FCD8  C055  F003         	movff	inputEntry@sum,___wmul@multiplicand
  1876  00FCDC  C056  F004         	movff	inputEntry@sum+1,___wmul@multiplicand+1
  1877  00FCE0  ECF7  F078         	call	___wmul	;wreg free
  1878  00FCE4  BE02               	btfsc	?___wmul+1,7,c
  1879  00FCE6  D006               	goto	u1520
  1880  00FCE8  5002               	movf	?___wmul+1,w,c
  1881  00FCEA  E115               	bnz	l1760
  1882  00FCEC  0E05               	movlw	5
  1883  00FCEE  5C01               	subwf	?___wmul,w,c
  1884  00FCF0  B0D8               	btfsc	status,0,c
  1885  00FCF2  D011               	goto	u1530
  1886  00FCF4                     u1520:
  1887  00FCF4  C059  F001         	movff	inputEntry@numPressed,___wmul@multiplier
  1888  00FCF8  C05A  F002         	movff	inputEntry@numPressed+1,___wmul@multiplier+1
  1889  00FCFC  C055  F003         	movff	inputEntry@sum,___wmul@multiplicand
  1890  00FD00  C056  F004         	movff	inputEntry@sum+1,___wmul@multiplicand+1
  1891  00FD04  ECF7  F078         	call	___wmul	;wreg free
  1892  00FD08  BE02               	btfsc	?___wmul+1,7,c
  1893  00FD0A  D005               	goto	u1530
  1894  00FD0C  5002               	movf	?___wmul+1,w,c
  1895  00FD0E  E10A               	bnz	l1762
  1896  00FD10  0401               	decf	?___wmul,w,c
  1897  00FD12  B0D8               	btfsc	status,0,c
  1898  00FD14  D007               	goto	l111
  1899  00FD16                     u1530:
  1900  00FD16                     l1760:
  1901                           
  1902                           ;main.c: 227: printErrorLCD(errMsgs.badEntry);
  1903  00FD16  0E8B               	movlw	low _errMsgs
  1904  00FD18  6E16               	movwf	printErrorLCD@string,c
  1905  00FD1A  0EFE               	movlw	high _errMsgs
  1906  00FD1C  6E17               	movwf	printErrorLCD@string+1,c
  1907  00FD1E  EC0A  F079         	call	_printErrorLCD	;wreg free
  1908                           
  1909                           ;main.c: 228: } else {
  1910  00FD22  D011               	goto	l114
  1911  00FD24                     l111:
  1912  00FD24                     l1762:
  1913                           
  1914                           ;main.c: 229: params.setMultiple[compartmentNum] = numPressed;
  1915  00FD24  90D8               	bcf	status,0,c
  1916  00FD26  345B               	rlcf	inputEntry@compartmentNum,w,c
  1917  00FD28  6ED9               	movwf	fsr2l,c
  1918  00FD2A  345C               	rlcf	inputEntry@compartmentNum+1,w,c
  1919  00FD2C  6EDA               	movwf	fsr2h,c
  1920  00FD2E  0E6A               	movlw	low (_params+10)
  1921  00FD30  26D9               	addwf	fsr2l,f,c
  1922  00FD32  0E00               	movlw	high (_params+10)
  1923  00FD34  22DA               	addwfc	fsr2h,f,c
  1924  00FD36  C059  FFDE         	movff	inputEntry@numPressed,postinc2
  1925  00FD3A  C05A  FFDD         	movff	inputEntry@numPressed+1,postdec2
  1926                           
  1927                           ;main.c: 230: doneMultiples = 1;
  1928  00FD3E  0E00               	movlw	0
  1929  00FD40  6E51               	movwf	inputEntry@doneMultiples+1,c
  1930  00FD42  0E01               	movlw	1
  1931  00FD44                     L4:
  1932  00FD44  6E50               	movwf	inputEntry@doneMultiples,c
  1933  00FD46                     l114:
  1934  00FD46  5050               	movf	inputEntry@doneMultiples,w,c
  1935  00FD48  1051               	iorwf	inputEntry@doneMultiples+1,w,c
  1936  00FD4A  B4D8               	btfsc	status,2,c
  1937  00FD4C  D76C               	goto	l108
  1938  00FD4E                     u1540:
  1939                           
  1940                           ;main.c: 238: }
  1941                           ;main.c: 239: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1942                           
  1943                           ;main.c: 231: }
  1944                           ;main.c: 232: }
  1945                           ;main.c: 233: } else {
  1946  00FD4E  0E01               	movlw	1
  1947  00FD50  ECD5  F078         	call	_lcdInst
  1948  00FD54  0EC3               	movlw	195
  1949  00FD56  6E1A               	movwf	??_inputEntry& (0+255),c
  1950  00FD58  0ECD               	movlw	205
  1951  00FD5A                     u1617:
  1952  00FD5A  2EE8               	decfsz	wreg,f,c
  1953  00FD5C  D7FE               	bra	u1617
  1954  00FD5E  2E1A               	decfsz	??_inputEntry& (0+255),f,c
  1955  00FD60  D7FC               	bra	u1617
  1956  00FD62  F000               	nop	
  1957                           
  1958                           ;main.c: 240: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1959  00FD64  0E80               	movlw	128
  1960  00FD66  ECD5  F078         	call	_lcdInst
  1961  00FD6A  0E41               	movlw	65
  1962  00FD6C  6E1A               	movwf	??_inputEntry& (0+255),c
  1963  00FD6E  0EEE               	movlw	238
  1964  00FD70                     u1627:
  1965  00FD70  2EE8               	decfsz	wreg,f,c
  1966  00FD72  D7FE               	bra	u1627
  1967  00FD74  2E1A               	decfsz	??_inputEntry& (0+255),f,c
  1968  00FD76  D7FC               	bra	u1627
  1969  00FD78  D000               	nop2	
  1970                           
  1971                           ;main.c: 241: printf("cn: %d", compartmentNum);
  1972  00FD7A  0EF8               	movlw	low STR_1
  1973  00FD7C  6E0D               	movwf	printf@f,c
  1974  00FD7E  0EFF               	movlw	high STR_1
  1975  00FD80  6E0E               	movwf	printf@f+1,c
  1976  00FD82  C05B  F00F         	movff	inputEntry@compartmentNum,?_printf+2
  1977  00FD86  C05C  F010         	movff	inputEntry@compartmentNum+1,?_printf+3
  1978  00FD8A  EC46  F07A         	call	_printf	;wreg free
  1979                           
  1980                           ;main.c: 242: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1981  00FD8E  0E66               	movlw	102
  1982  00FD90  6E1B               	movwf	(??_inputEntry+1)& (0+255),c
  1983  00FD92  0E76               	movlw	118
  1984  00FD94  6E1A               	movwf	??_inputEntry& (0+255),c
  1985  00FD96  0EC1               	movlw	193
  1986  00FD98                     u1637:
  1987  00FD98  2EE8               	decfsz	wreg,f,c
  1988  00FD9A  D7FE               	bra	u1637
  1989  00FD9C  2E1A               	decfsz	??_inputEntry& (0+255),f,c
  1990  00FD9E  D7FC               	bra	u1637
  1991  00FDA0  2E1B               	decfsz	(??_inputEntry+1)& (0+255),f,c
  1992  00FDA2  D7FA               	bra	u1637
  1993  00FDA4  F000               	nop	
  1994  00FDA6  4A5B               	infsnz	inputEntry@compartmentNum,f,c
  1995  00FDA8  2A5C               	incf	inputEntry@compartmentNum+1,f,c
  1996  00FDAA  BE5C               	btfsc	inputEntry@compartmentNum+1,7,c
  1997  00FDAC  D5ED               	goto	l78
  1998  00FDAE  505C               	movf	inputEntry@compartmentNum+1,w,c
  1999  00FDB0  E104               	bnz	l1782
  2000  00FDB2  0E08               	movlw	8
  2001  00FDB4  5C5B               	subwf	inputEntry@compartmentNum,w,c
  2002  00FDB6  A0D8               	btfss	status,0,c
  2003  00FDB8  D5E7               	goto	l78
  2004  00FDBA                     u1550:
  2005  00FDBA                     l1782:
  2006                           
  2007                           ;main.c: 243: }
  2008                           ;main.c: 244: done = 1;
  2009  00FDBA  0E00               	movlw	0
  2010  00FDBC  6E43               	movwf	inputEntry@done+1,c
  2011  00FDBE  0E01               	movlw	1
  2012  00FDC0                     L1:
  2013  00FDC0  6E42               	movwf	inputEntry@done,c
  2014  00FDC2                     l77:
  2015  00FDC2  5042               	movf	inputEntry@done,w,c
  2016  00FDC4  1043               	iorwf	inputEntry@done+1,w,c
  2017  00FDC6  B4D8               	btfsc	status,2,c
  2018  00FDC8  D568               	goto	l72
  2019                           
  2020                           ;main.c: 246: }
  2021                           ;main.c: 248: }
  2022                           ;main.c: 249: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2023  00FDCA  0E01               	movlw	1
  2024  00FDCC  ECD5  F078         	call	_lcdInst
  2025  00FDD0  0EC3               	movlw	195
  2026  00FDD2  6E1A               	movwf	??_inputEntry& (0+255),c
  2027  00FDD4  0ECD               	movlw	205
  2028  00FDD6                     u1647:
  2029  00FDD6  2EE8               	decfsz	wreg,f,c
  2030  00FDD8  D7FE               	bra	u1647
  2031  00FDDA  2E1A               	decfsz	??_inputEntry& (0+255),f,c
  2032  00FDDC  D7FC               	bra	u1647
  2033  00FDDE  F000               	nop	
  2034                           
  2035                           ;main.c: 250: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2036  00FDE0  0E80               	movlw	128
  2037  00FDE2  ECD5  F078         	call	_lcdInst
  2038  00FDE6  0E41               	movlw	65
  2039  00FDE8  6E1A               	movwf	??_inputEntry& (0+255),c
  2040  00FDEA  0EEE               	movlw	238
  2041  00FDEC                     u1657:
  2042  00FDEC  2EE8               	decfsz	wreg,f,c
  2043  00FDEE  D7FE               	bra	u1657
  2044  00FDF0  2E1A               	decfsz	??_inputEntry& (0+255),f,c
  2045  00FDF2  D7FC               	bra	u1657
  2046  00FDF4  D000               	nop2	
  2047                           
  2048                           ;main.c: 251: printf("We done!");
  2049  00FDF6  0EEF               	movlw	low STR_2
  2050  00FDF8  6E0D               	movwf	printf@f,c
  2051  00FDFA  0EFF               	movlw	high STR_2
  2052  00FDFC  6E0E               	movwf	printf@f+1,c
  2053  00FDFE  EC46  F07A         	call	_printf	;wreg free
  2054  00FE02  0012               	return		;funcret
  2055  00FE04                     __end_of_inputEntry:
  2056                           	opt stack 0
  2057                           tblptru	equ	0xFF8
  2058                           tblptrh	equ	0xFF7
  2059                           tblptrl	equ	0xFF6
  2060                           tablat	equ	0xFF5
  2061                           prodh	equ	0xFF4
  2062                           prodl	equ	0xFF3
  2063                           postinc0	equ	0xFEE
  2064                           wreg	equ	0xFE8
  2065                           indf2	equ	0xFDF
  2066                           postinc2	equ	0xFDE
  2067                           postdec2	equ	0xFDD
  2068                           fsr2h	equ	0xFDA
  2069                           fsr2l	equ	0xFD9
  2070                           status	equ	0xFD8
  2071                           
  2072 ;; *************** function _strcpy *****************
  2073 ;; Defined at:
  2074 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
  2075 ;; Parameters:    Size  Location     Type
  2076 ;;  to              2    6[COMRAM] PTR unsigned char 
  2077 ;;		 -> inputEntry@fastenerString(32), 
  2078 ;;  from            2    8[COMRAM] PTR const unsigned char 
  2079 ;;		 -> inputEntryQuestions(132), 
  2080 ;; Auto vars:     Size  Location     Type
  2081 ;;  cp              2   10[COMRAM] PTR unsigned char 
  2082 ;;		 -> inputEntry@fastenerString(32), 
  2083 ;; Return value:  Size  Location     Type
  2084 ;;                  2    6[COMRAM] PTR unsigned char 
  2085 ;; Registers used:
  2086 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2087 ;; Tracked objects:
  2088 ;;		On entry : 0/0
  2089 ;;		On exit  : 0/0
  2090 ;;		Unchanged: 0/0
  2091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2092 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2093 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2095 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2096 ;;Total ram usage:        6 bytes
  2097 ;; Hardware stack levels used:    1
  2098 ;; This function calls:
  2099 ;;		Nothing
  2100 ;; This function is called by:
  2101 ;;		_inputEntry
  2102 ;; This function uses a non-reentrant model
  2103 ;;
  2104                           
  2105                           	psect	text2
  2106  00F2BE                     __ptext2:
  2107                           	opt stack 0
  2108  00F2BE                     _strcpy:
  2109                           	opt stack 29
  2110                           
  2111                           ;incstack = 0
  2112  00F2BE  C007  F00B         	movff	strcpy@to,strcpy@cp
  2113  00F2C2  C008  F00C         	movff	strcpy@to+1,strcpy@cp+1
  2114  00F2C6  D004               	goto	l814
  2115  00F2C8  4A0B               	infsnz	strcpy@cp,f,c
  2116  00F2CA  2A0C               	incf	strcpy@cp+1,f,c
  2117  00F2CC  4A09               	infsnz	strcpy@from,f,c
  2118  00F2CE  2A0A               	incf	strcpy@from+1,f,c
  2119  00F2D0                     l814:
  2120  00F2D0  C009  FFF6         	movff	strcpy@from,tblptrl
  2121  00F2D4  C00A  FFF7         	movff	strcpy@from+1,tblptrh
  2122  00F2D8                     	if	0	;tblptru may be non-zero
  2123  00F2D8                     	endif
  2124  00F2D8                     	if	0	;tblptru may be non-zero
  2125  00F2D8                     	endif
  2126  00F2D8  C00B  FFD9         	movff	strcpy@cp,fsr2l
  2127  00F2DC  C00C  FFDA         	movff	strcpy@cp+1,fsr2h
  2128  00F2E0  0008               	tblrd		*
  2129  00F2E2  CFF5 FFDF          	movff	tablat,indf2
  2130  00F2E6  50DF               	movf	indf2,w,c
  2131  00F2E8  B4D8               	btfsc	status,2,c
  2132  00F2EA  0012               	return	
  2133  00F2EC  D7ED               	goto	l815
  2134  00F2EE                     __end_of_strcpy:
  2135                           	opt stack 0
  2136                           tblptru	equ	0xFF8
  2137                           tblptrh	equ	0xFF7
  2138                           tblptrl	equ	0xFF6
  2139                           tablat	equ	0xFF5
  2140                           prodh	equ	0xFF4
  2141                           prodl	equ	0xFF3
  2142                           postinc0	equ	0xFEE
  2143                           wreg	equ	0xFE8
  2144                           indf2	equ	0xFDF
  2145                           postinc2	equ	0xFDE
  2146                           postdec2	equ	0xFDD
  2147                           fsr2h	equ	0xFDA
  2148                           fsr2l	equ	0xFD9
  2149                           status	equ	0xFD8
  2150                           
  2151 ;; *************** function _printf *****************
  2152 ;; Defined at:
  2153 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2154 ;; Parameters:    Size  Location     Type
  2155 ;;  f               2   12[COMRAM] PTR const unsigned char 
  2156 ;;		 -> STR_2(9), STR_1(7), 
  2157 ;; Auto vars:     Size  Location     Type
  2158 ;;  tmpval          4    0        struct .
  2159 ;;  cp              3    0        PTR const unsigned char 
  2160 ;;  val             2   21[COMRAM] unsigned int 
  2161 ;;  ap              2   17[COMRAM] PTR void [1]
  2162 ;;		 -> ?_printf(2), 
  2163 ;;  len             2    0        unsigned int 
  2164 ;;  c               1   23[COMRAM] char 
  2165 ;;  prec            1   20[COMRAM] char 
  2166 ;;  flag            1   19[COMRAM] unsigned char 
  2167 ;; Return value:  Size  Location     Type
  2168 ;;                  2   12[COMRAM] int 
  2169 ;; Registers used:
  2170 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2171 ;; Tracked objects:
  2172 ;;		On entry : 0/0
  2173 ;;		On exit  : 0/0
  2174 ;;		Unchanged: 0/0
  2175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2176 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2177 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2178 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2179 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2180 ;;Total ram usage:       12 bytes
  2181 ;; Hardware stack levels used:    1
  2182 ;; Hardware stack levels required when called:    2
  2183 ;; This function calls:
  2184 ;;		___lwdiv
  2185 ;;		___lwmod
  2186 ;;		_putch
  2187 ;; This function is called by:
  2188 ;;		_inputEntry
  2189 ;; This function uses a non-reentrant model
  2190 ;;
  2191                           
  2192                           	psect	text3
  2193  00F48C                     __ptext3:
  2194                           	opt stack 0
  2195  00F48C                     _printf:
  2196                           	opt stack 27
  2197                           
  2198                           ;doprnt.c: 466: va_list ap;
  2199                           ;doprnt.c: 499: signed char c;
  2200                           ;doprnt.c: 506: signed char prec;
  2201                           ;doprnt.c: 508: unsigned char flag;
  2202                           ;doprnt.c: 523: union {
  2203                           ;doprnt.c: 524: unsigned long vd;
  2204                           ;doprnt.c: 525: double integ;
  2205                           ;doprnt.c: 526: } tmpval;
  2206                           ;doprnt.c: 528: unsigned int val;
  2207                           ;doprnt.c: 529: unsigned len;
  2208                           ;doprnt.c: 530: const char * cp;
  2209                           ;doprnt.c: 533: *ap = __va_start();
  2210                           
  2211                           ;incstack = 0
  2212  00F48C  0E0F               	movlw	low (?_printf+2)
  2213  00F48E  6E12               	movwf	printf@ap,c
  2214  00F490  0E00               	movlw	high (?_printf+2)
  2215  00F492  6E13               	movwf	printf@ap+1,c
  2216                           
  2217                           ;doprnt.c: 536: while(c = *f++) {
  2218  00F494  D07D               	goto	u1220
  2219  00F496                     
  2220                           ;doprnt.c: 538: if(c != '%')
  2221  00F496  0E25               	movlw	37
  2222  00F498  1818               	xorwf	printf@c,w,c
  2223  00F49A  B4D8               	btfsc	status,2,c
  2224  00F49C  D004               	goto	l249
  2225                           
  2226                           ;doprnt.c: 540: {
  2227                           ;doprnt.c: 541: (putch(c) );
  2228  00F49E  5018               	movf	printf@c,w,c
  2229  00F4A0  ECDF  F078         	call	_putch
  2230                           
  2231                           ;doprnt.c: 542: continue;
  2232  00F4A4  D075               	goto	u1220
  2233  00F4A6                     l249:
  2234                           
  2235                           ;doprnt.c: 543: }
  2236                           ;doprnt.c: 548: flag = 0;
  2237  00F4A6  0E00               	movlw	0
  2238  00F4A8  6E14               	movwf	printf@flag,c
  2239                           
  2240                           ;doprnt.c: 822: }
  2241                           
  2242                           ;doprnt.c: 813: continue;
  2243                           
  2244                           ;doprnt.c: 802: default:
  2245                           
  2246                           ;doprnt.c: 698: case 'i':
  2247                           ;doprnt.c: 699: break;
  2248                           
  2249                           ;doprnt.c: 697: case 'd':
  2250                           
  2251                           ;doprnt.c: 638: goto alldone;
  2252                           
  2253                           ;doprnt.c: 637: case 0:
  2254                           
  2255                           ;doprnt.c: 635: switch(c = *f++) {
  2256  00F4AA  C00D  FFF6         	movff	printf@f,tblptrl
  2257  00F4AE  C00E  FFF7         	movff	printf@f+1,tblptrh
  2258  00F4B2  4A0D               	infsnz	printf@f,f,c
  2259  00F4B4  2A0E               	incf	printf@f+1,f,c
  2260  00F4B6                     	if	0	;tblptru may be non-zero
  2261  00F4B6                     	endif
  2262  00F4B6                     	if	0	;tblptru may be non-zero
  2263  00F4B6                     	endif
  2264  00F4B6  0008               	tblrd		*
  2265  00F4B8  CFF5 F018          	movff	tablat,printf@c
  2266  00F4BC  5018               	movf	printf@c,w,c
  2267                           
  2268                           ; Switch size 1, requested type "space"
  2269                           ; Number of cases is 3, Range of values is 0 to 105
  2270                           ; switch strategies available:
  2271                           ; Name         Instructions Cycles
  2272                           ; simple_byte           10     6 (average)
  2273                           ;	Chosen strategy is simple_byte
  2274  00F4BE  0A00               	xorlw	0	; case 0
  2275  00F4C0  B4D8               	btfsc	status,2,c
  2276  00F4C2  0012               	return	
  2277  00F4C4  0A64               	xorlw	100	; case 100
  2278  00F4C6  B4D8               	btfsc	status,2,c
  2279  00F4C8  D003               	goto	l255
  2280  00F4CA  0A0D               	xorlw	13	; case 105
  2281  00F4CC  A4D8               	btfss	status,2,c
  2282  00F4CE  D060               	goto	u1220
  2283  00F4D0                     l255:
  2284                           
  2285                           ;doprnt.c: 1253: {
  2286                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2287  00F4D0  C012  FFD9         	movff	printf@ap,fsr2l
  2288  00F4D4  C013  FFDA         	movff	printf@ap+1,fsr2h
  2289  00F4D8  CFDE F016          	movff	postinc2,printf@val
  2290  00F4DC  CFDD F017          	movff	postdec2,printf@val+1
  2291  00F4E0  0E02               	movlw	2
  2292  00F4E2  2612               	addwf	printf@ap,f,c
  2293  00F4E4  0E00               	movlw	0
  2294  00F4E6  2213               	addwfc	printf@ap+1,f,c
  2295                           
  2296                           ;doprnt.c: 1261: if((int)val < 0) {
  2297  00F4E8  AE17               	btfss	printf@val+1,7,c
  2298  00F4EA  D006               	goto	l257
  2299                           
  2300                           ;doprnt.c: 1262: flag |= 0x03;
  2301  00F4EC  0E03               	movlw	3
  2302  00F4EE  1214               	iorwf	printf@flag,f,c
  2303                           
  2304                           ;doprnt.c: 1263: val = -val;
  2305  00F4F0  6C16               	negf	printf@val,c
  2306  00F4F2  1E17               	comf	printf@val+1,f,c
  2307  00F4F4  B0D8               	btfsc	status,0,c
  2308  00F4F6  2A17               	incf	printf@val+1,f,c
  2309  00F4F8                     l257:
  2310                           
  2311                           ;doprnt.c: 1264: }
  2312                           ;doprnt.c: 1266: }
  2313                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2314  00F4F8  0E01               	movlw	1
  2315  00F4FA  6E18               	movwf	printf@c,c
  2316  00F4FC                     l1560:
  2317  00F4FC  0E05               	movlw	5
  2318  00F4FE  1818               	xorwf	printf@c,w,c
  2319  00F500  B4D8               	btfsc	status,2,c
  2320  00F502  D012               	goto	u1200
  2321                           
  2322                           ;doprnt.c: 1306: if(val < dpowers[c])
  2323  00F504  5018               	movf	printf@c,w,c
  2324  00F506  0D02               	mullw	2
  2325  00F508  0E76               	movlw	low _dpowers
  2326  00F50A  24F3               	addwf	prodl,w,c
  2327  00F50C  6EF6               	movwf	tblptrl,c
  2328  00F50E  0EFE               	movlw	high _dpowers
  2329  00F510  20F4               	addwfc	prodh,w,c
  2330  00F512  6EF7               	movwf	tblptrh,c
  2331  00F514                     	if	0	;There are less than 3 active tblptr bytes
  2332  00F514                     	endif
  2333  00F514  0009               	tblrd		*+
  2334  00F516  50F5               	movf	tablat,w,c
  2335  00F518  5C16               	subwf	printf@val,w,c
  2336  00F51A  0009               	tblrd		*+
  2337  00F51C  50F5               	movf	tablat,w,c
  2338  00F51E  5817               	subwfb	printf@val+1,w,c
  2339  00F520  A0D8               	btfss	status,0,c
  2340  00F522  D002               	goto	u1200
  2341                           
  2342                           ;doprnt.c: 1307: break;
  2343  00F524  2A18               	incf	printf@c,f,c
  2344  00F526  D7EA               	goto	l1560
  2345  00F528                     u1200:
  2346                           
  2347                           ;doprnt.c: 1422: {
  2348                           ;doprnt.c: 1438: if(flag & 0x03)
  2349  00F528  C014  F011         	movff	printf@flag,??_printf
  2350  00F52C  0E03               	movlw	3
  2351  00F52E  1611               	andwf	??_printf,f,c
  2352  00F530  B4D8               	btfsc	status,2,c
  2353  00F532  D003               	goto	l261
  2354                           
  2355                           ;doprnt.c: 1439: (putch('-') );
  2356  00F534  0E2D               	movlw	45
  2357  00F536  ECDF  F078         	call	_putch
  2358  00F53A                     l261:
  2359                           
  2360                           ;doprnt.c: 1469: }
  2361                           ;doprnt.c: 1472: prec = c;
  2362  00F53A  C018  F015         	movff	printf@c,printf@prec
  2363                           
  2364                           ;doprnt.c: 1474: while(prec--) {
  2365  00F53E  D024               	goto	l262
  2366  00F540                     
  2367                           ;doprnt.c: 1478: {
  2368                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2369  00F540  5015               	movf	printf@prec,w,c
  2370  00F542  0D02               	mullw	2
  2371  00F544  0E76               	movlw	low _dpowers
  2372  00F546  24F3               	addwf	prodl,w,c
  2373  00F548  6EF6               	movwf	tblptrl,c
  2374  00F54A  0EFE               	movlw	high _dpowers
  2375  00F54C  20F4               	addwfc	prodh,w,c
  2376  00F54E  6EF7               	movwf	tblptrh,c
  2377  00F550                     	if	0	;There are less than 3 active tblptr bytes
  2378  00F550                     	endif
  2379  00F550  0009               	tblrd		*+
  2380  00F552  CFF5 F003          	movff	tablat,___lwdiv@divisor
  2381  00F556  000A               	tblrd		*-
  2382  00F558  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  2383  00F55C  C016  F001         	movff	printf@val,___lwdiv@dividend
  2384  00F560  C017  F002         	movff	printf@val+1,___lwdiv@dividend+1
  2385  00F564  ECDE  F079         	call	___lwdiv	;wreg free
  2386  00F568  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  2387  00F56C  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  2388  00F570  0E00               	movlw	0
  2389  00F572  6E0B               	movwf	___lwmod@divisor+1,c
  2390  00F574  0E0A               	movlw	10
  2391  00F576  6E0A               	movwf	___lwmod@divisor,c
  2392  00F578  EC97  F079         	call	___lwmod	;wreg free
  2393  00F57C  5008               	movf	?___lwmod,w,c
  2394  00F57E  0F30               	addlw	48
  2395  00F580  6E18               	movwf	printf@c,c
  2396                           
  2397                           ;doprnt.c: 1523: }
  2398                           ;doprnt.c: 1524: (putch(c) );
  2399  00F582  5018               	movf	printf@c,w,c
  2400  00F584  ECDF  F078         	call	_putch
  2401  00F588                     l262:
  2402  00F588  0615               	decf	printf@prec,f,c
  2403  00F58A  2815               	incf	printf@prec,w,c
  2404  00F58C  A4D8               	btfss	status,2,c
  2405  00F58E  D7D8               	goto	l263
  2406  00F590                     u1220:
  2407  00F590  C00D  FFF6         	movff	printf@f,tblptrl
  2408  00F594  C00E  FFF7         	movff	printf@f+1,tblptrh
  2409  00F598  4A0D               	infsnz	printf@f,f,c
  2410  00F59A  2A0E               	incf	printf@f+1,f,c
  2411  00F59C                     	if	0	;tblptru may be non-zero
  2412  00F59C                     	endif
  2413  00F59C                     	if	0	;tblptru may be non-zero
  2414  00F59C                     	endif
  2415  00F59C  0008               	tblrd		*
  2416  00F59E  CFF5 F018          	movff	tablat,printf@c
  2417  00F5A2  5018               	movf	printf@c,w,c
  2418  00F5A4  B4D8               	btfsc	status,2,c
  2419  00F5A6  0012               	return	
  2420  00F5A8  D776               	goto	l248
  2421  00F5AA                     __end_of_printf:
  2422                           	opt stack 0
  2423                           tblptru	equ	0xFF8
  2424                           tblptrh	equ	0xFF7
  2425                           tblptrl	equ	0xFF6
  2426                           tablat	equ	0xFF5
  2427                           prodh	equ	0xFF4
  2428                           prodl	equ	0xFF3
  2429                           postinc0	equ	0xFEE
  2430                           wreg	equ	0xFE8
  2431                           indf2	equ	0xFDF
  2432                           postinc2	equ	0xFDE
  2433                           postdec2	equ	0xFDD
  2434                           fsr2h	equ	0xFDA
  2435                           fsr2l	equ	0xFD9
  2436                           status	equ	0xFD8
  2437                           
  2438 ;; *************** function ___lwmod *****************
  2439 ;; Defined at:
  2440 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  2441 ;; Parameters:    Size  Location     Type
  2442 ;;  dividend        2    7[COMRAM] unsigned int 
  2443 ;;  divisor         2    9[COMRAM] unsigned int 
  2444 ;; Auto vars:     Size  Location     Type
  2445 ;;  counter         1   11[COMRAM] unsigned char 
  2446 ;; Return value:  Size  Location     Type
  2447 ;;                  2    7[COMRAM] unsigned int 
  2448 ;; Registers used:
  2449 ;;		wreg, status,2, status,0
  2450 ;; Tracked objects:
  2451 ;;		On entry : 0/0
  2452 ;;		On exit  : 0/0
  2453 ;;		Unchanged: 0/0
  2454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2455 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2456 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2458 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2459 ;;Total ram usage:        5 bytes
  2460 ;; Hardware stack levels used:    1
  2461 ;; This function calls:
  2462 ;;		Nothing
  2463 ;; This function is called by:
  2464 ;;		_printf
  2465 ;; This function uses a non-reentrant model
  2466 ;;
  2467                           
  2468                           	psect	text4
  2469  00F32E                     __ptext4:
  2470                           	opt stack 0
  2471  00F32E                     ___lwmod:
  2472                           	opt stack 28
  2473                           
  2474                           ;incstack = 0
  2475  00F32E  500A               	movf	___lwmod@divisor,w,c
  2476  00F330  100B               	iorwf	___lwmod@divisor+1,w,c
  2477  00F332  B4D8               	btfsc	status,2,c
  2478  00F334  D018               	goto	l685
  2479  00F336  0E01               	movlw	1
  2480  00F338  6E0C               	movwf	___lwmod@counter,c
  2481  00F33A  D004               	goto	l680
  2482  00F33C  90D8               	bcf	status,0,c
  2483  00F33E  360A               	rlcf	___lwmod@divisor,f,c
  2484  00F340  360B               	rlcf	___lwmod@divisor+1,f,c
  2485  00F342  2A0C               	incf	___lwmod@counter,f,c
  2486  00F344                     l680:
  2487  00F344  AE0B               	btfss	___lwmod@divisor+1,7,c
  2488  00F346  D7FA               	goto	l681
  2489  00F348                     u1110:
  2490  00F348  500A               	movf	___lwmod@divisor,w,c
  2491  00F34A  5C08               	subwf	___lwmod@dividend,w,c
  2492  00F34C  500B               	movf	___lwmod@divisor+1,w,c
  2493  00F34E  5809               	subwfb	___lwmod@dividend+1,w,c
  2494  00F350  A0D8               	btfss	status,0,c
  2495  00F352  D004               	goto	l684
  2496  00F354  500A               	movf	___lwmod@divisor,w,c
  2497  00F356  5E08               	subwf	___lwmod@dividend,f,c
  2498  00F358  500B               	movf	___lwmod@divisor+1,w,c
  2499  00F35A  5A09               	subwfb	___lwmod@dividend+1,f,c
  2500  00F35C                     l684:
  2501  00F35C  90D8               	bcf	status,0,c
  2502  00F35E  320B               	rrcf	___lwmod@divisor+1,f,c
  2503  00F360  320A               	rrcf	___lwmod@divisor,f,c
  2504  00F362  2E0C               	decfsz	___lwmod@counter,f,c
  2505  00F364  D7F1               	goto	u1110
  2506  00F366                     l685:
  2507  00F366  C008  F008         	movff	___lwmod@dividend,?___lwmod
  2508  00F36A  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  2509  00F36E  0012               	return		;funcret
  2510  00F370                     __end_of___lwmod:
  2511                           	opt stack 0
  2512                           tblptru	equ	0xFF8
  2513                           tblptrh	equ	0xFF7
  2514                           tblptrl	equ	0xFF6
  2515                           tablat	equ	0xFF5
  2516                           prodh	equ	0xFF4
  2517                           prodl	equ	0xFF3
  2518                           postinc0	equ	0xFEE
  2519                           wreg	equ	0xFE8
  2520                           indf2	equ	0xFDF
  2521                           postinc2	equ	0xFDE
  2522                           postdec2	equ	0xFDD
  2523                           fsr2h	equ	0xFDA
  2524                           fsr2l	equ	0xFD9
  2525                           status	equ	0xFD8
  2526                           
  2527 ;; *************** function ___lwdiv *****************
  2528 ;; Defined at:
  2529 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  2530 ;; Parameters:    Size  Location     Type
  2531 ;;  dividend        2    0[COMRAM] unsigned int 
  2532 ;;  divisor         2    2[COMRAM] unsigned int 
  2533 ;; Auto vars:     Size  Location     Type
  2534 ;;  quotient        2    4[COMRAM] unsigned int 
  2535 ;;  counter         1    6[COMRAM] unsigned char 
  2536 ;; Return value:  Size  Location     Type
  2537 ;;                  2    0[COMRAM] unsigned int 
  2538 ;; Registers used:
  2539 ;;		wreg, status,2, status,0
  2540 ;; Tracked objects:
  2541 ;;		On entry : 0/0
  2542 ;;		On exit  : 0/0
  2543 ;;		Unchanged: 0/0
  2544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2545 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2546 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2548 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2549 ;;Total ram usage:        7 bytes
  2550 ;; Hardware stack levels used:    1
  2551 ;; This function calls:
  2552 ;;		Nothing
  2553 ;; This function is called by:
  2554 ;;		_printf
  2555 ;; This function uses a non-reentrant model
  2556 ;;
  2557                           
  2558                           	psect	text5
  2559  00F3BC                     __ptext5:
  2560                           	opt stack 0
  2561  00F3BC                     ___lwdiv:
  2562                           	opt stack 28
  2563                           
  2564                           ;incstack = 0
  2565  00F3BC  0E00               	movlw	0
  2566  00F3BE  6E06               	movwf	___lwdiv@quotient+1,c
  2567  00F3C0  0E00               	movlw	0
  2568  00F3C2  6E05               	movwf	___lwdiv@quotient,c
  2569  00F3C4  5003               	movf	___lwdiv@divisor,w,c
  2570  00F3C6  1004               	iorwf	___lwdiv@divisor+1,w,c
  2571  00F3C8  B4D8               	btfsc	status,2,c
  2572  00F3CA  D01C               	goto	l675
  2573  00F3CC  0E01               	movlw	1
  2574  00F3CE  6E07               	movwf	___lwdiv@counter,c
  2575  00F3D0  D004               	goto	l670
  2576  00F3D2  90D8               	bcf	status,0,c
  2577  00F3D4  3603               	rlcf	___lwdiv@divisor,f,c
  2578  00F3D6  3604               	rlcf	___lwdiv@divisor+1,f,c
  2579  00F3D8  2A07               	incf	___lwdiv@counter,f,c
  2580  00F3DA                     l670:
  2581  00F3DA  AE04               	btfss	___lwdiv@divisor+1,7,c
  2582  00F3DC  D7FA               	goto	l671
  2583  00F3DE                     u1080:
  2584  00F3DE  90D8               	bcf	status,0,c
  2585  00F3E0  3605               	rlcf	___lwdiv@quotient,f,c
  2586  00F3E2  3606               	rlcf	___lwdiv@quotient+1,f,c
  2587  00F3E4  5003               	movf	___lwdiv@divisor,w,c
  2588  00F3E6  5C01               	subwf	___lwdiv@dividend,w,c
  2589  00F3E8  5004               	movf	___lwdiv@divisor+1,w,c
  2590  00F3EA  5802               	subwfb	___lwdiv@dividend+1,w,c
  2591  00F3EC  A0D8               	btfss	status,0,c
  2592  00F3EE  D005               	goto	l674
  2593  00F3F0  5003               	movf	___lwdiv@divisor,w,c
  2594  00F3F2  5E01               	subwf	___lwdiv@dividend,f,c
  2595  00F3F4  5004               	movf	___lwdiv@divisor+1,w,c
  2596  00F3F6  5A02               	subwfb	___lwdiv@dividend+1,f,c
  2597  00F3F8  8005               	bsf	___lwdiv@quotient,0,c
  2598  00F3FA                     l674:
  2599  00F3FA  90D8               	bcf	status,0,c
  2600  00F3FC  3204               	rrcf	___lwdiv@divisor+1,f,c
  2601  00F3FE  3203               	rrcf	___lwdiv@divisor,f,c
  2602  00F400  2E07               	decfsz	___lwdiv@counter,f,c
  2603  00F402  D7ED               	goto	u1080
  2604  00F404                     l675:
  2605  00F404  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  2606  00F408  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2607  00F40C  0012               	return		;funcret
  2608  00F40E                     __end_of___lwdiv:
  2609                           	opt stack 0
  2610                           tblptru	equ	0xFF8
  2611                           tblptrh	equ	0xFF7
  2612                           tblptrl	equ	0xFF6
  2613                           tablat	equ	0xFF5
  2614                           prodh	equ	0xFF4
  2615                           prodl	equ	0xFF3
  2616                           postinc0	equ	0xFEE
  2617                           wreg	equ	0xFE8
  2618                           indf2	equ	0xFDF
  2619                           postinc2	equ	0xFDE
  2620                           postdec2	equ	0xFDD
  2621                           fsr2h	equ	0xFDA
  2622                           fsr2l	equ	0xFD9
  2623                           status	equ	0xFD8
  2624                           
  2625 ;; *************** function _printErrorLCD *****************
  2626 ;; Defined at:
  2627 ;;		line 60 in file "lcd_extras.c"
  2628 ;; Parameters:    Size  Location     Type
  2629 ;;  string          2   21[COMRAM] PTR unsigned char 
  2630 ;;		 -> errMsgs.badEntry(32), errMsgs(224), 
  2631 ;; Auto vars:     Size  Location     Type
  2632 ;;		None
  2633 ;; Return value:  Size  Location     Type
  2634 ;;                  1    wreg      void 
  2635 ;; Registers used:
  2636 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2637 ;; Tracked objects:
  2638 ;;		On entry : 0/0
  2639 ;;		On exit  : 0/0
  2640 ;;		Unchanged: 0/0
  2641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2642 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2644 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2645 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2646 ;;Total ram usage:        4 bytes
  2647 ;; Hardware stack levels used:    1
  2648 ;; Hardware stack levels required when called:    3
  2649 ;; This function calls:
  2650 ;;		_printStringLCD
  2651 ;; This function is called by:
  2652 ;;		_inputEntry
  2653 ;; This function uses a non-reentrant model
  2654 ;;
  2655                           
  2656                           	psect	text6
  2657  00F214                     __ptext6:
  2658                           	opt stack 0
  2659  00F214                     _printErrorLCD:
  2660                           	opt stack 26
  2661                           
  2662                           ;lcd_extras.c: 61: printStringLCD(string);
  2663                           
  2664                           ;incstack = 0
  2665  00F214  C016  F007         	movff	printErrorLCD@string,printStringLCD@string
  2666  00F218  C017  F008         	movff	printErrorLCD@string+1,printStringLCD@string+1
  2667  00F21C  ECD5  F07A         	call	_printStringLCD	;wreg free
  2668                           
  2669                           ;lcd_extras.c: 62: _delay((unsigned long)((2000)*(40000000/4000.0)));
  2670  00F220  0E66               	movlw	102
  2671  00F222  6E19               	movwf	(??_printErrorLCD+1)& (0+255),c
  2672  00F224  0E76               	movlw	118
  2673  00F226  6E18               	movwf	??_printErrorLCD& (0+255),c
  2674  00F228  0EC1               	movlw	193
  2675  00F22A                     u1667:
  2676  00F22A  2EE8               	decfsz	wreg,f,c
  2677  00F22C  D7FE               	bra	u1667
  2678  00F22E  2E18               	decfsz	??_printErrorLCD& (0+255),f,c
  2679  00F230  D7FC               	bra	u1667
  2680  00F232  2E19               	decfsz	(??_printErrorLCD+1)& (0+255),f,c
  2681  00F234  D7FA               	bra	u1667
  2682  00F236  F000               	nop	
  2683  00F238  0012               	return		;funcret
  2684  00F23A                     __end_of_printErrorLCD:
  2685                           	opt stack 0
  2686                           tblptru	equ	0xFF8
  2687                           tblptrh	equ	0xFF7
  2688                           tblptrl	equ	0xFF6
  2689                           tablat	equ	0xFF5
  2690                           prodh	equ	0xFF4
  2691                           prodl	equ	0xFF3
  2692                           postinc0	equ	0xFEE
  2693                           wreg	equ	0xFE8
  2694                           indf2	equ	0xFDF
  2695                           postinc2	equ	0xFDE
  2696                           postdec2	equ	0xFDD
  2697                           fsr2h	equ	0xFDA
  2698                           fsr2l	equ	0xFD9
  2699                           status	equ	0xFD8
  2700                           
  2701 ;; *************** function _printStringLCD *****************
  2702 ;; Defined at:
  2703 ;;		line 4 in file "lcd_extras.c"
  2704 ;; Parameters:    Size  Location     Type
  2705 ;;  string          2    6[COMRAM] PTR unsigned char 
  2706 ;;		 -> inputEntry@fastenerString(32), inputEntryQuestions(132), errMsgs.badEntry(32), errMsgs(224), 
  2707 ;; Auto vars:     Size  Location     Type
  2708 ;;  i               2   19[COMRAM] int 
  2709 ;;  newlineCharI    2   17[COMRAM] int 
  2710 ;;  newlineIndex    2   15[COMRAM] int 
  2711 ;;  spaceIndex      2   13[COMRAM] int 
  2712 ;;  j               2   11[COMRAM] int 
  2713 ;; Return value:  Size  Location     Type
  2714 ;;                  2    6[COMRAM] int 
  2715 ;; Registers used:
  2716 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2717 ;; Tracked objects:
  2718 ;;		On entry : 0/0
  2719 ;;		On exit  : 0/0
  2720 ;;		Unchanged: 0/0
  2721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2722 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2723 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2724 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2725 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2726 ;;Total ram usage:       15 bytes
  2727 ;; Hardware stack levels used:    1
  2728 ;; Hardware stack levels required when called:    2
  2729 ;; This function calls:
  2730 ;;		_lcdInst
  2731 ;;		_putch
  2732 ;; This function is called by:
  2733 ;;		_inputEntry
  2734 ;;		_printErrorLCD
  2735 ;; This function uses a non-reentrant model
  2736 ;;
  2737                           
  2738                           	psect	text7
  2739  00F5AA                     __ptext7:
  2740                           	opt stack 0
  2741  00F5AA                     _printStringLCD:
  2742                           	opt stack 27
  2743                           
  2744                           ;lcd_extras.c: 10: int i;
  2745                           ;lcd_extras.c: 11: int j = 1;
  2746                           
  2747                           ;incstack = 0
  2748  00F5AA  0E00               	movlw	0
  2749  00F5AC  6E0D               	movwf	printStringLCD@j+1,c
  2750  00F5AE  0E01               	movlw	1
  2751  00F5B0  6E0C               	movwf	printStringLCD@j,c
  2752                           
  2753                           ;lcd_extras.c: 12: int newlineIndex = 16;
  2754  00F5B2  0E00               	movlw	0
  2755  00F5B4  6E11               	movwf	printStringLCD@newlineIndex+1,c
  2756  00F5B6  0E10               	movlw	16
  2757  00F5B8  6E10               	movwf	printStringLCD@newlineIndex,c
  2758                           
  2759                           ;lcd_extras.c: 13: int newlineCharIndex = -1;
  2760  00F5BA  6812               	setf	printStringLCD@newlineCharIndex,c
  2761  00F5BC  6813               	setf	printStringLCD@newlineCharIndex+1,c
  2762                           
  2763                           ;lcd_extras.c: 14: int spaceIndex = 0;
  2764  00F5BE  0E00               	movlw	0
  2765  00F5C0  6E0F               	movwf	printStringLCD@spaceIndex+1,c
  2766  00F5C2  0E00               	movlw	0
  2767  00F5C4  6E0E               	movwf	printStringLCD@spaceIndex,c
  2768                           
  2769                           ;lcd_extras.c: 16: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  2770  00F5C6  0E01               	movlw	1
  2771  00F5C8  ECD5  F078         	call	_lcdInst
  2772  00F5CC  0EC3               	movlw	195
  2773  00F5CE  6E09               	movwf	??_printStringLCD& (0+255),c
  2774  00F5D0  0ECD               	movlw	205
  2775  00F5D2                     u1677:
  2776  00F5D2  2EE8               	decfsz	wreg,f,c
  2777  00F5D4  D7FE               	bra	u1677
  2778  00F5D6  2E09               	decfsz	??_printStringLCD& (0+255),f,c
  2779  00F5D8  D7FC               	bra	u1677
  2780  00F5DA  F000               	nop	
  2781                           
  2782                           ;lcd_extras.c: 17: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2783  00F5DC  0E80               	movlw	128
  2784  00F5DE  ECD5  F078         	call	_lcdInst
  2785  00F5E2  0E41               	movlw	65
  2786  00F5E4  6E09               	movwf	??_printStringLCD& (0+255),c
  2787  00F5E6  0EEE               	movlw	238
  2788  00F5E8                     u1687:
  2789  00F5E8  2EE8               	decfsz	wreg,f,c
  2790  00F5EA  D7FE               	bra	u1687
  2791  00F5EC  2E09               	decfsz	??_printStringLCD& (0+255),f,c
  2792  00F5EE  D7FC               	bra	u1687
  2793  00F5F0  D000               	nop2	
  2794                           
  2795                           ;lcd_extras.c: 20: for (i = 0; i < 17; i++) {
  2796  00F5F2  0E00               	movlw	0
  2797  00F5F4  6E15               	movwf	printStringLCD@i+1,c
  2798  00F5F6  0E00               	movlw	0
  2799  00F5F8  6E14               	movwf	printStringLCD@i,c
  2800  00F5FA  BE15               	btfsc	printStringLCD@i+1,7,c
  2801  00F5FC  D008               	goto	l210
  2802  00F5FE  5015               	movf	printStringLCD@i+1,w,c
  2803  00F600  E105               	bnz	u820
  2804  00F602  0E11               	movlw	17
  2805  00F604  5C14               	subwf	printStringLCD@i,w,c
  2806  00F606  B0D8               	btfsc	status,0,c
  2807  00F608  D087               	goto	u930
  2808  00F60A  D001               	goto	l210
  2809  00F60C                     u820:
  2810  00F60C  D085               	goto	u930
  2811  00F60E                     l210:
  2812                           
  2813                           ;lcd_extras.c: 21: if (string[i] == 0) break;
  2814  00F60E  5014               	movf	printStringLCD@i,w,c
  2815  00F610  2407               	addwf	printStringLCD@string,w,c
  2816  00F612  6E09               	movwf	??_printStringLCD& (0+255),c
  2817  00F614  5015               	movf	printStringLCD@i+1,w,c
  2818  00F616  2008               	addwfc	printStringLCD@string+1,w,c
  2819  00F618  6E0A               	movwf	(??_printStringLCD+1)& (0+255),c
  2820  00F61A  C009  FFF6         	movff	??_printStringLCD,tblptrl
  2821  00F61E  C00A  FFF7         	movff	??_printStringLCD+1,tblptrh
  2822  00F622  0E00               	movlw	low (__mediumconst shr (0+16))
  2823  00F624  6EF8               	movwf	tblptru,c
  2824  00F626  0E0F               	movlw	(high __ramtop+-1)
  2825  00F628  64F7               	cpfsgt	tblptrh,c
  2826  00F62A  D003               	bra	u837
  2827  00F62C  0008               	tblrd		*
  2828  00F62E  50F5               	movf	tablat,w,c
  2829  00F630  D005               	bra	u830
  2830  00F632                     u837:
  2831  00F632  CFF6 FFE9          	movff	tblptrl,fsr0l
  2832  00F636  CFF7 FFEA          	movff	tblptrh,fsr0h
  2833  00F63A  50EF               	movf	indf0,w,c
  2834  00F63C                     u830:
  2835  00F63C  0900               	iorlw	0
  2836  00F63E  B4D8               	btfsc	status,2,c
  2837  00F640  D06B               	goto	u930
  2838                           
  2839                           ;lcd_extras.c: 22: if (string[i] == 32) {
  2840  00F642  5014               	movf	printStringLCD@i,w,c
  2841  00F644  2407               	addwf	printStringLCD@string,w,c
  2842  00F646  6E09               	movwf	??_printStringLCD& (0+255),c
  2843  00F648  5015               	movf	printStringLCD@i+1,w,c
  2844  00F64A  2008               	addwfc	printStringLCD@string+1,w,c
  2845  00F64C  6E0A               	movwf	(??_printStringLCD+1)& (0+255),c
  2846  00F64E  C009  FFF6         	movff	??_printStringLCD,tblptrl
  2847  00F652  C00A  FFF7         	movff	??_printStringLCD+1,tblptrh
  2848  00F656  0E00               	movlw	low (__mediumconst shr (0+16))
  2849  00F658  6EF8               	movwf	tblptru,c
  2850  00F65A  0E0F               	movlw	(high __ramtop+-1)
  2851  00F65C  64F7               	cpfsgt	tblptrh,c
  2852  00F65E  D003               	bra	u857
  2853  00F660  0008               	tblrd		*
  2854  00F662  50F5               	movf	tablat,w,c
  2855  00F664  D005               	bra	u850
  2856  00F666                     u857:
  2857  00F666  CFF6 FFE9          	movff	tblptrl,fsr0l
  2858  00F66A  CFF7 FFEA          	movff	tblptrh,fsr0h
  2859  00F66E  50EF               	movf	indf0,w,c
  2860  00F670                     u850:
  2861  00F670  0A20               	xorlw	32
  2862  00F672  A4D8               	btfss	status,2,c
  2863  00F674  D004               	goto	l213
  2864                           
  2865                           ;lcd_extras.c: 23: spaceIndex = i;
  2866  00F676  C014  F00E         	movff	printStringLCD@i,printStringLCD@spaceIndex
  2867  00F67A  C015  F00F         	movff	printStringLCD@i+1,printStringLCD@spaceIndex+1
  2868  00F67E                     l213:
  2869                           
  2870                           ;lcd_extras.c: 24: }
  2871                           ;lcd_extras.c: 26: if (string[i] == 10) {
  2872  00F67E  5014               	movf	printStringLCD@i,w,c
  2873  00F680  2407               	addwf	printStringLCD@string,w,c
  2874  00F682  6E09               	movwf	??_printStringLCD& (0+255),c
  2875  00F684  5015               	movf	printStringLCD@i+1,w,c
  2876  00F686  2008               	addwfc	printStringLCD@string+1,w,c
  2877  00F688  6E0A               	movwf	(??_printStringLCD+1)& (0+255),c
  2878  00F68A  C009  FFF6         	movff	??_printStringLCD,tblptrl
  2879  00F68E  C00A  FFF7         	movff	??_printStringLCD+1,tblptrh
  2880  00F692  0E00               	movlw	low (__mediumconst shr (0+16))
  2881  00F694  6EF8               	movwf	tblptru,c
  2882  00F696  0E0F               	movlw	(high __ramtop+-1)
  2883  00F698  64F7               	cpfsgt	tblptrh,c
  2884  00F69A  D003               	bra	u877
  2885  00F69C  0008               	tblrd		*
  2886  00F69E  50F5               	movf	tablat,w,c
  2887  00F6A0  D005               	bra	u870
  2888  00F6A2                     u877:
  2889  00F6A2  CFF6 FFE9          	movff	tblptrl,fsr0l
  2890  00F6A6  CFF7 FFEA          	movff	tblptrh,fsr0h
  2891  00F6AA  50EF               	movf	indf0,w,c
  2892  00F6AC                     u870:
  2893  00F6AC  0A0A               	xorlw	10
  2894  00F6AE  A4D8               	btfss	status,2,c
  2895  00F6B0  D008               	goto	l214
  2896                           
  2897                           ;lcd_extras.c: 27: newlineCharIndex = i;
  2898  00F6B2  C014  F012         	movff	printStringLCD@i,printStringLCD@newlineCharIndex
  2899  00F6B6  C015  F013         	movff	printStringLCD@i+1,printStringLCD@newlineCharIndex+1
  2900                           
  2901                           ;lcd_extras.c: 28: newlineIndex = newlineCharIndex;
  2902  00F6BA  C012  F010         	movff	printStringLCD@newlineCharIndex,printStringLCD@newlineIndex
  2903  00F6BE  C013  F011         	movff	printStringLCD@newlineCharIndex+1,printStringLCD@newlineIndex+1
  2904  00F6C2                     l214:
  2905                           
  2906                           ;lcd_extras.c: 29: }
  2907                           ;lcd_extras.c: 32: if (i == 16 && string[i] != 32 && newlineCharIndex < 0) {
  2908  00F6C2  0E10               	movlw	16
  2909  00F6C4  1814               	xorwf	printStringLCD@i,w,c
  2910  00F6C6  1015               	iorwf	printStringLCD@i+1,w,c
  2911  00F6C8  A4D8               	btfss	status,2,c
  2912  00F6CA  D01F               	goto	l215
  2913  00F6CC  5014               	movf	printStringLCD@i,w,c
  2914  00F6CE  2407               	addwf	printStringLCD@string,w,c
  2915  00F6D0  6E09               	movwf	??_printStringLCD& (0+255),c
  2916  00F6D2  5015               	movf	printStringLCD@i+1,w,c
  2917  00F6D4  2008               	addwfc	printStringLCD@string+1,w,c
  2918  00F6D6  6E0A               	movwf	(??_printStringLCD+1)& (0+255),c
  2919  00F6D8  C009  FFF6         	movff	??_printStringLCD,tblptrl
  2920  00F6DC  C00A  FFF7         	movff	??_printStringLCD+1,tblptrh
  2921  00F6E0  0E00               	movlw	low (__mediumconst shr (0+16))
  2922  00F6E2  6EF8               	movwf	tblptru,c
  2923  00F6E4  0E0F               	movlw	(high __ramtop+-1)
  2924  00F6E6  64F7               	cpfsgt	tblptrh,c
  2925  00F6E8  D003               	bra	u907
  2926  00F6EA  0008               	tblrd		*
  2927  00F6EC  50F5               	movf	tablat,w,c
  2928  00F6EE  D005               	bra	u900
  2929  00F6F0                     u907:
  2930  00F6F0  CFF6 FFE9          	movff	tblptrl,fsr0l
  2931  00F6F4  CFF7 FFEA          	movff	tblptrh,fsr0h
  2932  00F6F8  50EF               	movf	indf0,w,c
  2933  00F6FA                     u900:
  2934  00F6FA  0A20               	xorlw	32
  2935  00F6FC  A4D8               	btfss	status,2,c
  2936  00F6FE  AE13               	btfss	printStringLCD@newlineCharIndex+1,7,c
  2937  00F700  D004               	goto	l215
  2938                           
  2939                           ;lcd_extras.c: 33: newlineIndex = spaceIndex;
  2940  00F702  C00E  F010         	movff	printStringLCD@spaceIndex,printStringLCD@newlineIndex
  2941  00F706  C00F  F011         	movff	printStringLCD@spaceIndex+1,printStringLCD@newlineIndex+1
  2942  00F70A                     l215:
  2943  00F70A  4A14               	infsnz	printStringLCD@i,f,c
  2944  00F70C  2A15               	incf	printStringLCD@i+1,f,c
  2945  00F70E  BE15               	btfsc	printStringLCD@i+1,7,c
  2946  00F710  D77E               	goto	l210
  2947  00F712  5015               	movf	printStringLCD@i+1,w,c
  2948  00F714  E101               	bnz	l1432
  2949  00F716  D775               	goto	L5
  2950  00F718                     u930:
  2951  00F718                     l1432:
  2952                           
  2953                           ;lcd_extras.c: 34: }
  2954                           ;lcd_extras.c: 35: }
  2955                           ;lcd_extras.c: 38: for (i = 0; i < 32; i++) {
  2956  00F718  0E00               	movlw	0
  2957  00F71A  6E15               	movwf	printStringLCD@i+1,c
  2958  00F71C  0E00               	movlw	0
  2959  00F71E  6E14               	movwf	printStringLCD@i,c
  2960  00F720  BE15               	btfsc	printStringLCD@i+1,7,c
  2961  00F722  D008               	goto	l216
  2962  00F724  5015               	movf	printStringLCD@i+1,w,c
  2963  00F726  E105               	bnz	u940
  2964  00F728  0E20               	movlw	32
  2965  00F72A  5C14               	subwf	printStringLCD@i,w,c
  2966  00F72C  B0D8               	btfsc	status,0,c
  2967  00F72E  0012               	return	
  2968  00F730  D001               	goto	l216
  2969  00F732                     u940:
  2970  00F732  0012               	return	
  2971  00F734                     l216:
  2972                           
  2973                           ;lcd_extras.c: 39: if (string[i] == 0) break;
  2974  00F734  5014               	movf	printStringLCD@i,w,c
  2975  00F736  2407               	addwf	printStringLCD@string,w,c
  2976  00F738  6E09               	movwf	??_printStringLCD& (0+255),c
  2977  00F73A  5015               	movf	printStringLCD@i+1,w,c
  2978  00F73C  2008               	addwfc	printStringLCD@string+1,w,c
  2979  00F73E  6E0A               	movwf	(??_printStringLCD+1)& (0+255),c
  2980  00F740  C009  FFF6         	movff	??_printStringLCD,tblptrl
  2981  00F744  C00A  FFF7         	movff	??_printStringLCD+1,tblptrh
  2982  00F748  0E00               	movlw	low (__mediumconst shr (0+16))
  2983  00F74A  6EF8               	movwf	tblptru,c
  2984  00F74C  0E0F               	movlw	(high __ramtop+-1)
  2985  00F74E  64F7               	cpfsgt	tblptrh,c
  2986  00F750  D003               	bra	u957
  2987  00F752  0008               	tblrd		*
  2988  00F754  50F5               	movf	tablat,w,c
  2989  00F756  D005               	bra	u950
  2990  00F758                     u957:
  2991  00F758  CFF6 FFE9          	movff	tblptrl,fsr0l
  2992  00F75C  CFF7 FFEA          	movff	tblptrh,fsr0h
  2993  00F760  50EF               	movf	indf0,w,c
  2994  00F762                     u950:
  2995  00F762  0900               	iorlw	0
  2996  00F764  B4D8               	btfsc	status,2,c
  2997  00F766  0012               	return	
  2998                           
  2999                           ;lcd_extras.c: 50: if (i == newlineIndex && j < LCD_SIZE_VERT) {
  3000  00F768  5010               	movf	printStringLCD@newlineIndex,w,c
  3001  00F76A  1814               	xorwf	printStringLCD@i,w,c
  3002  00F76C  E14F               	bnz	l1454
  3003  00F76E  5011               	movf	printStringLCD@newlineIndex+1,w,c
  3004  00F770  1815               	xorwf	printStringLCD@i+1,w,c
  3005  00F772  A4D8               	btfss	status,2,c
  3006  00F774  D04B               	goto	l220
  3007  00F776  0E87               	movlw	low _LCD_SIZE_VERT
  3008  00F778  6EF6               	movwf	tblptrl,c
  3009  00F77A                     	if	1	;There is more than 1 active tblptr byte
  3010  00F77A  0EFE               	movlw	high _LCD_SIZE_VERT
  3011  00F77C  6EF7               	movwf	tblptrh,c
  3012  00F77E                     	endif
  3013  00F77E                     	if	0	;There are less than 3 active tblptr bytes
  3014  00F77E                     	endif
  3015  00F77E  0008               	tblrd		*
  3016  00F780  50F5               	movf	tablat,w,c
  3017  00F782  6E09               	movwf	??_printStringLCD& (0+255),c
  3018  00F784  6A0A               	clrf	(??_printStringLCD+1)& (0+255),c
  3019  00F786  5009               	movf	??_printStringLCD,w,c
  3020  00F788  5C0C               	subwf	printStringLCD@j,w,c
  3021  00F78A  500D               	movf	printStringLCD@j+1,w,c
  3022  00F78C  0A80               	xorlw	128
  3023  00F78E  6E0B               	movwf	(??_printStringLCD+2)& (0+255),c
  3024  00F790  500A               	movf	??_printStringLCD+1,w,c
  3025  00F792  0A80               	xorlw	128
  3026  00F794  580B               	subwfb	(??_printStringLCD+2)& (0+255),w,c
  3027  00F796  B0D8               	btfsc	status,0,c
  3028  00F798  D039               	goto	l220
  3029                           
  3030                           ;lcd_extras.c: 51: j++;
  3031  00F79A  4A0C               	infsnz	printStringLCD@j,f,c
  3032  00F79C  2A0D               	incf	printStringLCD@j+1,f,c
  3033                           
  3034                           ;lcd_extras.c: 52: lcdInst(0xC0);;
  3035  00F79E  0EC0               	movlw	192
  3036  00F7A0  ECD5  F078         	call	_lcdInst
  3037                           
  3038                           ;lcd_extras.c: 53: if (string[i] == 32 || string[i] == 10) continue;
  3039  00F7A4  5014               	movf	printStringLCD@i,w,c
  3040  00F7A6  2407               	addwf	printStringLCD@string,w,c
  3041  00F7A8  6E09               	movwf	??_printStringLCD& (0+255),c
  3042  00F7AA  5015               	movf	printStringLCD@i+1,w,c
  3043  00F7AC  2008               	addwfc	printStringLCD@string+1,w,c
  3044  00F7AE  6E0A               	movwf	(??_printStringLCD+1)& (0+255),c
  3045  00F7B0  C009  FFF6         	movff	??_printStringLCD,tblptrl
  3046  00F7B4  C00A  FFF7         	movff	??_printStringLCD+1,tblptrh
  3047  00F7B8  0E00               	movlw	low (__mediumconst shr (0+16))
  3048  00F7BA  6EF8               	movwf	tblptru,c
  3049  00F7BC  0E0F               	movlw	(high __ramtop+-1)
  3050  00F7BE  64F7               	cpfsgt	tblptrh,c
  3051  00F7C0  D003               	bra	u997
  3052  00F7C2  0008               	tblrd		*
  3053  00F7C4  50F5               	movf	tablat,w,c
  3054  00F7C6  D005               	bra	u990
  3055  00F7C8                     u997:
  3056  00F7C8  CFF6 FFE9          	movff	tblptrl,fsr0l
  3057  00F7CC  CFF7 FFEA          	movff	tblptrh,fsr0h
  3058  00F7D0  50EF               	movf	indf0,w,c
  3059  00F7D2                     u990:
  3060  00F7D2  0A20               	xorlw	32
  3061  00F7D4  B4D8               	btfsc	status,2,c
  3062  00F7D6  D033               	goto	l223
  3063  00F7D8  5014               	movf	printStringLCD@i,w,c
  3064  00F7DA  2407               	addwf	printStringLCD@string,w,c
  3065  00F7DC  6E09               	movwf	??_printStringLCD& (0+255),c
  3066  00F7DE  5015               	movf	printStringLCD@i+1,w,c
  3067  00F7E0  2008               	addwfc	printStringLCD@string+1,w,c
  3068  00F7E2  6E0A               	movwf	(??_printStringLCD+1)& (0+255),c
  3069  00F7E4  C009  FFF6         	movff	??_printStringLCD,tblptrl
  3070  00F7E8  C00A  FFF7         	movff	??_printStringLCD+1,tblptrh
  3071  00F7EC  0E00               	movlw	low (__mediumconst shr (0+16))
  3072  00F7EE  6EF8               	movwf	tblptru,c
  3073  00F7F0  0E0F               	movlw	(high __ramtop+-1)
  3074  00F7F2  64F7               	cpfsgt	tblptrh,c
  3075  00F7F4  D003               	bra	u1017
  3076  00F7F6  0008               	tblrd		*
  3077  00F7F8  50F5               	movf	tablat,w,c
  3078  00F7FA  D005               	bra	u1010
  3079  00F7FC                     u1017:
  3080  00F7FC  CFF6 FFE9          	movff	tblptrl,fsr0l
  3081  00F800  CFF7 FFEA          	movff	tblptrh,fsr0h
  3082  00F804  50EF               	movf	indf0,w,c
  3083  00F806                     u1010:
  3084  00F806  0A0A               	xorlw	10
  3085  00F808  B4D8               	btfsc	status,2,c
  3086  00F80A  D019               	goto	l223
  3087  00F80C                     l220:
  3088  00F80C                     l1454:
  3089                           
  3090                           ;lcd_extras.c: 54: }
  3091                           ;lcd_extras.c: 56: putch(string[i]);
  3092  00F80C  5014               	movf	printStringLCD@i,w,c
  3093  00F80E  2407               	addwf	printStringLCD@string,w,c
  3094  00F810  6E09               	movwf	??_printStringLCD& (0+255),c
  3095  00F812  5015               	movf	printStringLCD@i+1,w,c
  3096  00F814  2008               	addwfc	printStringLCD@string+1,w,c
  3097  00F816  6E0A               	movwf	(??_printStringLCD+1)& (0+255),c
  3098  00F818  C009  FFF6         	movff	??_printStringLCD,tblptrl
  3099  00F81C  C00A  FFF7         	movff	??_printStringLCD+1,tblptrh
  3100  00F820  0E00               	movlw	low (__mediumconst shr (0+16))
  3101  00F822  6EF8               	movwf	tblptru,c
  3102  00F824  0E0F               	movlw	(high __ramtop+-1)
  3103  00F826  64F7               	cpfsgt	tblptrh,c
  3104  00F828  D003               	bra	u1037
  3105  00F82A  0008               	tblrd		*
  3106  00F82C  50F5               	movf	tablat,w,c
  3107  00F82E  D005               	bra	u1030
  3108  00F830                     u1037:
  3109  00F830  CFF6 FFE9          	movff	tblptrl,fsr0l
  3110  00F834  CFF7 FFEA          	movff	tblptrh,fsr0h
  3111  00F838  50EF               	movf	indf0,w,c
  3112  00F83A                     u1030:
  3113  00F83A  ECDF  F078         	call	_putch
  3114  00F83E                     l223:
  3115  00F83E  4A14               	infsnz	printStringLCD@i,f,c
  3116  00F840  2A15               	incf	printStringLCD@i+1,f,c
  3117  00F842  BE15               	btfsc	printStringLCD@i+1,7,c
  3118  00F844  D777               	goto	l216
  3119  00F846  5015               	movf	printStringLCD@i+1,w,c
  3120  00F848  E101               	bnz	l224
  3121  00F84A  D76E               	goto	L6
  3122  00F84C                     l224:
  3123  00F84C  0012               	return		;funcret
  3124  00F84E                     __end_of_printStringLCD:
  3125                           	opt stack 0
  3126                           tblptru	equ	0xFF8
  3127                           tblptrh	equ	0xFF7
  3128                           tblptrl	equ	0xFF6
  3129                           tablat	equ	0xFF5
  3130                           prodh	equ	0xFF4
  3131                           prodl	equ	0xFF3
  3132                           indf0	equ	0xFEF
  3133                           postinc0	equ	0xFEE
  3134                           fsr0h	equ	0xFEA
  3135                           fsr0l	equ	0xFE9
  3136                           wreg	equ	0xFE8
  3137                           indf2	equ	0xFDF
  3138                           postinc2	equ	0xFDE
  3139                           postdec2	equ	0xFDD
  3140                           fsr2h	equ	0xFDA
  3141                           fsr2l	equ	0xFD9
  3142                           status	equ	0xFD8
  3143                           
  3144 ;; *************** function _putch *****************
  3145 ;; Defined at:
  3146 ;;		line 25 in file "lcd.c"
  3147 ;; Parameters:    Size  Location     Type
  3148 ;;  data            1    wreg     unsigned char 
  3149 ;; Auto vars:     Size  Location     Type
  3150 ;;  data            1    2[COMRAM] unsigned char 
  3151 ;; Return value:  Size  Location     Type
  3152 ;;                  1    wreg      void 
  3153 ;; Registers used:
  3154 ;;		wreg, status,2, status,0, cstack
  3155 ;; Tracked objects:
  3156 ;;		On entry : 0/0
  3157 ;;		On exit  : 0/0
  3158 ;;		Unchanged: 0/0
  3159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3161 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3163 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3164 ;;Total ram usage:        1 bytes
  3165 ;; Hardware stack levels used:    1
  3166 ;; Hardware stack levels required when called:    1
  3167 ;; This function calls:
  3168 ;;		_lcdNibble
  3169 ;; This function is called by:
  3170 ;;		_inputEntry
  3171 ;;		_printStringLCD
  3172 ;;		_printf
  3173 ;; This function uses a non-reentrant model
  3174 ;;
  3175                           
  3176                           	psect	text8
  3177  00F1BE                     __ptext8:
  3178                           	opt stack 0
  3179  00F1BE                     _putch:
  3180                           	opt stack 28
  3181                           
  3182                           ;incstack = 0
  3183                           ;putch@data stored from wreg
  3184  00F1BE  6E03               	movwf	putch@data,c
  3185                           
  3186                           ;lcd.c: 33: LATDbits.LATD2 = 1;
  3187  00F1C0  848C               	bsf	3980,2,c	;volatile
  3188                           
  3189                           ;lcd.c: 34: lcdNibble(data);
  3190  00F1C2  5003               	movf	putch@data,w,c
  3191  00F1C4  EC07  F07A         	call	_lcdNibble
  3192                           
  3193                           ;lcd.c: 35: _delay((unsigned long)((100)*(40000000/4000000.0)));
  3194  00F1C8  0EC8               	movlw	200
  3195  00F1CA                     u1697:
  3196  00F1CA  D000               	nop2	
  3197  00F1CC  2EE8               	decfsz	wreg,f,c
  3198  00F1CE  D7FD               	bra	u1697
  3199  00F1D0  0012               	return		;funcret
  3200  00F1D2                     __end_of_putch:
  3201                           	opt stack 0
  3202                           tblptru	equ	0xFF8
  3203                           tblptrh	equ	0xFF7
  3204                           tblptrl	equ	0xFF6
  3205                           tablat	equ	0xFF5
  3206                           prodh	equ	0xFF4
  3207                           prodl	equ	0xFF3
  3208                           indf0	equ	0xFEF
  3209                           postinc0	equ	0xFEE
  3210                           fsr0h	equ	0xFEA
  3211                           fsr0l	equ	0xFE9
  3212                           wreg	equ	0xFE8
  3213                           indf2	equ	0xFDF
  3214                           postinc2	equ	0xFDE
  3215                           postdec2	equ	0xFDD
  3216                           fsr2h	equ	0xFDA
  3217                           fsr2l	equ	0xFD9
  3218                           status	equ	0xFD8
  3219                           
  3220 ;; *************** function _pollKeypad *****************
  3221 ;; Defined at:
  3222 ;;		line 66 in file "lcd_extras.c"
  3223 ;; Parameters:    Size  Location     Type
  3224 ;;		None
  3225 ;; Auto vars:     Size  Location     Type
  3226 ;;  keypress        1    0[COMRAM] unsigned char 
  3227 ;; Return value:  Size  Location     Type
  3228 ;;                  1    wreg      unsigned char 
  3229 ;; Registers used:
  3230 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  3231 ;; Tracked objects:
  3232 ;;		On entry : 0/0
  3233 ;;		On exit  : 0/0
  3234 ;;		Unchanged: 0/0
  3235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3237 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3239 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3240 ;;Total ram usage:        1 bytes
  3241 ;; Hardware stack levels used:    1
  3242 ;; This function calls:
  3243 ;;		Nothing
  3244 ;; This function is called by:
  3245 ;;		_inputEntry
  3246 ;; This function uses a non-reentrant model
  3247 ;;
  3248                           
  3249                           	psect	text9
  3250  00F23A                     __ptext9:
  3251                           	opt stack 0
  3252  00F23A                     _pollKeypad:
  3253                           	opt stack 29
  3254                           
  3255                           ;lcd_extras.c: 68: while (PORTBbits.RB1 == 0) {continue;}
  3256                           
  3257                           ;incstack = 0
  3258  00F23A  A281               	btfss	3969,1,c	;volatile
  3259  00F23C  D7FE               	goto	_pollKeypad
  3260                           
  3261                           ;lcd_extras.c: 71: unsigned char keypress = (unsigned char)(PORTB & 0xF0) >> 4;
  3262  00F23E  3881               	swapf	3969,w,c	;volatile
  3263  00F240  0B0F               	andlw	15
  3264  00F242  0B0F               	andlw	15
  3265  00F244  6E01               	movwf	pollKeypad@keypress,c
  3266  00F246  B281               	btfsc	3969,1,c	;volatile
  3267  00F248  D7FE               	goto	l234
  3268                           
  3269                           ;lcd_extras.c: 76: __nop();
  3270  00F24A  F000               	nop	
  3271                           
  3272                           ;lcd_extras.c: 78: return keypadChars[keypress];
  3273  00F24C  5001               	movf	pollKeypad@keypress,w,c
  3274  00F24E  0D01               	mullw	1
  3275  00F250  0E55               	movlw	low _keypadChars
  3276  00F252  24F3               	addwf	prodl,w,c
  3277  00F254  6EF6               	movwf	tblptrl,c
  3278  00F256  0EFE               	movlw	high _keypadChars
  3279  00F258  20F4               	addwfc	prodh,w,c
  3280  00F25A  6EF7               	movwf	tblptrh,c
  3281  00F25C                     	if	0	;There are less than 3 active tblptr bytes
  3282  00F25C                     	endif
  3283  00F25C  0008               	tblrd		*
  3284  00F25E  50F5               	movf	tablat,w,c
  3285  00F260  0012               	return	
  3286  00F262                     __end_of_pollKeypad:
  3287                           	opt stack 0
  3288                           tblptru	equ	0xFF8
  3289                           tblptrh	equ	0xFF7
  3290                           tblptrl	equ	0xFF6
  3291                           tablat	equ	0xFF5
  3292                           prodh	equ	0xFF4
  3293                           prodl	equ	0xFF3
  3294                           indf0	equ	0xFEF
  3295                           postinc0	equ	0xFEE
  3296                           fsr0h	equ	0xFEA
  3297                           fsr0l	equ	0xFE9
  3298                           wreg	equ	0xFE8
  3299                           indf2	equ	0xFDF
  3300                           postinc2	equ	0xFDE
  3301                           postdec2	equ	0xFDD
  3302                           fsr2h	equ	0xFDA
  3303                           fsr2l	equ	0xFD9
  3304                           status	equ	0xFD8
  3305                           
  3306 ;; *************** function _lcd_set_cursor *****************
  3307 ;; Defined at:
  3308 ;;		line 81 in file "lcd.c"
  3309 ;; Parameters:    Size  Location     Type
  3310 ;;  x               1    wreg     unsigned char 
  3311 ;;  y               1    6[COMRAM] unsigned char 
  3312 ;; Auto vars:     Size  Location     Type
  3313 ;;  x               1    9[COMRAM] unsigned char 
  3314 ;;  i               1    8[COMRAM] unsigned char 
  3315 ;; Return value:  Size  Location     Type
  3316 ;;                  1    wreg      void 
  3317 ;; Registers used:
  3318 ;;		wreg, status,2, status,0, cstack
  3319 ;; Tracked objects:
  3320 ;;		On entry : 0/0
  3321 ;;		On exit  : 0/0
  3322 ;;		Unchanged: 0/0
  3323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3324 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3325 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3326 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3327 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3328 ;;Total ram usage:        4 bytes
  3329 ;; Hardware stack levels used:    1
  3330 ;; Hardware stack levels required when called:    3
  3331 ;; This function calls:
  3332 ;;		_lcdInst
  3333 ;;		_lcd_shift_cursor
  3334 ;; This function is called by:
  3335 ;;		_inputEntry
  3336 ;; This function uses a non-reentrant model
  3337 ;;
  3338                           
  3339                           	psect	text10
  3340  00F2EE                     __ptext10:
  3341                           	opt stack 0
  3342  00F2EE                     _lcd_set_cursor:
  3343                           	opt stack 26
  3344                           
  3345                           ;incstack = 0
  3346                           ;lcd_set_cursor@x stored from wreg
  3347  00F2EE  6E0A               	movwf	lcd_set_cursor@x,c
  3348                           
  3349                           ;lcd.c: 91: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  3350  00F2F0  0E80               	movlw	128
  3351  00F2F2  ECD5  F078         	call	_lcdInst
  3352  00F2F6  0E41               	movlw	65
  3353  00F2F8  6E08               	movwf	??_lcd_set_cursor& (0+255),c
  3354  00F2FA  0EEE               	movlw	238
  3355  00F2FC                     u1707:
  3356  00F2FC  2EE8               	decfsz	wreg,f,c
  3357  00F2FE  D7FE               	bra	u1707
  3358  00F300  2E08               	decfsz	??_lcd_set_cursor& (0+255),f,c
  3359  00F302  D7FC               	bra	u1707
  3360  00F304  D000               	nop2	
  3361                           
  3362                           ;lcd.c: 92: for(unsigned char i = 0; i < y; i++){lcdInst(0xC0);;}
  3363  00F306  0E00               	movlw	0
  3364  00F308  6E09               	movwf	lcd_set_cursor@i,c
  3365  00F30A  D004               	goto	l167
  3366  00F30C  0EC0               	movlw	192
  3367  00F30E  ECD5  F078         	call	_lcdInst
  3368  00F312  2A09               	incf	lcd_set_cursor@i,f,c
  3369  00F314                     l167:
  3370  00F314  5007               	movf	lcd_set_cursor@y,w,c
  3371  00F316  5C09               	subwf	lcd_set_cursor@i,w,c
  3372  00F318  A0D8               	btfss	status,0,c
  3373  00F31A  D7F8               	goto	l168
  3374                           
  3375                           ;lcd.c: 93: if(x > 0){
  3376  00F31C  500A               	movf	lcd_set_cursor@x,w,c
  3377  00F31E  B4D8               	btfsc	status,2,c
  3378  00F320  0012               	return	
  3379                           
  3380                           ;lcd.c: 94: lcd_shift_cursor(x, 1);
  3381  00F322  0E01               	movlw	1
  3382  00F324  6E04               	movwf	lcd_shift_cursor@direction,c
  3383  00F326  500A               	movf	lcd_set_cursor@x,w,c
  3384  00F328  ECE9  F078         	call	_lcd_shift_cursor
  3385  00F32C  0012               	return	
  3386  00F32E                     __end_of_lcd_set_cursor:
  3387                           	opt stack 0
  3388                           tblptru	equ	0xFF8
  3389                           tblptrh	equ	0xFF7
  3390                           tblptrl	equ	0xFF6
  3391                           tablat	equ	0xFF5
  3392                           prodh	equ	0xFF4
  3393                           prodl	equ	0xFF3
  3394                           indf0	equ	0xFEF
  3395                           postinc0	equ	0xFEE
  3396                           fsr0h	equ	0xFEA
  3397                           fsr0l	equ	0xFE9
  3398                           wreg	equ	0xFE8
  3399                           indf2	equ	0xFDF
  3400                           postinc2	equ	0xFDE
  3401                           postdec2	equ	0xFDD
  3402                           fsr2h	equ	0xFDA
  3403                           fsr2l	equ	0xFD9
  3404                           status	equ	0xFD8
  3405                           
  3406 ;; *************** function _lcd_shift_cursor *****************
  3407 ;; Defined at:
  3408 ;;		line 98 in file "lcd.c"
  3409 ;; Parameters:    Size  Location     Type
  3410 ;;  numChars        1    wreg     unsigned char 
  3411 ;;  direction       1    3[COMRAM] unsigned char 
  3412 ;; Auto vars:     Size  Location     Type
  3413 ;;  numChars        1    4[COMRAM] unsigned char 
  3414 ;;  n               1    5[COMRAM] unsigned char 
  3415 ;; Return value:  Size  Location     Type
  3416 ;;                  1    wreg      void 
  3417 ;; Registers used:
  3418 ;;		wreg, status,2, status,0, cstack
  3419 ;; Tracked objects:
  3420 ;;		On entry : 0/0
  3421 ;;		On exit  : 0/0
  3422 ;;		Unchanged: 0/0
  3423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3424 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3425 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3427 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3428 ;;Total ram usage:        3 bytes
  3429 ;; Hardware stack levels used:    1
  3430 ;; Hardware stack levels required when called:    2
  3431 ;; This function calls:
  3432 ;;		_lcdInst
  3433 ;; This function is called by:
  3434 ;;		_lcd_set_cursor
  3435 ;; This function uses a non-reentrant model
  3436 ;;
  3437                           
  3438                           	psect	text11
  3439  00F1D2                     __ptext11:
  3440                           	opt stack 0
  3441  00F1D2                     _lcd_shift_cursor:
  3442                           	opt stack 26
  3443                           
  3444                           ;incstack = 0
  3445                           ;lcd_shift_cursor@numChars stored from wreg
  3446  00F1D2  6E05               	movwf	lcd_shift_cursor@numChars,c
  3447                           
  3448                           ;lcd.c: 110: for(unsigned char n = numChars; n > 0; n--){
  3449  00F1D4  C005  F006         	movff	lcd_shift_cursor@numChars,lcd_shift_cursor@n
  3450  00F1D8                     l1462:
  3451  00F1D8  5006               	movf	lcd_shift_cursor@n,w,c
  3452  00F1DA  B4D8               	btfsc	status,2,c
  3453  00F1DC  0012               	return	
  3454                           
  3455                           ;lcd.c: 111: lcdInst((unsigned char)(0x10 | (direction << 2)));
  3456  00F1DE  4404               	rlncf	lcd_shift_cursor@direction,w,c
  3457  00F1E0  46E8               	rlncf	wreg,f,c
  3458  00F1E2  0BFC               	andlw	252
  3459  00F1E4  0910               	iorlw	16
  3460  00F1E6  ECD5  F078         	call	_lcdInst
  3461  00F1EA  0606               	decf	lcd_shift_cursor@n,f,c
  3462  00F1EC  D7F5               	goto	l1462
  3463  00F1EE                     __end_of_lcd_shift_cursor:
  3464                           	opt stack 0
  3465                           tblptru	equ	0xFF8
  3466                           tblptrh	equ	0xFF7
  3467                           tblptrl	equ	0xFF6
  3468                           tablat	equ	0xFF5
  3469                           prodh	equ	0xFF4
  3470                           prodl	equ	0xFF3
  3471                           indf0	equ	0xFEF
  3472                           postinc0	equ	0xFEE
  3473                           fsr0h	equ	0xFEA
  3474                           fsr0l	equ	0xFE9
  3475                           wreg	equ	0xFE8
  3476                           indf2	equ	0xFDF
  3477                           postinc2	equ	0xFDE
  3478                           postdec2	equ	0xFDD
  3479                           fsr2h	equ	0xFDA
  3480                           fsr2l	equ	0xFD9
  3481                           status	equ	0xFD8
  3482                           
  3483 ;; *************** function ___wmul *****************
  3484 ;; Defined at:
  3485 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  3486 ;; Parameters:    Size  Location     Type
  3487 ;;  multiplier      2    0[COMRAM] unsigned int 
  3488 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3489 ;; Auto vars:     Size  Location     Type
  3490 ;;  product         2    4[COMRAM] unsigned int 
  3491 ;; Return value:  Size  Location     Type
  3492 ;;                  2    0[COMRAM] unsigned int 
  3493 ;; Registers used:
  3494 ;;		wreg, status,2, status,0, prodl, prodh
  3495 ;; Tracked objects:
  3496 ;;		On entry : 0/0
  3497 ;;		On exit  : 0/0
  3498 ;;		Unchanged: 0/0
  3499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3500 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3501 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3503 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3504 ;;Total ram usage:        6 bytes
  3505 ;; Hardware stack levels used:    1
  3506 ;; This function calls:
  3507 ;;		Nothing
  3508 ;; This function is called by:
  3509 ;;		_inputEntry
  3510 ;; This function uses a non-reentrant model
  3511 ;;
  3512                           
  3513                           	psect	text12
  3514  00F1EE                     __ptext12:
  3515                           	opt stack 0
  3516  00F1EE                     ___wmul:
  3517                           	opt stack 29
  3518                           
  3519                           ;incstack = 0
  3520  00F1EE  5001               	movf	___wmul@multiplier,w,c
  3521  00F1F0  0203               	mulwf	___wmul@multiplicand,c
  3522  00F1F2  CFF3 F005          	movff	prodl,___wmul@product
  3523  00F1F6  CFF4 F006          	movff	prodh,___wmul@product+1
  3524  00F1FA  5001               	movf	___wmul@multiplier,w,c
  3525  00F1FC  0204               	mulwf	___wmul@multiplicand+1,c
  3526  00F1FE  50F3               	movf	prodl,w,c
  3527  00F200  2606               	addwf	___wmul@product+1,f,c
  3528  00F202  5002               	movf	___wmul@multiplier+1,w,c
  3529  00F204  0203               	mulwf	___wmul@multiplicand,c
  3530  00F206  50F3               	movf	prodl,w,c
  3531  00F208  2606               	addwf	___wmul@product+1,f,c
  3532  00F20A  C005  F001         	movff	___wmul@product,?___wmul
  3533  00F20E  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3534  00F212  0012               	return	
  3535  00F214                     __end_of___wmul:
  3536                           	opt stack 0
  3537                           tblptru	equ	0xFF8
  3538                           tblptrh	equ	0xFF7
  3539                           tblptrl	equ	0xFF6
  3540                           tablat	equ	0xFF5
  3541                           prodh	equ	0xFF4
  3542                           prodl	equ	0xFF3
  3543                           indf0	equ	0xFEF
  3544                           postinc0	equ	0xFEE
  3545                           fsr0h	equ	0xFEA
  3546                           fsr0l	equ	0xFE9
  3547                           wreg	equ	0xFE8
  3548                           indf2	equ	0xFDF
  3549                           postinc2	equ	0xFDE
  3550                           postdec2	equ	0xFDD
  3551                           fsr2h	equ	0xFDA
  3552                           fsr2l	equ	0xFD9
  3553                           status	equ	0xFD8
  3554                           
  3555 ;; *************** function _initLCD *****************
  3556 ;; Defined at:
  3557 ;;		line 61 in file "lcd.c"
  3558 ;; Parameters:    Size  Location     Type
  3559 ;;		None
  3560 ;; Auto vars:     Size  Location     Type
  3561 ;;		None
  3562 ;; Return value:  Size  Location     Type
  3563 ;;                  1    wreg      void 
  3564 ;; Registers used:
  3565 ;;		wreg, status,2, status,0, cstack
  3566 ;; Tracked objects:
  3567 ;;		On entry : 0/0
  3568 ;;		On exit  : 0/0
  3569 ;;		Unchanged: 0/0
  3570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3573 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3574 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3575 ;;Total ram usage:        1 bytes
  3576 ;; Hardware stack levels used:    1
  3577 ;; Hardware stack levels required when called:    2
  3578 ;; This function calls:
  3579 ;;		_lcdInst
  3580 ;; This function is called by:
  3581 ;;		_main
  3582 ;; This function uses a non-reentrant model
  3583 ;;
  3584                           
  3585                           	psect	text13
  3586  00F370                     __ptext13:
  3587                           	opt stack 0
  3588  00F370                     _initLCD:
  3589                           	opt stack 28
  3590                           
  3591                           ;lcd.c: 69: _delay((unsigned long)((15)*(40000000/4000.0)));
  3592                           
  3593                           ;incstack = 0
  3594  00F370  0EC3               	movlw	195
  3595  00F372  6E04               	movwf	??_initLCD& (0+255),c
  3596  00F374  0ECD               	movlw	205
  3597  00F376                     u1717:
  3598  00F376  2EE8               	decfsz	wreg,f,c
  3599  00F378  D7FE               	bra	u1717
  3600  00F37A  2E04               	decfsz	??_initLCD& (0+255),f,c
  3601  00F37C  D7FC               	bra	u1717
  3602  00F37E  F000               	nop	
  3603                           
  3604                           ;lcd.c: 70: lcdInst(0b00110011);
  3605  00F380  0E33               	movlw	51
  3606  00F382  ECD5  F078         	call	_lcdInst
  3607                           
  3608                           ;lcd.c: 71: lcdInst(0b00110010);
  3609  00F386  0E32               	movlw	50
  3610  00F388  ECD5  F078         	call	_lcdInst
  3611                           
  3612                           ;lcd.c: 72: lcdInst(0b00101000);
  3613  00F38C  0E28               	movlw	40
  3614  00F38E  ECD5  F078         	call	_lcdInst
  3615                           
  3616                           ;lcd.c: 73: lcdInst(0b00001111);
  3617  00F392  0E0F               	movlw	15
  3618  00F394  ECD5  F078         	call	_lcdInst
  3619                           
  3620                           ;lcd.c: 74: lcdInst(0b00000110);
  3621  00F398  0E06               	movlw	6
  3622  00F39A  ECD5  F078         	call	_lcdInst
  3623                           
  3624                           ;lcd.c: 75: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  3625  00F39E  0E01               	movlw	1
  3626  00F3A0  ECD5  F078         	call	_lcdInst
  3627  00F3A4  0EC3               	movlw	195
  3628  00F3A6  6E04               	movwf	??_initLCD& (0+255),c
  3629  00F3A8  0ECD               	movlw	205
  3630  00F3AA                     u1727:
  3631  00F3AA  2EE8               	decfsz	wreg,f,c
  3632  00F3AC  D7FE               	bra	u1727
  3633  00F3AE  2E04               	decfsz	??_initLCD& (0+255),f,c
  3634  00F3B0  D7FC               	bra	u1727
  3635  00F3B2  F000               	nop	
  3636                           
  3637                           ;lcd.c: 78: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  3638  00F3B4  0E0F               	movlw	15
  3639  00F3B6  ECD5  F078         	call	_lcdInst
  3640  00F3BA  0012               	return		;funcret
  3641  00F3BC                     __end_of_initLCD:
  3642                           	opt stack 0
  3643                           tblptru	equ	0xFF8
  3644                           tblptrh	equ	0xFF7
  3645                           tblptrl	equ	0xFF6
  3646                           tablat	equ	0xFF5
  3647                           prodh	equ	0xFF4
  3648                           prodl	equ	0xFF3
  3649                           indf0	equ	0xFEF
  3650                           postinc0	equ	0xFEE
  3651                           fsr0h	equ	0xFEA
  3652                           fsr0l	equ	0xFE9
  3653                           wreg	equ	0xFE8
  3654                           indf2	equ	0xFDF
  3655                           postinc2	equ	0xFDE
  3656                           postdec2	equ	0xFDD
  3657                           fsr2h	equ	0xFDA
  3658                           fsr2l	equ	0xFD9
  3659                           status	equ	0xFD8
  3660                           
  3661 ;; *************** function _lcdInst *****************
  3662 ;; Defined at:
  3663 ;;		line 12 in file "lcd.c"
  3664 ;; Parameters:    Size  Location     Type
  3665 ;;  data            1    wreg     unsigned char 
  3666 ;; Auto vars:     Size  Location     Type
  3667 ;;  data            1    2[COMRAM] unsigned char 
  3668 ;; Return value:  Size  Location     Type
  3669 ;;                  1    wreg      void 
  3670 ;; Registers used:
  3671 ;;		wreg, status,2, status,0, cstack
  3672 ;; Tracked objects:
  3673 ;;		On entry : 0/0
  3674 ;;		On exit  : 0/0
  3675 ;;		Unchanged: 0/0
  3676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3678 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3680 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3681 ;;Total ram usage:        1 bytes
  3682 ;; Hardware stack levels used:    1
  3683 ;; Hardware stack levels required when called:    1
  3684 ;; This function calls:
  3685 ;;		_lcdNibble
  3686 ;; This function is called by:
  3687 ;;		_inputEntry
  3688 ;;		_initLCD
  3689 ;;		_lcd_set_cursor
  3690 ;;		_lcd_shift_cursor
  3691 ;;		_printStringLCD
  3692 ;;		_lcd_shift_display
  3693 ;; This function uses a non-reentrant model
  3694 ;;
  3695                           
  3696                           	psect	text14
  3697  00F1AA                     __ptext14:
  3698                           	opt stack 0
  3699  00F1AA                     _lcdInst:
  3700                           	opt stack 27
  3701                           
  3702                           ;incstack = 0
  3703                           ;lcdInst@data stored from wreg
  3704  00F1AA  6E03               	movwf	lcdInst@data,c
  3705                           
  3706                           ;lcd.c: 20: LATDbits.LATD2 = 0;
  3707  00F1AC  948C               	bcf	3980,2,c	;volatile
  3708                           
  3709                           ;lcd.c: 21: lcdNibble(data);
  3710  00F1AE  5003               	movf	lcdInst@data,w,c
  3711  00F1B0  EC07  F07A         	call	_lcdNibble
  3712                           
  3713                           ;lcd.c: 22: _delay((unsigned long)((100)*(40000000/4000000.0)));
  3714  00F1B4  0EC8               	movlw	200
  3715  00F1B6                     u1737:
  3716  00F1B6  D000               	nop2	
  3717  00F1B8  2EE8               	decfsz	wreg,f,c
  3718  00F1BA  D7FD               	bra	u1737
  3719  00F1BC  0012               	return		;funcret
  3720  00F1BE                     __end_of_lcdInst:
  3721                           	opt stack 0
  3722                           tblptru	equ	0xFF8
  3723                           tblptrh	equ	0xFF7
  3724                           tblptrl	equ	0xFF6
  3725                           tablat	equ	0xFF5
  3726                           prodh	equ	0xFF4
  3727                           prodl	equ	0xFF3
  3728                           indf0	equ	0xFEF
  3729                           postinc0	equ	0xFEE
  3730                           fsr0h	equ	0xFEA
  3731                           fsr0l	equ	0xFE9
  3732                           wreg	equ	0xFE8
  3733                           indf2	equ	0xFDF
  3734                           postinc2	equ	0xFDE
  3735                           postdec2	equ	0xFDD
  3736                           fsr2h	equ	0xFDA
  3737                           fsr2l	equ	0xFD9
  3738                           status	equ	0xFD8
  3739                           
  3740 ;; *************** function _lcdNibble *****************
  3741 ;; Defined at:
  3742 ;;		line 38 in file "lcd.c"
  3743 ;; Parameters:    Size  Location     Type
  3744 ;;  data            1    wreg     unsigned char 
  3745 ;; Auto vars:     Size  Location     Type
  3746 ;;  data            1    1[COMRAM] unsigned char 
  3747 ;;  temp            1    0[COMRAM] unsigned char 
  3748 ;; Return value:  Size  Location     Type
  3749 ;;                  1    wreg      void 
  3750 ;; Registers used:
  3751 ;;		wreg, status,2, status,0
  3752 ;; Tracked objects:
  3753 ;;		On entry : 0/0
  3754 ;;		On exit  : 0/0
  3755 ;;		Unchanged: 0/0
  3756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3758 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3760 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3761 ;;Total ram usage:        2 bytes
  3762 ;; Hardware stack levels used:    1
  3763 ;; This function calls:
  3764 ;;		Nothing
  3765 ;; This function is called by:
  3766 ;;		_lcdInst
  3767 ;;		_putch
  3768 ;; This function uses a non-reentrant model
  3769 ;;
  3770                           
  3771                           	psect	text15
  3772  00F40E                     __ptext15:
  3773                           	opt stack 0
  3774  00F40E                     _lcdNibble:
  3775                           	opt stack 28
  3776                           
  3777                           ;incstack = 0
  3778                           ;lcdNibble@data stored from wreg
  3779  00F40E  6E02               	movwf	lcdNibble@data,c
  3780                           
  3781                           ;lcd.c: 46: char temp = (unsigned char) (data & 0xF0);
  3782  00F410  5002               	movf	lcdNibble@data,w,c
  3783  00F412  0BF0               	andlw	240
  3784  00F414  6E01               	movwf	lcdNibble@temp,c
  3785                           
  3786                           ;lcd.c: 47: LATD = (unsigned char) (LATD & 0x0F);
  3787  00F416  508C               	movf	3980,w,c	;volatile
  3788  00F418  0B0F               	andlw	15
  3789  00F41A  6E8C               	movwf	3980,c	;volatile
  3790                           
  3791                           ;lcd.c: 48: LATD = (unsigned char) (temp | LATD);
  3792  00F41C  5001               	movf	lcdNibble@temp,w,c
  3793  00F41E  108C               	iorwf	3980,w,c	;volatile
  3794  00F420  6E8C               	movwf	3980,c	;volatile
  3795                           
  3796                           ;lcd.c: 50: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  3797  00F422  0E00               	movlw	0
  3798  00F424  BEF2               	btfsc	intcon,7,c	;volatile
  3799  00F426  0E01               	movlw	1
  3800  00F428  6E7A               	movwf	_LCDinterruptState,c
  3801  00F42A  9EF2               	bcf	intcon,7,c	;volatile
  3802  00F42C  868C               	bsf	3980,3,c	;volatile
  3803  00F42E  0E53               	movlw	83
  3804  00F430                     u1747:
  3805  00F430  2EE8               	decfsz	wreg,f,c
  3806  00F432  D7FE               	bra	u1747
  3807  00F434  F000               	nop	
  3808  00F436  968C               	bcf	3980,3,c	;volatile
  3809  00F438  0EC8               	movlw	200
  3810  00F43A                     u1757:
  3811  00F43A  D000               	nop2	
  3812  00F43C  2EE8               	decfsz	wreg,f,c
  3813  00F43E  D7FD               	bra	u1757
  3814  00F440  B07A               	btfsc	_LCDinterruptState,0,c
  3815  00F442  D002               	bra	u15
  3816  00F444  9EF2               	bcf	intcon,7,c	;volatile
  3817  00F446  D001               	bra	u16
  3818  00F448                     u15:
  3819  00F448  8EF2               	bsf	intcon,7,c	;volatile
  3820  00F44A                     u16:
  3821                           
  3822                           ;lcd.c: 53: data = (unsigned char) (data << 4);
  3823  00F44A  3802               	swapf	lcdNibble@data,w,c
  3824  00F44C  0BF0               	andlw	240
  3825  00F44E  6E02               	movwf	lcdNibble@data,c
  3826                           
  3827                           ;lcd.c: 54: temp = (unsigned char) (data & 0xF0);
  3828  00F450  5002               	movf	lcdNibble@data,w,c
  3829  00F452  0BF0               	andlw	240
  3830  00F454  6E01               	movwf	lcdNibble@temp,c
  3831                           
  3832                           ;lcd.c: 55: LATD = (unsigned char) (LATD & 0x0F);
  3833  00F456  508C               	movf	3980,w,c	;volatile
  3834  00F458  0B0F               	andlw	15
  3835  00F45A  6E8C               	movwf	3980,c	;volatile
  3836                           
  3837                           ;lcd.c: 56: LATD = (unsigned char) (temp | LATD);
  3838  00F45C  5001               	movf	lcdNibble@temp,w,c
  3839  00F45E  108C               	iorwf	3980,w,c	;volatile
  3840  00F460  6E8C               	movwf	3980,c	;volatile
  3841                           
  3842                           ;lcd.c: 58: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  3843  00F462  0E00               	movlw	0
  3844  00F464  BEF2               	btfsc	intcon,7,c	;volatile
  3845  00F466  0E01               	movlw	1
  3846  00F468  6E7A               	movwf	_LCDinterruptState,c
  3847  00F46A  9EF2               	bcf	intcon,7,c	;volatile
  3848  00F46C  868C               	bsf	3980,3,c	;volatile
  3849  00F46E  0E53               	movlw	83
  3850  00F470                     u1767:
  3851  00F470  2EE8               	decfsz	wreg,f,c
  3852  00F472  D7FE               	bra	u1767
  3853  00F474  F000               	nop	
  3854  00F476  968C               	bcf	3980,3,c	;volatile
  3855  00F478  0EC8               	movlw	200
  3856  00F47A                     u1777:
  3857  00F47A  D000               	nop2	
  3858  00F47C  2EE8               	decfsz	wreg,f,c
  3859  00F47E  D7FD               	bra	u1777
  3860  00F480  B07A               	btfsc	_LCDinterruptState,0,c
  3861  00F482  D002               	bra	u25
  3862  00F484  9EF2               	bcf	intcon,7,c	;volatile
  3863  00F486  D001               	bra	u26
  3864  00F488                     u25:
  3865  00F488  8EF2               	bsf	intcon,7,c	;volatile
  3866  00F48A                     u26:
  3867  00F48A  0012               	return		;funcret
  3868  00F48C                     __end_of_lcdNibble:
  3869                           	opt stack 0
  3870                           tblptru	equ	0xFF8
  3871                           tblptrh	equ	0xFF7
  3872                           tblptrl	equ	0xFF6
  3873                           tablat	equ	0xFF5
  3874                           prodh	equ	0xFF4
  3875                           prodl	equ	0xFF3
  3876                           intcon	equ	0xFF2
  3877                           indf0	equ	0xFEF
  3878                           postinc0	equ	0xFEE
  3879                           fsr0h	equ	0xFEA
  3880                           fsr0l	equ	0xFE9
  3881                           wreg	equ	0xFE8
  3882                           indf2	equ	0xFDF
  3883                           postinc2	equ	0xFDE
  3884                           postdec2	equ	0xFDD
  3885                           fsr2h	equ	0xFDA
  3886                           fsr2l	equ	0xFD9
  3887                           status	equ	0xFD8
  3888                           tblptru	equ	0xFF8
  3889                           tblptrh	equ	0xFF7
  3890                           tblptrl	equ	0xFF6
  3891                           tablat	equ	0xFF5
  3892                           prodh	equ	0xFF4
  3893                           prodl	equ	0xFF3
  3894                           intcon	equ	0xFF2
  3895                           indf0	equ	0xFEF
  3896                           postinc0	equ	0xFEE
  3897                           fsr0h	equ	0xFEA
  3898                           fsr0l	equ	0xFE9
  3899                           wreg	equ	0xFE8
  3900                           indf2	equ	0xFDF
  3901                           postinc2	equ	0xFDE
  3902                           postdec2	equ	0xFDD
  3903                           fsr2h	equ	0xFDA
  3904                           fsr2l	equ	0xFD9
  3905                           status	equ	0xFD8
  3906                           
  3907                           	psect	rparam
  3908  0000                     tblptru	equ	0xFF8
  3909                           tblptrh	equ	0xFF7
  3910                           tblptrl	equ	0xFF6
  3911                           tablat	equ	0xFF5
  3912                           prodh	equ	0xFF4
  3913                           prodl	equ	0xFF3
  3914                           intcon	equ	0xFF2
  3915                           indf0	equ	0xFEF
  3916                           postinc0	equ	0xFEE
  3917                           fsr0h	equ	0xFEA
  3918                           fsr0l	equ	0xFE9
  3919                           wreg	equ	0xFE8
  3920                           indf2	equ	0xFDF
  3921                           postinc2	equ	0xFDE
  3922                           postdec2	equ	0xFDD
  3923                           fsr2h	equ	0xFDA
  3924                           fsr2l	equ	0xFD9
  3925                           status	equ	0xFD8


Data Sizes:
    Strings     16
    Constant    490
    Data        2
    BSS         27
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     95     124
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 132
		 -> inputEntryQuestions(CODE[132]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 32
		 -> inputEntry@fastenerString(COMRAM[32]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 32
		 -> inputEntry@fastenerString(COMRAM[32]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), STR_1(CODE[7]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    printErrorLCD@string	PTR unsigned char  size(2) Largest target is 224
		 -> errMsgs.badEntry(CODE[32]), errMsgs(CODE[224]), 

    printStringLCD@string	PTR unsigned char  size(2) Largest target is 224
		 -> inputEntry@fastenerString(COMRAM[32]), inputEntryQuestions(CODE[132]), errMsgs.badEntry(CODE[32]), errMsgs(CODE[224]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 32
		 -> inputEntry@fastenerString(COMRAM[32]), 


Critical Paths under _main in COMRAM

    _main->_inputEntry
    _inputEntry->_printErrorLCD
    _strcpy->___wmul
    _printf->___lwmod
    ___lwmod->___lwdiv
    _printErrorLCD->_printStringLCD
    _printStringLCD->___wmul
    _putch->_lcdNibble
    _lcd_set_cursor->_lcd_shift_cursor
    _lcd_shift_cursor->_lcdInst
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6969
                            _initLCD
                         _inputEntry
 ---------------------------------------------------------------------------------
 (1) _inputEntry                                          72    72      0    6879
                                             25 COMRAM    70    70      0
                             ___wmul
                            _lcdInst
                     _lcd_set_cursor
                         _pollKeypad
                      _printErrorLCD
                     _printStringLCD
                             _printf
                              _putch
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     227
                                              6 COMRAM     6     2      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _printf                                              21    17      4    1253
                                             12 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     311
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _printErrorLCD                                        4     2      2    1385
                                             21 COMRAM     4     2      2
                     _printStringLCD
 ---------------------------------------------------------------------------------
 (2) _printStringLCD                                      15    13      2    1135
                                              6 COMRAM    15    13      2
                             ___wmul (ARG)
                            _lcdInst
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _pollKeypad                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _lcd_set_cursor                                       4     3      1     588
                                              6 COMRAM     4     3      1
                            _lcdInst
                   _lcd_shift_cursor
 ---------------------------------------------------------------------------------
 (3) _lcd_shift_cursor                                     3     2      1     256
                                              3 COMRAM     3     2      1
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     767
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _inputEntry
     ___wmul
     _lcdInst
       _lcdNibble
     _lcd_set_cursor
       _lcdInst
         _lcdNibble
       _lcd_shift_cursor
         _lcdInst
           _lcdNibble
     _pollKeypad
     _printErrorLCD
       _printStringLCD
         ___wmul (ARG)
         _lcdInst (ARG)
           _lcdNibble
         _putch (ARG)
           _lcdNibble
     _printStringLCD
       ___wmul (ARG)
       _lcdInst (ARG)
         _lcdNibble
       _putch (ARG)
         _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _lcdNibble
     _putch
       _lcdNibble
     _strcpy
       ___wmul (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     5F      7C       1       97.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      7C      34        0.0%
DATA                 0      0      7C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Feb 06 00:30:27 2018

                            l72 F89A                              l73 F932                              l74 F924  
                            l91 FA62                              l83 F9AA                              l77 FDC2  
                            l93 FA70                              l85 FA1A                              l86 FA82  
                            l78 F988                              l95 FA7C                              l97 FA94  
                            l89 FA54                              l99 FAAA                              u15 F448  
                            u16 F44A                              u25 F488                              u26 F48A  
           printErrorLCD@string 0016             ___wmul@multiplicand 0003                     __CFG_BORV$3 000000  
                  __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000  
                  __CFG_CP3$OFF 000000                             l101 FADE                             l111 FD24  
                           l103 FBE6                             l104 FC0A                             l105 FC16  
                           l210 F60E                             l114 FD46                             l123 F28E  
                           l220 F80C                             l108 FC26                             l213 F67E  
                           l109 FC8C                             l214 F6C2                             l223 F83E  
                           l215 F70A                             l216 F734                             l224 F84C  
                           l234 F246                             l261 F53A                             l262 F588  
                           l167 F314                             l263 F540                             l255 F4D0  
                           l168 F30C                             l248 F496                             l257 F4F8  
                           l249 F4A6                             l670 F3DA                             l814 F2D0  
                           l671 F3D2                             l815 F2C8                             l680 F344  
                           l681 F33C                             l674 F3FA                             l675 F404  
                           l684 F35C                             l685 F366                    __CFG_CPB$OFF 000000  
                  __CFG_CPD$OFF 000000                             u900 F6FA                             u820 F60C  
                           u830 F63C                             u930 F718                             u850 F670  
                           u907 F6F0                             u940 F732                             u837 F632  
                           u950 F762                             u870 F6AC                             u857 F666  
                           u957 F758                             u877 F6A2                             u990 F7D2  
                           u997 F7C8                             wreg 000FE8                 ?_lcd_set_cursor 0007  
                  __CFG_LVP$OFF 000000                    __CFG_WDT$OFF 000000                            l1432 F718  
                          l1462 F1D8                            l1454 F80C                            l1560 F4FC  
                          l1712 FBE6                            l1626 F924                            l1716 FBF4  
                          l1760 FD16                            l1762 FD24                            l1746 FC7C  
                          l1756 FCD0                            l1694 FABA                            l1782 FDBA  
                          STR_1 FFF8                            STR_2 FFEF                            u1010 F806  
                          u1030 F83A                            u1110 F348                            u1200 F528  
                          u1017 F7FC                            u1220 F590                            u1037 F830  
                          u1080 F3DE                            u1250 F906                            u1420 FADC  
                          u1340 FA40                            u1260 F916                            _LATA 000F89  
                          u1510 FCD0                            _LATB 000F8A                            _LATC 000F8B  
                          u1520 FCF4                            u1280 F986                            _LATD 000F8C  
                          _LATE 000F8D                            u1530 FD16                            u1540 FD4E  
                          u1550 FDBA                            u1470 FBF4                            u1294 F998  
                          u1607 FC5E                            u1295 F994                            u1617 FD5A  
                          u1707 F2FC                            u1627 FD70                            u1717 F376  
                          u1637 FD98                            u1727 F3AA                            u1647 FDD6  
                          u1737 F1B6                            u1657 FDEC                            u1577 F85A  
                          u1747 F430                            u1667 F22A                            u1587 F870  
                          u1757 F43A                            u1677 F5D2                            u1597 F8E8  
                          u1767 F470                            u1687 F5E8                            u1777 F47A  
                          u1697 F1CA                            _main F262    __end_of_assemblyStepEncoding FE85  
                          fsr0h 000FEA                            indf0 000FEF                            fsr2h 000FDA  
                          fsr0l 000FE9                            indf2 000FDF                            fsr2l 000FD9  
                          prodh 000FF4                            prodl 000FF3                            start 0000  
                 __CFG_IESO$OFF 000000                   __CFG_MCLRE$ON 000000                    ___param_bank 000000  
              __end_of_LCD_LEFT FE86                 ??_printErrorLCD 0018                           ?_main 0001  
               __end_of___lwdiv F40E                 __end_of___lwmod F370                           _PORTB 000F81  
                         _TRISA 000F92                           _TRISB 000F93                           _TRISC 000F94  
                         _TRISD 000F95                           _TRISE 000F96            printStringLCD@string 0007  
                 __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000  
                 __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000                 __end_of_lcdInst F1BE  
                __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000                  __CFG_EBTR1$OFF 000000  
                __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000                   __CFG_WRTB$OFF 000000  
                 __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000                 __end_of_errMsgs FF6B  
               __end_of_initLCD F3BC                  __CFG_EBTRB$OFF 000000                 __end_of_dpowers FE80  
                         _putch F1BE                           tablat 000FF5               _LCDinterruptState 007A  
                         status 000FD8                 __initialization F290                    __end_of_main F290  
             ?_lcd_shift_cursor 0004                  __CFG_OSC$HSPLL 000000               __end_of_LCD_RIGHT FE87  
                        ??_main 0060              ??_lcd_shift_cursor 0005                   __activetblptr 000002  
                        ?_putch 0001                   inputEntry@sum 0055                  __CFG_XINST$OFF 000000  
                        ___wmul F1EE                  __CFG_STVREN$ON 000000                       ??___lwdiv 0005  
                     ??___lwmod 000C                          _params 0060                          clear_0 F2AE  
              ??_printStringLCD 0009                       ??_lcdInst 0003                          _printf F48C  
                        _strcpy F2BE                       ??_initLCD 0004            _assemblyStepEncoding FE80  
                  __pdataCOMRAM 007B                    __mediumconst FE04                          tblptrh 000FF7  
                        tblptrl 000FF6                          tblptru 000FF8            __end_of_LCDMenuIcons FE76  
                    __accesstop 0080         __end_of__initialization F2B4                 __CFG_PBADEN$OFF 000000  
                 ___rparam_used 000001                  __pcstackCOMRAM 0001                   __end_of_putch F1D2  
              ??_lcd_set_cursor 0008              __size_of_lcdNibble 007E                     inputEntry@i 005D  
                       ??_putch 0003             _inputEntryQuestions FF6B                         ?___wmul 0001  
                       ?_printf 000D                         ?_strcpy 0007                  inputEntry@done 0042  
                inputEntry@numB 0044                  inputEntry@numN 0046                  inputEntry@numS 0048  
                inputEntry@numW 004A               __end_of_lcdNibble F48C                         __Hparam 0000  
                       __Lparam 0000                 __size_of___wmul 0026                         ___lwdiv F3BC  
                       ___lwmod F32E                         __pcinit F290                         __ramtop 1000  
         __end_of_printErrorLCD F23A                         _lcdInst F1AA                         __ptext0 F262  
                       __ptext1 F84E                         __ptext2 F2BE                         __ptext3 F48C  
                       __ptext4 F32E                         __ptext5 F3BC                         __ptext6 F214  
                       __ptext7 F5AA                         __ptext8 F1BE                         __ptext9 F23A  
               __size_of_printf 011E                         _errMsgs FE8B                 __size_of_strcpy 0030  
                       _initLCD F370                         _dpowers FE76      printStringLCD@newlineIndex 0010  
                     _LCD_RIGHT FE86                      _inputEntry F84E        printStringLCD@spaceIndex 000E  
               printStringLCD@i 0014                 printStringLCD@j 000C       __size_of_lcd_shift_cursor 001C  
          end_of_initialization F2B4           __end_of_LCD_SIZE_HORZ FE89           __end_of_LCD_SIZE_VERT FE88  
      inputEntry@fastenerString 001E                   __Lmediumconst FE04                      _pollKeypad F23A  
                       printf@c 0018                         printf@f 000D                         postdec2 000FDD  
                       postinc0 000FEE                         postinc2 000FDE                inputEntry@stepID 0040  
     inputEntry@doneCompartment 0053                    _LCDMenuIcons FE66                       _PORTBbits 000F81  
  inputEntry@compartmentsToFill 0052       lcd_shift_cursor@direction 0004                  __end_of___wmul F214  
                 __pidataCOMRAM F1A8              pollKeypad@keypress 0001                  __end_of_printf F5AA  
                __end_of_strcpy F2EE             start_initialization F290                     ?_inputEntry 0001  
          inputEntry@numPressed 0059                     ?_pollKeypad 0001                        ??___wmul 0005  
              __CFG_LPT1OSC$OFF 000000                        ??_printf 0011                        ??_strcpy 000B  
                   __pbssCOMRAM 0060        inputEntry@inputEntryStep 0057                _lcd_shift_cursor F1D2  
       __size_of_printStringLCD 02A4                ___lwdiv@dividend 0001               __CFG_CCP2MX$PORTC 000000  
           __size_of_inputEntry 05B6                   __pmediumconst FE04                       _lcdNibble F40E  
                      ?___lwdiv 0001                        ?___lwmod 0008                        ?_lcdInst 0001  
                      ?_initLCD 0001             __size_of_pollKeypad 0028                ___lwdiv@quotient 0005  
                __size_of_putch 0014                 inputEntry@F3113 007B             __end_of_keypadChars FE66  
                      _LCD_LEFT FE85         __size_of_lcd_set_cursor 0040                  _fastenerMatrix FE05  
                ___wmul@product 0005      inputEntry@compartmentLabel 003E                        _LATDbits 000F8C  
               lcd_set_cursor@i 0009                 lcd_set_cursor@x 000A                 lcd_set_cursor@y 0007  
               inputEntry@found 004C                __CFG_WDTPS$32768 000000                      ?_lcdNibble 0001  
      inputEntry@compartmentNum 005B     __end_of_inputEntryQuestions FFEF               ___wmul@multiplier 0001  
                 lcdNibble@data 0002                      printf@flag 0014                   lcdNibble@temp 0001  
                    printf@prec 0015                  _LCD_HORZ_LIMIT FE8A             inputEntry@setIsGood 004E  
        __end_of_fastenerMatrix FE55         inputEntry@doneMultiples 0050          __size_of_printErrorLCD 0026  
                      __Hrparam 0000                        __Lrparam 0000              __CFG_BOREN$SBORDIS 000000  
              __size_of___lwdiv 0052                __size_of___lwmod 0042                __size_of_lcdInst 0014  
              __size_of_initLCD 004C          __end_of_LCD_HORZ_LIMIT FE8B                    ??_inputEntry 001A  
                   _keypadChars FE55                 ___lwdiv@divisor 0003                 ___lwdiv@counter 0007  
                      __ptext10 F2EE                        __ptext11 F1D2                        __ptext12 F1EE  
                      __ptext13 F370                        __ptext14 F1AA                        __ptext15 F40E  
                _printStringLCD F5AA                  _LCD_VERT_LIMIT FE89                      strcpy@from 0009  
                 __size_of_main 002E                    ??_pollKeypad 0001                     ??_lcdNibble 0001  
            __end_of_inputEntry FE04        __end_of_lcd_shift_cursor F1EE                       printf@val 0016  
                 _printErrorLCD F214               lcd_shift_cursor@n 0006                       putch@data 0003  
                    _INTCONbits 000FF2          __end_of_printStringLCD F84E          __end_of_LCD_VERT_LIMIT FE8A  
printStringLCD@newlineCharIndex 0012              __end_of_pollKeypad F262                  _lcd_set_cursor F2EE  
                 _LCD_SIZE_HORZ FE88                ___lwmod@dividend 0008                   _LCD_SIZE_VERT FE87  
                      printf@ap 0012                     lcdInst@data 0003               inputEntry@pressed 005F  
                ?_printErrorLCD 0016                 ___lwmod@divisor 000A                        strcpy@cp 000B  
                      strcpy@to 0007                 ___lwmod@counter 000C                 ?_printStringLCD 0007  
        __end_of_lcd_set_cursor F32E        lcd_shift_cursor@numChars 0005  
